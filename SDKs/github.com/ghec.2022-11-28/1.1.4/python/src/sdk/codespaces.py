"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Codespaces:
    r"""Endpoints to manage Codespaces using the REST API."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def codespaces_add_repository_for_secret_for_authenticated_user(self, request: operations.CodespacesAddRepositoryForSecretForAuthenticatedUserRequest) -> operations.CodespacesAddRepositoryForSecretForAuthenticatedUserResponse:
        r"""Add a selected repository to a user secret
        Adds a repository to the selected repositories for a user's codespace secret.
        You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
        GitHub Apps must have write access to the `codespaces_user_secrets` user permission and write access to the `codespaces_secrets` repository permission on the referenced repository to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#add-a-selected-repository-to-a-user-secret - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodespacesAddRepositoryForSecretForAuthenticatedUserRequest, base_url, '/user/codespaces/secrets/{secret_name}/repositories/{repository_id}', request)
        
        
        client = self._client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesAddRepositoryForSecretForAuthenticatedUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def codespaces_add_selected_repo_to_org_secret(self, request: operations.CodespacesAddSelectedRepoToOrgSecretRequest) -> operations.CodespacesAddSelectedRepoToOrgSecretResponse:
        r"""Add selected repository to an organization secret
        Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#add-selected-repository-to-an-organization-secret - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodespacesAddSelectedRepoToOrgSecretRequest, base_url, '/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}', request)
        
        
        client = self._client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesAddSelectedRepoToOrgSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [204, 409]:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidationError])
                res.validation_error = out

        return res

    def codespaces_codespace_machines_for_authenticated_user(self, request: operations.CodespacesCodespaceMachinesForAuthenticatedUserRequest) -> operations.CodespacesCodespaceMachinesForAuthenticatedUserResponse:
        r"""List machine types for a codespace
        List the machine types a codespace can transition to use.
        
        You must authenticate using an access token with the `codespace` scope to use this endpoint.
        
        GitHub Apps must have read access to the `codespaces_metadata` repository permission to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#list-machine-types-for-a-codespace - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodespacesCodespaceMachinesForAuthenticatedUserRequest, base_url, '/user/codespaces/{codespace_name}/machines', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesCodespaceMachinesForAuthenticatedUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CodespacesCodespaceMachinesForAuthenticatedUser200ApplicationJSON])
                res.codespaces_codespace_machines_for_authenticated_user_200_application_json_object = out
        elif http_res.status_code == 304:
            pass
        elif http_res.status_code in [401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def codespaces_create_for_authenticated_user(self, request: Any) -> operations.CodespacesCreateForAuthenticatedUserResponse:
        r"""Create a codespace for the authenticated user
        Creates a new codespace, owned by the authenticated user.
        
        This endpoint requires either a `repository_id` OR a `pull_request` but not both.
        
        You must authenticate using an access token with the `codespace` scope to use this endpoint.
        
        GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#create-a-codespace-for-the-authenticated-user - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/user/codespaces'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesCreateForAuthenticatedUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [201, 202]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Codespace])
                res.codespace = out
        elif http_res.status_code in [401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CodespacesCreateForAuthenticatedUser503ApplicationJSON])
                res.codespaces_create_for_authenticated_user_503_application_json_object = out

        return res

    def codespaces_create_or_update_org_secret(self, request: operations.CodespacesCreateOrUpdateOrgSecretRequest) -> operations.CodespacesCreateOrUpdateOrgSecretResponse:
        r"""Create or update an organization secret
        Creates or updates an organization secret with an encrypted value. Encrypt your secret using
        [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
        token with the `admin:org` scope to use this endpoint.
        
        #### Example encrypting a secret using Node.js
        
        Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.
        
        ```
        const sodium = require('libsodium-wrappers')
        const secret = 'plain-text-secret' // replace with the secret you want to encrypt
        const key = 'base64-encoded-public-key' // replace with the Base64 encoded public key
        
        //Check if libsodium is ready and then proceed.
        sodium.ready.then(() => {
          // Convert Secret & Base64 key to Uint8Array.
          let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)
          let binsec = sodium.from_string(secret)
        
          //Encrypt the secret using LibSodium
          let encBytes = sodium.crypto_box_seal(binsec, binkey)
        
          // Convert encrypted Uint8Array to Base64
          let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)
        
          console.log(output)
        });
        ```
        
        #### Example encrypting a secret using Python
        
        Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
        
        ```
        from base64 import b64encode
        from nacl import encoding, public
        
        def encrypt(public_key: str, secret_value: str) -> str:
          \"\"\"Encrypt a Unicode string using the public key.\"\"\"
          public_key = public.PublicKey(public_key.encode(\"utf-8\"), encoding.Base64Encoder())
          sealed_box = public.SealedBox(public_key)
          encrypted = sealed_box.encrypt(secret_value.encode(\"utf-8\"))
          return b64encode(encrypted).decode(\"utf-8\")
        ```
        
        #### Example encrypting a secret using C#
        
        Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
        
        ```
        var secretValue = System.Text.Encoding.UTF8.GetBytes(\"mySecret\");
        var publicKey = Convert.FromBase64String(\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\");
        
        var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
        
        Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
        ```
        
        #### Example encrypting a secret using Ruby
        
        Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
        
        ```ruby
        require \"rbnacl\"
        require \"base64\"
        
        key = Base64.decode64(\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\")
        public_key = RbNaCl::PublicKey.new(key)
        
        box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
        encrypted_secret = box.encrypt(\"my_secret\")
        
        # Print the base64 encoded secret
        puts Base64.strict_encode64(encrypted_secret)
        ```
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#create-or-update-an-organization-secret - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodespacesCreateOrUpdateOrgSecretRequest, base_url, '/orgs/{org}/codespaces/secrets/{secret_name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesCreateOrUpdateOrgSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty_object = out
        elif http_res.status_code == 204:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidationError])
                res.validation_error = out

        return res

    def codespaces_create_or_update_repo_secret(self, request: operations.CodespacesCreateOrUpdateRepoSecretRequest) -> operations.CodespacesCreateOrUpdateRepoSecretResponse:
        r"""Create or update a repository secret
        Creates or updates a repository secret with an encrypted value. Encrypt your secret using
        [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
        token with the `repo` scope to use this endpoint. GitHub Apps must have write access to the `codespaces_secrets`
        repository permission to use this endpoint.
        
        #### Example of encrypting a secret using Node.js
        
        Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.
        
        ```
        const sodium = require('libsodium-wrappers')
        const secret = 'plain-text-secret' // replace with the secret you want to encrypt
        const key = 'base64-encoded-public-key' // replace with the Base64 encoded public key
        
        //Check if libsodium is ready and then proceed.
        sodium.ready.then(() => {
          // Convert Secret & Base64 key to Uint8Array.
          let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)
          let binsec = sodium.from_string(secret)
        
          //Encrypt the secret using LibSodium
          let encBytes = sodium.crypto_box_seal(binsec, binkey)
        
          // Convert encrypted Uint8Array to Base64
          let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)
        
          console.log(output)
        });
        ```
        
        #### Example of encrypting a secret using Python
        
        Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
        
        ```
        from base64 import b64encode
        from nacl import encoding, public
        
        def encrypt(public_key: str, secret_value: str) -> str:
          \"\"\"Encrypt a Unicode string using the public key.\"\"\"
          public_key = public.PublicKey(public_key.encode(\"utf-8\"), encoding.Base64Encoder())
          sealed_box = public.SealedBox(public_key)
          encrypted = sealed_box.encrypt(secret_value.encode(\"utf-8\"))
          return b64encode(encrypted).decode(\"utf-8\")
        ```
        
        #### Example of encrypting a secret using C#
        
        Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
        
        ```
        var secretValue = System.Text.Encoding.UTF8.GetBytes(\"mySecret\");
        var publicKey = Convert.FromBase64String(\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\");
        
        var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
        
        Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
        ```
        
        #### Example of encrypting a secret using Ruby
        
        Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
        
        ```ruby
        require \"rbnacl\"
        require \"base64\"
        
        key = Base64.decode64(\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\")
        public_key = RbNaCl::PublicKey.new(key)
        
        box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
        encrypted_secret = box.encrypt(\"my_secret\")
        
        # Print the base64 encoded secret
        puts Base64.strict_encode64(encrypted_secret)
        ```
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#create-or-update-a-repository-secret - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodespacesCreateOrUpdateRepoSecretRequest, base_url, '/repos/{owner}/{repo}/codespaces/secrets/{secret_name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesCreateOrUpdateRepoSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty_object = out
        elif http_res.status_code == 204:
            pass

        return res

    def codespaces_create_or_update_secret_for_authenticated_user(self, request: operations.CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest) -> operations.CodespacesCreateOrUpdateSecretForAuthenticatedUserResponse:
        r"""Create or update a secret for the authenticated user
        Creates or updates a secret for a user's codespace with an encrypted value. Encrypt your secret using
        [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages).
        
        You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must also have Codespaces access to use this endpoint.
        
        GitHub Apps must have write access to the `codespaces_user_secrets` user permission and `codespaces_secrets` repository permission on all referenced repositories to use this endpoint.
        
        #### Example encrypting a secret using Node.js
        
        Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.
        
        ```
        const sodium = require('libsodium-wrappers')
        const secret = 'plain-text-secret' // replace with the secret you want to encrypt
        const key = 'base64-encoded-public-key' // replace with the Base64 encoded public key
        
        //Check if libsodium is ready and then proceed.
        sodium.ready.then(() => {
          // Convert Secret & Base64 key to Uint8Array.
          let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)
          let binsec = sodium.from_string(secret)
        
          //Encrypt the secret using LibSodium
          let encBytes = sodium.crypto_box_seal(binsec, binkey)
        
          // Convert encrypted Uint8Array to Base64
          let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)
        
          console.log(output)
        });
        ```
        
        #### Example encrypting a secret using Python
        
        Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
        
        ```
        from base64 import b64encode
        from nacl import encoding, public
        
        def encrypt(public_key: str, secret_value: str) -> str:
          \"\"\"Encrypt a Unicode string using the public key.\"\"\"
          public_key = public.PublicKey(public_key.encode(\"utf-8\"), encoding.Base64Encoder())
          sealed_box = public.SealedBox(public_key)
          encrypted = sealed_box.encrypt(secret_value.encode(\"utf-8\"))
          return b64encode(encrypted).decode(\"utf-8\")
        ```
        
        #### Example encrypting a secret using C#
        
        Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
        
        ```
        var secretValue = System.Text.Encoding.UTF8.GetBytes(\"mySecret\");
        var publicKey = Convert.FromBase64String(\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\");
        
        var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
        
        Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
        ```
        
        #### Example encrypting a secret using Ruby
        
        Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
        
        ```ruby
        require \"rbnacl\"
        require \"base64\"
        
        key = Base64.decode64(\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\")
        public_key = RbNaCl::PublicKey.new(key)
        
        box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
        encrypted_secret = box.encrypt(\"my_secret\")
        
        # Print the base64 encoded secret
        puts Base64.strict_encode64(encrypted_secret)
        ```
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#create-or-update-a-secret-for-the-authenticated-user - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest, base_url, '/user/codespaces/secrets/{secret_name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesCreateOrUpdateSecretForAuthenticatedUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty_object = out
        elif http_res.status_code == 204:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidationError])
                res.validation_error = out

        return res

    def codespaces_create_with_pr_for_authenticated_user(self, request: operations.CodespacesCreateWithPrForAuthenticatedUserRequest) -> operations.CodespacesCreateWithPrForAuthenticatedUserResponse:
        r"""Create a codespace from a pull request
        Creates a codespace owned by the authenticated user for the specified pull request.
        
        You must authenticate using an access token with the `codespace` scope to use this endpoint.
        
        GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#create-a-codespace-from-a-pull-request - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodespacesCreateWithPrForAuthenticatedUserRequest, base_url, '/repos/{owner}/{repo}/pulls/{pull_number}/codespaces', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesCreateWithPrForAuthenticatedUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [201, 202]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Codespace])
                res.codespace = out
        elif http_res.status_code in [401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CodespacesCreateWithPrForAuthenticatedUser503ApplicationJSON])
                res.codespaces_create_with_pr_for_authenticated_user_503_application_json_object = out

        return res

    def codespaces_create_with_repo_for_authenticated_user(self, request: operations.CodespacesCreateWithRepoForAuthenticatedUserRequest) -> operations.CodespacesCreateWithRepoForAuthenticatedUserResponse:
        r"""Create a codespace in a repository
        Creates a codespace owned by the authenticated user in the specified repository.
        
        You must authenticate using an access token with the `codespace` scope to use this endpoint.
        
        GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#create-a-codespace-in-a-repository - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodespacesCreateWithRepoForAuthenticatedUserRequest, base_url, '/repos/{owner}/{repo}/codespaces', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesCreateWithRepoForAuthenticatedUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [201, 202]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Codespace])
                res.codespace = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimError])
                res.scim_error = out
        elif http_res.status_code in [401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CodespacesCreateWithRepoForAuthenticatedUser503ApplicationJSON])
                res.codespaces_create_with_repo_for_authenticated_user_503_application_json_object = out

        return res

    def codespaces_delete_codespaces_billing_users(self, request: operations.CodespacesDeleteCodespacesBillingUsersRequest) -> operations.CodespacesDeleteCodespacesBillingUsersResponse:
        r"""Removes users from Codespaces billing for an organization
        Codespaces for the specified users will no longer be billed to the organization.
        To use this endpoint, the billing settings for the organization must be set to `selected_members`. For information on how to change this setting please see [these docs].(https://docs.github.com/enterprise-cloud@latest//rest/codespaces/organizations#manage-access-control-for-organization-codespaces) You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#delete-codespaces-billing-users - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodespacesDeleteCodespacesBillingUsersRequest, base_url, '/orgs/{org}/codespaces/billing/selected_users', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('DELETE', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesDeleteCodespacesBillingUsersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [204, 304, 400]:
            pass
        elif http_res.status_code in [404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidationError])
                res.validation_error = out

        return res

    def codespaces_delete_for_authenticated_user(self, request: operations.CodespacesDeleteForAuthenticatedUserRequest) -> operations.CodespacesDeleteForAuthenticatedUserResponse:
        r"""Delete a codespace for the authenticated user
        Deletes a user's codespace.
        
        You must authenticate using an access token with the `codespace` scope to use this endpoint.
        
        GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#delete-a-codespace-for-the-authenticated-user - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodespacesDeleteForAuthenticatedUserRequest, base_url, '/user/codespaces/{codespace_name}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesDeleteForAuthenticatedUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.codespaces_delete_for_authenticated_user_202_application_json_object = out
        elif http_res.status_code == 304:
            pass
        elif http_res.status_code in [401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def codespaces_delete_from_organization(self, request: operations.CodespacesDeleteFromOrganizationRequest) -> operations.CodespacesDeleteFromOrganizationResponse:
        r"""Delete a codespace from the organization
        Deletes a user's codespace.
        
        You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodespacesDeleteFromOrganizationRequest, base_url, '/orgs/{org}/members/{username}/codespaces/{codespace_name}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesDeleteFromOrganizationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.codespaces_delete_from_organization_202_application_json_object = out
        elif http_res.status_code == 304:
            pass
        elif http_res.status_code in [401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def codespaces_delete_org_secret(self, request: operations.CodespacesDeleteOrgSecretRequest) -> operations.CodespacesDeleteOrgSecretResponse:
        r"""Delete an organization secret
        Deletes an organization secret using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#delete-an-organization-secret - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodespacesDeleteOrgSecretRequest, base_url, '/orgs/{org}/codespaces/secrets/{secret_name}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesDeleteOrgSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def codespaces_delete_repo_secret(self, request: operations.CodespacesDeleteRepoSecretRequest) -> operations.CodespacesDeleteRepoSecretResponse:
        r"""Delete a repository secret
        Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have write access to the `codespaces_secrets` repository permission to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#delete-a-repository-secret - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodespacesDeleteRepoSecretRequest, base_url, '/repos/{owner}/{repo}/codespaces/secrets/{secret_name}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesDeleteRepoSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def codespaces_delete_secret_for_authenticated_user(self, request: operations.CodespacesDeleteSecretForAuthenticatedUserRequest) -> operations.CodespacesDeleteSecretForAuthenticatedUserResponse:
        r"""Delete a secret for the authenticated user
        Deletes a secret from a user's codespaces using the secret name. Deleting the secret will remove access from all codespaces that were allowed to access the secret.
        
        You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
        
        GitHub Apps must have write access to the `codespaces_user_secrets` user permission to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#delete-a-secret-for-the-authenticated-user - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodespacesDeleteSecretForAuthenticatedUserRequest, base_url, '/user/codespaces/secrets/{secret_name}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesDeleteSecretForAuthenticatedUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def codespaces_export_for_authenticated_user(self, request: operations.CodespacesExportForAuthenticatedUserRequest) -> operations.CodespacesExportForAuthenticatedUserResponse:
        r"""Export a codespace for the authenticated user
        Triggers an export of the specified codespace and returns a URL and ID where the status of the export can be monitored.
        
        If changes cannot be pushed to the codespace's repository, they will be pushed to a new or previously-existing fork instead.
        
        You must authenticate using a personal access token with the `codespace` scope to use this endpoint.
        
        GitHub Apps must have write access to the `codespaces_lifecycle_admin` repository permission to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/codespaces/codespaces#export-a-codespace-for-the-authenticated-user - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodespacesExportForAuthenticatedUserRequest, base_url, '/user/codespaces/{codespace_name}/exports', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesExportForAuthenticatedUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CodespaceExportDetails])
                res.codespace_export_details = out
        elif http_res.status_code in [401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidationError])
                res.validation_error = out

        return res

    def codespaces_get_codespaces_for_user_in_org(self, request: operations.CodespacesGetCodespacesForUserInOrgRequest) -> operations.CodespacesGetCodespacesForUserInOrgResponse:
        r"""List codespaces for a user in organization
        Lists the codespaces that a member of an organization has for repositories in that organization.
        
        You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#get-codespaces-for-user-in-org - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodespacesGetCodespacesForUserInOrgRequest, base_url, '/orgs/{org}/members/{username}/codespaces', request)
        
        query_params = utils.get_query_params(operations.CodespacesGetCodespacesForUserInOrgRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesGetCodespacesForUserInOrgResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CodespacesGetCodespacesForUserInOrg200ApplicationJSON])
                res.codespaces_get_codespaces_for_user_in_org_200_application_json_object = out
        elif http_res.status_code == 304:
            pass
        elif http_res.status_code in [401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def codespaces_get_export_details_for_authenticated_user(self, request: operations.CodespacesGetExportDetailsForAuthenticatedUserRequest) -> operations.CodespacesGetExportDetailsForAuthenticatedUserResponse:
        r"""Get details about a codespace export
        Gets information about an export of a codespace.
        
        You must authenticate using a personal access token with the `codespace` scope to use this endpoint.
        
        GitHub Apps must have read access to the `codespaces_lifecycle_admin` repository permission to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/codespaces/codespaces#get-details-about-a-codespace-export - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodespacesGetExportDetailsForAuthenticatedUserRequest, base_url, '/user/codespaces/{codespace_name}/exports/{export_id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesGetExportDetailsForAuthenticatedUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CodespaceExportDetails])
                res.codespace_export_details = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def codespaces_get_for_authenticated_user(self, request: operations.CodespacesGetForAuthenticatedUserRequest) -> operations.CodespacesGetForAuthenticatedUserResponse:
        r"""Get a codespace for the authenticated user
        Gets information about a user's codespace.
        
        You must authenticate using an access token with the `codespace` scope to use this endpoint.
        
        GitHub Apps must have read access to the `codespaces` repository permission to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#get-a-codespace-for-the-authenticated-user - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodespacesGetForAuthenticatedUserRequest, base_url, '/user/codespaces/{codespace_name}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesGetForAuthenticatedUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Codespace])
                res.codespace = out
        elif http_res.status_code == 304:
            pass
        elif http_res.status_code in [401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def codespaces_get_org_public_key(self, request: operations.CodespacesGetOrgPublicKeyRequest) -> operations.CodespacesGetOrgPublicKeyResponse:
        r"""Get an organization public key
        Gets a public key for an organization, which is required in order to encrypt secrets. You need to encrypt the value of a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#get-an-organization-public-key - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodespacesGetOrgPublicKeyRequest, base_url, '/orgs/{org}/codespaces/secrets/public-key', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesGetOrgPublicKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CodespacesPublicKey])
                res.codespaces_public_key = out

        return res

    def codespaces_get_org_secret(self, request: operations.CodespacesGetOrgSecretRequest) -> operations.CodespacesGetOrgSecretResponse:
        r"""Get an organization secret
        Gets an organization secret without revealing its encrypted value.
        You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#get-an-organization-secret - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodespacesGetOrgSecretRequest, base_url, '/orgs/{org}/codespaces/secrets/{secret_name}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesGetOrgSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CodespacesOrgSecret])
                res.codespaces_org_secret = out

        return res

    def codespaces_get_public_key_for_authenticated_user(self) -> operations.CodespacesGetPublicKeyForAuthenticatedUserResponse:
        r"""Get public key for the authenticated user
        Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.
        
        You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
        
        GitHub Apps must have read access to the `codespaces_user_secrets` user permission to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#get-public-key-for-the-authenticated-user - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/user/codespaces/secrets/public-key'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesGetPublicKeyForAuthenticatedUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CodespacesUserPublicKey])
                res.codespaces_user_public_key = out

        return res

    def codespaces_get_repo_public_key(self, request: operations.CodespacesGetRepoPublicKeyRequest) -> operations.CodespacesGetRepoPublicKeyResponse:
        r"""Get a repository public key
        Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have write access to the `codespaces_secrets` repository permission to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#get-a-repository-public-key - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodespacesGetRepoPublicKeyRequest, base_url, '/repos/{owner}/{repo}/codespaces/secrets/public-key', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesGetRepoPublicKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CodespacesPublicKey])
                res.codespaces_public_key = out

        return res

    def codespaces_get_repo_secret(self, request: operations.CodespacesGetRepoSecretRequest) -> operations.CodespacesGetRepoSecretResponse:
        r"""Get a repository secret
        Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have write access to the `codespaces_secrets` repository permission to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#get-a-repository-secret - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodespacesGetRepoSecretRequest, base_url, '/repos/{owner}/{repo}/codespaces/secrets/{secret_name}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesGetRepoSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RepoCodespacesSecret])
                res.repo_codespaces_secret = out

        return res

    def codespaces_get_secret_for_authenticated_user(self, request: operations.CodespacesGetSecretForAuthenticatedUserRequest) -> operations.CodespacesGetSecretForAuthenticatedUserResponse:
        r"""Get a secret for the authenticated user
        Gets a secret available to a user's codespaces without revealing its encrypted value.
        
        You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
        
        GitHub Apps must have read access to the `codespaces_user_secrets` user permission to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#get-a-secret-for-the-authenticated-user - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodespacesGetSecretForAuthenticatedUserRequest, base_url, '/user/codespaces/secrets/{secret_name}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesGetSecretForAuthenticatedUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CodespacesSecret])
                res.codespaces_secret = out

        return res

    def codespaces_list_devcontainers_in_repository_for_authenticated_user(self, request: operations.CodespacesListDevcontainersInRepositoryForAuthenticatedUserRequest) -> operations.CodespacesListDevcontainersInRepositoryForAuthenticatedUserResponse:
        r"""List devcontainer configurations in a repository for the authenticated user
        Lists the devcontainer.json files associated with a specified repository and the authenticated user. These files
        specify launchpoint configurations for codespaces created within the repository.
        
        You must authenticate using an access token with the `codespace` scope to use this endpoint.
        
        GitHub Apps must have read access to the `codespaces_metadata` repository permission to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#list-devcontainers-in-a-repository-for-the-authenticated-user - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodespacesListDevcontainersInRepositoryForAuthenticatedUserRequest, base_url, '/repos/{owner}/{repo}/codespaces/devcontainers', request)
        
        query_params = utils.get_query_params(operations.CodespacesListDevcontainersInRepositoryForAuthenticatedUserRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesListDevcontainersInRepositoryForAuthenticatedUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CodespacesListDevcontainersInRepositoryForAuthenticatedUser200ApplicationJSON])
                res.codespaces_list_devcontainers_in_repository_for_authenticated_user_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimError])
                res.scim_error = out
        elif http_res.status_code in [401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def codespaces_list_for_authenticated_user(self, request: operations.CodespacesListForAuthenticatedUserRequest) -> operations.CodespacesListForAuthenticatedUserResponse:
        r"""List codespaces for the authenticated user
        Lists the authenticated user's codespaces.
        
        You must authenticate using an access token with the `codespace` scope to use this endpoint.
        
        GitHub Apps must have read access to the `codespaces` repository permission to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#list-codespaces-for-the-authenticated-user - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/user/codespaces'
        
        query_params = utils.get_query_params(operations.CodespacesListForAuthenticatedUserRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesListForAuthenticatedUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CodespacesListForAuthenticatedUser200ApplicationJSON])
                res.codespaces_list_for_authenticated_user_200_application_json_object = out
        elif http_res.status_code == 304:
            pass
        elif http_res.status_code in [401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def codespaces_list_in_organization(self, request: operations.CodespacesListInOrganizationRequest) -> operations.CodespacesListInOrganizationResponse:
        r"""List codespaces for the organization
        Lists the codespaces associated to a specified organization.
        
        You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#list-in-organization - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodespacesListInOrganizationRequest, base_url, '/orgs/{org}/codespaces', request)
        
        query_params = utils.get_query_params(operations.CodespacesListInOrganizationRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesListInOrganizationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CodespacesListInOrganization200ApplicationJSON])
                res.codespaces_list_in_organization_200_application_json_object = out
        elif http_res.status_code == 304:
            pass
        elif http_res.status_code in [401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def codespaces_list_in_repository_for_authenticated_user(self, request: operations.CodespacesListInRepositoryForAuthenticatedUserRequest) -> operations.CodespacesListInRepositoryForAuthenticatedUserResponse:
        r"""List codespaces in a repository for the authenticated user
        Lists the codespaces associated to a specified repository and the authenticated user.
        
        You must authenticate using an access token with the `codespace` scope to use this endpoint.
        
        GitHub Apps must have read access to the `codespaces` repository permission to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#list-codespaces-in-a-repository-for-the-authenticated-user - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodespacesListInRepositoryForAuthenticatedUserRequest, base_url, '/repos/{owner}/{repo}/codespaces', request)
        
        query_params = utils.get_query_params(operations.CodespacesListInRepositoryForAuthenticatedUserRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesListInRepositoryForAuthenticatedUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CodespacesListInRepositoryForAuthenticatedUser200ApplicationJSON])
                res.codespaces_list_in_repository_for_authenticated_user_200_application_json_object = out
        elif http_res.status_code in [401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def codespaces_list_org_secrets(self, request: operations.CodespacesListOrgSecretsRequest) -> operations.CodespacesListOrgSecretsResponse:
        r"""List organization secrets
        Lists all Codespaces secrets available at the organization-level without revealing their encrypted values.
        You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#list-organization-secrets - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodespacesListOrgSecretsRequest, base_url, '/orgs/{org}/codespaces/secrets', request)
        
        query_params = utils.get_query_params(operations.CodespacesListOrgSecretsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesListOrgSecretsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CodespacesListOrgSecrets200ApplicationJSON])
                res.codespaces_list_org_secrets_200_application_json_object = out

        return res

    def codespaces_list_repo_secrets(self, request: operations.CodespacesListRepoSecretsRequest) -> operations.CodespacesListRepoSecretsResponse:
        r"""List repository secrets
        Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have write access to the `codespaces_secrets` repository permission to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#list-repository-secrets - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodespacesListRepoSecretsRequest, base_url, '/repos/{owner}/{repo}/codespaces/secrets', request)
        
        query_params = utils.get_query_params(operations.CodespacesListRepoSecretsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesListRepoSecretsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CodespacesListRepoSecrets200ApplicationJSON])
                res.codespaces_list_repo_secrets_200_application_json_object = out

        return res

    def codespaces_list_repositories_for_secret_for_authenticated_user(self, request: operations.CodespacesListRepositoriesForSecretForAuthenticatedUserRequest) -> operations.CodespacesListRepositoriesForSecretForAuthenticatedUserResponse:
        r"""List selected repositories for a user secret
        List the repositories that have been granted the ability to use a user's codespace secret.
        
        You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
        
        GitHub Apps must have read access to the `codespaces_user_secrets` user permission and write access to the `codespaces_secrets` repository permission on all referenced repositories to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#list-selected-repositories-for-a-user-secret - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodespacesListRepositoriesForSecretForAuthenticatedUserRequest, base_url, '/user/codespaces/secrets/{secret_name}/repositories', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesListRepositoriesForSecretForAuthenticatedUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CodespacesListRepositoriesForSecretForAuthenticatedUser200ApplicationJSON])
                res.codespaces_list_repositories_for_secret_for_authenticated_user_200_application_json_object = out
        elif http_res.status_code in [401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def codespaces_list_secrets_for_authenticated_user(self, request: operations.CodespacesListSecretsForAuthenticatedUserRequest) -> operations.CodespacesListSecretsForAuthenticatedUserResponse:
        r"""List secrets for the authenticated user
        Lists all secrets available for a user's Codespaces without revealing their
        encrypted values.
        
        You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
        
        GitHub Apps must have read access to the `codespaces_user_secrets` user permission to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#list-secrets-for-the-authenticated-user - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/user/codespaces/secrets'
        
        query_params = utils.get_query_params(operations.CodespacesListSecretsForAuthenticatedUserRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesListSecretsForAuthenticatedUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CodespacesListSecretsForAuthenticatedUser200ApplicationJSON])
                res.codespaces_list_secrets_for_authenticated_user_200_application_json_object = out

        return res

    def codespaces_list_selected_repos_for_org_secret(self, request: operations.CodespacesListSelectedReposForOrgSecretRequest) -> operations.CodespacesListSelectedReposForOrgSecretResponse:
        r"""List selected repositories for an organization secret
        Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#list-selected-repositories-for-an-organization-secret - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodespacesListSelectedReposForOrgSecretRequest, base_url, '/orgs/{org}/codespaces/secrets/{secret_name}/repositories', request)
        
        query_params = utils.get_query_params(operations.CodespacesListSelectedReposForOrgSecretRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesListSelectedReposForOrgSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CodespacesListSelectedReposForOrgSecret200ApplicationJSON])
                res.codespaces_list_selected_repos_for_org_secret_200_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def codespaces_pre_flight_with_repo_for_authenticated_user(self, request: operations.CodespacesPreFlightWithRepoForAuthenticatedUserRequest) -> operations.CodespacesPreFlightWithRepoForAuthenticatedUserResponse:
        r"""Get default attributes for a codespace
        Gets the default attributes for codespaces created by the user with the repository.
        
        You must authenticate using an access token with the `codespace` scope to use this endpoint.
        
        GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#preview-attributes-for-a-new-codespace - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodespacesPreFlightWithRepoForAuthenticatedUserRequest, base_url, '/repos/{owner}/{repo}/codespaces/new', request)
        
        query_params = utils.get_query_params(operations.CodespacesPreFlightWithRepoForAuthenticatedUserRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesPreFlightWithRepoForAuthenticatedUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CodespacesPreFlightWithRepoForAuthenticatedUser200ApplicationJSON])
                res.codespaces_pre_flight_with_repo_for_authenticated_user_200_application_json_object = out
        elif http_res.status_code in [401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def codespaces_publish_for_authenticated_user(self, request: operations.CodespacesPublishForAuthenticatedUserRequest) -> operations.CodespacesPublishForAuthenticatedUserResponse:
        r"""Create a repository from an unpublished codespace
        Publishes an unpublished codespace, creating a new repository and assigning it to the codespace.
        
        The codespace's token is granted write permissions to the repository, allowing the user to push their changes.
        
        This will fail for a codespace that is already published, meaning it has an associated repository.
        
        You must authenticate using a personal access token with the `codespace` scope to use this endpoint.
        
        GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces/codespaces#create-a-repository-from-an-unpublished-codespace - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodespacesPublishForAuthenticatedUserRequest, base_url, '/user/codespaces/{codespace_name}/publish', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesPublishForAuthenticatedUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CodespaceWithFullRepository])
                res.codespace_with_full_repository = out
        elif http_res.status_code in [401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidationError])
                res.validation_error = out

        return res

    def codespaces_remove_repository_for_secret_for_authenticated_user(self, request: operations.CodespacesRemoveRepositoryForSecretForAuthenticatedUserRequest) -> operations.CodespacesRemoveRepositoryForSecretForAuthenticatedUserResponse:
        r"""Remove a selected repository from a user secret
        Removes a repository from the selected repositories for a user's codespace secret.
        You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
        GitHub Apps must have write access to the `codespaces_user_secrets` user permission to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#remove-a-selected-repository-from-a-user-secret - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodespacesRemoveRepositoryForSecretForAuthenticatedUserRequest, base_url, '/user/codespaces/secrets/{secret_name}/repositories/{repository_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesRemoveRepositoryForSecretForAuthenticatedUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def codespaces_remove_selected_repo_from_org_secret(self, request: operations.CodespacesRemoveSelectedRepoFromOrgSecretRequest) -> operations.CodespacesRemoveSelectedRepoFromOrgSecretResponse:
        r"""Remove selected repository from an organization secret
        Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#remove-selected-repository-from-an-organization-secret - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodespacesRemoveSelectedRepoFromOrgSecretRequest, base_url, '/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesRemoveSelectedRepoFromOrgSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [204, 409]:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidationError])
                res.validation_error = out

        return res

    def codespaces_repo_machines_for_authenticated_user(self, request: operations.CodespacesRepoMachinesForAuthenticatedUserRequest) -> operations.CodespacesRepoMachinesForAuthenticatedUserResponse:
        r"""List available machine types for a repository
        List the machine types available for a given repository based on its configuration.
        
        You must authenticate using an access token with the `codespace` scope to use this endpoint.
        
        GitHub Apps must have write access to the `codespaces_metadata` repository permission to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#list-available-machine-types-for-a-repository - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodespacesRepoMachinesForAuthenticatedUserRequest, base_url, '/repos/{owner}/{repo}/codespaces/machines', request)
        
        query_params = utils.get_query_params(operations.CodespacesRepoMachinesForAuthenticatedUserRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesRepoMachinesForAuthenticatedUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CodespacesRepoMachinesForAuthenticatedUser200ApplicationJSON])
                res.codespaces_repo_machines_for_authenticated_user_200_application_json_object = out
        elif http_res.status_code == 304:
            pass
        elif http_res.status_code in [401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def codespaces_set_codespaces_billing(self, request: operations.CodespacesSetCodespacesBillingRequest) -> operations.CodespacesSetCodespacesBillingResponse:
        r"""Manage access control for organization codespaces
        Sets which users can access codespaces in an organization. This is synonymous with granting or revoking codespaces billing permissions for users according to the visibility.
        You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#set-codespaces-billing - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodespacesSetCodespacesBillingRequest, base_url, '/orgs/{org}/codespaces/billing', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesSetCodespacesBillingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [204, 304, 400]:
            pass
        elif http_res.status_code in [404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidationError])
                res.validation_error = out

        return res

    def codespaces_set_codespaces_billing_users(self, request: operations.CodespacesSetCodespacesBillingUsersRequest) -> operations.CodespacesSetCodespacesBillingUsersResponse:
        r"""Add users to Codespaces billing for an organization
        Codespaces for the specified users will be billed to the organization.
        To use this endpoint, the billing settings for the organization must be set to `selected_members`. For information on how to change this setting please see [these docs].(https://docs.github.com/enterprise-cloud@latest//rest/codespaces/organizations#manage-access-control-for-organization-codespaces) You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#set-codespaces-billing-users - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodespacesSetCodespacesBillingUsersRequest, base_url, '/orgs/{org}/codespaces/billing/selected_users', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesSetCodespacesBillingUsersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [204, 304, 400]:
            pass
        elif http_res.status_code in [404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidationError])
                res.validation_error = out

        return res

    def codespaces_set_repositories_for_secret_for_authenticated_user(self, request: operations.CodespacesSetRepositoriesForSecretForAuthenticatedUserRequest) -> operations.CodespacesSetRepositoriesForSecretForAuthenticatedUserResponse:
        r"""Set selected repositories for a user secret
        Select the repositories that will use a user's codespace secret.
        
        You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
        
        GitHub Apps must have write access to the `codespaces_user_secrets` user permission and write access to the `codespaces_secrets` repository permission on all referenced repositories to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#set-selected-repositories-for-a-user-secret - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodespacesSetRepositoriesForSecretForAuthenticatedUserRequest, base_url, '/user/codespaces/secrets/{secret_name}/repositories', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesSetRepositoriesForSecretForAuthenticatedUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def codespaces_set_selected_repos_for_org_secret(self, request: operations.CodespacesSetSelectedReposForOrgSecretRequest) -> operations.CodespacesSetSelectedReposForOrgSecretResponse:
        r"""Set selected repositories for an organization secret
        Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#set-selected-repositories-for-an-organization-secret - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodespacesSetSelectedReposForOrgSecretRequest, base_url, '/orgs/{org}/codespaces/secrets/{secret_name}/repositories', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesSetSelectedReposForOrgSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [204, 409]:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def codespaces_start_for_authenticated_user(self, request: operations.CodespacesStartForAuthenticatedUserRequest) -> operations.CodespacesStartForAuthenticatedUserResponse:
        r"""Start a codespace for the authenticated user
        Starts a user's codespace.
        
        You must authenticate using an access token with the `codespace` scope to use this endpoint.
        
        GitHub Apps must have write access to the `codespaces_lifecycle_admin` repository permission to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#start-a-codespace-for-the-authenticated-user - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodespacesStartForAuthenticatedUserRequest, base_url, '/user/codespaces/{codespace_name}/start', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesStartForAuthenticatedUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Codespace])
                res.codespace = out
        elif http_res.status_code == 304:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out
            if utils.match_content_type(content_type, 'application/scim+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScimError])
                res.scim_error = out
        elif http_res.status_code in [401, 402, 403, 404, 409, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def codespaces_stop_for_authenticated_user(self, request: operations.CodespacesStopForAuthenticatedUserRequest) -> operations.CodespacesStopForAuthenticatedUserResponse:
        r"""Stop a codespace for the authenticated user
        Stops a user's codespace.
        
        You must authenticate using an access token with the `codespace` scope to use this endpoint.
        
        GitHub Apps must have write access to the `codespaces_lifecycle_admin` repository permission to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#stop-a-codespace-for-the-authenticated-user - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodespacesStopForAuthenticatedUserRequest, base_url, '/user/codespaces/{codespace_name}/stop', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesStopForAuthenticatedUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Codespace])
                res.codespace = out
        elif http_res.status_code in [401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def codespaces_stop_in_organization(self, request: operations.CodespacesStopInOrganizationRequest) -> operations.CodespacesStopInOrganizationResponse:
        r"""Stop a codespace for an organization user
        Stops a user's codespace.
        
        You must authenticate using an access token with the `admin:org` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodespacesStopInOrganizationRequest, base_url, '/orgs/{org}/members/{username}/codespaces/{codespace_name}/stop', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesStopInOrganizationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Codespace])
                res.codespace = out
        elif http_res.status_code == 304:
            pass
        elif http_res.status_code in [401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def codespaces_update_for_authenticated_user(self, request: operations.CodespacesUpdateForAuthenticatedUserRequest) -> operations.CodespacesUpdateForAuthenticatedUserResponse:
        r"""Update a codespace for the authenticated user
        Updates a codespace owned by the authenticated user. Currently only the codespace's machine type and recent folders can be modified using this endpoint.
        
        If you specify a new machine type it will be applied the next time your codespace is started.
        
        You must authenticate using an access token with the `codespace` scope to use this endpoint.
        
        GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#update-a-codespace-for-the-authenticated-user - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CodespacesUpdateForAuthenticatedUserRequest, base_url, '/user/codespaces/{codespace_name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CodespacesUpdateForAuthenticatedUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Codespace])
                res.codespace = out
        elif http_res.status_code in [401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    