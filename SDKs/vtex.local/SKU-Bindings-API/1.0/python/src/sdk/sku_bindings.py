"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class SKUBindings:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def activate_sku_binding(self, request: operations.ActivateSKUBindingRequest) -> operations.ActivateSKUBindingResponse:
        r"""Activate SKU Binding
        Changes the status of an SKU Binding to active, setting `isActive` to `true`.
        
         > ℹ This path is an updated version of `/api/catalog_system/pvt/skuseller/activate/{sellerId}/{skuSellerId}`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActivateSKUBindingRequest, base_url, '/sku-binding/pvt/skuseller/activate/{sellerId}/{skuSellerId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActivateSKUBindingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def bindtoanothersku(self, request: operations.BindtoanotherskuRequest) -> operations.BindtoanotherskuResponse:
        r"""Bind a seller's SKU to another SKU
        Associates a seller's SKU to another marketplace SKU.
        
         > ℹ This path is an updated version of `/api/catalog_system/pvt/skuseller/{sellerId}/{sellerSkuId}`.
        
        ## Request body example
        
        ```json
        {
            \"StockKeepingUnitId\": 1
        }
        ```
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.BindtoanotherskuRequest, base_url, '/sku-binding/pvt/skuseller/{sellerId}/{sellerSkuId}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BindtoanotherskuResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def change_notification(self, request: operations.ChangeNotificationRequest) -> operations.ChangeNotificationResponse:
        r"""Change Notification with SKU ID
        The seller is responsible for suggesting new SKUs to be sold in the VTEX marketplace and also for informing the marketplace about changes in their SKUs that already exist in the marketplace. Both actions start with a catalog notification, which is made by this request.
        
        With this notification, the seller is telling the marketplace that something has changed about a specific SKU, like price or inventory, or that this is a new SKU that the seller would like to offer to the marketplace.
        
        The body of the request should be empty.
        
         > ℹ This path is an updated version of `/api/catalog_system/pvt/skuseller/changenotification/{skuId}`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ChangeNotificationRequest, base_url, '/sku-binding/pvt/skuseller/changenotification/{skuId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChangeNotificationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def deactivate_sku_binding(self, request: operations.DeactivateSKUBindingRequest) -> operations.DeactivateSKUBindingResponse:
        r"""Deactivate SKU Binding
        Changes the status of an SKU Binding to inactive, setting `isActive` to `false`.
        
          > ℹ This path is an updated version of `/api/catalog_system/pvt/skuseller/inactivate/{sellerId}/{skuSellerId}`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeactivateSKUBindingRequest, base_url, '/sku-binding/pvt/skuseller/inactivate/{sellerId}/{skuSellerId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeactivateSKUBindingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_sk_usellerassociation(self, request: operations.DeleteSKUsellerassociationRequest) -> operations.DeleteSKUsellerassociationResponse:
        r"""Remove a seller's SKU Binding
        Remove a seller's SKU binding, given the Seller ID and the SKU ID in the seller's store.
        
          > ℹ This path is an updated version of `/api/catalog_system/pvt/skuseller/remove/{sellerId}/{sellerSkuId}`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSKUsellerassociationRequest, base_url, '/sku-binding/pvt/skuseller/remove/{sellerId}/{sellerSkuId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSKUsellerassociationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_sk_useller(self, request: operations.GetSKUsellerRequest) -> operations.GetSKUsellerResponse:
        r"""Get details of a seller's SKU
        Retrieves the details of a seller's SKU given a seller ID and the SKU ID in the seller's store. 
        
         > ℹ This path is an updated version of `/api/catalog_system/pvt/skuseller/{sellerId}/{sellerSkuId}`.
        
        ## Response body example
        
        ```json
        {
            \"IsPersisted\": true,
            \"IsRemoved\": false,
            \"SkuSellerId\": 102,
            \"UpdateDate\": \"2021-04-12T20:06:59.413Z\",
            \"RequestedUpdateDate\": null,
            \"SellerStockKeepingUnitId\": \"71\",
            \"SellerId\": \"vtxkfj7352\",
            \"StockKeepingUnitId\": 1,
            \"IsActive\": true
        }
        ```
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSKUsellerRequest, base_url, '/sku-binding/pvt/skuseller/{sellerId}/{sellerSkuId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSKUsellerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetSKUseller200ApplicationJSON])
                res.get_sk_useller_200_application_json_object = out

        return res

    def getallby_seller_id(self, request: operations.GetallbySellerIDRequest) -> operations.GetallbySellerIDResponse:
        r"""Get all SKU Bindings by Seller ID
        Retrieves a list of SKU Bindings given a specific Seller ID. 
        
         > ℹ This path is an updated version of `/api/catalog_system/pvt/skuseller/list/bysellerId/{sellerId}`.
        
        ## Response body example
        
        ```json
        [
            {
                \"SellerStockKeepingUnitId\": \"24\",
                \"FreightCommissionPercentage\": null,
                \"ProductCommissionPercentage\": null,
                \"SellerId\": \"vtxkfj7352\",
                \"StockKeepingUnitId\": 121,
                \"IsActive\": true
            }
        ]
        ```
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetallbySellerIDRequest, base_url, '/sku-binding/pvt/skuseller/list/bysellerId/{sellerId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetallbySellerIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetallbySellerID200ApplicationJSON]])
                res.getallby_seller_id_200_application_json_objects = out

        return res

    def getby_sku_id(self, request: operations.GetbySkuIDRequest) -> operations.GetbySkuIDResponse:
        r"""Get SKU Bindings by SKU ID
        Retrieves SKU Bindings details by SKU ID.
        
        ## Response body example
        
        ```json
        [
            {
                \"Id\": 48,
                \"SellerId\": \"cosmetics1\",
                \"StockKeepingUnitId\": 1,
                \"SellerSkuId\": \"42\",
                \"IsActive\": true,
                \"LastUpdateDate\": \"2020-10-21T19:13:00.657\",
                \"SalesPolicy\": 0
            }
        ]
        ```
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetbySkuIDRequest, base_url, '/catalog/pvt/skusellers/{skuId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetbySkuIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetbySkuID200ApplicationJSON]])
                res.getby_sku_id_200_application_json_objects = out

        return res

    def getpagedadmin(self, request: operations.GetpagedadminRequest) -> operations.GetpagedadminResponse:
        r"""Get SKU Bindings information
        Retrieves SKU Bindings administrative information using optional query params `sellerId`, `skuId`, `sellerSkuId` and `IsActive` to filter results and `size` to restrict the amount of results. 
        
         > ℹ This path is an updated version of `/api/catalog_system/pvt/skuseller/admin`.
        
        ## Response body example
        
        ```json
        [
            {
                \"IsPersisted\": true,
                \"IsRemoved\": false,
                \"SkuSellerId\": 1,
                \"UpdateDate\": \"2019-12-04T01:56:00.673Z\",
                \"RequestedUpdateDate\": null,
                \"SellerStockKeepingUnitId\": \"12\",
                \"SellerId\": \"cosmetics1\",
                \"StockKeepingUnitId\": 25,
                \"IsActive\": true
            }
        ]
        ```
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/sku-binding/pvt/skuseller/admin'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetpagedadminRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetpagedadminResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Getpagedadmin200ApplicationJSON])
                res.getpagedadmin_200_application_json_object = out

        return res

    def getpagedby_seller_id(self, request: operations.GetpagedbySellerIDRequest) -> operations.GetpagedbySellerIDResponse:
        r"""Get paged SKU Bindings by Seller ID
        Retrieves a paged list of SKU Bindings given a specific Seller ID. 
        
         > ℹ This path is an updated version of `/api/catalog_system/pvt/skuseller/paged/sellerid/{sellerId}`.
        
        ## Response body example
        
        ```json
        [
            {
                \"SellerId\": \"vtxkfj7352\",
                \"StockKeepingUnitId\": 121,
                \"SellerStockKeepingUnitId\": \"24\",
                \"IsActive\": true,
                \"FreightCommissionPercentage\": null,
                \"ProductCommissionPercentage\": null
            },
            {
                \"SellerId\": \"vtxkfj7352\",
                \"StockKeepingUnitId\": 14,
                \"SellerStockKeepingUnitId\": \"60\",
                \"IsActive\": true,
                \"FreightCommissionPercentage\": null,
                \"ProductCommissionPercentage\": null
            }
        ]
        ```
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetpagedbySellerIDRequest, base_url, '/sku-binding/pvt/skuseller/paged/sellerid/{sellerId}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetpagedbySellerIDRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetpagedbySellerIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetpagedbySellerID200ApplicationJSON]])
                res.getpagedby_seller_id_200_application_json_objects = out

        return res

    def insert_sku_binding(self, request: operations.InsertSKUBindingRequest) -> operations.InsertSKUBindingResponse:
        r"""Insert SKU Binding
        Creates an SKU Binding, associating a seller's SKU with a marketplace's SKU.
        
         > ℹ This path is an updated version of `/api/catalog_system/pvt/skuseller/insertion`.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/sku-binding/pvt/skuseller/insertion'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InsertSKUBindingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_sku_binding_pvt_skuseller_changenotification_seller_id_seller_sku_id_(self, request: operations.PostSkuBindingPvtSkusellerChangenotificationSellerIDSellerSkuIDRequest) -> operations.PostSkuBindingPvtSkusellerChangenotificationSellerIDSellerSkuIDResponse:
        r"""Change Notification with Seller ID and Seller SKU ID
        The seller is responsible for suggesting new SKUs to be sold in the VTEX marketplace and also for informing the marketplace about changes in their SKUs that already exist in the marketplace. Both actions start with a catalog notification, which is made by this request.
        
        With this notification, the seller is telling the marketplace that something has changed about a specific SKU, like price or inventory, or that this is a new SKU that the seller would like to offer to the marketplace.
        
        There are two information expected by the marketplace in this request: the `sellerId`, which identifies the seller, and the `sellerSkuId`, which identifies the binding of the seller with the SKU.
        
        Both information are passed through the request URL. The body of the request should be empty.
         > ℹ This path is an updated version of `/api/catalog_system/pvt/skuseller/changenotification/{sellerId}/{sellerSkuId}`.
        
        ## Example
        
        Let's say your seller has the ID `123` in the marketplace and you want to inform the marketplace that has been a change in the SKU with ID `700`.
        
        In this case, you would have to replace the `sellerId` parameter with the value `123` and the `skuId` parameter with the value `700`. The URL of the request would be the following.
        
        ```
        https://{{accountName}}.vtexcommercestable.com.br/api/sku-binding/pvt/skuseller/changenotification/123/700
        ```
        
        ## Response codes
        
        The following response codes are possible for this request.
        * 200: the SKU whose ID was informed in the URL already exists in the marketplace and was found. The marketplace can now proceed with a fulfillment simulation in order to get updated information about this SKU's inventory and price.
        * 403: Failure in the authentication.
        * 404: the SKU was not found in the marketplace. The body of the response, in this case, should follow this format: \"Seller StockKeepingUnit `{{skuId}}` not found for this seller id `{{sellerId}}`. This means that the seller can now proceed with sending an offer to the marketplace in order to suggest that this SKU is sold there.
        * 429: Failure due to too many requests.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSkuBindingPvtSkusellerChangenotificationSellerIDSellerSkuIDRequest, base_url, '/sku-binding/pvt/skuseller/changenotification/{sellerId}/{sellerSkuId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSkuBindingPvtSkusellerChangenotificationSellerIDSellerSkuIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    