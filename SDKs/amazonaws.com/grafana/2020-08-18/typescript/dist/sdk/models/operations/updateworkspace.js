"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateWorkspaceResponse = exports.UpdateWorkspaceRequest = exports.UpdateWorkspaceRequestBody = exports.UpdateWorkspaceRequestBodyVpcConfiguration = exports.UpdateWorkspaceRequestBodyPermissionTypeEnum = exports.UpdateWorkspaceRequestBodyNetworkAccessControl = exports.UpdateWorkspaceRequestBodyAccountAccessTypeEnum = void 0;
var utils_1 = require("../../../internal/utils");
var shared = __importStar(require("../shared"));
var class_transformer_1 = require("class-transformer");
/**
 * Specifies whether the workspace can access Amazon Web Services resources in this Amazon Web Services account only, or whether it can also access Amazon Web Services resources in other accounts in the same organization. If you specify <code>ORGANIZATION</code>, you must specify which organizational units the workspace can access in the <code>workspaceOrganizationalUnits</code> parameter.
 */
var UpdateWorkspaceRequestBodyAccountAccessTypeEnum;
(function (UpdateWorkspaceRequestBodyAccountAccessTypeEnum) {
    UpdateWorkspaceRequestBodyAccountAccessTypeEnum["CurrentAccount"] = "CURRENT_ACCOUNT";
    UpdateWorkspaceRequestBodyAccountAccessTypeEnum["Organization"] = "ORGANIZATION";
})(UpdateWorkspaceRequestBodyAccountAccessTypeEnum = exports.UpdateWorkspaceRequestBodyAccountAccessTypeEnum || (exports.UpdateWorkspaceRequestBodyAccountAccessTypeEnum = {}));
/**
 * <p>The configuration settings for in-bound network access to your workspace.</p> <p>When this is configured, only listed IP addresses and VPC endpoints will be able to access your workspace. Standard Grafana authentication and authorization will still be required.</p> <p>If this is not configured, or is removed, then all IP addresses and VPC endpoints will be allowed. Standard Grafana authentication and authorization will still be required.</p>
 */
var UpdateWorkspaceRequestBodyNetworkAccessControl = /** @class */ (function (_super) {
    __extends(UpdateWorkspaceRequestBodyNetworkAccessControl, _super);
    function UpdateWorkspaceRequestBodyNetworkAccessControl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "prefixListIds" }),
        __metadata("design:type", Array)
    ], UpdateWorkspaceRequestBodyNetworkAccessControl.prototype, "prefixListIds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "vpceIds" }),
        __metadata("design:type", Array)
    ], UpdateWorkspaceRequestBodyNetworkAccessControl.prototype, "vpceIds", void 0);
    return UpdateWorkspaceRequestBodyNetworkAccessControl;
}(utils_1.SpeakeasyBase));
exports.UpdateWorkspaceRequestBodyNetworkAccessControl = UpdateWorkspaceRequestBodyNetworkAccessControl;
/**
 * <p>Use this parameter if you want to change a workspace from <code>SERVICE_MANAGED</code> to <code>CUSTOMER_MANAGED</code>. This allows you to manage the permissions that the workspace uses to access datasources and notification channels. If the workspace is in a member Amazon Web Services account of an organization, and that account is not a delegated administrator account, and you want the workspace to access data sources in other Amazon Web Services accounts in the organization, you must choose <code>CUSTOMER_MANAGED</code>.</p> <p>If you specify this as <code>CUSTOMER_MANAGED</code>, you must also specify a <code>workspaceRoleArn</code> that the workspace will use for accessing Amazon Web Services resources.</p> <p>For more information on the role and permissions needed, see <a href="https://docs.aws.amazon.com/grafana/latest/userguide/AMG-manage-permissions.html">Amazon Managed Grafana permissions and policies for Amazon Web Services data sources and notification channels</a> </p> <note> <p>Do not use this to convert a <code>CUSTOMER_MANAGED</code> workspace to <code>SERVICE_MANAGED</code>. Do not include this parameter if you want to leave the workspace as <code>SERVICE_MANAGED</code>.</p> <p>You can convert a <code>CUSTOMER_MANAGED</code> workspace to <code>SERVICE_MANAGED</code> using the Amazon Managed Grafana console. For more information, see <a href="https://docs.aws.amazon.com/grafana/latest/userguide/AMG-datasource-and-notification.html">Managing permissions for data sources and notification channels</a>.</p> </note>
 */
var UpdateWorkspaceRequestBodyPermissionTypeEnum;
(function (UpdateWorkspaceRequestBodyPermissionTypeEnum) {
    UpdateWorkspaceRequestBodyPermissionTypeEnum["CustomerManaged"] = "CUSTOMER_MANAGED";
    UpdateWorkspaceRequestBodyPermissionTypeEnum["ServiceManaged"] = "SERVICE_MANAGED";
})(UpdateWorkspaceRequestBodyPermissionTypeEnum = exports.UpdateWorkspaceRequestBodyPermissionTypeEnum || (exports.UpdateWorkspaceRequestBodyPermissionTypeEnum = {}));
/**
 * <p>The configuration settings for an Amazon VPC that contains data sources for your Grafana workspace to connect to.</p> <note> <p>Provided <code>securityGroupIds</code> and <code>subnetIds</code> must be part of the same VPC.</p> </note>
 */
var UpdateWorkspaceRequestBodyVpcConfiguration = /** @class */ (function (_super) {
    __extends(UpdateWorkspaceRequestBodyVpcConfiguration, _super);
    function UpdateWorkspaceRequestBodyVpcConfiguration() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "securityGroupIds" }),
        __metadata("design:type", Array)
    ], UpdateWorkspaceRequestBodyVpcConfiguration.prototype, "securityGroupIds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "subnetIds" }),
        __metadata("design:type", Array)
    ], UpdateWorkspaceRequestBodyVpcConfiguration.prototype, "subnetIds", void 0);
    return UpdateWorkspaceRequestBodyVpcConfiguration;
}(utils_1.SpeakeasyBase));
exports.UpdateWorkspaceRequestBodyVpcConfiguration = UpdateWorkspaceRequestBodyVpcConfiguration;
var UpdateWorkspaceRequestBody = /** @class */ (function (_super) {
    __extends(UpdateWorkspaceRequestBody, _super);
    function UpdateWorkspaceRequestBody() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "accountAccessType" }),
        __metadata("design:type", String)
    ], UpdateWorkspaceRequestBody.prototype, "accountAccessType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "networkAccessControl" }),
        (0, class_transformer_1.Type)(function () { return UpdateWorkspaceRequestBodyNetworkAccessControl; }),
        __metadata("design:type", UpdateWorkspaceRequestBodyNetworkAccessControl)
    ], UpdateWorkspaceRequestBody.prototype, "networkAccessControl", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "organizationRoleName" }),
        __metadata("design:type", String)
    ], UpdateWorkspaceRequestBody.prototype, "organizationRoleName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "permissionType" }),
        __metadata("design:type", String)
    ], UpdateWorkspaceRequestBody.prototype, "permissionType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "removeNetworkAccessConfiguration" }),
        __metadata("design:type", Boolean)
    ], UpdateWorkspaceRequestBody.prototype, "removeNetworkAccessConfiguration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "removeVpcConfiguration" }),
        __metadata("design:type", Boolean)
    ], UpdateWorkspaceRequestBody.prototype, "removeVpcConfiguration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "stackSetName" }),
        __metadata("design:type", String)
    ], UpdateWorkspaceRequestBody.prototype, "stackSetName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "vpcConfiguration" }),
        (0, class_transformer_1.Type)(function () { return UpdateWorkspaceRequestBodyVpcConfiguration; }),
        __metadata("design:type", UpdateWorkspaceRequestBodyVpcConfiguration)
    ], UpdateWorkspaceRequestBody.prototype, "vpcConfiguration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "workspaceDataSources" }),
        __metadata("design:type", Array)
    ], UpdateWorkspaceRequestBody.prototype, "workspaceDataSources", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "workspaceDescription" }),
        __metadata("design:type", String)
    ], UpdateWorkspaceRequestBody.prototype, "workspaceDescription", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "workspaceName" }),
        __metadata("design:type", String)
    ], UpdateWorkspaceRequestBody.prototype, "workspaceName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "workspaceNotificationDestinations" }),
        __metadata("design:type", Array)
    ], UpdateWorkspaceRequestBody.prototype, "workspaceNotificationDestinations", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "workspaceOrganizationalUnits" }),
        __metadata("design:type", Array)
    ], UpdateWorkspaceRequestBody.prototype, "workspaceOrganizationalUnits", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "workspaceRoleArn" }),
        __metadata("design:type", String)
    ], UpdateWorkspaceRequestBody.prototype, "workspaceRoleArn", void 0);
    return UpdateWorkspaceRequestBody;
}(utils_1.SpeakeasyBase));
exports.UpdateWorkspaceRequestBody = UpdateWorkspaceRequestBody;
var UpdateWorkspaceRequest = /** @class */ (function (_super) {
    __extends(UpdateWorkspaceRequest, _super);
    function UpdateWorkspaceRequest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "request, media_type=application/json" }),
        __metadata("design:type", UpdateWorkspaceRequestBody)
    ], UpdateWorkspaceRequest.prototype, "requestBody", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
        }),
        __metadata("design:type", String)
    ], UpdateWorkspaceRequest.prototype, "xAmzAlgorithm", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
        }),
        __metadata("design:type", String)
    ], UpdateWorkspaceRequest.prototype, "xAmzContentSha256", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "header, style=simple;explode=false;name=X-Amz-Credential",
        }),
        __metadata("design:type", String)
    ], UpdateWorkspaceRequest.prototype, "xAmzCredential", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "header, style=simple;explode=false;name=X-Amz-Date",
        }),
        __metadata("design:type", String)
    ], UpdateWorkspaceRequest.prototype, "xAmzDate", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
        }),
        __metadata("design:type", String)
    ], UpdateWorkspaceRequest.prototype, "xAmzSecurityToken", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "header, style=simple;explode=false;name=X-Amz-Signature",
        }),
        __metadata("design:type", String)
    ], UpdateWorkspaceRequest.prototype, "xAmzSignature", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
        }),
        __metadata("design:type", String)
    ], UpdateWorkspaceRequest.prototype, "xAmzSignedHeaders", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "pathParam, style=simple;explode=false;name=workspaceId",
        }),
        __metadata("design:type", String)
    ], UpdateWorkspaceRequest.prototype, "workspaceId", void 0);
    return UpdateWorkspaceRequest;
}(utils_1.SpeakeasyBase));
exports.UpdateWorkspaceRequest = UpdateWorkspaceRequest;
var UpdateWorkspaceResponse = /** @class */ (function (_super) {
    __extends(UpdateWorkspaceResponse, _super);
    function UpdateWorkspaceResponse() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], UpdateWorkspaceResponse.prototype, "accessDeniedException", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], UpdateWorkspaceResponse.prototype, "conflictException", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], UpdateWorkspaceResponse.prototype, "contentType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], UpdateWorkspaceResponse.prototype, "internalServerException", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], UpdateWorkspaceResponse.prototype, "statusCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], UpdateWorkspaceResponse.prototype, "rawResponse", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], UpdateWorkspaceResponse.prototype, "resourceNotFoundException", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], UpdateWorkspaceResponse.prototype, "throttlingException", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", shared.UpdateWorkspaceResponse)
    ], UpdateWorkspaceResponse.prototype, "updateWorkspaceResponse", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], UpdateWorkspaceResponse.prototype, "validationException", void 0);
    return UpdateWorkspaceResponse;
}(utils_1.SpeakeasyBase));
exports.UpdateWorkspaceResponse = UpdateWorkspaceResponse;
