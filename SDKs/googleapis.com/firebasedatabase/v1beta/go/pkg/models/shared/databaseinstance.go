// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DatabaseInstanceStateEnum - Output only. The database's lifecycle state. Read-only.
type DatabaseInstanceStateEnum string

const (
	DatabaseInstanceStateEnumLifecycleStateUnspecified DatabaseInstanceStateEnum = "LIFECYCLE_STATE_UNSPECIFIED"
	DatabaseInstanceStateEnumActive                    DatabaseInstanceStateEnum = "ACTIVE"
	DatabaseInstanceStateEnumDisabled                  DatabaseInstanceStateEnum = "DISABLED"
	DatabaseInstanceStateEnumDeleted                   DatabaseInstanceStateEnum = "DELETED"
)

func (e DatabaseInstanceStateEnum) ToPointer() *DatabaseInstanceStateEnum {
	return &e
}

func (e *DatabaseInstanceStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LIFECYCLE_STATE_UNSPECIFIED":
		fallthrough
	case "ACTIVE":
		fallthrough
	case "DISABLED":
		fallthrough
	case "DELETED":
		*e = DatabaseInstanceStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DatabaseInstanceStateEnum: %v", v)
	}
}

// DatabaseInstanceTypeEnum - Immutable. The database instance type. On creation only USER_DATABASE is allowed, which is also the default when omitted.
type DatabaseInstanceTypeEnum string

const (
	DatabaseInstanceTypeEnumDatabaseInstanceTypeUnspecified DatabaseInstanceTypeEnum = "DATABASE_INSTANCE_TYPE_UNSPECIFIED"
	DatabaseInstanceTypeEnumDefaultDatabase                 DatabaseInstanceTypeEnum = "DEFAULT_DATABASE"
	DatabaseInstanceTypeEnumUserDatabase                    DatabaseInstanceTypeEnum = "USER_DATABASE"
)

func (e DatabaseInstanceTypeEnum) ToPointer() *DatabaseInstanceTypeEnum {
	return &e
}

func (e *DatabaseInstanceTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DATABASE_INSTANCE_TYPE_UNSPECIFIED":
		fallthrough
	case "DEFAULT_DATABASE":
		fallthrough
	case "USER_DATABASE":
		*e = DatabaseInstanceTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DatabaseInstanceTypeEnum: %v", v)
	}
}

// DatabaseInstance - Representation of a Realtime Database instance. Details on interacting with contents of a DatabaseInstance can be found at: https://firebase.google.com/docs/database/rest/start.
type DatabaseInstance struct {
	// Output only. Output Only. The globally unique hostname of the database.
	DatabaseURL *string `json:"databaseUrl,omitempty"`
	// The fully qualified resource name of the database instance, in the form: `projects/{project-number}/locations/{location-id}/instances/{database-id}`.
	Name *string `json:"name,omitempty"`
	// Output only. The resource name of the project this instance belongs to. For example: `projects/{project-number}`.
	Project *string `json:"project,omitempty"`
	// Output only. The database's lifecycle state. Read-only.
	State *DatabaseInstanceStateEnum `json:"state,omitempty"`
	// Immutable. The database instance type. On creation only USER_DATABASE is allowed, which is also the default when omitted.
	Type *DatabaseInstanceTypeEnum `json:"type,omitempty"`
}

// DatabaseInstanceInput - Representation of a Realtime Database instance. Details on interacting with contents of a DatabaseInstance can be found at: https://firebase.google.com/docs/database/rest/start.
type DatabaseInstanceInput struct {
	// The fully qualified resource name of the database instance, in the form: `projects/{project-number}/locations/{location-id}/instances/{database-id}`.
	Name *string `json:"name,omitempty"`
	// Immutable. The database instance type. On creation only USER_DATABASE is allowed, which is also the default when omitted.
	Type *DatabaseInstanceTypeEnum `json:"type,omitempty"`
}
