/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class PersonAttributes {
    /**
     * This will be replaced by the relationship `avatar` in a future update.&lt;br/&gt;
     * The image ID of an avatar or head shot of the person. Details can be
     * retrieved using the `/images` endpoint.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("avatar_id")
    public String avatarId;

    public PersonAttributes withAvatarId(String avatarId) {
        this.avatarId = avatarId;
        return this;
    }
    
    /**
     * The biography of the person without markup.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("biography")
    public String biography;

    public PersonAttributes withBiography(String biography) {
        this.biography = biography;
        return this;
    }
    
    /**
     * The birthday of the person
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("born")
    public LocalDate born;

    public PersonAttributes withBorn(LocalDate born) {
        this.born = born;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;

    public PersonAttributes withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The day of death of the person
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("died")
    public LocalDate died;

    public PersonAttributes withDied(LocalDate died) {
        this.died = died;
        return this;
    }
    
    /**
     * The first name of the person
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    public String firstName;

    public PersonAttributes withFirstName(String firstName) {
        this.firstName = firstName;
        return this;
    }
    
    /**
     * The country the person is from
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("from_country")
    public String fromCountry;

    public PersonAttributes withFromCountry(String fromCountry) {
        this.fromCountry = fromCountry;
        return this;
    }
    
    /**
     * The locality or city the person is from
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("from_locality")
    public String fromLocality;

    public PersonAttributes withFromLocality(String fromLocality) {
        this.fromLocality = fromLocality;
        return this;
    }
    
    /**
     * The region/state/province the person is from
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("from_region")
    public String fromRegion;

    public PersonAttributes withFromRegion(String fromRegion) {
        this.fromRegion = fromRegion;
        return this;
    }
    
    /**
     * The last name of the person
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    public String lastName;

    public PersonAttributes withLastName(String lastName) {
        this.lastName = lastName;
        return this;
    }
    
    /**
     * The public email contact for the person
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("public_email")
    public String publicEmail;

    public PersonAttributes withPublicEmail(String publicEmail) {
        this.publicEmail = publicEmail;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updated_at")
    public OffsetDateTime updatedAt;

    public PersonAttributes withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    public PersonAttributes(){}
}
