/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Webfont - Metadata describing a family of fonts.
 */
public class Webfont {
    /**
     * The category of the font.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("category")
    public String category;
    public Webfont withCategory(String category) {
        this.category = category;
        return this;
    }
    
    /**
     * The name of the font.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("family")
    public String family;
    public Webfont withFamily(String family) {
        this.family = family;
        return this;
    }
    
    /**
     * The font files (with all supported scripts) for each one of the available variants, as a key : value map.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("files")
    public java.util.Map<String, String> files;
    public Webfont withFiles(java.util.Map<String, String> files) {
        this.files = files;
        return this;
    }
    
    /**
     * This kind represents a webfont object in the webfonts service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;
    public Webfont withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * The date (format "yyyy-MM-dd") the font was modified for the last time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastModified")
    public String lastModified;
    public Webfont withLastModified(String lastModified) {
        this.lastModified = lastModified;
        return this;
    }
    
    /**
     * The scripts supported by the font.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subsets")
    public String[] subsets;
    public Webfont withSubsets(String[] subsets) {
        this.subsets = subsets;
        return this;
    }
    
    /**
     * The available variants for the font.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("variants")
    public String[] variants;
    public Webfont withVariants(String[] variants) {
        this.variants = variants;
        return this;
    }
    
    /**
     * The font version.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    public String version;
    public Webfont withVersion(String version) {
        this.version = version;
        return this;
    }
    
}
