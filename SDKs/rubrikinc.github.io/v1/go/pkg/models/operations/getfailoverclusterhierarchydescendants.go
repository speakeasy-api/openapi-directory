// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetFailoverClusterHierarchyDescendantsObjectTypeEnum - Filter by node object type.
type GetFailoverClusterHierarchyDescendantsObjectTypeEnum string

const (
	GetFailoverClusterHierarchyDescendantsObjectTypeEnumFailoverClusterApp  GetFailoverClusterHierarchyDescendantsObjectTypeEnum = "FailoverClusterApp"
	GetFailoverClusterHierarchyDescendantsObjectTypeEnumFileset             GetFailoverClusterHierarchyDescendantsObjectTypeEnum = "Fileset"
	GetFailoverClusterHierarchyDescendantsObjectTypeEnumHostFailoverCluster GetFailoverClusterHierarchyDescendantsObjectTypeEnum = "HostFailoverCluster"
	GetFailoverClusterHierarchyDescendantsObjectTypeEnumWindowsCluster      GetFailoverClusterHierarchyDescendantsObjectTypeEnum = "WindowsCluster"
)

func (e GetFailoverClusterHierarchyDescendantsObjectTypeEnum) ToPointer() *GetFailoverClusterHierarchyDescendantsObjectTypeEnum {
	return &e
}

func (e *GetFailoverClusterHierarchyDescendantsObjectTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FailoverClusterApp":
		fallthrough
	case "Fileset":
		fallthrough
	case "HostFailoverCluster":
		fallthrough
	case "WindowsCluster":
		*e = GetFailoverClusterHierarchyDescendantsObjectTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFailoverClusterHierarchyDescendantsObjectTypeEnum: %v", v)
	}
}

// GetFailoverClusterHierarchyDescendantsOperatingSystemTypeEnum - Filter a response based on the failover cluster operating system type.
type GetFailoverClusterHierarchyDescendantsOperatingSystemTypeEnum string

const (
	GetFailoverClusterHierarchyDescendantsOperatingSystemTypeEnumAny      GetFailoverClusterHierarchyDescendantsOperatingSystemTypeEnum = "ANY"
	GetFailoverClusterHierarchyDescendantsOperatingSystemTypeEnumAix      GetFailoverClusterHierarchyDescendantsOperatingSystemTypeEnum = "AIX"
	GetFailoverClusterHierarchyDescendantsOperatingSystemTypeEnumHpux     GetFailoverClusterHierarchyDescendantsOperatingSystemTypeEnum = "HPUX"
	GetFailoverClusterHierarchyDescendantsOperatingSystemTypeEnumLinux    GetFailoverClusterHierarchyDescendantsOperatingSystemTypeEnum = "Linux"
	GetFailoverClusterHierarchyDescendantsOperatingSystemTypeEnumSunOs    GetFailoverClusterHierarchyDescendantsOperatingSystemTypeEnum = "SunOS"
	GetFailoverClusterHierarchyDescendantsOperatingSystemTypeEnumUnixLike GetFailoverClusterHierarchyDescendantsOperatingSystemTypeEnum = "UnixLike"
	GetFailoverClusterHierarchyDescendantsOperatingSystemTypeEnumWindows  GetFailoverClusterHierarchyDescendantsOperatingSystemTypeEnum = "Windows"
)

func (e GetFailoverClusterHierarchyDescendantsOperatingSystemTypeEnum) ToPointer() *GetFailoverClusterHierarchyDescendantsOperatingSystemTypeEnum {
	return &e
}

func (e *GetFailoverClusterHierarchyDescendantsOperatingSystemTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ANY":
		fallthrough
	case "AIX":
		fallthrough
	case "HPUX":
		fallthrough
	case "Linux":
		fallthrough
	case "SunOS":
		fallthrough
	case "UnixLike":
		fallthrough
	case "Windows":
		*e = GetFailoverClusterHierarchyDescendantsOperatingSystemTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFailoverClusterHierarchyDescendantsOperatingSystemTypeEnum: %v", v)
	}
}

// GetFailoverClusterHierarchyDescendantsSLAAssignmentEnum - Filter by SLA assignment type.
type GetFailoverClusterHierarchyDescendantsSLAAssignmentEnum string

const (
	GetFailoverClusterHierarchyDescendantsSLAAssignmentEnumDerived    GetFailoverClusterHierarchyDescendantsSLAAssignmentEnum = "Derived"
	GetFailoverClusterHierarchyDescendantsSLAAssignmentEnumDirect     GetFailoverClusterHierarchyDescendantsSLAAssignmentEnum = "Direct"
	GetFailoverClusterHierarchyDescendantsSLAAssignmentEnumUnassigned GetFailoverClusterHierarchyDescendantsSLAAssignmentEnum = "Unassigned"
)

func (e GetFailoverClusterHierarchyDescendantsSLAAssignmentEnum) ToPointer() *GetFailoverClusterHierarchyDescendantsSLAAssignmentEnum {
	return &e
}

func (e *GetFailoverClusterHierarchyDescendantsSLAAssignmentEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Derived":
		fallthrough
	case "Direct":
		fallthrough
	case "Unassigned":
		*e = GetFailoverClusterHierarchyDescendantsSLAAssignmentEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFailoverClusterHierarchyDescendantsSLAAssignmentEnum: %v", v)
	}
}

// GetFailoverClusterHierarchyDescendantsSortByEnum - Attribute to sort the results on.
type GetFailoverClusterHierarchyDescendantsSortByEnum string

const (
	GetFailoverClusterHierarchyDescendantsSortByEnumName                   GetFailoverClusterHierarchyDescendantsSortByEnum = "name"
	GetFailoverClusterHierarchyDescendantsSortByEnumEffectiveSLADomainName GetFailoverClusterHierarchyDescendantsSortByEnum = "effectiveSlaDomainName"
)

func (e GetFailoverClusterHierarchyDescendantsSortByEnum) ToPointer() *GetFailoverClusterHierarchyDescendantsSortByEnum {
	return &e
}

func (e *GetFailoverClusterHierarchyDescendantsSortByEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		fallthrough
	case "effectiveSlaDomainName":
		*e = GetFailoverClusterHierarchyDescendantsSortByEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFailoverClusterHierarchyDescendantsSortByEnum: %v", v)
	}
}

// GetFailoverClusterHierarchyDescendantsSortOrderEnum - Sort order, either ascending or descending.
type GetFailoverClusterHierarchyDescendantsSortOrderEnum string

const (
	GetFailoverClusterHierarchyDescendantsSortOrderEnumAsc  GetFailoverClusterHierarchyDescendantsSortOrderEnum = "asc"
	GetFailoverClusterHierarchyDescendantsSortOrderEnumDesc GetFailoverClusterHierarchyDescendantsSortOrderEnum = "desc"
)

func (e GetFailoverClusterHierarchyDescendantsSortOrderEnum) ToPointer() *GetFailoverClusterHierarchyDescendantsSortOrderEnum {
	return &e
}

func (e *GetFailoverClusterHierarchyDescendantsSortOrderEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetFailoverClusterHierarchyDescendantsSortOrderEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFailoverClusterHierarchyDescendantsSortOrderEnum: %v", v)
	}
}

type GetFailoverClusterHierarchyDescendantsRequest struct {
	// Filter by configured SLA domain.
	ConfiguredSLADomainID *string `queryParam:"style=form,explode=true,name=configured_sla_domain_id"`
	// ID of the parent failover cluster hierarchy object. To get top-level nodes, use **root** as the ID.
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// An integer that specifies the maximum number of matches to return.
	Limit *int `queryParam:"style=form,explode=true,name=limit"`
	// Filter a response by making an infix comparison of the failover cluster name or failover cluster app name.
	Name *string `queryParam:"style=form,explode=true,name=name"`
	// Filter by node object type.
	ObjectType *GetFailoverClusterHierarchyDescendantsObjectTypeEnum `queryParam:"style=form,explode=true,name=object_type"`
	// An integer that specifies a number of initial matches to ignore.
	Offset *int `queryParam:"style=form,explode=true,name=offset"`
	// Filter a response based on the failover cluster operating system type.
	OperatingSystemType *GetFailoverClusterHierarchyDescendantsOperatingSystemTypeEnum `queryParam:"style=form,explode=true,name=operating_system_type"`
	// Filter by primary cluster ID, or **local**.
	PrimaryClusterID *string `queryParam:"style=form,explode=true,name=primary_cluster_id"`
	// Filter by SLA assignment type.
	SLAAssignment *GetFailoverClusterHierarchyDescendantsSLAAssignmentEnum `queryParam:"style=form,explode=true,name=sla_assignment"`
	// Attribute to sort the results on.
	SortBy *GetFailoverClusterHierarchyDescendantsSortByEnum `queryParam:"style=form,explode=true,name=sort_by"`
	// Sort order, either ascending or descending.
	SortOrder *GetFailoverClusterHierarchyDescendantsSortOrderEnum `queryParam:"style=form,explode=true,name=sort_order"`
}

type GetFailoverClusterHierarchyDescendantsResponse struct {
	ContentType string
	// Summary list of descendant objects.
	FailoverClusterHierarchyObjectSummaryListResponse *shared.FailoverClusterHierarchyObjectSummaryListResponse
	StatusCode                                        int
	RawResponse                                       *http.Response
}
