/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Worker orientation measured in units clockwise from north.
 */
export class CreateWorkerRequestBodyOrientation extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "degrees" })
  degrees?: number;
}

/**
 * Supported coordinates for worker position.
 */
export class CreateWorkerRequestBodyPosition extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "cartesianCoordinates" })
  @Type(() => shared.CartesianCoordinates)
  cartesianCoordinates?: shared.CartesianCoordinates;
}

/**
 * Properties of the worker that are provided by the vendor FMS.
 */
export class CreateWorkerRequestBodyVendorProperties extends SpeakeasyBase {
  /**
   * JSON blob containing unstructured vendor properties that are fixed and won't change during regular operation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vendorAdditionalFixedProperties" })
  vendorAdditionalFixedProperties?: string;

  /**
   * JSON blob containing unstructured vendor properties that are transient and may change during regular operation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vendorAdditionalTransientProperties" })
  vendorAdditionalTransientProperties?: string;

  /**
   * The worker ID defined by the vendor FMS.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vendorWorkerId" })
  vendorWorkerId?: string;

  /**
   * The worker IP address defined by the vendor FMS.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vendorWorkerIpAddress" })
  vendorWorkerIpAddress?: string;
}

export class CreateWorkerRequestBody extends SpeakeasyBase {
  /**
   * JSON blob containing unstructured worker properties that are fixed and won't change during regular operation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "additionalFixedProperties" })
  additionalFixedProperties?: string;

  /**
   * JSON blob containing unstructured worker properties that are transient and may change during regular operation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "additionalTransientProperties" })
  additionalTransientProperties?: string;

  /**
   * Token used for detecting replayed requests. Replayed requests will not be performed multiple times.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientToken" })
  clientToken?: string;

  /**
   * Full ARN of the worker fleet.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fleet" })
  fleet: string;

  /**
   * Human friendly name of the resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Worker orientation measured in units clockwise from north.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "orientation" })
  @Type(() => CreateWorkerRequestBodyOrientation)
  orientation?: CreateWorkerRequestBodyOrientation;

  /**
   * Supported coordinates for worker position.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "position" })
  @Type(() => CreateWorkerRequestBodyPosition)
  position?: CreateWorkerRequestBodyPosition;

  /**
   * Properties of the worker that are provided by the vendor FMS.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vendorProperties" })
  @Type(() => CreateWorkerRequestBodyVendorProperties)
  vendorProperties?: CreateWorkerRequestBodyVendorProperties;
}

export class CreateWorkerRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateWorkerRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateWorkerResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createWorkerResponse?: shared.CreateWorkerResponse;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
