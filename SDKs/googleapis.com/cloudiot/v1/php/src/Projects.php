<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Associates the device with the gateway.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesBindDeviceToGatewayRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesBindDeviceToGatewaySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesBindDeviceToGatewayResponse
     */
	public function cloudiotProjectsLocationsRegistriesBindDeviceToGateway(
        \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesBindDeviceToGatewayRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesBindDeviceToGatewaySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesBindDeviceToGatewayResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}:bindDeviceToGateway', \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesBindDeviceToGatewayRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "bindDeviceToGatewayRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesBindDeviceToGatewayRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesBindDeviceToGatewayResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bindDeviceToGatewayResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a device registry that contains devices.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesCreateResponse
     */
	public function cloudiotProjectsLocationsRegistriesCreate(
        \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/registries', \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deviceRegistry", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deviceRegistry = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeviceRegistry', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the last few versions of the device configuration in descending order (i.e.: newest first).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesConfigVersionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesConfigVersionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesConfigVersionsListResponse
     */
	public function cloudiotProjectsLocationsRegistriesDevicesConfigVersionsList(
        \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesConfigVersionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesConfigVersionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesConfigVersionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/configVersions', \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesConfigVersionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesConfigVersionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesConfigVersionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDeviceConfigVersionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListDeviceConfigVersionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a device in a device registry.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesCreateResponse
     */
	public function cloudiotProjectsLocationsRegistriesDevicesCreate(
        \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/devices', \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "device", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->device = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Device', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a device.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesDeleteResponse
     */
	public function cloudiotProjectsLocationsRegistriesDevicesDelete(
        \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets details about a device.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesGetResponse
     */
	public function cloudiotProjectsLocationsRegistriesDevicesGet(
        \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->device = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Device', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Modifies the configuration for the device, which is eventually sent from the Cloud IoT Core servers. Returns the modified configuration version and its metadata.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesModifyCloudToDeviceConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesModifyCloudToDeviceConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesModifyCloudToDeviceConfigResponse
     */
	public function cloudiotProjectsLocationsRegistriesDevicesModifyCloudToDeviceConfig(
        \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesModifyCloudToDeviceConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesModifyCloudToDeviceConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesModifyCloudToDeviceConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:modifyCloudToDeviceConfig', \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesModifyCloudToDeviceConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "modifyCloudToDeviceConfigRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesModifyCloudToDeviceConfigRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesModifyCloudToDeviceConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deviceConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeviceConfig', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a device.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesPatchResponse
     */
	public function cloudiotProjectsLocationsRegistriesDevicesPatch(
        \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "device", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->device = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Device', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sends a command to the specified device. In order for a device to be able to receive commands, it must: 1) be connected to Cloud IoT Core using the MQTT protocol, and 2) be subscribed to the group of MQTT topics specified by /devices/{device-id}/commands/#. This subscription will receive commands at the top-level topic /devices/{device-id}/commands as well as commands for subfolders, like /devices/{device-id}/commands/subfolder. Note that subscribing to specific subfolders is not supported. If the command could not be delivered to the device, this method will return an error; in particular, if the device is not subscribed, this method will return FAILED_PRECONDITION. Otherwise, this method will return OK. If the subscription is QoS 1, at least once delivery will be guaranteed; for QoS 0, no acknowledgment will be expected from the device.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesSendCommandToDeviceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesSendCommandToDeviceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesSendCommandToDeviceResponse
     */
	public function cloudiotProjectsLocationsRegistriesDevicesSendCommandToDevice(
        \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesSendCommandToDeviceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesSendCommandToDeviceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesSendCommandToDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:sendCommandToDevice', \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesSendCommandToDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sendCommandToDeviceRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesSendCommandToDeviceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesSendCommandToDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sendCommandToDeviceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the last few versions of the device state in descending order (i.e.: newest first).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesStatesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesStatesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesStatesListResponse
     */
	public function cloudiotProjectsLocationsRegistriesDevicesStatesList(
        \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesStatesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesStatesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesStatesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/states', \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesStatesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesStatesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesDevicesStatesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDeviceStatesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListDeviceStatesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List devices in a device registry.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesGroupsDevicesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesGroupsDevicesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesGroupsDevicesListResponse
     */
	public function cloudiotProjectsLocationsRegistriesGroupsDevicesList(
        \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesGroupsDevicesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesGroupsDevicesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesGroupsDevicesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/devices', \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesGroupsDevicesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesGroupsDevicesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesGroupsDevicesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDevicesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListDevicesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesGroupsGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesGroupsGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesGroupsGetIamPolicyResponse
     */
	public function cloudiotProjectsLocationsRegistriesGroupsGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesGroupsGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesGroupsGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesGroupsGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesGroupsGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "getIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesGroupsGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesGroupsGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesGroupsSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesGroupsSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesGroupsSetIamPolicyResponse
     */
	public function cloudiotProjectsLocationsRegistriesGroupsSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesGroupsSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesGroupsSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesGroupsSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesGroupsSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesGroupsSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesGroupsSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesGroupsTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesGroupsTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesGroupsTestIamPermissionsResponse
     */
	public function cloudiotProjectsLocationsRegistriesGroupsTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesGroupsTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesGroupsTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesGroupsTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesGroupsTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testIamPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesGroupsTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesGroupsTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testIamPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestIamPermissionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists device registries.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesListResponse
     */
	public function cloudiotProjectsLocationsRegistriesList(
        \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/registries', \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDeviceRegistriesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListDeviceRegistriesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the association between the device and the gateway.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesUnbindDeviceFromGatewayRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesUnbindDeviceFromGatewaySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesUnbindDeviceFromGatewayResponse
     */
	public function cloudiotProjectsLocationsRegistriesUnbindDeviceFromGateway(
        \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesUnbindDeviceFromGatewayRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesUnbindDeviceFromGatewaySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesUnbindDeviceFromGatewayResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}:unbindDeviceFromGateway', \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesUnbindDeviceFromGatewayRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "unbindDeviceFromGatewayRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesUnbindDeviceFromGatewayRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudiotProjectsLocationsRegistriesUnbindDeviceFromGatewayResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unbindDeviceFromGatewayResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
}