"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

SERVERS = [
    "http://cdcgov.local",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""A router of public health data from multiple senders and receivers"""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        
    
    
    def delete_settings_organizations_organization_name_(self, request: operations.DeleteSettingsOrganizationsOrganizationNameRequest, security: operations.DeleteSettingsOrganizationsOrganizationNameSecurity) -> operations.DeleteSettingsOrganizationsOrganizationNameResponse:
        r"""Delete an organization (and the associated receivers and senders)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSettingsOrganizationsOrganizationNameRequest, base_url, '/settings/organizations/{organizationName}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSettingsOrganizationsOrganizationNameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Organization])
                res.organization = out
        elif http_res.status_code in [400, 401]:
            pass

        return res

    def delete_settings_organizations_organization_name_receivers_receiver_name_(self, request: operations.DeleteSettingsOrganizationsOrganizationNameReceiversReceiverNameRequest, security: operations.DeleteSettingsOrganizationsOrganizationNameReceiversReceiverNameSecurity) -> operations.DeleteSettingsOrganizationsOrganizationNameReceiversReceiverNameResponse:
        r"""Delete a receiver"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSettingsOrganizationsOrganizationNameReceiversReceiverNameRequest, base_url, '/settings/organizations/{organizationName}/receivers/{receiverName}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSettingsOrganizationsOrganizationNameReceiversReceiverNameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Receiver])
                res.receiver = out
        elif http_res.status_code in [400, 401]:
            pass

        return res

    def delete_settings_organizations_organization_name_senders_sender_name_(self, request: operations.DeleteSettingsOrganizationsOrganizationNameSendersSenderNameRequest, security: operations.DeleteSettingsOrganizationsOrganizationNameSendersSenderNameSecurity) -> operations.DeleteSettingsOrganizationsOrganizationNameSendersSenderNameResponse:
        r"""Delete a sender"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSettingsOrganizationsOrganizationNameSendersSenderNameRequest, base_url, '/settings/organizations/{organizationName}/senders/{senderName}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSettingsOrganizationsOrganizationNameSendersSenderNameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Sender])
                res.sender = out
        elif http_res.status_code in [400, 401]:
            pass

        return res

    def get_settings_organizations(self) -> operations.GetSettingsOrganizationsResponse:
        r"""The settings for all organizations of the system. Must have admin access."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/settings/organizations'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSettingsOrganizationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Organization]])
                res.organizations = out

        return res

    def get_settings_organizations_organization_name_(self, request: operations.GetSettingsOrganizationsOrganizationNameRequest, security: operations.GetSettingsOrganizationsOrganizationNameSecurity) -> operations.GetSettingsOrganizationsOrganizationNameResponse:
        r"""A single organization settings"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSettingsOrganizationsOrganizationNameRequest, base_url, '/settings/organizations/{organizationName}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSettingsOrganizationsOrganizationNameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Organization])
                res.organization = out

        return res

    def get_settings_organizations_organization_name_receivers(self, request: operations.GetSettingsOrganizationsOrganizationNameReceiversRequest, security: operations.GetSettingsOrganizationsOrganizationNameReceiversSecurity) -> operations.GetSettingsOrganizationsOrganizationNameReceiversResponse:
        r"""A list of receivers and their current settings"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSettingsOrganizationsOrganizationNameReceiversRequest, base_url, '/settings/organizations/{organizationName}/receivers', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSettingsOrganizationsOrganizationNameReceiversResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Receiver]])
                res.receivers = out
        elif http_res.status_code in [400, 401]:
            pass

        return res

    def get_settings_organizations_organization_name_receivers_receiver_name_(self, request: operations.GetSettingsOrganizationsOrganizationNameReceiversReceiverNameRequest, security: operations.GetSettingsOrganizationsOrganizationNameReceiversReceiverNameSecurity) -> operations.GetSettingsOrganizationsOrganizationNameReceiversReceiverNameResponse:
        r"""The settings of a single of receiver"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSettingsOrganizationsOrganizationNameReceiversReceiverNameRequest, base_url, '/settings/organizations/{organizationName}/receivers/{receiverName}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSettingsOrganizationsOrganizationNameReceiversReceiverNameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Receiver])
                res.receiver = out
        elif http_res.status_code in [400, 401]:
            pass

        return res

    def get_settings_organizations_organization_name_senders(self, request: operations.GetSettingsOrganizationsOrganizationNameSendersRequest, security: operations.GetSettingsOrganizationsOrganizationNameSendersSecurity) -> operations.GetSettingsOrganizationsOrganizationNameSendersResponse:
        r"""A list of senders"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSettingsOrganizationsOrganizationNameSendersRequest, base_url, '/settings/organizations/{organizationName}/senders', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSettingsOrganizationsOrganizationNameSendersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Sender]])
                res.senders = out
        elif http_res.status_code in [400, 401]:
            pass

        return res

    def get_settings_organizations_organization_name_senders_sender_name_(self, request: operations.GetSettingsOrganizationsOrganizationNameSendersSenderNameRequest, security: operations.GetSettingsOrganizationsOrganizationNameSendersSenderNameSecurity) -> operations.GetSettingsOrganizationsOrganizationNameSendersSenderNameResponse:
        r"""The settings of a single of sender"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSettingsOrganizationsOrganizationNameSendersSenderNameRequest, base_url, '/settings/organizations/{organizationName}/senders/{senderName}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSettingsOrganizationsOrganizationNameSendersSenderNameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Sender])
                res.sender = out
        elif http_res.status_code in [400, 401]:
            pass

        return res

    def head_settings_organizations(self) -> operations.HeadSettingsOrganizationsResponse:
        r"""Retrived the last modified for all settings of the system. Must have admin access."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/settings/organizations'
        
        
        client = self._client
        
        http_res = client.request('HEAD', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.HeadSettingsOrganizationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            

        return res

    def post_reports(self, request: operations.PostReportsRequest, security: operations.PostReportsSecurity) -> operations.PostReportsResponse:
        r"""Post a report to the data hub"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/reports'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'string')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PostReportsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostReportsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 201, 400]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Report])
                res.report = out
        elif http_res.status_code == 500:
            pass

        return res

    def put_settings_organizations_organization_name_(self, request: operations.PutSettingsOrganizationsOrganizationNameRequest, security: operations.PutSettingsOrganizationsOrganizationNameSecurity) -> operations.PutSettingsOrganizationsOrganizationNameResponse:
        r"""Create or update the direct settings associated with an organization"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutSettingsOrganizationsOrganizationNameRequest, base_url, '/settings/organizations/{organizationName}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "organization_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutSettingsOrganizationsOrganizationNameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 201]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Organization])
                res.organization = out
        elif http_res.status_code in [400, 401]:
            pass

        return res

    def put_settings_organizations_organization_name_receivers_receiver_name_(self, request: operations.PutSettingsOrganizationsOrganizationNameReceiversReceiverNameRequest, security: operations.PutSettingsOrganizationsOrganizationNameReceiversReceiverNameSecurity) -> operations.PutSettingsOrganizationsOrganizationNameReceiversReceiverNameResponse:
        r"""Update a single reciever"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutSettingsOrganizationsOrganizationNameReceiversReceiverNameRequest, base_url, '/settings/organizations/{organizationName}/receivers/{receiverName}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "receiver_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutSettingsOrganizationsOrganizationNameReceiversReceiverNameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 201]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Receiver])
                res.receiver = out
        elif http_res.status_code in [400, 401]:
            pass

        return res

    def put_settings_organizations_organization_name_senders_sender_name_(self, request: operations.PutSettingsOrganizationsOrganizationNameSendersSenderNameRequest, security: operations.PutSettingsOrganizationsOrganizationNameSendersSenderNameSecurity) -> operations.PutSettingsOrganizationsOrganizationNameSendersSenderNameResponse:
        r"""Update a single sender"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutSettingsOrganizationsOrganizationNameSendersSenderNameRequest, base_url, '/settings/organizations/{organizationName}/senders/{senderName}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "sender_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutSettingsOrganizationsOrganizationNameSendersSenderNameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 201]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Sender]])
                res.senders = out
        elif http_res.status_code in [400, 401]:
            pass

        return res

    