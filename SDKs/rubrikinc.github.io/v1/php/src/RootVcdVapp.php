<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class RootVcdVapp 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create an on-demand snapshot for a vApp
     * 
     * Start an asynchronous job to create an on-demand snapshot for a specified vApp object.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOnDemandSnapshotV1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOnDemandSnapshotV1Response
     */
	public function createOnDemandSnapshotV1(
        \OpenAPI\OpenAPI\Models\Operations\CreateOnDemandSnapshotV1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOnDemandSnapshotV1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vcd/vapp/{id}/snapshot', \OpenAPI\OpenAPI\Models\Operations\CreateOnDemandSnapshotV1Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "baseOnDemandSnapshotConfig", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOnDemandSnapshotV1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->asyncRequestStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AsyncRequestStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Export vApp snapshot
     * 
     * Export the specified vApp snapshot into a new vApp or an existing vApp.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateVappExportV1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateVappExportV1Response
     */
	public function createVappExportV1(
        \OpenAPI\OpenAPI\Models\Operations\CreateVappExportV1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateVappExportV1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vcd/vapp/snapshot/{snapshot_id}/export', \OpenAPI\OpenAPI\Models\Operations\CreateVappExportV1Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "vappExportSnapshotJobConfig", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateVappExportV1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->asyncRequestStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AsyncRequestStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Instant Recovery of vApp virtual machines
     * 
     * Use Instant Recovery to recover specified vApp virtual machines.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateVappInstantRecoveryV1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateVappInstantRecoveryV1Response
     */
	public function createVappInstantRecoveryV1(
        \OpenAPI\OpenAPI\Models\Operations\CreateVappInstantRecoveryV1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateVappInstantRecoveryV1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vcd/vapp/snapshot/{snapshot_id}/instant_recover', \OpenAPI\OpenAPI\Models\Operations\CreateVappInstantRecoveryV1Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "vappInstantRecoveryJobConfig", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateVappInstantRecoveryV1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->asyncRequestStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AsyncRequestStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Export of a vApp template snapshot
     * 
     * Export a vApp template snapashot to a catalog. Use the options endpoint to confirm that exporting to the catalog defaults or the original organization vDC storage profile is possible.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateVappTemplateSnapshotExportRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateVappTemplateSnapshotExportResponse
     */
	public function createVappTemplateSnapshotExport(
        \OpenAPI\OpenAPI\Models\Operations\CreateVappTemplateSnapshotExportRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateVappTemplateSnapshotExportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vcd/vapp/template/snapshot/{snapshot_id}/export', \OpenAPI\OpenAPI\Models\Operations\CreateVappTemplateSnapshotExportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "vappTemplateExportJobConfig", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateVappTemplateSnapshotExportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->asyncRequestStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AsyncRequestStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Download snapshot from archive
     * 
     * Provides a method for retrieving a snapshot that is not available locally, from an archival location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateVcdVappDownloadSnapshotFromCloudV1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateVcdVappDownloadSnapshotFromCloudV1Response
     */
	public function createVcdVappDownloadSnapshotFromCloudV1(
        \OpenAPI\OpenAPI\Models\Operations\CreateVcdVappDownloadSnapshotFromCloudV1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateVcdVappDownloadSnapshotFromCloudV1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vcd/vapp/snapshot/{id}/download', \OpenAPI\OpenAPI\Models\Operations\CreateVcdVappDownloadSnapshotFromCloudV1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateVcdVappDownloadSnapshotFromCloudV1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->asyncRequestStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AsyncRequestStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a vApp snapshot
     * 
     * Designate a vApp snapshot as expired and available for garbage collection. The snapshot must be an on-demand snapshot or a snapshot from a vApp that is not assigned to an SLA Domain.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteVappSnapshotV1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteVappSnapshotV1Response
     */
	public function deleteVappSnapshotV1(
        \OpenAPI\OpenAPI\Models\Operations\DeleteVappSnapshotV1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteVappSnapshotV1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vcd/vapp/snapshot/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteVappSnapshotV1Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteVappSnapshotV1Request::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteVappSnapshotV1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete all snapshots of vApp
     * 
     * Delete all snapshots for a specified vApp object.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteVappSnapshotsV1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteVappSnapshotsV1Response
     */
	public function deleteVappSnapshotsV1(
        \OpenAPI\OpenAPI\Models\Operations\DeleteVappSnapshotsV1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteVappSnapshotsV1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vcd/vapp/{id}/snapshot', \OpenAPI\OpenAPI\Models\Operations\DeleteVappSnapshotsV1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteVappSnapshotsV1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Get vApp job status
     * 
     * Retrieve the details of a specified asynchronous job for a vApp.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVappAsyncRequestStatusV1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVappAsyncRequestStatusV1Response
     */
	public function getVappAsyncRequestStatusV1(
        \OpenAPI\OpenAPI\Models\Operations\GetVappAsyncRequestStatusV1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVappAsyncRequestStatusV1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vcd/vapp/request/{id}', \OpenAPI\OpenAPI\Models\Operations\GetVappAsyncRequestStatusV1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVappAsyncRequestStatusV1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->asyncRequestStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AsyncRequestStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get exportable network configurations
     * 
     * Retrieve summary information for the vApp networks that are available for network connections from the virtual machines in the exported vApp snapshot. The summary also specifies the default vApp network for each virtual machine network connection.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVappSnapshotExportOptionsV1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVappSnapshotExportOptionsV1Response
     */
	public function getVappSnapshotExportOptionsV1(
        \OpenAPI\OpenAPI\Models\Operations\GetVappSnapshotExportOptionsV1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVappSnapshotExportOptionsV1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vcd/vapp/snapshot/{snapshot_id}/export/options', \OpenAPI\OpenAPI\Models\Operations\GetVappSnapshotExportOptionsV1Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetVappSnapshotExportOptionsV1Request::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVappSnapshotExportOptionsV1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->vappExportOptions = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VappExportOptions', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Instant Recovery information
     * 
     * Retrieve the available vApp network connections and the default vApp network connection for the virtual machines in a vApp snapshot. Use this information to configure an Instant Recovery of specified virtual machines in the vApp snapshot.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVappSnapshotInstantRecoveryOptionsV1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVappSnapshotInstantRecoveryOptionsV1Response
     */
	public function getVappSnapshotInstantRecoveryOptionsV1(
        \OpenAPI\OpenAPI\Models\Operations\GetVappSnapshotInstantRecoveryOptionsV1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVappSnapshotInstantRecoveryOptionsV1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vcd/vapp/snapshot/{snapshot_id}/instant_recover/options', \OpenAPI\OpenAPI\Models\Operations\GetVappSnapshotInstantRecoveryOptionsV1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVappSnapshotInstantRecoveryOptionsV1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->vappInstantRecoveryOptions = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VappInstantRecoveryOptions', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get vApp snapshot details
     * 
     * Retrieve detailed information about a specified snapshot for a vApp object.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVappSnapshotV1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVappSnapshotV1Response
     */
	public function getVappSnapshotV1(
        \OpenAPI\OpenAPI\Models\Operations\GetVappSnapshotV1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVappSnapshotV1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vcd/vapp/snapshot/{id}', \OpenAPI\OpenAPI\Models\Operations\GetVappSnapshotV1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVappSnapshotV1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->vcdVappSnapshotDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VcdVappSnapshotDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Export information for a vApp template snapshot
     * 
     * Retrieve the available choices vApp template storage profile and organization vDC choices in case of exporting to either original organization vDC defaults of the target catalog. In case advanced option of manually deciding org vdc is preferred, this also provides available storage profile choices.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVappTemplateSnapshotExportOptionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVappTemplateSnapshotExportOptionsResponse
     */
	public function getVappTemplateSnapshotExportOptions(
        \OpenAPI\OpenAPI\Models\Operations\GetVappTemplateSnapshotExportOptionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVappTemplateSnapshotExportOptionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vcd/vapp/template/snapshot/{snapshot_id}/export/options', \OpenAPI\OpenAPI\Models\Operations\GetVappTemplateSnapshotExportOptionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetVappTemplateSnapshotExportOptionsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVappTemplateSnapshotExportOptionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->vappTemplateExportOptionsUnion = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VappTemplateExportOptionsUnion', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get details of a specific vApp
     * 
     * Retrieve detailed information for a specified vApp.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVcdVappV1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVcdVappV1Response
     */
	public function getVcdVappV1(
        \OpenAPI\OpenAPI\Models\Operations\GetVcdVappV1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVcdVappV1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vcd/vapp/{id}', \OpenAPI\OpenAPI\Models\Operations\GetVcdVappV1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVcdVappV1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->vcdVappDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VcdVappDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get list of snapshots of vApp
     * 
     * Retrieve summary information for each of the snapshot objects of a specified vApp object.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\QueryVappSnapshotV1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QueryVappSnapshotV1Response
     */
	public function queryVappSnapshotV1(
        \OpenAPI\OpenAPI\Models\Operations\QueryVappSnapshotV1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QueryVappSnapshotV1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vcd/vapp/{id}/snapshot', \OpenAPI\OpenAPI\Models\Operations\QueryVappSnapshotV1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QueryVappSnapshotV1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->vcdVappSnapshotSummaryListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VcdVappSnapshotSummaryListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get summary for vApps
     * 
     * Retrieve summary information for all vCD vApp objects.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\QueryVcdVappsV1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QueryVcdVappsV1Response
     */
	public function queryVcdVappsV1(
        \OpenAPI\OpenAPI\Models\Operations\QueryVcdVappsV1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QueryVcdVappsV1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vcd/vapp');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\QueryVcdVappsV1Request::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QueryVcdVappsV1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->vcdVappSummaryListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VcdVappSummaryListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Search for a file in a vApp
     * 
     * Aggregated search for a file through snapshots of all virtual machines that are presently part of the vApp. Specify the file using a full path prefix or a filename prefix.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SearchVappV1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SearchVappV1Response
     */
	public function searchVappV1(
        \OpenAPI\OpenAPI\Models\Operations\SearchVappV1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SearchVappV1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vcd/vapp/{id}/search', \OpenAPI\OpenAPI\Models\Operations\SearchVappV1Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SearchVappV1Request::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SearchVappV1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appSearchResponseListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AppSearchResponseListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update vApp
     * 
     * Make changes to the parameters of a specified vApp object.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateVcdVappV1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateVcdVappV1Response
     */
	public function updateVcdVappV1(
        \OpenAPI\OpenAPI\Models\Operations\UpdateVcdVappV1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateVcdVappV1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vcd/vapp/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateVcdVappV1Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "vcdVappPatch", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateVcdVappV1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->vcdVappDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VcdVappDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get details about missed snapshots for a vApp
     * 
     * Retrieve the timestamp for each missed snapshot for a specified vApp.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VcdMissedSnapshotsV1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\VcdMissedSnapshotsV1Response
     */
	public function vcdMissedSnapshotsV1(
        \OpenAPI\OpenAPI\Models\Operations\VcdMissedSnapshotsV1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\VcdMissedSnapshotsV1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vcd/vapp/{id}/missed_snapshot', \OpenAPI\OpenAPI\Models\Operations\VcdMissedSnapshotsV1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VcdMissedSnapshotsV1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->missedSnapshotListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MissedSnapshotListResponse', 'json');
            }
        }

        return $response;
    }
}