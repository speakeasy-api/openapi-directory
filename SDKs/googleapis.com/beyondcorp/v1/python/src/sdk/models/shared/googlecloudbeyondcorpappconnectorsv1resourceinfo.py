"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class GoogleCloudBeyondcorpAppconnectorsV1ResourceInfoStatusEnum(str, Enum):
    r"""Overall health status. Overall status is derived based on the status of each sub level resources."""
    HEALTH_STATUS_UNSPECIFIED = 'HEALTH_STATUS_UNSPECIFIED'
    HEALTHY = 'HEALTHY'
    UNHEALTHY = 'UNHEALTHY'
    UNRESPONSIVE = 'UNRESPONSIVE'
    DEGRADED = 'DEGRADED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudBeyondcorpAppconnectorsV1ResourceInfo:
    r"""ResourceInfo represents the information/status of an app connector resource. Such as: - remote_agent - container - runtime - appgateway - appconnector - appconnection - tunnel - logagent"""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Required. Unique Id for the resource."""  
    resource: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource'), 'exclude': lambda f: f is None }})
    r"""Specific details for the resource. This is for internal use only."""  
    status: Optional[GoogleCloudBeyondcorpAppconnectorsV1ResourceInfoStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Overall health status. Overall status is derived based on the status of each sub level resources."""  
    sub: Optional[list[GoogleCloudBeyondcorpAppconnectorsV1ResourceInfo]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sub'), 'exclude': lambda f: f is None }})
    r"""List of Info for the sub level resources."""  
    time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'exclude': lambda f: f is None }})
    r"""The timestamp to collect the info. It is suggested to be set by the topmost level resource only."""  
    