/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * Parent devices house child devices in device bays. Leave blank if this device type is neither a parent nor a child.
 */
export enum WritableDeviceTypeParentChildStatusEnum {
  Parent = "parent",
  Child = "child",
}

export class WritableDeviceTypeInput extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "comments" })
  comments?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "custom_fields" })
  customFields?: Record<string, any>;

  /**
   * Device consumes both front and rear rack faces
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is_full_depth" })
  isFullDepth?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "manufacturer" })
  manufacturer: number;

  @SpeakeasyMetadata()
  @Expose({ name: "model" })
  model: string;

  /**
   * Discrete part number (optional)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "part_number" })
  partNumber?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "slug" })
  slug: string;

  /**
   * Parent devices house child devices in device bays. Leave blank if this device type is neither a parent nor a child.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subdevice_role" })
  subdeviceRole?: WritableDeviceTypeParentChildStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "u_height" })
  uHeight?: number;
}
