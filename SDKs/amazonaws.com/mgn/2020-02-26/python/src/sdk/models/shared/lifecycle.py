"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import lifecyclelastcutover as shared_lifecyclelastcutover
from ..shared import lifecyclelasttest as shared_lifecyclelasttest
from ..shared import lifecyclestate_enum as shared_lifecyclestate_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LifeCycle:
    r"""Lifecycle."""
    
    added_to_service_date_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addedToServiceDateTime'), 'exclude': lambda f: f is None }})  
    elapsed_replication_duration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('elapsedReplicationDuration'), 'exclude': lambda f: f is None }})  
    first_byte_date_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firstByteDateTime'), 'exclude': lambda f: f is None }})  
    last_cutover: Optional[shared_lifecyclelastcutover.LifeCycleLastCutover] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastCutover'), 'exclude': lambda f: f is None }})  
    last_seen_by_service_date_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastSeenByServiceDateTime'), 'exclude': lambda f: f is None }})  
    last_test: Optional[shared_lifecyclelasttest.LifeCycleLastTest] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastTest'), 'exclude': lambda f: f is None }})  
    state: Optional[shared_lifecyclestate_enum.LifeCycleStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})  
    