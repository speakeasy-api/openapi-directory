"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Publishing:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def publish_messages_to_channel_form(self, request: operations.PublishMessagesToChannelFormRequest) -> operations.PublishMessagesToChannelFormResponse:
        r"""Publish a message to a channel
        Publish a message to the specified channel
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PublishMessagesToChannelFormRequest, base_url, '/channels/{channel_id}/messages', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "message_input", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.PublishMessagesToChannelFormRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PublishMessagesToChannelFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PublishMessagesToChannelForm2XXApplicationJSON])
                res.publish_messages_to_channel_form_2_xx_application_json_object = out
            if utils.match_content_type(content_type, 'application/x-msgpack'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/x-msgpack'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def publish_messages_to_channel_json(self, request: operations.PublishMessagesToChannelJSONRequest) -> operations.PublishMessagesToChannelJSONResponse:
        r"""Publish a message to a channel
        Publish a message to the specified channel
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PublishMessagesToChannelJSONRequest, base_url, '/channels/{channel_id}/messages', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "message_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.PublishMessagesToChannelJSONRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PublishMessagesToChannelJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PublishMessagesToChannelJSON2XXApplicationJSON])
                res.publish_messages_to_channel_json_2_xx_application_json_object = out
            if utils.match_content_type(content_type, 'application/x-msgpack'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/x-msgpack'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def publish_messages_to_channel_raw(self, request: operations.PublishMessagesToChannelRawRequest) -> operations.PublishMessagesToChannelRawResponse:
        r"""Publish a message to a channel
        Publish a message to the specified channel
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PublishMessagesToChannelRawRequest, base_url, '/channels/{channel_id}/messages', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.PublishMessagesToChannelRawRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PublishMessagesToChannelRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PublishMessagesToChannelRaw2XXApplicationJSON])
                res.publish_messages_to_channel_raw_2_xx_application_json_object = out
            if utils.match_content_type(content_type, 'application/x-msgpack'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/x-msgpack'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    