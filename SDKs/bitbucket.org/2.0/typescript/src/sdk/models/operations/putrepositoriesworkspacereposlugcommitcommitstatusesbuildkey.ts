/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class PutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeySecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=Authorization",
  })
  apiKey?: string;

  @SpeakeasyMetadata({ data: "security, scheme=true;type=http;subtype=basic" })
  basic?: shared.SchemeBasic;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2?: string;
}

export class PutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyRequest extends SpeakeasyBase {
  /**
   * The updated build status object
   */
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: Record<string, any>;

  /**
   * The commit's SHA1.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=commit",
  })
  commit: string;

  /**
   * The build status' unique key
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=key" })
  key: string;

  /**
   * This can either be the repository slug or the UUID of the repository,
   *
   * @remarks
   * surrounded by curly-braces, for example: `{repository UUID}`.
   *
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=repo_slug",
  })
  repoSlug: string;

  /**
   * This can either be the workspace ID (slug) or the workspace UUID
   *
   * @remarks
   * surrounded by curly-braces, for example: `{workspace UUID}`.
   *
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=workspace",
  })
  workspace: string;
}

export class PutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * The updated build status object.
   */
  @SpeakeasyMetadata()
  commitstatus?: Record<string, any>;

  /**
   * If the repository or build does not exist
   */
  @SpeakeasyMetadata()
  error?: Record<string, any>;
}
