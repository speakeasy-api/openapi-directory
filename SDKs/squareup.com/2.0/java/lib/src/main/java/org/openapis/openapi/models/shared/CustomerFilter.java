/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CustomerFilter - Represents a set of `CustomerQuery` filters used to limit the set of
 * customers returned by the [SearchCustomers](https://developer.squareup.com/reference/square_2021-08-18/customers-api/search-customers) endpoint.
 */
public class CustomerFilter {
    /**
     * Represents a generic time range. The start and end values are
     * represented in RFC 3339 format. Time ranges are customized to be
     * inclusive or exclusive based on the needs of a particular endpoint.
     * Refer to the relevant endpoint-specific documentation to determine
     * how time ranges are handled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    public TimeRange createdAt;
    public CustomerFilter withCreatedAt(TimeRange createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The creation source filter.
     * 
     * If one or more creation sources are set, customer profiles are included in,
     * or excluded from, the result if they match at least one of the filter criteria.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creation_source")
    public CustomerCreationSourceFilter creationSource;
    public CustomerFilter withCreationSource(CustomerCreationSourceFilter creationSource) {
        this.creationSource = creationSource;
        return this;
    }
    
    /**
     * A filter to select customers based on exact or fuzzy matching of
     * customer attributes against a specified query. Depending on the customer attributes, 
     * the filter can be case-sensitive. This filter can be exact or fuzzy, but it cannot be both.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email_address")
    public CustomerTextFilter emailAddress;
    public CustomerFilter withEmailAddress(CustomerTextFilter emailAddress) {
        this.emailAddress = emailAddress;
        return this;
    }
    
    /**
     * A filter to select resources based on an exact field value. For any given
     * value, the value can only be in one property. Depending on the field, either
     * all properties can be set or only a subset will be available.
     * 
     * Refer to the documentation of the field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("group_ids")
    public FilterValue groupIds;
    public CustomerFilter withGroupIds(FilterValue groupIds) {
        this.groupIds = groupIds;
        return this;
    }
    
    /**
     * A filter to select customers based on exact or fuzzy matching of
     * customer attributes against a specified query. Depending on the customer attributes, 
     * the filter can be case-sensitive. This filter can be exact or fuzzy, but it cannot be both.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_number")
    public CustomerTextFilter phoneNumber;
    public CustomerFilter withPhoneNumber(CustomerTextFilter phoneNumber) {
        this.phoneNumber = phoneNumber;
        return this;
    }
    
    /**
     * A filter to select customers based on exact or fuzzy matching of
     * customer attributes against a specified query. Depending on the customer attributes, 
     * the filter can be case-sensitive. This filter can be exact or fuzzy, but it cannot be both.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference_id")
    public CustomerTextFilter referenceId;
    public CustomerFilter withReferenceId(CustomerTextFilter referenceId) {
        this.referenceId = referenceId;
        return this;
    }
    
    /**
     * Represents a generic time range. The start and end values are
     * represented in RFC 3339 format. Time ranges are customized to be
     * inclusive or exclusive based on the needs of a particular endpoint.
     * Refer to the relevant endpoint-specific documentation to determine
     * how time ranges are handled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    public TimeRange updatedAt;
    public CustomerFilter withUpdatedAt(TimeRange updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
}
