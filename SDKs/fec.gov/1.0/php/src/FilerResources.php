<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class FilerResources 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * 
     * Use this endpoint to look up the RAD Analyst for a committee.
     * 
     * The mission of the Reports Analysis Division (RAD) is to ensure that
     * campaigns and political committees file timely and accurate reports that fully disclose
     * their financial activities.  RAD is responsible for reviewing statements and financial
     * reports filed by political committees participating in federal elections, providing
     * assistance and guidance to the committees to properly file their reports, and for taking
     * appropriate action to ensure compliance with the Federal Election Campaign Act (FECA).
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRadAnalystRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRadAnalystResponse
     */
	public function getRadAnalyst(
        \OpenAPI\OpenAPI\Models\Operations\GetRadAnalystRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRadAnalystResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/rad-analyst/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRadAnalystRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRadAnalystResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->radAnalystPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RadAnalystPage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * 
     * State laws and procedures govern elections for state or local offices as well as
     * how candidates appear on election ballots.
     * Contact the appropriate state election office for more information.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetStateElectionOfficeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetStateElectionOfficeResponse
     */
	public function getStateElectionOffice(
        \OpenAPI\OpenAPI\Models\Operations\GetStateElectionOfficeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetStateElectionOfficeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/state-election-office/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetStateElectionOfficeRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetStateElectionOfficeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->stateElectionOfficeInfoPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StateElectionOfficeInfoPage', 'json');
            }
        }

        return $response;
    }
}