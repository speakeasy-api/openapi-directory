/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * PatchConfig - Patch configuration specifications. Contains details on how to apply the patch(es) to a VM instance.
 */
public class PatchConfig {
    /**
     * Apt patching is completed by executing `apt-get update &amp;&amp; apt-get upgrade`. Additional options can be set to control how this is executed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("apt")
    public AptSettings apt;

    public PatchConfig withApt(AptSettings apt) {
        this.apt = apt;
        return this;
    }
    
    /**
     * Googet patching is performed by running `googet update`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("goo")
    public java.util.Map<String, Object> goo;

    public PatchConfig withGoo(java.util.Map<String, Object> goo) {
        this.goo = goo;
        return this;
    }
    
    /**
     * Allows the patch job to run on Managed instance groups (MIGs).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("migInstancesAllowed")
    public Boolean migInstancesAllowed;

    public PatchConfig withMigInstancesAllowed(Boolean migInstancesAllowed) {
        this.migInstancesAllowed = migInstancesAllowed;
        return this;
    }
    
    /**
     * A step that runs an executable for a PatchJob.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postStep")
    public ExecStep postStep;

    public PatchConfig withPostStep(ExecStep postStep) {
        this.postStep = postStep;
        return this;
    }
    
    /**
     * A step that runs an executable for a PatchJob.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preStep")
    public ExecStep preStep;

    public PatchConfig withPreStep(ExecStep preStep) {
        this.preStep = preStep;
        return this;
    }
    
    /**
     * Post-patch reboot settings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rebootConfig")
    public PatchConfigRebootConfigEnum rebootConfig;

    public PatchConfig withRebootConfig(PatchConfigRebootConfigEnum rebootConfig) {
        this.rebootConfig = rebootConfig;
        return this;
    }
    
    /**
     * Windows patching is performed using the Windows Update Agent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("windowsUpdate")
    public WindowsUpdateSettings windowsUpdate;

    public PatchConfig withWindowsUpdate(WindowsUpdateSettings windowsUpdate) {
        this.windowsUpdate = windowsUpdate;
        return this;
    }
    
    /**
     * Yum patching is performed by executing `yum update`. Additional options can be set to control how this is executed. Note that not all settings are supported on all platforms.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("yum")
    public YumSettings yum;

    public PatchConfig withYum(YumSettings yum) {
        this.yum = yum;
        return this;
    }
    
    /**
     * Zypper patching is performed by running `zypper patch`. See also https://en.opensuse.org/SDB:Zypper_manual.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zypper")
    public ZypperSettings zypper;

    public PatchConfig withZypper(ZypperSettings zypper) {
        this.zypper = zypper;
        return this;
    }
    
    public PatchConfig(){}
}
