"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Notes:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def keep_notes_create(self, request: operations.KeepNotesCreateRequest, security: operations.KeepNotesCreateSecurity) -> operations.KeepNotesCreateResponse:
        r"""Creates a new note."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/notes'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "note_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.KeepNotesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.KeepNotesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Note])
                res.note = out

        return res

    def keep_notes_delete(self, request: operations.KeepNotesDeleteRequest, security: operations.KeepNotesDeleteSecurity) -> operations.KeepNotesDeleteResponse:
        r"""Deletes a note. Caller must have the `OWNER` role on the note to delete. Deleting a note removes the resource immediately and cannot be undone. Any collaborators will lose access to the note."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.KeepNotesDeleteRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.KeepNotesDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.KeepNotesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def keep_notes_get(self, request: operations.KeepNotesGetRequest, security: operations.KeepNotesGetSecurity) -> operations.KeepNotesGetResponse:
        r"""Gets a note."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.KeepNotesGetRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.KeepNotesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.KeepNotesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Note])
                res.note = out

        return res

    def keep_notes_list(self, request: operations.KeepNotesListRequest, security: operations.KeepNotesListSecurity) -> operations.KeepNotesListResponse:
        r"""Lists notes. Every list call returns a page of results with `page_size` as the upper bound of returned items. A `page_size` of zero allows the server to choose the upper bound. The ListNotesResponse contains at most `page_size` entries. If there are more things left to list, it provides a `next_page_token` value. (Page tokens are opaque values.) To get the next page of results, copy the result's `next_page_token` into the next request's `page_token`. Repeat until the `next_page_token` returned with a page of results is empty. ListNotes return consistent results in the face of concurrent changes, or signals that it cannot with an ABORTED error."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/notes'
        
        query_params = utils.get_query_params(operations.KeepNotesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.KeepNotesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListNotesResponse])
                res.list_notes_response = out

        return res

    def keep_notes_permissions_batch_create(self, request: operations.KeepNotesPermissionsBatchCreateRequest, security: operations.KeepNotesPermissionsBatchCreateSecurity) -> operations.KeepNotesPermissionsBatchCreateResponse:
        r"""Creates one or more permissions on the note. Only permissions with the `WRITER` role may be created. If adding any permission fails, then the entire request fails and no changes are made."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.KeepNotesPermissionsBatchCreateRequest, base_url, '/v1/{parent}/permissions:batchCreate', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "batch_create_permissions_request_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.KeepNotesPermissionsBatchCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.KeepNotesPermissionsBatchCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchCreatePermissionsResponse])
                res.batch_create_permissions_response = out

        return res

    def keep_notes_permissions_batch_delete(self, request: operations.KeepNotesPermissionsBatchDeleteRequest, security: operations.KeepNotesPermissionsBatchDeleteSecurity) -> operations.KeepNotesPermissionsBatchDeleteResponse:
        r"""Deletes one or more permissions on the note. The specified entities will immediately lose access. A permission with the `OWNER` role can't be removed. If removing a permission fails, then the entire request fails and no changes are made. Returns a 400 bad request error if a specified permission does not exist on the note."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.KeepNotesPermissionsBatchDeleteRequest, base_url, '/v1/{parent}/permissions:batchDelete', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "batch_delete_permissions_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.KeepNotesPermissionsBatchDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.KeepNotesPermissionsBatchDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    