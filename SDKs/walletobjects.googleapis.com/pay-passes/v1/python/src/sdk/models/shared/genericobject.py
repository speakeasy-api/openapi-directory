"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import applinkdata as shared_applinkdata
from ..shared import barcode as shared_barcode
from ..shared import groupinginfo as shared_groupinginfo
from ..shared import image as shared_image
from ..shared import imagemoduledata as shared_imagemoduledata
from ..shared import linksmoduledata as shared_linksmoduledata
from ..shared import localizedstring as shared_localizedstring
from ..shared import notifications as shared_notifications
from ..shared import passconstraints as shared_passconstraints
from ..shared import rotatingbarcode as shared_rotatingbarcode
from ..shared import textmoduledata as shared_textmoduledata
from ..shared import timeinterval as shared_timeinterval
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GenericObjectGenericTypeEnum(str, Enum):
    r"""Specify which `GenericType` the card belongs to. Deprecated."""
    GENERIC_TYPE_UNSPECIFIED = 'GENERIC_TYPE_UNSPECIFIED'

class GenericObjectStateEnum(str, Enum):
    r"""The state of the object. This field is used to determine how an object is displayed in the app. For example, an `inactive` object is moved to the \\"Expired passes\\" section. If this is not provided, the object would be considered `ACTIVE`."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    ACTIVE_UPPER = 'ACTIVE'
    ACTIVE_LOWER = 'active'
    COMPLETED_UPPER = 'COMPLETED'
    COMPLETED_LOWER = 'completed'
    EXPIRED_UPPER = 'EXPIRED'
    EXPIRED_LOWER = 'expired'
    INACTIVE_UPPER = 'INACTIVE'
    INACTIVE_LOWER = 'inactive'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GenericObject:
    r"""Generic Object Next ID: 119"""
    
    app_link_data: Optional[shared_applinkdata.AppLinkData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appLinkData'), 'exclude': lambda f: f is None }})  
    barcode: Optional[shared_barcode.Barcode] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('barcode'), 'exclude': lambda f: f is None }})  
    card_title: Optional[shared_localizedstring.LocalizedString] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cardTitle'), 'exclude': lambda f: f is None }})  
    class_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('classId'), 'exclude': lambda f: f is None }})
    r"""Required. The class associated with this object. The class must be of the same type as this object, must already exist, and must be approved. Class IDs should follow the format `issuerID.identifier` where `issuerID` is issued by Google and `identifier` is chosen by you."""  
    generic_type: Optional[GenericObjectGenericTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('genericType'), 'exclude': lambda f: f is None }})
    r"""Specify which `GenericType` the card belongs to. Deprecated."""  
    grouping_info: Optional[shared_groupinginfo.GroupingInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupingInfo'), 'exclude': lambda f: f is None }})  
    has_users: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasUsers'), 'exclude': lambda f: f is None }})
    r"""Indicates if the object has users. This field is set by the platform."""  
    header: Optional[shared_localizedstring.LocalizedString] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('header'), 'exclude': lambda f: f is None }})  
    hero_image: Optional[shared_image.Image] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('heroImage'), 'exclude': lambda f: f is None }})
    r"""Wrapping type for Google hosted images. Next ID: 7"""  
    hex_background_color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hexBackgroundColor'), 'exclude': lambda f: f is None }})
    r"""The background color for the card. If not set, the dominant color of the hero image is used, and if no hero image is set, the dominant color of the logo is used and if logo is not set, a color would be chosen by Google."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Required. The unique identifier for an object. This ID must be unique across all objects from an issuer. This value needs to follow the format `issuerID.identifier` where `issuerID` is issued by Google and `identifier` is chosen by you. The unique identifier can only include alphanumeric characters, `.`, `_`, or `-`."""  
    image_modules_data: Optional[list[shared_imagemoduledata.ImageModuleData]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageModulesData'), 'exclude': lambda f: f is None }})
    r"""Image module data. Only one of the image from class and one from object level will be rendered when both set."""  
    links_module_data: Optional[shared_linksmoduledata.LinksModuleData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('linksModuleData'), 'exclude': lambda f: f is None }})  
    logo: Optional[shared_image.Image] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logo'), 'exclude': lambda f: f is None }})
    r"""Wrapping type for Google hosted images. Next ID: 7"""  
    notifications: Optional[shared_notifications.Notifications] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notifications'), 'exclude': lambda f: f is None }})
    r"""Indicates if the object needs to have notification enabled. We support only one of ExpiryNotification/UpcomingNotification. `expiryNotification` takes precedence over `upcomingNotification`. In other words if `expiryNotification` is set, we ignore the `upcomingNotification` field."""  
    pass_constraints: Optional[shared_passconstraints.PassConstraints] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('passConstraints'), 'exclude': lambda f: f is None }})
    r"""Container for any constraints that may be placed on passes."""  
    rotating_barcode: Optional[shared_rotatingbarcode.RotatingBarcode] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rotatingBarcode'), 'exclude': lambda f: f is None }})  
    smart_tap_redemption_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('smartTapRedemptionValue'), 'exclude': lambda f: f is None }})
    r"""The value that will be transmitted to a Smart Tap certified terminal over NFC for this object. The class level fields `enableSmartTap` and `redemptionIssuers` must also be set up correctly in order for the pass to support Smart Tap. Only ASCII characters are supported."""  
    state: Optional[GenericObjectStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""The state of the object. This field is used to determine how an object is displayed in the app. For example, an `inactive` object is moved to the \\"Expired passes\\" section. If this is not provided, the object would be considered `ACTIVE`."""  
    subheader: Optional[shared_localizedstring.LocalizedString] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subheader'), 'exclude': lambda f: f is None }})  
    text_modules_data: Optional[list[shared_textmoduledata.TextModuleData]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('textModulesData'), 'exclude': lambda f: f is None }})
    r"""Text module data. If `textModulesData` is also defined on the class, both will be displayed. The maximum number of these fields displayed is 10 from class and 10 from object."""  
    valid_time_interval: Optional[shared_timeinterval.TimeInterval] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validTimeInterval'), 'exclude': lambda f: f is None }})  
    