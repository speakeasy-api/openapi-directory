"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import listmigrationworkflowsresponse as shared_listmigrationworkflowsresponse
from enum import Enum
from typing import Any, Optional

class ListWorkflowsStatusEnum(str, Enum):
    r"""The status of the migration workflow."""
    CREATING = 'CREATING'
    NOT_STARTED = 'NOT_STARTED'
    CREATION_FAILED = 'CREATION_FAILED'
    STARTING = 'STARTING'
    IN_PROGRESS = 'IN_PROGRESS'
    WORKFLOW_FAILED = 'WORKFLOW_FAILED'
    PAUSED = 'PAUSED'
    PAUSING = 'PAUSING'
    PAUSING_FAILED = 'PAUSING_FAILED'
    USER_ATTENTION_REQUIRED = 'USER_ATTENTION_REQUIRED'
    DELETING = 'DELETING'
    DELETION_FAILED = 'DELETION_FAILED'
    DELETED = 'DELETED'
    COMPLETED = 'COMPLETED'


@dataclasses.dataclass
class ListWorkflowsRequest:
    
    ads_application_configuration_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'adsApplicationConfigurationName', 'style': 'form', 'explode': True }})
    r"""The name of the application configured in Application Discovery Service."""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxResults', 'style': 'form', 'explode': True }})
    r"""The maximum number of results that can be returned."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'name', 'style': 'form', 'explode': True }})
    r"""The name of the migration workflow."""  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'nextToken', 'style': 'form', 'explode': True }})
    r"""The pagination token."""  
    status: Optional[ListWorkflowsStatusEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'status', 'style': 'form', 'explode': True }})
    r"""The status of the migration workflow."""  
    template_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'templateId', 'style': 'form', 'explode': True }})
    r"""The ID of the template."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class ListWorkflowsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    list_migration_workflows_response: Optional[shared_listmigrationworkflowsresponse.ListMigrationWorkflowsResponse] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    