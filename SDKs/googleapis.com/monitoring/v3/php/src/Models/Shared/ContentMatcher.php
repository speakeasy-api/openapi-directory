<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * ContentMatcher - Optional. Used to perform content matching. This allows matching based on substrings and regular expressions, together with their negations. Only the first 4 MB of an HTTP or HTTPS check's response (and the first 1 MB of a TCP check's response) are examined for purposes of content matching.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class ContentMatcher
{
    /**
     * String, regex or JSON content to match. Maximum 1024 bytes. An empty content string indicates no content matching is to be performed.
     * 
     * @var ?string $content
     */
	#[\JMS\Serializer\Annotation\SerializedName('content')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $content = null;
    
    /**
     * Information needed to perform a JSONPath content match. Used for ContentMatcherOption::MATCHES_JSON_PATH and ContentMatcherOption::NOT_MATCHES_JSON_PATH.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\JsonPathMatcher $jsonPathMatcher
     */
	#[\JMS\Serializer\Annotation\SerializedName('jsonPathMatcher')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\JsonPathMatcher')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?JsonPathMatcher $jsonPathMatcher = null;
    
    /**
     * The type of content matcher that will be applied to the server output, compared to the content string when the check is run.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ContentMatcherMatcherEnum $matcher
     */
	#[\JMS\Serializer\Annotation\SerializedName('matcher')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\ContentMatcherMatcherEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ContentMatcherMatcherEnum $matcher = null;
    
	public function __construct()
	{
		$this->content = null;
		$this->jsonPathMatcher = null;
		$this->matcher = null;
	}
}
