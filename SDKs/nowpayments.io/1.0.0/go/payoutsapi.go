// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"context"
	"fmt"
	"net/http"
	"openapi/pkg/models/operations"
	"openapi/pkg/utils"
)

type payoutsAPI struct {
	defaultClient  HTTPClient
	securityClient HTTPClient
	serverURL      string
	language       string
	sdkVersion     string
	genVersion     string
}

func newPayoutsAPI(defaultClient, securityClient HTTPClient, serverURL, language, sdkVersion, genVersion string) *payoutsAPI {
	return &payoutsAPI{
		defaultClient:  defaultClient,
		securityClient: securityClient,
		serverURL:      serverURL,
		language:       language,
		sdkVersion:     sdkVersion,
		genVersion:     genVersion,
	}
}

// VerifyPayout - Verify payout
// This method is required to verify payouts by using your 2fa code.
// You’ll have 10 attempts to verify the payout. If it is not verified after 10 attempts, the payout will remain in ‘creating’ status.
// Payout will be processed only when it is verified.
//
// Make sure to have your 2fa authentication enabled in your NOWPayments Account (in Account Settings).
// When 2fa is disabled, the code automatically goes to your registration email.
// The code sent by email is valid for one hour.
//
// Next is a description of the required request fields:
//
// - :batch-withdrawal-id - payout id you received in `2. Create payout` method
// - verification_code - 2fa code you received with your Google Auth app or via email
//
// In order to establish an automatic verification of payouts, you should switch 2FA through the application.
// There are several libraries for different frameworks aimed on generating a 2FA codes based on a secret key from your account settings.
// e.g: Speakeasy for JavaScript.
// We do not recommend to change any default settings.
//
// ```
//
//	const 2faVerificationCode = speakeasy.totp({
//	      your_2fa_secret_key,
//	      encoding: 'base32',
//	})
//
// ```
func (s *payoutsAPI) VerifyPayout(ctx context.Context, request operations.VerifyPayoutRequest) (*operations.VerifyPayoutResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/v1/payout/{withdrawals-id}/verify", request.PathParams, nil)

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, "Request", "json")
	if err != nil {
		return nil, fmt.Errorf("error serializing request body: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, "POST", url, bodyReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	req.Header.Set("Content-Type", reqContentType)

	utils.PopulateHeaders(ctx, req, request.Headers)

	client := s.defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.VerifyPayoutResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
	}

	return res, nil
}
