"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import positionfiltering_enum as shared_positionfiltering_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class DescribeTrackerResponsePricingPlanEnum(str, Enum):
    r"""Always returns <code>RequestBasedUsage</code>.Deprecated. Always returns RequestBasedUsage."""
    REQUEST_BASED_USAGE = 'RequestBasedUsage'
    MOBILE_ASSET_TRACKING = 'MobileAssetTracking'
    MOBILE_ASSET_MANAGEMENT = 'MobileAssetManagement'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DescribeTrackerResponse:
    r"""Success"""
    
    create_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreateTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description') }})  
    tracker_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TrackerArn') }})  
    tracker_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TrackerName') }})  
    update_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpdateTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    kms_key_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KmsKeyId'), 'exclude': lambda f: f is None }})  
    position_filtering: Optional[shared_positionfiltering_enum.PositionFilteringEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PositionFiltering'), 'exclude': lambda f: f is None }})  
    pricing_plan: Optional[DescribeTrackerResponsePricingPlanEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PricingPlan'), 'exclude': lambda f: f is None }})  
    pricing_plan_data_source: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PricingPlanDataSource'), 'exclude': lambda f: f is None }})  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    