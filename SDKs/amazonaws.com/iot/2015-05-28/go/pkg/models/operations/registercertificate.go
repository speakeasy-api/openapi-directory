// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// RegisterCertificateRequestBodyStatusEnum - The status of the register certificate request. Valid values that you can use include <code>ACTIVE</code>, <code>INACTIVE</code>, and <code>REVOKED</code>.
type RegisterCertificateRequestBodyStatusEnum string

const (
	RegisterCertificateRequestBodyStatusEnumActive            RegisterCertificateRequestBodyStatusEnum = "ACTIVE"
	RegisterCertificateRequestBodyStatusEnumInactive          RegisterCertificateRequestBodyStatusEnum = "INACTIVE"
	RegisterCertificateRequestBodyStatusEnumRevoked           RegisterCertificateRequestBodyStatusEnum = "REVOKED"
	RegisterCertificateRequestBodyStatusEnumPendingTransfer   RegisterCertificateRequestBodyStatusEnum = "PENDING_TRANSFER"
	RegisterCertificateRequestBodyStatusEnumRegisterInactive  RegisterCertificateRequestBodyStatusEnum = "REGISTER_INACTIVE"
	RegisterCertificateRequestBodyStatusEnumPendingActivation RegisterCertificateRequestBodyStatusEnum = "PENDING_ACTIVATION"
)

func (e *RegisterCertificateRequestBodyStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ACTIVE":
		fallthrough
	case "INACTIVE":
		fallthrough
	case "REVOKED":
		fallthrough
	case "PENDING_TRANSFER":
		fallthrough
	case "REGISTER_INACTIVE":
		fallthrough
	case "PENDING_ACTIVATION":
		*e = RegisterCertificateRequestBodyStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RegisterCertificateRequestBodyStatusEnum: %s", s)
	}
}

type RegisterCertificateRequestBody struct {
	// The PEM of a certificate.
	CaCertificatePem *string `json:"caCertificatePem,omitempty"`
	// The PEM of a certificate.
	CertificatePem string `json:"certificatePem"`
	// The status of the register certificate request. Valid values that you can use include <code>ACTIVE</code>, <code>INACTIVE</code>, and <code>REVOKED</code>.
	Status *RegisterCertificateRequestBodyStatusEnum `json:"status,omitempty"`
}

type RegisterCertificateRequest struct {
	RequestBody       RegisterCertificateRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                        `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                        `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                        `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                        `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                        `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                        `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                        `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// <p>A boolean value that specifies if the certificate is set to active.</p> <p>Valid values: <code>ACTIVE | INACTIVE</code> </p>
	SetAsActive *bool `queryParam:"style=form,explode=true,name=setAsActive"`
}

type RegisterCertificateResponse struct {
	// CertificateConflictException
	CertificateConflictException interface{}
	// CertificateStateException
	CertificateStateException interface{}
	// CertificateValidationException
	CertificateValidationException interface{}
	ContentType                    string
	// InternalFailureException
	InternalFailureException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// Success
	RegisterCertificateResponse *shared.RegisterCertificateResponse
	// ResourceAlreadyExistsException
	ResourceAlreadyExistsException interface{}
	StatusCode                     int
	RawResponse                    *http.Response
	// ServiceUnavailableException
	ServiceUnavailableException interface{}
	// ThrottlingException
	ThrottlingException interface{}
	// UnauthorizedException
	UnauthorizedException interface{}
}
