<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class V1IbanVerification 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Checks validity of an IBAN number
     * 
     * Basic verification of an IBAN number validating its structure
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IbanBasicRequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IbanBasicSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IbanBasicResponse
     */
	public function ibanBasic(
        \OpenAPI\OpenAPI\Models\Operations\IbanBasicRequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\IbanBasicSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IbanBasicResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/iban-verification/check-iban');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IbanBasicResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ibanBasic200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\IbanBasic200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ibanBasicDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\IbanBasicDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Checks validity of an IBAN number
     * 
     * Comprehensive verification of IBAN number using a service provider for verification
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IbanComprehensiveRequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IbanComprehensiveSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IbanComprehensiveResponse
     */
	public function ibanComprehensive(
        \OpenAPI\OpenAPI\Models\Operations\IbanComprehensiveRequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\IbanComprehensiveSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IbanComprehensiveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/iban-verification/comprehensive-check-iban');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IbanComprehensiveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->oneapi1v11ibanVerification1checkIbanPostResponses200ContentApplication1jsonSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Oneapi1v11ibanVerification1checkIbanPostResponses200ContentApplication1jsonSchema', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ibanComprehensiveDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\IbanComprehensiveDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
}