"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

SERVERS = [
    "https://wireless.twilio.com",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""This is the public Twilio REST API."""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        
    
    
    def create_command(self, request: operations.CreateCommandCreateCommandRequest, security: operations.CreateCommandSecurity, server_url: Optional[str] = None) -> operations.CreateCommandResponse:
        r"""Send a Command to a Sim."""
        base_url = operations.CREATE_COMMAND_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/Commands'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateCommandResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.WirelessV1Command])
                res.wireless_v1_command = out

        return res

    def create_rate_plan(self, request: operations.CreateRatePlanCreateRatePlanRequest, security: operations.CreateRatePlanSecurity, server_url: Optional[str] = None) -> operations.CreateRatePlanResponse:
        base_url = operations.CREATE_RATE_PLAN_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/RatePlans'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateRatePlanResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.WirelessV1RatePlan])
                res.wireless_v1_rate_plan = out

        return res

    def delete_command(self, request: operations.DeleteCommandRequest, security: operations.DeleteCommandSecurity, server_url: Optional[str] = None) -> operations.DeleteCommandResponse:
        r"""Delete a Command instance from your account."""
        base_url = operations.DELETE_COMMAND_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteCommandRequest, base_url, '/v1/Commands/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteCommandResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_rate_plan(self, request: operations.DeleteRatePlanRequest, security: operations.DeleteRatePlanSecurity, server_url: Optional[str] = None) -> operations.DeleteRatePlanResponse:
        base_url = operations.DELETE_RATE_PLAN_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteRatePlanRequest, base_url, '/v1/RatePlans/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRatePlanResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_sim(self, request: operations.DeleteSimRequest, security: operations.DeleteSimSecurity, server_url: Optional[str] = None) -> operations.DeleteSimResponse:
        r"""Delete a Sim resource on your Account."""
        base_url = operations.DELETE_SIM_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteSimRequest, base_url, '/v1/Sims/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSimResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def fetch_command(self, request: operations.FetchCommandRequest, security: operations.FetchCommandSecurity, server_url: Optional[str] = None) -> operations.FetchCommandResponse:
        r"""Fetch a Command instance from your account."""
        base_url = operations.FETCH_COMMAND_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchCommandRequest, base_url, '/v1/Commands/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchCommandResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.WirelessV1Command])
                res.wireless_v1_command = out

        return res

    def fetch_rate_plan(self, request: operations.FetchRatePlanRequest, security: operations.FetchRatePlanSecurity, server_url: Optional[str] = None) -> operations.FetchRatePlanResponse:
        base_url = operations.FETCH_RATE_PLAN_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchRatePlanRequest, base_url, '/v1/RatePlans/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchRatePlanResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.WirelessV1RatePlan])
                res.wireless_v1_rate_plan = out

        return res

    def fetch_sim(self, request: operations.FetchSimRequest, security: operations.FetchSimSecurity, server_url: Optional[str] = None) -> operations.FetchSimResponse:
        r"""Fetch a Sim resource on your Account."""
        base_url = operations.FETCH_SIM_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchSimRequest, base_url, '/v1/Sims/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchSimResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.WirelessV1Sim])
                res.wireless_v1_sim = out

        return res

    def list_account_usage_record(self, request: operations.ListAccountUsageRecordRequest, security: operations.ListAccountUsageRecordSecurity, server_url: Optional[str] = None) -> operations.ListAccountUsageRecordResponse:
        base_url = operations.LIST_ACCOUNT_USAGE_RECORD_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/UsageRecords'
        
        query_params = utils.get_query_params(operations.ListAccountUsageRecordRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListAccountUsageRecordResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListAccountUsageRecordListAccountUsageRecordResponse])
                res.list_account_usage_record_response = out

        return res

    def list_command(self, request: operations.ListCommandRequest, security: operations.ListCommandSecurity, server_url: Optional[str] = None) -> operations.ListCommandResponse:
        r"""Retrieve a list of Commands from your account."""
        base_url = operations.LIST_COMMAND_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/Commands'
        
        query_params = utils.get_query_params(operations.ListCommandRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListCommandResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListCommandListCommandResponse])
                res.list_command_response = out

        return res

    def list_data_session(self, request: operations.ListDataSessionRequest, security: operations.ListDataSessionSecurity, server_url: Optional[str] = None) -> operations.ListDataSessionResponse:
        base_url = operations.LIST_DATA_SESSION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListDataSessionRequest, base_url, '/v1/Sims/{SimSid}/DataSessions', request)
        
        query_params = utils.get_query_params(operations.ListDataSessionRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListDataSessionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListDataSessionListDataSessionResponse])
                res.list_data_session_response = out

        return res

    def list_rate_plan(self, request: operations.ListRatePlanRequest, security: operations.ListRatePlanSecurity, server_url: Optional[str] = None) -> operations.ListRatePlanResponse:
        base_url = operations.LIST_RATE_PLAN_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/RatePlans'
        
        query_params = utils.get_query_params(operations.ListRatePlanRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListRatePlanResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListRatePlanListRatePlanResponse])
                res.list_rate_plan_response = out

        return res

    def list_sim(self, request: operations.ListSimRequest, security: operations.ListSimSecurity, server_url: Optional[str] = None) -> operations.ListSimResponse:
        r"""Retrieve a list of Sim resources on your Account."""
        base_url = operations.LIST_SIM_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/Sims'
        
        query_params = utils.get_query_params(operations.ListSimRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListSimResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSimListSimResponse])
                res.list_sim_response = out

        return res

    def list_usage_record(self, request: operations.ListUsageRecordRequest, security: operations.ListUsageRecordSecurity, server_url: Optional[str] = None) -> operations.ListUsageRecordResponse:
        base_url = operations.LIST_USAGE_RECORD_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListUsageRecordRequest, base_url, '/v1/Sims/{SimSid}/UsageRecords', request)
        
        query_params = utils.get_query_params(operations.ListUsageRecordRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListUsageRecordResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListUsageRecordListUsageRecordResponse])
                res.list_usage_record_response = out

        return res

    def update_rate_plan(self, request: operations.UpdateRatePlanRequest, security: operations.UpdateRatePlanSecurity, server_url: Optional[str] = None) -> operations.UpdateRatePlanResponse:
        base_url = operations.UPDATE_RATE_PLAN_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateRatePlanRequest, base_url, '/v1/RatePlans/{Sid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateRatePlanResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.WirelessV1RatePlan])
                res.wireless_v1_rate_plan = out

        return res

    def update_sim(self, request: operations.UpdateSimRequest, security: operations.UpdateSimSecurity, server_url: Optional[str] = None) -> operations.UpdateSimResponse:
        r"""Updates the given properties of a Sim resource on your Account."""
        base_url = operations.UPDATE_SIM_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateSimRequest, base_url, '/v1/Sims/{Sid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateSimResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.WirelessV1Sim])
                res.wireless_v1_sim = out

        return res

    