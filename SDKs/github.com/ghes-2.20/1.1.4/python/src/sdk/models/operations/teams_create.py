"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import basic_error as shared_basic_error
from ..shared import team_full as shared_team_full
from ..shared import validation_error as shared_validation_error
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class TeamsCreateRequestBodyPermissionEnum(str, Enum):
    r"""**Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:
    \* `pull` - team members can pull, but not push to or administer newly-added repositories.  
    \* `push` - team members can pull and push, but not administer newly-added repositories.  
    \* `admin` - team members can pull, push and administer newly-added repositories.
    """
    PULL = 'pull'
    PUSH = 'push'
    ADMIN = 'admin'

class TeamsCreateRequestBodyPrivacyEnum(str, Enum):
    r"""The level of privacy this team should have. The options are:
    **For a non-nested team:**  
    \* `secret` - only visible to organization owners and members of this team.  
    \* `closed` - visible to all members of this organization.  
    Default: `secret`  
    **For a parent or child team:**  
    \* `closed` - visible to all members of this organization.  
    Default for child team: `closed`
    """
    SECRET = 'secret'
    CLOSED = 'closed'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TeamsCreateRequestBody:
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the team."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of the team."""  
    maintainers: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maintainers'), 'exclude': lambda f: f is None }})
    r"""List GitHub IDs for organization members who will become team maintainers."""  
    parent_team_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parent_team_id'), 'exclude': lambda f: f is None }})
    r"""The ID of a team to set as the parent team."""  
    permission: Optional[TeamsCreateRequestBodyPermissionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permission'), 'exclude': lambda f: f is None }})
    r"""**Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:
    \* `pull` - team members can pull, but not push to or administer newly-added repositories.  
    \* `push` - team members can pull and push, but not administer newly-added repositories.  
    \* `admin` - team members can pull, push and administer newly-added repositories.
    """  
    privacy: Optional[TeamsCreateRequestBodyPrivacyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privacy'), 'exclude': lambda f: f is None }})
    r"""The level of privacy this team should have. The options are:
    **For a non-nested team:**  
    \* `secret` - only visible to organization owners and members of this team.  
    \* `closed` - visible to all members of this organization.  
    Default: `secret`  
    **For a parent or child team:**  
    \* `closed` - visible to all members of this organization.  
    Default for child team: `closed`
    """  
    repo_names: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repo_names'), 'exclude': lambda f: f is None }})
    r"""The full name (e.g., \\"organization-name/repository-name\\") of repositories to add the team to."""  
    

@dataclasses.dataclass
class TeamsCreateRequest:
    
    org: str = dataclasses.field(metadata={'path_param': { 'field_name': 'org', 'style': 'simple', 'explode': False }})  
    request_body: TeamsCreateRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class TeamsCreateResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    basic_error: Optional[shared_basic_error.BasicError] = dataclasses.field(default=None)
    r"""Forbidden"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    team_full: Optional[shared_team_full.TeamFull] = dataclasses.field(default=None)
    r"""Response"""  
    validation_error: Optional[shared_validation_error.ValidationError] = dataclasses.field(default=None)
    r"""Validation failed"""  
    