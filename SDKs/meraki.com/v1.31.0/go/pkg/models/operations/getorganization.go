// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetOrganizationRequest struct {
	OrganizationID string `pathParam:"style=simple,explode=false,name=organizationId"`
}

// GetOrganization200ApplicationJSONAPI - API related settings
type GetOrganization200ApplicationJSONAPI struct {
	// Enable API access
	Enabled *bool `json:"enabled,omitempty"`
}

// GetOrganization200ApplicationJSONCloudRegion - Region info
type GetOrganization200ApplicationJSONCloudRegion struct {
	// Name of region
	Name *string `json:"name,omitempty"`
}

// GetOrganization200ApplicationJSONCloud - Data for this organization
type GetOrganization200ApplicationJSONCloud struct {
	// Region info
	Region *GetOrganization200ApplicationJSONCloudRegion `json:"region,omitempty"`
}

// GetOrganization200ApplicationJSONLicensingModelEnum - Organization licensing model. Can be 'co-term', 'per-device', or 'subscription'.
type GetOrganization200ApplicationJSONLicensingModelEnum string

const (
	GetOrganization200ApplicationJSONLicensingModelEnumCoTerm       GetOrganization200ApplicationJSONLicensingModelEnum = "co-term"
	GetOrganization200ApplicationJSONLicensingModelEnumPerDevice    GetOrganization200ApplicationJSONLicensingModelEnum = "per-device"
	GetOrganization200ApplicationJSONLicensingModelEnumSubscription GetOrganization200ApplicationJSONLicensingModelEnum = "subscription"
)

func (e *GetOrganization200ApplicationJSONLicensingModelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "co-term":
		fallthrough
	case "per-device":
		fallthrough
	case "subscription":
		*e = GetOrganization200ApplicationJSONLicensingModelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganization200ApplicationJSONLicensingModelEnum: %s", s)
	}
}

// GetOrganization200ApplicationJSONLicensing - Licensing related settings
type GetOrganization200ApplicationJSONLicensing struct {
	// Organization licensing model. Can be 'co-term', 'per-device', or 'subscription'.
	Model *GetOrganization200ApplicationJSONLicensingModelEnum `json:"model,omitempty"`
}

type GetOrganization200ApplicationJSONManagementDetails struct {
	// Name of management data
	Name *string `json:"name,omitempty"`
	// Value of management data
	Value *string `json:"value,omitempty"`
}

// GetOrganization200ApplicationJSONManagement - Information about the organization's management system
type GetOrganization200ApplicationJSONManagement struct {
	// Details related to organization management, possibly empty
	Details []GetOrganization200ApplicationJSONManagementDetails `json:"details,omitempty"`
}

// GetOrganization200ApplicationJSON - Successful operation
type GetOrganization200ApplicationJSON struct {
	// API related settings
	API *GetOrganization200ApplicationJSONAPI `json:"api,omitempty"`
	// Data for this organization
	Cloud *GetOrganization200ApplicationJSONCloud `json:"cloud,omitempty"`
	// Organization ID
	ID *string `json:"id,omitempty"`
	// Licensing related settings
	Licensing *GetOrganization200ApplicationJSONLicensing `json:"licensing,omitempty"`
	// Information about the organization's management system
	Management *GetOrganization200ApplicationJSONManagement `json:"management,omitempty"`
	// Organization name
	Name *string `json:"name,omitempty"`
	// Organization URL
	URL *string `json:"url,omitempty"`
}

type GetOrganizationResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	GetOrganization200ApplicationJSONObject *GetOrganization200ApplicationJSON
}
