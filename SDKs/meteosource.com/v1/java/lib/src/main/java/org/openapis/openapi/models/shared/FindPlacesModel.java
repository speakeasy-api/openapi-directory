/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * FindPlacesModel - Successful Response
 */
public class FindPlacesModel {
    /**
     * first-level administrative area (a US state, for example)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("adm_area1")
    public String admArea1;

    public FindPlacesModel withAdmArea1(String admArea1) {
        this.admArea1 = admArea1;
        return this;
    }
    
    /**
     * second-level administrative area (a US county, for example)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("adm_area2")
    public String admArea2;

    public FindPlacesModel withAdmArea2(String admArea2) {
        this.admArea2 = admArea2;
        return this;
    }
    
    /**
     * name of the country
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    public String country;

    public FindPlacesModel withCountry(String country) {
        this.country = country;
        return this;
    }
    
    /**
     * Latitude of the point, always in the format \&lt;float&gt;&lt;N/S&gt;, for example ``23.5S``
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lat")
    public String lat;

    public FindPlacesModel withLat(String lat) {
        this.lat = lat;
        return this;
    }
    
    /**
     * Longitude of the point, always in format \&lt;float&gt;&lt;E/W&gt;, for example ``23.5W``
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lon")
    public String lon;

    public FindPlacesModel withLon(String lon) {
        this.lon = lon;
        return this;
    }
    
    /**
     * name of the place
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public FindPlacesModel withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * unique identifier of the place, which can be used in /point and /map endpoints
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("place_id")
    public String placeId;

    public FindPlacesModel withPlaceId(String placeId) {
        this.placeId = placeId;
        return this;
    }
    
    /**
     * Timezone of the point in tzinfo format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timezone")
    public String timezone;

    public FindPlacesModel withTimezone(String timezone) {
        this.timezone = timezone;
        return this;
    }
    
    /**
     * The character of the place. May be one of the following values:
     * 
     * * administrative areas (states, counties, districts...): ``administrative_area``
     * * country: ``country``
     * * a different political entity from a country (for example, a dependent teritory): ``political_entity``
     * * villages, towns and cities: ``settlement``
     * * air industry locations: ``airbase``, ``airfield``, ``heliport``, ``airport``, ``airport_terminal``
     * * places related to water: ``bay``, ``channel``, ``fjord``, ``lake``, ``pond``, ``falls``, ``gulf``,
     *     ``harbor``, ``reservoir``, ``sea``, ``dam``, ``cape``, ``island``, ``peninsula``
     * * places related to mountain areas: ``hill``, ``mountain``, ``peak``, ``valley``, ``volcano``, ``canyon``
     * * other places related to nature: ``park``, ``reserve``, ``resort``, ``desert``
     * * places based on postcodes: ``postcode``
     *         
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;

    public FindPlacesModel withType(String type) {
        this.type = type;
        return this;
    }
    
    public FindPlacesModel(){}
}
