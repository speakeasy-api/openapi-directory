<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class LikesEssentials 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Check if a user has liked a video
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CheckIfUserLikedVideoRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CheckIfUserLikedVideoResponse
     */
	public function checkIfUserLikedVideo(
        \OpenAPI\OpenAPI\Models\Operations\CheckIfUserLikedVideoRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CheckIfUserLikedVideoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/likes/{video_id}', \OpenAPI\OpenAPI\Models\Operations\CheckIfUserLikedVideoRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CheckIfUserLikedVideoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Check if a user has liked a video
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CheckIfUserLikedVideoAlt1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CheckIfUserLikedVideoAlt1Response
     */
	public function checkIfUserLikedVideoAlt1(
        \OpenAPI\OpenAPI\Models\Operations\CheckIfUserLikedVideoAlt1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CheckIfUserLikedVideoAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/likes/{video_id}', \OpenAPI\OpenAPI\Models\Operations\CheckIfUserLikedVideoAlt1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CheckIfUserLikedVideoAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the videos that a user has liked
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetLikesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetLikesResponse
     */
	public function getLikes(
        \OpenAPI\OpenAPI\Models\Operations\GetLikesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetLikesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/likes', \OpenAPI\OpenAPI\Models\Operations\GetLikesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetLikesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetLikesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.video+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->videos = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Video>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the videos that a user has liked
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetLikesAlt1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetLikesAlt1Response
     */
	public function getLikesAlt1(
        \OpenAPI\OpenAPI\Models\Operations\GetLikesAlt1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetLikesAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/likes');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetLikesAlt1Request::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetLikesAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.video+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->videos = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Video>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the users who have liked a video
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVideoLikesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVideoLikesResponse
     */
	public function getVideoLikes(
        \OpenAPI\OpenAPI\Models\Operations\GetVideoLikesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVideoLikesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/videos/{video_id}/likes', \OpenAPI\OpenAPI\Models\Operations\GetVideoLikesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetVideoLikesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVideoLikesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.user+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->users = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\User>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the users who have liked a video
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVideoLikesAlt1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVideoLikesAlt1Response
     */
	public function getVideoLikesAlt1(
        \OpenAPI\OpenAPI\Models\Operations\GetVideoLikesAlt1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVideoLikesAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/channels/{channel_id}/videos/{video_id}/likes', \OpenAPI\OpenAPI\Models\Operations\GetVideoLikesAlt1Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetVideoLikesAlt1Request::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVideoLikesAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.user+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->users = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\User>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the users who have liked a video on an On Demand page
     * 
     * This method gets all the users who have liked a particular video on an On Demand page.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVodLikesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVodLikesResponse
     */
	public function getVodLikes(
        \OpenAPI\OpenAPI\Models\Operations\GetVodLikesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVodLikesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ondemand/pages/{ondemand_id}/likes', \OpenAPI\OpenAPI\Models\Operations\GetVodLikesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetVodLikesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVodLikesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.user+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->users = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\User>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Cause a user to like a video
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LikeVideoRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LikeVideoSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LikeVideoResponse
     */
	public function likeVideo(
        \OpenAPI\OpenAPI\Models\Operations\LikeVideoRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LikeVideoSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LikeVideoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/likes/{video_id}', \OpenAPI\OpenAPI\Models\Operations\LikeVideoRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LikeVideoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Cause a user to like a video
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LikeVideoAlt1Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LikeVideoAlt1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LikeVideoAlt1Response
     */
	public function likeVideoAlt1(
        \OpenAPI\OpenAPI\Models\Operations\LikeVideoAlt1Request $request,
        \OpenAPI\OpenAPI\Models\Operations\LikeVideoAlt1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LikeVideoAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/likes/{video_id}', \OpenAPI\OpenAPI\Models\Operations\LikeVideoAlt1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LikeVideoAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Cause a user to unlike a video
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UnlikeVideoRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UnlikeVideoSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UnlikeVideoResponse
     */
	public function unlikeVideo(
        \OpenAPI\OpenAPI\Models\Operations\UnlikeVideoRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UnlikeVideoSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UnlikeVideoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/likes/{video_id}', \OpenAPI\OpenAPI\Models\Operations\UnlikeVideoRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UnlikeVideoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Cause a user to unlike a video
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UnlikeVideoAlt1Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UnlikeVideoAlt1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UnlikeVideoAlt1Response
     */
	public function unlikeVideoAlt1(
        \OpenAPI\OpenAPI\Models\Operations\UnlikeVideoAlt1Request $request,
        \OpenAPI\OpenAPI\Models\Operations\UnlikeVideoAlt1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UnlikeVideoAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/likes/{video_id}', \OpenAPI\OpenAPI\Models\Operations\UnlikeVideoAlt1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UnlikeVideoAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
}