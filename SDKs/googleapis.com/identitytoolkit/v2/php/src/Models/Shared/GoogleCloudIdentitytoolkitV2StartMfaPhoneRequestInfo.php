<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * GoogleCloudIdentitytoolkitV2StartMfaPhoneRequestInfo - App Verification info for a StartMfa request.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class GoogleCloudIdentitytoolkitV2StartMfaPhoneRequestInfo
{
    /**
     * The information required to auto-retrieve an SMS.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\GoogleCloudIdentitytoolkitV2AutoRetrievalInfo $autoRetrievalInfo
     */
	#[\JMS\Serializer\Annotation\SerializedName('autoRetrievalInfo')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\GoogleCloudIdentitytoolkitV2AutoRetrievalInfo')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?GoogleCloudIdentitytoolkitV2AutoRetrievalInfo $autoRetrievalInfo = null;
    
    /**
     * iOS only. Receipt of successful app token validation with APNS.
     * 
     * @var ?string $iosReceipt
     */
	#[\JMS\Serializer\Annotation\SerializedName('iosReceipt')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $iosReceipt = null;
    
    /**
     * iOS only. Secret delivered to iOS app via APNS.
     * 
     * @var ?string $iosSecret
     */
	#[\JMS\Serializer\Annotation\SerializedName('iosSecret')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $iosSecret = null;
    
    /**
     * Required for enrollment. Phone number to be enrolled as MFA.
     * 
     * @var ?string $phoneNumber
     */
	#[\JMS\Serializer\Annotation\SerializedName('phoneNumber')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $phoneNumber = null;
    
    /**
     * Android only. Used to assert application identity in place of a recaptcha token (or safety net token). A Play Integrity Token can be generated via the [PlayIntegrity API] (https://developer.android.com/google/play/integrity) with applying SHA256 to the `phone_number` field as the nonce.
     * 
     * @var ?string $playIntegrityToken
     */
	#[\JMS\Serializer\Annotation\SerializedName('playIntegrityToken')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $playIntegrityToken = null;
    
    /**
     * Web only. Recaptcha solution.
     * 
     * @var ?string $recaptchaToken
     */
	#[\JMS\Serializer\Annotation\SerializedName('recaptchaToken')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $recaptchaToken = null;
    
    /**
     * Android only. Used to assert application identity in place of a recaptcha token. A SafetyNet Token can be generated via the [SafetyNet Android Attestation API](https://developer.android.com/training/safetynet/attestation.html), with the Base64 encoding of the `phone_number` field as the nonce.
     * 
     * @var ?string $safetyNetToken
     */
	#[\JMS\Serializer\Annotation\SerializedName('safetyNetToken')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $safetyNetToken = null;
    
	public function __construct()
	{
		$this->autoRetrievalInfo = null;
		$this->iosReceipt = null;
		$this->iosSecret = null;
		$this->phoneNumber = null;
		$this->playIntegrityToken = null;
		$this->recaptchaToken = null;
		$this->safetyNetToken = null;
	}
}
