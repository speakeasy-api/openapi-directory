// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// PutImagesIDUpdateImageRequestTypeEnum - Destination Image type to convert to
type PutImagesIDUpdateImageRequestTypeEnum string

const (
	PutImagesIDUpdateImageRequestTypeEnumSnapshot PutImagesIDUpdateImageRequestTypeEnum = "snapshot"
)

func (e PutImagesIDUpdateImageRequestTypeEnum) ToPointer() *PutImagesIDUpdateImageRequestTypeEnum {
	return &e
}

func (e *PutImagesIDUpdateImageRequestTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "snapshot":
		*e = PutImagesIDUpdateImageRequestTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutImagesIDUpdateImageRequestTypeEnum: %v", v)
	}
}

type PutImagesIDUpdateImageRequest struct {
	// New description of Image
	Description *string `json:"description,omitempty"`
	// User-defined labels (key-value pairs)
	Labels map[string]interface{} `json:"labels,omitempty"`
	// Destination Image type to convert to
	Type *PutImagesIDUpdateImageRequestTypeEnum `json:"type,omitempty"`
}

type PutImagesIDRequest struct {
	RequestBody *PutImagesIDUpdateImageRequest `request:"mediaType=application/json"`
	// ID of the Image
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
}

// PutImagesID200ApplicationJSONImageCreatedFrom - Information about the Server the Image was created from
type PutImagesID200ApplicationJSONImageCreatedFrom struct {
	// ID of the Server the Image was created from
	ID int64 `json:"id"`
	// Server name at the time the Image was created
	Name string `json:"name"`
}

// PutImagesID200ApplicationJSONImageOsFlavorEnum - Flavor of operating system contained in the Image
type PutImagesID200ApplicationJSONImageOsFlavorEnum string

const (
	PutImagesID200ApplicationJSONImageOsFlavorEnumUbuntu  PutImagesID200ApplicationJSONImageOsFlavorEnum = "ubuntu"
	PutImagesID200ApplicationJSONImageOsFlavorEnumCentos  PutImagesID200ApplicationJSONImageOsFlavorEnum = "centos"
	PutImagesID200ApplicationJSONImageOsFlavorEnumDebian  PutImagesID200ApplicationJSONImageOsFlavorEnum = "debian"
	PutImagesID200ApplicationJSONImageOsFlavorEnumFedora  PutImagesID200ApplicationJSONImageOsFlavorEnum = "fedora"
	PutImagesID200ApplicationJSONImageOsFlavorEnumUnknown PutImagesID200ApplicationJSONImageOsFlavorEnum = "unknown"
)

func (e PutImagesID200ApplicationJSONImageOsFlavorEnum) ToPointer() *PutImagesID200ApplicationJSONImageOsFlavorEnum {
	return &e
}

func (e *PutImagesID200ApplicationJSONImageOsFlavorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ubuntu":
		fallthrough
	case "centos":
		fallthrough
	case "debian":
		fallthrough
	case "fedora":
		fallthrough
	case "unknown":
		*e = PutImagesID200ApplicationJSONImageOsFlavorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutImagesID200ApplicationJSONImageOsFlavorEnum: %v", v)
	}
}

// PutImagesID200ApplicationJSONImageProtection - Protection configuration for the Resource
type PutImagesID200ApplicationJSONImageProtection struct {
	// If true, prevents the Resource from being deleted
	Delete bool `json:"delete"`
}

// PutImagesID200ApplicationJSONImageStatusEnum - Whether the Image can be used or if it's still being created or unavailable
type PutImagesID200ApplicationJSONImageStatusEnum string

const (
	PutImagesID200ApplicationJSONImageStatusEnumAvailable   PutImagesID200ApplicationJSONImageStatusEnum = "available"
	PutImagesID200ApplicationJSONImageStatusEnumCreating    PutImagesID200ApplicationJSONImageStatusEnum = "creating"
	PutImagesID200ApplicationJSONImageStatusEnumUnavailable PutImagesID200ApplicationJSONImageStatusEnum = "unavailable"
)

func (e PutImagesID200ApplicationJSONImageStatusEnum) ToPointer() *PutImagesID200ApplicationJSONImageStatusEnum {
	return &e
}

func (e *PutImagesID200ApplicationJSONImageStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "available":
		fallthrough
	case "creating":
		fallthrough
	case "unavailable":
		*e = PutImagesID200ApplicationJSONImageStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutImagesID200ApplicationJSONImageStatusEnum: %v", v)
	}
}

// PutImagesID200ApplicationJSONImageTypeEnum - Type of the Image
type PutImagesID200ApplicationJSONImageTypeEnum string

const (
	PutImagesID200ApplicationJSONImageTypeEnumSystem    PutImagesID200ApplicationJSONImageTypeEnum = "system"
	PutImagesID200ApplicationJSONImageTypeEnumApp       PutImagesID200ApplicationJSONImageTypeEnum = "app"
	PutImagesID200ApplicationJSONImageTypeEnumSnapshot  PutImagesID200ApplicationJSONImageTypeEnum = "snapshot"
	PutImagesID200ApplicationJSONImageTypeEnumBackup    PutImagesID200ApplicationJSONImageTypeEnum = "backup"
	PutImagesID200ApplicationJSONImageTypeEnumTemporary PutImagesID200ApplicationJSONImageTypeEnum = "temporary"
)

func (e PutImagesID200ApplicationJSONImageTypeEnum) ToPointer() *PutImagesID200ApplicationJSONImageTypeEnum {
	return &e
}

func (e *PutImagesID200ApplicationJSONImageTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "app":
		fallthrough
	case "snapshot":
		fallthrough
	case "backup":
		fallthrough
	case "temporary":
		*e = PutImagesID200ApplicationJSONImageTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutImagesID200ApplicationJSONImageTypeEnum: %v", v)
	}
}

type PutImagesID200ApplicationJSONImage struct {
	// ID of Server the Image is bound to. Only set for Images of type `backup`.
	BoundTo int64 `json:"bound_to"`
	// Point in time when the Resource was created (in ISO-8601 format)
	Created string `json:"created"`
	// Information about the Server the Image was created from
	CreatedFrom PutImagesID200ApplicationJSONImageCreatedFrom `json:"created_from"`
	// Point in time where the Image was deleted (in ISO-8601 format)
	Deleted string `json:"deleted"`
	// Point in time when the Image is considered to be deprecated (in ISO-8601 format)
	Deprecated string `json:"deprecated"`
	// Description of the Image
	Description string `json:"description"`
	// Size of the disk contained in the Image in GB
	DiskSize float64 `json:"disk_size"`
	// ID of the Resource
	ID int64 `json:"id"`
	// Size of the Image file in our storage in GB. For snapshot Images this is the value relevant for calculating costs for the Image.
	ImageSize float64 `json:"image_size"`
	// User-defined labels (key-value pairs)
	Labels map[string]string `json:"labels"`
	// Unique identifier of the Image. This value is only set for system Images.
	Name string `json:"name"`
	// Flavor of operating system contained in the Image
	OsFlavor PutImagesID200ApplicationJSONImageOsFlavorEnum `json:"os_flavor"`
	// Operating system version
	OsVersion string `json:"os_version"`
	// Protection configuration for the Resource
	Protection PutImagesID200ApplicationJSONImageProtection `json:"protection"`
	// Indicates that rapid deploy of the Image is available
	RapidDeploy *bool `json:"rapid_deploy,omitempty"`
	// Whether the Image can be used or if it's still being created or unavailable
	Status PutImagesID200ApplicationJSONImageStatusEnum `json:"status"`
	// Type of the Image
	Type PutImagesID200ApplicationJSONImageTypeEnum `json:"type"`
}

// PutImagesID200ApplicationJSON - The image key in the reply contains the modified Image object
type PutImagesID200ApplicationJSON struct {
	Image *PutImagesID200ApplicationJSONImage `json:"image,omitempty"`
}

type PutImagesIDResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The image key in the reply contains the modified Image object
	PutImagesID200ApplicationJSONObject *PutImagesID200ApplicationJSON
}
