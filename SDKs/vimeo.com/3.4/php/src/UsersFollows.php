<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class UsersFollows 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Check if a user is following another user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CheckIfUserIsFollowingRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CheckIfUserIsFollowingResponse
     */
	public function checkIfUserIsFollowing(
        \OpenAPI\OpenAPI\Models\Operations\CheckIfUserIsFollowingRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CheckIfUserIsFollowingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/following/{follow_user_id}', \OpenAPI\OpenAPI\Models\Operations\CheckIfUserIsFollowingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CheckIfUserIsFollowingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Check if a user is following another user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CheckIfUserIsFollowingAlt1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CheckIfUserIsFollowingAlt1Response
     */
	public function checkIfUserIsFollowingAlt1(
        \OpenAPI\OpenAPI\Models\Operations\CheckIfUserIsFollowingAlt1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CheckIfUserIsFollowingAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/following/{follow_user_id}', \OpenAPI\OpenAPI\Models\Operations\CheckIfUserIsFollowingAlt1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CheckIfUserIsFollowingAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Follow a specific user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FollowUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FollowUserSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FollowUserResponse
     */
	public function followUser(
        \OpenAPI\OpenAPI\Models\Operations\FollowUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FollowUserSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FollowUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/following/{follow_user_id}', \OpenAPI\OpenAPI\Models\Operations\FollowUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FollowUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Follow a specific user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FollowUserAlt1Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FollowUserAlt1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FollowUserAlt1Response
     */
	public function followUserAlt1(
        \OpenAPI\OpenAPI\Models\Operations\FollowUserAlt1Request $request,
        \OpenAPI\OpenAPI\Models\Operations\FollowUserAlt1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FollowUserAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/following/{follow_user_id}', \OpenAPI\OpenAPI\Models\Operations\FollowUserAlt1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FollowUserAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Follow a list of users
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FollowUsersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FollowUsersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FollowUsersResponse
     */
	public function followUsers(
        \OpenAPI\OpenAPI\Models\Operations\FollowUsersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FollowUsersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FollowUsersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/following', \OpenAPI\OpenAPI\Models\Operations\FollowUsersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FollowUsersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 429 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Follow a list of users
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FollowUsersAlt1RequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FollowUsersAlt1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FollowUsersAlt1Response
     */
	public function followUsersAlt1(
        \OpenAPI\OpenAPI\Models\Operations\FollowUsersAlt1RequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\FollowUsersAlt1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FollowUsersAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/following');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FollowUsersAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 429 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the followers of a user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFollowersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFollowersResponse
     */
	public function getFollowers(
        \OpenAPI\OpenAPI\Models\Operations\GetFollowersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFollowersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/followers', \OpenAPI\OpenAPI\Models\Operations\GetFollowersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetFollowersRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFollowersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.user+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->users = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\User>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the followers of a user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFollowersAlt1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFollowersAlt1Response
     */
	public function getFollowersAlt1(
        \OpenAPI\OpenAPI\Models\Operations\GetFollowersAlt1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFollowersAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/followers');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetFollowersAlt1Request::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFollowersAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.user+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->users = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\User>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the users that a user is following
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUserFollowingRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUserFollowingResponse
     */
	public function getUserFollowing(
        \OpenAPI\OpenAPI\Models\Operations\GetUserFollowingRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUserFollowingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/following', \OpenAPI\OpenAPI\Models\Operations\GetUserFollowingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUserFollowingRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUserFollowingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.user+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->users = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\User>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the users that a user is following
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUserFollowingAlt1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUserFollowingAlt1Response
     */
	public function getUserFollowingAlt1(
        \OpenAPI\OpenAPI\Models\Operations\GetUserFollowingAlt1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUserFollowingAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/following');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUserFollowingAlt1Request::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUserFollowingAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.user+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->users = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\User>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Unfollow a user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UnfollowUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UnfollowUserSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UnfollowUserResponse
     */
	public function unfollowUser(
        \OpenAPI\OpenAPI\Models\Operations\UnfollowUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UnfollowUserSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UnfollowUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/following/{follow_user_id}', \OpenAPI\OpenAPI\Models\Operations\UnfollowUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UnfollowUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Unfollow a user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UnfollowUserAlt1Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UnfollowUserAlt1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UnfollowUserAlt1Response
     */
	public function unfollowUserAlt1(
        \OpenAPI\OpenAPI\Models\Operations\UnfollowUserAlt1Request $request,
        \OpenAPI\OpenAPI\Models\Operations\UnfollowUserAlt1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UnfollowUserAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/following/{follow_user_id}', \OpenAPI\OpenAPI\Models\Operations\UnfollowUserAlt1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UnfollowUserAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
}