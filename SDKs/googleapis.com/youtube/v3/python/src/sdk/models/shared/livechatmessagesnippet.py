"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import livechatfanfundingeventdetails as shared_livechatfanfundingeventdetails
from ..shared import livechatgiftmembershipreceiveddetails as shared_livechatgiftmembershipreceiveddetails
from ..shared import livechatmembermilestonechatdetails as shared_livechatmembermilestonechatdetails
from ..shared import livechatmembershipgiftingdetails as shared_livechatmembershipgiftingdetails
from ..shared import livechatmessagedeleteddetails as shared_livechatmessagedeleteddetails
from ..shared import livechatmessageretracteddetails as shared_livechatmessageretracteddetails
from ..shared import livechatnewsponsordetails as shared_livechatnewsponsordetails
from ..shared import livechatsuperchatdetails as shared_livechatsuperchatdetails
from ..shared import livechatsuperstickerdetails as shared_livechatsuperstickerdetails
from ..shared import livechattextmessagedetails as shared_livechattextmessagedetails
from ..shared import livechatuserbannedmessagedetails as shared_livechatuserbannedmessagedetails
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class LiveChatMessageSnippetTypeEnum(str, Enum):
    r"""The type of message, this will always be present, it determines the contents of the message as well as which fields will be present."""
    INVALID_TYPE = 'invalidType'
    TEXT_MESSAGE_EVENT = 'textMessageEvent'
    TOMBSTONE = 'tombstone'
    FAN_FUNDING_EVENT = 'fanFundingEvent'
    CHAT_ENDED_EVENT = 'chatEndedEvent'
    SPONSOR_ONLY_MODE_STARTED_EVENT = 'sponsorOnlyModeStartedEvent'
    SPONSOR_ONLY_MODE_ENDED_EVENT = 'sponsorOnlyModeEndedEvent'
    NEW_SPONSOR_EVENT = 'newSponsorEvent'
    MEMBER_MILESTONE_CHAT_EVENT = 'memberMilestoneChatEvent'
    MEMBERSHIP_GIFTING_EVENT = 'membershipGiftingEvent'
    GIFT_MEMBERSHIP_RECEIVED_EVENT = 'giftMembershipReceivedEvent'
    MESSAGE_DELETED_EVENT = 'messageDeletedEvent'
    MESSAGE_RETRACTED_EVENT = 'messageRetractedEvent'
    USER_BANNED_EVENT = 'userBannedEvent'
    SUPER_CHAT_EVENT = 'superChatEvent'
    SUPER_STICKER_EVENT = 'superStickerEvent'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LiveChatMessageSnippet:
    r"""Next ID: 33"""
    
    author_channel_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authorChannelId'), 'exclude': lambda f: f is None }})
    r"""The ID of the user that authored this message, this field is not always filled. textMessageEvent - the user that wrote the message fanFundingEvent - the user that funded the broadcast newSponsorEvent - the user that just became a sponsor memberMilestoneChatEvent - the member that sent the message membershipGiftingEvent - the user that made the purchase giftMembershipReceivedEvent - the user that received the gift membership messageDeletedEvent - the moderator that took the action messageRetractedEvent - the author that retracted their message userBannedEvent - the moderator that took the action superChatEvent - the user that made the purchase superStickerEvent - the user that made the purchase"""  
    display_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayMessage'), 'exclude': lambda f: f is None }})
    r"""Contains a string that can be displayed to the user. If this field is not present the message is silent, at the moment only messages of type TOMBSTONE and CHAT_ENDED_EVENT are silent."""  
    fan_funding_event_details: Optional[shared_livechatfanfundingeventdetails.LiveChatFanFundingEventDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fanFundingEventDetails'), 'exclude': lambda f: f is None }})  
    gift_membership_received_details: Optional[shared_livechatgiftmembershipreceiveddetails.LiveChatGiftMembershipReceivedDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('giftMembershipReceivedDetails'), 'exclude': lambda f: f is None }})  
    has_display_content: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasDisplayContent'), 'exclude': lambda f: f is None }})
    r"""Whether the message has display content that should be displayed to users."""  
    live_chat_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('liveChatId'), 'exclude': lambda f: f is None }})  
    member_milestone_chat_details: Optional[shared_livechatmembermilestonechatdetails.LiveChatMemberMilestoneChatDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memberMilestoneChatDetails'), 'exclude': lambda f: f is None }})  
    membership_gifting_details: Optional[shared_livechatmembershipgiftingdetails.LiveChatMembershipGiftingDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('membershipGiftingDetails'), 'exclude': lambda f: f is None }})  
    message_deleted_details: Optional[shared_livechatmessagedeleteddetails.LiveChatMessageDeletedDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('messageDeletedDetails'), 'exclude': lambda f: f is None }})  
    message_retracted_details: Optional[shared_livechatmessageretracteddetails.LiveChatMessageRetractedDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('messageRetractedDetails'), 'exclude': lambda f: f is None }})  
    new_sponsor_details: Optional[shared_livechatnewsponsordetails.LiveChatNewSponsorDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('newSponsorDetails'), 'exclude': lambda f: f is None }})  
    published_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publishedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time when the message was orignally published."""  
    super_chat_details: Optional[shared_livechatsuperchatdetails.LiveChatSuperChatDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('superChatDetails'), 'exclude': lambda f: f is None }})  
    super_sticker_details: Optional[shared_livechatsuperstickerdetails.LiveChatSuperStickerDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('superStickerDetails'), 'exclude': lambda f: f is None }})  
    text_message_details: Optional[shared_livechattextmessagedetails.LiveChatTextMessageDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('textMessageDetails'), 'exclude': lambda f: f is None }})  
    type: Optional[LiveChatMessageSnippetTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of message, this will always be present, it determines the contents of the message as well as which fields will be present."""  
    user_banned_details: Optional[shared_livechatuserbannedmessagedetails.LiveChatUserBannedMessageDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userBannedDetails'), 'exclude': lambda f: f is None }})  
    