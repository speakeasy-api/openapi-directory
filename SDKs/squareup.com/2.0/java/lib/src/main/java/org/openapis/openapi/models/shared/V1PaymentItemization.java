/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * V1PaymentItemization - Payment include an` itemizations` field that lists the items purchased,
 * along with associated fees, modifiers, and discounts. Each itemization has an
 * `itemization_type` field that indicates which of the following the itemization
 * represents:
 * 
 * &lt;ul&gt;
 * &lt;li&gt;An item variation from the merchant's item library&lt;/li&gt;
 * &lt;li&gt;A custom monetary amount&lt;/li&gt;
 * &lt;li&gt;
 * An action performed on a Square gift card, such as activating or
 * reloading it.
 * &lt;/li&gt;
 * &lt;/ul&gt;
 * 
 * *Note**: itemization information included in a `Payment` object reflects
 * details collected **at the time of the payment**. Details such as the name or
 * price of items might have changed since the payment was processed.
 */
public class V1PaymentItemization {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discount_money")
    public V1Money discountMoney;
    public V1PaymentItemization withDiscountMoney(V1Money discountMoney) {
        this.discountMoney = discountMoney;
        return this;
    }
    
    /**
     * All discounts applied to this itemization.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discounts")
    public V1PaymentDiscount[] discounts;
    public V1PaymentItemization withDiscounts(V1PaymentDiscount[] discounts) {
        this.discounts = discounts;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gross_sales_money")
    public V1Money grossSalesMoney;
    public V1PaymentItemization withGrossSalesMoney(V1Money grossSalesMoney) {
        this.grossSalesMoney = grossSalesMoney;
        return this;
    }
    
    /**
     * V1PaymentItemDetail
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("item_detail")
    public V1PaymentItemDetail itemDetail;
    public V1PaymentItemization withItemDetail(V1PaymentItemDetail itemDetail) {
        this.itemDetail = itemDetail;
        return this;
    }
    
    /**
     * The name of the item variation purchased, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("item_variation_name")
    public String itemVariationName;
    public V1PaymentItemization withItemVariationName(String itemVariationName) {
        this.itemVariationName = itemVariationName;
        return this;
    }
    
    /**
     * The type of purchase that the itemization represents, such as an ITEM or CUSTOM_AMOUNT
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itemization_type")
    public String itemizationType;
    public V1PaymentItemization withItemizationType(String itemizationType) {
        this.itemizationType = itemizationType;
        return this;
    }
    
    /**
     * All modifier options applied to this itemization.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("modifiers")
    public V1PaymentModifier[] modifiers;
    public V1PaymentItemization withModifiers(V1PaymentModifier[] modifiers) {
        this.modifiers = modifiers;
        return this;
    }
    
    /**
     * The item's name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public V1PaymentItemization withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("net_sales_money")
    public V1Money netSalesMoney;
    public V1PaymentItemization withNetSalesMoney(V1Money netSalesMoney) {
        this.netSalesMoney = netSalesMoney;
        return this;
    }
    
    /**
     * Notes entered by the merchant about the item at the time of payment, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    public String notes;
    public V1PaymentItemization withNotes(String notes) {
        this.notes = notes;
        return this;
    }
    
    /**
     * The quantity of the item purchased. This can be a decimal value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantity")
    public Double quantity;
    public V1PaymentItemization withQuantity(Double quantity) {
        this.quantity = quantity;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("single_quantity_money")
    public V1Money singleQuantityMoney;
    public V1PaymentItemization withSingleQuantityMoney(V1Money singleQuantityMoney) {
        this.singleQuantityMoney = singleQuantityMoney;
        return this;
    }
    
    /**
     * All taxes applied to this itemization.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxes")
    public V1PaymentTax[] taxes;
    public V1PaymentItemization withTaxes(V1PaymentTax[] taxes) {
        this.taxes = taxes;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_money")
    public V1Money totalMoney;
    public V1PaymentItemization withTotalMoney(V1Money totalMoney) {
        this.totalMoney = totalMoney;
        return this;
    }
    
}
