"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PostNamespacesDeleteImagesResponseErrorErrinfoDetailsErrorsErrorEnum(str, Enum):
    r"""Error type."""
    NOT_FOUND = 'not_found'
    UNAUTHORIZED = 'unauthorized'
    CHILD_MANIFEST = 'child_manifest'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostNamespacesDeleteImagesResponseErrorErrinfoDetailsErrors:
    
    digest: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('digest'), 'exclude': lambda f: f is None }})
    r"""Digest of the image that caused the error."""  
    error: Optional[PostNamespacesDeleteImagesResponseErrorErrinfoDetailsErrorsErrorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})
    r"""Error type."""  
    repository: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repository'), 'exclude': lambda f: f is None }})
    r"""Name of the repository of the image that caused the error."""  
    
class PostNamespacesDeleteImagesResponseErrorErrinfoDetailsWarningsWarningEnum(str, Enum):
    r"""Warning type."""
    IS_ACTIVE = 'is_active'
    CURRENT_TAG = 'current_tag'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostNamespacesDeleteImagesResponseErrorErrinfoDetailsWarnings:
    
    digest: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('digest'), 'exclude': lambda f: f is None }})
    r"""Digest of the image that caused the warning."""  
    repository: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repository'), 'exclude': lambda f: f is None }})
    r"""Name of the repository of the image that caused the warning."""  
    tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""Current tags if warning is `current_tag`."""  
    warning: Optional[PostNamespacesDeleteImagesResponseErrorErrinfoDetailsWarningsWarningEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('warning'), 'exclude': lambda f: f is None }})
    r"""Warning type."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostNamespacesDeleteImagesResponseErrorErrinfoDetails:
    
    errors: Optional[list[PostNamespacesDeleteImagesResponseErrorErrinfoDetailsErrors]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errors'), 'exclude': lambda f: f is None }})
    r"""Errors from validating delete request. These cannot be ignored."""  
    warnings: Optional[list[PostNamespacesDeleteImagesResponseErrorErrinfoDetailsWarnings]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('warnings'), 'exclude': lambda f: f is None }})
    r"""Warnings that can be ignored.
    
    These warnings include:
    
    - is_active: warning when attempting to delete an image that is marked as 
    active.
    - current_tag: warning when attempting to delete an image that has one or 
    more current tags in the repository.
    
    Warnings can be copied from the response to the request.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostNamespacesDeleteImagesResponseErrorErrinfo:
    r"""Context information for an error used for diagnostics."""
    
    api_call_docker_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('api_call_docker_id'), 'exclude': lambda f: f is None }})
    r"""ID of docker user."""  
    api_call_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('api_call_name'), 'exclude': lambda f: f is None }})
    r"""Name of the API operation called."""  
    api_call_start: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('api_call_start'), 'exclude': lambda f: f is None }})
    r"""Date/time of call start."""  
    api_call_txnid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('api_call_txnid'), 'exclude': lambda f: f is None }})
    r"""Unique ID for this call."""  
    details: Optional[PostNamespacesDeleteImagesResponseErrorErrinfoDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('details'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of error."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostNamespacesDeleteImagesResponseError:
    r"""Deletion not possible."""
    
    errinfo: Optional[PostNamespacesDeleteImagesResponseErrorErrinfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errinfo'), 'exclude': lambda f: f is None }})  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    r"""The error message."""  
    txnid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('txnid'), 'exclude': lambda f: f is None }})
    r"""Unique ID for this call."""  
    