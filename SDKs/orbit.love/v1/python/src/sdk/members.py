"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Members:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_workspace_slug_members_member_slug_(self, request: operations.DeleteWorkspaceSlugMembersMemberSlugRequest, security: operations.DeleteWorkspaceSlugMembersMemberSlugSecurity) -> operations.DeleteWorkspaceSlugMembersMemberSlugResponse:
        r"""Delete a member"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteWorkspaceSlugMembersMemberSlugRequest, base_url, '/{workspace_slug}/members/{member_slug}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteWorkspaceSlugMembersMemberSlugResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_workspace_slug_members_member_slug_identities(self, request: operations.DeleteWorkspaceSlugMembersMemberSlugIdentitiesRequest, security: operations.DeleteWorkspaceSlugMembersMemberSlugIdentitiesSecurity) -> operations.DeleteWorkspaceSlugMembersMemberSlugIdentitiesResponse:
        r"""Remove identity from a member"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteWorkspaceSlugMembersMemberSlugIdentitiesRequest, base_url, '/{workspace_slug}/members/{member_slug}/identities', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "identity", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteWorkspaceSlugMembersMemberSlugIdentitiesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_workspace_slug_members(self, request: operations.GetWorkspaceSlugMembersRequest, security: operations.GetWorkspaceSlugMembersSecurity) -> operations.GetWorkspaceSlugMembersResponse:
        r"""List members in a workspace"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetWorkspaceSlugMembersRequest, base_url, '/{workspace_slug}/members', request)
        
        query_params = utils.get_query_params(operations.GetWorkspaceSlugMembersRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWorkspaceSlugMembersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_workspace_slug_members_find(self, request: operations.GetWorkspaceSlugMembersFindRequest, security: operations.GetWorkspaceSlugMembersFindSecurity) -> operations.GetWorkspaceSlugMembersFindResponse:
        r"""Find a member by an identity
        Provide a source and one of username/uid/email params to return a member with that identity, if one exists. Common values for source include github, twitter, and email.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetWorkspaceSlugMembersFindRequest, base_url, '/{workspace_slug}/members/find', request)
        
        query_params = utils.get_query_params(operations.GetWorkspaceSlugMembersFindRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWorkspaceSlugMembersFindResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_workspace_slug_members_member_slug_(self, request: operations.GetWorkspaceSlugMembersMemberSlugRequest, security: operations.GetWorkspaceSlugMembersMemberSlugSecurity) -> operations.GetWorkspaceSlugMembersMemberSlugResponse:
        r"""Get a member"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetWorkspaceSlugMembersMemberSlugRequest, base_url, '/{workspace_slug}/members/{member_slug}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWorkspaceSlugMembersMemberSlugResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_workspace_slug_organizations_organization_id_members(self, request: operations.GetWorkspaceSlugOrganizationsOrganizationIDMembersRequest, security: operations.GetWorkspaceSlugOrganizationsOrganizationIDMembersSecurity) -> operations.GetWorkspaceSlugOrganizationsOrganizationIDMembersResponse:
        r"""List members in an organization"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetWorkspaceSlugOrganizationsOrganizationIDMembersRequest, base_url, '/{workspace_slug}/organizations/{organization_id}/members', request)
        
        query_params = utils.get_query_params(operations.GetWorkspaceSlugOrganizationsOrganizationIDMembersRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWorkspaceSlugOrganizationsOrganizationIDMembersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_workspace_slug_members(self, request: operations.PostWorkspaceSlugMembersRequest, security: operations.PostWorkspaceSlugMembersSecurity) -> operations.PostWorkspaceSlugMembersResponse:
        r"""Create or update a member
        This method is useful when you know a member's identity in another system and want to create or update the corresponding Orbit member. Identities can be specified in the identity object or member attributes like member.github. If no member exists, a new member will be created and linked to any provided identities.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostWorkspaceSlugMembersRequest, base_url, '/{workspace_slug}/members', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "member_and_identity", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostWorkspaceSlugMembersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_workspace_slug_members_member_slug_identities(self, request: operations.PostWorkspaceSlugMembersMemberSlugIdentitiesRequest, security: operations.PostWorkspaceSlugMembersMemberSlugIdentitiesSecurity) -> operations.PostWorkspaceSlugMembersMemberSlugIdentitiesResponse:
        r"""Add identity to a member"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostWorkspaceSlugMembersMemberSlugIdentitiesRequest, base_url, '/{workspace_slug}/members/{member_slug}/identities', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "identity", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostWorkspaceSlugMembersMemberSlugIdentitiesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def put_workspace_slug_members_member_slug_(self, request: operations.PutWorkspaceSlugMembersMemberSlugRequest, security: operations.PutWorkspaceSlugMembersMemberSlugSecurity) -> operations.PutWorkspaceSlugMembersMemberSlugResponse:
        r"""Update a member"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutWorkspaceSlugMembersMemberSlugRequest, base_url, '/{workspace_slug}/members/{member_slug}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "member", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutWorkspaceSlugMembersMemberSlugResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    