Metadata-Version: 2.1
Name: openapi
Version: 0.0.1
Summary: Python Client SDK Generated by Speakeasy
Author: Speakeasy
Requires-Python: >=3.9
Description-Content-Type: text/markdown

# openapi

<!-- Start SDK Installation -->
## SDK Installation

```bash
pip install git+https://github.com/speakeasy-api/openapi-directory.git#subdirectory=SDKs/googleapis.com/gkehub/v1alpha/python
```
<!-- End SDK Installation -->

## SDK Example Usage
<!-- Start SDK Example Usage -->
```python
import sdk
from sdk.models import operations, shared

s = sdk.SDK()


req = operations.GkehubProjectsLocationsFeaturesCreateRequest(
    dollar_xgafv="2",
    feature_input=shared.FeatureInput(
        fleet_default_member_config=shared.CommonFleetDefaultMemberConfigSpecInput(
            identityservice=shared.IdentityServiceMembershipSpecInput(
                auth_methods=[
                    shared.IdentityServiceAuthMethodInput(
                        azuread_config=shared.IdentityServiceAzureADConfigInput(
                            client_id="distinctio",
                            client_secret="quibusdam",
                            kubectl_redirect_uri="unde",
                            tenant="nulla",
                        ),
                        google_config=shared.IdentityServiceGoogleConfig(
                            disable=False,
                        ),
                        name="corrupti",
                        oidc_config=shared.IdentityServiceOidcConfigInput(
                            certificate_authority_data="illum",
                            client_id="vel",
                            client_secret="error",
                            deploy_cloud_console_proxy=False,
                            enable_access_token=False,
                            extra_params="deserunt",
                            group_prefix="suscipit",
                            groups_claim="iure",
                            issuer_uri="magnam",
                            kubectl_redirect_uri="debitis",
                            scopes="ipsa",
                            user_claim="delectus",
                            user_prefix="tempora",
                        ),
                        proxy="suscipit",
                    ),
                    shared.IdentityServiceAuthMethodInput(
                        azuread_config=shared.IdentityServiceAzureADConfigInput(
                            client_id="molestiae",
                            client_secret="minus",
                            kubectl_redirect_uri="placeat",
                            tenant="voluptatum",
                        ),
                        google_config=shared.IdentityServiceGoogleConfig(
                            disable=False,
                        ),
                        name="iusto",
                        oidc_config=shared.IdentityServiceOidcConfigInput(
                            certificate_authority_data="excepturi",
                            client_id="nisi",
                            client_secret="recusandae",
                            deploy_cloud_console_proxy=False,
                            enable_access_token=False,
                            extra_params="temporibus",
                            group_prefix="ab",
                            groups_claim="quis",
                            issuer_uri="veritatis",
                            kubectl_redirect_uri="deserunt",
                            scopes="perferendis",
                            user_claim="ipsam",
                            user_prefix="repellendus",
                        ),
                        proxy="sapiente",
                    ),
                    shared.IdentityServiceAuthMethodInput(
                        azuread_config=shared.IdentityServiceAzureADConfigInput(
                            client_id="quo",
                            client_secret="odit",
                            kubectl_redirect_uri="at",
                            tenant="at",
                        ),
                        google_config=shared.IdentityServiceGoogleConfig(
                            disable=False,
                        ),
                        name="maiores",
                        oidc_config=shared.IdentityServiceOidcConfigInput(
                            certificate_authority_data="molestiae",
                            client_id="quod",
                            client_secret="quod",
                            deploy_cloud_console_proxy=False,
                            enable_access_token=False,
                            extra_params="esse",
                            group_prefix="totam",
                            groups_claim="porro",
                            issuer_uri="dolorum",
                            kubectl_redirect_uri="dicta",
                            scopes="nam",
                            user_claim="officia",
                            user_prefix="occaecati",
                        ),
                        proxy="fugit",
                    ),
                ],
            ),
        ),
        labels={
            "hic": "optio",
            "totam": "beatae",
            "commodi": "molestiae",
        },
        membership_specs={
            "qui": shared.MembershipFeatureSpecInput(
                anthosobservability=shared.AnthosObservabilityMembershipSpec(
                    do_not_optimize_metrics=False,
                    enable_stackdriver_on_applications=False,
                    version="impedit",
                ),
                cloudbuild=shared.CloudBuildMembershipSpec(
                    security_policy="PRIVILEGED",
                    version="esse",
                ),
                configmanagement=shared.ConfigManagementMembershipSpec(
                    binauthz=shared.ConfigManagementBinauthzConfig(
                        enabled=False,
                    ),
                    config_sync=shared.ConfigManagementConfigSync(
                        allow_vertical_scale=False,
                        enabled=False,
                        git=shared.ConfigManagementGitConfig(
                            gcp_service_account_email="ipsum",
                            https_proxy="excepturi",
                            policy_dir="aspernatur",
                            secret_type="perferendis",
                            sync_branch="ad",
                            sync_repo="natus",
                            sync_rev="sed",
                            sync_wait_secs="iste",
                        ),
                        oci=shared.ConfigManagementOciConfig(
                            gcp_service_account_email="dolor",
                            policy_dir="natus",
                            secret_type="laboriosam",
                            sync_repo="hic",
                            sync_wait_secs="saepe",
                        ),
                        prevent_drift=False,
                        source_format="fuga",
                    ),
                    hierarchy_controller=shared.ConfigManagementHierarchyControllerConfig(
                        enable_hierarchical_resource_quota=False,
                        enable_pod_tree_labels=False,
                        enabled=False,
                    ),
                    policy_controller=shared.ConfigManagementPolicyController(
                        audit_interval_seconds="in",
                        enabled=False,
                        exemptable_namespaces=[
                            "iste",
                            "iure",
                        ],
                        log_denies_enabled=False,
                        monitoring=shared.ConfigManagementPolicyControllerMonitoring(
                            backends=[
                                "CLOUD_MONITORING",
                                "MONITORING_BACKEND_UNSPECIFIED",
                                "MONITORING_BACKEND_UNSPECIFIED",
                                "CLOUD_MONITORING",
                            ],
                        ),
                        mutation_enabled=False,
                        referential_rules_enabled=False,
                        template_library_installed=False,
                    ),
                    version="est",
                ),
                fleet_inherited=False,
                fleetobservability={
                    "laborum": "dolores",
                    "dolorem": "corporis",
                    "explicabo": "nobis",
                },
                identityservice=shared.IdentityServiceMembershipSpecInput(
                    auth_methods=[
                        shared.IdentityServiceAuthMethodInput(
                            azuread_config=shared.IdentityServiceAzureADConfigInput(
                                client_id="omnis",
                                client_secret="nemo",
                                kubectl_redirect_uri="minima",
                                tenant="excepturi",
                            ),
                            google_config=shared.IdentityServiceGoogleConfig(
                                disable=False,
                            ),
                            name="accusantium",
                            oidc_config=shared.IdentityServiceOidcConfigInput(
                                certificate_authority_data="iure",
                                client_id="culpa",
                                client_secret="doloribus",
                                deploy_cloud_console_proxy=False,
                                enable_access_token=False,
                                extra_params="sapiente",
                                group_prefix="architecto",
                                groups_claim="mollitia",
                                issuer_uri="dolorem",
                                kubectl_redirect_uri="culpa",
                                scopes="consequuntur",
                                user_claim="repellat",
                                user_prefix="mollitia",
                            ),
                            proxy="occaecati",
                        ),
                        shared.IdentityServiceAuthMethodInput(
                            azuread_config=shared.IdentityServiceAzureADConfigInput(
                                client_id="numquam",
                                client_secret="commodi",
                                kubectl_redirect_uri="quam",
                                tenant="molestiae",
                            ),
                            google_config=shared.IdentityServiceGoogleConfig(
                                disable=False,
                            ),
                            name="velit",
                            oidc_config=shared.IdentityServiceOidcConfigInput(
                                certificate_authority_data="error",
                                client_id="quia",
                                client_secret="quis",
                                deploy_cloud_console_proxy=False,
                                enable_access_token=False,
                                extra_params="vitae",
                                group_prefix="laborum",
                                groups_claim="animi",
                                issuer_uri="enim",
                                kubectl_redirect_uri="odit",
                                scopes="quo",
                                user_claim="sequi",
                                user_prefix="tenetur",
                            ),
                            proxy="ipsam",
                        ),
                    ],
                ),
                mesh=shared.ServiceMeshMembershipSpec(
                    control_plane="AUTOMATIC",
                    default_channel="STABLE",
                    management="MANAGEMENT_UNSPECIFIED",
                ),
                policycontroller=shared.PolicyControllerMembershipSpec(
                    policy_controller_hub_config=shared.PolicyControllerHubConfig(
                        audit_interval_seconds="quasi",
                        constraint_violation_limit="error",
                        deployment_configs={
                            "laborum": shared.PolicyControllerPolicyControllerDeploymentConfig(
                                container_resources=shared.PolicyControllerResourceRequirements(
                                    limits=shared.PolicyControllerResourceList(
                                        cpu="quasi",
                                        memory="reiciendis",
                                    ),
                                    requests=shared.PolicyControllerResourceList(
                                        cpu="voluptatibus",
                                        memory="vero",
                                    ),
                                ),
                                pod_anti_affinity=False,
                                pod_tolerations=[
                                    shared.PolicyControllerToleration(
                                        effect="praesentium",
                                        key="voluptatibus",
                                        operator="ipsa",
                                        value="omnis",
                                    ),
                                    shared.PolicyControllerToleration(
                                        effect="voluptate",
                                        key="cum",
                                        operator="perferendis",
                                        value="doloremque",
                                    ),
                                ],
                                replica_count="reprehenderit",
                            ),
                            "ut": shared.PolicyControllerPolicyControllerDeploymentConfig(
                                container_resources=shared.PolicyControllerResourceRequirements(
                                    limits=shared.PolicyControllerResourceList(
                                        cpu="maiores",
                                        memory="dicta",
                                    ),
                                    requests=shared.PolicyControllerResourceList(
                                        cpu="corporis",
                                        memory="dolore",
                                    ),
                                ),
                                pod_anti_affinity=False,
                                pod_tolerations=[
                                    shared.PolicyControllerToleration(
                                        effect="dicta",
                                        key="harum",
                                        operator="enim",
                                        value="accusamus",
                                    ),
                                    shared.PolicyControllerToleration(
                                        effect="commodi",
                                        key="repudiandae",
                                        operator="quae",
                                        value="ipsum",
                                    ),
                                ],
                                replica_count="quidem",
                            ),
                            "molestias": shared.PolicyControllerPolicyControllerDeploymentConfig(
                                container_resources=shared.PolicyControllerResourceRequirements(
                                    limits=shared.PolicyControllerResourceList(
                                        cpu="excepturi",
                                        memory="pariatur",
                                    ),
                                    requests=shared.PolicyControllerResourceList(
                                        cpu="modi",
                                        memory="praesentium",
                                    ),
                                ),
                                pod_anti_affinity=False,
                                pod_tolerations=[
                                    shared.PolicyControllerToleration(
                                        effect="voluptates",
                                        key="quasi",
                                        operator="repudiandae",
                                        value="sint",
                                    ),
                                    shared.PolicyControllerToleration(
                                        effect="veritatis",
                                        key="itaque",
                                        operator="incidunt",
                                        value="enim",
                                    ),
                                    shared.PolicyControllerToleration(
                                        effect="consequatur",
                                        key="est",
                                        operator="quibusdam",
                                        value="explicabo",
                                    ),
                                ],
                                replica_count="deserunt",
                            ),
                            "distinctio": shared.PolicyControllerPolicyControllerDeploymentConfig(
                                container_resources=shared.PolicyControllerResourceRequirements(
                                    limits=shared.PolicyControllerResourceList(
                                        cpu="quibusdam",
                                        memory="labore",
                                    ),
                                    requests=shared.PolicyControllerResourceList(
                                        cpu="modi",
                                        memory="qui",
                                    ),
                                ),
                                pod_anti_affinity=False,
                                pod_tolerations=[
                                    shared.PolicyControllerToleration(
                                        effect="cupiditate",
                                        key="quos",
                                        operator="perferendis",
                                        value="magni",
                                    ),
                                    shared.PolicyControllerToleration(
                                        effect="assumenda",
                                        key="ipsam",
                                        operator="alias",
                                        value="fugit",
                                    ),
                                ],
                                replica_count="dolorum",
                            ),
                        },
                        exemptable_namespaces=[
                            "tempora",
                            "facilis",
                            "tempore",
                        ],
                        install_spec="INSTALL_SPEC_NOT_INSTALLED",
                        log_denies_enabled=False,
                        monitoring=shared.PolicyControllerMonitoringConfig(
                            backends=[
                                "PROMETHEUS",
                                "MONITORING_BACKEND_UNSPECIFIED",
                                "CLOUD_MONITORING",
                                "PROMETHEUS",
                            ],
                        ),
                        mutation_enabled=False,
                        policy_content=shared.PolicyControllerPolicyContentSpec(
                            bundles={
                                "provident": shared.PolicyControllerBundleInstallSpec(
                                    exempted_namespaces=[
                                        "sint",
                                        "officia",
                                        "dolor",
                                        "debitis",
                                    ],
                                    management="INSTALLED",
                                ),
                                "dolorum": shared.PolicyControllerBundleInstallSpec(
                                    exempted_namespaces=[
                                        "in",
                                        "illum",
                                    ],
                                    management="INSTALLED",
                                ),
                            },
                            template_library=shared.PolicyControllerTemplateLibraryConfig(
                                included=False,
                                installation="ALL",
                            ),
                        ),
                        referential_rules_enabled=False,
                        template_library_config=shared.PolicyControllerTemplateLibraryConfig(
                            included=False,
                            installation="INSTALLATION_UNSPECIFIED",
                        ),
                    ),
                    version="magnam",
                ),
                workloadcertificate=shared.MembershipSpec(
                    certificate_management="ENABLED",
                ),
            ),
            "facere": shared.MembershipFeatureSpecInput(
                anthosobservability=shared.AnthosObservabilityMembershipSpec(
                    do_not_optimize_metrics=False,
                    enable_stackdriver_on_applications=False,
                    version="ea",
                ),
                cloudbuild=shared.CloudBuildMembershipSpec(
                    security_policy="NON_PRIVILEGED",
                    version="laborum",
                ),
                configmanagement=shared.ConfigManagementMembershipSpec(
                    binauthz=shared.ConfigManagementBinauthzConfig(
                        enabled=False,
                    ),
                    config_sync=shared.ConfigManagementConfigSync(
                        allow_vertical_scale=False,
                        enabled=False,
                        git=shared.ConfigManagementGitConfig(
                            gcp_service_account_email="accusamus",
                            https_proxy="non",
                            policy_dir="occaecati",
                            secret_type="enim",
                            sync_branch="accusamus",
                            sync_repo="delectus",
                            sync_rev="quidem",
                            sync_wait_secs="provident",
                        ),
                        oci=shared.ConfigManagementOciConfig(
                            gcp_service_account_email="nam",
                            policy_dir="id",
                            secret_type="blanditiis",
                            sync_repo="deleniti",
                            sync_wait_secs="sapiente",
                        ),
                        prevent_drift=False,
                        source_format="amet",
                    ),
                    hierarchy_controller=shared.ConfigManagementHierarchyControllerConfig(
                        enable_hierarchical_resource_quota=False,
                        enable_pod_tree_labels=False,
                        enabled=False,
                    ),
                    policy_controller=shared.ConfigManagementPolicyController(
                        audit_interval_seconds="deserunt",
                        enabled=False,
                        exemptable_namespaces=[
                            "vel",
                            "natus",
                        ],
                        log_denies_enabled=False,
                        monitoring=shared.ConfigManagementPolicyControllerMonitoring(
                            backends=[
                                "PROMETHEUS",
                                "MONITORING_BACKEND_UNSPECIFIED",
                                "PROMETHEUS",
                            ],
                        ),
                        mutation_enabled=False,
                        referential_rules_enabled=False,
                        template_library_installed=False,
                    ),
                    version="magnam",
                ),
                fleet_inherited=False,
                fleetobservability={
                    "id": "labore",
                    "labore": "suscipit",
                    "natus": "nobis",
                },
                identityservice=shared.IdentityServiceMembershipSpecInput(
                    auth_methods=[
                        shared.IdentityServiceAuthMethodInput(
                            azuread_config=shared.IdentityServiceAzureADConfigInput(
                                client_id="vero",
                                client_secret="aspernatur",
                                kubectl_redirect_uri="architecto",
                                tenant="magnam",
                            ),
                            google_config=shared.IdentityServiceGoogleConfig(
                                disable=False,
                            ),
                            name="et",
                            oidc_config=shared.IdentityServiceOidcConfigInput(
                                certificate_authority_data="excepturi",
                                client_id="ullam",
                                client_secret="provident",
                                deploy_cloud_console_proxy=False,
                                enable_access_token=False,
                                extra_params="quos",
                                group_prefix="sint",
                                groups_claim="accusantium",
                                issuer_uri="mollitia",
                                kubectl_redirect_uri="reiciendis",
                                scopes="mollitia",
                                user_claim="ad",
                                user_prefix="eum",
                            ),
                            proxy="dolor",
                        ),
                        shared.IdentityServiceAuthMethodInput(
                            azuread_config=shared.IdentityServiceAzureADConfigInput(
                                client_id="necessitatibus",
                                client_secret="odit",
                                kubectl_redirect_uri="nemo",
                                tenant="quasi",
                            ),
                            google_config=shared.IdentityServiceGoogleConfig(
                                disable=False,
                            ),
                            name="iure",
                            oidc_config=shared.IdentityServiceOidcConfigInput(
                                certificate_authority_data="doloribus",
                                client_id="debitis",
                                client_secret="eius",
                                deploy_cloud_console_proxy=False,
                                enable_access_token=False,
                                extra_params="maxime",
                                group_prefix="deleniti",
                                groups_claim="facilis",
                                issuer_uri="in",
                                kubectl_redirect_uri="architecto",
                                scopes="architecto",
                                user_claim="repudiandae",
                                user_prefix="ullam",
                            ),
                            proxy="expedita",
                        ),
                    ],
                ),
                mesh=shared.ServiceMeshMembershipSpec(
                    control_plane="AUTOMATIC",
                    default_channel="STABLE",
                    management="MANAGEMENT_MANUAL",
                ),
                policycontroller=shared.PolicyControllerMembershipSpec(
                    policy_controller_hub_config=shared.PolicyControllerHubConfig(
                        audit_interval_seconds="sed",
                        constraint_violation_limit="saepe",
                        deployment_configs={
                            "accusantium": shared.PolicyControllerPolicyControllerDeploymentConfig(
                                container_resources=shared.PolicyControllerResourceRequirements(
                                    limits=shared.PolicyControllerResourceList(
                                        cpu="consequuntur",
                                        memory="praesentium",
                                    ),
                                    requests=shared.PolicyControllerResourceList(
                                        cpu="natus",
                                        memory="magni",
                                    ),
                                ),
                                pod_anti_affinity=False,
                                pod_tolerations=[
                                    shared.PolicyControllerToleration(
                                        effect="quo",
                                        key="illum",
                                        operator="pariatur",
                                        value="maxime",
                                    ),
                                ],
                                replica_count="ea",
                            ),
                            "excepturi": shared.PolicyControllerPolicyControllerDeploymentConfig(
                                container_resources=shared.PolicyControllerResourceRequirements(
                                    limits=shared.PolicyControllerResourceList(
                                        cpu="odit",
                                        memory="ea",
                                    ),
                                    requests=shared.PolicyControllerResourceList(
                                        cpu="accusantium",
                                        memory="ab",
                                    ),
                                ),
                                pod_anti_affinity=False,
                                pod_tolerations=[
                                    shared.PolicyControllerToleration(
                                        effect="quidem",
                                        key="ipsam",
                                        operator="voluptate",
                                        value="autem",
                                    ),
                                    shared.PolicyControllerToleration(
                                        effect="nam",
                                        key="eaque",
                                        operator="pariatur",
                                        value="nemo",
                                    ),
                                    shared.PolicyControllerToleration(
                                        effect="voluptatibus",
                                        key="perferendis",
                                        operator="fugiat",
                                        value="amet",
                                    ),
                                    shared.PolicyControllerToleration(
                                        effect="aut",
                                        key="cumque",
                                        operator="corporis",
                                        value="hic",
                                    ),
                                ],
                                replica_count="libero",
                            ),
                            "nobis": shared.PolicyControllerPolicyControllerDeploymentConfig(
                                container_resources=shared.PolicyControllerResourceRequirements(
                                    limits=shared.PolicyControllerResourceList(
                                        cpu="dolores",
                                        memory="quis",
                                    ),
                                    requests=shared.PolicyControllerResourceList(
                                        cpu="totam",
                                        memory="dignissimos",
                                    ),
                                ),
                                pod_anti_affinity=False,
                                pod_tolerations=[
                                    shared.PolicyControllerToleration(
                                        effect="quis",
                                        key="nesciunt",
                                        operator="eos",
                                        value="perferendis",
                                    ),
                                ],
                                replica_count="dolores",
                            ),
                            "minus": shared.PolicyControllerPolicyControllerDeploymentConfig(
                                container_resources=shared.PolicyControllerResourceRequirements(
                                    limits=shared.PolicyControllerResourceList(
                                        cpu="quam",
                                        memory="dolor",
                                    ),
                                    requests=shared.PolicyControllerResourceList(
                                        cpu="vero",
                                        memory="nostrum",
                                    ),
                                ),
                                pod_anti_affinity=False,
                                pod_tolerations=[
                                    shared.PolicyControllerToleration(
                                        effect="recusandae",
                                        key="omnis",
                                        operator="facilis",
                                        value="perspiciatis",
                                    ),
                                    shared.PolicyControllerToleration(
                                        effect="voluptatem",
                                        key="porro",
                                        operator="consequuntur",
                                        value="blanditiis",
                                    ),
                                    shared.PolicyControllerToleration(
                                        effect="error",
                                        key="eaque",
                                        operator="occaecati",
                                        value="rerum",
                                    ),
                                    shared.PolicyControllerToleration(
                                        effect="adipisci",
                                        key="asperiores",
                                        operator="earum",
                                        value="modi",
                                    ),
                                ],
                                replica_count="iste",
                            ),
                        },
                        exemptable_namespaces=[
                            "deleniti",
                            "pariatur",
                            "provident",
                        ],
                        install_spec="INSTALL_SPEC_SUSPENDED",
                        log_denies_enabled=False,
                        monitoring=shared.PolicyControllerMonitoringConfig(
                            backends=[
                                "CLOUD_MONITORING",
                                "MONITORING_BACKEND_UNSPECIFIED",
                                "PROMETHEUS",
                            ],
                        ),
                        mutation_enabled=False,
                        policy_content=shared.PolicyControllerPolicyContentSpec(
                            bundles={
                                "dolorem": shared.PolicyControllerBundleInstallSpec(
                                    exempted_namespaces=[
                                        "dolor",
                                    ],
                                    management="MANAGEMENT_UNSPECIFIED",
                                ),
                                "ipsum": shared.PolicyControllerBundleInstallSpec(
                                    exempted_namespaces=[
                                        "excepturi",
                                        "cum",
                                        "voluptate",
                                        "dignissimos",
                                    ],
                                    management="INSTALLED",
                                ),
                            },
                            template_library=shared.PolicyControllerTemplateLibraryConfig(
                                included=False,
                                installation="INSTALLATION_UNSPECIFIED",
                            ),
                        ),
                        referential_rules_enabled=False,
                        template_library_config=shared.PolicyControllerTemplateLibraryConfig(
                            included=False,
                            installation="ALL",
                        ),
                    ),
                    version="numquam",
                ),
                workloadcertificate=shared.MembershipSpec(
                    certificate_management="CERTIFICATE_MANAGEMENT_UNSPECIFIED",
                ),
            ),
        },
        resource_state=shared.FeatureResourceState(
            state="STATE_UNSPECIFIED",
        ),
        scope_specs={
            "iure": {
                "quaerat": "accusamus",
                "quidem": "voluptatibus",
            },
        },
        spec=shared.CommonFeatureSpec(
            anthosobservability=shared.AnthosObservabilityFeatureSpec(
                default_membership_spec=shared.AnthosObservabilityMembershipSpec(
                    do_not_optimize_metrics=False,
                    enable_stackdriver_on_applications=False,
                    version="voluptas",
                ),
            ),
            appdevexperience={
                "eos": "atque",
                "sit": "fugiat",
                "ab": "soluta",
            },
            cloudauditlogging=shared.CloudAuditLoggingFeatureSpec(
                allowlisted_service_accounts=[
                    "iusto",
                    "voluptate",
                    "dolorum",
                ],
            ),
            fleetobservability={
                "omnis": "necessitatibus",
                "distinctio": "asperiores",
                "nihil": "ipsum",
            },
            multiclusteringress=shared.MultiClusterIngressFeatureSpec(
                billing="PAY_AS_YOU_GO",
                config_membership="id",
            ),
            workloadcertificate=shared.FeatureSpec(
                default_config=shared.MembershipSpec(
                    certificate_management="ENABLED",
                ),
                provision_google_ca="GOOGLE_CA_PROVISIONING_UNSPECIFIED",
            ),
        ),
        state=shared.CommonFeatureStateInput(
            appdevexperience=shared.AppDevExperienceFeatureState(
                networking_install_succeeded=shared.Status(
                    code="CODE_UNSPECIFIED",
                    description="perferendis",
                ),
            ),
            fleetobservability={
                "optio": "accusamus",
            },
            state=shared.FeatureState(
                code="OK",
                description="saepe",
                update_time="suscipit",
            ),
        ),
    ),
    access_token="deserunt",
    alt="media",
    callback="minima",
    feature_id="repellendus",
    fields_="totam",
    key="similique",
    oauth_token="alias",
    parent="at",
    pretty_print=False,
    quota_user="quaerat",
    request_id="tempora",
    upload_type="vel",
    upload_protocol="quod",
)
    
res = s.projects.gkehub_projects_locations_features_create(req, operations.GkehubProjectsLocationsFeaturesCreateSecurity(
    oauth2="Bearer YOUR_ACCESS_TOKEN_HERE",
    oauth2c="Bearer YOUR_ACCESS_TOKEN_HERE",
))

if res.operation is not None:
    # handle response
```
<!-- End SDK Example Usage -->

<!-- Start SDK Available Operations -->
## Available Resources and Operations


### projects

* `gkehub_projects_locations_features_create` - Adds a new Feature.
* `gkehub_projects_locations_features_list` - Lists Features in a given project and location.
* `gkehub_projects_locations_fleets_create` - Creates a fleet.
* `gkehub_projects_locations_fleets_list` - Returns all fleets within an organization or a project that the caller has access to.
* `gkehub_projects_locations_list` - Lists information about the supported locations for this service.
* `gkehub_projects_locations_memberships_bindings_create` - Creates a MembershipBinding.
* `gkehub_projects_locations_memberships_bindings_list` - Lists MembershipBindings.
* `gkehub_projects_locations_memberships_create` - Creates a new Membership. **This is currently only supported for GKE clusters on Google Cloud**. To register other clusters, follow the instructions at https://cloud.google.com/anthos/multicluster-management/connect/registering-a-cluster.
* `gkehub_projects_locations_memberships_generate_connect_manifest` - Generates the manifest for deployment of the GKE connect agent. **This method is used internally by Google-provided libraries.** Most clients should not need to call this method directly.
* `gkehub_projects_locations_memberships_get_iam_policy` - Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
* `gkehub_projects_locations_memberships_list` - Lists Memberships in a given project and location.
* `gkehub_projects_locations_memberships_list_admin` - Lists Memberships of admin clusters in a given project and location. **This method is only used internally**.
* `gkehub_projects_locations_memberships_set_iam_policy` - Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
* `gkehub_projects_locations_memberships_test_iam_permissions` - Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
* `gkehub_projects_locations_memberships_validate_create` - ValidateCreateMembership is a preflight check for CreateMembership. It checks the following: 1. Caller has the required `gkehub.memberships.create` permission. 2. The membership_id is still available.
* `gkehub_projects_locations_namespaces_create` - Creates a fleet namespace.
* `gkehub_projects_locations_namespaces_list` - Lists fleet namespaces.
* `gkehub_projects_locations_namespaces_rbacrolebindings_create` - Creates a RBACRoleBinding.
* `gkehub_projects_locations_namespaces_rbacrolebindings_list` - Lists RBACRoleBinding.
* `gkehub_projects_locations_operations_cancel` - Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
* `gkehub_projects_locations_operations_list` - Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
* `gkehub_projects_locations_scopes_create` - Creates a Scope.
* `gkehub_projects_locations_scopes_delete` - Deletes a Scope.
* `gkehub_projects_locations_scopes_get` - Returns the details of a Scope.
* `gkehub_projects_locations_scopes_list` - Lists Scopes.
* `gkehub_projects_locations_scopes_patch` - Updates a scopes.
<!-- End SDK Available Operations -->

### Maturity

This SDK is in beta, and there may be breaking changes between versions without a major version update. Therefore, we recommend pinning usage
to a specific package version. This way, you can install the same version each time without breaking changes unless you are intentionally
looking for the latest version.

### Contributions

While we value open-source contributions to this SDK, this library is generated programmatically.
Feel free to open a PR or a Github issue as a proof of concept and we'll do our best to include it in a future release !

### SDK Created by [Speakeasy](https://docs.speakeasyapi.dev/docs/using-speakeasy/client-sdks)
