/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CatalogTax - A tax applicable to an item.
 */
public class CatalogTax {
    /**
     * If `true`, the fee applies to custom amounts entered into the Square Point of Sale
     * app that are not associated with a particular `CatalogItem`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applies_to_custom_amounts")
    public Boolean appliesToCustomAmounts;

    public CatalogTax withAppliesToCustomAmounts(Boolean appliesToCustomAmounts) {
        this.appliesToCustomAmounts = appliesToCustomAmounts;
        return this;
    }
    
    /**
     * Whether the tax is calculated based on a payment's subtotal or total.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("calculation_phase")
    public String calculationPhase;

    public CatalogTax withCalculationPhase(String calculationPhase) {
        this.calculationPhase = calculationPhase;
        return this;
    }
    
    /**
     * A Boolean flag to indicate whether the tax is displayed as enabled (`true`) in the Square Point of Sale app or not (`false`).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enabled")
    public Boolean enabled;

    public CatalogTax withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }
    
    /**
     * Whether the tax is `ADDITIVE` or `INCLUSIVE`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inclusion_type")
    public String inclusionType;

    public CatalogTax withInclusionType(String inclusionType) {
        this.inclusionType = inclusionType;
        return this;
    }
    
    /**
     * The tax's name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public CatalogTax withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The percentage of the tax in decimal form, using a `'.'` as the decimal separator and without a `'%'` sign.
     * A value of `7.5` corresponds to 7.5%.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("percentage")
    public String percentage;

    public CatalogTax withPercentage(String percentage) {
        this.percentage = percentage;
        return this;
    }
    
    public CatalogTax(){}
}
