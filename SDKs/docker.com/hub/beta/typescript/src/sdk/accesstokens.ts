/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * The Personal Access Token endpoints lets you manage personal access tokens. For more
 *
 * @remarks
 * information, see [Access Tokens](https://docs.docker.com/docker-hub/access-tokens/).
 *
 * You can use a personal access token instead of a password in the [Docker CLI](https://docs.docker.com/engine/reference/commandline/cli/)
 * or in the [Create an authentication token](#operation/PostUsersLogin) route to obtain a bearer
 * token.
 *
 * ### Scopes
 *
 * For each scope grouping (in this case "repo"), you only need to define 1 scope as any lower
 * scopes are assumed. For example: If you define `repo:write`, the API assumes the scope of both
 * `repo:read` *and* `repo:public_read` as well. If you were to define both `repo:write` *and*
 * `repo:read`, then `repo:read` is assumed by `repo:write` and ignored.
 *
 * ***Treat your personal access token like your password and keep it secret. You cannot retrieve
 * your token after it is generated.***
 *
 */
export class AccessTokens {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete a personal access token
   *
   * @remarks
   * Deletes a personal access token permanently. This cannot be undone.
   *
   */
  deleteV2AccessTokensUuid(
    req: operations.DeleteV2AccessTokensUuidRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteV2AccessTokensUuidResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteV2AccessTokensUuidRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/access-tokens/{uuid}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteV2AccessTokensUuidResponse =
        new operations.DeleteV2AccessTokensUuidResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case [401, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a list of personal access tokens
   *
   * @remarks
   * Returns a paginated list of personal access tokens.
   */
  getV2AccessTokens(
    req: operations.GetV2AccessTokensRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetV2AccessTokensResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetV2AccessTokensRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/access-tokens";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetV2AccessTokensResponse =
        new operations.GetV2AccessTokensResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAccessTokensResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetAccessTokensResponse
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.valueError = utils.objectToClass(
              httpRes?.data,
              shared.ValueError
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a personal access token
   *
   * @remarks
   * Returns a personal access token by UUID.
   */
  getV2AccessTokensUuid(
    req: operations.GetV2AccessTokensUuidRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetV2AccessTokensUuidResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetV2AccessTokensUuidRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/access-tokens/{uuid}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetV2AccessTokensUuidResponse =
        new operations.GetV2AccessTokensUuidResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getV2AccessTokensUuid200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetV2AccessTokensUuid200ApplicationJSON
              );
          }
          break;
        case [401, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update a personal access token
   *
   * @remarks
   * Updates a personal access token partially. You can either update the
   * token's label or enable/disable it.
   *
   */
  patchV2AccessTokensUuid(
    req: operations.PatchV2AccessTokensUuidRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PatchV2AccessTokensUuidResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PatchV2AccessTokensUuidRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/access-tokens/{uuid}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "patchAccessTokenRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PatchV2AccessTokensUuidResponse =
        new operations.PatchV2AccessTokensUuidResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.patchAccessTokenResponse = utils.objectToClass(
              httpRes?.data,
              shared.PatchAccessTokenResponse
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.valueError = utils.objectToClass(
              httpRes?.data,
              shared.ValueError
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a personal access token
   *
   * @remarks
   * Creates and returns a personal access token.
   */
  postV2AccessTokens(
    req: shared.CreateAccessTokenRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostV2AccessTokensResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.CreateAccessTokenRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/access-tokens";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostV2AccessTokensResponse =
        new operations.PostV2AccessTokensResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createAccessTokensResponse = utils.objectToClass(
              httpRes?.data,
              shared.CreateAccessTokensResponse
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.valueError = utils.objectToClass(
              httpRes?.data,
              shared.ValueError
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }
}
