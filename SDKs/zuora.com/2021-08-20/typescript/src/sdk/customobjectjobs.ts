/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * With Custom Objects service, you can submit a bulk job request to delete or create custom object records in a batch.
 *
 * @remarks
 *
 * If you use Postman, you can import the custom objects endpoints as a collection into your Postman app and try out different requests to learn how the API works. Click the following button to get started:
 *
 * [![Run in Postman](https://run.pstmn.io/button.svg)](https://www.getpostman.com/run-collection/1f068ba43651bf63c0d4)
 *
 * You can sign up for a free account on the [Postman website](https://identity.getpostman.com/signup) and download the app in case you do not use Postman yet.
 *
 * Note that the Custom Object Jobs API is versioned by `Zuora-Version` in the request header. The response may be different for the same request with a different API version. Specify `Zuora-Version` in the request header if you expect a specific response schema.
 *
 * ### Error handling
 * If the Custom Objects API call fails, an error code will be returned in the response body. See [Custom Objects API error code](https://knowledgecenter.zuora.com/Central_Platform/Custom_Objects/Z_Custom_Objects_API#Custom_Objects_API_error_code) for details.
 *
 */
export class CustomObjectJobs {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * List all custom object bulk jobs
   *
   * @remarks
   * Lists all custom object bulk jobs submitted by your tenant.
   *
   */
  getAllCustomObjectBulkJobs(
    req: operations.GETAllCustomObjectBulkJobsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETAllCustomObjectBulkJobsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETAllCustomObjectBulkJobsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/objects/jobs";

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETAllCustomObjectBulkJobsResponse =
        new operations.GETAllCustomObjectBulkJobsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.customObjectBulkJobResponseCollection = utils.objectToClass(
              httpRes?.data,
              shared.CustomObjectBulkJobResponseCollection
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve a custom object bulk job
   *
   * @remarks
   * Retrieves the custom object bulk job details by job ID.
   *
   * Only the users that have the "View Custom Objects" permission can retrieve custom object bulk jobs. See [Platform Permissions](https://knowledgecenter.zuora.com/Billing/Tenant_Management/A_Administrator_Settings/User_Roles/h_Platform_Roles#Platform_Permissions) for more information.
   *
   */
  getCustomObjectBulkJob(
    req: operations.GETCustomObjectBulkJobRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETCustomObjectBulkJobResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETCustomObjectBulkJobRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/objects/jobs/{id}", req);

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETCustomObjectBulkJobResponse =
        new operations.GETCustomObjectBulkJobResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.customObjectBulkJobResponse = utils.objectToClass(
              httpRes?.data,
              shared.CustomObjectBulkJobResponse
            );
          }
          break;
        case httpRes?.status == 404:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.commonErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.CommonErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all errors for a custom object bulk job
   *
   * @remarks
   * Lists all errors for a custom object bulk job.
   *
   */
  getCustomObjectBulkJobErrors(
    req: operations.GETCustomObjectBulkJobErrorsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETCustomObjectBulkJobErrorsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETCustomObjectBulkJobErrorsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/objects/jobs/{id}/errors",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETCustomObjectBulkJobErrorsResponse =
        new operations.GETCustomObjectBulkJobErrorsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.customObjectBulkJobErrorResponseCollection =
              utils.objectToClass(
                httpRes?.data,
                shared.CustomObjectBulkJobErrorResponseCollection
              );
          }
          break;
        case httpRes?.status == 404:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.commonErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.CommonErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Submit a custom object bulk job
   *
   * @remarks
   * Submits a bulk job request for a bulk operation on the specified custom object records. A succcessful call returns a newly created bulk job. The job ID can be used to poll the job status or upload the CSV file if it is a `create` job.
   *
   * ## Limits
   * This custom object bulk jobs have the following limits:
   * * The concurrent bulk job limit per tenant is 5. Bulk jobs in `open`, `pending`, or `in_progress` status are counted towards the concurrent bulk job limit.
   * * The bulk job execuation order is not guaranteed, which means the bulk job that you submit ealier may be executed later.
   * * Only the users that have the "Delete Custom Objects" permission can create a `delete` bulk job. Only the users that have the "Edit Custom Objects" permission can create a `create` bulk job. See [Platform Permissions](https://knowledgecenter.zuora.com/Billing/Tenant_Management/A_Administrator_Settings/User_Roles/h_Platform_Roles#Platform_Permissions) for more information.
   *
   */
  postCustomObjectBulkJob(
    req: operations.POSTCustomObjectBulkJobRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.POSTCustomObjectBulkJobResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.POSTCustomObjectBulkJobRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/objects/jobs";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "customObjectBulkJobRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.POSTCustomObjectBulkJobResponse =
        new operations.POSTCustomObjectBulkJobResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.customObjectBulkJobResponse = utils.objectToClass(
              httpRes?.data,
              shared.CustomObjectBulkJobResponse
            );
          }
          break;
        case [400, 403].includes(httpRes?.status):
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.commonErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.CommonErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Upload a file for a custom object bulk job
   *
   * @remarks
   * Uploads a file to a create custom object bulk job. Only one file is allowed per job. The job must be in `pending` status when you upload the file to it. The job will start creating records once the upload is finished.
   *
   * Only the users that have the "Edit Custom Objects" permission can upload files to custom object bulk jobs. See [Platform Permissions](https://knowledgecenter.zuora.com/Billing/Tenant_Management/A_Administrator_Settings/User_Roles/h_Platform_Roles#Platform_Permissions) for more information.
   *
   */
  postUploadFileForCustomObjectBulkJob(
    req: operations.POSTUploadFileForCustomObjectBulkJobRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.POSTUploadFileForCustomObjectBulkJobResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.POSTUploadFileForCustomObjectBulkJobRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/objects/jobs/{id}/files",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "string"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.POSTUploadFileForCustomObjectBulkJobResponse =
        new operations.POSTUploadFileForCustomObjectBulkJobResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.customObjectBulkJobResponse = utils.objectToClass(
              httpRes?.data,
              shared.CustomObjectBulkJobResponse
            );
          }
          break;
        case [400, 403, 404].includes(httpRes?.status):
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.commonErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.CommonErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
