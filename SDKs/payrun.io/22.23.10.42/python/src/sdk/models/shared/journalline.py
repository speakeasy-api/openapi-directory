"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class JournalLineJournalLineEmployee:
    r"""The journal lines' employee"""
    
    at_href: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('@href'), 'exclude': lambda f: f is None }})
    r"""The links' href"""  
    at_rel: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('@rel'), 'exclude': lambda f: f is None }})
    r"""The links' target type"""  
    at_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('@title'), 'exclude': lambda f: f is None }})
    r"""The links' title"""  
    
class JournalLineJournalLinePayFrequencyEnum(str, Enum):
    r"""The journal lines' pay frequency"""
    WEEKLY = 'Weekly'
    MONTHLY = 'Monthly'
    TWO_WEEKLY = 'TwoWeekly'
    FOUR_WEEKLY = 'FourWeekly'
    YEARLY = 'Yearly'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class JournalLineJournalLinePayRun:
    r"""The journal lines' pay run"""
    
    at_href: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('@href'), 'exclude': lambda f: f is None }})
    r"""The links' href"""  
    at_rel: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('@rel'), 'exclude': lambda f: f is None }})
    r"""The links' target type"""  
    at_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('@title'), 'exclude': lambda f: f is None }})
    r"""The links' title"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class JournalLineJournalLineSubContractor:
    r"""The journal lines' sub contractor"""
    
    at_href: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('@href'), 'exclude': lambda f: f is None }})
    r"""The links' href"""  
    at_rel: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('@rel'), 'exclude': lambda f: f is None }})
    r"""The links' target type"""  
    at_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('@title'), 'exclude': lambda f: f is None }})
    r"""The links' title"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class JournalLineJournalLine:
    
    credit: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Credit'), 'exclude': lambda f: f is None }})
    r"""The journal lines' credit"""  
    debit: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Debit'), 'exclude': lambda f: f is None }})
    r"""The journal lines' debit"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})
    r"""The journal lines' description"""  
    employee: Optional[JournalLineJournalLineEmployee] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Employee'), 'exclude': lambda f: f is None }})
    r"""The journal lines' employee"""  
    generated: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Generated'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The journal lines' generated"""  
    grouping: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Grouping'), 'exclude': lambda f: f is None }})
    r"""The journal lines' grouping"""  
    ledger_target: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LedgerTarget'), 'exclude': lambda f: f is None }})
    r"""The journal lines' ledger target"""  
    nom_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NomCode'), 'exclude': lambda f: f is None }})
    r"""The journal lines' nom code"""  
    pay_frequency: Optional[JournalLineJournalLinePayFrequencyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PayFrequency'), 'exclude': lambda f: f is None }})
    r"""The journal lines' pay frequency"""  
    pay_run: Optional[JournalLineJournalLinePayRun] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PayRun'), 'exclude': lambda f: f is None }})
    r"""The journal lines' pay run"""  
    sub_contractor: Optional[JournalLineJournalLineSubContractor] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SubContractor'), 'exclude': lambda f: f is None }})
    r"""The journal lines' sub contractor"""  
    sub_nom_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SubNomCode'), 'exclude': lambda f: f is None }})
    r"""The journal lines' sub nom code"""  
    tax_period: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxPeriod'), 'exclude': lambda f: f is None }})
    r"""The journal lines' tax period"""  
    tax_year: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxYear'), 'exclude': lambda f: f is None }})
    r"""The journal lines' tax year"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class JournalLine:
    r"""The journal line object."""
    
    journal_line: Optional[JournalLineJournalLine] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JournalLine'), 'exclude': lambda f: f is None }})  
    