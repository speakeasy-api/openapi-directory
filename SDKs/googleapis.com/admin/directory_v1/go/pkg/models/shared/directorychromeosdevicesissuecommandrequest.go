// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DirectoryChromeosdevicesIssueCommandRequestCommandTypeEnum - The type of command.
type DirectoryChromeosdevicesIssueCommandRequestCommandTypeEnum string

const (
	DirectoryChromeosdevicesIssueCommandRequestCommandTypeEnumCommandTypeUnspecified DirectoryChromeosdevicesIssueCommandRequestCommandTypeEnum = "COMMAND_TYPE_UNSPECIFIED"
	DirectoryChromeosdevicesIssueCommandRequestCommandTypeEnumReboot                 DirectoryChromeosdevicesIssueCommandRequestCommandTypeEnum = "REBOOT"
	DirectoryChromeosdevicesIssueCommandRequestCommandTypeEnumTakeAScreenshot        DirectoryChromeosdevicesIssueCommandRequestCommandTypeEnum = "TAKE_A_SCREENSHOT"
	DirectoryChromeosdevicesIssueCommandRequestCommandTypeEnumSetVolume              DirectoryChromeosdevicesIssueCommandRequestCommandTypeEnum = "SET_VOLUME"
	DirectoryChromeosdevicesIssueCommandRequestCommandTypeEnumWipeUsers              DirectoryChromeosdevicesIssueCommandRequestCommandTypeEnum = "WIPE_USERS"
	DirectoryChromeosdevicesIssueCommandRequestCommandTypeEnumRemotePowerwash        DirectoryChromeosdevicesIssueCommandRequestCommandTypeEnum = "REMOTE_POWERWASH"
	DirectoryChromeosdevicesIssueCommandRequestCommandTypeEnumDeviceStartCrdSession  DirectoryChromeosdevicesIssueCommandRequestCommandTypeEnum = "DEVICE_START_CRD_SESSION"
	DirectoryChromeosdevicesIssueCommandRequestCommandTypeEnumCaptureLogs            DirectoryChromeosdevicesIssueCommandRequestCommandTypeEnum = "CAPTURE_LOGS"
)

func (e DirectoryChromeosdevicesIssueCommandRequestCommandTypeEnum) ToPointer() *DirectoryChromeosdevicesIssueCommandRequestCommandTypeEnum {
	return &e
}

func (e *DirectoryChromeosdevicesIssueCommandRequestCommandTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "COMMAND_TYPE_UNSPECIFIED":
		fallthrough
	case "REBOOT":
		fallthrough
	case "TAKE_A_SCREENSHOT":
		fallthrough
	case "SET_VOLUME":
		fallthrough
	case "WIPE_USERS":
		fallthrough
	case "REMOTE_POWERWASH":
		fallthrough
	case "DEVICE_START_CRD_SESSION":
		fallthrough
	case "CAPTURE_LOGS":
		*e = DirectoryChromeosdevicesIssueCommandRequestCommandTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DirectoryChromeosdevicesIssueCommandRequestCommandTypeEnum: %v", v)
	}
}

// DirectoryChromeosdevicesIssueCommandRequest - A request for issuing a command.
type DirectoryChromeosdevicesIssueCommandRequest struct {
	// The type of command.
	CommandType *DirectoryChromeosdevicesIssueCommandRequestCommandTypeEnum `json:"commandType,omitempty"`
	// The payload for the command, provide it only if command supports it. The following commands support adding payload: * `SET_VOLUME`: Payload is a stringified JSON object in the form: { "volume": 50 }. The volume has to be an integer in the range [0,100]. * `DEVICE_START_CRD_SESSION`: Payload is optionally a stringified JSON object in the form: { "ackedUserPresence": true }. `ackedUserPresence` is a boolean. By default, `ackedUserPresence` is set to `false`. To start a Chrome Remote Desktop session for an active device, set `ackedUserPresence` to `true`.
	Payload *string `json:"payload,omitempty"`
}
