"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Reports:
    r"""The reports API let you group checks into a single report and download the result as a PDF or CSV file.
    It is also possible to upload a group of backgrounds check to be performed in batch and get a report about them later.
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def batch_upload(self, request: operations.BatchUploadRequest, security: operations.BatchUploadSecurity) -> operations.BatchUploadResponse:
        r"""Batch Upload
        Upload multiple checks and associate them to the report. The inputs for these checks must be sent in an xlsx file, please use the following templates:
        
        **Person:** [Chile](https://app.truora.com/files/person/person-input-cl.xlsx), [Colombia](https://app.truora.com/files/person/person-input-co.xlsx), [Mexico](https://app.truora.com/files/person/person-input-mx.xlsx), [Peru](https://app.truora.com/files/person/person-input-pe.xlsx), [Costa Rica](https://app.truora.com/files/person/person-input-cr.xlsx), [Brazil](https://app.truora.com/files/person/person-input-br.xlsx)
        
        **Vehicle:** [Chile](https://app.truora.com/files/vehicle/vehicle-input-cl.xlsx), [Colombia](https://app.truora.com/files/vehicle/vehicle-input-co.xlsx), [Mexico](https://app.truora.com/files/vehicle/vehicle-input-mx.xlsx), [Peru](https://app.truora.com/files/vehicle/vehicle-input-pe.xlsx)
        
        **Company** [Colombia](https://app.truora.com/files/company/company-input-co.xlsx), [Mexico](https://app.truora.com/files/company/company-input-mx.xlsx), [Brazil](https://app.truora.com/files/company/company-input-br.xlsx)
        
        Keep in mind that we currently do not support batch uploads for custom check types. Background checks created by batch upload are processed with low priority.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.BatchUploadRequest, base_url, '/v1/reports/{report_id}/upload', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "batch_upload_input", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BatchUploadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ReportOutput])
                res.report_output = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def create_report(self, request: shared.CreateReportInput, security: operations.CreateReportSecurity) -> operations.CreateReportResponse:
        r"""Create Report
        Creates a Report to which it is possible to associate multiple Checks.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/reports'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateReportResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [201, 400]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ReportOutput])
                res.report_output = out

        return res

    def get_report(self, request: operations.GetReportRequest, security: operations.GetReportSecurity) -> operations.GetReportResponse:
        r"""Get Report
        Returns a report with the given ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetReportRequest, base_url, '/v1/reports/{report_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetReportResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ReportOutput])
                res.report_output = out
        elif http_res.status_code == 404:
            pass

        return res

    def list_reports(self, request: operations.ListReportsRequest) -> operations.ListReportsResponse:
        r"""List Reports
        Lists all reports asociated with the client or user requesting.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/reports'
        
        query_params = utils.get_query_params(operations.ListReportsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListReportsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ReportsOutput])
                res.reports_output = out

        return res

    