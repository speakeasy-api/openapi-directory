/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;

/**
 * Fetch key information about a committee's Form 3, Form 3X, Form 13, or Form 3P financial reports. 
 * 
 *  Most committees are required to summarize their financial activity in each filing; those summaries are included in these files. Generally, committees file reports on a quarterly or monthly basis, but some must also submit a report 12 days before primary elections. Therefore, during the primary season, the period covered by this file may be different for different committees. These totals also incorporate any changes made by committees, if any report covering the period is amended. 
 * 
 *  Information is made available on the API as soon as it's processed. Keep in mind, complex paper filings take longer to process. 
 * 
 *  The financial endpoints use data from FEC [form 5](https://www.fec.gov/pdf/forms/fecfrm5.pdf), for independent expenditors; or the summary and detailed summary pages of the FEC [Form 3](https://www.fec.gov/pdf/forms/fecfrm3.pdf), for House and Senate committees; [Form 3X](https://www.fec.gov/pdf/forms/fecfrm3x.pdf), for PACs and parties; [Form 13](https://www.fec.gov/pdf/forms/fecfrm13.pdf) for inaugural committees; and [Form 3P](https://www.fec.gov/pdf/forms/fecfrm3p.pdf), for presidential committees.
 */
public class Financial {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Financial(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     *  - Each report represents the summary information from Form 3, Form 3X and Form 3P. - These reports have key statistics that illuminate the financial status of a given committee. - Things like cash on hand, debts owed by committee, total receipts, and total disbursements - are especially helpful for understanding a committee's financial dealings. -  - By default, this endpoint includes both amended and final versions of each report. To restrict - to only the final versions of each report, use `is_amended=false`; to retrieve only reports that - have been amended, use `is_amended=true`. -  - Several different reporting structures exist, depending on the type of organization that - submits financial information. To see an example of these reporting requirements, - look at the summary and detailed summary pages of Form 3, Form 3X, and Form 3P. -  - DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly - label these fields while conveying clear meaning to ensure accessibility for all users. - 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetCommitteeCommitteeIdReportsResponse getCommitteeCommitteeIdReports(org.openapis.openapi.models.operations.GetCommitteeCommitteeIdReportsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetCommitteeCommitteeIdReportsRequest.class, baseUrl, "/committee/{committee_id}/reports/", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetCommitteeCommitteeIdReportsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetCommitteeCommitteeIdReportsResponse res = new org.openapis.openapi.models.operations.GetCommitteeCommitteeIdReportsResponse(contentType, httpRes.statusCode()) {{
            committeeReportsPage = null;
        }};
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CommitteeReportsPage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CommitteeReportsPage.class);
                res.committeeReportsPage = out;
            }
        }

        return res;
    }

    /**
     *  - This endpoint provides information about a committee's Form 3, Form 3X, or Form 3P financial reports, - which are aggregated by two-year period. We refer to two-year periods as a `cycle`. -  - The cycle is named after the even-numbered year and includes the year before it. To obtain - totals from 2013 and 2014, you would use 2014. In odd-numbered years, the current cycle - is the next year \u2014 for example, in 2015, the current cycle is 2016. -  - For presidential and Senate candidates, multiple two-year cycles exist between elections. -  - 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetCommitteeCommitteeIdTotalsResponse getCommitteeCommitteeIdTotals(org.openapis.openapi.models.operations.GetCommitteeCommitteeIdTotalsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetCommitteeCommitteeIdTotalsRequest.class, baseUrl, "/committee/{committee_id}/totals/", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetCommitteeCommitteeIdTotalsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetCommitteeCommitteeIdTotalsResponse res = new org.openapis.openapi.models.operations.GetCommitteeCommitteeIdTotalsResponse(contentType, httpRes.statusCode()) {{
            committeeTotalsPage = null;
        }};
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CommitteeTotalsPage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CommitteeTotalsPage.class);
                res.committeeTotalsPage = out;
            }
        }

        return res;
    }

    /**
     *  - Look at the top-level financial information for all candidates running for the same - office. -  - Choose a 2-year cycle, and `house`, `senate` or `presidential`. -  - If you are looking for a Senate seat, you will need to select the state using a two-letter - abbreviation. -  - House races require state and a two-digit district number. -  - Since this endpoint reflects financial information, it will only have candidates once they file - financial reporting forms. Query the `/candidates` endpoint to retrieve an-up-to-date list of all the - candidates that filed to run for a particular seat. - 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetElectionsResponse getElections(org.openapis.openapi.models.operations.GetElectionsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/elections/");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetElectionsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetElectionsResponse res = new org.openapis.openapi.models.operations.GetElectionsResponse(contentType, httpRes.statusCode()) {{
            electionPage = null;
        }};
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ElectionPage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ElectionPage.class);
                res.electionPage = out;
            }
        }

        return res;
    }

    /**
     *  - List elections by cycle, office, state, and district. - 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetElectionsSearchResponse getElectionsSearch(org.openapis.openapi.models.operations.GetElectionsSearchRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/elections/search/");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetElectionsSearchRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetElectionsSearchResponse res = new org.openapis.openapi.models.operations.GetElectionsSearchResponse(contentType, httpRes.statusCode()) {{
            electionsListPage = null;
        }};
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ElectionsListPage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ElectionsListPage.class);
                res.electionsListPage = out;
            }
        }

        return res;
    }

    /**
     *  - List elections by cycle, office, state, and district. - 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetElectionsSummaryResponse getElectionsSummary(org.openapis.openapi.models.operations.GetElectionsSummaryRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/elections/summary/");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetElectionsSummaryRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetElectionsSummaryResponse res = new org.openapis.openapi.models.operations.GetElectionsSummaryResponse(contentType, httpRes.statusCode()) {{
            electionSummary = null;
        }};
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ElectionSummary out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ElectionSummary.class);
                res.electionSummary = out;
            }
        }

        return res;
    }

    /**
     *  - Each report represents the summary information from Form 3, Form 3X and Form 3P. - These reports have key statistics that illuminate the financial status of a given committee. - Things like cash on hand, debts owed by committee, total receipts, and total disbursements - are especially helpful for understanding a committee's financial dealings. -  - By default, this endpoint includes both amended and final versions of each report. To restrict - to only the final versions of each report, use `is_amended=false`; to retrieve only reports that - have been amended, use `is_amended=true`. -  - Several different reporting structures exist, depending on the type of organization that - submits financial information. To see an example of these reporting requirements, - look at the summary and detailed summary pages of Form 3, Form 3X, and Form 3P. -  - DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly - label these fields while conveying clear meaning to ensure accessibility for all users. - 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetReportsEntityTypeResponse getReportsEntityType(org.openapis.openapi.models.operations.GetReportsEntityTypeRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetReportsEntityTypeRequest.class, baseUrl, "/reports/{entity_type}/", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetReportsEntityTypeRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetReportsEntityTypeResponse res = new org.openapis.openapi.models.operations.GetReportsEntityTypeResponse(contentType, httpRes.statusCode()) {{
            committeeReportsPage = null;
        }};
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CommitteeReportsPage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CommitteeReportsPage.class);
                res.committeeReportsPage = out;
            }
        }

        return res;
    }

    /**
     *  - Provides cumulative receipt totals by entity type, over a two year cycle. Totals are adjusted to avoid double counting. -  - This is [the sql](https://github.com/fecgov/openFEC/blob/develop/data/migrations/V41__large_aggregates.sql) that creates these calculations. - 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetTotalsByEntityResponse getTotalsByEntity(org.openapis.openapi.models.operations.GetTotalsByEntityRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/totals/by_entity/");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetTotalsByEntityRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetTotalsByEntityResponse res = new org.openapis.openapi.models.operations.GetTotalsByEntityResponse(contentType, httpRes.statusCode()) {{
            entityReceiptDisbursementTotalsPage = null;
        }};
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.EntityReceiptDisbursementTotalsPage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.EntityReceiptDisbursementTotalsPage.class);
                res.entityReceiptDisbursementTotalsPage = out;
            }
        }

        return res;
    }

    /**
     *  - This endpoint provides information about an inaugural committee's Form 13 report of donations accepted. - The data is aggregated by the contributor and the two-year period. We refer to two-year periods as a `cycle`. -  - 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetTotalsInauguralCommitteesByContributorResponse getTotalsInauguralCommitteesByContributor(org.openapis.openapi.models.operations.GetTotalsInauguralCommitteesByContributorRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/totals/inaugural_committees/by_contributor/");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetTotalsInauguralCommitteesByContributorRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetTotalsInauguralCommitteesByContributorResponse res = new org.openapis.openapi.models.operations.GetTotalsInauguralCommitteesByContributorResponse(contentType, httpRes.statusCode()) {{
            inauguralDonationsPage = null;
        }};
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.InauguralDonationsPage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.InauguralDonationsPage.class);
                res.inauguralDonationsPage = out;
            }
        }

        return res;
    }

    /**
     *  - This endpoint provides information about a committee's Form 3, Form 3X, or Form 3P financial reports, - which are aggregated by two-year period. We refer to two-year periods as a `cycle`. -  - The cycle is named after the even-numbered year and includes the year before it. To obtain - totals from 2013 and 2014, you would use 2014. In odd-numbered years, the current cycle - is the next year \u2014 for example, in 2015, the current cycle is 2016. -  - For presidential and Senate candidates, multiple two-year cycles exist between elections. -  - 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetTotalsEntityTypeResponse getTotalsEntityType(org.openapis.openapi.models.operations.GetTotalsEntityTypeRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetTotalsEntityTypeRequest.class, baseUrl, "/totals/{entity_type}/", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetTotalsEntityTypeRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetTotalsEntityTypeResponse res = new org.openapis.openapi.models.operations.GetTotalsEntityTypeResponse(contentType, httpRes.statusCode()) {{
            committeeTotalsPage = null;
        }};
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CommitteeTotalsPage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CommitteeTotalsPage.class);
                res.committeeTotalsPage = out;
            }
        }

        return res;
    }
}