// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type GoogleCloudFunctionRulePostRuleTypeEnum string

const (
	GoogleCloudFunctionRulePostRuleTypeEnumHTTPGoogleCloudFunction GoogleCloudFunctionRulePostRuleTypeEnum = "http/google-cloud-function"
)

func (e GoogleCloudFunctionRulePostRuleTypeEnum) ToPointer() *GoogleCloudFunctionRulePostRuleTypeEnum {
	return &e
}

func (e *GoogleCloudFunctionRulePostRuleTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http/google-cloud-function":
		*e = GoogleCloudFunctionRulePostRuleTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleCloudFunctionRulePostRuleTypeEnum: %v", v)
	}
}

type GoogleCloudFunctionRulePostTargetHeaders struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

type GoogleCloudFunctionRulePostTarget struct {
	Enveloped    *bool                                      `json:"enveloped,omitempty"`
	Format       *string                                    `json:"format,omitempty"`
	FunctionName string                                     `json:"functionName"`
	Headers      []GoogleCloudFunctionRulePostTargetHeaders `json:"headers,omitempty"`
	ProjectID    string                                     `json:"projectId"`
	Region       string                                     `json:"region"`
	SigningKeyID *string                                    `json:"signingKeyId,omitempty"`
}

type GoogleCloudFunctionRulePost struct {
	RequestMode string                                  `json:"requestMode"`
	RuleType    GoogleCloudFunctionRulePostRuleTypeEnum `json:"ruleType"`
	Source      RuleSource                              `json:"source"`
	Status      *string                                 `json:"status,omitempty"`
	Target      GoogleCloudFunctionRulePostTarget       `json:"target"`
}
