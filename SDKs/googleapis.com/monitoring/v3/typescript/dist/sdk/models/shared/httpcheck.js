"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpCheck = exports.HttpCheckRequestMethodEnum = exports.HttpCheckContentTypeEnum = void 0;
var utils_1 = require("../../../internal/utils");
var basicauthentication_1 = require("./basicauthentication");
var pingconfig_1 = require("./pingconfig");
var responsestatuscode_1 = require("./responsestatuscode");
var class_transformer_1 = require("class-transformer");
/**
 * The content type header to use for the check. The following configurations result in errors: 1. Content type is specified in both the headers field and the content_type field. 2. Request method is GET and content_type is not TYPE_UNSPECIFIED 3. Request method is POST and content_type is TYPE_UNSPECIFIED. 4. Request method is POST and a "Content-Type" header is provided via headers field. The content_type field should be used instead.
 */
var HttpCheckContentTypeEnum;
(function (HttpCheckContentTypeEnum) {
    HttpCheckContentTypeEnum["TypeUnspecified"] = "TYPE_UNSPECIFIED";
    HttpCheckContentTypeEnum["UrlEncoded"] = "URL_ENCODED";
    HttpCheckContentTypeEnum["UserProvided"] = "USER_PROVIDED";
})(HttpCheckContentTypeEnum = exports.HttpCheckContentTypeEnum || (exports.HttpCheckContentTypeEnum = {}));
/**
 * The HTTP request method to use for the check. If set to METHOD_UNSPECIFIED then request_method defaults to GET.
 */
var HttpCheckRequestMethodEnum;
(function (HttpCheckRequestMethodEnum) {
    HttpCheckRequestMethodEnum["MethodUnspecified"] = "METHOD_UNSPECIFIED";
    HttpCheckRequestMethodEnum["Get"] = "GET";
    HttpCheckRequestMethodEnum["Post"] = "POST";
})(HttpCheckRequestMethodEnum = exports.HttpCheckRequestMethodEnum || (exports.HttpCheckRequestMethodEnum = {}));
/**
 * Information involved in an HTTP/HTTPS Uptime check request.
 */
var HttpCheck = /** @class */ (function (_super) {
    __extends(HttpCheck, _super);
    function HttpCheck() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: responsestatuscode_1.ResponseStatusCode }),
        (0, class_transformer_1.Expose)({ name: "acceptedResponseStatusCodes" }),
        (0, class_transformer_1.Type)(function () { return responsestatuscode_1.ResponseStatusCode; }),
        __metadata("design:type", Array)
    ], HttpCheck.prototype, "acceptedResponseStatusCodes", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "authInfo" }),
        (0, class_transformer_1.Type)(function () { return basicauthentication_1.BasicAuthentication; }),
        __metadata("design:type", basicauthentication_1.BasicAuthentication)
    ], HttpCheck.prototype, "authInfo", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "body" }),
        __metadata("design:type", String)
    ], HttpCheck.prototype, "body", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "contentType" }),
        __metadata("design:type", String)
    ], HttpCheck.prototype, "contentType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "customContentType" }),
        __metadata("design:type", String)
    ], HttpCheck.prototype, "customContentType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "headers" }),
        __metadata("design:type", Object)
    ], HttpCheck.prototype, "headers", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "maskHeaders" }),
        __metadata("design:type", Boolean)
    ], HttpCheck.prototype, "maskHeaders", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "path" }),
        __metadata("design:type", String)
    ], HttpCheck.prototype, "path", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "pingConfig" }),
        (0, class_transformer_1.Type)(function () { return pingconfig_1.PingConfig; }),
        __metadata("design:type", pingconfig_1.PingConfig)
    ], HttpCheck.prototype, "pingConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "port" }),
        __metadata("design:type", Number)
    ], HttpCheck.prototype, "port", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "requestMethod" }),
        __metadata("design:type", String)
    ], HttpCheck.prototype, "requestMethod", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "useSsl" }),
        __metadata("design:type", Boolean)
    ], HttpCheck.prototype, "useSsl", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "validateSsl" }),
        __metadata("design:type", Boolean)
    ], HttpCheck.prototype, "validateSsl", void 0);
    return HttpCheck;
}(utils_1.SpeakeasyBase));
exports.HttpCheck = HttpCheck;
