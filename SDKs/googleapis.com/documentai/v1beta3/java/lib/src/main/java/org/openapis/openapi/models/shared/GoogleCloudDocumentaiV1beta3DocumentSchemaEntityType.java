/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType - EntityType is the wrapper of a label of the corresponding model with detailed attributes and limitations for entity-based processors. Multiple types can also compose a dependency tree to represent nested types.
 */
public class GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType {
    /**
     * The entity type that this type is derived from. For now, one and only one should be set.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("baseTypes")
    public String[] baseTypes;

    public GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType withBaseTypes(String[] baseTypes) {
        this.baseTypes = baseTypes;
        return this;
    }
    
    /**
     * User defined name for the type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;

    public GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * Defines the a list of enum values.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enumValues")
    public GoogleCloudDocumentaiV1beta3DocumentSchemaEntityTypeEnumValues enumValues;

    public GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType withEnumValues(GoogleCloudDocumentaiV1beta3DocumentSchemaEntityTypeEnumValues enumValues) {
        this.enumValues = enumValues;
        return this;
    }
    
    /**
     * Name of the type. It must be unique within the schema file and cannot be a 'Common Type'. Besides that we use the following naming conventions: - *use `snake_casing`* - name matching is case-sensitive - Maximum 64 characters. - Must start with a letter. - Allowed characters: ASCII letters `[a-z0-9_-]`. (For backward compatibility internal infrastructure and tooling can handle any ascii character) - The `/` is sometimes used to denote a property of a type. For example `line_item/amount`. This convention is deprecated, but will still be honored for backward compatibility.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Description the nested structure, or composition of an entity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("properties")
    public GoogleCloudDocumentaiV1beta3DocumentSchemaEntityTypeProperty[] properties;

    public GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType withProperties(GoogleCloudDocumentaiV1beta3DocumentSchemaEntityTypeProperty[] properties) {
        this.properties = properties;
        return this;
    }
    
    public GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType(){}
}
