// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// RegisterMailDomainXAmzTargetEnum
type RegisterMailDomainXAmzTargetEnum string

const (
	RegisterMailDomainXAmzTargetEnumWorkMailServiceRegisterMailDomain RegisterMailDomainXAmzTargetEnum = "WorkMailService.RegisterMailDomain"
)

func (e RegisterMailDomainXAmzTargetEnum) ToPointer() *RegisterMailDomainXAmzTargetEnum {
	return &e
}

func (e *RegisterMailDomainXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "WorkMailService.RegisterMailDomain":
		*e = RegisterMailDomainXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RegisterMailDomainXAmzTargetEnum: %v", v)
	}
}

type RegisterMailDomainRequest struct {
	RegisterMailDomainRequest shared.RegisterMailDomainRequest `request:"mediaType=application/json"`
	XAmzAlgorithm             *string                          `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256         *string                          `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential            *string                          `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                  *string                          `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken         *string                          `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature             *string                          `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders         *string                          `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                RegisterMailDomainXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type RegisterMailDomainResponse struct {
	ContentType string
	// InvalidParameterException
	InvalidParameterException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// MailDomainInUseException
	MailDomainInUseException interface{}
	// OrganizationNotFoundException
	OrganizationNotFoundException interface{}
	// OrganizationStateException
	OrganizationStateException interface{}
	// Success
	RegisterMailDomainResponse map[string]interface{}
	StatusCode                 int
	RawResponse                *http.Response
}
