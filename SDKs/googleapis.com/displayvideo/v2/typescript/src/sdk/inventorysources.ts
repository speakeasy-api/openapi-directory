/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class InventorySources {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Creates a new inventory source. Returns the newly created inventory source if successful.
   */
  displayvideoInventorySourcesCreate(
    req: operations.DisplayvideoInventorySourcesCreateRequest,
    security: operations.DisplayvideoInventorySourcesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DisplayvideoInventorySourcesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DisplayvideoInventorySourcesCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/inventorySources";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "inventorySourceInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DisplayvideoInventorySourcesCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DisplayvideoInventorySourcesCreateResponse =
        new operations.DisplayvideoInventorySourcesCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inventorySource = utils.objectToClass(
              httpRes?.data,
              shared.InventorySource
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Edits read/write accessors of an inventory source. Returns the updated read_write_accessors for the inventory source.
   */
  displayvideoInventorySourcesEditInventorySourceReadWriteAccessors(
    req: operations.DisplayvideoInventorySourcesEditInventorySourceReadWriteAccessorsRequest,
    security: operations.DisplayvideoInventorySourcesEditInventorySourceReadWriteAccessorsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DisplayvideoInventorySourcesEditInventorySourceReadWriteAccessorsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DisplayvideoInventorySourcesEditInventorySourceReadWriteAccessorsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/inventorySources/{inventorySourceId}:editInventorySourceReadWriteAccessors",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "editInventorySourceReadWriteAccessorsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DisplayvideoInventorySourcesEditInventorySourceReadWriteAccessorsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DisplayvideoInventorySourcesEditInventorySourceReadWriteAccessorsResponse =
        new operations.DisplayvideoInventorySourcesEditInventorySourceReadWriteAccessorsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inventorySourceAccessors = utils.objectToClass(
              httpRes?.data,
              shared.InventorySourceAccessors
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets an inventory source.
   */
  displayvideoInventorySourcesGet(
    req: operations.DisplayvideoInventorySourcesGetRequest,
    security: operations.DisplayvideoInventorySourcesGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DisplayvideoInventorySourcesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DisplayvideoInventorySourcesGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/inventorySources/{inventorySourceId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DisplayvideoInventorySourcesGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DisplayvideoInventorySourcesGetResponse =
        new operations.DisplayvideoInventorySourcesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inventorySource = utils.objectToClass(
              httpRes?.data,
              shared.InventorySource
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists inventory sources that are accessible to the current user. The order is defined by the order_by parameter. If a filter by entity_status is not specified, inventory sources with entity status `ENTITY_STATUS_ARCHIVED` will not be included in the results.
   */
  displayvideoInventorySourcesList(
    req: operations.DisplayvideoInventorySourcesListRequest,
    security: operations.DisplayvideoInventorySourcesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DisplayvideoInventorySourcesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DisplayvideoInventorySourcesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/inventorySources";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DisplayvideoInventorySourcesListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DisplayvideoInventorySourcesListResponse =
        new operations.DisplayvideoInventorySourcesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listInventorySourcesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListInventorySourcesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates an existing inventory source. Returns the updated inventory source if successful.
   */
  displayvideoInventorySourcesPatch(
    req: operations.DisplayvideoInventorySourcesPatchRequest,
    security: operations.DisplayvideoInventorySourcesPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DisplayvideoInventorySourcesPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DisplayvideoInventorySourcesPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/inventorySources/{inventorySourceId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "inventorySourceInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DisplayvideoInventorySourcesPatchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DisplayvideoInventorySourcesPatchResponse =
        new operations.DisplayvideoInventorySourcesPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inventorySource = utils.objectToClass(
              httpRes?.data,
              shared.InventorySource
            );
          }
          break;
      }

      return res;
    });
  }
}
