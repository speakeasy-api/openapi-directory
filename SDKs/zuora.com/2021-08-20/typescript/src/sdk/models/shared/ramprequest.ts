/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { RampChargeRequest } from "./rampchargerequest";
import { RampIntervalRequest } from "./rampintervalrequest";
import { Expose, Type } from "class-transformer";

/**
 * Container of the ramp definitions. It is used to create, update, or remove the ramp definition for the new subscription.
 *
 * @remarks
 *
 */
export class RampRequest extends SpeakeasyBase {
  /**
   * Container for the rate plan charges that are considered as part of the ramp deal.
   *
   * @remarks
   *
   * * If this field is not specified, all the one-time and recurring regular charges of the new subscription are automatically considered as part of the ramp deal.
   * * If this field is specified, either 'chargeNumber' or 'uniqueToken' must be specified.
   *
   */
  @SpeakeasyMetadata({ elemType: RampChargeRequest })
  @Expose({ name: "charges" })
  @Type(() => RampChargeRequest)
  charges?: RampChargeRequest[];

  /**
   * Whether to remove the ramp definition from the new subscription. If you want to remove the ramp definition, this field is the only required field for the `ramp` object.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "delete" })
  delete?: boolean;

  /**
   * The short description of the ramp.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Container for the intervals that the ramp is split into in its timeline.
   *
   * @remarks
   *
   * It is required when you want to create or update the ramp definition. The ramp intervals cannot have any overlap or gap between each other.
   *
   */
  @SpeakeasyMetadata({ elemType: RampIntervalRequest })
  @Expose({ name: "intervals" })
  @Type(() => RampIntervalRequest)
  intervals?: RampIntervalRequest[];

  /**
   * The name of the ramp.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}
