"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Storelayoutclusters:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def androidenterprise_storelayoutclusters_delete(self, request: operations.AndroidenterpriseStorelayoutclustersDeleteRequest, security: operations.AndroidenterpriseStorelayoutclustersDeleteSecurity) -> operations.AndroidenterpriseStorelayoutclustersDeleteResponse:
        r"""Deletes a cluster."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AndroidenterpriseStorelayoutclustersDeleteRequest, base_url, '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}', request)
        
        query_params = utils.get_query_params(operations.AndroidenterpriseStorelayoutclustersDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AndroidenterpriseStorelayoutclustersDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def androidenterprise_storelayoutclusters_get(self, request: operations.AndroidenterpriseStorelayoutclustersGetRequest, security: operations.AndroidenterpriseStorelayoutclustersGetSecurity) -> operations.AndroidenterpriseStorelayoutclustersGetResponse:
        r"""Retrieves details of a cluster."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AndroidenterpriseStorelayoutclustersGetRequest, base_url, '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}', request)
        
        query_params = utils.get_query_params(operations.AndroidenterpriseStorelayoutclustersGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AndroidenterpriseStorelayoutclustersGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StoreCluster])
                res.store_cluster = out

        return res

    def androidenterprise_storelayoutclusters_insert(self, request: operations.AndroidenterpriseStorelayoutclustersInsertRequest, security: operations.AndroidenterpriseStorelayoutclustersInsertSecurity) -> operations.AndroidenterpriseStorelayoutclustersInsertResponse:
        r"""Inserts a new cluster in a page."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AndroidenterpriseStorelayoutclustersInsertRequest, base_url, '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "store_cluster", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AndroidenterpriseStorelayoutclustersInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AndroidenterpriseStorelayoutclustersInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StoreCluster])
                res.store_cluster = out

        return res

    def androidenterprise_storelayoutclusters_list(self, request: operations.AndroidenterpriseStorelayoutclustersListRequest, security: operations.AndroidenterpriseStorelayoutclustersListSecurity) -> operations.AndroidenterpriseStorelayoutclustersListResponse:
        r"""Retrieves the details of all clusters on the specified page."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AndroidenterpriseStorelayoutclustersListRequest, base_url, '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters', request)
        
        query_params = utils.get_query_params(operations.AndroidenterpriseStorelayoutclustersListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AndroidenterpriseStorelayoutclustersListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StoreLayoutClustersListResponse])
                res.store_layout_clusters_list_response = out

        return res

    def androidenterprise_storelayoutclusters_update(self, request: operations.AndroidenterpriseStorelayoutclustersUpdateRequest, security: operations.AndroidenterpriseStorelayoutclustersUpdateSecurity) -> operations.AndroidenterpriseStorelayoutclustersUpdateResponse:
        r"""Updates a cluster."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AndroidenterpriseStorelayoutclustersUpdateRequest, base_url, '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "store_cluster", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AndroidenterpriseStorelayoutclustersUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AndroidenterpriseStorelayoutclustersUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StoreCluster])
                res.store_cluster = out

        return res

    