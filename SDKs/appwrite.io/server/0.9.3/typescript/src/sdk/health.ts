/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * The Health service allows you to both validate and monitor your Appwrite server's health.
 */
export class Health {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get HTTP
   *
   * @remarks
   * Check the Appwrite HTTP server is up and responsive.
   */
  healthGet(
    config?: AxiosRequestConfig
  ): Promise<operations.HealthGetResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/health";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.HealthGetResponse =
        new operations.HealthGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 500:
          break;
      }

      return res;
    });
  }

  /**
   * Get Anti virus
   *
   * @remarks
   * Check the Appwrite Anti Virus server is up and connection is successful.
   */
  healthGetAntiVirus(
    config?: AxiosRequestConfig
  ): Promise<operations.HealthGetAntiVirusResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/health/anti-virus";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.HealthGetAntiVirusResponse =
        new operations.HealthGetAntiVirusResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 500:
          break;
      }

      return res;
    });
  }

  /**
   * Get Cache
   *
   * @remarks
   * Check the Appwrite in-memory cache server is up and connection is successful.
   */
  healthGetCache(
    config?: AxiosRequestConfig
  ): Promise<operations.HealthGetCacheResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/health/cache";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.HealthGetCacheResponse =
        new operations.HealthGetCacheResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 500:
          break;
      }

      return res;
    });
  }

  /**
   * Get DB
   *
   * @remarks
   * Check the Appwrite database server is up and connection is successful.
   */
  healthGetDB(
    config?: AxiosRequestConfig
  ): Promise<operations.HealthGetDBResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/health/db";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.HealthGetDBResponse =
        new operations.HealthGetDBResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 500:
          break;
      }

      return res;
    });
  }

  /**
   * Get Certificate Queue
   *
   * @remarks
   * Get the number of certificates that are waiting to be issued against [Letsencrypt](https://letsencrypt.org/) in the Appwrite internal queue server.
   */
  healthGetQueueCertificates(
    config?: AxiosRequestConfig
  ): Promise<operations.HealthGetQueueCertificatesResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/health/queue/certificates";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.HealthGetQueueCertificatesResponse =
        new operations.HealthGetQueueCertificatesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 500:
          break;
      }

      return res;
    });
  }

  /**
   * Get Functions Queue
   */
  healthGetQueueFunctions(
    config?: AxiosRequestConfig
  ): Promise<operations.HealthGetQueueFunctionsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/health/queue/functions";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.HealthGetQueueFunctionsResponse =
        new operations.HealthGetQueueFunctionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 500:
          break;
      }

      return res;
    });
  }

  /**
   * Get Logs Queue
   *
   * @remarks
   * Get the number of logs that are waiting to be processed in the Appwrite internal queue server.
   */
  healthGetQueueLogs(
    config?: AxiosRequestConfig
  ): Promise<operations.HealthGetQueueLogsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/health/queue/logs";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.HealthGetQueueLogsResponse =
        new operations.HealthGetQueueLogsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 500:
          break;
      }

      return res;
    });
  }

  /**
   * Get Tasks Queue
   *
   * @remarks
   * Get the number of tasks that are waiting to be processed in the Appwrite internal queue server.
   */
  healthGetQueueTasks(
    config?: AxiosRequestConfig
  ): Promise<operations.HealthGetQueueTasksResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/health/queue/tasks";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.HealthGetQueueTasksResponse =
        new operations.HealthGetQueueTasksResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 500:
          break;
      }

      return res;
    });
  }

  /**
   * Get Usage Queue
   *
   * @remarks
   * Get the number of usage stats that are waiting to be processed in the Appwrite internal queue server.
   */
  healthGetQueueUsage(
    config?: AxiosRequestConfig
  ): Promise<operations.HealthGetQueueUsageResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/health/queue/usage";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.HealthGetQueueUsageResponse =
        new operations.HealthGetQueueUsageResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 500:
          break;
      }

      return res;
    });
  }

  /**
   * Get Webhooks Queue
   *
   * @remarks
   * Get the number of webhooks that are waiting to be processed in the Appwrite internal queue server.
   */
  healthGetQueueWebhooks(
    config?: AxiosRequestConfig
  ): Promise<operations.HealthGetQueueWebhooksResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/health/queue/webhooks";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.HealthGetQueueWebhooksResponse =
        new operations.HealthGetQueueWebhooksResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 500:
          break;
      }

      return res;
    });
  }

  /**
   * Get Local Storage
   *
   * @remarks
   * Check the Appwrite local storage device is up and connection is successful.
   */
  healthGetStorageLocal(
    config?: AxiosRequestConfig
  ): Promise<operations.HealthGetStorageLocalResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/health/storage/local";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.HealthGetStorageLocalResponse =
        new operations.HealthGetStorageLocalResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 500:
          break;
      }

      return res;
    });
  }

  /**
   * Get Time
   *
   * @remarks
   * Check the Appwrite server time is synced with Google remote NTP server. We use this technology to smoothly handle leap seconds with no disruptive events. The [Network Time Protocol](https://en.wikipedia.org/wiki/Network_Time_Protocol) (NTP) is used by hundreds of millions of computers and devices to synchronize their clocks over the Internet. If your computer sets its own clock, it likely uses NTP.
   */
  healthGetTime(
    config?: AxiosRequestConfig
  ): Promise<operations.HealthGetTimeResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/health/time";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.HealthGetTimeResponse =
        new operations.HealthGetTimeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 500:
          break;
      }

      return res;
    });
  }
}
