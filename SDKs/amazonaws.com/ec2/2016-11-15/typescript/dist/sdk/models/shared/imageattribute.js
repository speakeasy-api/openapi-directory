"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageAttribute = exports.ImageAttributeUefiData = exports.ImageAttributeTpmSupport = exports.ImageAttributeSriovNetSupport = exports.ImageAttributeRamdiskId = exports.ImageAttributeProductCodes = exports.ImageAttributeProductCodesProductCodeTypeEnum = exports.ImageAttributeLaunchPermissions = exports.ImageAttributeLaunchPermissionsGroupEnum = exports.ImageAttributeLastLaunchedTime = exports.ImageAttributeKernelId = exports.ImageAttributeImdsSupport = exports.ImageAttributeDescription = exports.ImageAttributeBootMode = exports.ImageAttributeBlockDeviceMappings = exports.ImageAttributeBlockDeviceMappingsEbs = exports.ImageAttributeBlockDeviceMappingsEbsVolumeTypeEnum = void 0;
var utils_1 = require("../../../internal/utils");
/**
 * The volume type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html">Amazon EBS volume types</a> in the <i>Amazon EC2 User Guide</i>. If the volume type is <code>io1</code> or <code>io2</code>, you must specify the IOPS that the volume supports.
 */
var ImageAttributeBlockDeviceMappingsEbsVolumeTypeEnum;
(function (ImageAttributeBlockDeviceMappingsEbsVolumeTypeEnum) {
    ImageAttributeBlockDeviceMappingsEbsVolumeTypeEnum["Standard"] = "standard";
    ImageAttributeBlockDeviceMappingsEbsVolumeTypeEnum["Io1"] = "io1";
    ImageAttributeBlockDeviceMappingsEbsVolumeTypeEnum["Io2"] = "io2";
    ImageAttributeBlockDeviceMappingsEbsVolumeTypeEnum["Gp2"] = "gp2";
    ImageAttributeBlockDeviceMappingsEbsVolumeTypeEnum["Sc1"] = "sc1";
    ImageAttributeBlockDeviceMappingsEbsVolumeTypeEnum["St1"] = "st1";
    ImageAttributeBlockDeviceMappingsEbsVolumeTypeEnum["Gp3"] = "gp3";
})(ImageAttributeBlockDeviceMappingsEbsVolumeTypeEnum = exports.ImageAttributeBlockDeviceMappingsEbsVolumeTypeEnum || (exports.ImageAttributeBlockDeviceMappingsEbsVolumeTypeEnum = {}));
/**
 * Parameters used to automatically set up EBS volumes when the instance is launched.
 */
var ImageAttributeBlockDeviceMappingsEbs = /** @class */ (function (_super) {
    __extends(ImageAttributeBlockDeviceMappingsEbs, _super);
    function ImageAttributeBlockDeviceMappingsEbs() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], ImageAttributeBlockDeviceMappingsEbs.prototype, "deleteOnTermination", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], ImageAttributeBlockDeviceMappingsEbs.prototype, "encrypted", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], ImageAttributeBlockDeviceMappingsEbs.prototype, "iops", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ImageAttributeBlockDeviceMappingsEbs.prototype, "kmsKeyId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ImageAttributeBlockDeviceMappingsEbs.prototype, "outpostArn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ImageAttributeBlockDeviceMappingsEbs.prototype, "snapshotId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], ImageAttributeBlockDeviceMappingsEbs.prototype, "throughput", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], ImageAttributeBlockDeviceMappingsEbs.prototype, "volumeSize", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ImageAttributeBlockDeviceMappingsEbs.prototype, "volumeType", void 0);
    return ImageAttributeBlockDeviceMappingsEbs;
}(utils_1.SpeakeasyBase));
exports.ImageAttributeBlockDeviceMappingsEbs = ImageAttributeBlockDeviceMappingsEbs;
/**
 * Describes a block device mapping, which defines the EBS volumes and instance store volumes to attach to an instance at launch.
 */
var ImageAttributeBlockDeviceMappings = /** @class */ (function (_super) {
    __extends(ImageAttributeBlockDeviceMappings, _super);
    function ImageAttributeBlockDeviceMappings() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ImageAttributeBlockDeviceMappings.prototype, "deviceName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", ImageAttributeBlockDeviceMappingsEbs)
    ], ImageAttributeBlockDeviceMappings.prototype, "ebs", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ImageAttributeBlockDeviceMappings.prototype, "noDevice", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ImageAttributeBlockDeviceMappings.prototype, "virtualName", void 0);
    return ImageAttributeBlockDeviceMappings;
}(utils_1.SpeakeasyBase));
exports.ImageAttributeBlockDeviceMappings = ImageAttributeBlockDeviceMappings;
/**
 * The boot mode.
 */
var ImageAttributeBootMode = /** @class */ (function (_super) {
    __extends(ImageAttributeBootMode, _super);
    function ImageAttributeBootMode() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ImageAttributeBootMode.prototype, "value", void 0);
    return ImageAttributeBootMode;
}(utils_1.SpeakeasyBase));
exports.ImageAttributeBootMode = ImageAttributeBootMode;
/**
 * A description for the AMI.
 */
var ImageAttributeDescription = /** @class */ (function (_super) {
    __extends(ImageAttributeDescription, _super);
    function ImageAttributeDescription() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ImageAttributeDescription.prototype, "value", void 0);
    return ImageAttributeDescription;
}(utils_1.SpeakeasyBase));
exports.ImageAttributeDescription = ImageAttributeDescription;
/**
 * If <code>v2.0</code>, it indicates that IMDSv2 is specified in the AMI. Instances launched from this AMI will have <code>HttpTokens</code> automatically set to <code>required</code> so that, by default, the instance requires that IMDSv2 is used when requesting instance metadata. In addition, <code>HttpPutResponseHopLimit</code> is set to <code>2</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-IMDS-new-instances.html#configure-IMDS-new-instances-ami-configuration">Configure the AMI</a> in the <i>Amazon EC2 User Guide</i>.
 */
var ImageAttributeImdsSupport = /** @class */ (function (_super) {
    __extends(ImageAttributeImdsSupport, _super);
    function ImageAttributeImdsSupport() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ImageAttributeImdsSupport.prototype, "value", void 0);
    return ImageAttributeImdsSupport;
}(utils_1.SpeakeasyBase));
exports.ImageAttributeImdsSupport = ImageAttributeImdsSupport;
/**
 * The kernel ID.
 */
var ImageAttributeKernelId = /** @class */ (function (_super) {
    __extends(ImageAttributeKernelId, _super);
    function ImageAttributeKernelId() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ImageAttributeKernelId.prototype, "value", void 0);
    return ImageAttributeKernelId;
}(utils_1.SpeakeasyBase));
exports.ImageAttributeKernelId = ImageAttributeKernelId;
/**
 * <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time format</a>, when the AMI was last used to launch an EC2 instance. When the AMI is used to launch an instance, there is a 24-hour delay before that usage is reported.</p> <note> <p> <code>lastLaunchedTime</code> data is available starting April 2017.</p> </note>
 */
var ImageAttributeLastLaunchedTime = /** @class */ (function (_super) {
    __extends(ImageAttributeLastLaunchedTime, _super);
    function ImageAttributeLastLaunchedTime() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ImageAttributeLastLaunchedTime.prototype, "value", void 0);
    return ImageAttributeLastLaunchedTime;
}(utils_1.SpeakeasyBase));
exports.ImageAttributeLastLaunchedTime = ImageAttributeLastLaunchedTime;
/**
 * The name of the group.
 */
var ImageAttributeLaunchPermissionsGroupEnum;
(function (ImageAttributeLaunchPermissionsGroupEnum) {
    ImageAttributeLaunchPermissionsGroupEnum["All"] = "all";
})(ImageAttributeLaunchPermissionsGroupEnum = exports.ImageAttributeLaunchPermissionsGroupEnum || (exports.ImageAttributeLaunchPermissionsGroupEnum = {}));
/**
 * Describes a launch permission.
 */
var ImageAttributeLaunchPermissions = /** @class */ (function (_super) {
    __extends(ImageAttributeLaunchPermissions, _super);
    function ImageAttributeLaunchPermissions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ImageAttributeLaunchPermissions.prototype, "group", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ImageAttributeLaunchPermissions.prototype, "organizationArn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ImageAttributeLaunchPermissions.prototype, "organizationalUnitArn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ImageAttributeLaunchPermissions.prototype, "userId", void 0);
    return ImageAttributeLaunchPermissions;
}(utils_1.SpeakeasyBase));
exports.ImageAttributeLaunchPermissions = ImageAttributeLaunchPermissions;
/**
 * The type of product code.
 */
var ImageAttributeProductCodesProductCodeTypeEnum;
(function (ImageAttributeProductCodesProductCodeTypeEnum) {
    ImageAttributeProductCodesProductCodeTypeEnum["Devpay"] = "devpay";
    ImageAttributeProductCodesProductCodeTypeEnum["Marketplace"] = "marketplace";
})(ImageAttributeProductCodesProductCodeTypeEnum = exports.ImageAttributeProductCodesProductCodeTypeEnum || (exports.ImageAttributeProductCodesProductCodeTypeEnum = {}));
/**
 * Describes a product code.
 */
var ImageAttributeProductCodes = /** @class */ (function (_super) {
    __extends(ImageAttributeProductCodes, _super);
    function ImageAttributeProductCodes() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ImageAttributeProductCodes.prototype, "productCodeId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ImageAttributeProductCodes.prototype, "productCodeType", void 0);
    return ImageAttributeProductCodes;
}(utils_1.SpeakeasyBase));
exports.ImageAttributeProductCodes = ImageAttributeProductCodes;
/**
 * The RAM disk ID.
 */
var ImageAttributeRamdiskId = /** @class */ (function (_super) {
    __extends(ImageAttributeRamdiskId, _super);
    function ImageAttributeRamdiskId() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ImageAttributeRamdiskId.prototype, "value", void 0);
    return ImageAttributeRamdiskId;
}(utils_1.SpeakeasyBase));
exports.ImageAttributeRamdiskId = ImageAttributeRamdiskId;
/**
 * Indicates whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.
 */
var ImageAttributeSriovNetSupport = /** @class */ (function (_super) {
    __extends(ImageAttributeSriovNetSupport, _super);
    function ImageAttributeSriovNetSupport() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ImageAttributeSriovNetSupport.prototype, "value", void 0);
    return ImageAttributeSriovNetSupport;
}(utils_1.SpeakeasyBase));
exports.ImageAttributeSriovNetSupport = ImageAttributeSriovNetSupport;
/**
 * If the image is configured for NitroTPM support, the value is <code>v2.0</code>.
 */
var ImageAttributeTpmSupport = /** @class */ (function (_super) {
    __extends(ImageAttributeTpmSupport, _super);
    function ImageAttributeTpmSupport() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ImageAttributeTpmSupport.prototype, "value", void 0);
    return ImageAttributeTpmSupport;
}(utils_1.SpeakeasyBase));
exports.ImageAttributeTpmSupport = ImageAttributeTpmSupport;
/**
 * Base64 representation of the non-volatile UEFI variable store. To retrieve the UEFI data, use the <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetInstanceUefiData">GetInstanceUefiData</a> command. You can inspect and modify the UEFI data by using the <a href="https://github.com/awslabs/python-uefivars">python-uefivars tool</a> on GitHub. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/uefi-secure-boot.html">UEFI Secure Boot</a> in the <i>Amazon EC2 User Guide</i>.
 */
var ImageAttributeUefiData = /** @class */ (function (_super) {
    __extends(ImageAttributeUefiData, _super);
    function ImageAttributeUefiData() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ImageAttributeUefiData.prototype, "value", void 0);
    return ImageAttributeUefiData;
}(utils_1.SpeakeasyBase));
exports.ImageAttributeUefiData = ImageAttributeUefiData;
/**
 * Describes an image attribute.
 */
var ImageAttribute = /** @class */ (function (_super) {
    __extends(ImageAttribute, _super);
    function ImageAttribute() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: ImageAttributeBlockDeviceMappings }),
        __metadata("design:type", Array)
    ], ImageAttribute.prototype, "blockDeviceMappings", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", ImageAttributeBootMode)
    ], ImageAttribute.prototype, "bootMode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", ImageAttributeDescription)
    ], ImageAttribute.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ImageAttribute.prototype, "imageId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", ImageAttributeImdsSupport)
    ], ImageAttribute.prototype, "imdsSupport", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", ImageAttributeKernelId)
    ], ImageAttribute.prototype, "kernelId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", ImageAttributeLastLaunchedTime)
    ], ImageAttribute.prototype, "lastLaunchedTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: ImageAttributeLaunchPermissions }),
        __metadata("design:type", Array)
    ], ImageAttribute.prototype, "launchPermissions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: ImageAttributeProductCodes }),
        __metadata("design:type", Array)
    ], ImageAttribute.prototype, "productCodes", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", ImageAttributeRamdiskId)
    ], ImageAttribute.prototype, "ramdiskId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", ImageAttributeSriovNetSupport)
    ], ImageAttribute.prototype, "sriovNetSupport", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", ImageAttributeTpmSupport)
    ], ImageAttribute.prototype, "tpmSupport", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", ImageAttributeUefiData)
    ], ImageAttribute.prototype, "uefiData", void 0);
    return ImageAttribute;
}(utils_1.SpeakeasyBase));
exports.ImageAttribute = ImageAttribute;
