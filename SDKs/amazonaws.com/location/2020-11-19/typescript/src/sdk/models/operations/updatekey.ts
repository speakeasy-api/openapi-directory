/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

/**
 * API Restrictions on the allowed actions, resources, and referers for an API key resource.
 */
export class UpdateKeyRequestBodyRestrictions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "AllowActions" })
  allowActions?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "AllowReferers" })
  allowReferers?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "AllowResources" })
  allowResources?: string[];
}

export class UpdateKeyRequestBody extends SpeakeasyBase {
  /**
   * Updates the description for the API key resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Description" })
  description?: string;

  /**
   * Updates the timestamp for when the API key resource will expire in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ExpireTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  expireTime?: Date;

  /**
   * <p>The boolean flag to be included for updating <code>ExpireTime</code> or <code>Restrictions</code> details.</p> <p>Must be set to <code>true</code> to update an API key resource that has been used in the past 7 days.</p> <p> <code>False</code> if force update is not preferred</p> <p>Default value: <code>False</code> </p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ForceUpdate" })
  forceUpdate?: boolean;

  /**
   * Whether the API key should expire. Set to <code>true</code> to set the API key to have no expiration time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "NoExpiry" })
  noExpiry?: boolean;

  /**
   * API Restrictions on the allowed actions, resources, and referers for an API key resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Restrictions" })
  @Type(() => UpdateKeyRequestBodyRestrictions)
  restrictions?: UpdateKeyRequestBodyRestrictions;
}

export class UpdateKeyRequest extends SpeakeasyBase {
  /**
   * The name of the API key resource to update.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=KeyName",
  })
  keyName: string;

  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateKeyRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class UpdateKeyResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateKeyResponse?: shared.UpdateKeyResponse;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
