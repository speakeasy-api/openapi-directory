/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AnywhereConfiguration } from "./anywhereconfiguration";
import { CertificateConfiguration } from "./certificateconfiguration";
import { ComputeTypeEnum } from "./computetypeenum";
import { Ec2InstanceTypeEnum } from "./ec2instancetypeenum";
import { FleetTypeEnum } from "./fleettypeenum";
import { IpPermission } from "./ippermission";
import { LocationConfiguration } from "./locationconfiguration";
import { ProtectionPolicyEnum } from "./protectionpolicyenum";
import { ResourceCreationLimitPolicy } from "./resourcecreationlimitpolicy";
import { RuntimeConfiguration } from "./runtimeconfiguration";
import { Tag } from "./tag";
import { Expose, Type } from "class-transformer";

export class CreateFleetInput extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "AnywhereConfiguration" })
  @Type(() => AnywhereConfiguration)
  anywhereConfiguration?: AnywhereConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "BuildId" })
  buildId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "CertificateConfiguration" })
  @Type(() => CertificateConfiguration)
  certificateConfiguration?: CertificateConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "ComputeType" })
  computeType?: ComputeTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "Description" })
  description?: string;

  @SpeakeasyMetadata({ elemType: IpPermission })
  @Expose({ name: "EC2InboundPermissions" })
  @Type(() => IpPermission)
  ec2InboundPermissions?: IpPermission[];

  @SpeakeasyMetadata()
  @Expose({ name: "EC2InstanceType" })
  ec2InstanceType?: Ec2InstanceTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "FleetType" })
  fleetType?: FleetTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "InstanceRoleArn" })
  instanceRoleArn?: string;

  @SpeakeasyMetadata({ elemType: LocationConfiguration })
  @Expose({ name: "Locations" })
  @Type(() => LocationConfiguration)
  locations?: LocationConfiguration[];

  @SpeakeasyMetadata()
  @Expose({ name: "LogPaths" })
  logPaths?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "MetricGroups" })
  metricGroups?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name: string;

  @SpeakeasyMetadata()
  @Expose({ name: "NewGameSessionProtectionPolicy" })
  newGameSessionProtectionPolicy?: ProtectionPolicyEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "PeerVpcAwsAccountId" })
  peerVpcAwsAccountId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "PeerVpcId" })
  peerVpcId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ResourceCreationLimitPolicy" })
  @Type(() => ResourceCreationLimitPolicy)
  resourceCreationLimitPolicy?: ResourceCreationLimitPolicy;

  @SpeakeasyMetadata()
  @Expose({ name: "RuntimeConfiguration" })
  @Type(() => RuntimeConfiguration)
  runtimeConfiguration?: RuntimeConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "ScriptId" })
  scriptId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ServerLaunchParameters" })
  serverLaunchParameters?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ServerLaunchPath" })
  serverLaunchPath?: string;

  @SpeakeasyMetadata({ elemType: Tag })
  @Expose({ name: "Tags" })
  @Type(() => Tag)
  tags?: Tag[];
}
