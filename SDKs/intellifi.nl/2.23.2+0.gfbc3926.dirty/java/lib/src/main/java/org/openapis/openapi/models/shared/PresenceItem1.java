/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class PresenceItem1 {
    /**
     * String representation of the unique code that this item transmits. By default this is a hexadecimal representation. This number could be so long (&gt; 40 bytes!) that a decimal representation would be useless to generate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code_hex")
    public String codeHex;
    public PresenceItem1 withCodeHex(String codeHex) {
        this.codeHex = codeHex;
        return this;
    }
    
    /**
     * Object containing the new configuration. This will be applied automatically when the values are valid.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("config_request")
    public java.util.Map<String, Object> configRequest;
    public PresenceItem1 withConfigRequest(java.util.Map<String, Object> configRequest) {
        this.configRequest = configRequest;
        return this;
    }
    
    /**
     * The `custom` value is only for your custom references, you may use it to save additional attributes. The custom value is not used in any other place. This field may contain any datatype that you like: null (default), string, integer, boolean, object etc...
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom")
    public Object custom;
    public PresenceItem1 withCustom(Object custom) {
        this.custom = custom;
        return this;
    }
    
    /**
     * Last known geolocation estimate of this object. Not guaranteed to be included in response.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("geo_coords")
    public GeoCoordsReadOnly geoCoords;
    public PresenceItem1 withGeoCoords(GeoCoordsReadOnly geoCoords) {
        this.geoCoords = geoCoords;
        return this;
    }
    
    /**
     * Unique identifier for resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public PresenceItem1 withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Is this item actively detected in one of the zones at this moment? True when it is, false if it's not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_present")
    public Boolean isPresent;
    public PresenceItem1 withIsPresent(Boolean isPresent) {
        this.isPresent = isPresent;
        return this;
    }
    
    /**
     * A name or a label for this resource. This is used in the user interface, may be empty.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("label")
    public String label;
    public PresenceItem1 withLabel(String label) {
        this.label = label;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    public Location location;
    public PresenceItem1 withLocation(Location location) {
        this.location = location;
        return this;
    }
    
    /**
     * Instruction for the location engine to forcibly localize the item at the specified location id as soon as possible. Cleared automatically.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location_request")
    public String locationRequest;
    public PresenceItem1 withLocationRequest(String locationRequest) {
        this.locationRequest = locationRequest;
        return this;
    }
    
    /**
     * Object of searchable metadata for this resource. Can be freely used to store metadata properties.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    public java.util.Map<String, Object> metadata;
    public PresenceItem1 withMetadata(java.util.Map<String, Object> metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * How many times this item moved since it's created on this server. Note that it is likely that not all moved events are available in the events (they are deleted after a configurable number of time). This field is never decreases. It gives a good indication of the usage of this item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("move_count")
    public Long moveCount;
    public PresenceItem1 withMoveCount(Long moveCount) {
        this.moveCount = moveCount;
        return this;
    }
    
    /**
     * Type of protocol that was used to decode this item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("protocol")
    public ItemProtocolEnum protocol;
    public PresenceItem1 withProtocol(ItemProtocolEnum protocol) {
        this.protocol = protocol;
        return this;
    }
    
    /**
     * List of set ids
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sets")
    public String[] sets;
    public PresenceItem1 withSets(String[] sets) {
        this.sets = sets;
        return this;
    }
    
    /**
     * Type of technology that was used to detect this item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("technology")
    public TechnologyEnum technology;
    public PresenceItem1 withTechnology(TechnologyEnum technology) {
        this.technology = technology;
        return this;
    }
    
    /**
     * [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted string for when this resource was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("time_created")
    public String timeCreated;
    public PresenceItem1 withTimeCreated(String timeCreated) {
        this.timeCreated = timeCreated;
        return this;
    }
    
    /**
     * Last time the item was present.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("time_last_present")
    public String timeLastPresent;
    public PresenceItem1 withTimeLastPresent(String timeLastPresent) {
        this.timeLastPresent = timeLastPresent;
        return this;
    }
    
    /**
     * Last time this item moved. This is the last time that the location for this item was changed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("time_moved")
    public String timeMoved;
    public PresenceItem1 withTimeMoved(String timeMoved) {
        this.timeMoved = timeMoved;
        return this;
    }
    
    /**
     * [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted string for when this resource was updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("time_updated")
    public String timeUpdated;
    public PresenceItem1 withTimeUpdated(String timeUpdated) {
        this.timeUpdated = timeUpdated;
        return this;
    }
    
    /**
     * Type of item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public ItemTypeEnum type;
    public PresenceItem1 withType(ItemTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * Url to the individual resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;
    public PresenceItem1 withUrl(String url) {
        this.url = url;
        return this;
    }
    
}
