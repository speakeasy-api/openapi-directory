"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class GETModifyVpcPeeringConnectionOptionsAccepterPeeringConnectionOptions:
    r"""<note> <p>We are retiring EC2-Classic. We recommend that you migrate from EC2-Classic to a VPC. For more information, see <a href=\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-migrate.html\\">Migrate from EC2-Classic to a VPC</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </note> <p>The VPC peering connection options.</p>"""
    
    allow_dns_resolution_from_remote_vpc: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'AllowDnsResolutionFromRemoteVpc' }})  
    allow_egress_from_local_classic_link_to_remote_vpc: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'AllowEgressFromLocalClassicLinkToRemoteVpc' }})  
    allow_egress_from_local_vpc_to_remote_classic_link: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'AllowEgressFromLocalVpcToRemoteClassicLink' }})  
    
class GETModifyVpcPeeringConnectionOptionsActionEnum(str, Enum):
    MODIFY_VPC_PEERING_CONNECTION_OPTIONS = 'ModifyVpcPeeringConnectionOptions'


@dataclasses.dataclass
class GETModifyVpcPeeringConnectionOptionsRequesterPeeringConnectionOptions:
    r"""<note> <p>We are retiring EC2-Classic. We recommend that you migrate from EC2-Classic to a VPC. For more information, see <a href=\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-migrate.html\\">Migrate from EC2-Classic to a VPC</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </note> <p>The VPC peering connection options.</p>"""
    
    allow_dns_resolution_from_remote_vpc: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'AllowDnsResolutionFromRemoteVpc' }})  
    allow_egress_from_local_classic_link_to_remote_vpc: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'AllowEgressFromLocalClassicLinkToRemoteVpc' }})  
    allow_egress_from_local_vpc_to_remote_classic_link: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'AllowEgressFromLocalVpcToRemoteClassicLink' }})  
    
class GETModifyVpcPeeringConnectionOptionsVersionEnum(str, Enum):
    TWO_THOUSAND_AND_SIXTEEN_11_15 = '2016-11-15'


@dataclasses.dataclass
class GETModifyVpcPeeringConnectionOptionsRequest:
    
    action: GETModifyVpcPeeringConnectionOptionsActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    version: GETModifyVpcPeeringConnectionOptionsVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    vpc_peering_connection_id: str = dataclasses.field(metadata={'query_param': { 'field_name': 'VpcPeeringConnectionId', 'style': 'form', 'explode': True }})
    r"""The ID of the VPC peering connection."""  
    accepter_peering_connection_options: Optional[GETModifyVpcPeeringConnectionOptionsAccepterPeeringConnectionOptions] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'AccepterPeeringConnectionOptions', 'style': 'form', 'explode': True }})
    r"""The VPC peering connection options for the accepter VPC."""  
    dry_run: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DryRun', 'style': 'form', 'explode': True }})
    r"""Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>."""  
    requester_peering_connection_options: Optional[GETModifyVpcPeeringConnectionOptionsRequesterPeeringConnectionOptions] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'RequesterPeeringConnectionOptions', 'style': 'form', 'explode': True }})
    r"""The VPC peering connection options for the requester VPC."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETModifyVpcPeeringConnectionOptionsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    