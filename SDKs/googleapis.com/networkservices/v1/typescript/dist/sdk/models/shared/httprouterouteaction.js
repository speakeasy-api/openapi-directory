"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpRouteRouteAction = void 0;
var utils_1 = require("../../../internal/utils");
var httproutecorspolicy_1 = require("./httproutecorspolicy");
var httproutedestination_1 = require("./httproutedestination");
var httproutefaultinjectionpolicy_1 = require("./httproutefaultinjectionpolicy");
var httprouteheadermodifier_1 = require("./httprouteheadermodifier");
var httprouteredirect_1 = require("./httprouteredirect");
var httprouterequestmirrorpolicy_1 = require("./httprouterequestmirrorpolicy");
var httprouteretrypolicy_1 = require("./httprouteretrypolicy");
var httprouteurlrewrite_1 = require("./httprouteurlrewrite");
var class_transformer_1 = require("class-transformer");
/**
 * The specifications for routing traffic and applying associated policies.
 */
var HttpRouteRouteAction = /** @class */ (function (_super) {
    __extends(HttpRouteRouteAction, _super);
    function HttpRouteRouteAction() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "corsPolicy" }),
        (0, class_transformer_1.Type)(function () { return httproutecorspolicy_1.HttpRouteCorsPolicy; }),
        __metadata("design:type", httproutecorspolicy_1.HttpRouteCorsPolicy)
    ], HttpRouteRouteAction.prototype, "corsPolicy", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: httproutedestination_1.HttpRouteDestination }),
        (0, class_transformer_1.Expose)({ name: "destinations" }),
        (0, class_transformer_1.Type)(function () { return httproutedestination_1.HttpRouteDestination; }),
        __metadata("design:type", Array)
    ], HttpRouteRouteAction.prototype, "destinations", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "faultInjectionPolicy" }),
        (0, class_transformer_1.Type)(function () { return httproutefaultinjectionpolicy_1.HttpRouteFaultInjectionPolicy; }),
        __metadata("design:type", httproutefaultinjectionpolicy_1.HttpRouteFaultInjectionPolicy)
    ], HttpRouteRouteAction.prototype, "faultInjectionPolicy", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "redirect" }),
        (0, class_transformer_1.Type)(function () { return httprouteredirect_1.HttpRouteRedirect; }),
        __metadata("design:type", httprouteredirect_1.HttpRouteRedirect)
    ], HttpRouteRouteAction.prototype, "redirect", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "requestHeaderModifier" }),
        (0, class_transformer_1.Type)(function () { return httprouteheadermodifier_1.HttpRouteHeaderModifier; }),
        __metadata("design:type", httprouteheadermodifier_1.HttpRouteHeaderModifier)
    ], HttpRouteRouteAction.prototype, "requestHeaderModifier", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "requestMirrorPolicy" }),
        (0, class_transformer_1.Type)(function () { return httprouterequestmirrorpolicy_1.HttpRouteRequestMirrorPolicy; }),
        __metadata("design:type", httprouterequestmirrorpolicy_1.HttpRouteRequestMirrorPolicy)
    ], HttpRouteRouteAction.prototype, "requestMirrorPolicy", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "responseHeaderModifier" }),
        (0, class_transformer_1.Type)(function () { return httprouteheadermodifier_1.HttpRouteHeaderModifier; }),
        __metadata("design:type", httprouteheadermodifier_1.HttpRouteHeaderModifier)
    ], HttpRouteRouteAction.prototype, "responseHeaderModifier", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "retryPolicy" }),
        (0, class_transformer_1.Type)(function () { return httprouteretrypolicy_1.HttpRouteRetryPolicy; }),
        __metadata("design:type", httprouteretrypolicy_1.HttpRouteRetryPolicy)
    ], HttpRouteRouteAction.prototype, "retryPolicy", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "timeout" }),
        __metadata("design:type", String)
    ], HttpRouteRouteAction.prototype, "timeout", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "urlRewrite" }),
        (0, class_transformer_1.Type)(function () { return httprouteurlrewrite_1.HttpRouteURLRewrite; }),
        __metadata("design:type", httprouteurlrewrite_1.HttpRouteURLRewrite)
    ], HttpRouteRouteAction.prototype, "urlRewrite", void 0);
    return HttpRouteRouteAction;
}(utils_1.SpeakeasyBase));
exports.HttpRouteRouteAction = HttpRouteRouteAction;
