/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;

public class Customers {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Customers(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Generate summary of app installation requests.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ChromemanagementCustomersAppsCountChromeAppRequestsResponse chromemanagementCustomersAppsCountChromeAppRequests(org.openapis.openapi.models.operations.ChromemanagementCustomersAppsCountChromeAppRequestsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ChromemanagementCustomersAppsCountChromeAppRequestsPathParams.class, baseUrl, "/v1/{customer}/apps:countChromeAppRequests", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ChromemanagementCustomersAppsCountChromeAppRequestsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ChromemanagementCustomersAppsCountChromeAppRequestsResponse res = new org.openapis.openapi.models.operations.ChromemanagementCustomersAppsCountChromeAppRequestsResponse() {{
            googleChromeManagementV1CountChromeAppRequestsResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleChromeManagementV1CountChromeAppRequestsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleChromeManagementV1CountChromeAppRequestsResponse.class);
                res.googleChromeManagementV1CountChromeAppRequestsResponse = out;
            }
        }

        return res;
    }

    /**
     * Count of Chrome Browsers that have been recently enrolled, have new policy to be synced, or have no recent activity.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountChromeBrowsersNeedingAttentionResponse chromemanagementCustomersReportsCountChromeBrowsersNeedingAttention(org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountChromeBrowsersNeedingAttentionRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountChromeBrowsersNeedingAttentionPathParams.class, baseUrl, "/v1/{customer}/reports:countChromeBrowsersNeedingAttention", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountChromeBrowsersNeedingAttentionQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountChromeBrowsersNeedingAttentionResponse res = new org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountChromeBrowsersNeedingAttentionResponse() {{
            googleChromeManagementV1CountChromeBrowsersNeedingAttentionResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleChromeManagementV1CountChromeBrowsersNeedingAttentionResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleChromeManagementV1CountChromeBrowsersNeedingAttentionResponse.class);
                res.googleChromeManagementV1CountChromeBrowsersNeedingAttentionResponse = out;
            }
        }

        return res;
    }

    /**
     * Generate report of the number of devices expiring in each month of the selected time frame. Devices are grouped by auto update expiration date and model. Further information can be found [here](https://support.google.com/chrome/a/answer/10564947).
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountChromeDevicesReachingAutoExpirationDateResponse chromemanagementCustomersReportsCountChromeDevicesReachingAutoExpirationDate(org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountChromeDevicesReachingAutoExpirationDateRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountChromeDevicesReachingAutoExpirationDatePathParams.class, baseUrl, "/v1/{customer}/reports:countChromeDevicesReachingAutoExpirationDate", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountChromeDevicesReachingAutoExpirationDateQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountChromeDevicesReachingAutoExpirationDateResponse res = new org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountChromeDevicesReachingAutoExpirationDateResponse() {{
            googleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse.class);
                res.googleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse = out;
            }
        }

        return res;
    }

    /**
     * Counts of ChromeOS devices that have not synced policies or have lacked user activity in the past 28 days, are out of date, or are not complaint. Further information can be found here https://support.google.com/chrome/a/answer/10564947
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountChromeDevicesThatNeedAttentionResponse chromemanagementCustomersReportsCountChromeDevicesThatNeedAttention(org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountChromeDevicesThatNeedAttentionRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountChromeDevicesThatNeedAttentionPathParams.class, baseUrl, "/v1/{customer}/reports:countChromeDevicesThatNeedAttention", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountChromeDevicesThatNeedAttentionQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountChromeDevicesThatNeedAttentionResponse res = new org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountChromeDevicesThatNeedAttentionResponse() {{
            googleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse.class);
                res.googleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse = out;
            }
        }

        return res;
    }

    /**
     * Counts of devices with a specific hardware specification from the requested hardware type (for example model name, processor type). Further information can be found here https://support.google.com/chrome/a/answer/10564947
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountChromeHardwareFleetDevicesResponse chromemanagementCustomersReportsCountChromeHardwareFleetDevices(org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountChromeHardwareFleetDevicesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountChromeHardwareFleetDevicesPathParams.class, baseUrl, "/v1/{customer}/reports:countChromeHardwareFleetDevices", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountChromeHardwareFleetDevicesQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountChromeHardwareFleetDevicesResponse res = new org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountChromeHardwareFleetDevicesResponse() {{
            googleChromeManagementV1CountChromeHardwareFleetDevicesResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse.class);
                res.googleChromeManagementV1CountChromeHardwareFleetDevicesResponse = out;
            }
        }

        return res;
    }

    /**
     * Generate report of installed Chrome versions.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountChromeVersionsResponse chromemanagementCustomersReportsCountChromeVersions(org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountChromeVersionsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountChromeVersionsPathParams.class, baseUrl, "/v1/{customer}/reports:countChromeVersions", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountChromeVersionsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountChromeVersionsResponse res = new org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountChromeVersionsResponse() {{
            googleChromeManagementV1CountChromeVersionsResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleChromeManagementV1CountChromeVersionsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleChromeManagementV1CountChromeVersionsResponse.class);
                res.googleChromeManagementV1CountChromeVersionsResponse = out;
            }
        }

        return res;
    }

    /**
     * Generate report of app installations.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountInstalledAppsResponse chromemanagementCustomersReportsCountInstalledApps(org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountInstalledAppsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountInstalledAppsPathParams.class, baseUrl, "/v1/{customer}/reports:countInstalledApps", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountInstalledAppsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountInstalledAppsResponse res = new org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountInstalledAppsResponse() {{
            googleChromeManagementV1CountInstalledAppsResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleChromeManagementV1CountInstalledAppsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleChromeManagementV1CountInstalledAppsResponse.class);
                res.googleChromeManagementV1CountInstalledAppsResponse = out;
            }
        }

        return res;
    }

    /**
     * Get a summary of printing done by each printer.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountPrintJobsByPrinterResponse chromemanagementCustomersReportsCountPrintJobsByPrinter(org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountPrintJobsByPrinterRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountPrintJobsByPrinterPathParams.class, baseUrl, "/v1/{customer}/reports:countPrintJobsByPrinter", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountPrintJobsByPrinterQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountPrintJobsByPrinterResponse res = new org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountPrintJobsByPrinterResponse() {{
            googleChromeManagementV1CountPrintJobsByPrinterResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleChromeManagementV1CountPrintJobsByPrinterResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleChromeManagementV1CountPrintJobsByPrinterResponse.class);
                res.googleChromeManagementV1CountPrintJobsByPrinterResponse = out;
            }
        }

        return res;
    }

    /**
     * Get a summary of printing done by each user.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountPrintJobsByUserResponse chromemanagementCustomersReportsCountPrintJobsByUser(org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountPrintJobsByUserRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountPrintJobsByUserPathParams.class, baseUrl, "/v1/{customer}/reports:countPrintJobsByUser", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountPrintJobsByUserQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountPrintJobsByUserResponse res = new org.openapis.openapi.models.operations.ChromemanagementCustomersReportsCountPrintJobsByUserResponse() {{
            googleChromeManagementV1CountPrintJobsByUserResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleChromeManagementV1CountPrintJobsByUserResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleChromeManagementV1CountPrintJobsByUserResponse.class);
                res.googleChromeManagementV1CountPrintJobsByUserResponse = out;
            }
        }

        return res;
    }

    /**
     * Generate report of managed Chrome browser devices that have a specified app installed.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ChromemanagementCustomersReportsFindInstalledAppDevicesResponse chromemanagementCustomersReportsFindInstalledAppDevices(org.openapis.openapi.models.operations.ChromemanagementCustomersReportsFindInstalledAppDevicesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ChromemanagementCustomersReportsFindInstalledAppDevicesPathParams.class, baseUrl, "/v1/{customer}/reports:findInstalledAppDevices", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ChromemanagementCustomersReportsFindInstalledAppDevicesQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ChromemanagementCustomersReportsFindInstalledAppDevicesResponse res = new org.openapis.openapi.models.operations.ChromemanagementCustomersReportsFindInstalledAppDevicesResponse() {{
            googleChromeManagementV1FindInstalledAppDevicesResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleChromeManagementV1FindInstalledAppDevicesResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleChromeManagementV1FindInstalledAppDevicesResponse.class);
                res.googleChromeManagementV1FindInstalledAppDevicesResponse = out;
            }
        }

        return res;
    }

    /**
     * List all telemetry devices.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ChromemanagementCustomersTelemetryDevicesListResponse chromemanagementCustomersTelemetryDevicesList(org.openapis.openapi.models.operations.ChromemanagementCustomersTelemetryDevicesListRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ChromemanagementCustomersTelemetryDevicesListPathParams.class, baseUrl, "/v1/{parent}/telemetry/devices", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ChromemanagementCustomersTelemetryDevicesListQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ChromemanagementCustomersTelemetryDevicesListResponse res = new org.openapis.openapi.models.operations.ChromemanagementCustomersTelemetryDevicesListResponse() {{
            googleChromeManagementV1ListTelemetryDevicesResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleChromeManagementV1ListTelemetryDevicesResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleChromeManagementV1ListTelemetryDevicesResponse.class);
                res.googleChromeManagementV1ListTelemetryDevicesResponse = out;
            }
        }

        return res;
    }

    /**
     * List telemetry events.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ChromemanagementCustomersTelemetryEventsListResponse chromemanagementCustomersTelemetryEventsList(org.openapis.openapi.models.operations.ChromemanagementCustomersTelemetryEventsListRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ChromemanagementCustomersTelemetryEventsListPathParams.class, baseUrl, "/v1/{parent}/telemetry/events", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ChromemanagementCustomersTelemetryEventsListQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ChromemanagementCustomersTelemetryEventsListResponse res = new org.openapis.openapi.models.operations.ChromemanagementCustomersTelemetryEventsListResponse() {{
            googleChromeManagementV1ListTelemetryEventsResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleChromeManagementV1ListTelemetryEventsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleChromeManagementV1ListTelemetryEventsResponse.class);
                res.googleChromeManagementV1ListTelemetryEventsResponse = out;
            }
        }

        return res;
    }

    /**
     * Get telemetry user.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ChromemanagementCustomersTelemetryUsersGetResponse chromemanagementCustomersTelemetryUsersGet(org.openapis.openapi.models.operations.ChromemanagementCustomersTelemetryUsersGetRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ChromemanagementCustomersTelemetryUsersGetPathParams.class, baseUrl, "/v1/{name}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ChromemanagementCustomersTelemetryUsersGetQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ChromemanagementCustomersTelemetryUsersGetResponse res = new org.openapis.openapi.models.operations.ChromemanagementCustomersTelemetryUsersGetResponse() {{
            googleChromeManagementV1TelemetryUser = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleChromeManagementV1TelemetryUser out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleChromeManagementV1TelemetryUser.class);
                res.googleChromeManagementV1TelemetryUser = out;
            }
        }

        return res;
    }

    /**
     * List all telemetry users.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ChromemanagementCustomersTelemetryUsersListResponse chromemanagementCustomersTelemetryUsersList(org.openapis.openapi.models.operations.ChromemanagementCustomersTelemetryUsersListRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ChromemanagementCustomersTelemetryUsersListPathParams.class, baseUrl, "/v1/{parent}/telemetry/users", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ChromemanagementCustomersTelemetryUsersListQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ChromemanagementCustomersTelemetryUsersListResponse res = new org.openapis.openapi.models.operations.ChromemanagementCustomersTelemetryUsersListResponse() {{
            googleChromeManagementV1ListTelemetryUsersResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleChromeManagementV1ListTelemetryUsersResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleChromeManagementV1ListTelemetryUsersResponse.class);
                res.googleChromeManagementV1ListTelemetryUsersResponse = out;
            }
        }

        return res;
    }
}