/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Represents all of the information that is required to create a component.
 */
export class CreateComponentRequestBodyComponentToCreate extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: shared.ComponentBindingPropertiesValue })
  @Expose({ name: "bindingProperties" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, shared.ComponentBindingPropertiesValue> = {};
      for (const key in value) {
        obj[key] = objectToClass(
          value[key],
          shared.ComponentBindingPropertiesValue
        );
      }
      return obj;
    },
    { toClassOnly: true }
  )
  bindingProperties?: Record<string, shared.ComponentBindingPropertiesValue>;

  @SpeakeasyMetadata({ elemType: shared.ComponentChild })
  @Expose({ name: "children" })
  @Type(() => shared.ComponentChild)
  children?: shared.ComponentChild[];

  @SpeakeasyMetadata({ elemType: shared.ComponentDataConfiguration })
  @Expose({ name: "collectionProperties" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, shared.ComponentDataConfiguration> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], shared.ComponentDataConfiguration);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  collectionProperties?: Record<string, shared.ComponentDataConfiguration>;

  @SpeakeasyMetadata()
  @Expose({ name: "componentType" })
  componentType?: string;

  @SpeakeasyMetadata({ elemType: shared.ComponentEvent })
  @Expose({ name: "events" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, shared.ComponentEvent> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], shared.ComponentEvent);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  events?: Record<string, shared.ComponentEvent>;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "overrides" })
  overrides?: Record<string, Record<string, string>>;

  /**
   * Describes the component's properties.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "properties" })
  properties?: any;

  @SpeakeasyMetadata()
  @Expose({ name: "schemaVersion" })
  schemaVersion?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "sourceId" })
  sourceId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;

  @SpeakeasyMetadata({ elemType: shared.ComponentVariant })
  @Expose({ name: "variants" })
  @Type(() => shared.ComponentVariant)
  variants?: shared.ComponentVariant[];
}

export class CreateComponentRequestBody extends SpeakeasyBase {
  /**
   * Represents all of the information that is required to create a component.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "componentToCreate" })
  @Type(() => CreateComponentRequestBodyComponentToCreate)
  componentToCreate: CreateComponentRequestBodyComponentToCreate;
}

export class CreateComponentRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateComponentRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The unique ID of the Amplify app to associate with the component.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=appId",
  })
  appId: string;

  /**
   * The unique client token.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=clientToken",
  })
  clientToken?: string;

  /**
   * The name of the backend environment that is a part of the Amplify app.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=environmentName",
  })
  environmentName: string;
}

export class CreateComponentResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createComponentResponse?: shared.CreateComponentResponse;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * InvalidParameterException
   */
  @SpeakeasyMetadata()
  invalidParameterException?: any;

  /**
   * ResourceConflictException
   */
  @SpeakeasyMetadata()
  resourceConflictException?: any;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
