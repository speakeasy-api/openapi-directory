"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = exports.ServerList = void 0;
var utils = __importStar(require("../internal/utils"));
var operations = __importStar(require("./models/operations"));
var shared = __importStar(require("./models/shared"));
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = ["https://verify.twilio.com"];
/**
 * This is the public Twilio REST API.
 */
var SDK = /** @class */ (function () {
    function SDK(props) {
        var _a, _b;
        this._language = "typescript";
        this._sdkVersion = "0.0.1";
        this._genVersion = "internal";
        this._serverURL = (_a = props === null || props === void 0 ? void 0 : props.serverURL) !== null && _a !== void 0 ? _a : exports.ServerList[0];
        this._defaultClient =
            (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create({ baseURL: this._serverURL });
        this._securityClient = this._defaultClient;
    }
    /**
     * Create a new enrollment Access Token for the Entity
     */
    SDK.prototype.createAccessToken = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateAccessTokenRequest(req);
        }
        var baseURL = operations.CreateAccessTokenServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Services/{ServiceSid}/AccessTokens", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateAccessTokenSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateAccessTokenResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.verifyV2ServiceAccessToken = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.VerifyV2ServiceAccessToken);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Create a new Bucket for a Rate Limit
     */
    SDK.prototype.createBucket = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateBucketRequest(req);
        }
        var baseURL = operations.CreateBucketServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Services/{ServiceSid}/RateLimits/{RateLimitSid}/Buckets", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateBucketSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateBucketResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.verifyV2ServiceRateLimitBucket = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.VerifyV2ServiceRateLimitBucket);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Create a new Challenge for the Factor
     */
    SDK.prototype.createChallenge = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateChallengeRequest(req);
        }
        var baseURL = operations.CreateChallengeServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Services/{ServiceSid}/Entities/{Identity}/Challenges", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateChallengeSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateChallengeResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.verifyV2ServiceEntityChallenge = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.VerifyV2ServiceEntityChallenge);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Create a new Entity for the Service
     */
    SDK.prototype.createEntity = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateEntityRequest(req);
        }
        var baseURL = operations.CreateEntityServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Services/{ServiceSid}/Entities", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateEntitySecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateEntityResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.verifyV2ServiceEntity = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.VerifyV2ServiceEntity);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Create a new MessagingConfiguration for a service.
     */
    SDK.prototype.createMessagingConfiguration = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateMessagingConfigurationRequest(req);
        }
        var baseURL = operations.CreateMessagingConfigurationServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Services/{ServiceSid}/MessagingConfigurations", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateMessagingConfigurationSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateMessagingConfigurationResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.verifyV2ServiceMessagingConfiguration = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.VerifyV2ServiceMessagingConfiguration);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Create a new Factor for the Entity
     */
    SDK.prototype.createNewFactor = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateNewFactorRequest(req);
        }
        var baseURL = operations.CreateNewFactorServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Services/{ServiceSid}/Entities/{Identity}/Factors", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateNewFactorSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateNewFactorResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.verifyV2ServiceEntityNewFactor = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.VerifyV2ServiceEntityNewFactor);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Create a new Notification for the corresponding Challenge
     */
    SDK.prototype.createNotification = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateNotificationRequest(req);
        }
        var baseURL = operations.CreateNotificationServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Services/{ServiceSid}/Entities/{Identity}/Challenges/{ChallengeSid}/Notifications", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateNotificationSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateNotificationResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.verifyV2ServiceEntityChallengeNotification =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.VerifyV2ServiceEntityChallengeNotification);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Create a new Rate Limit for a Service
     */
    SDK.prototype.createRateLimit = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateRateLimitRequest(req);
        }
        var baseURL = operations.CreateRateLimitServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Services/{ServiceSid}/RateLimits", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateRateLimitSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateRateLimitResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.verifyV2ServiceRateLimit = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.VerifyV2ServiceRateLimit);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Add a new phone number to SafeList.
     */
    SDK.prototype.createSafelist = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateSafelistCreateSafelistRequest(req);
        }
        var baseURL = operations.CreateSafelistServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = baseURL.replace(/\/$/, "") + "/v2/SafeList/Numbers";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "request", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateSafelistSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateSafelistResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.verifyV2Safelist = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.VerifyV2Safelist);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Create a new Verification Service.
     */
    SDK.prototype.createService = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateServiceCreateServiceRequest(req);
        }
        var baseURL = operations.CreateServiceServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = baseURL.replace(/\/$/, "") + "/v2/Services";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "request", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateServiceSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateServiceResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.verifyV2Service = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.VerifyV2Service);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Create a new Verification using a Service
     */
    SDK.prototype.createVerification = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateVerificationRequest(req);
        }
        var baseURL = operations.CreateVerificationServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Services/{ServiceSid}/Verifications", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateVerificationSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateVerificationResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.verifyV2ServiceVerification = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.VerifyV2ServiceVerification);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * challenge a specific Verification Check.
     */
    SDK.prototype.createVerificationCheck = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateVerificationCheckRequest(req);
        }
        var baseURL = operations.CreateVerificationCheckServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Services/{ServiceSid}/VerificationCheck", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateVerificationCheckSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateVerificationCheckResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.verifyV2ServiceVerificationCheck = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.VerifyV2ServiceVerificationCheck);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Create a new Webhook for the Service
     */
    SDK.prototype.createWebhook = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateWebhookRequest(req);
        }
        var baseURL = operations.CreateWebhookServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Services/{ServiceSid}/Webhooks", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateWebhookSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateWebhookResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.verifyV2ServiceWebhook = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.VerifyV2ServiceWebhook);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Delete a specific Bucket.
     */
    SDK.prototype.deleteBucket = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteBucketRequest(req);
        }
        var baseURL = operations.DeleteBucketServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Services/{ServiceSid}/RateLimits/{RateLimitSid}/Buckets/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.DeleteBucketSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DeleteBucketResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 204:
                    break;
            }
            return res;
        });
    };
    /**
     * Delete a specific Entity.
     */
    SDK.prototype.deleteEntity = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteEntityRequest(req);
        }
        var baseURL = operations.DeleteEntityServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Services/{ServiceSid}/Entities/{Identity}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.DeleteEntitySecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DeleteEntityResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 204:
                    break;
            }
            return res;
        });
    };
    /**
     * Delete a specific Factor.
     */
    SDK.prototype.deleteFactor = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteFactorRequest(req);
        }
        var baseURL = operations.DeleteFactorServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Services/{ServiceSid}/Entities/{Identity}/Factors/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.DeleteFactorSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DeleteFactorResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 204:
                    break;
            }
            return res;
        });
    };
    /**
     * Delete a specific MessagingConfiguration.
     */
    SDK.prototype.deleteMessagingConfiguration = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteMessagingConfigurationRequest(req);
        }
        var baseURL = operations.DeleteMessagingConfigurationServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Services/{ServiceSid}/MessagingConfigurations/{Country}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.DeleteMessagingConfigurationSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DeleteMessagingConfigurationResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 204:
                    break;
            }
            return res;
        });
    };
    /**
     * Delete a specific Rate Limit.
     */
    SDK.prototype.deleteRateLimit = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteRateLimitRequest(req);
        }
        var baseURL = operations.DeleteRateLimitServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Services/{ServiceSid}/RateLimits/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.DeleteRateLimitSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DeleteRateLimitResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 204:
                    break;
            }
            return res;
        });
    };
    /**
     * Remove a phone number from SafeList.
     */
    SDK.prototype.deleteSafelist = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteSafelistRequest(req);
        }
        var baseURL = operations.DeleteSafelistServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/SafeList/Numbers/{PhoneNumber}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.DeleteSafelistSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DeleteSafelistResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 204:
                    break;
            }
            return res;
        });
    };
    /**
     * Delete a specific Verification Service Instance.
     */
    SDK.prototype.deleteService = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteServiceRequest(req);
        }
        var baseURL = operations.DeleteServiceServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Services/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.DeleteServiceSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DeleteServiceResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 204:
                    break;
            }
            return res;
        });
    };
    /**
     * Delete a specific Webhook.
     */
    SDK.prototype.deleteWebhook = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteWebhookRequest(req);
        }
        var baseURL = operations.DeleteWebhookServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Services/{ServiceSid}/Webhooks/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.DeleteWebhookSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DeleteWebhookResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 204:
                    break;
            }
            return res;
        });
    };
    /**
     * Fetch an Access Token for the Entity
     */
    SDK.prototype.fetchAccessToken = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchAccessTokenRequest(req);
        }
        var baseURL = operations.FetchAccessTokenServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Services/{ServiceSid}/AccessTokens/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchAccessTokenSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchAccessTokenResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.verifyV2ServiceAccessToken = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.VerifyV2ServiceAccessToken);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Fetch a specific Bucket.
     */
    SDK.prototype.fetchBucket = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchBucketRequest(req);
        }
        var baseURL = operations.FetchBucketServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Services/{ServiceSid}/RateLimits/{RateLimitSid}/Buckets/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchBucketSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchBucketResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.verifyV2ServiceRateLimitBucket = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.VerifyV2ServiceRateLimitBucket);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Fetch a specific Challenge.
     */
    SDK.prototype.fetchChallenge = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchChallengeRequest(req);
        }
        var baseURL = operations.FetchChallengeServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Services/{ServiceSid}/Entities/{Identity}/Challenges/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchChallengeSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchChallengeResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.verifyV2ServiceEntityChallenge = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.VerifyV2ServiceEntityChallenge);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Fetch a specific Entity.
     */
    SDK.prototype.fetchEntity = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchEntityRequest(req);
        }
        var baseURL = operations.FetchEntityServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Services/{ServiceSid}/Entities/{Identity}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchEntitySecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchEntityResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.verifyV2ServiceEntity = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.VerifyV2ServiceEntity);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Fetch a specific Factor.
     */
    SDK.prototype.fetchFactor = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchFactorRequest(req);
        }
        var baseURL = operations.FetchFactorServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Services/{ServiceSid}/Entities/{Identity}/Factors/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchFactorSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchFactorResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.verifyV2ServiceEntityFactor = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.VerifyV2ServiceEntityFactor);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Fetch the forms for a specific Form Type.
     */
    SDK.prototype.fetchForm = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchFormRequest(req);
        }
        var baseURL = operations.FetchFormServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Forms/{FormType}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchFormSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchFormResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.verifyV2Form = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.VerifyV2Form);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Fetch a specific MessagingConfiguration.
     */
    SDK.prototype.fetchMessagingConfiguration = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchMessagingConfigurationRequest(req);
        }
        var baseURL = operations.FetchMessagingConfigurationServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Services/{ServiceSid}/MessagingConfigurations/{Country}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchMessagingConfigurationSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchMessagingConfigurationResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.verifyV2ServiceMessagingConfiguration = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.VerifyV2ServiceMessagingConfiguration);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Fetch a specific Rate Limit.
     */
    SDK.prototype.fetchRateLimit = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchRateLimitRequest(req);
        }
        var baseURL = operations.FetchRateLimitServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Services/{ServiceSid}/RateLimits/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchRateLimitSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchRateLimitResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.verifyV2ServiceRateLimit = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.VerifyV2ServiceRateLimit);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Check if a phone number exists in SafeList.
     */
    SDK.prototype.fetchSafelist = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchSafelistRequest(req);
        }
        var baseURL = operations.FetchSafelistServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/SafeList/Numbers/{PhoneNumber}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchSafelistSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchSafelistResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.verifyV2Safelist = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.VerifyV2Safelist);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Fetch specific Verification Service Instance.
     */
    SDK.prototype.fetchService = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchServiceRequest(req);
        }
        var baseURL = operations.FetchServiceServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Services/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchServiceSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchServiceResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.verifyV2Service = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.VerifyV2Service);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Fetch a specific Verification
     */
    SDK.prototype.fetchVerification = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchVerificationRequest(req);
        }
        var baseURL = operations.FetchVerificationServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Services/{ServiceSid}/Verifications/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchVerificationSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchVerificationResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.verifyV2ServiceVerification = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.VerifyV2ServiceVerification);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Fetch a specific verification attempt.
     */
    SDK.prototype.fetchVerificationAttempt = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchVerificationAttemptRequest(req);
        }
        var baseURL = operations.FetchVerificationAttemptServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Attempts/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchVerificationAttemptSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchVerificationAttemptResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.verifyV2VerificationAttempt = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.VerifyV2VerificationAttempt);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Get a summary of how many attempts were made and how many were converted.
     */
    SDK.prototype.fetchVerificationAttemptsSummary = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchVerificationAttemptsSummaryRequest(req);
        }
        var baseURL = operations.FetchVerificationAttemptsSummaryServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = baseURL.replace(/\/$/, "") + "/v2/Attempts/Summary";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchVerificationAttemptsSummarySecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchVerificationAttemptsSummaryResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.verifyV2VerificationAttemptsSummary = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.VerifyV2VerificationAttemptsSummary);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Fetch a specific Webhook.
     */
    SDK.prototype.fetchWebhook = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchWebhookRequest(req);
        }
        var baseURL = operations.FetchWebhookServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Services/{ServiceSid}/Webhooks/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchWebhookSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchWebhookResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.verifyV2ServiceWebhook = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.VerifyV2ServiceWebhook);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Retrieve a list of all Buckets for a Rate Limit.
     */
    SDK.prototype.listBucket = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListBucketRequest(req);
        }
        var baseURL = operations.ListBucketServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Services/{ServiceSid}/RateLimits/{RateLimitSid}/Buckets", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListBucketSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListBucketResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listBucketResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ListBucketListBucketResponse);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Retrieve a list of all Challenges for a Factor.
     */
    SDK.prototype.listChallenge = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListChallengeRequest(req);
        }
        var baseURL = operations.ListChallengeServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Services/{ServiceSid}/Entities/{Identity}/Challenges", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListChallengeSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListChallengeResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listChallengeResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ListChallengeListChallengeResponse);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Retrieve a list of all Entities for a Service.
     */
    SDK.prototype.listEntity = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListEntityRequest(req);
        }
        var baseURL = operations.ListEntityServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Services/{ServiceSid}/Entities", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListEntitySecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListEntityResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listEntityResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ListEntityListEntityResponse);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Retrieve a list of all Factors for an Entity.
     */
    SDK.prototype.listFactor = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListFactorRequest(req);
        }
        var baseURL = operations.ListFactorServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Services/{ServiceSid}/Entities/{Identity}/Factors", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListFactorSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListFactorResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listFactorResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ListFactorListFactorResponse);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Retrieve a list of all Messaging Configurations for a Service.
     */
    SDK.prototype.listMessagingConfiguration = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListMessagingConfigurationRequest(req);
        }
        var baseURL = operations.ListMessagingConfigurationServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Services/{ServiceSid}/MessagingConfigurations", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListMessagingConfigurationSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListMessagingConfigurationResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listMessagingConfigurationResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ListMessagingConfigurationListMessagingConfigurationResponse);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Retrieve a list of all Rate Limits for a service.
     */
    SDK.prototype.listRateLimit = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListRateLimitRequest(req);
        }
        var baseURL = operations.ListRateLimitServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Services/{ServiceSid}/RateLimits", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListRateLimitSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListRateLimitResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listRateLimitResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ListRateLimitListRateLimitResponse);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Retrieve a list of all Verification Services for an account.
     */
    SDK.prototype.listService = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListServiceRequest(req);
        }
        var baseURL = operations.ListServiceServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = baseURL.replace(/\/$/, "") + "/v2/Services";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListServiceSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListServiceResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listServiceResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ListServiceListServiceResponse);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * List all the verification attempts for a given Account.
     */
    SDK.prototype.listVerificationAttempt = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListVerificationAttemptRequest(req);
        }
        var baseURL = operations.ListVerificationAttemptServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = baseURL.replace(/\/$/, "") + "/v2/Attempts";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListVerificationAttemptSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListVerificationAttemptResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listVerificationAttemptResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ListVerificationAttemptListVerificationAttemptResponse);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * List all the available templates for a given Account.
     */
    SDK.prototype.listVerificationTemplate = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListVerificationTemplateRequest(req);
        }
        var baseURL = operations.ListVerificationTemplateServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = baseURL.replace(/\/$/, "") + "/v2/Templates";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListVerificationTemplateSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListVerificationTemplateResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listVerificationTemplateResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ListVerificationTemplateListVerificationTemplateResponse);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Retrieve a list of all Webhooks for a Service.
     */
    SDK.prototype.listWebhook = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListWebhookRequest(req);
        }
        var baseURL = operations.ListWebhookServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Services/{ServiceSid}/Webhooks", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListWebhookSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListWebhookResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listWebhookResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ListWebhookListWebhookResponse);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Update a specific Bucket.
     */
    SDK.prototype.updateBucket = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateBucketRequest(req);
        }
        var baseURL = operations.UpdateBucketServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Services/{ServiceSid}/RateLimits/{RateLimitSid}/Buckets/{Sid}", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.UpdateBucketSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UpdateBucketResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.verifyV2ServiceRateLimitBucket = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.VerifyV2ServiceRateLimitBucket);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Verify a specific Challenge.
     */
    SDK.prototype.updateChallenge = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateChallengeRequest(req);
        }
        var baseURL = operations.UpdateChallengeServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Services/{ServiceSid}/Entities/{Identity}/Challenges/{Sid}", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.UpdateChallengeSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UpdateChallengeResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.verifyV2ServiceEntityChallenge = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.VerifyV2ServiceEntityChallenge);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Update a specific Factor. This endpoint can be used to Verify a Factor if passed an `AuthPayload` param.
     */
    SDK.prototype.updateFactor = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateFactorRequest(req);
        }
        var baseURL = operations.UpdateFactorServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Services/{ServiceSid}/Entities/{Identity}/Factors/{Sid}", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.UpdateFactorSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UpdateFactorResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.verifyV2ServiceEntityFactor = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.VerifyV2ServiceEntityFactor);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Update a specific MessagingConfiguration
     */
    SDK.prototype.updateMessagingConfiguration = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateMessagingConfigurationRequest(req);
        }
        var baseURL = operations.UpdateMessagingConfigurationServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Services/{ServiceSid}/MessagingConfigurations/{Country}", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.UpdateMessagingConfigurationSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UpdateMessagingConfigurationResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.verifyV2ServiceMessagingConfiguration = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.VerifyV2ServiceMessagingConfiguration);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Update a specific Rate Limit.
     */
    SDK.prototype.updateRateLimit = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateRateLimitRequest(req);
        }
        var baseURL = operations.UpdateRateLimitServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Services/{ServiceSid}/RateLimits/{Sid}", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.UpdateRateLimitSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UpdateRateLimitResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.verifyV2ServiceRateLimit = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.VerifyV2ServiceRateLimit);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Update a specific Verification Service.
     */
    SDK.prototype.updateService = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateServiceRequest(req);
        }
        var baseURL = operations.UpdateServiceServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Services/{Sid}", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.UpdateServiceSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UpdateServiceResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.verifyV2Service = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.VerifyV2Service);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Update a Verification status
     */
    SDK.prototype.updateVerification = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateVerificationRequest(req);
        }
        var baseURL = operations.UpdateVerificationServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Services/{ServiceSid}/Verifications/{Sid}", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.UpdateVerificationSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UpdateVerificationResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.verifyV2ServiceVerification = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.VerifyV2ServiceVerification);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.updateWebhook = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateWebhookRequest(req);
        }
        var baseURL = operations.UpdateWebhookServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v2/Services/{ServiceSid}/Webhooks/{Sid}", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.UpdateWebhookSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UpdateWebhookResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.verifyV2ServiceWebhook = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.VerifyV2ServiceWebhook);
                    }
                    break;
            }
            return res;
        });
    };
    return SDK;
}());
exports.SDK = SDK;
