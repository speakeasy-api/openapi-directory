// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type MoveOrganizationLicensingCotermLicensesPathParams struct {
	OrganizationID string `pathParam:"style=simple,explode=false,name=organizationId"`
}

// MoveOrganizationLicensingCotermLicensesRequestBodyDestinationModeEnum - The claim mode of the moved license
type MoveOrganizationLicensingCotermLicensesRequestBodyDestinationModeEnum string

const (
	MoveOrganizationLicensingCotermLicensesRequestBodyDestinationModeEnumAddDevices MoveOrganizationLicensingCotermLicensesRequestBodyDestinationModeEnum = "addDevices"
	MoveOrganizationLicensingCotermLicensesRequestBodyDestinationModeEnumRenew      MoveOrganizationLicensingCotermLicensesRequestBodyDestinationModeEnum = "renew"
)

func (e *MoveOrganizationLicensingCotermLicensesRequestBodyDestinationModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "addDevices":
		fallthrough
	case "renew":
		*e = MoveOrganizationLicensingCotermLicensesRequestBodyDestinationModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MoveOrganizationLicensingCotermLicensesRequestBodyDestinationModeEnum: %s", s)
	}
}

// MoveOrganizationLicensingCotermLicensesRequestBodyDestination - Destination data for the license move
type MoveOrganizationLicensingCotermLicensesRequestBodyDestination struct {
	// The claim mode of the moved license
	Mode *MoveOrganizationLicensingCotermLicensesRequestBodyDestinationModeEnum `json:"mode,omitempty"`
	// The organization to move the license to
	OrganizationID *string `json:"organizationId,omitempty"`
}

type MoveOrganizationLicensingCotermLicensesRequestBodyLicensesCounts struct {
	// The number of counts to move
	Count int64 `json:"count"`
	// The license model type to move counts of
	Model string `json:"model"`
}

type MoveOrganizationLicensingCotermLicensesRequestBodyLicenses struct {
	// The counts to move from the license by model type
	Counts []MoveOrganizationLicensingCotermLicensesRequestBodyLicensesCounts `json:"counts"`
	// The license key to move counts from
	Key string `json:"key"`
}

type MoveOrganizationLicensingCotermLicensesRequestBody struct {
	// Destination data for the license move
	Destination MoveOrganizationLicensingCotermLicensesRequestBodyDestination `json:"destination"`
	// The list of licenses to move
	Licenses []MoveOrganizationLicensingCotermLicensesRequestBodyLicenses `json:"licenses"`
}

type MoveOrganizationLicensingCotermLicensesRequest struct {
	PathParams MoveOrganizationLicensingCotermLicensesPathParams
	Request    MoveOrganizationLicensingCotermLicensesRequestBody `request:"mediaType=application/json"`
}

type MoveOrganizationLicensingCotermLicenses200ApplicationJSONMovedLicensesCounts struct {
	// The number of counts the license contains of this model
	Count *int64 `json:"count,omitempty"`
	// The license model type
	Model *string `json:"model,omitempty"`
}

type MoveOrganizationLicensingCotermLicenses200ApplicationJSONMovedLicensesEditions struct {
	// The name of the license edition
	Edition *string `json:"edition,omitempty"`
	// The product type of the license edition
	ProductType *string `json:"productType,omitempty"`
}

// MoveOrganizationLicensingCotermLicenses200ApplicationJSONMovedLicensesModeEnum - The operation mode of the license when it was claimed
type MoveOrganizationLicensingCotermLicenses200ApplicationJSONMovedLicensesModeEnum string

const (
	MoveOrganizationLicensingCotermLicenses200ApplicationJSONMovedLicensesModeEnumAddDevices MoveOrganizationLicensingCotermLicenses200ApplicationJSONMovedLicensesModeEnum = "addDevices"
	MoveOrganizationLicensingCotermLicenses200ApplicationJSONMovedLicensesModeEnumRenew      MoveOrganizationLicensingCotermLicenses200ApplicationJSONMovedLicensesModeEnum = "renew"
)

func (e *MoveOrganizationLicensingCotermLicenses200ApplicationJSONMovedLicensesModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "addDevices":
		fallthrough
	case "renew":
		*e = MoveOrganizationLicensingCotermLicenses200ApplicationJSONMovedLicensesModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MoveOrganizationLicensingCotermLicenses200ApplicationJSONMovedLicensesModeEnum: %s", s)
	}
}

type MoveOrganizationLicensingCotermLicenses200ApplicationJSONMovedLicenses struct {
	// When the license was claimed into the organization
	ClaimedAt *time.Time `json:"claimedAt,omitempty"`
	// The counts of the license by model type
	Counts []MoveOrganizationLicensingCotermLicenses200ApplicationJSONMovedLicensesCounts `json:"counts,omitempty"`
	// The duration (term length) of the license, measured in days
	Duration *int64 `json:"duration,omitempty"`
	// The editions of the license for each relevant product type
	Editions []MoveOrganizationLicensingCotermLicenses200ApplicationJSONMovedLicensesEditions `json:"editions,omitempty"`
	// Flag to indicate if the license is expired
	Expired *bool `json:"expired,omitempty"`
	// Flag to indicated that the license is invalidated
	Invalidated *bool `json:"invalidated,omitempty"`
	// When the license was invalidated. Will be null for active licenses
	InvalidatedAt *time.Time `json:"invalidatedAt,omitempty"`
	// The key of the license
	Key *string `json:"key,omitempty"`
	// The operation mode of the license when it was claimed
	Mode *MoveOrganizationLicensingCotermLicenses200ApplicationJSONMovedLicensesModeEnum `json:"mode,omitempty"`
	// The ID of the organization that the license is claimed in
	OrganizationID *string `json:"organizationId,omitempty"`
	// When the license's term began (approximately the date when the license was created)
	StartedAt *time.Time `json:"startedAt,omitempty"`
}

type MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicensesCounts struct {
	// The number of counts the license contains of this model
	Count *int64 `json:"count,omitempty"`
	// The license model type
	Model *string `json:"model,omitempty"`
}

type MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicensesEditions struct {
	// The name of the license edition
	Edition *string `json:"edition,omitempty"`
	// The product type of the license edition
	ProductType *string `json:"productType,omitempty"`
}

// MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicensesModeEnum - The operation mode of the license when it was claimed
type MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicensesModeEnum string

const (
	MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicensesModeEnumAddDevices MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicensesModeEnum = "addDevices"
	MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicensesModeEnumRenew      MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicensesModeEnum = "renew"
)

func (e *MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicensesModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "addDevices":
		fallthrough
	case "renew":
		*e = MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicensesModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicensesModeEnum: %s", s)
	}
}

type MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicenses struct {
	// When the license was claimed into the organization
	ClaimedAt *time.Time `json:"claimedAt,omitempty"`
	// The counts of the license by model type
	Counts []MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicensesCounts `json:"counts,omitempty"`
	// The duration (term length) of the license, measured in days
	Duration *int64 `json:"duration,omitempty"`
	// The editions of the license for each relevant product type
	Editions []MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicensesEditions `json:"editions,omitempty"`
	// Flag to indicate if the license is expired
	Expired *bool `json:"expired,omitempty"`
	// Flag to indicated that the license is invalidated
	Invalidated *bool `json:"invalidated,omitempty"`
	// When the license was invalidated. Will be null for active licenses
	InvalidatedAt *time.Time `json:"invalidatedAt,omitempty"`
	// The key of the license
	Key *string `json:"key,omitempty"`
	// The operation mode of the license when it was claimed
	Mode *MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicensesModeEnum `json:"mode,omitempty"`
	// The ID of the organization that the license is claimed in
	OrganizationID *string `json:"organizationId,omitempty"`
	// When the license's term began (approximately the date when the license was created)
	StartedAt *time.Time `json:"startedAt,omitempty"`
}

// MoveOrganizationLicensingCotermLicenses200ApplicationJSON - Successful operation
type MoveOrganizationLicensingCotermLicenses200ApplicationJSON struct {
	// Newly moved licenses created in the destination organization of the license move operation
	MovedLicenses []MoveOrganizationLicensingCotermLicenses200ApplicationJSONMovedLicenses `json:"movedLicenses,omitempty"`
	// Remainder licenses created in the source organization as a result of moving a subset of the counts of a license
	RemainderLicenses []MoveOrganizationLicensingCotermLicenses200ApplicationJSONRemainderLicenses `json:"remainderLicenses,omitempty"`
}

type MoveOrganizationLicensingCotermLicensesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	MoveOrganizationLicensingCotermLicenses200ApplicationJSONObject *MoveOrganizationLicensingCotermLicenses200ApplicationJSON
}
