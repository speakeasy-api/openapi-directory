// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// TagsGetTypeEnum - Type of entity related to the tag
type TagsGetTypeEnum string

const (
	TagsGetTypeEnumTp TagsGetTypeEnum = "tp"
	TagsGetTypeEnumTl TagsGetTypeEnum = "tl"
	TagsGetTypeEnumDp TagsGetTypeEnum = "dp"
	TagsGetTypeEnumGr TagsGetTypeEnum = "gr"
)

func (e TagsGetTypeEnum) ToPointer() *TagsGetTypeEnum {
	return &e
}

func (e *TagsGetTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tp":
		fallthrough
	case "tl":
		fallthrough
	case "dp":
		fallthrough
	case "gr":
		*e = TagsGetTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TagsGetTypeEnum: %v", v)
	}
}

type TagsGetRequest struct {
	// Comma separated list of datapoints id to filter by
	Datapoints *string `queryParam:"style=form,explode=true,name=datapoints"`
	// Comma separated list of groups id to filter by
	Groups *string `queryParam:"style=form,explode=true,name=groups"`
	// Maximum elements to retrieve. Default to 20 if not specified.
	Limit *int `queryParam:"style=form,explode=true,name=limit"`
	// Name of the tag
	Name *string `queryParam:"style=form,explode=true,name=name"`
	// Where to start when retrieving elements. Default is 0 if not specified.
	Offset *int `queryParam:"style=form,explode=true,name=offset"`
	// Type of entity related to the tag
	Type *TagsGetTypeEnum `queryParam:"style=form,explode=true,name=type"`
}

type TagsGetResponse struct {
	APICoreResponsesEntitiesResponseAPICoreResponsesEntityURISystemInt64 *shared.APICoreResponsesEntitiesResponseAPICoreResponsesEntityURISystemInt64
	ContentType                                                          string
	StatusCode                                                           int
	RawResponse                                                          *http.Response
}
