"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import comparisonoperatortype_enum as shared_comparisonoperatortype_enum
from ..shared import metricname_enum as shared_metricname_enum
from ..shared import policytype_enum as shared_policytype_enum
from ..shared import scalingadjustmenttype_enum as shared_scalingadjustmenttype_enum
from ..shared import targetconfiguration as shared_targetconfiguration
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PutScalingPolicyInput:
    
    fleet_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FleetId') }})  
    metric_name: shared_metricname_enum.MetricNameEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MetricName') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})  
    comparison_operator: Optional[shared_comparisonoperatortype_enum.ComparisonOperatorTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ComparisonOperator'), 'exclude': lambda f: f is None }})  
    evaluation_periods: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EvaluationPeriods'), 'exclude': lambda f: f is None }})  
    policy_type: Optional[shared_policytype_enum.PolicyTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PolicyType'), 'exclude': lambda f: f is None }})  
    scaling_adjustment: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ScalingAdjustment'), 'exclude': lambda f: f is None }})  
    scaling_adjustment_type: Optional[shared_scalingadjustmenttype_enum.ScalingAdjustmentTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ScalingAdjustmentType'), 'exclude': lambda f: f is None }})  
    target_configuration: Optional[shared_targetconfiguration.TargetConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TargetConfiguration'), 'exclude': lambda f: f is None }})  
    threshold: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Threshold'), 'exclude': lambda f: f is None }})  
    