// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type EditUserPathParams struct {
	// The ID of the user.
	UserID float64 `pathParam:"style=simple,explode=false,name=user_id"`
}

// EditUserRequestBodyVideosPrivacyCommentsEnum - Who can comment on the video. This value becomes the default comment setting for all future videos that this user uploads.
type EditUserRequestBodyVideosPrivacyCommentsEnum string

const (
	EditUserRequestBodyVideosPrivacyCommentsEnumAnybody  EditUserRequestBodyVideosPrivacyCommentsEnum = "anybody"
	EditUserRequestBodyVideosPrivacyCommentsEnumContacts EditUserRequestBodyVideosPrivacyCommentsEnum = "contacts"
	EditUserRequestBodyVideosPrivacyCommentsEnumNobody   EditUserRequestBodyVideosPrivacyCommentsEnum = "nobody"
)

func (e *EditUserRequestBodyVideosPrivacyCommentsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "anybody":
		fallthrough
	case "contacts":
		fallthrough
	case "nobody":
		*e = EditUserRequestBodyVideosPrivacyCommentsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EditUserRequestBodyVideosPrivacyCommentsEnum: %s", s)
	}
}

// EditUserRequestBodyVideosPrivacyEmbedEnum - The privacy for embed videos. The `whitelist` value enables you to define all valid embed domains. See our [documentation](https://developer.vimeo.com/api/endpoints/videos#/{video_id}/privacy/domains) for adding and removing domains.
type EditUserRequestBodyVideosPrivacyEmbedEnum string

const (
	EditUserRequestBodyVideosPrivacyEmbedEnumPrivate   EditUserRequestBodyVideosPrivacyEmbedEnum = "private"
	EditUserRequestBodyVideosPrivacyEmbedEnumPublic    EditUserRequestBodyVideosPrivacyEmbedEnum = "public"
	EditUserRequestBodyVideosPrivacyEmbedEnumWhitelist EditUserRequestBodyVideosPrivacyEmbedEnum = "whitelist"
)

func (e *EditUserRequestBodyVideosPrivacyEmbedEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "private":
		fallthrough
	case "public":
		fallthrough
	case "whitelist":
		*e = EditUserRequestBodyVideosPrivacyEmbedEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EditUserRequestBodyVideosPrivacyEmbedEnum: %s", s)
	}
}

// EditUserRequestBodyVideosPrivacyViewEnum - Who can view the video. This value becomes the default view setting for all future videos that this user uploads.
type EditUserRequestBodyVideosPrivacyViewEnum string

const (
	EditUserRequestBodyVideosPrivacyViewEnumAnybody  EditUserRequestBodyVideosPrivacyViewEnum = "anybody"
	EditUserRequestBodyVideosPrivacyViewEnumContacts EditUserRequestBodyVideosPrivacyViewEnum = "contacts"
	EditUserRequestBodyVideosPrivacyViewEnumDisable  EditUserRequestBodyVideosPrivacyViewEnum = "disable"
	EditUserRequestBodyVideosPrivacyViewEnumNobody   EditUserRequestBodyVideosPrivacyViewEnum = "nobody"
	EditUserRequestBodyVideosPrivacyViewEnumPassword EditUserRequestBodyVideosPrivacyViewEnum = "password"
	EditUserRequestBodyVideosPrivacyViewEnumUnlisted EditUserRequestBodyVideosPrivacyViewEnum = "unlisted"
	EditUserRequestBodyVideosPrivacyViewEnumUsers    EditUserRequestBodyVideosPrivacyViewEnum = "users"
)

func (e *EditUserRequestBodyVideosPrivacyViewEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "anybody":
		fallthrough
	case "contacts":
		fallthrough
	case "disable":
		fallthrough
	case "nobody":
		fallthrough
	case "password":
		fallthrough
	case "unlisted":
		fallthrough
	case "users":
		*e = EditUserRequestBodyVideosPrivacyViewEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EditUserRequestBodyVideosPrivacyViewEnum: %s", s)
	}
}

type EditUserRequestBodyVideosPrivacy struct {
	// Whether a user can add the video to an album, channel, or group. This value becomes the default add setting for all future videos uploaded by the user.
	Add *bool `json:"add,omitempty"`
	// Who can comment on the video. This value becomes the default comment setting for all future videos that this user uploads.
	Comments *EditUserRequestBodyVideosPrivacyCommentsEnum `json:"comments,omitempty"`
	// Whether a user can download the video. This value becomes the default download setting for all future videos that this user uploads.
	Download *bool `json:"download,omitempty"`
	// The privacy for embed videos. The `whitelist` value enables you to define all valid embed domains. See our [documentation](https://developer.vimeo.com/api/endpoints/videos#/{video_id}/privacy/domains) for adding and removing domains.
	Embed *EditUserRequestBodyVideosPrivacyEmbedEnum `json:"embed,omitempty"`
	// Who can view the video. This value becomes the default view setting for all future videos that this user uploads.
	View *EditUserRequestBodyVideosPrivacyViewEnum `json:"view,omitempty"`
}

type EditUserRequestBodyVideos struct {
	Privacy *EditUserRequestBodyVideosPrivacy `json:"privacy,omitempty"`
}

type EditUserRequestBody struct {
	// The user's bio.
	Bio *string `json:"bio,omitempty"`
	// A list of values describing the content in this video. Find the full list in the [/contentratings](https://developer.vimeo.com/api/endpoints/videos#GET/contentratings) endpoint. You must provide a comma-separated list if you are using a query string or an array if you are using JSON.
	ContentFilter []string `json:"content_filter,omitempty"`
	// The user's custom Vimeo URL slug.
	Link *string `json:"link,omitempty"`
	// The user's location.
	Location *string `json:"location,omitempty"`
	// The user's display name.
	Name *string `json:"name,omitempty"`
	// The default password for all future videos that this user uploads. To use this field, the `videos.privacy.view` field must be `password`.
	Password *string                    `json:"password,omitempty"`
	Videos   *EditUserRequestBodyVideos `json:"videos,omitempty"`
}

type EditUserRequest struct {
	PathParams EditUserPathParams
	Request    *EditUserRequestBody `request:"mediaType=application/vnd.vimeo.user+json"`
}

type EditUserResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The user was edited.
	User *shared.User
}
