// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETAttachUserPolicyActionEnum
type GETAttachUserPolicyActionEnum string

const (
	GETAttachUserPolicyActionEnumAttachUserPolicy GETAttachUserPolicyActionEnum = "AttachUserPolicy"
)

func (e GETAttachUserPolicyActionEnum) ToPointer() *GETAttachUserPolicyActionEnum {
	return &e
}

func (e *GETAttachUserPolicyActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AttachUserPolicy":
		*e = GETAttachUserPolicyActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETAttachUserPolicyActionEnum: %v", v)
	}
}

// GETAttachUserPolicyVersionEnum
type GETAttachUserPolicyVersionEnum string

const (
	GETAttachUserPolicyVersionEnumTwoThousandAndTen0508 GETAttachUserPolicyVersionEnum = "2010-05-08"
)

func (e GETAttachUserPolicyVersionEnum) ToPointer() *GETAttachUserPolicyVersionEnum {
	return &e
}

func (e *GETAttachUserPolicyVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2010-05-08":
		*e = GETAttachUserPolicyVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETAttachUserPolicyVersionEnum: %v", v)
	}
}

type GETAttachUserPolicyRequest struct {
	Action GETAttachUserPolicyActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// <p>The Amazon Resource Name (ARN) of the IAM policy you want to attach.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
	PolicyArn string `queryParam:"style=form,explode=true,name=PolicyArn"`
	// <p>The name (friendly name, not ARN) of the IAM user to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
	UserName          string                         `queryParam:"style=form,explode=true,name=UserName"`
	Version           GETAttachUserPolicyVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                        `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                        `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                        `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                        `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                        `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                        `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                        `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETAttachUserPolicyResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
