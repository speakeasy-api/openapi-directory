/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class CategoriesSubscriptions {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Check if a user follows a category
   */
  checkIfUserSubscribedToCategory(
    req: operations.CheckIfUserSubscribedToCategoryRequest,
    security: operations.CheckIfUserSubscribedToCategorySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CheckIfUserSubscribedToCategoryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CheckIfUserSubscribedToCategoryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{user_id}/categories/{category}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CheckIfUserSubscribedToCategorySecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CheckIfUserSubscribedToCategoryResponse =
        new operations.CheckIfUserSubscribedToCategoryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Check if a user follows a category
   */
  checkIfUserSubscribedToCategoryAlt1(
    req: operations.CheckIfUserSubscribedToCategoryAlt1Request,
    security: operations.CheckIfUserSubscribedToCategoryAlt1Security,
    config?: AxiosRequestConfig
  ): Promise<operations.CheckIfUserSubscribedToCategoryAlt1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CheckIfUserSubscribedToCategoryAlt1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/me/categories/{category}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CheckIfUserSubscribedToCategoryAlt1Security(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CheckIfUserSubscribedToCategoryAlt1Response =
        new operations.CheckIfUserSubscribedToCategoryAlt1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Get all the categories that a user follows
   */
  getCategorySubscriptions(
    req: operations.GetCategorySubscriptionsRequest,
    security: operations.GetCategorySubscriptionsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetCategorySubscriptionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetCategorySubscriptionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{user_id}/categories",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetCategorySubscriptionsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCategorySubscriptionsResponse =
        new operations.GetCategorySubscriptionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.category+json`
            )
          ) {
            res.categories = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.categories = utils.objectToClass(
              httpRes?.data,
              shared.Category,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 403:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.category+json`
            )
          ) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get all the categories that a user follows
   */
  getCategorySubscriptionsAlt1(
    req: operations.GetCategorySubscriptionsAlt1Request,
    security: operations.GetCategorySubscriptionsAlt1Security,
    config?: AxiosRequestConfig
  ): Promise<operations.GetCategorySubscriptionsAlt1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetCategorySubscriptionsAlt1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/me/categories";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetCategorySubscriptionsAlt1Security(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCategorySubscriptionsAlt1Response =
        new operations.GetCategorySubscriptionsAlt1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.category+json`
            )
          ) {
            res.categories = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.categories = utils.objectToClass(
              httpRes?.data,
              shared.Category,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 403:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.category+json`
            )
          ) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Subscribe a user to a single category
   */
  subscribeToCategory(
    req: operations.SubscribeToCategoryRequest,
    security: operations.SubscribeToCategorySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SubscribeToCategoryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SubscribeToCategoryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{user_id}/categories/{category}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SubscribeToCategorySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SubscribeToCategoryResponse =
        new operations.SubscribeToCategoryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Subscribe a user to a single category
   */
  subscribeToCategoryAlt1(
    req: operations.SubscribeToCategoryAlt1Request,
    security: operations.SubscribeToCategoryAlt1Security,
    config?: AxiosRequestConfig
  ): Promise<operations.SubscribeToCategoryAlt1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SubscribeToCategoryAlt1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/me/categories/{category}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SubscribeToCategoryAlt1Security(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SubscribeToCategoryAlt1Response =
        new operations.SubscribeToCategoryAlt1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Unsubscribe a user from a category
   */
  unsubscribeFromCategory(
    req: operations.UnsubscribeFromCategoryRequest,
    security: operations.UnsubscribeFromCategorySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UnsubscribeFromCategoryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UnsubscribeFromCategoryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{user_id}/categories/{category}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UnsubscribeFromCategorySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UnsubscribeFromCategoryResponse =
        new operations.UnsubscribeFromCategoryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Unsubscribe a user from a category
   */
  unsubscribeFromCategoryAlt1(
    req: operations.UnsubscribeFromCategoryAlt1Request,
    security: operations.UnsubscribeFromCategoryAlt1Security,
    config?: AxiosRequestConfig
  ): Promise<operations.UnsubscribeFromCategoryAlt1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UnsubscribeFromCategoryAlt1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/me/categories/{category}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UnsubscribeFromCategoryAlt1Security(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UnsubscribeFromCategoryAlt1Response =
        new operations.UnsubscribeFromCategoryAlt1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }
}
