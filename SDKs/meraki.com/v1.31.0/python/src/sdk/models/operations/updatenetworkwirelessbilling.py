"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessBillingRequestBodyPlansBandwidthLimits:
    r"""The uplink bandwidth settings for the pricing plan."""
    
    limit_down: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('limitDown'), 'exclude': lambda f: f is None }})
    r"""The maximum download limit (integer, in Kbps). null indicates no limit"""  
    limit_up: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('limitUp'), 'exclude': lambda f: f is None }})
    r"""The maximum upload limit (integer, in Kbps). null indicates no limit"""  
    
class UpdateNetworkWirelessBillingRequestBodyPlansTimeLimitEnum(str, Enum):
    r"""The time limit of the pricing plan in minutes. Can be '1 hour', '1 day', '1 week', or '30 days'."""
    ONE_DAY = '1 day'
    ONE_HOUR = '1 hour'
    ONE_WEEK = '1 week'
    THIRTY_DAYS = '30 days'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessBillingRequestBodyPlans:
    
    bandwidth_limits: UpdateNetworkWirelessBillingRequestBodyPlansBandwidthLimits = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandwidthLimits') }})
    r"""The uplink bandwidth settings for the pricing plan."""  
    price: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price') }})
    r"""The price of the billing plan."""  
    time_limit: UpdateNetworkWirelessBillingRequestBodyPlansTimeLimitEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeLimit') }})
    r"""The time limit of the pricing plan in minutes. Can be '1 hour', '1 day', '1 week', or '30 days'."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The id of the pricing plan to update."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessBillingRequestBody:
    
    currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency'), 'exclude': lambda f: f is None }})
    r"""The currency code of this node group's billing plans"""  
    plans: Optional[list[UpdateNetworkWirelessBillingRequestBodyPlans]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('plans'), 'exclude': lambda f: f is None }})
    r"""Array of billing plans in the node group. (Can configure a maximum of 5)"""  
    

@dataclasses.dataclass
class UpdateNetworkWirelessBillingRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    request_body: Optional[UpdateNetworkWirelessBillingRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class UpdateNetworkWirelessBillingResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_network_wireless_billing_200_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    