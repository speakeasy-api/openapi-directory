// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// PredictCarPriceCarTypeEnum - Car condition
type PredictCarPriceCarTypeEnum string

const (
	PredictCarPriceCarTypeEnumUsed PredictCarPriceCarTypeEnum = "used"
	PredictCarPriceCarTypeEnumNew  PredictCarPriceCarTypeEnum = "new"
)

func (e *PredictCarPriceCarTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "used":
		fallthrough
	case "new":
		*e = PredictCarPriceCarTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PredictCarPriceCarTypeEnum: %s", s)
	}
}

// PredictCarPriceCountryEnum - Country for which car price will be predicted
type PredictCarPriceCountryEnum string

const (
	PredictCarPriceCountryEnumUs PredictCarPriceCountryEnum = "us"
	PredictCarPriceCountryEnumCa PredictCarPriceCountryEnum = "ca"
)

func (e *PredictCarPriceCountryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "us":
		fallthrough
	case "ca":
		*e = PredictCarPriceCountryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PredictCarPriceCountryEnum: %s", s)
	}
}

// PredictCarPriceDrivetrainEnum - Drivetrain on the car
type PredictCarPriceDrivetrainEnum string

const (
	PredictCarPriceDrivetrainEnumFourWd PredictCarPriceDrivetrainEnum = "4WD"
	PredictCarPriceDrivetrainEnumAwd    PredictCarPriceDrivetrainEnum = "AWD"
	PredictCarPriceDrivetrainEnumFwd    PredictCarPriceDrivetrainEnum = "FWD"
	PredictCarPriceDrivetrainEnumRwd    PredictCarPriceDrivetrainEnum = "RWD"
)

func (e *PredictCarPriceDrivetrainEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "4WD":
		fallthrough
	case "AWD":
		fallthrough
	case "FWD":
		fallthrough
	case "RWD":
		*e = PredictCarPriceDrivetrainEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PredictCarPriceDrivetrainEnum: %s", s)
	}
}

// PredictCarPriceEngineBlockEnum - Engine Block of the car
type PredictCarPriceEngineBlockEnum string

const (
	PredictCarPriceEngineBlockEnumI PredictCarPriceEngineBlockEnum = "I"
	PredictCarPriceEngineBlockEnumV PredictCarPriceEngineBlockEnum = "V"
	PredictCarPriceEngineBlockEnumH PredictCarPriceEngineBlockEnum = "H"
)

func (e *PredictCarPriceEngineBlockEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "I":
		fallthrough
	case "V":
		fallthrough
	case "H":
		*e = PredictCarPriceEngineBlockEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PredictCarPriceEngineBlockEnum: %s", s)
	}
}

// PredictCarPriceTransmissionEnum - Transmission on the car
type PredictCarPriceTransmissionEnum string

const (
	PredictCarPriceTransmissionEnumManual    PredictCarPriceTransmissionEnum = "Manual"
	PredictCarPriceTransmissionEnumAutomatic PredictCarPriceTransmissionEnum = "Automatic"
)

func (e *PredictCarPriceTransmissionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Manual":
		fallthrough
	case "Automatic":
		*e = PredictCarPriceTransmissionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PredictCarPriceTransmissionEnum: %s", s)
	}
}

type PredictCarPriceQueryParams struct {
	// The API Authentication Key. Mandatory with all API calls.
	APIKey *string `queryParam:"style=form,explode=true,name=api_key"`
	// Base exterior color of the car
	BaseExteriorColor *string `queryParam:"style=form,explode=true,name=base_exterior_color"`
	// Base interior color of the car
	BaseInteriorColor *string `queryParam:"style=form,explode=true,name=base_interior_color"`
	// Car condition
	CarType PredictCarPriceCarTypeEnum `queryParam:"style=form,explode=true,name=car_type"`
	// Boolean to indicate car is carfax one owner or not
	Carfax1Owner *bool `queryParam:"style=form,explode=true,name=carfax_1_owner"`
	// Boolean to indicate car has clean title or not
	CarfaxCleanTitle *bool `queryParam:"style=form,explode=true,name=carfax_clean_title"`
	// City mileage of the car
	CityMpg *int64 `queryParam:"style=form,explode=true,name=city_mpg"`
	// Country for which car price will be predicted
	Country *PredictCarPriceCountryEnum `queryParam:"style=form,explode=true,name=country"`
	// Number of cylinders in the vehicle
	Cylinders *int64 `queryParam:"style=form,explode=true,name=cylinders"`
	// Number of doors in the vehicle
	Doors *int64 `queryParam:"style=form,explode=true,name=doors"`
	// Drivetrain on the car
	Drivetrain *PredictCarPriceDrivetrainEnum `queryParam:"style=form,explode=true,name=drivetrain"`
	// Engine Block of the car
	EngineBlock *PredictCarPriceEngineBlockEnum `queryParam:"style=form,explode=true,name=engine_block"`
	// Engine Size of the car
	EngineSize *float64 `queryParam:"style=form,explode=true,name=engine_size"`
	// Highway mileage
	HighwayMpg *int64 `queryParam:"style=form,explode=true,name=highway_mpg"`
	// Boolean to indicate car is certified or not
	IsCertified *bool `queryParam:"style=form,explode=true,name=is_certified"`
	// Latitude component of the location
	Latitude *float64 `queryParam:"style=form,explode=true,name=latitude"`
	// Longitude component of the location
	Longitude *float64 `queryParam:"style=form,explode=true,name=longitude"`
	// Car's make
	Make *string `queryParam:"style=form,explode=true,name=make"`
	// miles vehicle has driven in total
	Miles *int64 `queryParam:"style=form,explode=true,name=miles"`
	// Car's model
	Model *string `queryParam:"style=form,explode=true,name=model"`
	// Transmission on the car
	Transmission *PredictCarPriceTransmissionEnum `queryParam:"style=form,explode=true,name=transmission"`
	// Car's trim
	Trim *string `queryParam:"style=form,explode=true,name=trim"`
	// Predict price for a VIN
	Vin *string `queryParam:"style=form,explode=true,name=vin"`
	// Car manufacturing year
	Year *int64 `queryParam:"style=form,explode=true,name=year"`
	// Location zip
	Zip *string `queryParam:"style=form,explode=true,name=zip"`
}

type PredictCarPriceRequest struct {
	QueryParams PredictCarPriceQueryParams
}

type PredictCarPriceResponse struct {
	ContentType string
	// Error
	Error *shared.Error
	// Predicted price of the car along with it's specifications
	PricePrediction *shared.PricePrediction
	StatusCode      int
	RawResponse     *http.Response
}
