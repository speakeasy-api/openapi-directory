"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class ProxyGetInvoiceItemAdjustmentTransferredToAccountingEnum(str, Enum):
    r"""Indicates the status of the adjustment's transfer to an external accounting system, such as NetSuite."""
    PROCESSING = 'Processing'
    YES = 'Yes'
    NO = 'No'
    ERROR = 'Error'
    IGNORE = 'Ignore'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProxyGetInvoiceItemAdjustment:
    r"""Container for custom fields of an Invoice Item Adjustment object."""
    
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountId'), 'exclude': lambda f: f is None }})
    r"""The ID of the account that owns the invoice.
    **Values**: inherited from `Account.ID` for the invoice owner
    """  
    accounting_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountingCode'), 'exclude': lambda f: f is None }})
    r"""The accounting code for the invoice item. Accounting codes group transactions that contain similar accounting attributes.
    **Character limit**: 100 **Values**: inherited from `InvoiceItem.AccountingCode`
    """  
    adjustment_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AdjustmentDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date when the invoice item adjustment is applied, in `yyyy-mm-dd` format. This date must be the same as the invoice's date or later.
    **Character limit**: 29
    """  
    adjustment_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AdjustmentNumber'), 'exclude': lambda f: f is None }})
    r"""A unique string to identify an individual invoice item adjustment.
    **Character limit**: 255 **Values**: automatically generated
    """  
    amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Amount'), 'exclude': lambda f: f is None }})
    r"""The amount of the invoice item adjustment. The value of Amount must be positive. Use the required parameter Type to either credit or charge (debit) this amount on the invoice. **Character limit**: 16 **Values**: a valid currency amount"""  
    cancelled_by_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CancelledById'), 'exclude': lambda f: f is None }})
    r"""The ID of the Zuora user who canceled the invoice item adjustment. Zuora generates this read-only field only if the adjustment is canceled.
    **Character limit**: 32 **Values**: automatically generated
    """  
    cancelled_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CancelledDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date when the invoice item adjustment is canceled. Zuora generates this read-only field if this adjustment is canceled.
    **Character limit**: 29 **Values**: automatically generated
    """  
    comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Comment'), 'exclude': lambda f: f is None }})
    r"""Use this field to record comments about the invoice item adjustment.
    **Character limit**: 255 **Values**: a string of 255 characters or fewer
    """  
    created_by_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreatedById'), 'exclude': lambda f: f is None }})
    r"""The user ID of the person who created the invoice item.
    **Character limit**: 32 **Values**: automatically generated
    """  
    created_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreatedDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date the invoice item was created.
    **Character limit**: 29 **Values**: automatically generated
    """  
    customer_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomerName'), 'exclude': lambda f: f is None }})
    r"""The name of the account that owns the associated invoice.
    
    **Character limit**: 50
    
    **Values**: inherited from `Account.Name`
    
    **Note**: This value changes if `Account.Name` is updated. The values of `UpdatedById` and `UpdatedDate` for the `InvoiceItemAdjustment` do not change when `Account.Name` is updated.
    """  
    customer_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomerNumber'), 'exclude': lambda f: f is None }})
    r"""The unique account number of the customer's account.
    
    **Character limit**: 50
    
    **Values**: inherited from `Account.AccountNumber`
    
    **Note**: This value changes if `Account.AccountNumber` is updated. The values of `UpdatedById` and `UpdatedDate` for the `InvoiceItemAdjustment` do not change when `Account.AccountNumber` is updated.
    """  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id'), 'exclude': lambda f: f is None }})
    r"""Object identifier."""  
    invoice_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InvoiceId'), 'exclude': lambda f: f is None }})
    r"""The ID of the invoice associated with the adjustment. The adjustment invoice item is in this invoice. This field is optional if you specify a value for the `InvoiceNumber` field.
    **Character limit**: 3 **Values**: a valid invoice ID
    """  
    invoice_item_adjustment_integration_id_ns: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InvoiceItemAdjustment.IntegrationId__NS'), 'exclude': lambda f: f is None }})
    r"""ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265)."""  
    invoice_item_adjustment_integration_status_ns: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InvoiceItemAdjustment.IntegrationStatus__NS'), 'exclude': lambda f: f is None }})
    r"""Status of the invoice item adjustment's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265)."""  
    invoice_item_adjustment_sync_date_ns: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InvoiceItemAdjustment.SyncDate__NS'), 'exclude': lambda f: f is None }})
    r"""Date when the invoice item adjustment was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265)."""  
    invoice_item_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InvoiceItemName'), 'exclude': lambda f: f is None }})
    r"""The name of the invoice item's charge. This field is required in the Query call, but is inherited in other calls.
    **Character limit**: 255 **Values**: inherited from `InvoiceItem.ChargeName`
    """  
    invoice_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InvoiceNumber'), 'exclude': lambda f: f is None }})
    r"""The unique identification number for the invoice that contains the invoice item. This field is optional if you specify a value for the `InvoiceId` field.
    **Character limit**: 32 **Values**: a valid invoice number
    """  
    reason_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReasonCode'), 'exclude': lambda f: f is None }})
    r"""A code identifying the reason for the transaction. Must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code.
    **Character limit**: 32 **V****alues**: a valid reason code
    """  
    reference_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReferenceId'), 'exclude': lambda f: f is None }})
    r"""A code to reference an object external to Zuora. For example, you can use this field to reference a case number in an external system.
    **Character limit**: 60 **Values**: a string of 60 characters or fewer
    """  
    service_end_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceEndDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The end date of the service period associated with the invoice item. Service ends one second before the date in this value.
    
    **Character limit**: 29
    """  
    service_start_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceStartDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The start date of the service period associated with the invoice item. Service ends one second before the date in this value.
    
    **Character limit**: 29
    """  
    source_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SourceId'), 'exclude': lambda f: f is None }})
    r"""The ID of the item specified in the SourceType field.
    **Character limit**: 32 **Values**: a valid invoice item ID or taxation item ID
    """  
    source_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SourceType'), 'exclude': lambda f: f is None }})
    r"""The type of adjustment.
    **Character limit**: 13 **Values**: InvoiceDetail, Tax
    """  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})
    r"""The status of the invoice item adjustment. This field is required in the Query call, but is automatically generated in other calls.
    **Character limit**: 9 **Values**: Canceled, Processed
    """  
    transferred_to_accounting: Optional[ProxyGetInvoiceItemAdjustmentTransferredToAccountingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TransferredToAccounting'), 'exclude': lambda f: f is None }})
    r"""Indicates the status of the adjustment's transfer to an external accounting system, such as NetSuite."""  
    updated_by_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpdatedById'), 'exclude': lambda f: f is None }})
    r"""The ID of the user who last updated the invoice item.
    **Character limit**: 32 **Values**: automatically generated
    """  
    updated_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpdatedDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date when the invoice item was last updated.
    **Character limit**: 29 **Values**: automatically generated
    """  
    