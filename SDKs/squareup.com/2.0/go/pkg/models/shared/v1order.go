// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// V1Order - V1Order
type V1Order struct {
	// For Bitcoin transactions, the price of the buyer's order in satoshi (100 million satoshi equals 1 BTC).
	BtcPriceSatoshi *float64 `json:"btc_price_satoshi,omitempty"`
	// For Bitcoin transactions, the address that the buyer sent Bitcoin to.
	BtcReceiveAddress *string `json:"btc_receive_address,omitempty"`
	// The email address of the order's buyer.
	BuyerEmail *string `json:"buyer_email,omitempty"`
	// A note provided by the buyer when the order was created, if any.
	BuyerNote *string `json:"buyer_note,omitempty"`
	// A note provided by the merchant when the order's state was set to CANCELED, if any.
	CanceledNote *string `json:"canceled_note,omitempty"`
	// A note provided by the merchant when the order's state was set to COMPLETED, if any
	CompletedNote *string `json:"completed_note,omitempty"`
	// The time when the order was created, in ISO 8601 format.
	CreatedAt *string `json:"created_at,omitempty"`
	// Any errors that occurred during the request.
	Errors []Error `json:"errors,omitempty"`
	// The time when the order expires if no action is taken, in ISO 8601 format.
	ExpiresAt *string `json:"expires_at,omitempty"`
	// The order's unique identifier.
	ID *string `json:"id,omitempty"`
	// The history of actions associated with the order.
	OrderHistory []V1OrderHistoryEntry `json:"order_history,omitempty"`
	// The unique identifier of the payment associated with the order.
	PaymentID *string `json:"payment_id,omitempty"`
	// The promo code provided by the buyer, if any.
	PromoCode *string `json:"promo_code,omitempty"`
	// The name of the order's buyer.
	RecipientName *string `json:"recipient_name,omitempty"`
	// The phone number to use for the order's delivery.
	RecipientPhoneNumber *string `json:"recipient_phone_number,omitempty"`
	// A note provided by the merchant when the order's state was set to REFUNDED, if any.
	RefundedNote *string `json:"refunded_note,omitempty"`
	// Represents a postal address in a country. The address format is based
	// on an [open-source library from Google](https://github.com/google/libaddressinput). For more information,
	// see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata).
	// This format has dedicated fields for four address components: postal code,
	// locality (city), administrative district (state, prefecture, or province), and
	// sublocality (town or village). These components have dedicated fields in the
	// `Address` object because software sometimes behaves differently based on them.
	// For example, sales tax software may charge different amounts of sales tax
	// based on the postal code, and some software is only available in
	// certain states due to compliance reasons.
	//
	// For the remaining address components, the `Address` type provides the
	// `address_line_1` and `address_line_2` fields for free-form data entry.
	// These fields are free-form because the remaining address components have
	// too many variations around the world and typical software does not parse
	// these components. These fields enable users to enter anything they want.
	//
	// Note that, in the current implementation, all other `Address` type fields are blank.
	// These include `address_line_3`, `sublocality_2`, `sublocality_3`,
	// `administrative_district_level_2`, `administrative_district_level_3`,
	// `first_name`, `last_name`, and `organization`.
	//
	// When it comes to localization, the seller's language preferences
	// (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences))
	// are ignored for addresses. Even though Square products (such as Square Point of Sale
	// and the Seller Dashboard) mostly use a seller's language preference in
	// communication, when it comes to addresses, they will use English for a US address,
	// Japanese for an address in Japan, and so on.
	ShippingAddress *Address `json:"shipping_address,omitempty"`
	// Whether the tax is an ADDITIVE tax or an INCLUSIVE tax.
	State         *string  `json:"state,omitempty"`
	SubtotalMoney *V1Money `json:"subtotal_money,omitempty"`
	// A tender represents a discrete monetary exchange. Square represents this
	// exchange as a money object with a specific currency and amount, where the
	// amount is given in the smallest denomination of the given currency.
	//
	// Square POS can accept more than one form of tender for a single payment (such
	// as by splitting a bill between a credit card and a gift card). The `tender`
	// field of the Payment object lists all forms of tender used for the payment.
	//
	// Split tender payments behave slightly differently from single tender payments:
	//
	// The receipt_url for a split tender corresponds only to the first tender listed
	// in the tender field. To get the receipt URLs for the remaining tenders, use
	// the receipt_url fields of the corresponding Tender objects.
	//
	// *A note on gift cards**: when a customer purchases a Square gift card from a
	// merchant, the merchant receives the full amount of the gift card in the
	// associated payment.
	//
	// When that gift card is used as a tender, the balance of the gift card is
	// reduced and the merchant receives no funds. A `Tender` object with a type of
	// `SQUARE_GIFT_CARD` indicates a gift card was used for some or all of the
	// associated payment.
	Tender             *V1Tender `json:"tender,omitempty"`
	TotalDiscountMoney *V1Money  `json:"total_discount_money,omitempty"`
	TotalPriceMoney    *V1Money  `json:"total_price_money,omitempty"`
	TotalShippingMoney *V1Money  `json:"total_shipping_money,omitempty"`
	TotalTaxMoney      *V1Money  `json:"total_tax_money,omitempty"`
	// The time when the order was last modified, in ISO 8601 format.
	UpdatedAt *string `json:"updated_at,omitempty"`
}
