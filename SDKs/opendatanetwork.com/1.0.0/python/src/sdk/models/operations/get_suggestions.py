"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GetSuggestionsTypeEnum(str, Enum):
    r"""Type of the object to find."""
    ENTITY = 'entity'
    CATEGORY = 'category'
    PUBLISHER = 'publisher'
    DATASET = 'dataset'
    QUESTION = 'question'


@dataclasses.dataclass
class GetSuggestionsRequest:
    
    query: str = dataclasses.field(metadata={'query_param': { 'field_name': 'query', 'style': 'form', 'explode': True }})
    r"""Query to match."""  
    type: GetSuggestionsTypeEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'type', 'style': 'simple', 'explode': False }})
    r"""Type of the object to find."""  
    app_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'app_token', 'style': 'form', 'explode': True }})
    r"""The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be
    used with your request. The `app_token` parameter is required if an app token is not passed via the `X-App-Token` HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html).
    """  
    limit: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Maximum number of results to return.
    Must be an integer from 0 to 100.
    """  
    variable_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'variable_id', 'style': 'form', 'explode': True }})
    r"""This parameter is only available when suggesting entities with `type=entity`.
    If it is provided, suggestions will be filtered to include
    only entities that have data for the given variable.
    
    If the variable provided is invalid, no entities will be returned.
    
    Note that this filtering will increase response time significantly,
    so it should only be used when necessary.
    """  
    x_app_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-App-Token', 'style': 'simple', 'explode': False }})
    r"""e.g. cQovpGcdUT1CSzgYk0KPYdAI0"""  
    

@dataclasses.dataclass
class GetSuggestionsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    