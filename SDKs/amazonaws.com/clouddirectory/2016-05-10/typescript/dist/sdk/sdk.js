"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = exports.ServerList = void 0;
var utils = __importStar(require("../internal/utils"));
var operations = __importStar(require("./models/operations"));
var shared = __importStar(require("./models/shared"));
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = [
    /**
     * The Amazon CloudDirectory multi-region endpoint
     */
    "http://clouddirectory.{region}.amazonaws.com",
    /**
     * The Amazon CloudDirectory multi-region endpoint
     */
    "https://clouddirectory.{region}.amazonaws.com",
    /**
     * The Amazon CloudDirectory endpoint for China (Beijing) and China (Ningxia)
     */
    "http://clouddirectory.{region}.amazonaws.com.cn",
    /**
     * The Amazon CloudDirectory endpoint for China (Beijing) and China (Ningxia)
     */
    "https://clouddirectory.{region}.amazonaws.com.cn",
];
/**
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href="https://aws.amazon.com/directoryservice/">AWS Directory Service</a> and the <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html">AWS Directory Service Administration Guide</a>.</p>
 *
 * @see {@link https://docs.aws.amazon.com/clouddirectory/} - Amazon Web Services documentation
 */
var SDK = /** @class */ (function () {
    function SDK(props) {
        var _a, _b;
        this._language = "typescript";
        this._sdkVersion = "0.0.1";
        this._genVersion = "internal";
        this._serverURL = (_a = props === null || props === void 0 ? void 0 : props.serverURL) !== null && _a !== void 0 ? _a : exports.ServerList[0];
        this._defaultClient =
            (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create({ baseURL: this._serverURL });
        if (props === null || props === void 0 ? void 0 : props.security) {
            var security = props.security;
            if (!(props.security instanceof utils.SpeakeasyBase))
                security = new shared.Security(props.security);
            this._securityClient = utils.createSecurityClient(this._defaultClient, security);
        }
        else {
            this._securityClient = this._defaultClient;
        }
    }
    /**
     * Adds a new <a>Facet</a> to an object. An object can have more than one facet applied on it.
     */
    SDK.prototype.addFacetToObject = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.AddFacetToObjectRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/object/facets#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.AddFacetToObjectResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.addFacetToObjectResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.directoryNotEnabledException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DirectoryNotEnabledException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 488:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.facetValidationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FacetValidationException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Copies the input published schema, at the specified version, into the <a>Directory</a> with the same name and version as that of the published schema.
     */
    SDK.prototype.applySchema = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ApplySchemaRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/schema/apply#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ApplySchemaResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.applySchemaResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ApplySchemaResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidAttachmentException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidAttachmentException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * <p>Attaches an existing object to another object. An object can be accessed in two ways:</p> <ol> <li> <p>Using the path</p> </li> <li> <p>Using <code>ObjectIdentifier</code> </p> </li> </ol>
     */
    SDK.prototype.attachObject = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.AttachObjectRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/object/attach#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.AttachObjectResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.attachObjectResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AttachObjectResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case [483, 490].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.directoryNotEnabledException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DirectoryNotEnabledException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 488:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.linkNameAlreadyInUseException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LinkNameAlreadyInUseException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 489:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidAttachmentException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidAttachmentException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 491:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.facetValidationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FacetValidationException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Attaches a policy object to a regular object. An object can have a limited number of attached policies.
     */
    SDK.prototype.attachPolicy = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.AttachPolicyRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/policy/attach#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.AttachPolicyResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.attachPolicyResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.directoryNotEnabledException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DirectoryNotEnabledException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 488:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.notPolicyException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.NotPolicyException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Attaches the specified object to the specified index.
     */
    SDK.prototype.attachToIndex = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.AttachToIndexRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/index/attach#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.AttachToIndexResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.attachToIndexResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AttachToIndexResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.directoryNotEnabledException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DirectoryNotEnabledException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidAttachmentException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidAttachmentException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 488:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 489:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.linkNameAlreadyInUseException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LinkNameAlreadyInUseException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 490:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.indexedAttributeMissingException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.IndexedAttributeMissingException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 491:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.notIndexException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.NotIndexException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Attaches a typed link to a specified source and target object. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink">Typed link</a>.
     */
    SDK.prototype.attachTypedLink = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.AttachTypedLinkRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/typedlink/attach#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.AttachTypedLinkResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.attachTypedLinkResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AttachTypedLinkResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case [483, 489].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.directoryNotEnabledException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DirectoryNotEnabledException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 488:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidAttachmentException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidAttachmentException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 490:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.facetValidationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FacetValidationException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Performs all the read operations in a batch.
     */
    SDK.prototype.batchRead = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.BatchReadRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/batchread#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.BatchReadResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.batchReadResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.BatchReadResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.directoryNotEnabledException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DirectoryNotEnabledException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Performs all the write operations in a batch. Either all the operations succeed or none.
     */
    SDK.prototype.batchWrite = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.BatchWriteRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/batchwrite#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.BatchWriteResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.batchWriteResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.BatchWriteResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.directoryNotEnabledException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DirectoryNotEnabledException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.batchWriteException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.BatchWriteException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Creates a <a>Directory</a> by copying the published schema into the directory. A directory cannot be created without a schema.
     */
    SDK.prototype.createDirectory = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateDirectoryRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/directory/create#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateDirectoryResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.createDirectoryResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.CreateDirectoryResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.directoryAlreadyExistsException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DirectoryAlreadyExistsException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Creates a new <a>Facet</a> in a schema. Facet creation is allowed only in development or applied schemas.
     */
    SDK.prototype.createFacet = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateFacetRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/facet/create#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateFacetResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.createFacetResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.facetAlreadyExistsException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FacetAlreadyExistsException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 488:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidRuleException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidRuleException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 489:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.facetValidationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FacetValidationException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Creates an index object. See <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_indexing.html">Indexing</a> for more information.
     */
    SDK.prototype.createIndex = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateIndexRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/index#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateIndexResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.createIndexResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.CreateIndexResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.directoryNotEnabledException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DirectoryNotEnabledException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 488:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.facetValidationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FacetValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 489:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.linkNameAlreadyInUseException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LinkNameAlreadyInUseException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 490:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.unsupportedIndexTypeException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.UnsupportedIndexTypeException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Creates an object in a <a>Directory</a>. Additionally attaches the object to a parent, if a parent reference and <code>LinkName</code> is specified. An object is simply a collection of <a>Facet</a> attributes. You can also use this API call to create a policy object, if the facet from which you create the object is a policy facet.
     */
    SDK.prototype.createObject = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateObjectRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/object#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateObjectResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.createObjectResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.CreateObjectResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.directoryNotEnabledException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DirectoryNotEnabledException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 488:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.facetValidationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FacetValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 489:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.linkNameAlreadyInUseException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LinkNameAlreadyInUseException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 490:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.unsupportedIndexTypeException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.UnsupportedIndexTypeException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * <p>Creates a new schema in a development state. A schema can exist in three phases:</p> <ul> <li> <p> <i>Development:</i> This is a mutable phase of the schema. All new schemas are in the development phase. Once the schema is finalized, it can be published.</p> </li> <li> <p> <i>Published:</i> Published schemas are immutable and have a version associated with them.</p> </li> <li> <p> <i>Applied:</i> Applied schemas are mutable in a way that allows you to add new schema facets. You can also add new, nonrequired attributes to existing schema facets. You can apply only published schemas to directories. </p> </li> </ul>
     */
    SDK.prototype.createSchema = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateSchemaRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/schema/create";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateSchemaResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.createSchemaResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.CreateSchemaResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case [485, 487].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.schemaAlreadyExistsException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.SchemaAlreadyExistsException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Creates a <a>TypedLinkFacet</a>. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink">Typed link</a>.
     */
    SDK.prototype.createTypedLinkFacet = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateTypedLinkFacetRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/typedlink/facet/create#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateTypedLinkFacetResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.createTypedLinkFacetResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.facetAlreadyExistsException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FacetAlreadyExistsException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 488:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidRuleException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidRuleException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 489:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.facetValidationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FacetValidationException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Deletes a directory. Only disabled directories can be deleted. A deleted directory cannot be undone. Exercise extreme caution when deleting directories.
     */
    SDK.prototype.deleteDirectory = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteDirectoryRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/directory#x-amz-data-partition";
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign({}, utils.getHeadersFromRequest(req)), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "put", headers: headers }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DeleteDirectoryResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.deleteDirectoryResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DeleteDirectoryResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.directoryNotDisabledException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DirectoryNotDisabledException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.directoryDeletedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DirectoryDeletedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 488:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Deletes a given <a>Facet</a>. All attributes and <a>Rule</a>s that are associated with the facet will be deleted. Only development schema facets are allowed deletion.
     */
    SDK.prototype.deleteFacet = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteFacetRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/facet/delete#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DeleteFacetResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.deleteFacetResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.facetNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FacetNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 488:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.facetInUseException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FacetInUseException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Deletes an object and its associated attributes. Only objects with no children and no parents can be deleted.
     */
    SDK.prototype.deleteObject = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteObjectRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/object/delete#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DeleteObjectResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.deleteObjectResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.directoryNotEnabledException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DirectoryNotEnabledException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 488:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.objectNotDetachedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ObjectNotDetachedException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Deletes a given schema. Schemas in a development and published state can only be deleted.
     */
    SDK.prototype.deleteSchema = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteSchemaRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/schema#x-amz-data-partition";
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign({}, utils.getHeadersFromRequest(req)), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "put", headers: headers }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DeleteSchemaResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.deleteSchemaResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DeleteSchemaResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.stillContainsLinksException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.StillContainsLinksException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Deletes a <a>TypedLinkFacet</a>. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink">Typed link</a>.
     */
    SDK.prototype.deleteTypedLinkFacet = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteTypedLinkFacetRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/typedlink/facet/delete#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DeleteTypedLinkFacetResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.deleteTypedLinkFacetResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.facetNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FacetNotFoundException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Detaches the specified object from the specified index.
     */
    SDK.prototype.detachFromIndex = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DetachFromIndexRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/index/detach#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DetachFromIndexResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.detachFromIndexResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DetachFromIndexResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.directoryNotEnabledException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DirectoryNotEnabledException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 488:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.objectAlreadyDetachedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ObjectAlreadyDetachedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 489:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.notIndexException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.NotIndexException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Detaches a given object from the parent object. The object that is to be detached from the parent is specified by the link name.
     */
    SDK.prototype.detachObject = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DetachObjectRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/object/detach#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DetachObjectResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.detachObjectResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DetachObjectResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.directoryNotEnabledException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DirectoryNotEnabledException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 488:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.notNodeException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.NotNodeException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Detaches a policy from an object.
     */
    SDK.prototype.detachPolicy = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DetachPolicyRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/policy/detach#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DetachPolicyResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.detachPolicyResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.directoryNotEnabledException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DirectoryNotEnabledException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 488:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.notPolicyException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.NotPolicyException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Detaches a typed link from a specified source and target object. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink">Typed link</a>.
     */
    SDK.prototype.detachTypedLink = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DetachTypedLinkRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/typedlink/detach#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DetachTypedLinkResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.directoryNotEnabledException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DirectoryNotEnabledException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 488:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.facetValidationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FacetValidationException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Disables the specified directory. Disabled directories cannot be read or written to. Only enabled directories can be disabled. Disabled directories may be reenabled.
     */
    SDK.prototype.disableDirectory = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DisableDirectoryRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/directory/disable#x-amz-data-partition";
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign({}, utils.getHeadersFromRequest(req)), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "put", headers: headers }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DisableDirectoryResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.disableDirectoryResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DisableDirectoryResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.directoryDeletedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DirectoryDeletedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Enables the specified directory. Only disabled directories can be enabled. Once enabled, the directory can then be read and written to.
     */
    SDK.prototype.enableDirectory = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.EnableDirectoryRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/directory/enable#x-amz-data-partition";
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign({}, utils.getHeadersFromRequest(req)), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "put", headers: headers }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.EnableDirectoryResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.enableDirectoryResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.EnableDirectoryResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.directoryDeletedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DirectoryDeletedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Returns current applied schema version ARN, including the minor version in use.
     */
    SDK.prototype.getAppliedSchemaVersion = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetAppliedSchemaVersionRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/schema/getappliedschema";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetAppliedSchemaVersionResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.getAppliedSchemaVersionResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.GetAppliedSchemaVersionResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Retrieves metadata about a directory.
     */
    SDK.prototype.getDirectory = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetDirectoryRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/directory/get#x-amz-data-partition";
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign({}, utils.getHeadersFromRequest(req)), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetDirectoryResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.getDirectoryResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.GetDirectoryResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Gets details of the <a>Facet</a>, such as facet name, attributes, <a>Rule</a>s, or <code>ObjectType</code>. You can call this on all kinds of schema facets -- published, development, or applied.
     */
    SDK.prototype.getFacet = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetFacetRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/facet#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetFacetResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.getFacetResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.GetFacetResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.facetNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FacetNotFoundException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Retrieves attributes that are associated with a typed link.
     */
    SDK.prototype.getLinkAttributes = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetLinkAttributesRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/typedlink/attributes/get#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetLinkAttributesResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.getLinkAttributesResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.GetLinkAttributesResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.directoryNotEnabledException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DirectoryNotEnabledException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 488:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.facetValidationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FacetValidationException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Retrieves attributes within a facet that are associated with an object.
     */
    SDK.prototype.getObjectAttributes = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetObjectAttributesRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/object/attributes/get#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetObjectAttributesResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.getObjectAttributesResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.GetObjectAttributesResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.directoryNotEnabledException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DirectoryNotEnabledException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 488:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.facetValidationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FacetValidationException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Retrieves metadata about an object.
     */
    SDK.prototype.getObjectInformation = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetObjectInformationRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/object/information#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetObjectInformationResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.getObjectInformationResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.GetObjectInformationResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.directoryNotEnabledException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DirectoryNotEnabledException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Retrieves a JSON representation of the schema. See <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_schemas.html#jsonformat">JSON Schema Format</a> for more information.
     */
    SDK.prototype.getSchemaAsJson = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetSchemaAsJsonRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/schema/json#x-amz-data-partition";
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign({}, utils.getHeadersFromRequest(req)), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetSchemaAsJsonResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.getSchemaAsJsonResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.GetSchemaAsJsonResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case [483, 487].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Returns the identity attribute order for a specific <a>TypedLinkFacet</a>. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink">Typed link</a>.
     */
    SDK.prototype.getTypedLinkFacetInformation = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetTypedLinkFacetInformationRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/typedlink/facet/get#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetTypedLinkFacetInformationResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.getTypedLinkFacetInformationResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.GetTypedLinkFacetInformationResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidNextTokenException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidNextTokenException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 488:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.facetNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FacetNotFoundException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Lists schema major versions applied to a directory. If <code>SchemaArn</code> is provided, lists the minor version.
     */
    SDK.prototype.listAppliedSchemaArns = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListAppliedSchemaArnsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/schema/applied";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var queryParams = utils.serializeQueryParams(req);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url + queryParams, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListAppliedSchemaArnsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listAppliedSchemaArnsResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ListAppliedSchemaArnsResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidNextTokenException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidNextTokenException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Lists indices attached to the specified object.
     */
    SDK.prototype.listAttachedIndices = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListAttachedIndicesRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/object/indices#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var queryParams = utils.serializeQueryParams(req);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url + queryParams, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListAttachedIndicesResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listAttachedIndicesResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ListAttachedIndicesResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.directoryNotEnabledException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DirectoryNotEnabledException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Retrieves each Amazon Resource Name (ARN) of schemas in the development state.
     */
    SDK.prototype.listDevelopmentSchemaArns = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListDevelopmentSchemaArnsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/schema/development";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var queryParams = utils.serializeQueryParams(req);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url + queryParams, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListDevelopmentSchemaArnsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listDevelopmentSchemaArnsResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ListDevelopmentSchemaArnsResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidNextTokenException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidNextTokenException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Lists directories created within an account.
     */
    SDK.prototype.listDirectories = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListDirectoriesRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/directory/list";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var queryParams = utils.serializeQueryParams(req);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url + queryParams, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListDirectoriesResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listDirectoriesResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ListDirectoriesResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidNextTokenException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidNextTokenException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Retrieves attributes attached to the facet.
     */
    SDK.prototype.listFacetAttributes = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListFacetAttributesRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/facet/attributes#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var queryParams = utils.serializeQueryParams(req);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url + queryParams, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListFacetAttributesResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listFacetAttributesResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ListFacetAttributesResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.facetNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FacetNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 488:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidNextTokenException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidNextTokenException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Retrieves the names of facets that exist in a schema.
     */
    SDK.prototype.listFacetNames = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListFacetNamesRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/facet/list#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var queryParams = utils.serializeQueryParams(req);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url + queryParams, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListFacetNamesResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listFacetNamesResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ListFacetNamesResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidNextTokenException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidNextTokenException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Returns a paginated list of all the incoming <a>TypedLinkSpecifier</a> information for an object. It also supports filtering by typed link facet and identity attributes. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink">Typed link</a>.
     */
    SDK.prototype.listIncomingTypedLinks = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListIncomingTypedLinksRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/typedlink/incoming#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListIncomingTypedLinksResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listIncomingTypedLinksResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ListIncomingTypedLinksResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.directoryNotEnabledException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DirectoryNotEnabledException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 488:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidNextTokenException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidNextTokenException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 489:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.facetValidationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FacetValidationException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Lists objects attached to the specified index.
     */
    SDK.prototype.listIndex = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListIndexRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/index/targets#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var queryParams = utils.serializeQueryParams(req);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url + queryParams, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListIndexResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listIndexResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ListIndexResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.facetValidationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FacetValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.directoryNotEnabledException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DirectoryNotEnabledException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 488:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidNextTokenException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidNextTokenException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 489:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 490:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.notIndexException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.NotIndexException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Lists all attributes that are associated with an object.
     */
    SDK.prototype.listObjectAttributes = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListObjectAttributesRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/object/attributes#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var queryParams = utils.serializeQueryParams(req);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url + queryParams, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListObjectAttributesResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listObjectAttributesResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ListObjectAttributesResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.directoryNotEnabledException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DirectoryNotEnabledException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 488:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidNextTokenException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidNextTokenException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 489:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.facetValidationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FacetValidationException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Returns a paginated list of child objects that are associated with a given object.
     */
    SDK.prototype.listObjectChildren = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListObjectChildrenRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/object/children#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var queryParams = utils.serializeQueryParams(req);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url + queryParams, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListObjectChildrenResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listObjectChildrenResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ListObjectChildrenResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.directoryNotEnabledException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DirectoryNotEnabledException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 488:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidNextTokenException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidNextTokenException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 489:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.notNodeException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.NotNodeException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * <p>Retrieves all available parent paths for any object type such as node, leaf node, policy node, and index node objects. For more information about objects, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_key_concepts.html#dirstructure">Directory Structure</a>.</p> <p>Use this API to evaluate all parents for an object. The call returns all objects from the root of the directory up to the requested object. The API returns the number of paths based on user-defined <code>MaxResults</code>, in case there are multiple paths to the parent. The order of the paths and nodes returned is consistent among multiple API calls unless the objects are deleted or moved. Paths not leading to the directory root are ignored from the target object.</p>
     */
    SDK.prototype.listObjectParentPaths = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListObjectParentPathsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/object/parentpaths#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var queryParams = utils.serializeQueryParams(req);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url + queryParams, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListObjectParentPathsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listObjectParentPathsResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ListObjectParentPathsResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.directoryNotEnabledException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DirectoryNotEnabledException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidNextTokenException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidNextTokenException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 488:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Lists parent objects that are associated with a given object in pagination fashion.
     */
    SDK.prototype.listObjectParents = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListObjectParentsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/object/parent#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var queryParams = utils.serializeQueryParams(req);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url + queryParams, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListObjectParentsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listObjectParentsResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ListObjectParentsResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.directoryNotEnabledException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DirectoryNotEnabledException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 488:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidNextTokenException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidNextTokenException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 489:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.cannotListParentOfRootException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.CannotListParentOfRootException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Returns policies attached to an object in pagination fashion.
     */
    SDK.prototype.listObjectPolicies = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListObjectPoliciesRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/object/policy#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var queryParams = utils.serializeQueryParams(req);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url + queryParams, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListObjectPoliciesResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listObjectPoliciesResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ListObjectPoliciesResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.directoryNotEnabledException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DirectoryNotEnabledException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 488:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidNextTokenException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidNextTokenException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Returns a paginated list of all the outgoing <a>TypedLinkSpecifier</a> information for an object. It also supports filtering by typed link facet and identity attributes. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink">Typed link</a>.
     */
    SDK.prototype.listOutgoingTypedLinks = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListOutgoingTypedLinksRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/typedlink/outgoing#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListOutgoingTypedLinksResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listOutgoingTypedLinksResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ListOutgoingTypedLinksResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.directoryNotEnabledException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DirectoryNotEnabledException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 488:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidNextTokenException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidNextTokenException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 489:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.facetValidationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FacetValidationException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Returns all of the <code>ObjectIdentifiers</code> to which a given policy is attached.
     */
    SDK.prototype.listPolicyAttachments = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListPolicyAttachmentsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/policy/attachment#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var queryParams = utils.serializeQueryParams(req);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url + queryParams, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListPolicyAttachmentsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listPolicyAttachmentsResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ListPolicyAttachmentsResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.directoryNotEnabledException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DirectoryNotEnabledException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidNextTokenException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidNextTokenException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 488:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 489:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.notPolicyException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.NotPolicyException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Lists the major version families of each published schema. If a major version ARN is provided as <code>SchemaArn</code>, the minor version revisions in that family are listed instead.
     */
    SDK.prototype.listPublishedSchemaArns = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListPublishedSchemaArnsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/schema/published";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var queryParams = utils.serializeQueryParams(req);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url + queryParams, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListPublishedSchemaArnsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listPublishedSchemaArnsResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ListPublishedSchemaArnsResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidNextTokenException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidNextTokenException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Returns tags for a resource. Tagging is currently supported only for directories with a limit of 50 tags per directory. All 50 tags are returned for a given directory with this API call.
     */
    SDK.prototype.listTagsForResource = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListTagsForResourceRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/amazonclouddirectory/2017-01-11/tags";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var queryParams = utils.serializeQueryParams(req);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url + queryParams, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListTagsForResourceResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listTagsForResourceResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ListTagsForResourceResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidTaggingRequestException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidTaggingRequestException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Returns a paginated list of all attribute definitions for a particular <a>TypedLinkFacet</a>. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink">Typed link</a>.
     */
    SDK.prototype.listTypedLinkFacetAttributes = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListTypedLinkFacetAttributesRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/typedlink/facet/attributes#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var queryParams = utils.serializeQueryParams(req);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url + queryParams, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListTypedLinkFacetAttributesResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listTypedLinkFacetAttributesResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ListTypedLinkFacetAttributesResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.facetNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FacetNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 488:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidNextTokenException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidNextTokenException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Returns a paginated list of <code>TypedLink</code> facet names for a particular schema. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink">Typed link</a>.
     */
    SDK.prototype.listTypedLinkFacetNames = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListTypedLinkFacetNamesRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/typedlink/facet/list#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var queryParams = utils.serializeQueryParams(req);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url + queryParams, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListTypedLinkFacetNamesResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listTypedLinkFacetNamesResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ListTypedLinkFacetNamesResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidNextTokenException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidNextTokenException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Lists all policies from the root of the <a>Directory</a> to the object specified. If there are no policies present, an empty list is returned. If policies are present, and if some objects don't have the policies attached, it returns the <code>ObjectIdentifier</code> for such objects. If policies are present, it returns <code>ObjectIdentifier</code>, <code>policyId</code>, and <code>policyType</code>. Paths that don't lead to the root from the target object are ignored. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_key_concepts.html#policies">Policies</a>.
     */
    SDK.prototype.lookupPolicy = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.LookupPolicyRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/policy/lookup#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var queryParams = utils.serializeQueryParams(req);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url + queryParams, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.LookupPolicyResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.lookupPolicyResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LookupPolicyResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.directoryNotEnabledException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DirectoryNotEnabledException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidNextTokenException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidNextTokenException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 488:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Publishes a development schema with a major version and a recommended minor version.
     */
    SDK.prototype.publishSchema = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PublishSchemaRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/schema/publish#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.PublishSchemaResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.publishSchemaResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.PublishSchemaResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.schemaAlreadyPublishedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.SchemaAlreadyPublishedException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Allows a schema to be updated using JSON upload. Only available for development schemas. See <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_schemas.html#jsonformat">JSON Schema Format</a> for more information.
     */
    SDK.prototype.putSchemaFromJson = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PutSchemaFromJsonRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/schema/json#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.PutSchemaFromJsonResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.putSchemaFromJsonResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.PutSchemaFromJsonResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidSchemaDocException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidSchemaDocException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidRuleException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidRuleException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Removes the specified facet from the specified object.
     */
    SDK.prototype.removeFacetFromObject = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.RemoveFacetFromObjectRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/object/facets/delete#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.RemoveFacetFromObjectResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.removeFacetFromObjectResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.directoryNotEnabledException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DirectoryNotEnabledException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 488:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.facetValidationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FacetValidationException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * An API operation for adding tags to a resource.
     */
    SDK.prototype.tagResource = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.TagResourceRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/amazonclouddirectory/2017-01-11/tags/add";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.TagResourceResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.tagResourceResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidTaggingRequestException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidTaggingRequestException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * An API operation for removing tags from a resource.
     */
    SDK.prototype.untagResource = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UntagResourceRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/tags/remove";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UntagResourceResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.untagResourceResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidTaggingRequestException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidTaggingRequestException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * <p>Does the following:</p> <ol> <li> <p>Adds new <code>Attributes</code>, <code>Rules</code>, or <code>ObjectTypes</code>.</p> </li> <li> <p>Updates existing <code>Attributes</code>, <code>Rules</code>, or <code>ObjectTypes</code>.</p> </li> <li> <p>Deletes existing <code>Attributes</code>, <code>Rules</code>, or <code>ObjectTypes</code>.</p> </li> </ol>
     */
    SDK.prototype.updateFacet = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateFacetRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/facet#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UpdateFacetResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.updateFacetResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidFacetUpdateException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidFacetUpdateException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 488:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.facetNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FacetNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 489:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidRuleException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidRuleException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Updates a given typed link’s attributes. Attributes to be updated must not contribute to the typed link’s identity, as defined by its <code>IdentityAttributeOrder</code>.
     */
    SDK.prototype.updateLinkAttributes = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateLinkAttributesRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/typedlink/attributes/update#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UpdateLinkAttributesResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.updateLinkAttributesResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.directoryNotEnabledException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DirectoryNotEnabledException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 488:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.facetValidationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FacetValidationException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Updates a given object's attributes.
     */
    SDK.prototype.updateObjectAttributes = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateObjectAttributesRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/object/update#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UpdateObjectAttributesResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.updateObjectAttributesResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.UpdateObjectAttributesResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.directoryNotEnabledException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DirectoryNotEnabledException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 488:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.linkNameAlreadyInUseException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LinkNameAlreadyInUseException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 489:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.facetValidationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FacetValidationException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Updates the schema name with a new name. Only development schema names can be updated.
     */
    SDK.prototype.updateSchema = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateSchemaRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/schema/update#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UpdateSchemaResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.updateSchemaResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.UpdateSchemaResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Updates a <a>TypedLinkFacet</a>. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink">Typed link</a>.
     */
    SDK.prototype.updateTypedLinkFacet = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateTypedLinkFacetRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/typedlink/facet#x-amz-data-partition";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UpdateTypedLinkFacetResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.updateTypedLinkFacetResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.facetValidationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FacetValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidFacetUpdateException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidFacetUpdateException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 488:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 489:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.facetNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FacetNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 490:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidRuleException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidRuleException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Upgrades a single directory in-place using the <code>PublishedSchemaArn</code> with schema updates found in <code>MinorVersion</code>. Backwards-compatible minor version upgrades are instantaneously available for readers on all objects in the directory. Note: This is a synchronous API call and upgrades only one schema on a given directory per call. To upgrade multiple directories from one schema, you would need to call this API on each directory.
     */
    SDK.prototype.upgradeAppliedSchema = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpgradeAppliedSchemaRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/schema/upgradeapplied";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UpgradeAppliedSchemaResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.upgradeAppliedSchemaResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.UpgradeAppliedSchemaResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.incompatibleSchemaException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.IncompatibleSchemaException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidAttachmentException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidAttachmentException);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Upgrades a published schema under a new minor version revision using the current contents of <code>DevelopmentSchemaArn</code>.
     */
    SDK.prototype.upgradePublishedSchema = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpgradePublishedSchemaRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") +
            "/amazonclouddirectory/2017-01-11/schema/upgradepublished";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UpgradePublishedSchemaResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.upgradePublishedSchemaResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.UpgradePublishedSchemaResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 480:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.internalServiceException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InternalServiceException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 481:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidArnException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidArnException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 482:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.retryableConflictException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.RetryableConflictException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 483:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.validationException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ValidationException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 484:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.incompatibleSchemaException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.IncompatibleSchemaException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 485:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accessDeniedException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccessDeniedException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 486:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.resourceNotFoundException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ResourceNotFoundException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 487:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.invalidAttachmentException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvalidAttachmentException);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 488:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.limitExceededException = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.LimitExceededException);
                    }
                    break;
            }
            return res;
        });
    };
    return SDK;
}());
exports.SDK = SDK;
