/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Page - The page requested.
 */
public class Page {
    /**
     * A map of custom fields defined by a curator for a page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customFields")
    public java.util.Map<String, Object> customFields;
    public Page withCustomFields(java.util.Map<String, Object> customFields) {
        this.customFields = customFields;
        return this;
    }
    
    /**
     * Entries of a page
     */
    @JsonProperty("entries")
    public PageEntry[] entries;
    public Page withEntries(PageEntry[] entries) {
        this.entries = entries;
        return this;
    }
    
    /**
     * Unique identifier for the page.
     */
    @JsonProperty("id")
    public String id;
    public Page withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * True if this page is static and doesn't have any dynamic content to load.
     * 
     * Static pages don't need to go back to the page endpoint to load page content
     * instead the page summary loaded with the sitemap should be enough to determine
     * the page template type and render based on this.
     * 
     */
    @JsonProperty("isStatic")
    public Boolean isStatic;
    public Page withIsStatic(Boolean isStatic) {
        this.isStatic = isStatic;
        return this;
    }
    
    /**
     * True if this page is a system page type.
     * 
     * **DEPRECATED** This property doesn't have any real use in client applications
     * anymore so shouldn't be used. It especially shouldn't be used to determine if
     * a page is static or not. Use the `isStatic` property instead.
     * 
     */
    @JsonProperty("isSystemPage")
    public Boolean isSystemPage;
    public Page withIsSystemPage(Boolean isSystemPage) {
        this.isSystemPage = isSystemPage;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("item")
    public ItemDetail item;
    public Page withItem(ItemDetail item) {
        this.item = item;
        return this;
    }
    
    /**
     * Key used to lookup a known page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("key")
    public String key;
    public Page withKey(String key) {
        this.key = key;
        return this;
    }
    
    /**
     * A pageable list of items.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list")
    public ItemList list;
    public Page withList(ItemList list) {
        this.list = list;
        return this;
    }
    
    /**
     * Metadata associated with a page. Primarily intended for SEO usage.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    public PageMetadata metadata;
    public Page withMetadata(PageMetadata metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * Unique path for the page.
     */
    @JsonProperty("path")
    public String path;
    public Page withPath(String path) {
        this.path = path;
        return this;
    }
    
    /**
     * Identifier for of the page template to render this page.
     */
    @JsonProperty("template")
    public String template;
    public Page withTemplate(String template) {
        this.template = template;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("themes")
    public Theme[] themes;
    public Page withThemes(Theme[] themes) {
        this.themes = themes;
        return this;
    }
    
    /**
     * Title of the page.
     */
    @JsonProperty("title")
    public String title;
    public Page withTitle(String title) {
        this.title = title;
        return this;
    }
    
}
