// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type GoogleCloudRetailV2betaControlSearchSolutionUseCaseEnum string

const (
	GoogleCloudRetailV2betaControlSearchSolutionUseCaseEnumSearchSolutionUseCaseUnspecified GoogleCloudRetailV2betaControlSearchSolutionUseCaseEnum = "SEARCH_SOLUTION_USE_CASE_UNSPECIFIED"
	GoogleCloudRetailV2betaControlSearchSolutionUseCaseEnumSearchSolutionUseCaseSearch      GoogleCloudRetailV2betaControlSearchSolutionUseCaseEnum = "SEARCH_SOLUTION_USE_CASE_SEARCH"
	GoogleCloudRetailV2betaControlSearchSolutionUseCaseEnumSearchSolutionUseCaseBrowse      GoogleCloudRetailV2betaControlSearchSolutionUseCaseEnum = "SEARCH_SOLUTION_USE_CASE_BROWSE"
)

func (e *GoogleCloudRetailV2betaControlSearchSolutionUseCaseEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SEARCH_SOLUTION_USE_CASE_UNSPECIFIED":
		fallthrough
	case "SEARCH_SOLUTION_USE_CASE_SEARCH":
		fallthrough
	case "SEARCH_SOLUTION_USE_CASE_BROWSE":
		*e = GoogleCloudRetailV2betaControlSearchSolutionUseCaseEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleCloudRetailV2betaControlSearchSolutionUseCaseEnum: %s", s)
	}
}

type GoogleCloudRetailV2betaControlSolutionTypesEnum string

const (
	GoogleCloudRetailV2betaControlSolutionTypesEnumSolutionTypeUnspecified    GoogleCloudRetailV2betaControlSolutionTypesEnum = "SOLUTION_TYPE_UNSPECIFIED"
	GoogleCloudRetailV2betaControlSolutionTypesEnumSolutionTypeRecommendation GoogleCloudRetailV2betaControlSolutionTypesEnum = "SOLUTION_TYPE_RECOMMENDATION"
	GoogleCloudRetailV2betaControlSolutionTypesEnumSolutionTypeSearch         GoogleCloudRetailV2betaControlSolutionTypesEnum = "SOLUTION_TYPE_SEARCH"
)

func (e *GoogleCloudRetailV2betaControlSolutionTypesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SOLUTION_TYPE_UNSPECIFIED":
		fallthrough
	case "SOLUTION_TYPE_RECOMMENDATION":
		fallthrough
	case "SOLUTION_TYPE_SEARCH":
		*e = GoogleCloudRetailV2betaControlSolutionTypesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleCloudRetailV2betaControlSolutionTypesEnum: %s", s)
	}
}

// GoogleCloudRetailV2betaControl - Configures dynamic metadata that can be linked to a ServingConfig and affect search or recommendation results at serving time.
type GoogleCloudRetailV2betaControl struct {
	// Output only. List of serving config ids that are associated with this control in the same Catalog. Note the association is managed via the ServingConfig, this is an output only denormalized view.
	AssociatedServingConfigIds []string `json:"associatedServingConfigIds,omitempty"`
	// Required. The human readable control display name. Used in Retail UI. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is thrown.
	DisplayName *string `json:"displayName,omitempty"`
	// A facet specification to perform faceted search.
	FacetSpec *GoogleCloudRetailV2betaSearchRequestFacetSpec `json:"facetSpec,omitempty"`
	// Immutable. Fully qualified name `projects/*/locations/global/catalogs/*/controls/*`
	Name *string `json:"name,omitempty"`
	// A rule is a condition-action pair * A condition defines when a rule is to be triggered. * An action specifies what occurs on that trigger. Currently rules only work for controls with SOLUTION_TYPE_SEARCH.
	Rule *GoogleCloudRetailV2betaRule `json:"rule,omitempty"`
	// Specifies the use case for the control. Affects what condition fields can be set. Only settable by search controls. Will default to SEARCH_SOLUTION_USE_CASE_SEARCH if not specified. Currently only allow one search_solution_use_case per control.
	SearchSolutionUseCase []GoogleCloudRetailV2betaControlSearchSolutionUseCaseEnum `json:"searchSolutionUseCase,omitempty"`
	// Required. Immutable. The solution types that the control is used for. Currently we support setting only one type of solution at creation time. Only `SOLUTION_TYPE_SEARCH` value is supported at the moment. If no solution type is provided at creation time, will default to SOLUTION_TYPE_SEARCH.
	SolutionTypes []GoogleCloudRetailV2betaControlSolutionTypesEnum `json:"solutionTypes,omitempty"`
}

// GoogleCloudRetailV2betaControlInput - Configures dynamic metadata that can be linked to a ServingConfig and affect search or recommendation results at serving time.
type GoogleCloudRetailV2betaControlInput struct {
	// Required. The human readable control display name. Used in Retail UI. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is thrown.
	DisplayName *string `json:"displayName,omitempty"`
	// A facet specification to perform faceted search.
	FacetSpec *GoogleCloudRetailV2betaSearchRequestFacetSpec `json:"facetSpec,omitempty"`
	// Immutable. Fully qualified name `projects/*/locations/global/catalogs/*/controls/*`
	Name *string `json:"name,omitempty"`
	// A rule is a condition-action pair * A condition defines when a rule is to be triggered. * An action specifies what occurs on that trigger. Currently rules only work for controls with SOLUTION_TYPE_SEARCH.
	Rule *GoogleCloudRetailV2betaRule `json:"rule,omitempty"`
	// Specifies the use case for the control. Affects what condition fields can be set. Only settable by search controls. Will default to SEARCH_SOLUTION_USE_CASE_SEARCH if not specified. Currently only allow one search_solution_use_case per control.
	SearchSolutionUseCase []GoogleCloudRetailV2betaControlSearchSolutionUseCaseEnum `json:"searchSolutionUseCase,omitempty"`
	// Required. Immutable. The solution types that the control is used for. Currently we support setting only one type of solution at creation time. Only `SOLUTION_TYPE_SEARCH` value is supported at the moment. If no solution type is provided at creation time, will default to SOLUTION_TYPE_SEARCH.
	SolutionTypes []GoogleCloudRetailV2betaControlSolutionTypesEnum `json:"solutionTypes,omitempty"`
}
