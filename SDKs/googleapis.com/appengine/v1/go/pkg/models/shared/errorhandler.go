// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ErrorHandlerErrorCodeEnum - Error condition this handler applies to.
type ErrorHandlerErrorCodeEnum string

const (
	ErrorHandlerErrorCodeEnumErrorCodeUnspecified  ErrorHandlerErrorCodeEnum = "ERROR_CODE_UNSPECIFIED"
	ErrorHandlerErrorCodeEnumErrorCodeDefault      ErrorHandlerErrorCodeEnum = "ERROR_CODE_DEFAULT"
	ErrorHandlerErrorCodeEnumErrorCodeOverQuota    ErrorHandlerErrorCodeEnum = "ERROR_CODE_OVER_QUOTA"
	ErrorHandlerErrorCodeEnumErrorCodeDosAPIDenial ErrorHandlerErrorCodeEnum = "ERROR_CODE_DOS_API_DENIAL"
	ErrorHandlerErrorCodeEnumErrorCodeTimeout      ErrorHandlerErrorCodeEnum = "ERROR_CODE_TIMEOUT"
)

func (e ErrorHandlerErrorCodeEnum) ToPointer() *ErrorHandlerErrorCodeEnum {
	return &e
}

func (e *ErrorHandlerErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ERROR_CODE_UNSPECIFIED":
		fallthrough
	case "ERROR_CODE_DEFAULT":
		fallthrough
	case "ERROR_CODE_OVER_QUOTA":
		fallthrough
	case "ERROR_CODE_DOS_API_DENIAL":
		fallthrough
	case "ERROR_CODE_TIMEOUT":
		*e = ErrorHandlerErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorHandlerErrorCodeEnum: %v", v)
	}
}

// ErrorHandler - Custom static error page to be served when an error occurs.
type ErrorHandler struct {
	// Error condition this handler applies to.
	ErrorCode *ErrorHandlerErrorCodeEnum `json:"errorCode,omitempty"`
	// MIME type of file. Defaults to text/html.
	MimeType *string `json:"mimeType,omitempty"`
	// Static file content to be served for this error.
	StaticFile *string `json:"staticFile,omitempty"`
}
