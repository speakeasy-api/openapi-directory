/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GETProductRatePlanChargeType - Container for custom fields of a Product Rate Plan Charge object.
 * 
 */
public class GETProductRatePlanChargeType {
    /**
     * Class associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Class__NS")
    public String classNS;
    public GETProductRatePlanChargeType withClassNS(String classNS) {
        this.classNS = classNS;
        return this;
    }
    
    /**
     * Deferrred revenue account associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DeferredRevAccount__NS")
    public String deferredRevAccountNS;
    public GETProductRatePlanChargeType withDeferredRevAccountNS(String deferredRevAccountNS) {
        this.deferredRevAccountNS = deferredRevAccountNS;
        return this;
    }
    
    /**
     * Department associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Department__NS")
    public String departmentNS;
    public GETProductRatePlanChargeType withDepartmentNS(String departmentNS) {
        this.departmentNS = departmentNS;
        return this;
    }
    
    /**
     * Specifies whether the corresponding item in NetSuite is visible under child subsidiaries. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IncludeChildren__NS")
    public GETProductRatePlanChargeTypeIncludeChildrenNSEnum includeChildrenNS;
    public GETProductRatePlanChargeType withIncludeChildrenNS(GETProductRatePlanChargeTypeIncludeChildrenNSEnum includeChildrenNS) {
        this.includeChildrenNS = includeChildrenNS;
        return this;
    }
    
    /**
     * ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IntegrationId__NS")
    public String integrationIdNS;
    public GETProductRatePlanChargeType withIntegrationIdNS(String integrationIdNS) {
        this.integrationIdNS = integrationIdNS;
        return this;
    }
    
    /**
     * Status of the product rate plan charge's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IntegrationStatus__NS")
    public String integrationStatusNS;
    public GETProductRatePlanChargeType withIntegrationStatusNS(String integrationStatusNS) {
        this.integrationStatusNS = integrationStatusNS;
        return this;
    }
    
    /**
     * Type of item that is created in NetSuite for the product rate plan charge. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ItemType__NS")
    public GETProductRatePlanChargeTypeItemTypeNSEnum itemTypeNS;
    public GETProductRatePlanChargeType withItemTypeNS(GETProductRatePlanChargeTypeItemTypeNSEnum itemTypeNS) {
        this.itemTypeNS = itemTypeNS;
        return this;
    }
    
    /**
     * Location associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Location__NS")
    public String locationNS;
    public GETProductRatePlanChargeType withLocationNS(String locationNS) {
        this.locationNS = locationNS;
        return this;
    }
    
    /**
     * Recognized revenue account associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RecognizedRevAccount__NS")
    public String recognizedRevAccountNS;
    public GETProductRatePlanChargeType withRecognizedRevAccountNS(String recognizedRevAccountNS) {
        this.recognizedRevAccountNS = recognizedRevAccountNS;
        return this;
    }
    
    /**
     * End date condition of the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RevRecEnd__NS")
    public GETProductRatePlanChargeTypeRevRecEndNSEnum revRecEndNS;
    public GETProductRatePlanChargeType withRevRecEndNS(GETProductRatePlanChargeTypeRevRecEndNSEnum revRecEndNS) {
        this.revRecEndNS = revRecEndNS;
        return this;
    }
    
    /**
     * Start date condition of the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RevRecStart__NS")
    public GETProductRatePlanChargeTypeRevRecStartNSEnum revRecStartNS;
    public GETProductRatePlanChargeType withRevRecStartNS(GETProductRatePlanChargeTypeRevRecStartNSEnum revRecStartNS) {
        this.revRecStartNS = revRecStartNS;
        return this;
    }
    
    /**
     * Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RevRecTemplateType__NS")
    public String revRecTemplateTypeNS;
    public GETProductRatePlanChargeType withRevRecTemplateTypeNS(String revRecTemplateTypeNS) {
        this.revRecTemplateTypeNS = revRecTemplateTypeNS;
        return this;
    }
    
    /**
     * Subsidiary associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Subsidiary__NS")
    public String subsidiaryNS;
    public GETProductRatePlanChargeType withSubsidiaryNS(String subsidiaryNS) {
        this.subsidiaryNS = subsidiaryNS;
        return this;
    }
    
    /**
     * Date when the product rate plan charge was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SyncDate__NS")
    public String syncDateNS;
    public GETProductRatePlanChargeType withSyncDateNS(String syncDateNS) {
        this.syncDateNS = syncDateNS;
        return this;
    }
    
    /**
     * Specifies where (to what charge type) the discount will be applied. These field values are case-sensitive.
     * 
     * Permissible values:
     * - RECURRING
     * - USAGE
     * - ONETIMERECURRING
     * - ONETIMEUSAGE
     * - RECURRINGUSAGE
     * - ONETIMERECURRINGUSAGE
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applyDiscountTo")
    public String applyDiscountTo;
    public GETProductRatePlanChargeType withApplyDiscountTo(String applyDiscountTo) {
        this.applyDiscountTo = applyDiscountTo;
        return this;
    }
    
    /**
     * The bill cycle day (BCD) for the charge. The BCD determines which day of the month or week the customer is billed. The BCD value in the account can override the BCD in this object.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billingDay")
    public String billingDay;
    public GETProductRatePlanChargeType withBillingDay(String billingDay) {
        this.billingDay = billingDay;
        return this;
    }
    
    /**
     * The billing period for the charge. The start day of the billing period is also called the bill cycle day (BCD).
     * 
     * Values:
     * - Month
     * - Quarter
     * - Annual
     * - Semi-Annual
     * - Specific Months
     * - Week
     * - Specific_Weeks
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billingPeriod")
    public String billingPeriod;
    public GETProductRatePlanChargeType withBillingPeriod(String billingPeriod) {
        this.billingPeriod = billingPeriod;
        return this;
    }
    
    /**
     * Aligns charges within the same subscription if multiple charges begin on different dates.
     * 
     * Possible values:
     * - AlignToCharge
     * - AlignToSubscriptionStart
     * - AlignToTermStart
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billingPeriodAlignment")
    public String billingPeriodAlignment;
    public GETProductRatePlanChargeType withBillingPeriodAlignment(String billingPeriodAlignment) {
        this.billingPeriodAlignment = billingPeriodAlignment;
        return this;
    }
    
    /**
     * The billing timing for the charge. You can choose to bill for charges in advance or in arrears.
     * 
     * Values:
     * - In Advance
     * - In Arrears
     * 
     * **Note:** This feature is in Limited Availability. If you wish to have access to the feature, submit a request at [Zuora Global Support](https://support.zuora.com). 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billingTiming")
    public String billingTiming;
    public GETProductRatePlanChargeType withBillingTiming(String billingTiming) {
        this.billingTiming = billingTiming;
        return this;
    }
    
    /**
     * This field is for Zuora Internal Use only. See the **pricing** field for the same information as this field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chargeModelConfigurations")
    public java.util.Map<String, Object> chargeModelConfigurations;
    public GETProductRatePlanChargeType withChargeModelConfigurations(java.util.Map<String, Object> chargeModelConfigurations) {
        this.chargeModelConfigurations = chargeModelConfigurations;
        return this;
    }
    
    /**
     * The default quantity of units.  This field is required if you use a per-unit charge model.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultQuantity")
    public String defaultQuantity;
    public GETProductRatePlanChargeType withDefaultQuantity(String defaultQuantity) {
        this.defaultQuantity = defaultQuantity;
        return this;
    }
    
    /**
     * Usually a brief line item summary of the Rate Plan Charge.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public GETProductRatePlanChargeType withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The class that the discount belongs to. The discount class defines the order in which discount product rate plan charges are applied.
     * 
     * For more information, see [Manage Discount Classes](https://knowledgecenter.zuora.com/BC_Subscription_Management/Product_Catalog/B_Charge_Models/Manage_Discount_Classes).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discountClass")
    public String discountClass;
    public GETProductRatePlanChargeType withDiscountClass(String discountClass) {
        this.discountClass = discountClass;
        return this;
    }
    
    /**
     * The level of the discount. 
     * 
     * Values:
     * - RatePlan
     * - Subscription
     * - Account
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discountLevel")
    public String discountLevel;
    public GETProductRatePlanChargeType withDiscountLevel(String discountLevel) {
        this.discountLevel = discountLevel;
        return this;
    }
    
    /**
     * Defines when the charge ends after the charge trigger date. If the subscription ends before the charge end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the charge end date.
     * 
     * Values:
     * - Subscription_End
     * - Fixed_Period
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endDateCondition")
    public String endDateCondition;
    public GETProductRatePlanChargeType withEndDateCondition(String endDateCondition) {
        this.endDateCondition = endDateCondition;
        return this;
    }
    
    /**
     * Container for finance information of a rate plan charge.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("financeInformation")
    public GETProductRatePlanChargeTypeFinanceInformation financeInformation;
    public GETProductRatePlanChargeType withFinanceInformation(GETProductRatePlanChargeTypeFinanceInformation financeInformation) {
        this.financeInformation = financeInformation;
        return this;
    }
    
    /**
     * The pricing formula to calculate the actual rating amount for each usage record.
     * 
     * This field is only available for the usage-based charges that use the Multi-Attribute Pricing charge model. The charge model is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("formula")
    public String formula;
    public GETProductRatePlanChargeType withFormula(String formula) {
        this.formula = formula;
        return this;
    }
    
    /**
     * Unique product rate-plan charge ID.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public GETProductRatePlanChargeType withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Specifies the number of units in the base set of units when the charge model is Overage.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("includedUnits")
    public String includedUnits;
    public GETProductRatePlanChargeType withIncludedUnits(String includedUnits) {
        this.includedUnits = includedUnits;
        return this;
    }
    
    /**
     * The list price base for the product rate plan charge.
     * 
     * Values:
     * - Month
     * - Billing Period
     * - Per_Week
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("listPriceBase")
    public String listPriceBase;
    public GETProductRatePlanChargeType withListPriceBase(String listPriceBase) {
        this.listPriceBase = listPriceBase;
        return this;
    }
    
    /**
     * Specifies the maximum number of units for this charge. Use this field and the `minQuantity` field to create a range of units allowed in a product rate plan charge.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxQuantity")
    public String maxQuantity;
    public GETProductRatePlanChargeType withMaxQuantity(String maxQuantity) {
        this.maxQuantity = maxQuantity;
        return this;
    }
    
    /**
     * Specifies the minimum number of units for this charge. Use this field and the `maxQuantity` field to create a range of units allowed in a product rate plan charge.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minQuantity")
    public String minQuantity;
    public GETProductRatePlanChargeType withMinQuantity(String minQuantity) {
        this.minQuantity = minQuantity;
        return this;
    }
    
    /**
     * Charge model which determines how charges are calculated. Charge models must be individually activated in Zuora Billing administration. 
     * 
     * Possible values are:
     * - `FlatFee`
     * - `PerUnit`
     * - `Overage`
     * - `Volume`
     * - `Tiered`
     * - `TieredWithOverage`
     * - `DiscountFixedAmount`
     * - `DiscountPercentage`
     * - `MultiAttributePricing` (available only if you have the Multi-Attribute Pricing charge model enabled. The charge model is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.)
     * - `PreratedPerUnit` (available only if you have the Pre-rated Per Unit Pricing charge model enabled. The charge model is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.)
     * - `PreratedPricing` (available only if you have the Pre-rated Pricing charge model enabled. The charge model is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.)
     * - `HighWatermarkVolumePricing` (available only if you have the High Water Mark Volume Pricing charge model enabled. The charge model is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.)
     * - `HighWatermarkTieredPricing` (available only if you have the High Water Mark Tiered Pricing charge model enabled. The charge model is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.)
     * 
     * The value of the `pricing` field contains details about these charge models and the value of `pricingSummary` field contains their associated pricing summary values.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("model")
    public String model;
    public GETProductRatePlanChargeType withModel(String model) {
        this.model = model;
        return this;
    }
    
    /**
     * Name of the product rate-plan charge. (Not required to be unique.)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public GETProductRatePlanChargeType withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Value specifies the number of periods used in the smoothing model calculations Used when overage smoothing model is `RollingWindow` or `Rollover`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numberOfPeriods")
    public Long numberOfPeriods;
    public GETProductRatePlanChargeType withNumberOfPeriods(Long numberOfPeriods) {
        this.numberOfPeriods = numberOfPeriods;
        return this;
    }
    
    /**
     * Value specifies when to calculate overage charges.
     * 
     * Values:
     * - EndOfSmoothingPeriod
     * - PerBillingPeriod
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("overageCalculationOption")
    public String overageCalculationOption;
    public GETProductRatePlanChargeType withOverageCalculationOption(String overageCalculationOption) {
        this.overageCalculationOption = overageCalculationOption;
        return this;
    }
    
    /**
     * Determines whether to credit the customer with unused units of usage.
     * 
     * Values:
     * - NoCredit
     * - CreditBySpecificRate
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("overageUnusedUnitsCreditOption")
    public String overageUnusedUnitsCreditOption;
    public GETProductRatePlanChargeType withOverageUnusedUnitsCreditOption(String overageUnusedUnitsCreditOption) {
        this.overageUnusedUnitsCreditOption = overageUnusedUnitsCreditOption;
        return this;
    }
    
    /**
     * The number of periods to which prepayment is set. 
     * 
     * **Note:** This field is only available if you already have the prepayment feature enabled. The prepayment feature is deprecated and available only for backward compatibility. Zuora does not support enabling this feature anymore.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prepayPeriods")
    public Long prepayPeriods;
    public GETProductRatePlanChargeType withPrepayPeriods(Long prepayPeriods) {
        this.prepayPeriods = prepayPeriods;
        return this;
    }
    
    /**
     * Applies an automatic price change when a termed subscription is renewed and the following applies:
     * 
     * 1. AutomatedPriceChange setting is on
     * 2. Charge type is not one-time
     * 3. Charge model is not discount fixed amount
     * 
     * Values:
     * - NoChange (default)
     * - SpecificPercentageValue
     * - UseLatestProductCatalogPricing
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priceChangeOption")
    public String priceChangeOption;
    public GETProductRatePlanChargeType withPriceChangeOption(String priceChangeOption) {
        this.priceChangeOption = priceChangeOption;
        return this;
    }
    
    /**
     * Specifies the percentage to increase or decrease the price of a termed subscription's renewal. Use this field if you set the `PriceChangeOption` value to `SpecificPercentageValue`.
     * 
     * 1. AutomatedPriceChange setting is on
     * 2. Charge type is not one-time
     * 3. Charge model is not discount fixed amount
     * 
     * Values: a decimal between -100 and 100
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priceIncreasePercentage")
    public String priceIncreasePercentage;
    public GETProductRatePlanChargeType withPriceIncreasePercentage(String priceIncreasePercentage) {
        this.priceIncreasePercentage = priceIncreasePercentage;
        return this;
    }
    
    /**
     * One or more price charge models with attributes that further describe the model. 
     * Some attributes show as null values when not applicable.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pricing")
    public GETProductRatePlanChargePricingType[] pricing;
    public GETProductRatePlanChargeType withPricing(GETProductRatePlanChargePricingType[] pricing) {
        this.pricing = pricing;
        return this;
    }
    
    /**
     * A concise description of the charge model and pricing that is suitable to show to your customers. When the rate plan charge model is `Tiered` and multi-currency is enabled, this field includes an array of string of each currency, and each string of currency includes tier price description separated by comma.
     * 
     * For the following charge models, the value of this field is an empty string:
     * - Multi-Attribute Pricing
     * - High Water Mark Tiered Pricing
     * - High Water Mark Volume Pricing
     * - Pre-Rated Per Unit Pricing
     * - Pre-Rated Pricing
     * 
     * The charge models are available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pricingSummary")
    public String[] pricingSummary;
    public GETProductRatePlanChargeType withPricingSummary(String[] pricingSummary) {
        this.pricingSummary = pricingSummary;
        return this;
    }
    
    /**
     * Container for the application details about a discount product rate plan charge. 
     * 
     * Only discount product rate plan charges have values in this field.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("productDiscountApplyDetails")
    public GETProductDiscountApplyDetailsType[] productDiscountApplyDetails;
    public GETProductRatePlanChargeType withProductDiscountApplyDetails(GETProductDiscountApplyDetailsType[] productDiscountApplyDetails) {
        this.productDiscountApplyDetails = productDiscountApplyDetails;
        return this;
    }
    
    /**
     * Specifies a rating group based on which usage records are rated.
     * 
     * Possible values:
     * 
     * - `ByBillingPeriod` (default): The rating is based on all the usages in a billing period.
     * - `ByUsageStartDate`: The rating is based on all the usages on the same usage start date. 
     * - `ByUsageRecord`: The rating is based on each usage record.
     * - `ByUsageUpload`: The rating is based on all the  usages in a uploaded usage file (`.xls` or `.csv`).
     * - `ByGroupId`: The rating is based on all the usages in a custom group.
     * 
     * **Note:** 
     * - The `ByBillingPeriod` value can be applied for all charge models. 
     * - The `ByUsageStartDate`, `ByUsageRecord`, and `ByUsageUpload` values can only be applied for per unit, volume pricing, and tiered pricing charge models. 
     * - The `ByGroupId` value is only available if you have the Active Rating feature enabled.
     * - Use this field only for Usage charges. One-Time Charges and Recurring Charges return `NULL`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ratingGroup")
    public String ratingGroup;
    public GETProductRatePlanChargeType withRatingGroup(String ratingGroup) {
        this.ratingGroup = ratingGroup;
        return this;
    }
    
    /**
     * Associates this product rate plan charge with a specific revenue recognition code. The value is a valid revenue recognition code.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("revRecCode")
    public String revRecCode;
    public GETProductRatePlanChargeType withRevRecCode(String revRecCode) {
        this.revRecCode = revRecCode;
        return this;
    }
    
    /**
     * Specifies when revenue recognition begins.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("revRecTriggerCondition")
    public GETProductRatePlanChargeTypeRevRecTriggerConditionEnum revRecTriggerCondition;
    public GETProductRatePlanChargeType withRevRecTriggerCondition(GETProductRatePlanChargeTypeRevRecTriggerConditionEnum revRecTriggerCondition) {
        this.revRecTriggerCondition = revRecTriggerCondition;
        return this;
    }
    
    /**
     * The name of the revenue recognition rule governing the revenue schedule.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("revenueRecognitionRuleName")
    public String revenueRecognitionRuleName;
    public GETProductRatePlanChargeType withRevenueRecognitionRuleName(String revenueRecognitionRuleName) {
        this.revenueRecognitionRuleName = revenueRecognitionRuleName;
        return this;
    }
    
    /**
     * Specifies the smoothing model for an overage smoothing charge model or an tiered with overage model, which is an advanced type of a usage model that avoids spikes in usage charges. If a customer's usage spikes in a single period, then an overage smoothing model eases overage charges by considering usage and multiple periods.
     * 
     * One of the following values shows which smoothing model will be applied to the charge when `Overage` or `Tiered with Overage` is used:
     * 
     * - `RollingWindow` considers a number of periods to smooth usage. The rolling window starts and increments forward based on billing frequency. When allowed usage is met, then period resets and a new window begins.
     * - `Rollover` considers a fixed number of periods before calculating usage. The net balance at the end of a period is unused usage, which is carried over to the next period's balance.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("smoothingModel")
    public String smoothingModel;
    public GETProductRatePlanChargeType withSmoothingModel(String smoothingModel) {
        this.smoothingModel = smoothingModel;
        return this;
    }
    
    /**
     * When the billing period is set to `Specific` Months then this positive integer reflects the number of months for billing period charges.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("specificBillingPeriod")
    public Long specificBillingPeriod;
    public GETProductRatePlanChargeType withSpecificBillingPeriod(Long specificBillingPeriod) {
        this.specificBillingPeriod = specificBillingPeriod;
        return this;
    }
    
    /**
     * Specifies the tax code for taxation rules; used by Zuora Tax.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxCode")
    public String taxCode;
    public GETProductRatePlanChargeType withTaxCode(String taxCode) {
        this.taxCode = taxCode;
        return this;
    }
    
    /**
     * Specifies how to define taxation for the charge; used by Zuora Tax. Possible values are: `TaxExclusive`, `TaxInclusive`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxMode")
    public String taxMode;
    public GETProductRatePlanChargeType withTaxMode(String taxMode) {
        this.taxMode = taxMode;
        return this;
    }
    
    /**
     * Specifies whether the charge is taxable; used by Zuora Tax. Possible values are:`true`, `false`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxable")
    public Boolean taxable;
    public GETProductRatePlanChargeType withTaxable(Boolean taxable) {
        this.taxable = taxable;
        return this;
    }
    
    /**
     * Specifies when to start billing the customer for the charge.
     * 
     * Values: one of the following:
     * - `ContractEffective` is the date when the subscription's contract goes into effect and the charge is ready to be billed.
     * - `ServiceActivation` is the date when the services or products for a subscription have been activated and the customers have access.
     * - `CustomerAcceptance` is when the customer accepts the services or products for a subscription. 
     * - `SpecificDate` is the date specified.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("triggerEvent")
    public String triggerEvent;
    public GETProductRatePlanChargeType withTriggerEvent(String triggerEvent) {
        this.triggerEvent = triggerEvent;
        return this;
    }
    
    /**
     * The type of charge. Possible values are: `OneTime`, `Recurring`, `Usage`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;
    public GETProductRatePlanChargeType withType(String type) {
        this.type = type;
        return this;
    }
    
    /**
     * Describes the Units of Measure (uom) configured in **Settings &gt; Billing** for the productRatePlanCharges.
     * 
     * Values: `Each`, `License`, `Seat`, or `null`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uom")
    public String uom;
    public GETProductRatePlanChargeType withUom(String uom) {
        this.uom = uom;
        return this;
    }
    
    /**
     * Specifies the length of the period during which the charge is active. If this period ends before the subscription ends, the charge ends when this period ends.
     * If the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge end date will change accordingly up to the original period end.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("upToPeriods")
    public Long upToPeriods;
    public GETProductRatePlanChargeType withUpToPeriods(Long upToPeriods) {
        this.upToPeriods = upToPeriods;
        return this;
    }
    
    /**
     * The period type used to define when the charge ends.
     * 
     * Values:
     * - Billing_Periods
     * - Days
     * - Weeks
     * - Months
     * - Years
     *   
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("upToPeriodsType")
    public String upToPeriodsType;
    public GETProductRatePlanChargeType withUpToPeriodsType(String upToPeriodsType) {
        this.upToPeriodsType = upToPeriodsType;
        return this;
    }
    
    /**
     * Determines how Zuora processes usage records for per-unit usage charges. 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("usageRecordRatingOption")
    public String usageRecordRatingOption;
    public GETProductRatePlanChargeType withUsageRecordRatingOption(String usageRecordRatingOption) {
        this.usageRecordRatingOption = usageRecordRatingOption;
        return this;
    }
    
    /**
     * Determines whether to define a new accounting code for the new discount charge.
     * Values: `true`, `false`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("useDiscountSpecificAccountingCode")
    public Boolean useDiscountSpecificAccountingCode;
    public GETProductRatePlanChargeType withUseDiscountSpecificAccountingCode(Boolean useDiscountSpecificAccountingCode) {
        this.useDiscountSpecificAccountingCode = useDiscountSpecificAccountingCode;
        return this;
    }
    
    /**
     * Shows the tenant-level percentage uplift value for an automatic price change to a termed subscription's renewal. You set the tenant uplift value in the web-based UI: **Settings &gt; Billing &gt; Define Default Subscription Settings**.
     * 
     * Values: `true`, `false`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("useTenantDefaultForPriceChange")
    public Boolean useTenantDefaultForPriceChange;
    public GETProductRatePlanChargeType withUseTenantDefaultForPriceChange(Boolean useTenantDefaultForPriceChange) {
        this.useTenantDefaultForPriceChange = useTenantDefaultForPriceChange;
        return this;
    }
    
}
