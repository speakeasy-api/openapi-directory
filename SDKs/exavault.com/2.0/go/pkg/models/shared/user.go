// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// UserRelationshipsHomeResourceDataTypeEnum - Type is resource.
type UserRelationshipsHomeResourceDataTypeEnum string

const (
	UserRelationshipsHomeResourceDataTypeEnumResource UserRelationshipsHomeResourceDataTypeEnum = "resource"
)

func (e *UserRelationshipsHomeResourceDataTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "resource":
		*e = UserRelationshipsHomeResourceDataTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserRelationshipsHomeResourceDataTypeEnum: %s", s)
	}
}

type UserRelationshipsHomeResourceData struct {
	// ID of home directory resource.
	ID *int64 `json:"id,omitempty"`
	// Type is resource.
	Type *UserRelationshipsHomeResourceDataTypeEnum `json:"type,omitempty"`
}

type UserRelationshipsHomeResource struct {
	Data *UserRelationshipsHomeResourceData `json:"data,omitempty"`
}

// UserRelationshipsOwnerAccountDataTypeEnum - Type is account.
type UserRelationshipsOwnerAccountDataTypeEnum string

const (
	UserRelationshipsOwnerAccountDataTypeEnumAccount UserRelationshipsOwnerAccountDataTypeEnum = "account"
)

func (e *UserRelationshipsOwnerAccountDataTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "account":
		*e = UserRelationshipsOwnerAccountDataTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserRelationshipsOwnerAccountDataTypeEnum: %s", s)
	}
}

type UserRelationshipsOwnerAccountData struct {
	// ID of the account.
	ID *int `json:"id,omitempty"`
	// Type is account.
	Type *UserRelationshipsOwnerAccountDataTypeEnum `json:"type,omitempty"`
}

type UserRelationshipsOwnerAccount struct {
	Data *UserRelationshipsOwnerAccountData `json:"data,omitempty"`
}

// UserRelationships - Home resource and owner account relationship data for the user.
type UserRelationships struct {
	HomeResource *UserRelationshipsHomeResource `json:"homeResource,omitempty"`
	OwnerAccount UserRelationshipsOwnerAccount  `json:"ownerAccount"`
}

// User - Object contains user properties.
type User struct {
	// Attributes of the user including expiration, home directory, and permissions.
	Attributes *UserAttributes `json:"attributes,omitempty"`
	// ID of the user.
	ID *int `json:"id,omitempty"`
	// Home resource and owner account relationship data for the user.
	Relationships *UserRelationships `json:"relationships,omitempty"`
	// Type of object being returned. Always "user"
	Type *string `json:"type,omitempty"`
}
