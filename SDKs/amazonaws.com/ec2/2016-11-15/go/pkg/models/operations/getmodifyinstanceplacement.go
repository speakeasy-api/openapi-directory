// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETModifyInstancePlacementActionEnum
type GETModifyInstancePlacementActionEnum string

const (
	GETModifyInstancePlacementActionEnumModifyInstancePlacement GETModifyInstancePlacementActionEnum = "ModifyInstancePlacement"
)

func (e *GETModifyInstancePlacementActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ModifyInstancePlacement":
		*e = GETModifyInstancePlacementActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyInstancePlacementActionEnum: %s", s)
	}
}

// GETModifyInstancePlacementAffinityEnum - The affinity setting for the instance.
type GETModifyInstancePlacementAffinityEnum string

const (
	GETModifyInstancePlacementAffinityEnumDefault GETModifyInstancePlacementAffinityEnum = "default"
	GETModifyInstancePlacementAffinityEnumHost    GETModifyInstancePlacementAffinityEnum = "host"
)

func (e *GETModifyInstancePlacementAffinityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "default":
		fallthrough
	case "host":
		*e = GETModifyInstancePlacementAffinityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyInstancePlacementAffinityEnum: %s", s)
	}
}

// GETModifyInstancePlacementTenancyEnum - <p>The tenancy for the instance.</p> <note> <p>For T3 instances, you can't change the tenancy from <code>dedicated</code> to <code>host</code>, or from <code>host</code> to <code>dedicated</code>. Attempting to make one of these unsupported tenancy changes results in the <code>InvalidTenancy</code> error code.</p> </note>
type GETModifyInstancePlacementTenancyEnum string

const (
	GETModifyInstancePlacementTenancyEnumDedicated GETModifyInstancePlacementTenancyEnum = "dedicated"
	GETModifyInstancePlacementTenancyEnumHost      GETModifyInstancePlacementTenancyEnum = "host"
)

func (e *GETModifyInstancePlacementTenancyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "dedicated":
		fallthrough
	case "host":
		*e = GETModifyInstancePlacementTenancyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyInstancePlacementTenancyEnum: %s", s)
	}
}

// GETModifyInstancePlacementVersionEnum
type GETModifyInstancePlacementVersionEnum string

const (
	GETModifyInstancePlacementVersionEnumTwoThousandAndSixteen1115 GETModifyInstancePlacementVersionEnum = "2016-11-15"
)

func (e *GETModifyInstancePlacementVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETModifyInstancePlacementVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyInstancePlacementVersionEnum: %s", s)
	}
}

type GETModifyInstancePlacementRequest struct {
	Action GETModifyInstancePlacementActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The affinity setting for the instance.
	Affinity *GETModifyInstancePlacementAffinityEnum `queryParam:"style=form,explode=true,name=Affinity"`
	// The Group Id of a placement group. You must specify the Placement Group <b>Group Id</b> to launch an instance in a shared placement group.
	GroupID *string `queryParam:"style=form,explode=true,name=GroupId"`
	// <p>The name of the placement group in which to place the instance. For spread placement groups, the instance must have a tenancy of <code>default</code>. For cluster and partition placement groups, the instance must have a tenancy of <code>default</code> or <code>dedicated</code>.</p> <p>To remove an instance from a placement group, specify an empty string ("").</p>
	GroupName *string `queryParam:"style=form,explode=true,name=GroupName"`
	// The ID of the Dedicated Host with which to associate the instance.
	HostID *string `queryParam:"style=form,explode=true,name=HostId"`
	// The ARN of the host resource group in which to place the instance.
	HostResourceGroupArn *string `queryParam:"style=form,explode=true,name=HostResourceGroupArn"`
	// The ID of the instance that you are modifying.
	InstanceID string `queryParam:"style=form,explode=true,name=InstanceId"`
	// The number of the partition in which to place the instance. Valid only if the placement group strategy is set to <code>partition</code>.
	PartitionNumber *int64 `queryParam:"style=form,explode=true,name=PartitionNumber"`
	// <p>The tenancy for the instance.</p> <note> <p>For T3 instances, you can't change the tenancy from <code>dedicated</code> to <code>host</code>, or from <code>host</code> to <code>dedicated</code>. Attempting to make one of these unsupported tenancy changes results in the <code>InvalidTenancy</code> error code.</p> </note>
	Tenancy           *GETModifyInstancePlacementTenancyEnum `queryParam:"style=form,explode=true,name=Tenancy"`
	Version           GETModifyInstancePlacementVersionEnum  `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                                `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETModifyInstancePlacementResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
