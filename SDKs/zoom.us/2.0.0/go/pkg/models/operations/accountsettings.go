// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
)

// AccountSettingsOptionEnum - `meeting_authentication`: Use this query parameter to view [meeting authentication configuration](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) applied on the account.<br>`recording_authentication`: Use this query parameter to view [recording authentication configuration](https://support.zoom.us/hc/en-us/articles/360037756671-Authentication-Profiles-for-Cloud-Recordings) applied on the account.<br>`security`: Use this query parameter to view security settings such as password requirements for user login, two factor authentication etc., applied on the account.<br>
// `meeting_security`: Use this query parameter to view meeting security settings applied on the account.<br>
type AccountSettingsOptionEnum string

const (
	AccountSettingsOptionEnumMeetingAuthentication   AccountSettingsOptionEnum = "meeting_authentication"
	AccountSettingsOptionEnumRecordingAuthentication AccountSettingsOptionEnum = "recording_authentication"
)

func (e *AccountSettingsOptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "meeting_authentication":
		fallthrough
	case "recording_authentication":
		*e = AccountSettingsOptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountSettingsOptionEnum: %s", s)
	}
}

type AccountSettingsRequest struct {
	// The account ID.
	AccountID string `pathParam:"style=simple,explode=false,name=accountId"`
	// Provide the name of the field by which you would like to filter the response. For example, if you provide "host_video" as the value of this field, you will get a response similar to the following:<br>
	// {
	//     "schedule_meeting": {
	//         "host_video": false
	//     }
	// }
	// <br>You can provide multiple values by separating them with commas(example: "host_video,participant_video‚Äù).
	CustomQueryFields *string `queryParam:"style=form,explode=true,name=custom_query_fields"`
	// `meeting_authentication`: Use this query parameter to view [meeting authentication configuration](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) applied on the account.<br>`recording_authentication`: Use this query parameter to view [recording authentication configuration](https://support.zoom.us/hc/en-us/articles/360037756671-Authentication-Profiles-for-Cloud-Recordings) applied on the account.<br>`security`: Use this query parameter to view security settings such as password requirements for user login, two factor authentication etc., applied on the account.<br>
	// `meeting_security`: Use this query parameter to view meeting security settings applied on the account.<br>
	Option *AccountSettingsOptionEnum `queryParam:"style=form,explode=true,name=option"`
}

// AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum - Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be **automatically disabled**. <br><br>The value of this field can be one of the following:<br>
// `enhanced_encryption`: Enhanced encryption. Encryption is stored in the cloud if you enable this option. <br>
//
// `e2ee`: [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the following features: join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.
type AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum string

const (
	AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnumEnhancedEncryption AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum = "enhanced_encryption"
	AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnumE2ee               AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum = "e2ee"
)

func (e *AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "enhanced_encryption":
		fallthrough
	case "e2ee":
		*e = AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum: %s", s)
	}
}

type AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum string

const (
	AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnumZero  AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum = "0"
	AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnumFour  AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum = "4"
	AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnumFive  AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum = "5"
	AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnumSix   AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum = "6"
	AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnumSeven AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum = "7"
	AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnumEight AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum = "8"
)

func (e *AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		fallthrough
	case "8":
		*e = AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum: %s", s)
	}
}

// AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirement - Meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
type AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirement struct {
	ConsecutiveCharactersLength *AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum
	// If set to `true`, the passcode must contain at least 1 letter (such as a,b,c...).
	//
	HaveLetter *bool
	// If set to `true`, the passcode must contain at least 1 number (such as 1,2,3...).
	HaveNumber *bool
	// If set to `true`, the passcode must have at least 1 special character (!,@,#...).
	HaveSpecialCharacter *bool
	// If set to `true`, the passcode must include both uppercase and lowercase characters.
	HaveUpperAndLowerCharacters *bool
	// The minimum length that the meeting/webinar passcode needs to have.
	Length *int64
	// If set to `true`, the passcode must only contain numbers and no other characters.
	OnlyAllowNumeric *bool
	// If set to `true`, users will be informed if the provided passcode is weak.
	WeakEnhanceDetection *bool
}

// AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum -
//
// Specify who should be admitted to the waiting room. The value of this field can be one of the following:<br>
// `0`: All attendees<br> `1`: Users who are not in your account<br> `2`: Users who are not in your account and are not part of your whitelisted domains that are specified in
type AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum string

const (
	AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnumZero AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum = "0"
	AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnumOne  AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum = "1"
	AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnumTwo  AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum = "2"
)

func (e *AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "2":
		*e = AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum: %s", s)
	}
}

// AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettings - Specify the settings to be applied if waiting room is enabled.
type AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettings struct {
	//
	// Specify who should be admitted to the waiting room. The value of this field can be one of the following:<br>
	// `0`: All attendees<br> `1`: Users who are not in your account<br> `2`: Users who are not in your account and are not part of your whitelisted domains that are specified in
	ParticipantsToPlaceInWaitingRoom *AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum
	// Specify who can admit participants from the waiting room. The value of this field can be one of the following:<br>
	// `0`: Host and co-hosts only<br> `1`: Host, co-hosts, and anyone who bypassed the waiting room (only if host and co-hosts are not present).
	//
	//
	//
	UsersWhoCanAdmitParticipantsFromWaitingRoom *int64
	// If the value of the `participants_to_place_in_waiting_room` field is `2`, use this setting to specify the domains that can bypass the waiting room feature. Separate multiple domains with commas(example: "aaa.com,bbb.com").
	WhitelistedDomainsForWaitingRoom *string
}

type AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurity struct {
	// `true`: Require that all meetings are secured with at least one security option.
	//
	// This setting can only be disabled by Enterprise, ISV, Business (with more than 100 licenses), and Education accounts. [Learn more](https://marketplace.zoom.us/docs/guides/stay-up-to-date/announcements#meeting-security).
	AutoSecurity *bool
	// If set to `true`, meeting passcode will be encrypted and included in the invite link to allow participants to join with just one click without having to enter the passcode.
	//
	EmbedPasswordInJoinLink *bool
	// Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be **automatically disabled**. <br><br>The value of this field can be one of the following:<br>
	// `enhanced_encryption`: Enhanced encryption. Encryption is stored in the cloud if you enable this option. <br>
	//
	// `e2ee`: [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the following features: join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.
	EncryptionType *AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum
	// Allow use of end-to-end encryption for meetings. If set to `true`, you can specify the encryption type in `encryption_type` field.
	EndToEndEncryptedMeetings *bool
	// If set to `true`, all instant, and scheduled meetings that users can join via client, or room systems will be passcode-protected. The Personal Meeting ID (PMI) meetings are not included in this setting.
	MeetingPassword *bool
	// Meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
	MeetingPasswordRequirement *AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirement
	// Require passcode for participants joining by phone. If set to `true`, a numeric passcode will be required for participants joining by phone if your meeting has a passcode. For meeting with an alphanumeric passcode, a numeric version will be generated.
	PhonePassword *bool
	// If set to `true`, all Personal Meeting ID (PMI) meetings that users can join via client, or room systems will be passcode-protected.
	//
	PmiPassword *bool
	// Require a passcode for meetings which have already been scheduled.
	//
	RequirePasswordForScheduledMeeting *bool
	// Require a passcode for webinars which have already been scheduled.
	//
	RequirePasswordForScheduledWebinar *bool
	// When participants join a meeting, place them in a waiting room and require the host to admit them individually. Enabling the waiting room automatically disables the setting for allowing participants to join before host.
	//
	WaitingRoom *bool
	// Specify the settings to be applied if waiting room is enabled.
	WaitingRoomSettings *AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettings
	// If set to `true`, a passcode will be generated when scheduling a Webinar and participants require the passcode to join the Webinar.
	//
	WebinarPassword *bool
}

type AccountSettings200ApplicationXMLMeetingWebinarSecuritySettings struct {
	MeetingSecurity *AccountSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurity
}

// AccountSettings200ApplicationXML3PasswordRequirement - This object refers to the [enhanced password rules](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_bf8a25f6-9a66-447a-befd-f02ed3404f89) that allows Zoom account admins and owners to apply extra requiremets to the users' Zoom login password.
type AccountSettings200ApplicationXML3PasswordRequirement struct {
	// Specify the max length of consecutive characters(abcde...) that can be used in a password.
	// If you set the value of this field to `0`, no restriction will be applied on consecutive characters.
	//
	// If you would like to set this restriction, you can specify a number between 4 and 8 that define the maximum allowed length for consecutive characters in a password.
	//
	// The max allowed length will be `n-1` where `n` refers to the value you provide for this field.  For instance, if you provide `4` as the value, there can only be a maximum of `3` consecutive characters in a password(example: abc1x@8fdh).
	ConsecutiveCharactersLength *int64
	// If the value of this field is set to `true`, the password must have at least one special character(!, @, #...).
	HaveSpecialCharacter *bool
	// Specify a minimum length for the password. The password length can be from a minimum of 9 characters, up to 14 characters. If you provide `0` as the value of this field, this field will be disabled and not be used and the basic password length requirement (minimum of 8 characters) will be applied for the requirement.
	MinimumPasswordLength *int64
	// If the value of this field is set to `true`, user passwords will have to pass detection through a weak password dictionary in case hackers use simple passwords to sign in to your users‚Äô accounts.
	WeakEnhanceDetection *bool
}

// AccountSettings200ApplicationXML3SignInWithTwoFactorAuthEnum - Settings for 2FA( [two factor authentication](https://support.zoom.us/hc/en-us/articles/360038247071) ). The value can be one of the following:
// `all`: Two factor authentication will be enabled for all users in the account.<br>
// `none`: Two factor authentication is disabled.<br>
// `group`: Two factor authentication will be enabled for users belonging to specific groups. If 2FA is enabled for certain groups, the group IDs of the group(s) will be provided in the `sign_in_with_two_factor_auth_groups` field.<br>
// `role`: Two factor authentication will be enabled only for users assigned with specific roles in the account. If 2FA is enabled for specific roles, the role IDs will be provided in the
// `sign_in_with_two_factor_auth_roles` field.
type AccountSettings200ApplicationXML3SignInWithTwoFactorAuthEnum string

const (
	AccountSettings200ApplicationXML3SignInWithTwoFactorAuthEnumAll   AccountSettings200ApplicationXML3SignInWithTwoFactorAuthEnum = "all"
	AccountSettings200ApplicationXML3SignInWithTwoFactorAuthEnumGroup AccountSettings200ApplicationXML3SignInWithTwoFactorAuthEnum = "group"
	AccountSettings200ApplicationXML3SignInWithTwoFactorAuthEnumRole  AccountSettings200ApplicationXML3SignInWithTwoFactorAuthEnum = "role"
	AccountSettings200ApplicationXML3SignInWithTwoFactorAuthEnumNone  AccountSettings200ApplicationXML3SignInWithTwoFactorAuthEnum = "none"
)

func (e *AccountSettings200ApplicationXML3SignInWithTwoFactorAuthEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "all":
		fallthrough
	case "group":
		fallthrough
	case "role":
		fallthrough
	case "none":
		*e = AccountSettings200ApplicationXML3SignInWithTwoFactorAuthEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountSettings200ApplicationXML3SignInWithTwoFactorAuthEnum: %s", s)
	}
}

// AccountSettings200ApplicationXML3 - [Security settings](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_bf8a25f6-9a66-447a-befd-f02ed3404f89) of an Account.
type AccountSettings200ApplicationXML3 struct {
	// Only account administrators can change a user's username and picture.
	AdminChangeNamePic *bool
	// Hide billing information.
	HideBillingInfo *bool
	// Allow users to import photos from a photo library on a  device.
	ImportPhotosFromDevices *bool
	// This object refers to the [enhanced password rules](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_bf8a25f6-9a66-447a-befd-f02ed3404f89) that allows Zoom account admins and owners to apply extra requiremets to the users' Zoom login password.
	PasswordRequirement *AccountSettings200ApplicationXML3PasswordRequirement
	// Settings for User Sign In interval requirements after a period of inactivity. If enabled, this setting forces automatic logout of users in Zoom Client app after a set amount of time. <br>
	//
	// If this setting is disabled, the value of this field will be `0`. If the setting is enabled, the value of this field will indicate the **period of inactivity** in minutes after which, an inactive user will be automatically logged out of the Zoom Client. The value for the period of inactivity can be one of the following:<br>
	//
	// `5`: 5 minutes<br>
	// `10`: 10 minutes<br>
	// `15`: 15 minutes<br>
	// `30`: 30 minutes<br>
	// `45`: 45 minutes<br>
	// `60`: 60 minutes<br>
	// `90`: 90 minutes<br>
	// `120`: 120 minutes
	//
	SignAgainPeriodForInactivityOnClient *int64
	// Settings for User Sign In interval requirements after a period of inactivity. If enabled, this setting forces automatic logout of users in Zoom Web Portal after a set amount of time. <br>
	//
	// If this setting is disabled, the value of this field will be `0`. If the setting is enabled, the value of this field will indicate the **period of inactivity** in minutes after which, an inactive user will be automatically logged out of the Zoom Web Portal. The value for the period of inactivity can be one of the following:<br>
	//
	// `5`: 5 minutes<br>
	// `10`: 10 minutes<br>
	// `15`: 15 minutes<br>
	// `30`: 30 minutes<br>
	// `60`: 60 minutes<br>
	// `120`: 120 minutes
	//
	//
	//
	//
	SignAgainPeriodForInactivityOnWeb *int64
	// Settings for 2FA( [two factor authentication](https://support.zoom.us/hc/en-us/articles/360038247071) ). The value can be one of the following:
	// `all`: Two factor authentication will be enabled for all users in the account.<br>
	// `none`: Two factor authentication is disabled.<br>
	// `group`: Two factor authentication will be enabled for users belonging to specific groups. If 2FA is enabled for certain groups, the group IDs of the group(s) will be provided in the `sign_in_with_two_factor_auth_groups` field.<br>
	// `role`: Two factor authentication will be enabled only for users assigned with specific roles in the account. If 2FA is enabled for specific roles, the role IDs will be provided in the
	// `sign_in_with_two_factor_auth_roles` field.
	//
	SignInWithTwoFactorAuth *AccountSettings200ApplicationXML3SignInWithTwoFactorAuthEnum
	// This field contains group IDs of groups that have 2FA enabled. This field is only returned if the value of `sign_in_with_two_factor_auth` is `group`
	SignInWithTwoFactorAuthGroups []string
	// This field contains role IDs of roles that have 2FA enabled. This field is only returned if the value of `sign_in_with_two_factor_auth` is `role`.
	SignInWithTwoFactorAuthRoles []string
}

// AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnum1 - Authentication type
type AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnum1 string

const (
	AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnum1Internally              AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnum1 = "internally"
	AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnum1EnforceLogin            AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnum1 = "enforce_login"
	AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnum1EnforceLoginWithDomains AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnum1 = "enforce_login_with_domains"
)

func (e *AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnum1) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internally":
		fallthrough
	case "enforce_login":
		fallthrough
	case "enforce_login_with_domains":
		*e = AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnum1(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnum1: %s", s)
	}
}

type AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptions1 struct {
	// Authentication default option
	DefaultOption *bool
	// Authentication domians
	Domains *string
	// Authentication id
	ID *string
	// Authentication name
	Name *string
	// Authentication type
	Type *AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnum1
	// Authentication visible
	Visible *bool
}

type AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthentication1 struct {
	AuthenticationOptions []AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptions1
	// Only authenticated users can view cloud recordings
	RecordingAuthentication *bool
}

// AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnum -  Authentication type. Specify one of the following authentication types for the authentication profile:<br>
//   - `enforce_login`: This option allows any users to join the meeting or webinar, as long as they are signed into their Zoom account.
//   - `enforce_login_with_domains`: This option, allows you to specify a rule so that only those Zoom users whose email addresses contain a certain domain, can join the meeting or webinar. You can either add multiple domains using a comma in between and/or use a wildcard for listing domains.<br>
//   - `enforce_login_with_same_account`: This option allows users to join the meeting or webinar with the same Zoom account.
type AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnum string

const (
	AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnumEnforceLogin                AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnum = "enforce_login"
	AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnumEnforceLoginWithSameAccount AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnum = "enforce_login_with_same_account"
	AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnumEnforceLoginWithDomains     AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnum = "enforce_login_with_domains"
)

func (e *AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "enforce_login":
		fallthrough
	case "enforce_login_with_same_account":
		fallthrough
	case "enforce_login_with_domains":
		*e = AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnum: %s", s)
	}
}

type AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptions struct {
	// Authentication default option
	DefaultOption *bool
	// Authentication domians
	Domains *string
	// Authentication id
	ID *string
	// Authentication name
	Name *string
	//  Authentication type. Specify one of the following authentication types for the authentication profile:<br>
	//  * `enforce_login`: This option allows any users to join the meeting or webinar, as long as they are signed into their Zoom account.
	//  * `enforce_login_with_domains`: This option, allows you to specify a rule so that only those Zoom users whose email addresses contain a certain domain, can join the meeting or webinar. You can either add multiple domains using a comma in between and/or use a wildcard for listing domains.<br>
	//  * `enforce_login_with_same_account`: This option allows users to join the meeting or webinar with the same Zoom account.
	Type *AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnum
	// Authentication visible
	Visible *bool
}

type AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthentication struct {
	// Meeting Authentication Options
	AuthenticationOptions []AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptions
	// Only authenticated users can join meetings
	MeetingAuthentication *bool
}

type AccountSettings200ApplicationXMLAccountSettingsAuthenticationType string

const (
	AccountSettings200ApplicationXMLAccountSettingsAuthenticationTypeAccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthentication  AccountSettings200ApplicationXMLAccountSettingsAuthenticationType = "accountSettings_200ApplicationXML_AccountSettingsAuthentication_AccountSettingsAuthentication"
	AccountSettings200ApplicationXMLAccountSettingsAuthenticationTypeAccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthentication1 AccountSettings200ApplicationXMLAccountSettingsAuthenticationType = "accountSettings_200ApplicationXML_AccountSettingsAuthentication_AccountSettingsAuthentication1"
)

type AccountSettings200ApplicationXMLAccountSettingsAuthentication struct {
	AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthentication  *AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthentication
	AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthentication1 *AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthentication1

	Type AccountSettings200ApplicationXMLAccountSettingsAuthenticationType
}

func CreateAccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthentication(accountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthentication AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthentication) AccountSettings200ApplicationXMLAccountSettingsAuthentication {
	typ := AccountSettings200ApplicationXMLAccountSettingsAuthenticationTypeAccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthentication

	return AccountSettings200ApplicationXMLAccountSettingsAuthentication{
		AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthentication: &accountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthentication,
		Type: typ,
	}
}

func CreateAccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthentication1(accountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthentication1 AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthentication1) AccountSettings200ApplicationXMLAccountSettingsAuthentication {
	typ := AccountSettings200ApplicationXMLAccountSettingsAuthenticationTypeAccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthentication1

	return AccountSettings200ApplicationXMLAccountSettingsAuthentication{
		AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthentication1: &accountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthentication1,
		Type: typ,
	}
}

func (u *AccountSettings200ApplicationXMLAccountSettingsAuthentication) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	accountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthentication := new(AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthentication)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&accountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthentication); err == nil {
		u.AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthentication = accountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthentication
		u.Type = AccountSettings200ApplicationXMLAccountSettingsAuthenticationTypeAccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthentication
		return nil
	}

	accountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthentication1 := new(AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthentication1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&accountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthentication1); err == nil {
		u.AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthentication1 = accountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthentication1
		u.Type = AccountSettings200ApplicationXMLAccountSettingsAuthenticationTypeAccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthentication1
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u AccountSettings200ApplicationXMLAccountSettingsAuthentication) MarshalJSON() ([]byte, error) {
	if u.AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthentication != nil {
		return json.Marshal(u.AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthentication)
	}

	if u.AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthentication1 != nil {
		return json.Marshal(u.AccountSettings200ApplicationXMLAccountSettingsAuthenticationAccountSettingsAuthentication1)
	}

	return nil, nil
}

// AccountSettings200ApplicationXMLAccountSettingsEmailNotification - Account Settings: Notification.
type AccountSettings200ApplicationXMLAccountSettingsEmailNotification struct {
	// Notify when an alternative host is set or removed from a meeting.
	AlternativeHostReminder *bool
	// Notify the host and participants when a meeting is cancelled.
	CancelMeetingReminder *bool
	// Notify host when cloud recording is available.
	CloudRecordingAvaliableReminder *bool
	// Notify the host when participants join the meeting before them.
	JbhReminder *bool
	// Notify user when host licenses are running low.
	LowHostCountReminder *bool
	// Notify the host there is a meeting is scheduled, rescheduled, or cancelled.
	ScheduleForReminder *bool
}

// AccountSettings200ApplicationXMLAccountSettingsFeature - Account Settings: Feature.
type AccountSettings200ApplicationXMLAccountSettingsFeature struct {
	// Set the maximum number of participants a host can have in a single meeting.
	MeetingCapacity *int64
}

// AccountSettings200ApplicationXMLAccountSettingsInMeetingDataCenterRegionsEnum - If you have set the value of `custom_data_center_regions` to `true`, specify the data center regions that you would like to opt in to (country codes from among: ["EU", "HK", "AU", "IN", "LA", "TY", "CN", "US", "CA"]).
type AccountSettings200ApplicationXMLAccountSettingsInMeetingDataCenterRegionsEnum string

const (
	AccountSettings200ApplicationXMLAccountSettingsInMeetingDataCenterRegionsEnumEu AccountSettings200ApplicationXMLAccountSettingsInMeetingDataCenterRegionsEnum = "EU"
	AccountSettings200ApplicationXMLAccountSettingsInMeetingDataCenterRegionsEnumHk AccountSettings200ApplicationXMLAccountSettingsInMeetingDataCenterRegionsEnum = "HK"
	AccountSettings200ApplicationXMLAccountSettingsInMeetingDataCenterRegionsEnumAu AccountSettings200ApplicationXMLAccountSettingsInMeetingDataCenterRegionsEnum = "AU"
	AccountSettings200ApplicationXMLAccountSettingsInMeetingDataCenterRegionsEnumIn AccountSettings200ApplicationXMLAccountSettingsInMeetingDataCenterRegionsEnum = "IN"
	AccountSettings200ApplicationXMLAccountSettingsInMeetingDataCenterRegionsEnumTy AccountSettings200ApplicationXMLAccountSettingsInMeetingDataCenterRegionsEnum = "TY"
	AccountSettings200ApplicationXMLAccountSettingsInMeetingDataCenterRegionsEnumCn AccountSettings200ApplicationXMLAccountSettingsInMeetingDataCenterRegionsEnum = "CN"
	AccountSettings200ApplicationXMLAccountSettingsInMeetingDataCenterRegionsEnumUs AccountSettings200ApplicationXMLAccountSettingsInMeetingDataCenterRegionsEnum = "US"
	AccountSettings200ApplicationXMLAccountSettingsInMeetingDataCenterRegionsEnumCa AccountSettings200ApplicationXMLAccountSettingsInMeetingDataCenterRegionsEnum = "CA"
)

func (e *AccountSettings200ApplicationXMLAccountSettingsInMeetingDataCenterRegionsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EU":
		fallthrough
	case "HK":
		fallthrough
	case "AU":
		fallthrough
	case "IN":
		fallthrough
	case "TY":
		fallthrough
	case "CN":
		fallthrough
	case "US":
		fallthrough
	case "CA":
		*e = AccountSettings200ApplicationXMLAccountSettingsInMeetingDataCenterRegionsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountSettings200ApplicationXMLAccountSettingsInMeetingDataCenterRegionsEnum: %s", s)
	}
}

// AccountSettings200ApplicationXMLAccountSettingsInMeetingEntryExitChimeEnum - Play sound when participants join or leave.<br>`host` - Heard by host only.<br>`all` - Heard by host and all attendees.<br>`none` - Disable.
type AccountSettings200ApplicationXMLAccountSettingsInMeetingEntryExitChimeEnum string

const (
	AccountSettings200ApplicationXMLAccountSettingsInMeetingEntryExitChimeEnumHost AccountSettings200ApplicationXMLAccountSettingsInMeetingEntryExitChimeEnum = "host"
	AccountSettings200ApplicationXMLAccountSettingsInMeetingEntryExitChimeEnumAll  AccountSettings200ApplicationXMLAccountSettingsInMeetingEntryExitChimeEnum = "all"
	AccountSettings200ApplicationXMLAccountSettingsInMeetingEntryExitChimeEnumNone AccountSettings200ApplicationXMLAccountSettingsInMeetingEntryExitChimeEnum = "none"
)

func (e *AccountSettings200ApplicationXMLAccountSettingsInMeetingEntryExitChimeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "host":
		fallthrough
	case "all":
		fallthrough
	case "none":
		*e = AccountSettings200ApplicationXMLAccountSettingsInMeetingEntryExitChimeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountSettings200ApplicationXMLAccountSettingsInMeetingEntryExitChimeEnum: %s", s)
	}
}

type AccountSettings200ApplicationXMLAccountSettingsInMeetingVirtualBackgroundSettingsFiles struct {
	// Unique identifier of the file.
	ID *string
	// Indicates whether or not this file is the default virtual background file.
	IsDefault *bool
	// File name.
	Name *string
	// File size.
	Size *string
	// File type.
	Type *string
}

// AccountSettings200ApplicationXMLAccountSettingsInMeetingVirtualBackgroundSettings - Settings to manage virtual background.
type AccountSettings200ApplicationXMLAccountSettingsInMeetingVirtualBackgroundSettings struct {
	// Allow users to upload custom backgrounds.
	AllowUploadCustom *bool
	// Allow use of videos for virtual backgrounds.
	AllowVideos *bool
	// Enable virtual background.
	Enable *bool
	Files  []AccountSettings200ApplicationXMLAccountSettingsInMeetingVirtualBackgroundSettingsFiles
}

// AccountSettings200ApplicationXMLAccountSettingsInMeetingWhoCanShareScreenEnum - Indicates who can share their screen or content during meetings. The value can be one of the following: <br>
// `host`: Only host can share the screen.<br>
// `all`: Both hosts and attendees can share their screen during meetings. For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
type AccountSettings200ApplicationXMLAccountSettingsInMeetingWhoCanShareScreenEnum string

const (
	AccountSettings200ApplicationXMLAccountSettingsInMeetingWhoCanShareScreenEnumHost AccountSettings200ApplicationXMLAccountSettingsInMeetingWhoCanShareScreenEnum = "host"
	AccountSettings200ApplicationXMLAccountSettingsInMeetingWhoCanShareScreenEnumAll  AccountSettings200ApplicationXMLAccountSettingsInMeetingWhoCanShareScreenEnum = "all"
)

func (e *AccountSettings200ApplicationXMLAccountSettingsInMeetingWhoCanShareScreenEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "host":
		fallthrough
	case "all":
		*e = AccountSettings200ApplicationXMLAccountSettingsInMeetingWhoCanShareScreenEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountSettings200ApplicationXMLAccountSettingsInMeetingWhoCanShareScreenEnum: %s", s)
	}
}

// AccountSettings200ApplicationXMLAccountSettingsInMeetingWhoCanShareScreenWhenSomeoneIsSharingEnum - Indicates who is allowed to start sharing screen when someone else in the meeting is sharing their screen. The value can be one of the following:<br>
// `host`: Only a host can share the screen when someone else is sharing.<br>
// `all`: Anyone in the meeting is allowed to start sharing their screen when someone else is sharing. For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
type AccountSettings200ApplicationXMLAccountSettingsInMeetingWhoCanShareScreenWhenSomeoneIsSharingEnum string

const (
	AccountSettings200ApplicationXMLAccountSettingsInMeetingWhoCanShareScreenWhenSomeoneIsSharingEnumHost AccountSettings200ApplicationXMLAccountSettingsInMeetingWhoCanShareScreenWhenSomeoneIsSharingEnum = "host"
	AccountSettings200ApplicationXMLAccountSettingsInMeetingWhoCanShareScreenWhenSomeoneIsSharingEnumAll  AccountSettings200ApplicationXMLAccountSettingsInMeetingWhoCanShareScreenWhenSomeoneIsSharingEnum = "all"
)

func (e *AccountSettings200ApplicationXMLAccountSettingsInMeetingWhoCanShareScreenWhenSomeoneIsSharingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "host":
		fallthrough
	case "all":
		*e = AccountSettings200ApplicationXMLAccountSettingsInMeetingWhoCanShareScreenWhenSomeoneIsSharingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountSettings200ApplicationXMLAccountSettingsInMeetingWhoCanShareScreenWhenSomeoneIsSharingEnum: %s", s)
	}
}

// AccountSettings200ApplicationXMLAccountSettingsInMeeting - Account Settings: In Meeting.
type AccountSettings200ApplicationXMLAccountSettingsInMeeting struct {
	// Identify guest participants in a meeting or webinar.
	AlertGuestJoin *bool
	// Allow live streaming.
	AllowLiveStreaming *bool
	// If the value of this field is set to `true`, meeting participants and webinar panelists can be allowed to rename themselves during a meeting or a webinar.
	//
	AllowParticipantsToRename *bool
	// Show the Zoom desktop application when sharing screens.
	AllowShowZoomWindows *bool
	// Allow participants to use annotation tools to add information to shared screens.
	Annotation *bool
	// Allow an anonymous Q&A in a webinar.
	AnonymousQuestionAnswer *bool
	// Allow host to put attendee on hold.
	//
	// **This field has been deprecated and is no longer supported.**
	AttendeeOnHold *bool
	// Enable users to see and add contacts to the "auto-answer group" in the chat contact list. Any call from members of this group will automatically be answered.
	AutoAnswer *bool
	// Automatically save all in-meeting chats so that the host does not need to manually save the chat transcript after the meeting starts.
	AutoSavingChat *bool
	// Allow host to split meeting participants into separate, smaller rooms.
	BreakoutRoom *bool
	// Allow meeting participants to send a message that is visible to all participants.
	Chat *bool
	// Allow a host to type closed captions. Enable a host to assign a participant or third party device to add closed captions.
	ClosedCaption *bool
	// Allow the host to add co-hosts.
	CoHost *bool
	// If set to `true`, account owners and admins on paid accounts can [select data center regions](https://support.zoom.us/hc/en-us/articles/360042411451-Selecting-data-center-regions-for-hosted-meetings-and-webinars) to use for hosting their real-time meeting and webinar traffic. These regions can be provided in the `data_center_regions` field. If set to `false`, the regions cannot be customized and the default regions will be used.
	CustomDataCenterRegions *bool
	// Custom live streaming.
	CustomLiveStreamingService *bool
	// Custom service instructions.
	CustomServiceInstructions *string
	// If you have set the value of `custom_data_center_regions` to `true`, specify the data center regions that you would like to opt in to (country codes from among: ["EU", "HK", "AU", "IN", "LA", "TY", "CN", "US", "CA"]).
	//
	DataCenterRegions *AccountSettings200ApplicationXMLAccountSettingsInMeetingDataCenterRegionsEnum
	// DSCP audio.
	DscpAudio *int64
	// DSCP marking.
	DscpMarking *bool
	// DSCP video.
	DscpVideo *int64
	// Zoom requires encryption for all data between the Zoom cloud, Zoom client, and Zoom Room. Require encryption for 3rd party endpoints (H323/SIP).
	E2eEncryption *bool
	// Play sound when participants join or leave.<br>`host` - Heard by host only.<br>`all` - Heard by host and all attendees.<br>`none` - Disable.
	EntryExitChime *AccountSettings200ApplicationXMLAccountSettingsInMeetingEntryExitChimeEnum
	// Allow another user to take control of your camera during a meeting.
	FarEndCameraControl *bool
	// Add a "Feedback" tab to the Windows Settings or Mac Preferences dialog. Enable users to provide feedback to Zoom at the end of the meeting.
	Feedback *bool
	// Indicates whether [in-meeting file transfer](https://support.zoom.us/hc/en-us/articles/209605493-In-meeting-file-transfer) setting has been enabled on the account or not.
	FileTransfer *bool
	// Activate higher quality video for host and participants.
	// Please note: This will use more bandwidth.
	GroupHd *bool
	// Enable or disable meeting reactions. <br>
	// `true`: Allow meeting participants to communicate without interrupting by reacting with an emoji that shows on their video.<br>
	// `false`: Do not enable meeting reactions.
	MeetingReactions *bool
	// Allow users to select original sound in their client settings.
	OriginalAudio *bool
	// Peer to peer connection while only two people are in a meeting.
	P2pConnetion *bool
	// Peer to peer listening ports range.
	P2pPorts *bool
	// Add "Polls" to the meeting controls.
	Polling *bool
	// The listening ports range, separated by a comma (ex 55,56). The ports range must be between 1 to 65535.
	PortsRange *string
	// Display a thumbs up or down survey at the end of each meeting.
	PostMeetingFeedback *bool
	// Allow a meeting participant to send a private message to another participant.
	PrivateChat *bool
	// Record and play their own voice.
	RecordPlayOwnVoice *bool
	// Allow users to request remote control.
	RemoteControl *bool
	// Indicates whether the [**Request permission to unmute participants**](https://support.zoom.us/hc/en-us/articles/203435537-Muting-and-unmuting-participants-in-a-meeting#h_01EGK4XFWS1SJGZ71MYGKF7260) option has been enabled for the account or not.
	RequestPermissionToUnmute *bool
	// Allow screen sharing.
	ScreenSharing *bool
	// Only show the default email when sending email invites.
	SendingDefaultEmailInvites *bool
	// If the value of this field is set to `true`, you will allow participants to join a meeting directly from their browser and bypass the Zoom application download process. This is a workaround for participants who are unable to download, install, or run applications. Note that the meeting experience from the browser is limited.
	ShowAJoinFromYourBrowserLink *bool
	// Always show the meeting control toolbar.
	ShowMeetingControlToolbar *bool
	// Allow users to select stereo audio in their client settings.
	StereoAudio *bool
	// Use HTML formatted email for the Outlook plugin.
	UseHTMLFormatEmail *bool
	// Allow users to replace their background with any selected image. Choose or upload an image in the Zoom desktop application settings.
	VirtualBackground *bool
	// Settings to manage virtual background.
	VirtualBackgroundSettings *AccountSettings200ApplicationXMLAccountSettingsInMeetingVirtualBackgroundSettings
	// Add a watermark when viewing a shared screen.
	Watermark *bool
	// Allow a Q&A in a webinar.
	WebinarQuestionAnswer *bool
	// Allow participants to share a whiteboard that includes annotation tools.
	Whiteboard *bool
	// Indicates who can share their screen or content during meetings. The value can be one of the following: <br>
	// `host`: Only host can share the screen.<br>
	// `all`: Both hosts and attendees can share their screen during meetings. For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
	//
	WhoCanShareScreen *AccountSettings200ApplicationXMLAccountSettingsInMeetingWhoCanShareScreenEnum
	// Indicates who is allowed to start sharing screen when someone else in the meeting is sharing their screen. The value can be one of the following:<br>
	// `host`: Only a host can share the screen when someone else is sharing.<br>
	// `all`: Anyone in the meeting is allowed to start sharing their screen when someone else is sharing. For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
	//
	WhoCanShareScreenWhenSomeoneIsSharing *AccountSettings200ApplicationXMLAccountSettingsInMeetingWhoCanShareScreenWhenSomeoneIsSharingEnum
	// Workplace by facebook.
	WorkplaceByFacebook *bool
}

// AccountSettings200ApplicationXMLAccountSettingsIntegration - Account Settings: Integration.
type AccountSettings200ApplicationXMLAccountSettingsIntegration struct {
	// Enable users who join a meeting from their mobile device to share content from their Box account.
	Box *bool
	// Enable users who join a meeting from their mobile device to share content from their Dropbox account.
	Dropbox *bool
	// Enable meetings to be scheduled using Google Calendar.
	GoogleCalendar *bool
	// Enable users who join a meeting from their mobile device to share content from their Google Drive.
	GoogleDrive *bool
	// Enable users to control a connected Kubi device from within a Zoom meeting.
	Kubi *bool
	// Enable users who join a meeting from their mobile device to share content from their Microsoft OneDrive account.
	MicrosoftOneDrive *bool
}

type AccountSettings200ApplicationXMLAccountSettingsProfileRecordingStorageLocation struct {
	// Users can choose the country to store their recorded content. Content can include meeting, webinar, and phone recordings, as well as voicemail, transcripts, and custom greeting prompts. See [Managing the Communications Content storage location](https://support.zoom.us/hc/en-us/articles/360050781131) for details.
	//
	// Provide abbreviated country codes as the value for this field. See the [Countries abbreviation list](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries) for details.
	AllowedValues []string
	// Abbreviated country code.
	Value *string
}

type AccountSettings200ApplicationXMLAccountSettingsProfile struct {
	RecordingStorageLocation *AccountSettings200ApplicationXMLAccountSettingsProfileRecordingStorageLocation
}

type AccountSettings200ApplicationXMLAccountSettingsRecordingArchiveSettings struct {
	// Include in-meeting and/or in-webinar audio in the archive.
	AudioFile *bool
	// Include closed caption or transcript in the archive.
	CcTranscriptFile *bool
	// Include in-meeting chat in the archive.
	ChatFile *bool
	// Include user email in in-meeting chat file.
	ChatWithSenderEmail *bool
	// Include in-meeting and/or in-webinar video in the archive.
	VideoFile *bool
}

// AccountSettings200ApplicationXMLAccountSettingsRecordingArchiveTypeEnum - Archive types:
//
// * `1`: Only meetings are archived.<br>
// * `2`: Only webinars are archived.<br>
// * `3`: Both meetings and webinars are archived.
type AccountSettings200ApplicationXMLAccountSettingsRecordingArchiveTypeEnum string

const (
	AccountSettings200ApplicationXMLAccountSettingsRecordingArchiveTypeEnumOne   AccountSettings200ApplicationXMLAccountSettingsRecordingArchiveTypeEnum = "1"
	AccountSettings200ApplicationXMLAccountSettingsRecordingArchiveTypeEnumTwo   AccountSettings200ApplicationXMLAccountSettingsRecordingArchiveTypeEnum = "2"
	AccountSettings200ApplicationXMLAccountSettingsRecordingArchiveTypeEnumThree AccountSettings200ApplicationXMLAccountSettingsRecordingArchiveTypeEnum = "3"
)

func (e *AccountSettings200ApplicationXMLAccountSettingsRecordingArchiveTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		*e = AccountSettings200ApplicationXMLAccountSettingsRecordingArchiveTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountSettings200ApplicationXMLAccountSettingsRecordingArchiveTypeEnum: %s", s)
	}
}

// AccountSettings200ApplicationXMLAccountSettingsRecordingArchive - [Archiving solution](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-Meeting-and-Webinar-data) settings. This setting can only be used if you have been granted with archiving solution access by the Zoom support team.
type AccountSettings200ApplicationXMLAccountSettingsRecordingArchive struct {
	// Enable the archiving feature.
	Enable   *bool
	Settings *AccountSettings200ApplicationXMLAccountSettingsRecordingArchiveSettings
	// Archive types:
	//
	// * `1`: Only meetings are archived.<br>
	// * `2`: Only webinars are archived.<br>
	// * `3`: Both meetings and webinars are archived.
	Type *AccountSettings200ApplicationXMLAccountSettingsRecordingArchiveTypeEnum
}

// AccountSettings200ApplicationXMLAccountSettingsRecordingAutoRecordingEnum - Automatic recording:<br>`local` - Record on local.<br>`cloud` -  Record on cloud.<br>`none` - Disabled.
type AccountSettings200ApplicationXMLAccountSettingsRecordingAutoRecordingEnum string

const (
	AccountSettings200ApplicationXMLAccountSettingsRecordingAutoRecordingEnumLocal AccountSettings200ApplicationXMLAccountSettingsRecordingAutoRecordingEnum = "local"
	AccountSettings200ApplicationXMLAccountSettingsRecordingAutoRecordingEnumCloud AccountSettings200ApplicationXMLAccountSettingsRecordingAutoRecordingEnum = "cloud"
	AccountSettings200ApplicationXMLAccountSettingsRecordingAutoRecordingEnumNone  AccountSettings200ApplicationXMLAccountSettingsRecordingAutoRecordingEnum = "none"
)

func (e *AccountSettings200ApplicationXMLAccountSettingsRecordingAutoRecordingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "local":
		fallthrough
	case "cloud":
		fallthrough
	case "none":
		*e = AccountSettings200ApplicationXMLAccountSettingsRecordingAutoRecordingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountSettings200ApplicationXMLAccountSettingsRecordingAutoRecordingEnum: %s", s)
	}
}

// AccountSettings200ApplicationXMLAccountSettingsRecordingIPAddressAccessControl - Setting to allow cloud recording access only from specific IP address ranges.
type AccountSettings200ApplicationXMLAccountSettingsRecordingIPAddressAccessControl struct {
	// If set to `true`, the cloud recordings of this account can only be accessed by the IP addresses defined in the `ip_addresses_or_ranges` property.
	//
	//
	Enable *bool
	// IP addresses or ranges that have access to the cloud recordings. Separate multiple IP ranges with comma. Use n.n.n.n, n.n.n.n/n or n.n.n.n - n.n.n.n syntax where n is a number.
	//
	// Example: `46.33.24.184, 48.99.100.2/25` or `200.181.108.17 - 220.181.108.157`
	//
	//
	IPAddressesOrRanges *string
}

// AccountSettings200ApplicationXMLAccountSettingsRecordingRecordingPasswordRequirement - This object represents the minimum password requirements set for recordings via Account Recording Settings.
type AccountSettings200ApplicationXMLAccountSettingsRecordingRecordingPasswordRequirement struct {
	// Indicates whether or not password must contain at least one alphabetical letter (a, b, c..).
	HaveLetter *bool
	// Indicates whether or not password must contain at least one number(1, 2, 3..).
	HaveNumber *bool
	// Indicates whether or not password must contain at least one special character(!, @, #..).
	HaveSpecialCharacter *bool
	// Minimum required length for the password.
	Length *int64
	// Indicates whether or not password must contain only numeric characters.
	OnlyAllowNumeric *bool
}

// AccountSettings200ApplicationXMLAccountSettingsRecording - Account Settings: Recording.
type AccountSettings200ApplicationXMLAccountSettingsRecording struct {
	// Cloud recordings are only accessible to account members. People outside of your organization cannot open links that provide access to cloud recordings.
	AccountUserAccessRecording *bool
	// Allow recovery of deleted cloud recordings from trash.
	// If the value of this field is set to `true`, deleted cloud recordings will be kept in trash for 30 days after deletion and can be recovered within that period.
	AllowRecoveryDeletedCloudRecordings *bool
	// [Archiving solution](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-Meeting-and-Webinar-data) settings. This setting can only be used if you have been granted with archiving solution access by the Zoom support team.
	Archive *AccountSettings200ApplicationXMLAccountSettingsRecordingArchive
	// Allow Zoom to permanantly delete recordings automatically after a specified number of days.
	AutoDeleteCmr *bool
	// When `auto_delete_cmr` function is 'true' this value will set the number of days before the auto deletion of cloud recordings.
	AutoDeleteCmrDays *int64
	// Automatic recording:<br>`local` - Record on local.<br>`cloud` -  Record on cloud.<br>`none` - Disabled.
	AutoRecording *AccountSettings200ApplicationXMLAccountSettingsRecordingAutoRecordingEnum
	// Allow hosts to record and save the meeting in the cloud.
	CloudRecording *bool
	// Cloud recording downloads.
	CloudRecordingDownload *bool
	// Only the host can download cloud recordings.
	CloudRecordingDownloadHost *bool
	// If the value of this field is set to `true`, hosts will be able to delete the recordings. If this option is set to `false`, the recordings cannot be deleted by the host and only admin can delete them.
	//
	HostDeleteCloudRecording *bool
	// Setting to allow cloud recording access only from specific IP address ranges.
	//
	IPAddressAccessControl *AccountSettings200ApplicationXMLAccountSettingsRecordingIPAddressAccessControl
	// Allow hosts and participants to record the meeting using a local file.
	LocalRecording *bool
	// If set to `true`, meeting hosts cannot view their meeting cloud recordings. Only the admins who have recording management privilege can access them.
	//
	PreventHostAccessRecording *bool
	// Record an audio only file.
	RecordAudioFile *bool
	// Record the gallery view with a shared screen.
	RecordGalleryView *bool
	// Record the active speaker with a shared screen.
	RecordSpeakerView *bool
	// Automatically transcribe the audio of the meeting or webinar to the cloud.
	RecordingAudioTranscript *bool
	// Show a disclaimer to participants before a recording starts
	//
	RecordingDisclaimer *bool
	// This object represents the minimum password requirements set for recordings via Account Recording Settings.
	RecordingPasswordRequirement *AccountSettings200ApplicationXMLAccountSettingsRecordingRecordingPasswordRequirement
	// Require a passcode to access existing cloud recordings.
	RequiredPasswordForExistingCloudRecordings *bool
	// Save the chat text from the meeting.
	SaveChatText *bool
	// Add a timestamp to the recording.
	ShowTimestamp *bool
}

// AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingAudioTypeEnum - Determine how participants can join the audio portion of the meeting.<br>`both` - Telephony and VoIP.<br>`telephony` - Audio PSTN telephony only.<br>`voip` - VoIP only.<br>`thirdParty` - 3rd party audio conference.
type AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingAudioTypeEnum string

const (
	AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingAudioTypeEnumBoth       AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingAudioTypeEnum = "both"
	AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingAudioTypeEnumTelephony  AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingAudioTypeEnum = "telephony"
	AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingAudioTypeEnumVoip       AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingAudioTypeEnum = "voip"
	AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingAudioTypeEnumThirdParty AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingAudioTypeEnum = "thirdParty"
)

func (e *AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingAudioTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "both":
		fallthrough
	case "telephony":
		fallthrough
	case "voip":
		fallthrough
	case "thirdParty":
		*e = AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingAudioTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingAudioTypeEnum: %s", s)
	}
}

type AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingMeetingPasswordRequirementConsecutiveCharactersLengthEnum string

const (
	AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingMeetingPasswordRequirementConsecutiveCharactersLengthEnumZero  AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingMeetingPasswordRequirementConsecutiveCharactersLengthEnum = "0"
	AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingMeetingPasswordRequirementConsecutiveCharactersLengthEnumFour  AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingMeetingPasswordRequirementConsecutiveCharactersLengthEnum = "4"
	AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingMeetingPasswordRequirementConsecutiveCharactersLengthEnumFive  AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingMeetingPasswordRequirementConsecutiveCharactersLengthEnum = "5"
	AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingMeetingPasswordRequirementConsecutiveCharactersLengthEnumSix   AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingMeetingPasswordRequirementConsecutiveCharactersLengthEnum = "6"
	AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingMeetingPasswordRequirementConsecutiveCharactersLengthEnumSeven AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingMeetingPasswordRequirementConsecutiveCharactersLengthEnum = "7"
	AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingMeetingPasswordRequirementConsecutiveCharactersLengthEnumEight AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingMeetingPasswordRequirementConsecutiveCharactersLengthEnum = "8"
)

func (e *AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingMeetingPasswordRequirementConsecutiveCharactersLengthEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		fallthrough
	case "8":
		*e = AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingMeetingPasswordRequirementConsecutiveCharactersLengthEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingMeetingPasswordRequirementConsecutiveCharactersLengthEnum: %s", s)
	}
}

// AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingMeetingPasswordRequirement - Account wide meeting/webinar [password requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
type AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingMeetingPasswordRequirement struct {
	ConsecutiveCharactersLength *AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingMeetingPasswordRequirementConsecutiveCharactersLengthEnum
	// If set to `true`, the password must contain at least 1 letter (such as a,b,c...).
	//
	HaveLetter *bool
	// If set to `true`, the password must contain at least 1 number (such as 1,2,3...).
	HaveNumber *bool
	// If set to `true`, the password must have at least 1 special character (!,@,#...).
	HaveSpecialCharacter *bool
	// If set to `true`, the password must include both uppercase and lowercase characters.
	HaveUpperAndLowerCharacters *bool
	// The minimum length that the meeting/webinar password needs to have.
	Length *int64
	// If set to `true`, the password must only contain numbers and no other characters.
	OnlyAllowNumeric *bool
	// If set to `true`, users will be informed if the provided password is weak.
	WeakEnhanceDetection *bool
}

// AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingRequirePasswordForPmiMeetingsEnum - Require a password for a meeting held using Personal Meeting ID (PMI) This setting is always enabled for free accounts and Pro accounts with a single host and cannot be modified for these accounts.
type AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingRequirePasswordForPmiMeetingsEnum string

const (
	AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingRequirePasswordForPmiMeetingsEnumJbhOnly AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingRequirePasswordForPmiMeetingsEnum = "jbh_only"
	AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingRequirePasswordForPmiMeetingsEnumAll     AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingRequirePasswordForPmiMeetingsEnum = "all"
	AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingRequirePasswordForPmiMeetingsEnumNone    AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingRequirePasswordForPmiMeetingsEnum = "none"
)

func (e *AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingRequirePasswordForPmiMeetingsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "jbh_only":
		fallthrough
	case "all":
		fallthrough
	case "none":
		*e = AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingRequirePasswordForPmiMeetingsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingRequirePasswordForPmiMeetingsEnum: %s", s)
	}
}

// AccountSettings200ApplicationXMLAccountSettingsScheduleMeeting - Account Settings: Schedule Meeting.
type AccountSettings200ApplicationXMLAccountSettingsScheduleMeeting struct {
	// Determine how participants can join the audio portion of the meeting.<br>`both` - Telephony and VoIP.<br>`telephony` - Audio PSTN telephony only.<br>`voip` - VoIP only.<br>`thirdParty` - 3rd party audio conference.
	AudioType *AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingAudioTypeEnum
	// Only Zoom users who are signed in can join meetings.
	EnforceLogin *bool
	// Only signed in users with a specified domain can join the meeting.
	EnforceLoginDomains *string
	// Only signed in users with a specific domain can join meetings.
	EnforceLoginWithDomains *bool
	// Require a password for Personal Meetings if attendees can join before host.
	ForcePmiJbhPassword *bool
	// Start meetings with the host video on.
	HostVideo *bool
	// Allow participants to join the meeting before the host arrives.
	JoinBeforeHost *bool
	// Account wide meeting/webinar [password requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
	MeetingPasswordRequirement *AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingMeetingPasswordRequirement
	// Always display "Zoom Meeting" as the meeting topic.
	NotStoreMeetingTopic *bool
	// Start meetings with the participant video on. Participants can change this setting during the meeting.
	ParticipantVideo *bool
	// Personal Meeting Setting.<br><br>
	// `true`: Indicates that the **"Enable Personal Meeting ID"** setting is turned on. Users can choose to use personal meeting ID for their meetings. <br><br>
	// `false`: Indicates that the **"Enable Personal Meeting ID"** setting is [turned off](https://support.zoom.us/hc/en-us/articles/201362843-Personal-meeting-ID-PMI-and-personal-link#h_aa0335c8-3b06-41bc-bc1f-a8b84ef17f2a). If this setting is disabled, meetings that were scheduled with PMI will be invalid. Scheduled meetings will need to be manually updated.
	// For Zoom Phone only:If a user has been assigned a desk phone, **"Elevate to Zoom Meeting"** on desk phone will be disabled.
	//
	//
	//
	PersonalMeeting *bool
	// Require a password for instant meetings. If you use PMI for your instant meetings, this option will be disabled. This setting is always enabled for free accounts and Pro accounts with a single host and cannot be modified for these accounts.
	//
	RequirePasswordForInstantMeetings *bool
	// Require a password for a meeting held using Personal Meeting ID (PMI) This setting is always enabled for free accounts and Pro accounts with a single host and cannot be modified for these accounts.
	//
	RequirePasswordForPmiMeetings *AccountSettings200ApplicationXMLAccountSettingsScheduleMeetingRequirePasswordForPmiMeetingsEnum
	// Require a password for meetings which have already been scheduled
	//
	RequirePasswordForScheduledMeetings *bool
	// Require a password when scheduling new meetings. This setting applies for regular meetings that do not use PMI. If enabled, a password will be generated while a host schedules a new meeting and participants will be required to enter the password before they can join the meeting. This setting is always enabled for free accounts and Pro accounts with a single host and cannot be modified for these accounts.
	RequirePasswordForSchedulingNewMeetings *bool
	// Use Personal Meeting ID (PMI) when starting an instant meeting
	//
	UsePmiForInstantMeetings *bool
	// Use Personal Meeting ID (PMI) when scheduling a meeting
	//
	UsePmiForScheduledMeetings *bool
}

// AccountSettings200ApplicationXMLAccountSettingsSecurityPasswordRequirement - This object refers to the [enhanced password rules](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_bf8a25f6-9a66-447a-befd-f02ed3404f89) that allows Zoom account admins and owners to apply extra requiremets to the users' Zoom login password.
type AccountSettings200ApplicationXMLAccountSettingsSecurityPasswordRequirement struct {
	// Specify the max length of consecutive characters(abcde...) that can be used in a password.
	// If you set the value of this field to `0`, no restriction will be applied on consecutive characters.
	//
	// If you would like to set this restriction, you can specify a number between 4 and 8 that define the maximum allowed length for consecutive characters in a password.
	//
	// The max allowed length will be `n-1` where `n` refers to the value you provide for this field.  For instance, if you provide `4` as the value, there can only be a maximum of `3` consecutive characters in a password(example: abc1x@8fdh).
	ConsecutiveCharactersLength *int64
	// If the value of this field is set to `true`, the password must have at least one special character(!, @, #...).
	HaveSpecialCharacter *bool
	// Specify a minimum length for the password. The password length can be from a minimum of 9 characters, up to 14 characters. If you provide `0` as the value of this field, this field will be disabled and not be used and the basic password length requirement (minimum of 8 characters) will be applied for the requirement.
	MinimumPasswordLength *int64
	// If the value of this field is set to `true`, user passwords will have to pass detection through a weak password dictionary in case hackers use simple passwords to sign in to your users‚Äô accounts.
	WeakEnhanceDetection *bool
}

// AccountSettings200ApplicationXMLAccountSettingsSecuritySignInWithTwoFactorAuthEnum - Settings for 2FA( [two factor authentication](https://support.zoom.us/hc/en-us/articles/360038247071) ). The value can be one of the following:
// `all`: Two factor authentication will be enabled for all users in the account.<br>
// `none`: Two factor authentication is disabled.<br>
// `group`: Two factor authentication will be enabled for users belonging to specific groups. If 2FA is enabled for certain groups, the group IDs of the group(s) will be provided in the `sign_in_with_two_factor_auth_groups` field.<br>
// `role`: Two factor authentication will be enabled only for users assigned with specific roles in the account. If 2FA is enabled for specific roles, the role IDs will be provided in the
// `sign_in_with_two_factor_auth_roles` field.
type AccountSettings200ApplicationXMLAccountSettingsSecuritySignInWithTwoFactorAuthEnum string

const (
	AccountSettings200ApplicationXMLAccountSettingsSecuritySignInWithTwoFactorAuthEnumAll   AccountSettings200ApplicationXMLAccountSettingsSecuritySignInWithTwoFactorAuthEnum = "all"
	AccountSettings200ApplicationXMLAccountSettingsSecuritySignInWithTwoFactorAuthEnumGroup AccountSettings200ApplicationXMLAccountSettingsSecuritySignInWithTwoFactorAuthEnum = "group"
	AccountSettings200ApplicationXMLAccountSettingsSecuritySignInWithTwoFactorAuthEnumRole  AccountSettings200ApplicationXMLAccountSettingsSecuritySignInWithTwoFactorAuthEnum = "role"
	AccountSettings200ApplicationXMLAccountSettingsSecuritySignInWithTwoFactorAuthEnumNone  AccountSettings200ApplicationXMLAccountSettingsSecuritySignInWithTwoFactorAuthEnum = "none"
)

func (e *AccountSettings200ApplicationXMLAccountSettingsSecuritySignInWithTwoFactorAuthEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "all":
		fallthrough
	case "group":
		fallthrough
	case "role":
		fallthrough
	case "none":
		*e = AccountSettings200ApplicationXMLAccountSettingsSecuritySignInWithTwoFactorAuthEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountSettings200ApplicationXMLAccountSettingsSecuritySignInWithTwoFactorAuthEnum: %s", s)
	}
}

// AccountSettings200ApplicationXMLAccountSettingsSecurity - [Security settings](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_bf8a25f6-9a66-447a-befd-f02ed3404f89) of an Account.
type AccountSettings200ApplicationXMLAccountSettingsSecurity struct {
	// Only account administrators can change a user's username and picture.
	AdminChangeNamePic *bool
	// Hide billing information.
	HideBillingInfo *bool
	// Allow users to import photos from a photo library on a  device.
	ImportPhotosFromDevices *bool
	// This object refers to the [enhanced password rules](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_bf8a25f6-9a66-447a-befd-f02ed3404f89) that allows Zoom account admins and owners to apply extra requiremets to the users' Zoom login password.
	PasswordRequirement *AccountSettings200ApplicationXMLAccountSettingsSecurityPasswordRequirement
	// Settings for User Sign In interval requirements after a period of inactivity. If enabled, this setting forces automatic logout of users in Zoom Client app after a set amount of time. <br>
	//
	// If this setting is disabled, the value of this field will be `0`. If the setting is enabled, the value of this field will indicate the **period of inactivity** in minutes after which, an inactive user will be automatically logged out of the Zoom Client. The value for the period of inactivity can be one of the following:<br>
	//
	// `5`: 5 minutes<br>
	// `10`: 10 minutes<br>
	// `15`: 15 minutes<br>
	// `30`: 30 minutes<br>
	// `45`: 45 minutes<br>
	// `60`: 60 minutes<br>
	// `90`: 90 minutes<br>
	// `120`: 120 minutes
	//
	SignAgainPeriodForInactivityOnClient *int64
	// Settings for User Sign In interval requirements after a period of inactivity. If enabled, this setting forces automatic logout of users in Zoom Web Portal after a set amount of time. <br>
	//
	// If this setting is disabled, the value of this field will be `0`. If the setting is enabled, the value of this field will indicate the **period of inactivity** in minutes after which, an inactive user will be automatically logged out of the Zoom Web Portal. The value for the period of inactivity can be one of the following:<br>
	//
	// `5`: 5 minutes<br>
	// `10`: 10 minutes<br>
	// `15`: 15 minutes<br>
	// `30`: 30 minutes<br>
	// `60`: 60 minutes<br>
	// `120`: 120 minutes
	//
	//
	//
	//
	SignAgainPeriodForInactivityOnWeb *int64
	// Settings for 2FA( [two factor authentication](https://support.zoom.us/hc/en-us/articles/360038247071) ). The value can be one of the following:
	// `all`: Two factor authentication will be enabled for all users in the account.<br>
	// `none`: Two factor authentication is disabled.<br>
	// `group`: Two factor authentication will be enabled for users belonging to specific groups. If 2FA is enabled for certain groups, the group IDs of the group(s) will be provided in the `sign_in_with_two_factor_auth_groups` field.<br>
	// `role`: Two factor authentication will be enabled only for users assigned with specific roles in the account. If 2FA is enabled for specific roles, the role IDs will be provided in the
	// `sign_in_with_two_factor_auth_roles` field.
	//
	SignInWithTwoFactorAuth *AccountSettings200ApplicationXMLAccountSettingsSecuritySignInWithTwoFactorAuthEnum
	// This field contains group IDs of groups that have 2FA enabled. This field is only returned if the value of `sign_in_with_two_factor_auth` is `group`
	SignInWithTwoFactorAuthGroups []string
	// This field contains role IDs of roles that have 2FA enabled. This field is only returned if the value of `sign_in_with_two_factor_auth` is `role`.
	SignInWithTwoFactorAuthRoles []string
}

// AccountSettings200ApplicationXMLAccountSettingsTelephonyTelephonyRegions - Indicates where most of the participants call into or call from duriing a meeting.
type AccountSettings200ApplicationXMLAccountSettingsTelephonyTelephonyRegions struct {
	// Telephony region options provided by Zoom to select from.
	AllowedValues []string
	// Telephony regions selected by the account to indicate where most of the participants call into or call from during a meeting.
	SelectionValues []string
}

// AccountSettings200ApplicationXMLAccountSettingsTelephony - Account Settings: Telephony.
type AccountSettings200ApplicationXMLAccountSettingsTelephony struct {
	// Third party audio conference info.
	AudioConferenceInfo *string
	// Indicates where most of the participants call into or call from duriing a meeting.
	TelephonyRegions *AccountSettings200ApplicationXMLAccountSettingsTelephonyTelephonyRegions
	// Users can join the meeting using the existing third party audio configuration.
	ThirdPartyAudio *bool
}

// AccountSettings200ApplicationXMLAccountSettingsTsp - Account Settings: TSP.
type AccountSettings200ApplicationXMLAccountSettingsTsp struct {
	// Call Out
	CallOut *bool
	// Call Out Countries/Regions
	CallOutCountries []interface{}
	// Display toll-free numbers
	DisplayTollFreeNumbers *bool
	// Show international numbers link on the invitation email
	ShowInternationalNumbersLink *bool
}

// AccountSettings200ApplicationXMLAccountSettingsZoomRooms - Account Settings: Zoom Rooms.
type AccountSettings200ApplicationXMLAccountSettingsZoomRooms struct {
	// Automatic start and stop for scheduled meetings.
	AutoStartStopScheduledMeetings *bool
	// Cloud recording for instant meetings.
	CmrForInstantMeeting *bool
	// Shift all meetings to private.
	ForcePrivateMeeting *bool
	// Hide host and meeting ID from private meetings.
	HideHostInformation *bool
	// Display meeting list with calendar integration.
	ListMeetingsWithCalendar *bool
	// Start AirPlay service manually.
	StartAirplayManually *bool
	// Automatic direct sharing using an ultrasonic proximity signal.
	Ultrasonic *bool
	// Upcoming meeting alert.
	UpcomingMeetingAlert *bool
	// Weekly system restart.
	WeeklySystemRestart *bool
	// Zoom Room post meeting feedback.
	ZrPostMeetingFeedback *bool
}

type AccountSettings200ApplicationXMLAccountSettings struct {
	// Account Settings: Notification.
	EmailNotification *AccountSettings200ApplicationXMLAccountSettingsEmailNotification
	// Account Settings: Feature.
	Feature *AccountSettings200ApplicationXMLAccountSettingsFeature
	// Account Settings: In Meeting.
	InMeeting *AccountSettings200ApplicationXMLAccountSettingsInMeeting
	// Account Settings: Integration.
	Integration *AccountSettings200ApplicationXMLAccountSettingsIntegration
	Profile     *AccountSettings200ApplicationXMLAccountSettingsProfile
	// Account Settings: Recording.
	Recording *AccountSettings200ApplicationXMLAccountSettingsRecording
	// Account Settings: Schedule Meeting.
	ScheduleMeeting *AccountSettings200ApplicationXMLAccountSettingsScheduleMeeting
	// [Security settings](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_bf8a25f6-9a66-447a-befd-f02ed3404f89) of an Account.
	Security *AccountSettings200ApplicationXMLAccountSettingsSecurity
	// Account Settings: Telephony.
	Telephony *AccountSettings200ApplicationXMLAccountSettingsTelephony
	// Account Settings: TSP.
	Tsp *AccountSettings200ApplicationXMLAccountSettingsTsp
	// Account Settings: Zoom Rooms.
	ZoomRooms *AccountSettings200ApplicationXMLAccountSettingsZoomRooms
}

type AccountSettings200ApplicationXMLType string

const (
	AccountSettings200ApplicationXMLTypeAccountSettings200ApplicationXMLAccountSettings                AccountSettings200ApplicationXMLType = "accountSettings_200ApplicationXML_Account settings"
	AccountSettings200ApplicationXMLTypeAccountSettings200ApplicationXMLAccountSettingsAuthentication  AccountSettings200ApplicationXMLType = "accountSettings_200ApplicationXML_AccountSettingsAuthentication"
	AccountSettings200ApplicationXMLTypeAccountSettings200ApplicationXML3                              AccountSettings200ApplicationXMLType = "accountSettings_200ApplicationXML_3"
	AccountSettings200ApplicationXMLTypeAccountSettings200ApplicationXMLMeetingWebinarSecuritySettings AccountSettings200ApplicationXMLType = "accountSettings_200ApplicationXML_Meeting/Webinar Security Settings"
)

type AccountSettings200ApplicationXML struct {
	AccountSettings200ApplicationXMLAccountSettings                *AccountSettings200ApplicationXMLAccountSettings
	AccountSettings200ApplicationXMLAccountSettingsAuthentication  *AccountSettings200ApplicationXMLAccountSettingsAuthentication
	AccountSettings200ApplicationXML3                              *AccountSettings200ApplicationXML3
	AccountSettings200ApplicationXMLMeetingWebinarSecuritySettings *AccountSettings200ApplicationXMLMeetingWebinarSecuritySettings

	Type AccountSettings200ApplicationXMLType
}

func CreateAccountSettings200ApplicationXMLAccountSettings200ApplicationXMLAccountSettings(accountSettings200ApplicationXMLAccountSettings AccountSettings200ApplicationXMLAccountSettings) AccountSettings200ApplicationXML {
	typ := AccountSettings200ApplicationXMLTypeAccountSettings200ApplicationXMLAccountSettings

	return AccountSettings200ApplicationXML{
		AccountSettings200ApplicationXMLAccountSettings: &accountSettings200ApplicationXMLAccountSettings,
		Type: typ,
	}
}

func CreateAccountSettings200ApplicationXMLAccountSettings200ApplicationXMLAccountSettingsAuthentication(accountSettings200ApplicationXMLAccountSettingsAuthentication AccountSettings200ApplicationXMLAccountSettingsAuthentication) AccountSettings200ApplicationXML {
	typ := AccountSettings200ApplicationXMLTypeAccountSettings200ApplicationXMLAccountSettingsAuthentication

	return AccountSettings200ApplicationXML{
		AccountSettings200ApplicationXMLAccountSettingsAuthentication: &accountSettings200ApplicationXMLAccountSettingsAuthentication,
		Type: typ,
	}
}

func CreateAccountSettings200ApplicationXMLAccountSettings200ApplicationXML3(accountSettings200ApplicationXML3 AccountSettings200ApplicationXML3) AccountSettings200ApplicationXML {
	typ := AccountSettings200ApplicationXMLTypeAccountSettings200ApplicationXML3

	return AccountSettings200ApplicationXML{
		AccountSettings200ApplicationXML3: &accountSettings200ApplicationXML3,
		Type:                              typ,
	}
}

func CreateAccountSettings200ApplicationXMLAccountSettings200ApplicationXMLMeetingWebinarSecuritySettings(accountSettings200ApplicationXMLMeetingWebinarSecuritySettings AccountSettings200ApplicationXMLMeetingWebinarSecuritySettings) AccountSettings200ApplicationXML {
	typ := AccountSettings200ApplicationXMLTypeAccountSettings200ApplicationXMLMeetingWebinarSecuritySettings

	return AccountSettings200ApplicationXML{
		AccountSettings200ApplicationXMLMeetingWebinarSecuritySettings: &accountSettings200ApplicationXMLMeetingWebinarSecuritySettings,
		Type: typ,
	}
}

func (u *AccountSettings200ApplicationXML) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	accountSettings200ApplicationXMLAccountSettings := new(AccountSettings200ApplicationXMLAccountSettings)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&accountSettings200ApplicationXMLAccountSettings); err == nil {
		u.AccountSettings200ApplicationXMLAccountSettings = accountSettings200ApplicationXMLAccountSettings
		u.Type = AccountSettings200ApplicationXMLTypeAccountSettings200ApplicationXMLAccountSettings
		return nil
	}

	accountSettings200ApplicationXMLAccountSettingsAuthentication := new(AccountSettings200ApplicationXMLAccountSettingsAuthentication)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&accountSettings200ApplicationXMLAccountSettingsAuthentication); err == nil {
		u.AccountSettings200ApplicationXMLAccountSettingsAuthentication = accountSettings200ApplicationXMLAccountSettingsAuthentication
		u.Type = AccountSettings200ApplicationXMLTypeAccountSettings200ApplicationXMLAccountSettingsAuthentication
		return nil
	}

	accountSettings200ApplicationXML3 := new(AccountSettings200ApplicationXML3)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&accountSettings200ApplicationXML3); err == nil {
		u.AccountSettings200ApplicationXML3 = accountSettings200ApplicationXML3
		u.Type = AccountSettings200ApplicationXMLTypeAccountSettings200ApplicationXML3
		return nil
	}

	accountSettings200ApplicationXMLMeetingWebinarSecuritySettings := new(AccountSettings200ApplicationXMLMeetingWebinarSecuritySettings)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&accountSettings200ApplicationXMLMeetingWebinarSecuritySettings); err == nil {
		u.AccountSettings200ApplicationXMLMeetingWebinarSecuritySettings = accountSettings200ApplicationXMLMeetingWebinarSecuritySettings
		u.Type = AccountSettings200ApplicationXMLTypeAccountSettings200ApplicationXMLMeetingWebinarSecuritySettings
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u AccountSettings200ApplicationXML) MarshalJSON() ([]byte, error) {
	if u.AccountSettings200ApplicationXMLAccountSettings != nil {
		return json.Marshal(u.AccountSettings200ApplicationXMLAccountSettings)
	}

	if u.AccountSettings200ApplicationXMLAccountSettingsAuthentication != nil {
		return json.Marshal(u.AccountSettings200ApplicationXMLAccountSettingsAuthentication)
	}

	if u.AccountSettings200ApplicationXML3 != nil {
		return json.Marshal(u.AccountSettings200ApplicationXML3)
	}

	if u.AccountSettings200ApplicationXMLMeetingWebinarSecuritySettings != nil {
		return json.Marshal(u.AccountSettings200ApplicationXMLMeetingWebinarSecuritySettings)
	}

	return nil, nil
}

// AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum - Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be **automatically disabled**. <br><br>The value of this field can be one of the following:<br>
// `enhanced_encryption`: Enhanced encryption. Encryption is stored in the cloud if you enable this option. <br>
//
// `e2ee`: [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the following features: join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.
type AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum string

const (
	AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnumEnhancedEncryption AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum = "enhanced_encryption"
	AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnumE2ee               AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum = "e2ee"
)

func (e *AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "enhanced_encryption":
		fallthrough
	case "e2ee":
		*e = AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum: %s", s)
	}
}

type AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum string

const (
	AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnumZero  AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum = "0"
	AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnumFour  AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum = "4"
	AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnumFive  AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum = "5"
	AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnumSix   AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum = "6"
	AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnumSeven AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum = "7"
	AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnumEight AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum = "8"
)

func (e *AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		fallthrough
	case "8":
		*e = AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum: %s", s)
	}
}

// AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirement - Meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
type AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirement struct {
	ConsecutiveCharactersLength *AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum `json:"consecutive_characters_length,omitempty"`
	// If set to `true`, the passcode must contain at least 1 letter (such as a,b,c...).
	//
	HaveLetter *bool `json:"have_letter,omitempty"`
	// If set to `true`, the passcode must contain at least 1 number (such as 1,2,3...).
	HaveNumber *bool `json:"have_number,omitempty"`
	// If set to `true`, the passcode must have at least 1 special character (!,@,#...).
	HaveSpecialCharacter *bool `json:"have_special_character,omitempty"`
	// If set to `true`, the passcode must include both uppercase and lowercase characters.
	HaveUpperAndLowerCharacters *bool `json:"have_upper_and_lower_characters,omitempty"`
	// The minimum length that the meeting/webinar passcode needs to have.
	Length *int64 `json:"length,omitempty"`
	// If set to `true`, the passcode must only contain numbers and no other characters.
	OnlyAllowNumeric *bool `json:"only_allow_numeric,omitempty"`
	// If set to `true`, users will be informed if the provided passcode is weak.
	WeakEnhanceDetection *bool `json:"weak_enhance_detection,omitempty"`
}

// AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum -
//
// Specify who should be admitted to the waiting room. The value of this field can be one of the following:<br>
// `0`: All attendees<br> `1`: Users who are not in your account<br> `2`: Users who are not in your account and are not part of your whitelisted domains that are specified in
type AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum string

const (
	AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnumZero AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum = "0"
	AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnumOne  AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum = "1"
	AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnumTwo  AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum = "2"
)

func (e *AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "2":
		*e = AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum: %s", s)
	}
}

// AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettings - Specify the settings to be applied if waiting room is enabled.
type AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettings struct {
	//
	// Specify who should be admitted to the waiting room. The value of this field can be one of the following:<br>
	// `0`: All attendees<br> `1`: Users who are not in your account<br> `2`: Users who are not in your account and are not part of your whitelisted domains that are specified in
	ParticipantsToPlaceInWaitingRoom *AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum `json:"participants_to_place_in_waiting_room,omitempty"`
	// Specify who can admit participants from the waiting room. The value of this field can be one of the following:<br>
	// `0`: Host and co-hosts only<br> `1`: Host, co-hosts, and anyone who bypassed the waiting room (only if host and co-hosts are not present).
	//
	//
	//
	UsersWhoCanAdmitParticipantsFromWaitingRoom *int64 `json:"users_who_can_admit_participants_from_waiting_room,omitempty"`
	// If the value of the `participants_to_place_in_waiting_room` field is `2`, use this setting to specify the domains that can bypass the waiting room feature. Separate multiple domains with commas(example: "aaa.com,bbb.com").
	WhitelistedDomainsForWaitingRoom *string `json:"whitelisted_domains_for_waiting_room,omitempty"`
}

type AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurity struct {
	// `true`: Require that all meetings are secured with at least one security option.
	//
	// This setting can only be disabled by Enterprise, ISV, Business (with more than 100 licenses), and Education accounts. [Learn more](https://marketplace.zoom.us/docs/guides/stay-up-to-date/announcements#meeting-security).
	AutoSecurity *bool `json:"auto_security,omitempty"`
	// If set to `true`, meeting passcode will be encrypted and included in the invite link to allow participants to join with just one click without having to enter the passcode.
	//
	EmbedPasswordInJoinLink *bool `json:"embed_password_in_join_link,omitempty"`
	// Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be **automatically disabled**. <br><br>The value of this field can be one of the following:<br>
	// `enhanced_encryption`: Enhanced encryption. Encryption is stored in the cloud if you enable this option. <br>
	//
	// `e2ee`: [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the following features: join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.
	EncryptionType *AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum `json:"encryption_type,omitempty"`
	// Allow use of end-to-end encryption for meetings. If set to `true`, you can specify the encryption type in `encryption_type` field.
	EndToEndEncryptedMeetings *bool `json:"end_to_end_encrypted_meetings,omitempty"`
	// If set to `true`, all instant, and scheduled meetings that users can join via client, or room systems will be passcode-protected. The Personal Meeting ID (PMI) meetings are not included in this setting.
	MeetingPassword *bool `json:"meeting_password,omitempty"`
	// Meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
	MeetingPasswordRequirement *AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirement `json:"meeting_password_requirement,omitempty"`
	// Require passcode for participants joining by phone. If set to `true`, a numeric passcode will be required for participants joining by phone if your meeting has a passcode. For meeting with an alphanumeric passcode, a numeric version will be generated.
	PhonePassword *bool `json:"phone_password,omitempty"`
	// If set to `true`, all Personal Meeting ID (PMI) meetings that users can join via client, or room systems will be passcode-protected.
	//
	PmiPassword *bool `json:"pmi_password,omitempty"`
	// Require a passcode for meetings which have already been scheduled.
	//
	RequirePasswordForScheduledMeeting *bool `json:"require_password_for_scheduled_meeting,omitempty"`
	// Require a passcode for webinars which have already been scheduled.
	//
	RequirePasswordForScheduledWebinar *bool `json:"require_password_for_scheduled_webinar,omitempty"`
	// When participants join a meeting, place them in a waiting room and require the host to admit them individually. Enabling the waiting room automatically disables the setting for allowing participants to join before host.
	//
	WaitingRoom *bool `json:"waiting_room,omitempty"`
	// Specify the settings to be applied if waiting room is enabled.
	WaitingRoomSettings *AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettings `json:"waiting_room_settings,omitempty"`
	// If set to `true`, a passcode will be generated when scheduling a Webinar and participants require the passcode to join the Webinar.
	//
	WebinarPassword *bool `json:"webinar_password,omitempty"`
}

type AccountSettings200ApplicationJSONMeetingWebinarSecuritySettings struct {
	MeetingSecurity *AccountSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurity `json:"meeting_security,omitempty"`
}

// AccountSettings200ApplicationJSON3PasswordRequirement - This object refers to the [enhanced password rules](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_bf8a25f6-9a66-447a-befd-f02ed3404f89) that allows Zoom account admins and owners to apply extra requiremets to the users' Zoom login password.
type AccountSettings200ApplicationJSON3PasswordRequirement struct {
	// Specify the max length of consecutive characters(abcde...) that can be used in a password.
	// If you set the value of this field to `0`, no restriction will be applied on consecutive characters.
	//
	// If you would like to set this restriction, you can specify a number between 4 and 8 that define the maximum allowed length for consecutive characters in a password.
	//
	// The max allowed length will be `n-1` where `n` refers to the value you provide for this field.  For instance, if you provide `4` as the value, there can only be a maximum of `3` consecutive characters in a password(example: abc1x@8fdh).
	ConsecutiveCharactersLength *int64 `json:"consecutive_characters_length,omitempty"`
	// If the value of this field is set to `true`, the password must have at least one special character(!, @, #...).
	HaveSpecialCharacter *bool `json:"have_special_character,omitempty"`
	// Specify a minimum length for the password. The password length can be from a minimum of 9 characters, up to 14 characters. If you provide `0` as the value of this field, this field will be disabled and not be used and the basic password length requirement (minimum of 8 characters) will be applied for the requirement.
	MinimumPasswordLength *int64 `json:"minimum_password_length,omitempty"`
	// If the value of this field is set to `true`, user passwords will have to pass detection through a weak password dictionary in case hackers use simple passwords to sign in to your users‚Äô accounts.
	WeakEnhanceDetection *bool `json:"weak_enhance_detection,omitempty"`
}

// AccountSettings200ApplicationJSON3SignInWithTwoFactorAuthEnum - Settings for 2FA( [two factor authentication](https://support.zoom.us/hc/en-us/articles/360038247071) ). The value can be one of the following:
// `all`: Two factor authentication will be enabled for all users in the account.<br>
// `none`: Two factor authentication is disabled.<br>
// `group`: Two factor authentication will be enabled for users belonging to specific groups. If 2FA is enabled for certain groups, the group IDs of the group(s) will be provided in the `sign_in_with_two_factor_auth_groups` field.<br>
// `role`: Two factor authentication will be enabled only for users assigned with specific roles in the account. If 2FA is enabled for specific roles, the role IDs will be provided in the
// `sign_in_with_two_factor_auth_roles` field.
type AccountSettings200ApplicationJSON3SignInWithTwoFactorAuthEnum string

const (
	AccountSettings200ApplicationJSON3SignInWithTwoFactorAuthEnumAll   AccountSettings200ApplicationJSON3SignInWithTwoFactorAuthEnum = "all"
	AccountSettings200ApplicationJSON3SignInWithTwoFactorAuthEnumGroup AccountSettings200ApplicationJSON3SignInWithTwoFactorAuthEnum = "group"
	AccountSettings200ApplicationJSON3SignInWithTwoFactorAuthEnumRole  AccountSettings200ApplicationJSON3SignInWithTwoFactorAuthEnum = "role"
	AccountSettings200ApplicationJSON3SignInWithTwoFactorAuthEnumNone  AccountSettings200ApplicationJSON3SignInWithTwoFactorAuthEnum = "none"
)

func (e *AccountSettings200ApplicationJSON3SignInWithTwoFactorAuthEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "all":
		fallthrough
	case "group":
		fallthrough
	case "role":
		fallthrough
	case "none":
		*e = AccountSettings200ApplicationJSON3SignInWithTwoFactorAuthEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountSettings200ApplicationJSON3SignInWithTwoFactorAuthEnum: %s", s)
	}
}

// AccountSettings200ApplicationJSON3 - [Security settings](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_bf8a25f6-9a66-447a-befd-f02ed3404f89) of an Account.
type AccountSettings200ApplicationJSON3 struct {
	// Only account administrators can change a user's username and picture.
	AdminChangeNamePic *bool `json:"admin_change_name_pic,omitempty"`
	// Hide billing information.
	HideBillingInfo *bool `json:"hide_billing_info,omitempty"`
	// Allow users to import photos from a photo library on a  device.
	ImportPhotosFromDevices *bool `json:"import_photos_from_devices,omitempty"`
	// This object refers to the [enhanced password rules](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_bf8a25f6-9a66-447a-befd-f02ed3404f89) that allows Zoom account admins and owners to apply extra requiremets to the users' Zoom login password.
	PasswordRequirement *AccountSettings200ApplicationJSON3PasswordRequirement `json:"password_requirement,omitempty"`
	// Settings for User Sign In interval requirements after a period of inactivity. If enabled, this setting forces automatic logout of users in Zoom Client app after a set amount of time. <br>
	//
	// If this setting is disabled, the value of this field will be `0`. If the setting is enabled, the value of this field will indicate the **period of inactivity** in minutes after which, an inactive user will be automatically logged out of the Zoom Client. The value for the period of inactivity can be one of the following:<br>
	//
	// `5`: 5 minutes<br>
	// `10`: 10 minutes<br>
	// `15`: 15 minutes<br>
	// `30`: 30 minutes<br>
	// `45`: 45 minutes<br>
	// `60`: 60 minutes<br>
	// `90`: 90 minutes<br>
	// `120`: 120 minutes
	//
	SignAgainPeriodForInactivityOnClient *int64 `json:"sign_again_period_for_inactivity_on_client,omitempty"`
	// Settings for User Sign In interval requirements after a period of inactivity. If enabled, this setting forces automatic logout of users in Zoom Web Portal after a set amount of time. <br>
	//
	// If this setting is disabled, the value of this field will be `0`. If the setting is enabled, the value of this field will indicate the **period of inactivity** in minutes after which, an inactive user will be automatically logged out of the Zoom Web Portal. The value for the period of inactivity can be one of the following:<br>
	//
	// `5`: 5 minutes<br>
	// `10`: 10 minutes<br>
	// `15`: 15 minutes<br>
	// `30`: 30 minutes<br>
	// `60`: 60 minutes<br>
	// `120`: 120 minutes
	//
	//
	//
	//
	SignAgainPeriodForInactivityOnWeb *int64 `json:"sign_again_period_for_inactivity_on_web,omitempty"`
	// Settings for 2FA( [two factor authentication](https://support.zoom.us/hc/en-us/articles/360038247071) ). The value can be one of the following:
	// `all`: Two factor authentication will be enabled for all users in the account.<br>
	// `none`: Two factor authentication is disabled.<br>
	// `group`: Two factor authentication will be enabled for users belonging to specific groups. If 2FA is enabled for certain groups, the group IDs of the group(s) will be provided in the `sign_in_with_two_factor_auth_groups` field.<br>
	// `role`: Two factor authentication will be enabled only for users assigned with specific roles in the account. If 2FA is enabled for specific roles, the role IDs will be provided in the
	// `sign_in_with_two_factor_auth_roles` field.
	//
	SignInWithTwoFactorAuth *AccountSettings200ApplicationJSON3SignInWithTwoFactorAuthEnum `json:"sign_in_with_two_factor_auth,omitempty"`
	// This field contains group IDs of groups that have 2FA enabled. This field is only returned if the value of `sign_in_with_two_factor_auth` is `group`
	SignInWithTwoFactorAuthGroups []string `json:"sign_in_with_two_factor_auth_groups,omitempty"`
	// This field contains role IDs of roles that have 2FA enabled. This field is only returned if the value of `sign_in_with_two_factor_auth` is `role`.
	SignInWithTwoFactorAuthRoles []string `json:"sign_in_with_two_factor_auth_roles,omitempty"`
}

// AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnum1 - Authentication type
type AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnum1 string

const (
	AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnum1Internally              AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnum1 = "internally"
	AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnum1EnforceLogin            AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnum1 = "enforce_login"
	AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnum1EnforceLoginWithDomains AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnum1 = "enforce_login_with_domains"
)

func (e *AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnum1) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internally":
		fallthrough
	case "enforce_login":
		fallthrough
	case "enforce_login_with_domains":
		*e = AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnum1(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnum1: %s", s)
	}
}

type AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptions1 struct {
	// Authentication default option
	DefaultOption *bool `json:"default_option,omitempty"`
	// Authentication domians
	Domains *string `json:"domains,omitempty"`
	// Authentication id
	ID *string `json:"id,omitempty"`
	// Authentication name
	Name *string `json:"name,omitempty"`
	// Authentication type
	Type *AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnum1 `json:"type,omitempty"`
	// Authentication visible
	Visible *bool `json:"visible,omitempty"`
}

type AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthentication1 struct {
	AuthenticationOptions []AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptions1 `json:"authentication_options,omitempty"`
	// Only authenticated users can view cloud recordings
	RecordingAuthentication *bool `json:"recording_authentication,omitempty"`
}

// AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnum -  Authentication type. Specify one of the following authentication types for the authentication profile:<br>
//   - `enforce_login`: This option allows any users to join the meeting or webinar, as long as they are signed into their Zoom account.
//   - `enforce_login_with_domains`: This option, allows you to specify a rule so that only those Zoom users whose email addresses contain a certain domain, can join the meeting or webinar. You can either add multiple domains using a comma in between and/or use a wildcard for listing domains.<br>
//   - `enforce_login_with_same_account`: This option allows users to join the meeting or webinar with the same Zoom account.
type AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnum string

const (
	AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnumEnforceLogin                AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnum = "enforce_login"
	AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnumEnforceLoginWithSameAccount AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnum = "enforce_login_with_same_account"
	AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnumEnforceLoginWithDomains     AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnum = "enforce_login_with_domains"
)

func (e *AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "enforce_login":
		fallthrough
	case "enforce_login_with_same_account":
		fallthrough
	case "enforce_login_with_domains":
		*e = AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnum: %s", s)
	}
}

type AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptions struct {
	// Authentication default option
	DefaultOption *bool `json:"default_option,omitempty"`
	// Authentication domians
	Domains *string `json:"domains,omitempty"`
	// Authentication id
	ID *string `json:"id,omitempty"`
	// Authentication name
	Name *string `json:"name,omitempty"`
	//  Authentication type. Specify one of the following authentication types for the authentication profile:<br>
	//  * `enforce_login`: This option allows any users to join the meeting or webinar, as long as they are signed into their Zoom account.
	//  * `enforce_login_with_domains`: This option, allows you to specify a rule so that only those Zoom users whose email addresses contain a certain domain, can join the meeting or webinar. You can either add multiple domains using a comma in between and/or use a wildcard for listing domains.<br>
	//  * `enforce_login_with_same_account`: This option allows users to join the meeting or webinar with the same Zoom account.
	Type *AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptionsTypeEnum `json:"type,omitempty"`
	// Authentication visible
	Visible *bool `json:"visible,omitempty"`
}

type AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthentication struct {
	// Meeting Authentication Options
	AuthenticationOptions []AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthenticationAuthenticationOptions `json:"authentication_options,omitempty"`
	// Only authenticated users can join meetings
	MeetingAuthentication *bool `json:"meeting_authentication,omitempty"`
}

type AccountSettings200ApplicationJSONAccountSettingsAuthenticationType string

const (
	AccountSettings200ApplicationJSONAccountSettingsAuthenticationTypeAccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthentication  AccountSettings200ApplicationJSONAccountSettingsAuthenticationType = "accountSettings_200ApplicationJSON_AccountSettingsAuthentication_AccountSettingsAuthentication"
	AccountSettings200ApplicationJSONAccountSettingsAuthenticationTypeAccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthentication1 AccountSettings200ApplicationJSONAccountSettingsAuthenticationType = "accountSettings_200ApplicationJSON_AccountSettingsAuthentication_AccountSettingsAuthentication1"
)

type AccountSettings200ApplicationJSONAccountSettingsAuthentication struct {
	AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthentication  *AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthentication
	AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthentication1 *AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthentication1

	Type AccountSettings200ApplicationJSONAccountSettingsAuthenticationType
}

func CreateAccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthentication(accountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthentication AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthentication) AccountSettings200ApplicationJSONAccountSettingsAuthentication {
	typ := AccountSettings200ApplicationJSONAccountSettingsAuthenticationTypeAccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthentication

	return AccountSettings200ApplicationJSONAccountSettingsAuthentication{
		AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthentication: &accountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthentication,
		Type: typ,
	}
}

func CreateAccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthentication1(accountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthentication1 AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthentication1) AccountSettings200ApplicationJSONAccountSettingsAuthentication {
	typ := AccountSettings200ApplicationJSONAccountSettingsAuthenticationTypeAccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthentication1

	return AccountSettings200ApplicationJSONAccountSettingsAuthentication{
		AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthentication1: &accountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthentication1,
		Type: typ,
	}
}

func (u *AccountSettings200ApplicationJSONAccountSettingsAuthentication) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	accountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthentication := new(AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthentication)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&accountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthentication); err == nil {
		u.AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthentication = accountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthentication
		u.Type = AccountSettings200ApplicationJSONAccountSettingsAuthenticationTypeAccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthentication
		return nil
	}

	accountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthentication1 := new(AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthentication1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&accountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthentication1); err == nil {
		u.AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthentication1 = accountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthentication1
		u.Type = AccountSettings200ApplicationJSONAccountSettingsAuthenticationTypeAccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthentication1
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u AccountSettings200ApplicationJSONAccountSettingsAuthentication) MarshalJSON() ([]byte, error) {
	if u.AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthentication != nil {
		return json.Marshal(u.AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthentication)
	}

	if u.AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthentication1 != nil {
		return json.Marshal(u.AccountSettings200ApplicationJSONAccountSettingsAuthenticationAccountSettingsAuthentication1)
	}

	return nil, nil
}

// AccountSettings200ApplicationJSONAccountSettingsEmailNotification - Account Settings: Notification.
type AccountSettings200ApplicationJSONAccountSettingsEmailNotification struct {
	// Notify when an alternative host is set or removed from a meeting.
	AlternativeHostReminder *bool `json:"alternative_host_reminder,omitempty"`
	// Notify the host and participants when a meeting is cancelled.
	CancelMeetingReminder *bool `json:"cancel_meeting_reminder,omitempty"`
	// Notify host when cloud recording is available.
	CloudRecordingAvaliableReminder *bool `json:"cloud_recording_avaliable_reminder,omitempty"`
	// Notify the host when participants join the meeting before them.
	JbhReminder *bool `json:"jbh_reminder,omitempty"`
	// Notify user when host licenses are running low.
	LowHostCountReminder *bool `json:"low_host_count_reminder,omitempty"`
	// Notify the host there is a meeting is scheduled, rescheduled, or cancelled.
	ScheduleForReminder *bool `json:"schedule_for_reminder,omitempty"`
}

// AccountSettings200ApplicationJSONAccountSettingsFeature - Account Settings: Feature.
type AccountSettings200ApplicationJSONAccountSettingsFeature struct {
	// Set the maximum number of participants a host can have in a single meeting.
	MeetingCapacity *int64 `json:"meeting_capacity,omitempty"`
}

// AccountSettings200ApplicationJSONAccountSettingsInMeetingDataCenterRegionsEnum - If you have set the value of `custom_data_center_regions` to `true`, specify the data center regions that you would like to opt in to (country codes from among: ["EU", "HK", "AU", "IN", "LA", "TY", "CN", "US", "CA"]).
type AccountSettings200ApplicationJSONAccountSettingsInMeetingDataCenterRegionsEnum string

const (
	AccountSettings200ApplicationJSONAccountSettingsInMeetingDataCenterRegionsEnumEu AccountSettings200ApplicationJSONAccountSettingsInMeetingDataCenterRegionsEnum = "EU"
	AccountSettings200ApplicationJSONAccountSettingsInMeetingDataCenterRegionsEnumHk AccountSettings200ApplicationJSONAccountSettingsInMeetingDataCenterRegionsEnum = "HK"
	AccountSettings200ApplicationJSONAccountSettingsInMeetingDataCenterRegionsEnumAu AccountSettings200ApplicationJSONAccountSettingsInMeetingDataCenterRegionsEnum = "AU"
	AccountSettings200ApplicationJSONAccountSettingsInMeetingDataCenterRegionsEnumIn AccountSettings200ApplicationJSONAccountSettingsInMeetingDataCenterRegionsEnum = "IN"
	AccountSettings200ApplicationJSONAccountSettingsInMeetingDataCenterRegionsEnumTy AccountSettings200ApplicationJSONAccountSettingsInMeetingDataCenterRegionsEnum = "TY"
	AccountSettings200ApplicationJSONAccountSettingsInMeetingDataCenterRegionsEnumCn AccountSettings200ApplicationJSONAccountSettingsInMeetingDataCenterRegionsEnum = "CN"
	AccountSettings200ApplicationJSONAccountSettingsInMeetingDataCenterRegionsEnumUs AccountSettings200ApplicationJSONAccountSettingsInMeetingDataCenterRegionsEnum = "US"
	AccountSettings200ApplicationJSONAccountSettingsInMeetingDataCenterRegionsEnumCa AccountSettings200ApplicationJSONAccountSettingsInMeetingDataCenterRegionsEnum = "CA"
)

func (e *AccountSettings200ApplicationJSONAccountSettingsInMeetingDataCenterRegionsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EU":
		fallthrough
	case "HK":
		fallthrough
	case "AU":
		fallthrough
	case "IN":
		fallthrough
	case "TY":
		fallthrough
	case "CN":
		fallthrough
	case "US":
		fallthrough
	case "CA":
		*e = AccountSettings200ApplicationJSONAccountSettingsInMeetingDataCenterRegionsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountSettings200ApplicationJSONAccountSettingsInMeetingDataCenterRegionsEnum: %s", s)
	}
}

// AccountSettings200ApplicationJSONAccountSettingsInMeetingEntryExitChimeEnum - Play sound when participants join or leave.<br>`host` - Heard by host only.<br>`all` - Heard by host and all attendees.<br>`none` - Disable.
type AccountSettings200ApplicationJSONAccountSettingsInMeetingEntryExitChimeEnum string

const (
	AccountSettings200ApplicationJSONAccountSettingsInMeetingEntryExitChimeEnumHost AccountSettings200ApplicationJSONAccountSettingsInMeetingEntryExitChimeEnum = "host"
	AccountSettings200ApplicationJSONAccountSettingsInMeetingEntryExitChimeEnumAll  AccountSettings200ApplicationJSONAccountSettingsInMeetingEntryExitChimeEnum = "all"
	AccountSettings200ApplicationJSONAccountSettingsInMeetingEntryExitChimeEnumNone AccountSettings200ApplicationJSONAccountSettingsInMeetingEntryExitChimeEnum = "none"
)

func (e *AccountSettings200ApplicationJSONAccountSettingsInMeetingEntryExitChimeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "host":
		fallthrough
	case "all":
		fallthrough
	case "none":
		*e = AccountSettings200ApplicationJSONAccountSettingsInMeetingEntryExitChimeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountSettings200ApplicationJSONAccountSettingsInMeetingEntryExitChimeEnum: %s", s)
	}
}

type AccountSettings200ApplicationJSONAccountSettingsInMeetingVirtualBackgroundSettingsFiles struct {
	// Unique identifier of the file.
	ID *string `json:"id,omitempty"`
	// Indicates whether or not this file is the default virtual background file.
	IsDefault *bool `json:"is_default,omitempty"`
	// File name.
	Name *string `json:"name,omitempty"`
	// File size.
	Size *string `json:"size,omitempty"`
	// File type.
	Type *string `json:"type,omitempty"`
}

// AccountSettings200ApplicationJSONAccountSettingsInMeetingVirtualBackgroundSettings - Settings to manage virtual background.
type AccountSettings200ApplicationJSONAccountSettingsInMeetingVirtualBackgroundSettings struct {
	// Allow users to upload custom backgrounds.
	AllowUploadCustom *bool `json:"allow_upload_custom,omitempty"`
	// Allow use of videos for virtual backgrounds.
	AllowVideos *bool `json:"allow_videos,omitempty"`
	// Enable virtual background.
	Enable *bool                                                                                     `json:"enable,omitempty"`
	Files  []AccountSettings200ApplicationJSONAccountSettingsInMeetingVirtualBackgroundSettingsFiles `json:"files,omitempty"`
}

// AccountSettings200ApplicationJSONAccountSettingsInMeetingWhoCanShareScreenEnum - Indicates who can share their screen or content during meetings. The value can be one of the following: <br>
// `host`: Only host can share the screen.<br>
// `all`: Both hosts and attendees can share their screen during meetings. For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
type AccountSettings200ApplicationJSONAccountSettingsInMeetingWhoCanShareScreenEnum string

const (
	AccountSettings200ApplicationJSONAccountSettingsInMeetingWhoCanShareScreenEnumHost AccountSettings200ApplicationJSONAccountSettingsInMeetingWhoCanShareScreenEnum = "host"
	AccountSettings200ApplicationJSONAccountSettingsInMeetingWhoCanShareScreenEnumAll  AccountSettings200ApplicationJSONAccountSettingsInMeetingWhoCanShareScreenEnum = "all"
)

func (e *AccountSettings200ApplicationJSONAccountSettingsInMeetingWhoCanShareScreenEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "host":
		fallthrough
	case "all":
		*e = AccountSettings200ApplicationJSONAccountSettingsInMeetingWhoCanShareScreenEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountSettings200ApplicationJSONAccountSettingsInMeetingWhoCanShareScreenEnum: %s", s)
	}
}

// AccountSettings200ApplicationJSONAccountSettingsInMeetingWhoCanShareScreenWhenSomeoneIsSharingEnum - Indicates who is allowed to start sharing screen when someone else in the meeting is sharing their screen. The value can be one of the following:<br>
// `host`: Only a host can share the screen when someone else is sharing.<br>
// `all`: Anyone in the meeting is allowed to start sharing their screen when someone else is sharing. For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
type AccountSettings200ApplicationJSONAccountSettingsInMeetingWhoCanShareScreenWhenSomeoneIsSharingEnum string

const (
	AccountSettings200ApplicationJSONAccountSettingsInMeetingWhoCanShareScreenWhenSomeoneIsSharingEnumHost AccountSettings200ApplicationJSONAccountSettingsInMeetingWhoCanShareScreenWhenSomeoneIsSharingEnum = "host"
	AccountSettings200ApplicationJSONAccountSettingsInMeetingWhoCanShareScreenWhenSomeoneIsSharingEnumAll  AccountSettings200ApplicationJSONAccountSettingsInMeetingWhoCanShareScreenWhenSomeoneIsSharingEnum = "all"
)

func (e *AccountSettings200ApplicationJSONAccountSettingsInMeetingWhoCanShareScreenWhenSomeoneIsSharingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "host":
		fallthrough
	case "all":
		*e = AccountSettings200ApplicationJSONAccountSettingsInMeetingWhoCanShareScreenWhenSomeoneIsSharingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountSettings200ApplicationJSONAccountSettingsInMeetingWhoCanShareScreenWhenSomeoneIsSharingEnum: %s", s)
	}
}

// AccountSettings200ApplicationJSONAccountSettingsInMeeting - Account Settings: In Meeting.
type AccountSettings200ApplicationJSONAccountSettingsInMeeting struct {
	// Identify guest participants in a meeting or webinar.
	AlertGuestJoin *bool `json:"alert_guest_join,omitempty"`
	// Allow live streaming.
	AllowLiveStreaming *bool `json:"allow_live_streaming,omitempty"`
	// If the value of this field is set to `true`, meeting participants and webinar panelists can be allowed to rename themselves during a meeting or a webinar.
	//
	AllowParticipantsToRename *bool `json:"allow_participants_to_rename,omitempty"`
	// Show the Zoom desktop application when sharing screens.
	AllowShowZoomWindows *bool `json:"allow_show_zoom_windows,omitempty"`
	// Allow participants to use annotation tools to add information to shared screens.
	Annotation *bool `json:"annotation,omitempty"`
	// Allow an anonymous Q&A in a webinar.
	AnonymousQuestionAnswer *bool `json:"anonymous_question_answer,omitempty"`
	// Allow host to put attendee on hold.
	//
	// **This field has been deprecated and is no longer supported.**
	AttendeeOnHold *bool `json:"attendee_on_hold,omitempty"`
	// Enable users to see and add contacts to the "auto-answer group" in the chat contact list. Any call from members of this group will automatically be answered.
	AutoAnswer *bool `json:"auto_answer,omitempty"`
	// Automatically save all in-meeting chats so that the host does not need to manually save the chat transcript after the meeting starts.
	AutoSavingChat *bool `json:"auto_saving_chat,omitempty"`
	// Allow host to split meeting participants into separate, smaller rooms.
	BreakoutRoom *bool `json:"breakout_room,omitempty"`
	// Allow meeting participants to send a message that is visible to all participants.
	Chat *bool `json:"chat,omitempty"`
	// Allow a host to type closed captions. Enable a host to assign a participant or third party device to add closed captions.
	ClosedCaption *bool `json:"closed_caption,omitempty"`
	// Allow the host to add co-hosts.
	CoHost *bool `json:"co_host,omitempty"`
	// If set to `true`, account owners and admins on paid accounts can [select data center regions](https://support.zoom.us/hc/en-us/articles/360042411451-Selecting-data-center-regions-for-hosted-meetings-and-webinars) to use for hosting their real-time meeting and webinar traffic. These regions can be provided in the `data_center_regions` field. If set to `false`, the regions cannot be customized and the default regions will be used.
	CustomDataCenterRegions *bool `json:"custom_data_center_regions,omitempty"`
	// Custom live streaming.
	CustomLiveStreamingService *bool `json:"custom_live_streaming_service,omitempty"`
	// Custom service instructions.
	CustomServiceInstructions *string `json:"custom_service_instructions,omitempty"`
	// If you have set the value of `custom_data_center_regions` to `true`, specify the data center regions that you would like to opt in to (country codes from among: ["EU", "HK", "AU", "IN", "LA", "TY", "CN", "US", "CA"]).
	//
	DataCenterRegions *AccountSettings200ApplicationJSONAccountSettingsInMeetingDataCenterRegionsEnum `json:"data_center_regions,omitempty"`
	// DSCP audio.
	DscpAudio *int64 `json:"dscp_audio,omitempty"`
	// DSCP marking.
	DscpMarking *bool `json:"dscp_marking,omitempty"`
	// DSCP video.
	DscpVideo *int64 `json:"dscp_video,omitempty"`
	// Zoom requires encryption for all data between the Zoom cloud, Zoom client, and Zoom Room. Require encryption for 3rd party endpoints (H323/SIP).
	E2eEncryption *bool `json:"e2e_encryption,omitempty"`
	// Play sound when participants join or leave.<br>`host` - Heard by host only.<br>`all` - Heard by host and all attendees.<br>`none` - Disable.
	EntryExitChime *AccountSettings200ApplicationJSONAccountSettingsInMeetingEntryExitChimeEnum `json:"entry_exit_chime,omitempty"`
	// Allow another user to take control of your camera during a meeting.
	FarEndCameraControl *bool `json:"far_end_camera_control,omitempty"`
	// Add a "Feedback" tab to the Windows Settings or Mac Preferences dialog. Enable users to provide feedback to Zoom at the end of the meeting.
	Feedback *bool `json:"feedback,omitempty"`
	// Indicates whether [in-meeting file transfer](https://support.zoom.us/hc/en-us/articles/209605493-In-meeting-file-transfer) setting has been enabled on the account or not.
	FileTransfer *bool `json:"file_transfer,omitempty"`
	// Activate higher quality video for host and participants.
	// Please note: This will use more bandwidth.
	GroupHd *bool `json:"group_hd,omitempty"`
	// Enable or disable meeting reactions. <br>
	// `true`: Allow meeting participants to communicate without interrupting by reacting with an emoji that shows on their video.<br>
	// `false`: Do not enable meeting reactions.
	MeetingReactions *bool `json:"meeting_reactions,omitempty"`
	// Allow users to select original sound in their client settings.
	OriginalAudio *bool `json:"original_audio,omitempty"`
	// Peer to peer connection while only two people are in a meeting.
	P2pConnetion *bool `json:"p2p_connetion,omitempty"`
	// Peer to peer listening ports range.
	P2pPorts *bool `json:"p2p_ports,omitempty"`
	// Add "Polls" to the meeting controls.
	Polling *bool `json:"polling,omitempty"`
	// The listening ports range, separated by a comma (ex 55,56). The ports range must be between 1 to 65535.
	PortsRange *string `json:"ports_range,omitempty"`
	// Display a thumbs up or down survey at the end of each meeting.
	PostMeetingFeedback *bool `json:"post_meeting_feedback,omitempty"`
	// Allow a meeting participant to send a private message to another participant.
	PrivateChat *bool `json:"private_chat,omitempty"`
	// Record and play their own voice.
	RecordPlayOwnVoice *bool `json:"record_play_own_voice,omitempty"`
	// Allow users to request remote control.
	RemoteControl *bool `json:"remote_control,omitempty"`
	// Indicates whether the [**Request permission to unmute participants**](https://support.zoom.us/hc/en-us/articles/203435537-Muting-and-unmuting-participants-in-a-meeting#h_01EGK4XFWS1SJGZ71MYGKF7260) option has been enabled for the account or not.
	RequestPermissionToUnmute *bool `json:"request_permission_to_unmute,omitempty"`
	// Allow screen sharing.
	ScreenSharing *bool `json:"screen_sharing,omitempty"`
	// Only show the default email when sending email invites.
	SendingDefaultEmailInvites *bool `json:"sending_default_email_invites,omitempty"`
	// If the value of this field is set to `true`, you will allow participants to join a meeting directly from their browser and bypass the Zoom application download process. This is a workaround for participants who are unable to download, install, or run applications. Note that the meeting experience from the browser is limited.
	ShowAJoinFromYourBrowserLink *bool `json:"show_a_join_from_your_browser_link,omitempty"`
	// Always show the meeting control toolbar.
	ShowMeetingControlToolbar *bool `json:"show_meeting_control_toolbar,omitempty"`
	// Allow users to select stereo audio in their client settings.
	StereoAudio *bool `json:"stereo_audio,omitempty"`
	// Use HTML formatted email for the Outlook plugin.
	UseHTMLFormatEmail *bool `json:"use_html_format_email,omitempty"`
	// Allow users to replace their background with any selected image. Choose or upload an image in the Zoom desktop application settings.
	VirtualBackground *bool `json:"virtual_background,omitempty"`
	// Settings to manage virtual background.
	VirtualBackgroundSettings *AccountSettings200ApplicationJSONAccountSettingsInMeetingVirtualBackgroundSettings `json:"virtual_background_settings,omitempty"`
	// Add a watermark when viewing a shared screen.
	Watermark *bool `json:"watermark,omitempty"`
	// Allow a Q&A in a webinar.
	WebinarQuestionAnswer *bool `json:"webinar_question_answer,omitempty"`
	// Allow participants to share a whiteboard that includes annotation tools.
	Whiteboard *bool `json:"whiteboard,omitempty"`
	// Indicates who can share their screen or content during meetings. The value can be one of the following: <br>
	// `host`: Only host can share the screen.<br>
	// `all`: Both hosts and attendees can share their screen during meetings. For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
	//
	WhoCanShareScreen *AccountSettings200ApplicationJSONAccountSettingsInMeetingWhoCanShareScreenEnum `json:"who_can_share_screen,omitempty"`
	// Indicates who is allowed to start sharing screen when someone else in the meeting is sharing their screen. The value can be one of the following:<br>
	// `host`: Only a host can share the screen when someone else is sharing.<br>
	// `all`: Anyone in the meeting is allowed to start sharing their screen when someone else is sharing. For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
	//
	WhoCanShareScreenWhenSomeoneIsSharing *AccountSettings200ApplicationJSONAccountSettingsInMeetingWhoCanShareScreenWhenSomeoneIsSharingEnum `json:"who_can_share_screen_when_someone_is_sharing,omitempty"`
	// Workplace by facebook.
	WorkplaceByFacebook *bool `json:"workplace_by_facebook,omitempty"`
}

// AccountSettings200ApplicationJSONAccountSettingsIntegration - Account Settings: Integration.
type AccountSettings200ApplicationJSONAccountSettingsIntegration struct {
	// Enable users who join a meeting from their mobile device to share content from their Box account.
	Box *bool `json:"box,omitempty"`
	// Enable users who join a meeting from their mobile device to share content from their Dropbox account.
	Dropbox *bool `json:"dropbox,omitempty"`
	// Enable meetings to be scheduled using Google Calendar.
	GoogleCalendar *bool `json:"google_calendar,omitempty"`
	// Enable users who join a meeting from their mobile device to share content from their Google Drive.
	GoogleDrive *bool `json:"google_drive,omitempty"`
	// Enable users to control a connected Kubi device from within a Zoom meeting.
	Kubi *bool `json:"kubi,omitempty"`
	// Enable users who join a meeting from their mobile device to share content from their Microsoft OneDrive account.
	MicrosoftOneDrive *bool `json:"microsoft_one_drive,omitempty"`
}

type AccountSettings200ApplicationJSONAccountSettingsProfileRecordingStorageLocation struct {
	// Users can choose the country to store their recorded content. Content can include meeting, webinar, and phone recordings, as well as voicemail, transcripts, and custom greeting prompts. See [Managing the Communications Content storage location](https://support.zoom.us/hc/en-us/articles/360050781131) for details.
	//
	// Provide abbreviated country codes as the value for this field. See the [Countries abbreviation list](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries) for details.
	AllowedValues []string `json:"allowed_values,omitempty"`
	// Abbreviated country code.
	Value *string `json:"value,omitempty"`
}

type AccountSettings200ApplicationJSONAccountSettingsProfile struct {
	RecordingStorageLocation *AccountSettings200ApplicationJSONAccountSettingsProfileRecordingStorageLocation `json:"recording_storage_location,omitempty"`
}

type AccountSettings200ApplicationJSONAccountSettingsRecordingArchiveSettings struct {
	// Include in-meeting and/or in-webinar audio in the archive.
	AudioFile *bool `json:"audio_file,omitempty"`
	// Include closed caption or transcript in the archive.
	CcTranscriptFile *bool `json:"cc_transcript_file,omitempty"`
	// Include in-meeting chat in the archive.
	ChatFile *bool `json:"chat_file,omitempty"`
	// Include user email in in-meeting chat file.
	ChatWithSenderEmail *bool `json:"chat_with_sender_email,omitempty"`
	// Include in-meeting and/or in-webinar video in the archive.
	VideoFile *bool `json:"video_file,omitempty"`
}

// AccountSettings200ApplicationJSONAccountSettingsRecordingArchiveTypeEnum - Archive types:
//
// * `1`: Only meetings are archived.<br>
// * `2`: Only webinars are archived.<br>
// * `3`: Both meetings and webinars are archived.
type AccountSettings200ApplicationJSONAccountSettingsRecordingArchiveTypeEnum string

const (
	AccountSettings200ApplicationJSONAccountSettingsRecordingArchiveTypeEnumOne   AccountSettings200ApplicationJSONAccountSettingsRecordingArchiveTypeEnum = "1"
	AccountSettings200ApplicationJSONAccountSettingsRecordingArchiveTypeEnumTwo   AccountSettings200ApplicationJSONAccountSettingsRecordingArchiveTypeEnum = "2"
	AccountSettings200ApplicationJSONAccountSettingsRecordingArchiveTypeEnumThree AccountSettings200ApplicationJSONAccountSettingsRecordingArchiveTypeEnum = "3"
)

func (e *AccountSettings200ApplicationJSONAccountSettingsRecordingArchiveTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		*e = AccountSettings200ApplicationJSONAccountSettingsRecordingArchiveTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountSettings200ApplicationJSONAccountSettingsRecordingArchiveTypeEnum: %s", s)
	}
}

// AccountSettings200ApplicationJSONAccountSettingsRecordingArchive - [Archiving solution](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-Meeting-and-Webinar-data) settings. This setting can only be used if you have been granted with archiving solution access by the Zoom support team.
type AccountSettings200ApplicationJSONAccountSettingsRecordingArchive struct {
	// Enable the archiving feature.
	Enable   *bool                                                                     `json:"enable,omitempty"`
	Settings *AccountSettings200ApplicationJSONAccountSettingsRecordingArchiveSettings `json:"settings,omitempty"`
	// Archive types:
	//
	// * `1`: Only meetings are archived.<br>
	// * `2`: Only webinars are archived.<br>
	// * `3`: Both meetings and webinars are archived.
	Type *AccountSettings200ApplicationJSONAccountSettingsRecordingArchiveTypeEnum `json:"type,omitempty"`
}

// AccountSettings200ApplicationJSONAccountSettingsRecordingAutoRecordingEnum - Automatic recording:<br>`local` - Record on local.<br>`cloud` -  Record on cloud.<br>`none` - Disabled.
type AccountSettings200ApplicationJSONAccountSettingsRecordingAutoRecordingEnum string

const (
	AccountSettings200ApplicationJSONAccountSettingsRecordingAutoRecordingEnumLocal AccountSettings200ApplicationJSONAccountSettingsRecordingAutoRecordingEnum = "local"
	AccountSettings200ApplicationJSONAccountSettingsRecordingAutoRecordingEnumCloud AccountSettings200ApplicationJSONAccountSettingsRecordingAutoRecordingEnum = "cloud"
	AccountSettings200ApplicationJSONAccountSettingsRecordingAutoRecordingEnumNone  AccountSettings200ApplicationJSONAccountSettingsRecordingAutoRecordingEnum = "none"
)

func (e *AccountSettings200ApplicationJSONAccountSettingsRecordingAutoRecordingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "local":
		fallthrough
	case "cloud":
		fallthrough
	case "none":
		*e = AccountSettings200ApplicationJSONAccountSettingsRecordingAutoRecordingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountSettings200ApplicationJSONAccountSettingsRecordingAutoRecordingEnum: %s", s)
	}
}

// AccountSettings200ApplicationJSONAccountSettingsRecordingIPAddressAccessControl - Setting to allow cloud recording access only from specific IP address ranges.
type AccountSettings200ApplicationJSONAccountSettingsRecordingIPAddressAccessControl struct {
	// If set to `true`, the cloud recordings of this account can only be accessed by the IP addresses defined in the `ip_addresses_or_ranges` property.
	//
	//
	Enable *bool `json:"enable,omitempty"`
	// IP addresses or ranges that have access to the cloud recordings. Separate multiple IP ranges with comma. Use n.n.n.n, n.n.n.n/n or n.n.n.n - n.n.n.n syntax where n is a number.
	//
	// Example: `46.33.24.184, 48.99.100.2/25` or `200.181.108.17 - 220.181.108.157`
	//
	//
	IPAddressesOrRanges *string `json:"ip_addresses_or_ranges,omitempty"`
}

// AccountSettings200ApplicationJSONAccountSettingsRecordingRecordingPasswordRequirement - This object represents the minimum password requirements set for recordings via Account Recording Settings.
type AccountSettings200ApplicationJSONAccountSettingsRecordingRecordingPasswordRequirement struct {
	// Indicates whether or not password must contain at least one alphabetical letter (a, b, c..).
	HaveLetter *bool `json:"have_letter,omitempty"`
	// Indicates whether or not password must contain at least one number(1, 2, 3..).
	HaveNumber *bool `json:"have_number,omitempty"`
	// Indicates whether or not password must contain at least one special character(!, @, #..).
	HaveSpecialCharacter *bool `json:"have_special_character,omitempty"`
	// Minimum required length for the password.
	Length *int64 `json:"length,omitempty"`
	// Indicates whether or not password must contain only numeric characters.
	OnlyAllowNumeric *bool `json:"only_allow_numeric,omitempty"`
}

// AccountSettings200ApplicationJSONAccountSettingsRecording - Account Settings: Recording.
type AccountSettings200ApplicationJSONAccountSettingsRecording struct {
	// Cloud recordings are only accessible to account members. People outside of your organization cannot open links that provide access to cloud recordings.
	AccountUserAccessRecording *bool `json:"account_user_access_recording,omitempty"`
	// Allow recovery of deleted cloud recordings from trash.
	// If the value of this field is set to `true`, deleted cloud recordings will be kept in trash for 30 days after deletion and can be recovered within that period.
	AllowRecoveryDeletedCloudRecordings *bool `json:"allow_recovery_deleted_cloud_recordings,omitempty"`
	// [Archiving solution](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-Meeting-and-Webinar-data) settings. This setting can only be used if you have been granted with archiving solution access by the Zoom support team.
	Archive *AccountSettings200ApplicationJSONAccountSettingsRecordingArchive `json:"archive,omitempty"`
	// Allow Zoom to permanantly delete recordings automatically after a specified number of days.
	AutoDeleteCmr *bool `json:"auto_delete_cmr,omitempty"`
	// When `auto_delete_cmr` function is 'true' this value will set the number of days before the auto deletion of cloud recordings.
	AutoDeleteCmrDays *int64 `json:"auto_delete_cmr_days,omitempty"`
	// Automatic recording:<br>`local` - Record on local.<br>`cloud` -  Record on cloud.<br>`none` - Disabled.
	AutoRecording *AccountSettings200ApplicationJSONAccountSettingsRecordingAutoRecordingEnum `json:"auto_recording,omitempty"`
	// Allow hosts to record and save the meeting in the cloud.
	CloudRecording *bool `json:"cloud_recording,omitempty"`
	// Cloud recording downloads.
	CloudRecordingDownload *bool `json:"cloud_recording_download,omitempty"`
	// Only the host can download cloud recordings.
	CloudRecordingDownloadHost *bool `json:"cloud_recording_download_host,omitempty"`
	// If the value of this field is set to `true`, hosts will be able to delete the recordings. If this option is set to `false`, the recordings cannot be deleted by the host and only admin can delete them.
	//
	HostDeleteCloudRecording *bool `json:"host_delete_cloud_recording,omitempty"`
	// Setting to allow cloud recording access only from specific IP address ranges.
	//
	IPAddressAccessControl *AccountSettings200ApplicationJSONAccountSettingsRecordingIPAddressAccessControl `json:"ip_address_access_control,omitempty"`
	// Allow hosts and participants to record the meeting using a local file.
	LocalRecording *bool `json:"local_recording,omitempty"`
	// If set to `true`, meeting hosts cannot view their meeting cloud recordings. Only the admins who have recording management privilege can access them.
	//
	PreventHostAccessRecording *bool `json:"prevent_host_access_recording,omitempty"`
	// Record an audio only file.
	RecordAudioFile *bool `json:"record_audio_file,omitempty"`
	// Record the gallery view with a shared screen.
	RecordGalleryView *bool `json:"record_gallery_view,omitempty"`
	// Record the active speaker with a shared screen.
	RecordSpeakerView *bool `json:"record_speaker_view,omitempty"`
	// Automatically transcribe the audio of the meeting or webinar to the cloud.
	RecordingAudioTranscript *bool `json:"recording_audio_transcript,omitempty"`
	// Show a disclaimer to participants before a recording starts
	//
	RecordingDisclaimer *bool `json:"recording_disclaimer,omitempty"`
	// This object represents the minimum password requirements set for recordings via Account Recording Settings.
	RecordingPasswordRequirement *AccountSettings200ApplicationJSONAccountSettingsRecordingRecordingPasswordRequirement `json:"recording_password_requirement,omitempty"`
	// Require a passcode to access existing cloud recordings.
	RequiredPasswordForExistingCloudRecordings *bool `json:"required_password_for_existing_cloud_recordings,omitempty"`
	// Save the chat text from the meeting.
	SaveChatText *bool `json:"save_chat_text,omitempty"`
	// Add a timestamp to the recording.
	ShowTimestamp *bool `json:"show_timestamp,omitempty"`
}

// AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingAudioTypeEnum - Determine how participants can join the audio portion of the meeting.<br>`both` - Telephony and VoIP.<br>`telephony` - Audio PSTN telephony only.<br>`voip` - VoIP only.<br>`thirdParty` - 3rd party audio conference.
type AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingAudioTypeEnum string

const (
	AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingAudioTypeEnumBoth       AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingAudioTypeEnum = "both"
	AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingAudioTypeEnumTelephony  AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingAudioTypeEnum = "telephony"
	AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingAudioTypeEnumVoip       AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingAudioTypeEnum = "voip"
	AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingAudioTypeEnumThirdParty AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingAudioTypeEnum = "thirdParty"
)

func (e *AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingAudioTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "both":
		fallthrough
	case "telephony":
		fallthrough
	case "voip":
		fallthrough
	case "thirdParty":
		*e = AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingAudioTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingAudioTypeEnum: %s", s)
	}
}

type AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingMeetingPasswordRequirementConsecutiveCharactersLengthEnum string

const (
	AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingMeetingPasswordRequirementConsecutiveCharactersLengthEnumZero  AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingMeetingPasswordRequirementConsecutiveCharactersLengthEnum = "0"
	AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingMeetingPasswordRequirementConsecutiveCharactersLengthEnumFour  AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingMeetingPasswordRequirementConsecutiveCharactersLengthEnum = "4"
	AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingMeetingPasswordRequirementConsecutiveCharactersLengthEnumFive  AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingMeetingPasswordRequirementConsecutiveCharactersLengthEnum = "5"
	AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingMeetingPasswordRequirementConsecutiveCharactersLengthEnumSix   AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingMeetingPasswordRequirementConsecutiveCharactersLengthEnum = "6"
	AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingMeetingPasswordRequirementConsecutiveCharactersLengthEnumSeven AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingMeetingPasswordRequirementConsecutiveCharactersLengthEnum = "7"
	AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingMeetingPasswordRequirementConsecutiveCharactersLengthEnumEight AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingMeetingPasswordRequirementConsecutiveCharactersLengthEnum = "8"
)

func (e *AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingMeetingPasswordRequirementConsecutiveCharactersLengthEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		fallthrough
	case "8":
		*e = AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingMeetingPasswordRequirementConsecutiveCharactersLengthEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingMeetingPasswordRequirementConsecutiveCharactersLengthEnum: %s", s)
	}
}

// AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingMeetingPasswordRequirement - Account wide meeting/webinar [password requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
type AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingMeetingPasswordRequirement struct {
	ConsecutiveCharactersLength *AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingMeetingPasswordRequirementConsecutiveCharactersLengthEnum `json:"consecutive_characters_length,omitempty"`
	// If set to `true`, the password must contain at least 1 letter (such as a,b,c...).
	//
	HaveLetter *bool `json:"have_letter,omitempty"`
	// If set to `true`, the password must contain at least 1 number (such as 1,2,3...).
	HaveNumber *bool `json:"have_number,omitempty"`
	// If set to `true`, the password must have at least 1 special character (!,@,#...).
	HaveSpecialCharacter *bool `json:"have_special_character,omitempty"`
	// If set to `true`, the password must include both uppercase and lowercase characters.
	HaveUpperAndLowerCharacters *bool `json:"have_upper_and_lower_characters,omitempty"`
	// The minimum length that the meeting/webinar password needs to have.
	Length *int64 `json:"length,omitempty"`
	// If set to `true`, the password must only contain numbers and no other characters.
	OnlyAllowNumeric *bool `json:"only_allow_numeric,omitempty"`
	// If set to `true`, users will be informed if the provided password is weak.
	WeakEnhanceDetection *bool `json:"weak_enhance_detection,omitempty"`
}

// AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingRequirePasswordForPmiMeetingsEnum - Require a password for a meeting held using Personal Meeting ID (PMI) This setting is always enabled for free accounts and Pro accounts with a single host and cannot be modified for these accounts.
type AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingRequirePasswordForPmiMeetingsEnum string

const (
	AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingRequirePasswordForPmiMeetingsEnumJbhOnly AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingRequirePasswordForPmiMeetingsEnum = "jbh_only"
	AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingRequirePasswordForPmiMeetingsEnumAll     AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingRequirePasswordForPmiMeetingsEnum = "all"
	AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingRequirePasswordForPmiMeetingsEnumNone    AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingRequirePasswordForPmiMeetingsEnum = "none"
)

func (e *AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingRequirePasswordForPmiMeetingsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "jbh_only":
		fallthrough
	case "all":
		fallthrough
	case "none":
		*e = AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingRequirePasswordForPmiMeetingsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingRequirePasswordForPmiMeetingsEnum: %s", s)
	}
}

// AccountSettings200ApplicationJSONAccountSettingsScheduleMeeting - Account Settings: Schedule Meeting.
type AccountSettings200ApplicationJSONAccountSettingsScheduleMeeting struct {
	// Determine how participants can join the audio portion of the meeting.<br>`both` - Telephony and VoIP.<br>`telephony` - Audio PSTN telephony only.<br>`voip` - VoIP only.<br>`thirdParty` - 3rd party audio conference.
	AudioType *AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingAudioTypeEnum `json:"audio_type,omitempty"`
	// Only Zoom users who are signed in can join meetings.
	EnforceLogin *bool `json:"enforce_login,omitempty"`
	// Only signed in users with a specified domain can join the meeting.
	EnforceLoginDomains *string `json:"enforce_login_domains,omitempty"`
	// Only signed in users with a specific domain can join meetings.
	EnforceLoginWithDomains *bool `json:"enforce_login_with_domains,omitempty"`
	// Require a password for Personal Meetings if attendees can join before host.
	ForcePmiJbhPassword *bool `json:"force_pmi_jbh_password,omitempty"`
	// Start meetings with the host video on.
	HostVideo *bool `json:"host_video,omitempty"`
	// Allow participants to join the meeting before the host arrives.
	JoinBeforeHost *bool `json:"join_before_host,omitempty"`
	// Account wide meeting/webinar [password requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
	MeetingPasswordRequirement *AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingMeetingPasswordRequirement `json:"meeting_password_requirement,omitempty"`
	// Always display "Zoom Meeting" as the meeting topic.
	NotStoreMeetingTopic *bool `json:"not_store_meeting_topic,omitempty"`
	// Start meetings with the participant video on. Participants can change this setting during the meeting.
	ParticipantVideo *bool `json:"participant_video,omitempty"`
	// Personal Meeting Setting.<br><br>
	// `true`: Indicates that the **"Enable Personal Meeting ID"** setting is turned on. Users can choose to use personal meeting ID for their meetings. <br><br>
	// `false`: Indicates that the **"Enable Personal Meeting ID"** setting is [turned off](https://support.zoom.us/hc/en-us/articles/201362843-Personal-meeting-ID-PMI-and-personal-link#h_aa0335c8-3b06-41bc-bc1f-a8b84ef17f2a). If this setting is disabled, meetings that were scheduled with PMI will be invalid. Scheduled meetings will need to be manually updated.
	// For Zoom Phone only:If a user has been assigned a desk phone, **"Elevate to Zoom Meeting"** on desk phone will be disabled.
	//
	//
	//
	PersonalMeeting *bool `json:"personal_meeting,omitempty"`
	// Require a password for instant meetings. If you use PMI for your instant meetings, this option will be disabled. This setting is always enabled for free accounts and Pro accounts with a single host and cannot be modified for these accounts.
	//
	RequirePasswordForInstantMeetings *bool `json:"require_password_for_instant_meetings,omitempty"`
	// Require a password for a meeting held using Personal Meeting ID (PMI) This setting is always enabled for free accounts and Pro accounts with a single host and cannot be modified for these accounts.
	//
	RequirePasswordForPmiMeetings *AccountSettings200ApplicationJSONAccountSettingsScheduleMeetingRequirePasswordForPmiMeetingsEnum `json:"require_password_for_pmi_meetings,omitempty"`
	// Require a password for meetings which have already been scheduled
	//
	RequirePasswordForScheduledMeetings *bool `json:"require_password_for_scheduled_meetings,omitempty"`
	// Require a password when scheduling new meetings. This setting applies for regular meetings that do not use PMI. If enabled, a password will be generated while a host schedules a new meeting and participants will be required to enter the password before they can join the meeting. This setting is always enabled for free accounts and Pro accounts with a single host and cannot be modified for these accounts.
	RequirePasswordForSchedulingNewMeetings *bool `json:"require_password_for_scheduling_new_meetings,omitempty"`
	// Use Personal Meeting ID (PMI) when starting an instant meeting
	//
	UsePmiForInstantMeetings *bool `json:"use_pmi_for_instant_meetings,omitempty"`
	// Use Personal Meeting ID (PMI) when scheduling a meeting
	//
	UsePmiForScheduledMeetings *bool `json:"use_pmi_for_scheduled_meetings,omitempty"`
}

// AccountSettings200ApplicationJSONAccountSettingsSecurityPasswordRequirement - This object refers to the [enhanced password rules](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_bf8a25f6-9a66-447a-befd-f02ed3404f89) that allows Zoom account admins and owners to apply extra requiremets to the users' Zoom login password.
type AccountSettings200ApplicationJSONAccountSettingsSecurityPasswordRequirement struct {
	// Specify the max length of consecutive characters(abcde...) that can be used in a password.
	// If you set the value of this field to `0`, no restriction will be applied on consecutive characters.
	//
	// If you would like to set this restriction, you can specify a number between 4 and 8 that define the maximum allowed length for consecutive characters in a password.
	//
	// The max allowed length will be `n-1` where `n` refers to the value you provide for this field.  For instance, if you provide `4` as the value, there can only be a maximum of `3` consecutive characters in a password(example: abc1x@8fdh).
	ConsecutiveCharactersLength *int64 `json:"consecutive_characters_length,omitempty"`
	// If the value of this field is set to `true`, the password must have at least one special character(!, @, #...).
	HaveSpecialCharacter *bool `json:"have_special_character,omitempty"`
	// Specify a minimum length for the password. The password length can be from a minimum of 9 characters, up to 14 characters. If you provide `0` as the value of this field, this field will be disabled and not be used and the basic password length requirement (minimum of 8 characters) will be applied for the requirement.
	MinimumPasswordLength *int64 `json:"minimum_password_length,omitempty"`
	// If the value of this field is set to `true`, user passwords will have to pass detection through a weak password dictionary in case hackers use simple passwords to sign in to your users‚Äô accounts.
	WeakEnhanceDetection *bool `json:"weak_enhance_detection,omitempty"`
}

// AccountSettings200ApplicationJSONAccountSettingsSecuritySignInWithTwoFactorAuthEnum - Settings for 2FA( [two factor authentication](https://support.zoom.us/hc/en-us/articles/360038247071) ). The value can be one of the following:
// `all`: Two factor authentication will be enabled for all users in the account.<br>
// `none`: Two factor authentication is disabled.<br>
// `group`: Two factor authentication will be enabled for users belonging to specific groups. If 2FA is enabled for certain groups, the group IDs of the group(s) will be provided in the `sign_in_with_two_factor_auth_groups` field.<br>
// `role`: Two factor authentication will be enabled only for users assigned with specific roles in the account. If 2FA is enabled for specific roles, the role IDs will be provided in the
// `sign_in_with_two_factor_auth_roles` field.
type AccountSettings200ApplicationJSONAccountSettingsSecuritySignInWithTwoFactorAuthEnum string

const (
	AccountSettings200ApplicationJSONAccountSettingsSecuritySignInWithTwoFactorAuthEnumAll   AccountSettings200ApplicationJSONAccountSettingsSecuritySignInWithTwoFactorAuthEnum = "all"
	AccountSettings200ApplicationJSONAccountSettingsSecuritySignInWithTwoFactorAuthEnumGroup AccountSettings200ApplicationJSONAccountSettingsSecuritySignInWithTwoFactorAuthEnum = "group"
	AccountSettings200ApplicationJSONAccountSettingsSecuritySignInWithTwoFactorAuthEnumRole  AccountSettings200ApplicationJSONAccountSettingsSecuritySignInWithTwoFactorAuthEnum = "role"
	AccountSettings200ApplicationJSONAccountSettingsSecuritySignInWithTwoFactorAuthEnumNone  AccountSettings200ApplicationJSONAccountSettingsSecuritySignInWithTwoFactorAuthEnum = "none"
)

func (e *AccountSettings200ApplicationJSONAccountSettingsSecuritySignInWithTwoFactorAuthEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "all":
		fallthrough
	case "group":
		fallthrough
	case "role":
		fallthrough
	case "none":
		*e = AccountSettings200ApplicationJSONAccountSettingsSecuritySignInWithTwoFactorAuthEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountSettings200ApplicationJSONAccountSettingsSecuritySignInWithTwoFactorAuthEnum: %s", s)
	}
}

// AccountSettings200ApplicationJSONAccountSettingsSecurity - [Security settings](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_bf8a25f6-9a66-447a-befd-f02ed3404f89) of an Account.
type AccountSettings200ApplicationJSONAccountSettingsSecurity struct {
	// Only account administrators can change a user's username and picture.
	AdminChangeNamePic *bool `json:"admin_change_name_pic,omitempty"`
	// Hide billing information.
	HideBillingInfo *bool `json:"hide_billing_info,omitempty"`
	// Allow users to import photos from a photo library on a  device.
	ImportPhotosFromDevices *bool `json:"import_photos_from_devices,omitempty"`
	// This object refers to the [enhanced password rules](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_bf8a25f6-9a66-447a-befd-f02ed3404f89) that allows Zoom account admins and owners to apply extra requiremets to the users' Zoom login password.
	PasswordRequirement *AccountSettings200ApplicationJSONAccountSettingsSecurityPasswordRequirement `json:"password_requirement,omitempty"`
	// Settings for User Sign In interval requirements after a period of inactivity. If enabled, this setting forces automatic logout of users in Zoom Client app after a set amount of time. <br>
	//
	// If this setting is disabled, the value of this field will be `0`. If the setting is enabled, the value of this field will indicate the **period of inactivity** in minutes after which, an inactive user will be automatically logged out of the Zoom Client. The value for the period of inactivity can be one of the following:<br>
	//
	// `5`: 5 minutes<br>
	// `10`: 10 minutes<br>
	// `15`: 15 minutes<br>
	// `30`: 30 minutes<br>
	// `45`: 45 minutes<br>
	// `60`: 60 minutes<br>
	// `90`: 90 minutes<br>
	// `120`: 120 minutes
	//
	SignAgainPeriodForInactivityOnClient *int64 `json:"sign_again_period_for_inactivity_on_client,omitempty"`
	// Settings for User Sign In interval requirements after a period of inactivity. If enabled, this setting forces automatic logout of users in Zoom Web Portal after a set amount of time. <br>
	//
	// If this setting is disabled, the value of this field will be `0`. If the setting is enabled, the value of this field will indicate the **period of inactivity** in minutes after which, an inactive user will be automatically logged out of the Zoom Web Portal. The value for the period of inactivity can be one of the following:<br>
	//
	// `5`: 5 minutes<br>
	// `10`: 10 minutes<br>
	// `15`: 15 minutes<br>
	// `30`: 30 minutes<br>
	// `60`: 60 minutes<br>
	// `120`: 120 minutes
	//
	//
	//
	//
	SignAgainPeriodForInactivityOnWeb *int64 `json:"sign_again_period_for_inactivity_on_web,omitempty"`
	// Settings for 2FA( [two factor authentication](https://support.zoom.us/hc/en-us/articles/360038247071) ). The value can be one of the following:
	// `all`: Two factor authentication will be enabled for all users in the account.<br>
	// `none`: Two factor authentication is disabled.<br>
	// `group`: Two factor authentication will be enabled for users belonging to specific groups. If 2FA is enabled for certain groups, the group IDs of the group(s) will be provided in the `sign_in_with_two_factor_auth_groups` field.<br>
	// `role`: Two factor authentication will be enabled only for users assigned with specific roles in the account. If 2FA is enabled for specific roles, the role IDs will be provided in the
	// `sign_in_with_two_factor_auth_roles` field.
	//
	SignInWithTwoFactorAuth *AccountSettings200ApplicationJSONAccountSettingsSecuritySignInWithTwoFactorAuthEnum `json:"sign_in_with_two_factor_auth,omitempty"`
	// This field contains group IDs of groups that have 2FA enabled. This field is only returned if the value of `sign_in_with_two_factor_auth` is `group`
	SignInWithTwoFactorAuthGroups []string `json:"sign_in_with_two_factor_auth_groups,omitempty"`
	// This field contains role IDs of roles that have 2FA enabled. This field is only returned if the value of `sign_in_with_two_factor_auth` is `role`.
	SignInWithTwoFactorAuthRoles []string `json:"sign_in_with_two_factor_auth_roles,omitempty"`
}

// AccountSettings200ApplicationJSONAccountSettingsTelephonyTelephonyRegions - Indicates where most of the participants call into or call from duriing a meeting.
type AccountSettings200ApplicationJSONAccountSettingsTelephonyTelephonyRegions struct {
	// Telephony region options provided by Zoom to select from.
	AllowedValues []string `json:"allowed_values,omitempty"`
	// Telephony regions selected by the account to indicate where most of the participants call into or call from during a meeting.
	SelectionValues []string `json:"selection_values,omitempty"`
}

// AccountSettings200ApplicationJSONAccountSettingsTelephony - Account Settings: Telephony.
type AccountSettings200ApplicationJSONAccountSettingsTelephony struct {
	// Third party audio conference info.
	AudioConferenceInfo *string `json:"audio_conference_info,omitempty"`
	// Indicates where most of the participants call into or call from duriing a meeting.
	TelephonyRegions *AccountSettings200ApplicationJSONAccountSettingsTelephonyTelephonyRegions `json:"telephony_regions,omitempty"`
	// Users can join the meeting using the existing third party audio configuration.
	ThirdPartyAudio *bool `json:"third_party_audio,omitempty"`
}

// AccountSettings200ApplicationJSONAccountSettingsTsp - Account Settings: TSP.
type AccountSettings200ApplicationJSONAccountSettingsTsp struct {
	// Call Out
	CallOut *bool `json:"call_out,omitempty"`
	// Call Out Countries/Regions
	CallOutCountries []interface{} `json:"call_out_countries,omitempty"`
	// Display toll-free numbers
	DisplayTollFreeNumbers *bool `json:"display_toll_free_numbers,omitempty"`
	// Show international numbers link on the invitation email
	ShowInternationalNumbersLink *bool `json:"show_international_numbers_link,omitempty"`
}

// AccountSettings200ApplicationJSONAccountSettingsZoomRooms - Account Settings: Zoom Rooms.
type AccountSettings200ApplicationJSONAccountSettingsZoomRooms struct {
	// Automatic start and stop for scheduled meetings.
	AutoStartStopScheduledMeetings *bool `json:"auto_start_stop_scheduled_meetings,omitempty"`
	// Cloud recording for instant meetings.
	CmrForInstantMeeting *bool `json:"cmr_for_instant_meeting,omitempty"`
	// Shift all meetings to private.
	ForcePrivateMeeting *bool `json:"force_private_meeting,omitempty"`
	// Hide host and meeting ID from private meetings.
	HideHostInformation *bool `json:"hide_host_information,omitempty"`
	// Display meeting list with calendar integration.
	ListMeetingsWithCalendar *bool `json:"list_meetings_with_calendar,omitempty"`
	// Start AirPlay service manually.
	StartAirplayManually *bool `json:"start_airplay_manually,omitempty"`
	// Automatic direct sharing using an ultrasonic proximity signal.
	Ultrasonic *bool `json:"ultrasonic,omitempty"`
	// Upcoming meeting alert.
	UpcomingMeetingAlert *bool `json:"upcoming_meeting_alert,omitempty"`
	// Weekly system restart.
	WeeklySystemRestart *bool `json:"weekly_system_restart,omitempty"`
	// Zoom Room post meeting feedback.
	ZrPostMeetingFeedback *bool `json:"zr_post_meeting_feedback,omitempty"`
}

type AccountSettings200ApplicationJSONAccountSettings struct {
	// Account Settings: Notification.
	EmailNotification *AccountSettings200ApplicationJSONAccountSettingsEmailNotification `json:"email_notification,omitempty"`
	// Account Settings: Feature.
	Feature *AccountSettings200ApplicationJSONAccountSettingsFeature `json:"feature,omitempty"`
	// Account Settings: In Meeting.
	InMeeting *AccountSettings200ApplicationJSONAccountSettingsInMeeting `json:"in_meeting,omitempty"`
	// Account Settings: Integration.
	Integration *AccountSettings200ApplicationJSONAccountSettingsIntegration `json:"integration,omitempty"`
	Profile     *AccountSettings200ApplicationJSONAccountSettingsProfile     `json:"profile,omitempty"`
	// Account Settings: Recording.
	Recording *AccountSettings200ApplicationJSONAccountSettingsRecording `json:"recording,omitempty"`
	// Account Settings: Schedule Meeting.
	ScheduleMeeting *AccountSettings200ApplicationJSONAccountSettingsScheduleMeeting `json:"schedule_meeting,omitempty"`
	// [Security settings](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_bf8a25f6-9a66-447a-befd-f02ed3404f89) of an Account.
	Security *AccountSettings200ApplicationJSONAccountSettingsSecurity `json:"security,omitempty"`
	// Account Settings: Telephony.
	Telephony *AccountSettings200ApplicationJSONAccountSettingsTelephony `json:"telephony,omitempty"`
	// Account Settings: TSP.
	Tsp *AccountSettings200ApplicationJSONAccountSettingsTsp `json:"tsp,omitempty"`
	// Account Settings: Zoom Rooms.
	ZoomRooms *AccountSettings200ApplicationJSONAccountSettingsZoomRooms `json:"zoom_rooms,omitempty"`
}

type AccountSettings200ApplicationJSONType string

const (
	AccountSettings200ApplicationJSONTypeAccountSettings200ApplicationJSONAccountSettings                AccountSettings200ApplicationJSONType = "accountSettings_200ApplicationJSON_Account settings"
	AccountSettings200ApplicationJSONTypeAccountSettings200ApplicationJSONAccountSettingsAuthentication  AccountSettings200ApplicationJSONType = "accountSettings_200ApplicationJSON_AccountSettingsAuthentication"
	AccountSettings200ApplicationJSONTypeAccountSettings200ApplicationJSON3                              AccountSettings200ApplicationJSONType = "accountSettings_200ApplicationJSON_3"
	AccountSettings200ApplicationJSONTypeAccountSettings200ApplicationJSONMeetingWebinarSecuritySettings AccountSettings200ApplicationJSONType = "accountSettings_200ApplicationJSON_Meeting/Webinar Security Settings"
)

type AccountSettings200ApplicationJSON struct {
	AccountSettings200ApplicationJSONAccountSettings                *AccountSettings200ApplicationJSONAccountSettings
	AccountSettings200ApplicationJSONAccountSettingsAuthentication  *AccountSettings200ApplicationJSONAccountSettingsAuthentication
	AccountSettings200ApplicationJSON3                              *AccountSettings200ApplicationJSON3
	AccountSettings200ApplicationJSONMeetingWebinarSecuritySettings *AccountSettings200ApplicationJSONMeetingWebinarSecuritySettings

	Type AccountSettings200ApplicationJSONType
}

func CreateAccountSettings200ApplicationJSONAccountSettings200ApplicationJSONAccountSettings(accountSettings200ApplicationJSONAccountSettings AccountSettings200ApplicationJSONAccountSettings) AccountSettings200ApplicationJSON {
	typ := AccountSettings200ApplicationJSONTypeAccountSettings200ApplicationJSONAccountSettings

	return AccountSettings200ApplicationJSON{
		AccountSettings200ApplicationJSONAccountSettings: &accountSettings200ApplicationJSONAccountSettings,
		Type: typ,
	}
}

func CreateAccountSettings200ApplicationJSONAccountSettings200ApplicationJSONAccountSettingsAuthentication(accountSettings200ApplicationJSONAccountSettingsAuthentication AccountSettings200ApplicationJSONAccountSettingsAuthentication) AccountSettings200ApplicationJSON {
	typ := AccountSettings200ApplicationJSONTypeAccountSettings200ApplicationJSONAccountSettingsAuthentication

	return AccountSettings200ApplicationJSON{
		AccountSettings200ApplicationJSONAccountSettingsAuthentication: &accountSettings200ApplicationJSONAccountSettingsAuthentication,
		Type: typ,
	}
}

func CreateAccountSettings200ApplicationJSONAccountSettings200ApplicationJSON3(accountSettings200ApplicationJSON3 AccountSettings200ApplicationJSON3) AccountSettings200ApplicationJSON {
	typ := AccountSettings200ApplicationJSONTypeAccountSettings200ApplicationJSON3

	return AccountSettings200ApplicationJSON{
		AccountSettings200ApplicationJSON3: &accountSettings200ApplicationJSON3,
		Type:                               typ,
	}
}

func CreateAccountSettings200ApplicationJSONAccountSettings200ApplicationJSONMeetingWebinarSecuritySettings(accountSettings200ApplicationJSONMeetingWebinarSecuritySettings AccountSettings200ApplicationJSONMeetingWebinarSecuritySettings) AccountSettings200ApplicationJSON {
	typ := AccountSettings200ApplicationJSONTypeAccountSettings200ApplicationJSONMeetingWebinarSecuritySettings

	return AccountSettings200ApplicationJSON{
		AccountSettings200ApplicationJSONMeetingWebinarSecuritySettings: &accountSettings200ApplicationJSONMeetingWebinarSecuritySettings,
		Type: typ,
	}
}

func (u *AccountSettings200ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	accountSettings200ApplicationJSONAccountSettings := new(AccountSettings200ApplicationJSONAccountSettings)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&accountSettings200ApplicationJSONAccountSettings); err == nil {
		u.AccountSettings200ApplicationJSONAccountSettings = accountSettings200ApplicationJSONAccountSettings
		u.Type = AccountSettings200ApplicationJSONTypeAccountSettings200ApplicationJSONAccountSettings
		return nil
	}

	accountSettings200ApplicationJSONAccountSettingsAuthentication := new(AccountSettings200ApplicationJSONAccountSettingsAuthentication)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&accountSettings200ApplicationJSONAccountSettingsAuthentication); err == nil {
		u.AccountSettings200ApplicationJSONAccountSettingsAuthentication = accountSettings200ApplicationJSONAccountSettingsAuthentication
		u.Type = AccountSettings200ApplicationJSONTypeAccountSettings200ApplicationJSONAccountSettingsAuthentication
		return nil
	}

	accountSettings200ApplicationJSON3 := new(AccountSettings200ApplicationJSON3)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&accountSettings200ApplicationJSON3); err == nil {
		u.AccountSettings200ApplicationJSON3 = accountSettings200ApplicationJSON3
		u.Type = AccountSettings200ApplicationJSONTypeAccountSettings200ApplicationJSON3
		return nil
	}

	accountSettings200ApplicationJSONMeetingWebinarSecuritySettings := new(AccountSettings200ApplicationJSONMeetingWebinarSecuritySettings)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&accountSettings200ApplicationJSONMeetingWebinarSecuritySettings); err == nil {
		u.AccountSettings200ApplicationJSONMeetingWebinarSecuritySettings = accountSettings200ApplicationJSONMeetingWebinarSecuritySettings
		u.Type = AccountSettings200ApplicationJSONTypeAccountSettings200ApplicationJSONMeetingWebinarSecuritySettings
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u AccountSettings200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.AccountSettings200ApplicationJSONAccountSettings != nil {
		return json.Marshal(u.AccountSettings200ApplicationJSONAccountSettings)
	}

	if u.AccountSettings200ApplicationJSONAccountSettingsAuthentication != nil {
		return json.Marshal(u.AccountSettings200ApplicationJSONAccountSettingsAuthentication)
	}

	if u.AccountSettings200ApplicationJSON3 != nil {
		return json.Marshal(u.AccountSettings200ApplicationJSON3)
	}

	if u.AccountSettings200ApplicationJSONMeetingWebinarSecuritySettings != nil {
		return json.Marshal(u.AccountSettings200ApplicationJSONMeetingWebinarSecuritySettings)
	}

	return nil, nil
}

type AccountSettingsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200`<br> Account settings returned.
	// **Error Code:** `200`<br>
	// Only available for Paid account.
	AccountSettings200ApplicationJSONOneOf *AccountSettings200ApplicationJSON
}
