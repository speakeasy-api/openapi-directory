/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

export class DashboardMeetingsSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oAuth: string;
}

/**
 * Set the value of this field to "tracking_fields" if you would like to include tracking fields of each meeting in the response.
 */
export enum DashboardMeetingsIncludeFieldsEnum {
  TrackingFields = "tracking_fields",
}

/**
 * Specify a value to get the response for the corresponding meeting type. The value of this field can be one of the following:<br> <br>`past` - Meeting that already occurred in the specified date range.<br>`pastOne` - Past meetings that were attended by only one user. <br>`live` - Live meetings.<br><br>
 *
 * @remarks
 *
 * If you do not provide this field, the default value will be `live` and thus, the API will only query responses for live meetings.
 */
export enum DashboardMeetingsTypeEnum {
  Past = "past",
  PastOne = "pastOne",
  Live = "live",
}

export class DashboardMeetingsRequest extends SpeakeasyBase {
  /**
   * Start date in 'yyyy-mm-dd' format. The date range defined by the "from" and "to" parameters should only be one month as the report includes only one month worth of data at once.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=from;dateTimeFormat=YYYY-MM-DD",
  })
  from: Date;

  /**
   * Set the value of this field to "tracking_fields" if you would like to include tracking fields of each meeting in the response.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=include_fields",
  })
  includeFields?: DashboardMeetingsIncludeFieldsEnum;

  /**
   * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=next_page_token",
  })
  nextPageToken?: string;

  /**
   * The number of records returned within a single API call.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=page_size",
  })
  pageSize?: number;

  /**
   * End date.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=to;dateTimeFormat=YYYY-MM-DD",
  })
  to: Date;

  /**
   * Specify a value to get the response for the corresponding meeting type. The value of this field can be one of the following:<br> <br>`past` - Meeting that already occurred in the specified date range.<br>`pastOne` - Past meetings that were attended by only one user. <br>`live` - Live meetings.<br><br>
   *
   * @remarks
   *
   * If you do not provide this field, the default value will be `live` and thus, the API will only query responses for live meetings.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=type" })
  type?: DashboardMeetingsTypeEnum;
}

export class DashboardMeetings200ApplicationXMLMetricsCustomKeys extends SpeakeasyBase {
  /**
   * Custom key associated with the meeting.
   */
  @SpeakeasyMetadata()
  key?: string;

  /**
   * Value of the custom key associated with the meeting.
   */
  @SpeakeasyMetadata()
  value?: string;
}

export class DashboardMeetings200ApplicationXMLMetricsTrackingFields extends SpeakeasyBase {
  /**
   * Label of the tracking field.
   */
  @SpeakeasyMetadata()
  field?: string;

  /**
   * Value of the tracking field.
   */
  @SpeakeasyMetadata()
  value?: string;
}

/**
 * Meeting metric details.
 */
export class DashboardMeetings200ApplicationXMLMetrics extends SpeakeasyBase {
  /**
   * Custom keys and values assigned to the meeting.
   */
  @SpeakeasyMetadata({
    elemType: DashboardMeetings200ApplicationXMLMetricsCustomKeys,
  })
  customKeys?: DashboardMeetings200ApplicationXMLMetricsCustomKeys[];

  /**
   * Department of the host.
   */
  @SpeakeasyMetadata()
  dept?: string;

  /**
   * Meeting duration. Formatted as hh:mm:ss, for example: `16:08` for 16 minutes and 8 seconds.
   */
  @SpeakeasyMetadata()
  duration?: string;

  /**
   * Email address of the host.
   */
  @SpeakeasyMetadata()
  email?: string;

  /**
   * Meeting end time.
   */
  @SpeakeasyMetadata()
  endTime?: Date;

  /**
   * Indicates whether or not [third party audio](https://support.zoom.us/hc/en-us/articles/202470795-3rd-Party-Audio-Conference) was used in the meeting.
   */
  @SpeakeasyMetadata()
  has3rdPartyAudio?: boolean;

  /**
   * Indicates whether or not the PSTN was used in the meeting.
   */
  @SpeakeasyMetadata()
  hasPstn?: boolean;

  /**
   * Indicates whether or not the recording feature was used in the meeting.
   */
  @SpeakeasyMetadata()
  hasRecording?: boolean;

  /**
   * Indicates whether or not screenshare feature was used in the meeting.
   */
  @SpeakeasyMetadata()
  hasScreenShare?: boolean;

  /**
   * Indicates whether or not someone joined the meeting using SIP.
   */
  @SpeakeasyMetadata()
  hasSip?: boolean;

  /**
   * Indicates whether or not video was used in the meeting.
   */
  @SpeakeasyMetadata()
  hasVideo?: boolean;

  /**
   * Indicates whether or not VoIP was used in the meeting.
   */
  @SpeakeasyMetadata()
  hasVoip?: boolean;

  /**
   * Host display name.
   */
  @SpeakeasyMetadata()
  host?: string;

  /**
   * [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "**long**" format(represented as int64 data type in JSON), also known as the meeting number.
   */
  @SpeakeasyMetadata()
  id?: number;

  /**
   * The number of Zoom Room participants in the meeting.
   */
  @SpeakeasyMetadata()
  inRoomParticipants?: number;

  /**
   * Meeting participant count.
   */
  @SpeakeasyMetadata()
  participants?: number;

  /**
   * Meeting start time.
   */
  @SpeakeasyMetadata()
  startTime?: Date;

  /**
   * Meeting topic.
   */
  @SpeakeasyMetadata()
  topic?: string;

  /**
   * Tracking fields and values assigned to the meeting.
   */
  @SpeakeasyMetadata({
    elemType: DashboardMeetings200ApplicationXMLMetricsTrackingFields,
  })
  trackingFields?: DashboardMeetings200ApplicationXMLMetricsTrackingFields[];

  /**
   * License type of the user.
   */
  @SpeakeasyMetadata()
  userType?: string;

  /**
   * Meeting UUID. Please double encode your UUID when using it for API calls if the UUID begins with a '/'or contains '//' in it.
   */
  @SpeakeasyMetadata()
  uuid?: string;
}

/**
 * Pagination object.
 */
export class DashboardMeetings200ApplicationXML extends SpeakeasyBase {
  /**
   * Start date for this report in 'yyyy-mm-dd' format.
   */
  @SpeakeasyMetadata()
  from?: Date;

  /**
   * Array of meeting objects.
   */
  @SpeakeasyMetadata({ elemType: DashboardMeetings200ApplicationXMLMetrics })
  meetings?: DashboardMeetings200ApplicationXMLMetrics[];

  /**
   * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   */
  @SpeakeasyMetadata()
  nextPageToken?: string;

  /**
   * The number of pages returned for the request made.
   */
  @SpeakeasyMetadata()
  pageCount?: number;

  /**
   * The number of records returned within a single API call.
   */
  @SpeakeasyMetadata()
  pageSize?: number;

  /**
   * End date for this report in 'yyyy-mm-dd' format.
   */
  @SpeakeasyMetadata()
  to?: Date;

  /**
   * The number of all records available across pages.
   */
  @SpeakeasyMetadata()
  totalRecords?: number;
}

export class DashboardMeetings200ApplicationJSONMetricsCustomKeys extends SpeakeasyBase {
  /**
   * Custom key associated with the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "key" })
  key?: string;

  /**
   * Value of the custom key associated with the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}

export class DashboardMeetings200ApplicationJSONMetricsTrackingFields extends SpeakeasyBase {
  /**
   * Label of the tracking field.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "field" })
  field?: string;

  /**
   * Value of the tracking field.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}

/**
 * Meeting metric details.
 */
export class DashboardMeetings200ApplicationJSONMetrics extends SpeakeasyBase {
  /**
   * Custom keys and values assigned to the meeting.
   */
  @SpeakeasyMetadata({
    elemType: DashboardMeetings200ApplicationJSONMetricsCustomKeys,
  })
  @Expose({ name: "custom_keys" })
  @Type(() => DashboardMeetings200ApplicationJSONMetricsCustomKeys)
  customKeys?: DashboardMeetings200ApplicationJSONMetricsCustomKeys[];

  /**
   * Department of the host.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dept" })
  dept?: string;

  /**
   * Meeting duration. Formatted as hh:mm:ss, for example: `16:08` for 16 minutes and 8 seconds.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "duration" })
  duration?: string;

  /**
   * Email address of the host.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  /**
   * Meeting end time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "end_time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endTime?: Date;

  /**
   * Indicates whether or not [third party audio](https://support.zoom.us/hc/en-us/articles/202470795-3rd-Party-Audio-Conference) was used in the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_3rd_party_audio" })
  has3rdPartyAudio?: boolean;

  /**
   * Indicates whether or not the PSTN was used in the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_pstn" })
  hasPstn?: boolean;

  /**
   * Indicates whether or not the recording feature was used in the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_recording" })
  hasRecording?: boolean;

  /**
   * Indicates whether or not screenshare feature was used in the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_screen_share" })
  hasScreenShare?: boolean;

  /**
   * Indicates whether or not someone joined the meeting using SIP.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_sip" })
  hasSip?: boolean;

  /**
   * Indicates whether or not video was used in the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_video" })
  hasVideo?: boolean;

  /**
   * Indicates whether or not VoIP was used in the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_voip" })
  hasVoip?: boolean;

  /**
   * Host display name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "host" })
  host?: string;

  /**
   * [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "**long**" format(represented as int64 data type in JSON), also known as the meeting number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * The number of Zoom Room participants in the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "in_room_participants" })
  inRoomParticipants?: number;

  /**
   * Meeting participant count.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "participants" })
  participants?: number;

  /**
   * Meeting start time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "start_time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startTime?: Date;

  /**
   * Meeting topic.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "topic" })
  topic?: string;

  /**
   * Tracking fields and values assigned to the meeting.
   */
  @SpeakeasyMetadata({
    elemType: DashboardMeetings200ApplicationJSONMetricsTrackingFields,
  })
  @Expose({ name: "tracking_fields" })
  @Type(() => DashboardMeetings200ApplicationJSONMetricsTrackingFields)
  trackingFields?: DashboardMeetings200ApplicationJSONMetricsTrackingFields[];

  /**
   * License type of the user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user_type" })
  userType?: string;

  /**
   * Meeting UUID. Please double encode your UUID when using it for API calls if the UUID begins with a '/'or contains '//' in it.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uuid" })
  uuid?: string;
}

/**
 * Pagination object.
 */
export class DashboardMeetings200ApplicationJSON extends SpeakeasyBase {
  /**
   * Start date for this report in 'yyyy-mm-dd' format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "from" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  from?: Date;

  /**
   * Array of meeting objects.
   */
  @SpeakeasyMetadata({ elemType: DashboardMeetings200ApplicationJSONMetrics })
  @Expose({ name: "meetings" })
  @Type(() => DashboardMeetings200ApplicationJSONMetrics)
  meetings?: DashboardMeetings200ApplicationJSONMetrics[];

  /**
   * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "next_page_token" })
  nextPageToken?: string;

  /**
   * The number of pages returned for the request made.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "page_count" })
  pageCount?: number;

  /**
   * The number of records returned within a single API call.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "page_size" })
  pageSize?: number;

  /**
   * End date for this report in 'yyyy-mm-dd' format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "to" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  to?: Date;

  /**
   * The number of all records available across pages.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_records" })
  totalRecords?: number;
}

export class DashboardMeetingsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * **HTTP Status Code:** `200`<br>
   *
   * @remarks
   * Meetings returned.<br>
   * Only available for paid accounts that have dashboard feature enabled.
   */
  @SpeakeasyMetadata()
  dashboardMeetings200ApplicationJSONObject?: DashboardMeetings200ApplicationJSON;
}
