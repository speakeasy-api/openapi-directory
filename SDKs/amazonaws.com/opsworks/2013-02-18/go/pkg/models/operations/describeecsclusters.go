// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type DescribeEcsClustersQueryParams struct {
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=MaxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=NextToken"`
}

// DescribeEcsClustersXAmzTargetEnum
type DescribeEcsClustersXAmzTargetEnum string

const (
	DescribeEcsClustersXAmzTargetEnumOpsWorks20130218DescribeEcsClusters DescribeEcsClustersXAmzTargetEnum = "OpsWorks_20130218.DescribeEcsClusters"
)

func (e *DescribeEcsClustersXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "OpsWorks_20130218.DescribeEcsClusters":
		*e = DescribeEcsClustersXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeEcsClustersXAmzTargetEnum: %s", s)
	}
}

type DescribeEcsClustersHeaders struct {
	XAmzAlgorithm     *string                           `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                           `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                           `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                           `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                           `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                           `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                           `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        DescribeEcsClustersXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DescribeEcsClustersRequest struct {
	QueryParams DescribeEcsClustersQueryParams
	Headers     DescribeEcsClustersHeaders
	Request     shared.DescribeEcsClustersRequest `request:"mediaType=application/json"`
}

type DescribeEcsClustersResponse struct {
	ContentType string
	// Success
	DescribeEcsClustersResult *shared.DescribeEcsClustersResult
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ValidationException
	ValidationException interface{}
}
