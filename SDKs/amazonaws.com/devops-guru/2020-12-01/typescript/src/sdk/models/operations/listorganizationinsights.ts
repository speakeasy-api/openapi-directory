/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 *  A filter used by <code>ListInsights</code> to specify which insights to return.
 */
export class ListOrganizationInsightsRequestBodyStatusFilter extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Any" })
  @Type(() => shared.ListInsightsAnyStatusFilter)
  any?: shared.ListInsightsAnyStatusFilter;

  @SpeakeasyMetadata()
  @Expose({ name: "Closed" })
  @Type(() => shared.ListInsightsClosedStatusFilter)
  closed?: shared.ListInsightsClosedStatusFilter;

  @SpeakeasyMetadata()
  @Expose({ name: "Ongoing" })
  @Type(() => shared.ListInsightsOngoingStatusFilter)
  ongoing?: shared.ListInsightsOngoingStatusFilter;
}

export class ListOrganizationInsightsRequestBody extends SpeakeasyBase {
  /**
   * The ID of the Amazon Web Services account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AccountIds" })
  accountIds?: string[];

  /**
   * The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MaxResults" })
  maxResults?: number;

  /**
   * The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "NextToken" })
  nextToken?: string;

  /**
   * The ID of the organizational unit.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "OrganizationalUnitIds" })
  organizationalUnitIds?: string[];

  /**
   *  A filter used by <code>ListInsights</code> to specify which insights to return.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "StatusFilter" })
  @Type(() => ListOrganizationInsightsRequestBodyStatusFilter)
  statusFilter: ListOrganizationInsightsRequestBodyStatusFilter;
}

export class ListOrganizationInsightsRequest extends SpeakeasyBase {
  /**
   * Pagination limit
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=MaxResults",
  })
  maxResults?: string;

  /**
   * Pagination token
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=NextToken",
  })
  nextToken?: string;

  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: ListOrganizationInsightsRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class ListOrganizationInsightsResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  listOrganizationInsightsResponse?: shared.ListOrganizationInsightsResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
