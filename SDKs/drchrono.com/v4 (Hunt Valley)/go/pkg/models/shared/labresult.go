// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// LabResultAbnormalStatusEnum -
// Value | Notes
// ----- | -----
// `'L'` | `'low'`
// `'LL'` | `'alert low'`
// `'H'` | `'high'`
// `'HH'` | `'alert high'`
// `'<'` | `'panic low'`
// `'>'` | `'panic high'`
// `'A'` | `'abnormal'`
// `'AA'` | `'very abnormal'`
// `'S'` | `'susceptible'`
// `'R'` | `'resistant'`
// `'I'` | `'intermediate'`
// `'NEG'` | `'negative'`
// `'POS'` | `'positive'`
// `'N'` | `'normal'`
// `‚Äù` | `'no comment'`
type LabResultAbnormalStatusEnum string

const (
	LabResultAbnormalStatusEnumL           LabResultAbnormalStatusEnum = "L"
	LabResultAbnormalStatusEnumLl          LabResultAbnormalStatusEnum = "LL"
	LabResultAbnormalStatusEnumH           LabResultAbnormalStatusEnum = "H"
	LabResultAbnormalStatusEnumHh          LabResultAbnormalStatusEnum = "HH"
	LabResultAbnormalStatusEnumLessThan    LabResultAbnormalStatusEnum = "<"
	LabResultAbnormalStatusEnumGreaterThan LabResultAbnormalStatusEnum = ">"
	LabResultAbnormalStatusEnumA           LabResultAbnormalStatusEnum = "A"
	LabResultAbnormalStatusEnumAa          LabResultAbnormalStatusEnum = "AA"
	LabResultAbnormalStatusEnumS           LabResultAbnormalStatusEnum = "S"
	LabResultAbnormalStatusEnumR           LabResultAbnormalStatusEnum = "R"
	LabResultAbnormalStatusEnumI           LabResultAbnormalStatusEnum = "I"
	LabResultAbnormalStatusEnumNeg         LabResultAbnormalStatusEnum = "NEG"
	LabResultAbnormalStatusEnumPos         LabResultAbnormalStatusEnum = "POS"
	LabResultAbnormalStatusEnumN           LabResultAbnormalStatusEnum = "N"
	LabResultAbnormalStatusEnumUnknown     LabResultAbnormalStatusEnum = ""
)

func (e LabResultAbnormalStatusEnum) ToPointer() *LabResultAbnormalStatusEnum {
	return &e
}

func (e *LabResultAbnormalStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "L":
		fallthrough
	case "LL":
		fallthrough
	case "H":
		fallthrough
	case "HH":
		fallthrough
	case "<":
		fallthrough
	case ">":
		fallthrough
	case "A":
		fallthrough
	case "AA":
		fallthrough
	case "S":
		fallthrough
	case "R":
		fallthrough
	case "I":
		fallthrough
	case "NEG":
		fallthrough
	case "POS":
		fallthrough
	case "N":
		fallthrough
	case "":
		*e = LabResultAbnormalStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LabResultAbnormalStatusEnum: %v", v)
	}
}

// LabResultStatusEnum -
// Value | Notes
// ----- | -----
// `'P'` | `'preliminary'`
// `'I'` | `'pending'`
// `'C'` | `'correction'`
// `'F'` | `'final'`
// `'X'` | `'canceled'`
type LabResultStatusEnum string

const (
	LabResultStatusEnumP LabResultStatusEnum = "P"
	LabResultStatusEnumI LabResultStatusEnum = "I"
	LabResultStatusEnumC LabResultStatusEnum = "C"
	LabResultStatusEnumF LabResultStatusEnum = "F"
	LabResultStatusEnumX LabResultStatusEnum = "X"
)

func (e LabResultStatusEnum) ToPointer() *LabResultStatusEnum {
	return &e
}

func (e *LabResultStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "P":
		fallthrough
	case "I":
		fallthrough
	case "C":
		fallthrough
	case "F":
		fallthrough
	case "X":
		*e = LabResultStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LabResultStatusEnum: %v", v)
	}
}

// LabResult - Created
type LabResult struct {
	// Value | Notes
	// ----- | -----
	// `'L'` | `'low'`
	// `'LL'` | `'alert low'`
	// `'H'` | `'high'`
	// `'HH'` | `'alert high'`
	// `'<'` | `'panic low'`
	// `'>'` | `'panic high'`
	// `'A'` | `'abnormal'`
	// `'AA'` | `'very abnormal'`
	// `'S'` | `'susceptible'`
	// `'R'` | `'resistant'`
	// `'I'` | `'intermediate'`
	// `'NEG'` | `'negative'`
	// `'POS'` | `'positive'`
	// `'N'` | `'normal'`
	// `''` | `'no comment'`
	//
	AbnormalStatus *LabResultAbnormalStatusEnum `json:"abnormal_status,omitempty"`
	Comments       *string                      `json:"comments,omitempty"`
	// ID of `/lab_documents` object for the result
	Document int64 `json:"document"`
	// This is the code used for grouping result data.
	GroupCode *string `json:"group_code,omitempty"`
	ID        *int64  `json:"id,omitempty"`
	// If true, the result will be flagged for the doctor's attention
	IsAbnormal *string `json:"is_abnormal,omitempty"`
	// ID of `/lab_orders` object the result belongs to
	LabOrder *string `json:"lab_order,omitempty"`
	// ID of `/lab_tests` object for the result
	LabTest int64 `json:"lab_test"`
	// When ``value_is_numeric`` is True, this parameter must be a string of the form ``"<lower> <upper>", where both lower and upper are numerical``
	NormalRange     *string `json:"normal_range,omitempty"`
	ObservationCode *string `json:"observation_code,omitempty"`
	// For example, ``"Blood Urea Nitrogen (BUN)"``
	ObservationDescription *string `json:"observation_description,omitempty"`
	SpecimenReceived       *string `json:"specimen_received,omitempty"`
	// Value | Notes
	// ----- | -----
	// `'P'` | `'preliminary'`
	// `'I'` | `'pending'`
	// `'C'` | `'correction'`
	// `'F'` | `'final'`
	// `'X'` | `'canceled'`
	//
	Status        LabResultStatusEnum `json:"status"`
	TestPerformed string              `json:"test_performed"`
	// Unit used for the value
	Unit  *string `json:"unit,omitempty"`
	Value string  `json:"value"`
	// Default to `False`
	ValueIsNumeric *bool `json:"value_is_numeric,omitempty"`
}
