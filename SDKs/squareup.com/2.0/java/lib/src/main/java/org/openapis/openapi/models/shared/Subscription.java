/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Subscription - Represents a customer subscription to a subscription plan.
 * For an overview of the `Subscription` type, see
 * [Subscription object](https://developer.squareup.com/docs/subscriptions-api/overview#subscription-object-overview).
 */
public class Subscription {
    /**
     * The subscription cancellation date, in YYYY-MM-DD format (for
     * example, 2013-01-15). On this date, the subscription status changes
     * to `CANCELED` and the subscription billing stops.
     * If you don't set this field, the subscription plan dictates if and
     * when subscription ends.
     * 
     * You cannot update this field, you can only clear it.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canceled_date")
    public String canceledDate;

    public Subscription withCanceledDate(String canceledDate) {
        this.canceledDate = canceledDate;
        return this;
    }
    
    /**
     * The ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) [card](https://developer.squareup.com/reference/square_2021-08-18/objects/Card)
     * that is charged for the subscription.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("card_id")
    public String cardId;

    public Subscription withCardId(String cardId) {
        this.cardId = cardId;
        return this;
    }
    
    /**
     * The date up to which the customer is invoiced for the
     * subscription, in YYYY-MM-DD format (for example, 2013-01-15).
     * 
     * After the invoice is sent for a given billing period,
     * this date will be the last day of the billing period.
     * For example,
     * suppose for the month of May a customer gets an invoice
     * (or charged the card) on May 1. For the monthly billing scenario,
     * this date is then set to May 31.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("charged_through_date")
    public String chargedThroughDate;

    public Subscription withChargedThroughDate(String chargedThroughDate) {
        this.chargedThroughDate = chargedThroughDate;
        return this;
    }
    
    /**
     * The timestamp when the subscription was created, in RFC 3339 format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    public String createdAt;

    public Subscription withCreatedAt(String createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The ID of the associated [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) profile.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer_id")
    public String customerId;

    public Subscription withCustomerId(String customerId) {
        this.customerId = customerId;
        return this;
    }
    
    /**
     * The Square-assigned ID of the subscription.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public Subscription withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The IDs of the [invoices](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice) created for the
     * subscription, listed in order when the invoices were created
     * (oldest invoices appear first).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoice_ids")
    public String[] invoiceIds;

    public Subscription withInvoiceIds(String[] invoiceIds) {
        this.invoiceIds = invoiceIds;
        return this;
    }
    
    /**
     * The ID of the location associated with the subscription.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location_id")
    public String locationId;

    public Subscription withLocationId(String locationId) {
        this.locationId = locationId;
        return this;
    }
    
    /**
     * The ID of the associated [subscription plan](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogSubscriptionPlan).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("plan_id")
    public String planId;

    public Subscription withPlanId(String planId) {
        this.planId = planId;
        return this;
    }
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("price_override_money")
    public Money priceOverrideMoney;

    public Subscription withPriceOverrideMoney(Money priceOverrideMoney) {
        this.priceOverrideMoney = priceOverrideMoney;
        return this;
    }
    
    /**
     * The start date of the subscription, in YYYY-MM-DD format (for example,
     * 2013-01-15).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    public String startDate;

    public Subscription withStartDate(String startDate) {
        this.startDate = startDate;
        return this;
    }
    
    /**
     * The current status of the subscription.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public String status;

    public Subscription withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     * The tax amount applied when billing the subscription. The
     * percentage is expressed in decimal form, using a `'.'` as the decimal
     * separator and without a `'%'` sign. For example, a value of `7.5`
     * corresponds to 7.5%.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_percentage")
    public String taxPercentage;

    public Subscription withTaxPercentage(String taxPercentage) {
        this.taxPercentage = taxPercentage;
        return this;
    }
    
    /**
     * Timezone that will be used in date calculations for the subscription.
     * Defaults to the timezone of the location based on `location_id`.
     * Format: the IANA Timezone Database identifier for the location timezone (for example, `America/Los_Angeles`).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timezone")
    public String timezone;

    public Subscription withTimezone(String timezone) {
        this.timezone = timezone;
        return this;
    }
    
    /**
     * The version of the object. When updating an object, the version
     * supplied must match the version in the database, otherwise the write will
     * be rejected as conflicting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    public Long version;

    public Subscription withVersion(Long version) {
        this.version = version;
        return this;
    }
    
    public Subscription(){}
}
