"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class ExportConfigurationsCreateSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    
class ExportConfigurationsCreateRequestBodyExportEntitiesEnum(str, Enum):
    CRASHES = 'crashes'
    ERRORS = 'errors'
    ATTACHMENTS = 'attachments'
    NO_LOGS = 'no_logs'

class ExportConfigurationsCreateRequestBodyTypeEnum(str, Enum):
    r"""Type of export configuration"""
    BLOB_STORAGE_CONNECTION_STRING = 'blob_storage_connection_string'
    APPLICATION_INSIGHTS_INSTRUMENTATION_KEY = 'application_insights_instrumentation_key'
    BLOB_STORAGE_LINKED_SUBSCRIPTION = 'blob_storage_linked_subscription'
    APPLICATION_INSIGHTS_LINKED_SUBSCRIPTION = 'application_insights_linked_subscription'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ExportConfigurationsCreateRequestBody:
    r"""Export configuration"""
    
    type: ExportConfigurationsCreateRequestBodyTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of export configuration"""  
    backfill: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('backfill'), 'exclude': lambda f: f is None }})
    r"""Field to determine if backfilling should occur. The default value is true. If set to false export starts from date and time of config creation."""  
    export_entities: Optional[list[ExportConfigurationsCreateRequestBodyExportEntitiesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('export_entities'), 'exclude': lambda f: f is None }})  
    resource_group: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource_group'), 'exclude': lambda f: f is None }})
    r"""The resource group name on azure"""  
    resource_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource_name'), 'exclude': lambda f: f is None }})
    r"""The resource name on azure"""  
    

@dataclasses.dataclass
class ExportConfigurationsCreateRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    request_body: ExportConfigurationsCreateRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""Export configurations."""  
    
class ExportConfigurationsCreateDefaultApplicationJSONErrorCodeEnum(str, Enum):
    BAD_REQUEST = 'BadRequest'
    CONFLICT = 'Conflict'
    NOT_ACCEPTABLE = 'NotAcceptable'
    NOT_FOUND = 'NotFound'
    INTERNAL_SERVER_ERROR = 'InternalServerError'
    UNAUTHORIZED = 'Unauthorized'
    TOO_MANY_REQUESTS = 'TooManyRequests'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ExportConfigurationsCreateDefaultApplicationJSONError:
    
    code: ExportConfigurationsCreateDefaultApplicationJSONErrorCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ExportConfigurationsCreateDefaultApplicationJSON:
    r"""Error code with reason"""
    
    error: ExportConfigurationsCreateDefaultApplicationJSONError = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error') }})  
    
class ExportConfigurationsCreate202ApplicationJSONExportConfigurationExportEntitiesEnum(str, Enum):
    CRASHES = 'crashes'
    ERRORS = 'errors'
    ATTACHMENTS = 'attachments'
    NO_LOGS = 'no_logs'

class ExportConfigurationsCreate202ApplicationJSONExportConfigurationTypeEnum(str, Enum):
    r"""Type of export configuration"""
    BLOB_STORAGE_CONNECTION_STRING = 'blob_storage_connection_string'
    APPLICATION_INSIGHTS_INSTRUMENTATION_KEY = 'application_insights_instrumentation_key'
    BLOB_STORAGE_LINKED_SUBSCRIPTION = 'blob_storage_linked_subscription'
    APPLICATION_INSIGHTS_LINKED_SUBSCRIPTION = 'application_insights_linked_subscription'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ExportConfigurationsCreate202ApplicationJSONExportConfiguration:
    r"""Export configuration"""
    
    type: ExportConfigurationsCreate202ApplicationJSONExportConfigurationTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of export configuration"""  
    backfill: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('backfill'), 'exclude': lambda f: f is None }})
    r"""Field to determine if backfilling should occur. The default value is true. If set to false export starts from date and time of config creation."""  
    export_entities: Optional[list[ExportConfigurationsCreate202ApplicationJSONExportConfigurationExportEntitiesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('export_entities'), 'exclude': lambda f: f is None }})  
    resource_group: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource_group'), 'exclude': lambda f: f is None }})
    r"""The resource group name on azure"""  
    resource_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource_name'), 'exclude': lambda f: f is None }})
    r"""The resource name on azure"""  
    
class ExportConfigurationsCreate202ApplicationJSONExportEntitiesEnum(str, Enum):
    CRASHES = 'crashes'
    ERRORS = 'errors'
    ATTACHMENTS = 'attachments'
    NO_LOGS = 'no_logs'

class ExportConfigurationsCreate202ApplicationJSONExportTypeEnum(str, Enum):
    r"""Target resource type of export configuration"""
    BLOB_STORAGE = 'BlobStorage'
    APP_INSIGHTS = 'AppInsights'

class ExportConfigurationsCreate202ApplicationJSONStateEnum(str, Enum):
    r"""State of the export job"""
    ENABLED = 'Enabled'
    DISABLED = 'Disabled'
    PENDING = 'Pending'
    DELETED = 'Deleted'
    INVALID = 'Invalid'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ExportConfigurationsCreate202ApplicationJSON:
    r"""Export configuration result"""
    
    creation_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creation_time') }})
    r"""Creation time in ISO 8601 format"""  
    export_type: ExportConfigurationsCreate202ApplicationJSONExportTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('export_type') }})
    r"""Target resource type of export configuration"""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Export configuration id"""  
    state: ExportConfigurationsCreate202ApplicationJSONStateEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})
    r"""State of the export job"""  
    export_configuration: Optional[ExportConfigurationsCreate202ApplicationJSONExportConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('export_configuration'), 'exclude': lambda f: f is None }})
    r"""Export configuration"""  
    export_entities: Optional[list[ExportConfigurationsCreate202ApplicationJSONExportEntitiesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('export_entities'), 'exclude': lambda f: f is None }})  
    last_run_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_run_time'), 'exclude': lambda f: f is None }})
    r"""Latest time in ISO 8601 format when export completed successfully"""  
    resource_group: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource_group'), 'exclude': lambda f: f is None }})
    r"""resource group for the storage account/App Insights resource"""  
    resource_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource_name'), 'exclude': lambda f: f is None }})
    r"""Storage accout or Appinsights resource name"""  
    state_info: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state_info'), 'exclude': lambda f: f is None }})
    r"""Additional information about export configuration state"""  
    

@dataclasses.dataclass
class ExportConfigurationsCreateResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    export_configurations_create_202_application_json_object: Optional[ExportConfigurationsCreate202ApplicationJSON] = dataclasses.field(default=None)
    r"""Create export configuration request successfully received."""  
    export_configurations_create_default_application_json_object: Optional[ExportConfigurationsCreateDefaultApplicationJSON] = dataclasses.field(default=None)
    r"""Error code with reason"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    