"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SubmitJobMediaURLOptionsCustomVocabularies:
    r"""Contains a collection of phrases. Custom vocabulary informs and biases the speech recognition to find those phrases (at the cost of slightly slower transcription)."""
    
    phrases: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phrases') }})
    r"""Array of phrases not found in normal dictionary. Add technical jargon, proper nouns and uncommon phrases as strings in this array to add them to the lexicon for this job.
    
    A phrase must contain at least 1 alpha character but may contain any non-numeric character from the Basic Latin set. A phrase can contain up to 12 words. Each word can contain up to 34 characters.
    
    **Note**: Only 6000 phrases can be used per transcription job. For more details, check [Custom Vocabularies](https://www.rev.ai/docs/overview#section/Features/Custom-Vocabularies).
    """  
    
class SubmitJobMediaURLOptionsLanguageEnum(str, Enum):
    EN = 'en'
    AR = 'ar'
    BG = 'bg'
    CA = 'ca'
    CMN = 'cmn'
    CS = 'cs'
    DA = 'da'
    DE = 'de'
    EL = 'el'
    ES = 'es'
    FI = 'fi'
    FR = 'fr'
    HI = 'hi'
    HR = 'hr'
    HU = 'hu'
    IT = 'it'
    JA = 'ja'
    KO = 'ko'
    LT = 'lt'
    LV = 'lv'
    MS = 'ms'
    NL = 'nl'
    NO = 'no'
    PL = 'pl'
    PT = 'pt'
    RO = 'ro'
    RU = 'ru'
    SK = 'sk'
    SL = 'sl'
    SV = 'sv'
    TR = 'tr'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SubmitJobMediaURLOptions:
    r"""Rev.ai Job Options Object Model"""
    
    media_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('media_url') }})  
    callback_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('callback_url'), 'exclude': lambda f: f is None }})  
    custom_vocabularies: Optional[list[SubmitJobMediaURLOptionsCustomVocabularies]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_vocabularies'), 'exclude': lambda f: f is None }})  
    custom_vocabulary_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_vocabulary_id'), 'exclude': lambda f: f is None }})  
    delete_after_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delete_after_seconds'), 'exclude': lambda f: f is None }})  
    filter_profanity: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filter_profanity'), 'exclude': lambda f: f is None }})  
    language: Optional[SubmitJobMediaURLOptionsLanguageEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('language'), 'exclude': lambda f: f is None }})  
    metadata: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata'), 'exclude': lambda f: f is None }})  
    remove_disfluencies: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remove_disfluencies'), 'exclude': lambda f: f is None }})  
    skip_diarization: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skip_diarization'), 'exclude': lambda f: f is None }})  
    skip_punctuation: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skip_punctuation'), 'exclude': lambda f: f is None }})  
    speaker_channels_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('speaker_channels_count'), 'exclude': lambda f: f is None }})  
    