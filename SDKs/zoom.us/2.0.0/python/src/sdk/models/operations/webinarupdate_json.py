"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class WebinarUpdateJSONSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class WebinarUpdateApplicationJSONRecurrenceMonthlyWeekEnum(str, Enum):
    r"""Use this field **only if you're scheduling a recurring meeting of type** `3` to state the week of the month when the meeting should recur. If you use this field, **you must also use the `monthly_week_day` field to state the day of the week when the meeting should recur.** <br>`-1` - Last week of the month.<br>`1` - First week of the month.<br>`2` - Second week of the month.<br>`3` - Third week of the month.<br>`4` - Fourth week of the month."""
    MINUS_1 = '-1'
    ONE = '1'
    TWO = '2'
    THREE = '3'
    FOUR = '4'

class WebinarUpdateApplicationJSONRecurrenceMonthlyWeekDayEnum(str, Enum):
    r"""Use this field **only if you're scheduling a recurring meeting of type** `3` to state a specific day in a week when the monthly meeting should recur. To use this field, you must also use the `monthly_week` field.
    
    <br>`1` - Sunday.<br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` - Thursday.<br>`6` - Friday.<br>`7` - Saturday.
    """
    ONE = '1'
    TWO = '2'
    THREE = '3'
    FOUR = '4'
    FIVE = '5'
    SIX = '6'
    SEVEN = '7'

class WebinarUpdateApplicationJSONRecurrenceTypeEnum(str, Enum):
    r"""Recurrence meeting types:<br>`1` - Daily.<br>`2` - Weekly.<br>`3` - Monthly."""
    ONE = '1'
    TWO = '2'
    THREE = '3'

class WebinarUpdateApplicationJSONRecurrenceWeeklyDaysEnum(str, Enum):
    r"""This field is required **if you're scheduling a recurring meeting of type** `2` to state which day(s) of the week the meeting should repeat. <br> <br> The value for this field could be a number between `1` to `7` in string format. For instance, if the meeting should recur on Sunday, provide `\\"1\\"` as the value of this field.<br><br> **Note:** If you would like the meeting to occur on multiple days of a week, you should provide comma separated values for this field. For instance, if the meeting should recur on Sundays and Tuesdays provide `\\"1,3\\"` as the value of this field.
    
     <br>`1`  - Sunday. <br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` -  Thursday.<br>`6` - Friday.<br>`7` - Saturday.
    """
    ONE = '1'
    TWO = '2'
    THREE = '3'
    FOUR = '4'
    FIVE = '5'
    SIX = '6'
    SEVEN = '7'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WebinarUpdateApplicationJSONRecurrence:
    r"""Recurrence object. Use this object only for a meeting with type `8` i.e., a recurring meeting with fixed time."""
    
    type: WebinarUpdateApplicationJSONRecurrenceTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Recurrence meeting types:<br>`1` - Daily.<br>`2` - Weekly.<br>`3` - Monthly."""  
    end_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_date_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Select the final date on which the meeting will recur before it is canceled. Should be in UTC time, such as 2017-11-25T12:00:00Z. (Cannot be used with \\"end_times\\".)"""  
    end_times: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_times'), 'exclude': lambda f: f is None }})
    r"""Select how many times the meeting should recur before it is canceled. (Cannot be used with \\"end_date_time\\".)"""  
    monthly_day: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('monthly_day'), 'exclude': lambda f: f is None }})
    r"""Use this field **only if you're scheduling a recurring meeting of type** `3` to state which day in a month, the meeting should recur. The value range is from 1 to 31.
    
    For instance, if you would like the meeting to recur on 23rd of each month, provide `23` as the value of this field and `1` as the value of the `repeat_interval` field. Instead, if you would like the meeting to recur every three months, on 23rd of the month, change the value of the `repeat_interval` field to `3`.
    """  
    monthly_week: Optional[WebinarUpdateApplicationJSONRecurrenceMonthlyWeekEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('monthly_week'), 'exclude': lambda f: f is None }})
    r"""Use this field **only if you're scheduling a recurring meeting of type** `3` to state the week of the month when the meeting should recur. If you use this field, **you must also use the `monthly_week_day` field to state the day of the week when the meeting should recur.** <br>`-1` - Last week of the month.<br>`1` - First week of the month.<br>`2` - Second week of the month.<br>`3` - Third week of the month.<br>`4` - Fourth week of the month."""  
    monthly_week_day: Optional[WebinarUpdateApplicationJSONRecurrenceMonthlyWeekDayEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('monthly_week_day'), 'exclude': lambda f: f is None }})
    r"""Use this field **only if you're scheduling a recurring meeting of type** `3` to state a specific day in a week when the monthly meeting should recur. To use this field, you must also use the `monthly_week` field.
    
    <br>`1` - Sunday.<br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` - Thursday.<br>`6` - Friday.<br>`7` - Saturday.
    """  
    repeat_interval: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repeat_interval'), 'exclude': lambda f: f is None }})
    r"""Define the interval at which the meeting should recur. For instance, if you would like to schedule a meeting that recurs every two months, you must set the value of this field as `2` and the value of the `type` parameter as `3`.
    
    For a daily meeting, the maximum interval you can set is `90` days. For a weekly meeting the maximum interval that you can set is  of `12` weeks. For a monthly meeting, there is a maximum of `3` months.
    """  
    weekly_days: Optional[WebinarUpdateApplicationJSONRecurrenceWeeklyDaysEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('weekly_days'), 'exclude': lambda f: f is None }})
    r"""This field is required **if you're scheduling a recurring meeting of type** `2` to state which day(s) of the week the meeting should repeat. <br> <br> The value for this field could be a number between `1` to `7` in string format. For instance, if the meeting should recur on Sunday, provide `\\"1\\"` as the value of this field.<br><br> **Note:** If you would like the meeting to occur on multiple days of a week, you should provide comma separated values for this field. For instance, if the meeting should recur on Sundays and Tuesdays provide `\\"1,3\\"` as the value of this field.
    
     <br>`1`  - Sunday. <br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` -  Thursday.<br>`6` - Friday.<br>`7` - Saturday.
    """  
    
class WebinarUpdateApplicationJSONSettingsApprovalTypeEnum(str, Enum):
    r"""`0` - Automatically approve.<br>`1` - Manually approve.<br>`2` - No registration required."""
    ZERO = '0'
    ONE = '1'
    TWO = '2'

class WebinarUpdateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum(str, Enum):
    r"""`0` - No plan.<br>`1` - Send 1 hour before webinar.<br>`2` - Send 1 day before webinar.<br>`3` - Send 1 hour and 1 day before webinar.<br>`4` - Send 1 week before webinar.<br>`5` - Send 1 hour and 1 week before webinar.<br>`6` - Send 1 day and 1 week before webinar.<br>`7` - Send 1 hour, 1 day and 1 week before webinar."""
    ZERO = '0'
    ONE = '1'
    TWO = '2'
    THREE = '3'
    FOUR = '4'
    FIVE = '5'
    SIX = '6'
    SEVEN = '7'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WebinarUpdateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotification:
    r"""Send reminder email to attendees and panelists."""
    
    enable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enable'), 'exclude': lambda f: f is None }})
    r"""* `true`: Send reminder email to attendees and panelists.
    
    * `false`: Do not send reminder email to attendees and panelists.
    """  
    type: Optional[WebinarUpdateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""`0` - No plan.<br>`1` - Send 1 hour before webinar.<br>`2` - Send 1 day before webinar.<br>`3` - Send 1 hour and 1 day before webinar.<br>`4` - Send 1 week before webinar.<br>`5` - Send 1 hour and 1 week before webinar.<br>`6` - Send 1 day and 1 week before webinar.<br>`7` - Send 1 hour, 1 day and 1 week before webinar."""  
    
class WebinarUpdateApplicationJSONSettingsAudioEnum(str, Enum):
    r"""Determine how participants can join the audio portion of the webinar."""
    BOTH = 'both'
    TELEPHONY = 'telephony'
    VOIP = 'voip'

class WebinarUpdateApplicationJSONSettingsAutoRecordingEnum(str, Enum):
    r"""Automatic recording:<br>`local` - Record on local.<br>`cloud` -  Record on cloud.<br>`none` - Disabled."""
    LOCAL = 'local'
    CLOUD = 'cloud'
    NONE = 'none'

class WebinarUpdateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum(str, Enum):
    r"""`0` - No plan.<br>`1` - Send 1 days after the scheduled end date.<br>`2` - Send 2 days after the scheduled end date.<br>`3` - Send 3 days after the scheduled end date.<br>`4` - Send 4 days after the scheduled end date.<br>`5` - Send 5 days after the scheduled end date.<br>`6` - Send 6 days after the scheduled end date.<br>`7` - Send 7 days after the scheduled end date."""
    ZERO = '0'
    ONE = '1'
    TWO = '2'
    THREE = '3'
    FOUR = '4'
    FIVE = '5'
    SIX = '6'
    SEVEN = '7'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WebinarUpdateApplicationJSONSettingsFollowUpAbsenteesEmailNotification:
    r"""Send follow-up email to absentees."""
    
    enable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enable'), 'exclude': lambda f: f is None }})
    r"""* `true`: Send follow-up email to absentees.
    
    * `false`: Do not send follow-up email to absentees.
    """  
    type: Optional[WebinarUpdateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""`0` - No plan.<br>`1` - Send 1 days after the scheduled end date.<br>`2` - Send 2 days after the scheduled end date.<br>`3` - Send 3 days after the scheduled end date.<br>`4` - Send 4 days after the scheduled end date.<br>`5` - Send 5 days after the scheduled end date.<br>`6` - Send 6 days after the scheduled end date.<br>`7` - Send 7 days after the scheduled end date."""  
    
class WebinarUpdateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum(str, Enum):
    r"""`0` - No plan.<br>`1` - Send 1 day after the scheduled end date.<br>`2` - Send 2 days after the scheduled end date.<br>`3` - Send 3 days after the scheduled end date.<br>`4` - Send 4 days after the scheduled end date.<br>`5` - Send 5 days after the scheduled end date.<br>`6` - Send 6 days after the scheduled end date.<br>`7` - Send 7 days after the scheduled end date."""
    ZERO = '0'
    ONE = '1'
    TWO = '2'
    THREE = '3'
    FOUR = '4'
    FIVE = '5'
    SIX = '6'
    SEVEN = '7'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WebinarUpdateApplicationJSONSettingsFollowUpAttendeesEmailNotification:
    r"""Send follow-up email to attendees."""
    
    enable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enable'), 'exclude': lambda f: f is None }})
    r"""* `true`: Send follow-up email to attendees.
    
    * `false`: Do not send follow-up email to attendees.
    """  
    type: Optional[WebinarUpdateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""`0` - No plan.<br>`1` - Send 1 day after the scheduled end date.<br>`2` - Send 2 days after the scheduled end date.<br>`3` - Send 3 days after the scheduled end date.<br>`4` - Send 4 days after the scheduled end date.<br>`5` - Send 5 days after the scheduled end date.<br>`6` - Send 6 days after the scheduled end date.<br>`7` - Send 7 days after the scheduled end date."""  
    
class WebinarUpdateApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnum(str, Enum):
    r"""Indicate whether you want attendees to be able to view answered questions only or view all questions.
    
    * `only`: Attendees are able to view answered questions only.
    
    *  `all`: Attendees are able to view all questions submitted in the Q&A.
    """
    ONLY = 'only'
    ALL = 'all'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WebinarUpdateApplicationJSONSettingsQuestionAndAnswer:
    r"""[Q&A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar."""
    
    allow_anonymous_questions: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_anonymous_questions'), 'exclude': lambda f: f is None }})
    r"""* `true`: Allow participants to send questions without providing their name to the host, co-host, and panelists..
    
    * `false`: Do not allow anonymous questions.
    """  
    answer_questions: Optional[WebinarUpdateApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('answer_questions'), 'exclude': lambda f: f is None }})
    r"""Indicate whether you want attendees to be able to view answered questions only or view all questions.
    
    * `only`: Attendees are able to view answered questions only.
    
    *  `all`: Attendees are able to view all questions submitted in the Q&A.
    """  
    attendees_can_comment: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attendees_can_comment'), 'exclude': lambda f: f is None }})
    r"""* `true`: Attendees can answer questions or leave a comment in the question thread.
    
    * `false`: Attendees can not answer questions or leave a comment in the question thread
    """  
    attendees_can_upvote: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attendees_can_upvote'), 'exclude': lambda f: f is None }})
    r"""* `true`: Attendees can click the thumbs up button to bring popular questions to the top of the Q&A window.
    
    * `false`: Attendees can not click the thumbs up butoon on questions.
    """  
    enable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enable'), 'exclude': lambda f: f is None }})
    r"""* `true`: Enable [Q&A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar.
    
    * `false`: Disable Q&A for webinar.
    """  
    
class WebinarUpdateApplicationJSONSettingsRegistrationTypeEnum(str, Enum):
    r"""Registration types. Only used for recurring webinars with a fixed time.<br>`1` - Attendees register once and can attend any of the webinar sessions.<br>`2` - Attendees need to register for each session in order to attend.<br>`3` - Attendees register once and can choose one or more sessions to attend."""
    ONE = '1'
    TWO = '2'
    THREE = '3'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WebinarUpdateApplicationJSONSettings:
    r"""Webinar settings."""
    
    allow_multiple_devices: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_multiple_devices'), 'exclude': lambda f: f is None }})
    r"""Allow attendees to join from multiple devices."""  
    alternative_hosts: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alternative_hosts'), 'exclude': lambda f: f is None }})
    r"""Alternative host emails or IDs. Multiple values separated by comma."""  
    approval_type: Optional[WebinarUpdateApplicationJSONSettingsApprovalTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('approval_type'), 'exclude': lambda f: f is None }})
    r"""`0` - Automatically approve.<br>`1` - Manually approve.<br>`2` - No registration required."""  
    attendees_and_panelists_reminder_email_notification: Optional[WebinarUpdateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attendees_and_panelists_reminder_email_notification'), 'exclude': lambda f: f is None }})
    r"""Send reminder email to attendees and panelists."""  
    audio: Optional[WebinarUpdateApplicationJSONSettingsAudioEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audio'), 'exclude': lambda f: f is None }})
    r"""Determine how participants can join the audio portion of the webinar."""  
    authentication_domains: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authentication_domains'), 'exclude': lambda f: f is None }})
    r"""If user has configured [\\"Sign Into Zoom with Specified Domains\\"](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f) option, this will list the domains that are authenticated."""  
    authentication_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authentication_name'), 'exclude': lambda f: f is None }})
    r"""Authentication name set in the [authentication profile](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f)."""  
    authentication_option: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authentication_option'), 'exclude': lambda f: f is None }})
    r"""Webinar authentication option id."""  
    auto_recording: Optional[WebinarUpdateApplicationJSONSettingsAutoRecordingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_recording'), 'exclude': lambda f: f is None }})
    r"""Automatic recording:<br>`local` - Record on local.<br>`cloud` -  Record on cloud.<br>`none` - Disabled."""  
    close_registration: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('close_registration'), 'exclude': lambda f: f is None }})
    r"""Close registration after event date."""  
    contact_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contact_email'), 'exclude': lambda f: f is None }})
    r"""Contact email for registration"""  
    contact_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contact_name'), 'exclude': lambda f: f is None }})
    r"""Contact name for registration"""  
    email_language: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email_language'), 'exclude': lambda f: f is None }})
    r"""Set the email language to one of the following:
    `en-US`,`de-DE`,`es-ES`,`fr-FR`,`jp-JP`,`pt-PT`,`ru-RU`,`zh-CN`, `zh-TW`, `ko-KO`, `it-IT`, `vi-VN`.
    """  
    enforce_login: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enforce_login'), 'exclude': lambda f: f is None }})
    r"""Only signed in users can join this meeting.
    
    **This field is deprecated and will not be supported in the future.**  <br><br>As an alternative, use the \"meeting_authentication\", \"authentication_option\" and \"authentication_domains\" fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the Webinar.
    """  
    enforce_login_domains: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enforce_login_domains'), 'exclude': lambda f: f is None }})
    r"""Only signed in users with specified domains can join meetings.
    
    **This field is deprecated and will not be supported in the future.**  <br><br>As an alternative, use the \"meeting_authentication\", \"authentication_option\" and \"authentication_domains\" fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the Webinar.
    """  
    follow_up_absentees_email_notification: Optional[WebinarUpdateApplicationJSONSettingsFollowUpAbsenteesEmailNotification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('follow_up_absentees_email_notification'), 'exclude': lambda f: f is None }})
    r"""Send follow-up email to absentees."""  
    follow_up_attendees_email_notification: Optional[WebinarUpdateApplicationJSONSettingsFollowUpAttendeesEmailNotification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('follow_up_attendees_email_notification'), 'exclude': lambda f: f is None }})
    r"""Send follow-up email to attendees."""  
    global_dial_in_countries: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('global_dial_in_countries'), 'exclude': lambda f: f is None }})
    r"""List of global dial-in countries"""  
    hd_video: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hd_video'), 'exclude': lambda f: f is None }})
    r"""Default to HD video."""  
    host_video: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('host_video'), 'exclude': lambda f: f is None }})
    r"""Start video when host joins webinar."""  
    meeting_authentication: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meeting_authentication'), 'exclude': lambda f: f is None }})
    r"""`true`- Only authenticated users can join Webinar."""  
    notify_registrants: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notify_registrants'), 'exclude': lambda f: f is None }})
    r"""Send notification email to registrants when the host updates a webinar."""  
    on_demand: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('on_demand'), 'exclude': lambda f: f is None }})
    r"""Make the webinar on-demand"""  
    panelists_invitation_email_notification: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('panelists_invitation_email_notification'), 'exclude': lambda f: f is None }})
    r"""* `true`: Send invitation email to panelists.
    
    * `false`: Do not send invitation email to panelists.
    """  
    panelists_video: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('panelists_video'), 'exclude': lambda f: f is None }})
    r"""Start video when panelists join webinar."""  
    post_webinar_survey: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('post_webinar_survey'), 'exclude': lambda f: f is None }})
    r"""Zoom will open a survey page in attendees' browsers after leaving the webinar"""  
    practice_session: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('practice_session'), 'exclude': lambda f: f is None }})
    r"""Enable practice session."""  
    question_and_answer: Optional[WebinarUpdateApplicationJSONSettingsQuestionAndAnswer] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('question_and_answer'), 'exclude': lambda f: f is None }})
    r"""[Q&A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar."""  
    registrants_confirmation_email: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registrants_confirmation_email'), 'exclude': lambda f: f is None }})
    r"""Send confirmation email to registrants."""  
    registrants_email_notification: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registrants_email_notification'), 'exclude': lambda f: f is None }})
    r"""Send email notifications to registrants about approval, cancellation, denial of the registration. The value of this field must be set to true in order to use the `registrants_confirmation_email` field."""  
    registrants_restrict_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registrants_restrict_number'), 'exclude': lambda f: f is None }})
    r"""Restrict number of registrants for a webinar. By default, it is set to `0`. A `0` value means that the restriction option is disabled. Provide a number higher than 0 to restrict the webinar registrants by the that number."""  
    registration_type: Optional[WebinarUpdateApplicationJSONSettingsRegistrationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registration_type'), 'exclude': lambda f: f is None }})
    r"""Registration types. Only used for recurring webinars with a fixed time.<br>`1` - Attendees register once and can attend any of the webinar sessions.<br>`2` - Attendees need to register for each session in order to attend.<br>`3` - Attendees register once and can choose one or more sessions to attend."""  
    show_share_button: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('show_share_button'), 'exclude': lambda f: f is None }})
    r"""Show social share buttons on the registration page."""  
    survey_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('survey_url'), 'exclude': lambda f: f is None }})
    r"""Survey url for post webinar survey"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WebinarUpdateApplicationJSONTrackingFields:
    
    field: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('field'), 'exclude': lambda f: f is None }})
    r"""Tracking fields type"""  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Tracking fields value"""  
    
class WebinarUpdateApplicationJSONTypeEnum(str, Enum):
    r"""Webinar Types:<br>`5` - webinar.<br>`6` - Recurring webinar with no fixed time.<br>`9` - Recurring webinar with a fixed time."""
    FIVE = '5'
    SIX = '6'
    NINE = '9'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WebinarUpdateApplicationJSON:
    r"""Base webinar object for sessions."""
    
    agenda: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('agenda'), 'exclude': lambda f: f is None }})
    r"""Webinar description."""  
    duration: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration'), 'exclude': lambda f: f is None }})
    r"""Webinar duration (minutes). Used for scheduled webinar only."""  
    password: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password'), 'exclude': lambda f: f is None }})
    r"""[Webinar passcode](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords). By default, passcode may only contain the following characters: [a-z A-Z 0-9 @ - _ * !] and can have a maximum of 10 characters.
    
    **Note:** If the account owner or the admin has configured [minimum passcode requirement settings](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604), the passcode value provided here must meet those requirements. <br><br>If the requirements are enabled, you can view those requirements by calling either the [Get User Settings API](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usersettings) or the  [Get Account Settings](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/accountsettings) API. 
    
    If \"**Require a passcode when scheduling new meetings**\" setting has been **enabled** **and** [locked](https://support.zoom.us/hc/en-us/articles/115005269866-Using-Tiered-Settings#locked) for the user, the passcode field will be autogenerated for the Webinar in the response even if it is not provided in the API request. <br><br>
    """  
    recurrence: Optional[WebinarUpdateApplicationJSONRecurrence] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recurrence'), 'exclude': lambda f: f is None }})
    r"""Recurrence object. Use this object only for a meeting with type `8` i.e., a recurring meeting with fixed time."""  
    settings: Optional[WebinarUpdateApplicationJSONSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('settings'), 'exclude': lambda f: f is None }})  
    start_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Webinar start time, in the format \\"yyyy-MM-dd'T'HH:mm:ss'Z'.\\" Should be in GMT time. In the format \\"yyyy-MM-dd'T'HH:mm:ss.\\" This should be in local time and the timezone should be specified. Only used for scheduled webinars and recurring webinars with a fixed time."""  
    timezone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timezone'), 'exclude': lambda f: f is None }})
    r"""Time zone to format start_time. For example, \\"America/Los_Angeles\\". For scheduled meetings only. Please reference our [time zone](#timezones) list for supported time zones and their formats."""  
    topic: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topic'), 'exclude': lambda f: f is None }})
    r"""Webinar topic."""  
    tracking_fields: Optional[list[WebinarUpdateApplicationJSONTrackingFields]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tracking_fields'), 'exclude': lambda f: f is None }})
    r"""Tracking fields"""  
    type: Optional[WebinarUpdateApplicationJSONTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Webinar Types:<br>`5` - webinar.<br>`6` - Recurring webinar with no fixed time.<br>`9` - Recurring webinar with a fixed time."""  
    

@dataclasses.dataclass
class WebinarUpdateJSONRequest:
    
    request_body: WebinarUpdateApplicationJSON = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""Webinar."""  
    webinar_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'webinarId', 'style': 'simple', 'explode': False }})
    r"""The webinar ID in \\"**long**\\" format(represented as int64 data type in JSON)."""  
    occurrence_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'occurrence_id', 'style': 'form', 'explode': True }})
    r"""Webinar occurrence id. Support change of agenda, start_time, duration, settings: {host_video, panelist_video, hd_video, watermark, auto_recording}"""  
    

@dataclasses.dataclass
class WebinarUpdateJSONResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    