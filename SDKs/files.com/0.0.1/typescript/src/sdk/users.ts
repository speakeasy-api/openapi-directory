/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Operations about users
 */
export class Users {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete User
   *
   * @remarks
   * Delete User
   */
  deleteUsersId(
    req: operations.DeleteUsersIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteUsersIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteUsersIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/users/{id}", req);

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteUsersIdResponse =
        new operations.DeleteUsersIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 400, 401, 403, 404, 405, 409, 412, 422, 423, 429].includes(
          httpRes?.status
        ):
          break;
      }

      return res;
    });
  }

  /**
   * List Users
   *
   * @remarks
   * List Users
   */
  getUsers(
    req: operations.GetUsersRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetUsersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetUsersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/users";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetUsersResponse = new operations.GetUsersResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.userEntities = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.userEntities = utils.objectToClass(
              httpRes?.data,
              shared.UserEntity,
              resFieldDepth
            );
          }
          break;
        case [400, 401, 403, 404, 405, 409, 412, 422, 423, 429].includes(
          httpRes?.status
        ):
          break;
      }

      return res;
    });
  }

  /**
   * Show User
   *
   * @remarks
   * Show User
   */
  getUsersId(
    req: operations.GetUsersIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetUsersIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetUsersIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/users/{id}", req);

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetUsersIdResponse =
        new operations.GetUsersIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.userEntity = utils.objectToClass(
              httpRes?.data,
              shared.UserEntity
            );
          }
          break;
        case [400, 401, 403, 404, 405, 409, 412, 422, 423, 429].includes(
          httpRes?.status
        ):
          break;
      }

      return res;
    });
  }

  /**
   * List Api Keys
   *
   * @remarks
   * List Api Keys
   */
  getUsersUserIdApiKeys(
    req: operations.GetUsersUserIdApiKeysRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetUsersUserIdApiKeysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetUsersUserIdApiKeysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{user_id}/api_keys",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetUsersUserIdApiKeysResponse =
        new operations.GetUsersUserIdApiKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiKeyEntities = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.apiKeyEntities = utils.objectToClass(
              httpRes?.data,
              shared.ApiKeyEntity,
              resFieldDepth
            );
          }
          break;
        case [400, 401, 403, 404, 405, 409, 412, 422, 423, 429].includes(
          httpRes?.status
        ):
          break;
      }

      return res;
    });
  }

  /**
   * List User Cipher Uses
   *
   * @remarks
   * List User Cipher Uses
   */
  getUsersUserIdCipherUses(
    req: operations.GetUsersUserIdCipherUsesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetUsersUserIdCipherUsesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetUsersUserIdCipherUsesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{user_id}/cipher_uses",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetUsersUserIdCipherUsesResponse =
        new operations.GetUsersUserIdCipherUsesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.userCipherUseEntities = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.userCipherUseEntities = utils.objectToClass(
              httpRes?.data,
              shared.UserCipherUseEntity,
              resFieldDepth
            );
          }
          break;
        case [400, 401, 403, 404, 405, 409, 412, 422, 423, 429].includes(
          httpRes?.status
        ):
          break;
      }

      return res;
    });
  }

  /**
   * List Group Users
   *
   * @remarks
   * List Group Users
   */
  getUsersUserIdGroups(
    req: operations.GetUsersUserIdGroupsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetUsersUserIdGroupsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetUsersUserIdGroupsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{user_id}/groups",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetUsersUserIdGroupsResponse =
        new operations.GetUsersUserIdGroupsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.groupUserEntities = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.groupUserEntities = utils.objectToClass(
              httpRes?.data,
              shared.GroupUserEntity,
              resFieldDepth
            );
          }
          break;
        case [400, 401, 403, 404, 405, 409, 412, 422, 423, 429].includes(
          httpRes?.status
        ):
          break;
      }

      return res;
    });
  }

  /**
   * List Permissions
   *
   * @remarks
   * List Permissions
   */
  getUsersUserIdPermissions(
    req: operations.GetUsersUserIdPermissionsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetUsersUserIdPermissionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetUsersUserIdPermissionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{user_id}/permissions",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetUsersUserIdPermissionsResponse =
        new operations.GetUsersUserIdPermissionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.permissionEntities = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.permissionEntities = utils.objectToClass(
              httpRes?.data,
              shared.PermissionEntity,
              resFieldDepth
            );
          }
          break;
        case [400, 401, 403, 404, 405, 409, 412, 422, 423, 429].includes(
          httpRes?.status
        ):
          break;
      }

      return res;
    });
  }

  /**
   * List Public Keys
   *
   * @remarks
   * List Public Keys
   */
  getUsersUserIdPublicKeys(
    req: operations.GetUsersUserIdPublicKeysRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetUsersUserIdPublicKeysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetUsersUserIdPublicKeysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{user_id}/public_keys",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetUsersUserIdPublicKeysResponse =
        new operations.GetUsersUserIdPublicKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.publicKeyEntities = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.publicKeyEntities = utils.objectToClass(
              httpRes?.data,
              shared.PublicKeyEntity,
              resFieldDepth
            );
          }
          break;
        case [400, 401, 403, 404, 405, 409, 412, 422, 423, 429].includes(
          httpRes?.status
        ):
          break;
      }

      return res;
    });
  }

  /**
   * Update User
   *
   * @remarks
   * Update User
   */
  patchUsersId(
    req: operations.PatchUsersIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PatchUsersIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PatchUsersIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/users/{id}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PatchUsersIdResponse =
        new operations.PatchUsersIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.userEntity = utils.objectToClass(
              httpRes?.data,
              shared.UserEntity
            );
          }
          break;
        case [400, 401, 403, 404, 405, 409, 412, 422, 423, 429].includes(
          httpRes?.status
        ):
          break;
      }

      return res;
    });
  }

  /**
   * Create User
   *
   * @remarks
   * Create User
   */
  postUsers(
    req: operations.PostUsersRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.PostUsersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostUsersRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/users";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostUsersResponse =
        new operations.PostUsersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.userEntity = utils.objectToClass(
              httpRes?.data,
              shared.UserEntity
            );
          }
          break;
        case [400, 401, 403, 404, 405, 409, 412, 422, 423, 429].includes(
          httpRes?.status
        ):
          break;
      }

      return res;
    });
  }

  /**
   * Trigger 2FA Reset process for user who has lost access to their existing 2FA methods.
   *
   * @remarks
   * Trigger 2FA Reset process for user who has lost access to their existing 2FA methods.
   */
  postUsersId2faReset(
    req: operations.PostUsersId2faResetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostUsersId2faResetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostUsersId2faResetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{id}/2fa/reset",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostUsersId2faResetResponse =
        new operations.PostUsersId2faResetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 400, 401, 403, 404, 405, 409, 412, 422, 423, 429].includes(
          httpRes?.status
        ):
          break;
      }

      return res;
    });
  }

  /**
   * Resend user welcome email
   *
   * @remarks
   * Resend user welcome email
   */
  postUsersIdResendWelcomeEmail(
    req: operations.PostUsersIdResendWelcomeEmailRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostUsersIdResendWelcomeEmailResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostUsersIdResendWelcomeEmailRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{id}/resend_welcome_email",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostUsersIdResendWelcomeEmailResponse =
        new operations.PostUsersIdResendWelcomeEmailResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 400, 401, 403, 404, 405, 409, 412, 422, 423, 429].includes(
          httpRes?.status
        ):
          break;
      }

      return res;
    });
  }

  /**
   * Unlock user who has been locked out due to failed logins.
   *
   * @remarks
   * Unlock user who has been locked out due to failed logins.
   */
  postUsersIdUnlock(
    req: operations.PostUsersIdUnlockRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostUsersIdUnlockResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostUsersIdUnlockRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/users/{id}/unlock", req);

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostUsersIdUnlockResponse =
        new operations.PostUsersIdUnlockResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 400, 401, 403, 404, 405, 409, 412, 422, 423, 429].includes(
          httpRes?.status
        ):
          break;
      }

      return res;
    });
  }

  /**
   * Create Api Key
   *
   * @remarks
   * Create Api Key
   */
  postUsersUserIdApiKeys(
    req: operations.PostUsersUserIdApiKeysRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostUsersUserIdApiKeysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostUsersUserIdApiKeysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{user_id}/api_keys",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostUsersUserIdApiKeysResponse =
        new operations.PostUsersUserIdApiKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiKeyEntity = utils.objectToClass(
              httpRes?.data,
              shared.ApiKeyEntity
            );
          }
          break;
        case [400, 401, 403, 404, 405, 409, 412, 422, 423, 429].includes(
          httpRes?.status
        ):
          break;
      }

      return res;
    });
  }

  /**
   * Create Public Key
   *
   * @remarks
   * Create Public Key
   */
  postUsersUserIdPublicKeys(
    req: operations.PostUsersUserIdPublicKeysRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostUsersUserIdPublicKeysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostUsersUserIdPublicKeysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{user_id}/public_keys",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostUsersUserIdPublicKeysResponse =
        new operations.PostUsersUserIdPublicKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.publicKeyEntity = utils.objectToClass(
              httpRes?.data,
              shared.PublicKeyEntity
            );
          }
          break;
        case [400, 401, 403, 404, 405, 409, 412, 422, 423, 429].includes(
          httpRes?.status
        ):
          break;
      }

      return res;
    });
  }
}
