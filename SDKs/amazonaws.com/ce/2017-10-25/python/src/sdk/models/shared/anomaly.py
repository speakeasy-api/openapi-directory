"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import anomalyfeedbacktype_enum as shared_anomalyfeedbacktype_enum
from ..shared import anomalyscore as shared_anomalyscore
from ..shared import impact as shared_impact
from ..shared import rootcause as shared_rootcause
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Anomaly:
    r"""An unusual cost pattern. This consists of the detailed metadata and the current status of the anomaly object."""
    
    anomaly_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AnomalyId') }})  
    anomaly_score: shared_anomalyscore.AnomalyScore = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AnomalyScore') }})  
    impact: shared_impact.Impact = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Impact') }})  
    monitor_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MonitorArn') }})  
    anomaly_end_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AnomalyEndDate'), 'exclude': lambda f: f is None }})  
    anomaly_start_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AnomalyStartDate'), 'exclude': lambda f: f is None }})  
    dimension_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DimensionValue'), 'exclude': lambda f: f is None }})  
    feedback: Optional[shared_anomalyfeedbacktype_enum.AnomalyFeedbackTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Feedback'), 'exclude': lambda f: f is None }})  
    root_causes: Optional[list[shared_rootcause.RootCause]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RootCauses'), 'exclude': lambda f: f is None }})  
    