// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

// CustomConfigurationFormatEnum - The format of the serializer
type CustomConfigurationFormatEnum string

const (
	CustomConfigurationFormatEnumCsv CustomConfigurationFormatEnum = "CSV"
	CustomConfigurationFormatEnumHl7 CustomConfigurationFormatEnum = "HL7"
)

func (e *CustomConfigurationFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CSV":
		fallthrough
	case "HL7":
		*e = CustomConfigurationFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CustomConfigurationFormatEnum: %s", s)
	}
}

type CustomConfigurationTransportType string

const (
	CustomConfigurationTransportTypeSFTPTransport      CustomConfigurationTransportType = "SFTPTransport"
	CustomConfigurationTransportTypeAs2Transport       CustomConfigurationTransportType = "AS2Transport"
	CustomConfigurationTransportTypeBlobStoreTransport CustomConfigurationTransportType = "BlobStoreTransport"
	CustomConfigurationTransportTypeNullTransport      CustomConfigurationTransportType = "NullTransport"
)

type CustomConfigurationTransport struct {
	SFTPTransport      *SFTPTransport
	As2Transport       *As2Transport
	BlobStoreTransport *BlobStoreTransport
	NullTransport      *NullTransport

	Type CustomConfigurationTransportType
}

func CreateCustomConfigurationTransportSFTPTransport(sftpTransport SFTPTransport) CustomConfigurationTransport {
	typ := CustomConfigurationTransportTypeSFTPTransport

	return CustomConfigurationTransport{
		SFTPTransport: &sftpTransport,
		Type:          typ,
	}
}

func CreateCustomConfigurationTransportAs2Transport(as2Transport As2Transport) CustomConfigurationTransport {
	typ := CustomConfigurationTransportTypeAs2Transport

	return CustomConfigurationTransport{
		As2Transport: &as2Transport,
		Type:         typ,
	}
}

func CreateCustomConfigurationTransportBlobStoreTransport(blobStoreTransport BlobStoreTransport) CustomConfigurationTransport {
	typ := CustomConfigurationTransportTypeBlobStoreTransport

	return CustomConfigurationTransport{
		BlobStoreTransport: &blobStoreTransport,
		Type:               typ,
	}
}

func CreateCustomConfigurationTransportNullTransport(nullTransport NullTransport) CustomConfigurationTransport {
	typ := CustomConfigurationTransportTypeNullTransport

	return CustomConfigurationTransport{
		NullTransport: &nullTransport,
		Type:          typ,
	}
}

func (u *CustomConfigurationTransport) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sftpTransport := new(SFTPTransport)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sftpTransport); err == nil {
		u.SFTPTransport = sftpTransport
		u.Type = CustomConfigurationTransportTypeSFTPTransport
		return nil
	}

	as2Transport := new(As2Transport)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&as2Transport); err == nil {
		u.As2Transport = as2Transport
		u.Type = CustomConfigurationTransportTypeAs2Transport
		return nil
	}

	blobStoreTransport := new(BlobStoreTransport)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&blobStoreTransport); err == nil {
		u.BlobStoreTransport = blobStoreTransport
		u.Type = CustomConfigurationTransportTypeBlobStoreTransport
		return nil
	}

	nullTransport := new(NullTransport)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&nullTransport); err == nil {
		u.NullTransport = nullTransport
		u.Type = CustomConfigurationTransportTypeNullTransport
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CustomConfigurationTransport) MarshalJSON() ([]byte, error) {
	if u.SFTPTransport != nil {
		return json.Marshal(u.SFTPTransport)
	}

	if u.As2Transport != nil {
		return json.Marshal(u.As2Transport)
	}

	if u.BlobStoreTransport != nil {
		return json.Marshal(u.BlobStoreTransport)
	}

	if u.NullTransport != nil {
		return json.Marshal(u.NullTransport)
	}

	return nil, nil
}

// CustomConfiguration - A custom configuration for a custom schema
type CustomConfiguration struct {
	// The format of the serializer
	Format CustomConfigurationFormatEnum `json:"format"`
	// The format to use for the file name generated by the translation
	NameFormat *string `json:"nameFormat,omitempty"`
	// The name of the receiving organization in the message
	ReceivingOrganization *string `json:"receivingOrganization,omitempty"`
	// The name of the custom schema
	SchemaName string `json:"schemaName"`
	// The transport to use
	Transport CustomConfigurationTransport `json:"transport"`
	// The discrimenator
	Type string `json:"type"`
}
