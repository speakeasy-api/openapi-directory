"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AwsEc2VpnConnectionOptionsTunnelOptionsDetails:
    r"""The VPN tunnel options."""
    
    dpd_timeout_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DpdTimeoutSeconds'), 'exclude': lambda f: f is None }})  
    ike_versions: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IkeVersions'), 'exclude': lambda f: f is None }})  
    outside_ip_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OutsideIpAddress'), 'exclude': lambda f: f is None }})  
    phase1_dh_group_numbers: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Phase1DhGroupNumbers'), 'exclude': lambda f: f is None }})  
    phase1_encryption_algorithms: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Phase1EncryptionAlgorithms'), 'exclude': lambda f: f is None }})  
    phase1_integrity_algorithms: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Phase1IntegrityAlgorithms'), 'exclude': lambda f: f is None }})  
    phase1_lifetime_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Phase1LifetimeSeconds'), 'exclude': lambda f: f is None }})  
    phase2_dh_group_numbers: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Phase2DhGroupNumbers'), 'exclude': lambda f: f is None }})  
    phase2_encryption_algorithms: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Phase2EncryptionAlgorithms'), 'exclude': lambda f: f is None }})  
    phase2_integrity_algorithms: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Phase2IntegrityAlgorithms'), 'exclude': lambda f: f is None }})  
    phase2_lifetime_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Phase2LifetimeSeconds'), 'exclude': lambda f: f is None }})  
    pre_shared_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PreSharedKey'), 'exclude': lambda f: f is None }})  
    rekey_fuzz_percentage: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RekeyFuzzPercentage'), 'exclude': lambda f: f is None }})  
    rekey_margin_time_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RekeyMarginTimeSeconds'), 'exclude': lambda f: f is None }})  
    replay_window_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReplayWindowSize'), 'exclude': lambda f: f is None }})  
    tunnel_inside_cidr: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TunnelInsideCidr'), 'exclude': lambda f: f is None }})  
    