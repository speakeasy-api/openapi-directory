/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * ConfigurationRecorderStatus - &lt;p&gt;The current status of the configuration recorder.&lt;/p&gt; &lt;note&gt; &lt;p&gt;For a detailed status of recording events over time, add your Config events to CloudWatch metrics and use CloudWatch metrics.&lt;/p&gt; &lt;/note&gt;
 */
public class ConfigurationRecorderStatus {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastErrorCode")
    public String lastErrorCode;

    public ConfigurationRecorderStatus withLastErrorCode(String lastErrorCode) {
        this.lastErrorCode = lastErrorCode;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastErrorMessage")
    public String lastErrorMessage;

    public ConfigurationRecorderStatus withLastErrorMessage(String lastErrorMessage) {
        this.lastErrorMessage = lastErrorMessage;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastStartTime")
    public OffsetDateTime lastStartTime;

    public ConfigurationRecorderStatus withLastStartTime(OffsetDateTime lastStartTime) {
        this.lastStartTime = lastStartTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastStatus")
    public RecorderStatusEnum lastStatus;

    public ConfigurationRecorderStatus withLastStatus(RecorderStatusEnum lastStatus) {
        this.lastStatus = lastStatus;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastStatusChangeTime")
    public OffsetDateTime lastStatusChangeTime;

    public ConfigurationRecorderStatus withLastStatusChangeTime(OffsetDateTime lastStatusChangeTime) {
        this.lastStatusChangeTime = lastStatusChangeTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastStopTime")
    public OffsetDateTime lastStopTime;

    public ConfigurationRecorderStatus withLastStopTime(OffsetDateTime lastStopTime) {
        this.lastStopTime = lastStopTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public ConfigurationRecorderStatus withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recording")
    public Boolean recording;

    public ConfigurationRecorderStatus withRecording(Boolean recording) {
        this.recording = recording;
        return this;
    }
    
    public ConfigurationRecorderStatus(){}
}
