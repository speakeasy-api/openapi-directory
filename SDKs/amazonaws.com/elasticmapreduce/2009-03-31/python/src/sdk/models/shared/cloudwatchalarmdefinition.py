"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import comparisonoperator_enum as shared_comparisonoperator_enum
from ..shared import metricdimension as shared_metricdimension
from ..shared import statistic_enum as shared_statistic_enum
from ..shared import unit_enum as shared_unit_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CloudWatchAlarmDefinition:
    r"""The definition of a CloudWatch metric alarm, which determines when an automatic scaling activity is triggered. When the defined alarm conditions are satisfied, scaling activity begins."""
    
    comparison_operator: shared_comparisonoperator_enum.ComparisonOperatorEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ComparisonOperator') }})  
    metric_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MetricName') }})  
    period: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Period') }})  
    threshold: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Threshold') }})  
    dimensions: Optional[list[shared_metricdimension.MetricDimension]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Dimensions'), 'exclude': lambda f: f is None }})  
    evaluation_periods: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EvaluationPeriods'), 'exclude': lambda f: f is None }})  
    namespace: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Namespace'), 'exclude': lambda f: f is None }})  
    statistic: Optional[shared_statistic_enum.StatisticEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Statistic'), 'exclude': lambda f: f is None }})  
    unit: Optional[shared_unit_enum.UnitEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Unit'), 'exclude': lambda f: f is None }})  
    