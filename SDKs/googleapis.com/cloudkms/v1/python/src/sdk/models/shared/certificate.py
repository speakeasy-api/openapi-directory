"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Certificate:
    r"""A Certificate represents an X.509 certificate used to authenticate HTTPS connections to EKM replicas."""
    
    issuer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issuer'), 'exclude': lambda f: f is None }})
    r"""Output only. The issuer distinguished name in RFC 2253 format. Only present if parsed is true."""  
    not_after_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notAfterTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The certificate is not valid after this time. Only present if parsed is true."""  
    not_before_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notBeforeTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The certificate is not valid before this time. Only present if parsed is true."""  
    parsed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parsed'), 'exclude': lambda f: f is None }})
    r"""Output only. True if the certificate was parsed successfully."""  
    raw_der: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rawDer'), 'exclude': lambda f: f is None }})
    r"""Required. The raw certificate bytes in DER format."""  
    serial_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serialNumber'), 'exclude': lambda f: f is None }})
    r"""Output only. The certificate serial number as a hex string. Only present if parsed is true."""  
    sha256_fingerprint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sha256Fingerprint'), 'exclude': lambda f: f is None }})
    r"""Output only. The SHA-256 certificate fingerprint as a hex string. Only present if parsed is true."""  
    subject: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subject'), 'exclude': lambda f: f is None }})
    r"""Output only. The subject distinguished name in RFC 2253 format. Only present if parsed is true."""  
    subject_alternative_dns_names: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subjectAlternativeDnsNames'), 'exclude': lambda f: f is None }})
    r"""Output only. The subject Alternative DNS names. Only present if parsed is true."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CertificateInput:
    r"""A Certificate represents an X.509 certificate used to authenticate HTTPS connections to EKM replicas."""
    
    raw_der: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rawDer'), 'exclude': lambda f: f is None }})
    r"""Required. The raw certificate bytes in DER format."""  
    