/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * AccountTokenRequest - The account credentials with requested token scope.
 */
public class AccountTokenRequest {
    /**
     * If you specify a cookie type then a content filter cookie will be returned
     * along with the token(s). This is only intended for web based clients which
     * need to pass the cookies to a server to render a page based on the user's
     * content filters e.g subscription code.
     * 
     * If type `Session` the cookie will be session based.
     * If type `Persistent` the cookie will have a medium term lifespan.
     * If undefined no cookies will be set.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cookieType")
    public AccountTokenRequestCookieTypeEnum cookieType;

    public AccountTokenRequest withCookieType(AccountTokenRequestCookieTypeEnum cookieType) {
        this.cookieType = cookieType;
        return this;
    }
    
    /**
     * The email associated with the account.
     */
    @JsonProperty("email")
    public String email;

    public AccountTokenRequest withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     * The password associated with the account.
     */
    @JsonProperty("password")
    public String password;

    public AccountTokenRequest withPassword(String password) {
        this.password = password;
        return this;
    }
    
    /**
     * The scope(s) of the tokens required.
     * For each scope listed an Account and Profile token of that scope will be returned
     * 
     */
    @JsonProperty("scopes")
    public AccountTokenRequestScopesEnum[] scopes;

    public AccountTokenRequest withScopes(AccountTokenRequestScopesEnum[] scopes) {
        this.scopes = scopes;
        return this;
    }
    
    public AccountTokenRequest(@JsonProperty("email") String email, @JsonProperty("password") String password, @JsonProperty("scopes") AccountTokenRequestScopesEnum[] scopes) {
        this.email = email;
        this.password = password;
        this.scopes = scopes;
  }
}
