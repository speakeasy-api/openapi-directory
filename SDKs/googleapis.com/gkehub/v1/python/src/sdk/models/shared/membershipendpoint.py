"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import appliancecluster as shared_appliancecluster
from ..shared import edgecluster as shared_edgecluster
from ..shared import gkecluster as shared_gkecluster
from ..shared import kubernetesmetadata as shared_kubernetesmetadata
from ..shared import kubernetesresource as shared_kubernetesresource
from ..shared import multicloudcluster as shared_multicloudcluster
from ..shared import onpremcluster as shared_onpremcluster
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MembershipEndpoint:
    r"""MembershipEndpoint contains information needed to contact a Kubernetes API, endpoint and any additional Kubernetes metadata."""
    
    appliance_cluster: Optional[shared_appliancecluster.ApplianceCluster] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applianceCluster'), 'exclude': lambda f: f is None }})
    r"""ApplianceCluster contains information specific to GDC Edge Appliance Clusters."""  
    edge_cluster: Optional[shared_edgecluster.EdgeCluster] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('edgeCluster'), 'exclude': lambda f: f is None }})
    r"""EdgeCluster contains information specific to Google Edge Clusters."""  
    gke_cluster: Optional[shared_gkecluster.GkeCluster] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gkeCluster'), 'exclude': lambda f: f is None }})
    r"""GkeCluster contains information specific to GKE clusters."""  
    google_managed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('googleManaged'), 'exclude': lambda f: f is None }})
    r"""Output only. Whether the lifecycle of this membership is managed by a google cluster platform service."""  
    kubernetes_metadata: Optional[shared_kubernetesmetadata.KubernetesMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kubernetesMetadata'), 'exclude': lambda f: f is None }})
    r"""KubernetesMetadata provides informational metadata for Memberships representing Kubernetes clusters."""  
    kubernetes_resource: Optional[shared_kubernetesresource.KubernetesResource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kubernetesResource'), 'exclude': lambda f: f is None }})
    r"""KubernetesResource contains the YAML manifests and configuration for Membership Kubernetes resources in the cluster. After CreateMembership or UpdateMembership, these resources should be re-applied in the cluster."""  
    multi_cloud_cluster: Optional[shared_multicloudcluster.MultiCloudCluster] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('multiCloudCluster'), 'exclude': lambda f: f is None }})
    r"""MultiCloudCluster contains information specific to GKE Multi-Cloud clusters."""  
    on_prem_cluster: Optional[shared_onpremcluster.OnPremCluster] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('onPremCluster'), 'exclude': lambda f: f is None }})
    r"""OnPremCluster contains information specific to GKE On-Prem clusters."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MembershipEndpointInput:
    r"""MembershipEndpoint contains information needed to contact a Kubernetes API, endpoint and any additional Kubernetes metadata."""
    
    appliance_cluster: Optional[shared_appliancecluster.ApplianceCluster] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applianceCluster'), 'exclude': lambda f: f is None }})
    r"""ApplianceCluster contains information specific to GDC Edge Appliance Clusters."""  
    edge_cluster: Optional[shared_edgecluster.EdgeCluster] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('edgeCluster'), 'exclude': lambda f: f is None }})
    r"""EdgeCluster contains information specific to Google Edge Clusters."""  
    gke_cluster: Optional[shared_gkecluster.GkeClusterInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gkeCluster'), 'exclude': lambda f: f is None }})
    r"""GkeCluster contains information specific to GKE clusters."""  
    kubernetes_resource: Optional[shared_kubernetesresource.KubernetesResourceInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kubernetesResource'), 'exclude': lambda f: f is None }})
    r"""KubernetesResource contains the YAML manifests and configuration for Membership Kubernetes resources in the cluster. After CreateMembership or UpdateMembership, these resources should be re-applied in the cluster."""  
    multi_cloud_cluster: Optional[shared_multicloudcluster.MultiCloudClusterInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('multiCloudCluster'), 'exclude': lambda f: f is None }})
    r"""MultiCloudCluster contains information specific to GKE Multi-Cloud clusters."""  
    on_prem_cluster: Optional[shared_onpremcluster.OnPremClusterInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('onPremCluster'), 'exclude': lambda f: f is None }})
    r"""OnPremCluster contains information specific to GKE On-Prem clusters."""  
    