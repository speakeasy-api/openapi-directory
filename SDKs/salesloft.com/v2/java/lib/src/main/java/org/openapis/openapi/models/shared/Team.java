/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import java.time.OffsetDateTime;

/**
 * Team - Success
 */
public class Team {
    /**
     * For internal use only. This field does not comply with our backwards compatability policies.
     */
    
    public java.util.Map<String, Object> privateFields;
    public Team withPrivateFields(java.util.Map<String, Object> privateFields) {
        this.privateFields = privateFields;
        return this;
    }
    
    /**
     * Whether team members are allowed to have automated email steps
     */
    
    public Boolean allowAutomatedEmailSteps;
    public Team withAllowAutomatedEmailSteps(Boolean allowAutomatedEmailSteps) {
        this.allowAutomatedEmailSteps = allowAutomatedEmailSteps;
        return this;
    }
    
    /**
     * Whether all call recording is disabled
     */
    
    public Boolean callRecordingDisabled;
    public Team withCallRecordingDisabled(Boolean callRecordingDisabled) {
        this.callRecordingDisabled = callRecordingDisabled;
        return this;
    }
    
    /**
     * The team default for click tracking when composing emails
     */
    
    public Boolean clickTrackingDefault;
    public Team withClickTrackingDefault(Boolean clickTrackingDefault) {
        this.clickTrackingDefault = clickTrackingDefault;
        return this;
    }
    
    /**
     * Datetime of when the team was created
     */
    
    public OffsetDateTime createdAt;
    public Team withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The domain click and open tracking will be proxied through
     */
    
    public String customTrackingDomain;
    public Team withCustomTrackingDomain(String customTrackingDomain) {
        this.customTrackingDomain = customTrackingDomain;
        return this;
    }
    
    /**
     * Indicates if the team has been deactivated
     */
    
    public Boolean deactivated;
    public Team withDeactivated(Boolean deactivated) {
        this.deactivated = deactivated;
        return this;
    }
    
    /**
     * Whether team members are required to mark disposition at the end of calls
     */
    
    public Boolean dispositionsRequired;
    public Team withDispositionsRequired(Boolean dispositionsRequired) {
        this.dispositionsRequired = dispositionsRequired;
        return this;
    }
    
    /**
     * Daily email limit for each member on the team
     */
    
    public Long emailDailyLimit;
    public Team withEmailDailyLimit(Long emailDailyLimit) {
        this.emailDailyLimit = emailDailyLimit;
        return this;
    }
    
    /**
     * Visibility setting for resources across the team. Possible values are: group_public, all_public.
     * When the value is group_public, certain resources will only be visible to members of the same group.
     * When the value is all_public, all resources are visible to all users on this team.
     * 
     */
    
    public String groupPrivacySetting;
    public Team withGroupPrivacySetting(String groupPrivacySetting) {
        this.groupPrivacySetting = groupPrivacySetting;
        return this;
    }
    
    /**
     * Team ID
     */
    
    public Long id;
    public Team withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * Count of seats that this team has licensed
     */
    
    public Long licenseLimit;
    public Team withLicenseLimit(Long licenseLimit) {
        this.licenseLimit = licenseLimit;
        return this;
    }
    
    /**
     * Whether this team has local dial enabled
     */
    
    public Boolean localDialEnabled;
    public Team withLocalDialEnabled(Boolean localDialEnabled) {
        this.localDialEnabled = localDialEnabled;
        return this;
    }
    
    /**
     * Team name
     */
    
    public String name;
    public Team withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Plan type of the team, Possible values are: group, professional, enterprise
     */
    
    public String plan;
    public Team withPlan(String plan) {
        this.plan = plan;
        return this;
    }
    
    /**
     * Add on features for this team
     */
    
    public java.util.Map<String, Object> planFeatures;
    public Team withPlanFeatures(java.util.Map<String, Object> planFeatures) {
        this.planFeatures = planFeatures;
        return this;
    }
    
    /**
     * Whether calls will record by default
     */
    
    public Boolean recordByDefault;
    public Team withRecordByDefault(Boolean recordByDefault) {
        this.recordByDefault = recordByDefault;
        return this;
    }
    
    /**
     * Whether team members are required to log sentiments
     */
    
    public Boolean sentimentsRequired;
    public Team withSentimentsRequired(Boolean sentimentsRequired) {
        this.sentimentsRequired = sentimentsRequired;
        return this;
    }
    
    /**
     * The default visibility of resources on the team, in the UI only. The API does not utilize this default.
     * Possible values are: public, private.
     * 
     */
    
    public String teamVisibilityDefault;
    public Team withTeamVisibilityDefault(String teamVisibilityDefault) {
        this.teamVisibilityDefault = teamVisibilityDefault;
        return this;
    }
    
    /**
     * Datetime of when the team was last updated
     */
    
    public OffsetDateTime updatedAt;
    public Team withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
}
