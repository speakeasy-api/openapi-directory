// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type GetCalculatorConfigurationByIDPathParams struct {
	// Promotion ID or tax ID.
	IDCalculatorConfiguration string `pathParam:"style=simple,explode=false,name=idCalculatorConfiguration"`
}

type GetCalculatorConfigurationByIDHeaders struct {
	// HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
	Accept string `header:"style=simple,explode=false,name=Accept"`
	// Type of the content being sent.
	ContentType string `header:"style=simple,explode=false,name=Content-Type"`
}

type GetCalculatorConfigurationByIDRequest struct {
	PathParams GetCalculatorConfigurationByIDPathParams
	Headers    GetCalculatorConfigurationByIDHeaders
}

// GetCalculatorConfigurationByID200PromotionAffiliates - Object with information of the affiliate.
type GetCalculatorConfigurationByID200PromotionAffiliates struct {
	// Affiliate ID.
	ID *string
	// Affiliate Name.
	Name *string
}

// GetCalculatorConfigurationByID200PromotionBrands - Object with information of the brand.
type GetCalculatorConfigurationByID200PromotionBrands struct {
	// Brand ID.
	ID *string
	// Brand Name.
	Name *string
}

// GetCalculatorConfigurationByID200PromotionCategories - Object with information of the category.
type GetCalculatorConfigurationByID200PromotionCategories struct {
	// Category ID.
	ID *string
	// Category Name.
	Name *string
}

// GetCalculatorConfigurationByID200PromotionCollections - Object with information of the collection.
type GetCalculatorConfigurationByID200PromotionCollections struct {
	// Collection ID.
	ID *string
	// Collection Name.
	Name *string
}

// GetCalculatorConfigurationByID200PromotionPaymentsMethods - Object with information of the Payment Method.
type GetCalculatorConfigurationByID200PromotionPaymentsMethods struct {
	// Payment Method ID.
	ID *string
	// Payment Method Name.
	Name *string
}

// GetCalculatorConfigurationByID200PromotionProducts - Object with information of the product.
type GetCalculatorConfigurationByID200PromotionProducts struct {
	// Product ID.
	ID *string
	// Product Name.
	Name *string
}

// GetCalculatorConfigurationByID200PromotionSkus - Object with information of the SKU.
type GetCalculatorConfigurationByID200PromotionSkus struct {
	// SKU ID.
	ID *string
	// SKU Name.
	Name *string
}

// GetCalculatorConfigurationByID200PromotionSkusGift - SKU Gift Object. Total discount on the product value set as a gift.
type GetCalculatorConfigurationByID200PromotionSkusGift struct {
	// Array with SKU Gifts IDs.
	Gifts *int64
	// Quantity of SKU Gifts.
	QuantitySelectable *int64
}

type GetCalculatorConfigurationByID200PromotionZipCodeRanges struct {
	// Defines if the zip code range is included in the promotion.
	Inclusive *bool
	// Initial Zip Code.
	ZipCodeFrom *string
	// Final Zip Code.
	ZipCodeTo *string
}

// GetCalculatorConfigurationByID200Promotion - OK
type GetCalculatorConfigurationByID200Promotion struct {
	// Maximum value for the shipping.
	AbsoluteShippingDiscountValue *float64
	// Allows the promotion to apply to products whose prices have been manually added by a call center operator.
	AccumulateWithManualPrice *bool
	// If set as `true`, it activates gifts Multiplier.
	ActivateGiftsMultiplier *bool
	// Defines which days of the week the promotion will applied.
	ActiveDaysOfWeek []string
	// Marketplace order identifier. The discount will apply to selected affiliates.
	Affiliates []GetCalculatorConfigurationByID200PromotionAffiliates
	// Promotion will be applied to all kind of shipping.
	ApplyToAllShippings *bool
	// If set to `false`, this promotion will be applied to any trade policies present on the `idsSalesChannel` field. If set to `true`, trade policies present on that field will make this promotion not to be applied.
	AreSalesChannelIdsExclusive *bool
	// Promotion Begin Date (UTC).
	BeginDateUtc *string
	// Object composed by the brands that will activate or deactivate the promotion.
	Brands []GetCalculatorConfigurationByID200PromotionBrands
	// If set to `true`, this promotion will be applied to any brand present on the `brands` field. If set to `false`, brands present on that field will make this promotion not to be applied.
	BrandsAreInclusive *bool
	// Campaign Audiences that activate this promotion.
	Campaigns   []interface{}
	CardIssuers []interface{}
	// Object composed by the categories that will activate or deactivate the promotion.
	Categories []GetCalculatorConfigurationByID200PromotionCategories
	// If set to `true`, this promotion will be applied to any category present on the `categories` field. If set to `false`, categories present on that field will make this promotion not to be applied.
	CategoriesAreInclusive *bool
	// An expression to use with clusters.
	ClusterExpressions []string
	// Array composed by the collections that will be activated or deactivated the promotion.
	Collections []GetCalculatorConfigurationByID200PromotionCollections
	// Collections that will generate the promotion, type **Buy Together**, **More for less**, **Progressive Discount**, **Buy One Get One**.
	Collections1BuyTogether []string
	Collections2BuyTogether []interface{}
	// If set to `true`, this promotion will be applied to any collection present on the `collections` field. If set to `false`, collections present on that field will make this promotion not to be applied.
	CollectionsIsInclusive *bool
	// If the **List Price** and **Price** are the same.
	CompareListPriceAndPrice *bool
	// Array with conditions IDs.
	ConditionsIds []string
	Coupon        []interface{}
	// Defines if a promotion can accumulate with another one. (`true`) or not (`false`).
	Cumulative *bool
	// Number of days that are considered to add the purchase history.
	DaysAgoOfPurchases *int64
	// Promotion internal description.
	Description *string
	DisableDeal *bool
	// The type of discount that will apply to the promotion.
	DiscountType *string
	// Enable **Buy Together** per SKU.
	EnableBuyTogetherPerSku *bool
	// Promotion End Date (UTC).
	EndDateUtc *string
	// Applies the discount even if the user is not logged.
	FirstBuyIsProfileOptimistic *bool
	// Gifts List Type.
	GiftListTypes []string
	// Promotion ID.
	IDCalculatorConfiguration *string
	// Seller Name.
	IDSeller *string
	// If set to `true`, this promotion will be applied to any seller present on the idSeller field. If set to `false`, sellers present on that field will make this promotion not to be applied.
	IDSellerIsInclusive *bool
	// List of Trade Policies that activate this promotion.
	IdsSalesChannel []string
	Installment     *int64
	// If set as `true` the Promotion is activated. If set as `false` the Promotion is deactivated.
	IsActive *bool
	// If set as `true` the Promotion is archived. If set as `false` the Promotion is not archived.
	IsArchived *bool
	// Applies the promotion only if the list price and price is different.
	IsDifferentListPriceAndPrice *bool
	// Insert a flag with the promotion name used in the product's window display and page.
	IsFeatured *bool
	// Applies the discount only if it's a first buy.
	IsFirstBuy *bool
	// Set if the promotion will be applied considering a minimum and maximum values for installments.
	IsMinMaxInstallments *bool
	// Applies selected discount only when one of the defined shipping method is selected by the customer.
	IsSLASelected *bool
	// Maximum price of the item.
	ItemMaxPrice *float64
	// Minimum price of the item.
	ItemMinPrice *float64
	// When the Promotion was last modified.
	LastModified *string
	// SKU first list for the promotion **Buy Together**.
	ListSku1BuyTogether []interface{}
	// SKU second list for the promotion **Buy Together**.
	ListSku2BuyTogether []interface{}
	// Promotion Marketing tags.
	MarketingTags []string
	// If set to `false`, this promotion will be applied to any marketing tag present on the `marketingTags` field. If set to `true`, marketing tags present on that field will make this promotion not to be applied.
	MarketingTagsAreNotInclusive *bool
	// Maximum value for installment.
	MaxInstallment *int64
	// The maximum number of affected items for a promotion.
	MaxNumberOfAffectedItems *int64
	// The maximum number of affected items by group key for a promotion.
	MaxNumberOfAffectedItemsGroupKey *string
	MaxPricesPerItems                []interface{}
	// Defines how many times the promotion can be used.
	MaxUsage *int64
	// Defines if the promotion can be used multiple times per client.
	MaxUsagePerClient *int64
	// The maximum price for each item of the purchase will be the price set up.
	MaximumUnitPriceDiscount *float64
	Merchants                []interface{}
	// Minimum value for installment.
	MinInstallment *int64
	// Minimum quantity for **Buy Together** promotion.
	MinimumQuantityBuyTogether *int64
	// Object composed by a list of SKUs on a Multiple Effects promotion. Structure: `"{SkuId}": {PercentageDiscount}`. There is a limit of 400 SKUs for this type of promotion.
	MultipleSkusCause map[string]string
	// Defines if the promotion can be used multiple times per client.
	MultipleUsePerClient *bool
	// Promotion Name.
	Name *string
	// New time offset from UTC in seconds.
	NewOffset *float64
	// Exact discount to be applied for the total purchase value.
	NominalDiscountValue *float64
	// Nominal value for rewards program.
	NominalRewardValue *float64
	// Exact discount to be applied for the shipping value.
	NominalShippingDiscountValue *float64
	// Nominal Tax.
	NominalTax *float64
	// Time offset from UTC in seconds.
	Offset *int64
	// Order status reward value.
	OrderStatusRewardValue *string
	// Origin of the promotion, `marketplace` or `Fulfillment`. Read [Difference between orders with marketplace and fulfillment sources](https://help.vtex.com/en/tutorial/what-are-orders-with-marketplace-source-and-orders-with-fulfillment-source--6eVYrmUAwMOeKICU2KuG06) for more information.
	Origin *string
	// Array composed by all the Payments Methods.
	PaymentsMethods []GetCalculatorConfigurationByID200PromotionPaymentsMethods
	PaymentsRules   []interface{}
	// Percentage discount to be applied for total purchase value.
	PercentualDiscountValue *float64
	// Percentual discount value list.
	PercentualDiscountValueList []float64
	// Valid discounts for the SKUs in `listSku1BuyTogether`, discount list used for Buy Together Promotions.
	PercentualDiscountValueList1 *float64
	// Equivalent to `percentualDiscountValueList1`.
	PercentualDiscountValueList2 *float64
	// Percentage value for rewards program.
	PercentualRewardValue *float64
	// Percentage discount to be applied for shipping value.
	PercentualShippingDiscountValue *float64
	// Percentual Tax over purchase total value.
	PercentualTax *float64
	// Object composed by the products that will activate or deactivate the promotion.
	Products []GetCalculatorConfigurationByID200PromotionProducts
	// If set to `true`, this promotion will be applied to any product present on the `products` field. If set to `false`, products present on that field will make this promotion not to be applied.
	ProductsAreInclusive   *bool
	ProductsSpecifications []interface{}
	// Quantity to affect **Buy Together** promotion.
	QuantityToAffectBuyTogether *int64
	// Percentual Shipping Discount Value.
	RebatePercentualDiscountValue *float64
	// The discount will be granted if the card's BIN is given.
	RestrictionsBins []string
	// Shipping Percentual Tax over purchase total value.
	ShippingPercentualTax *float64
	// Should distribute discount among matched items.
	ShouldDistributeDiscountAmongMatchedItems *bool
	// Object composed by the SKUs that will activate or deactivate the promotion.
	Skus []GetCalculatorConfigurationByID200PromotionSkus
	// If set to `true`, this promotion will be applied to any SKU present on the `skus` field. If set to `false`, SKUs present on that field will make this promotion not to be applied.
	SkusAreInclusive *bool
	// SKU Gift Object. Total discount on the product value set as a gift.
	SkusGift *GetCalculatorConfigurationByID200PromotionSkusGift
	// The discount will be granted if the shipping method is the same as the one given.
	SlasIds            []string
	Stores             []interface{}
	StoresAreInclusive *bool
	// Maximum chart value to activate the promotion.
	TotalValueCeling *float64
	// Minimum chart value to activate the promotion.
	TotalValueFloor           *float64
	TotalValueIncludeAllItems *bool
	// If products that already are receiving a promotion, will be considered on the chart total value. There are three options available: `IncludeMatchedItems`, `ExcludeMatchedItems`, `AllItems`.
	TotalValueMode *string
	// Total value a client must have in past orders to active the promotion.
	TotalValuePurchase *float64
	// Defines what is the type of the promotion or indicates if it is a tax. Possible values: `regular` ([Regular Promotion](https://help.vtex.com/tutorial/regular-promotion--tutorials_327)), `combo` ([Buy Together](https://help.vtex.com/en/tutorial/buy-together--tutorials_323)), `forThePriceOf` ([More for Less](https://help.vtex.com/en/tutorial/creating-a-more-for-less-promotion--tutorials_325)), `progressive` ([Progressive Discount](https://help.vtex.com/en/tutorial/progressive-discount--tutorials_324)), `buyAndWin` ([Buy One Get One](https://help.vtex.com/en/tutorial/buy-one-get-one--tutorials_322)), `maxPricePerItem` (Deprecated), `campaign` ([Campaign Promotion](https://help.vtex.com/en/tutorial/campaign-promotion--1ChYXhK2AQGuS6wAqS8Ume)), `tax` (Tax), `multipleEffects` (Multiple Effects).
	Type *string
	// Use new progressive algorithm.
	UseNewProgressiveAlgorithm *bool
	// Coupon utmCampaign code.
	UtmCampaign *string
	// Coupon utmSource code.
	UtmSource *string
	// Range of the zip code that applies the promotion.
	ZipCodeRanges []GetCalculatorConfigurationByID200PromotionZipCodeRanges
}

type GetCalculatorConfigurationByIDResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
