// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type HandlerErrorCodeEnum string

const (
	HandlerErrorCodeEnumNotUpdatable            HandlerErrorCodeEnum = "NotUpdatable"
	HandlerErrorCodeEnumInvalidRequest          HandlerErrorCodeEnum = "InvalidRequest"
	HandlerErrorCodeEnumAccessDenied            HandlerErrorCodeEnum = "AccessDenied"
	HandlerErrorCodeEnumInvalidCredentials      HandlerErrorCodeEnum = "InvalidCredentials"
	HandlerErrorCodeEnumAlreadyExists           HandlerErrorCodeEnum = "AlreadyExists"
	HandlerErrorCodeEnumNotFound                HandlerErrorCodeEnum = "NotFound"
	HandlerErrorCodeEnumResourceConflict        HandlerErrorCodeEnum = "ResourceConflict"
	HandlerErrorCodeEnumThrottling              HandlerErrorCodeEnum = "Throttling"
	HandlerErrorCodeEnumServiceLimitExceeded    HandlerErrorCodeEnum = "ServiceLimitExceeded"
	HandlerErrorCodeEnumNotStabilized           HandlerErrorCodeEnum = "NotStabilized"
	HandlerErrorCodeEnumGeneralServiceException HandlerErrorCodeEnum = "GeneralServiceException"
	HandlerErrorCodeEnumServiceInternalError    HandlerErrorCodeEnum = "ServiceInternalError"
	HandlerErrorCodeEnumServiceTimeout          HandlerErrorCodeEnum = "ServiceTimeout"
	HandlerErrorCodeEnumNetworkFailure          HandlerErrorCodeEnum = "NetworkFailure"
	HandlerErrorCodeEnumInternalFailure         HandlerErrorCodeEnum = "InternalFailure"
)

func (e *HandlerErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NotUpdatable":
		fallthrough
	case "InvalidRequest":
		fallthrough
	case "AccessDenied":
		fallthrough
	case "InvalidCredentials":
		fallthrough
	case "AlreadyExists":
		fallthrough
	case "NotFound":
		fallthrough
	case "ResourceConflict":
		fallthrough
	case "Throttling":
		fallthrough
	case "ServiceLimitExceeded":
		fallthrough
	case "NotStabilized":
		fallthrough
	case "GeneralServiceException":
		fallthrough
	case "ServiceInternalError":
		fallthrough
	case "ServiceTimeout":
		fallthrough
	case "NetworkFailure":
		fallthrough
	case "InternalFailure":
		*e = HandlerErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for HandlerErrorCodeEnum: %s", s)
	}
}
