// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateDeploymentRequestBodyDeploymentTypeEnum - The type of deployment. When used for ”CreateDeployment”, only ”NewDeployment” and ”Redeployment” are valid.
type CreateDeploymentRequestBodyDeploymentTypeEnum string

const (
	CreateDeploymentRequestBodyDeploymentTypeEnumNewDeployment        CreateDeploymentRequestBodyDeploymentTypeEnum = "NewDeployment"
	CreateDeploymentRequestBodyDeploymentTypeEnumRedeployment         CreateDeploymentRequestBodyDeploymentTypeEnum = "Redeployment"
	CreateDeploymentRequestBodyDeploymentTypeEnumResetDeployment      CreateDeploymentRequestBodyDeploymentTypeEnum = "ResetDeployment"
	CreateDeploymentRequestBodyDeploymentTypeEnumForceResetDeployment CreateDeploymentRequestBodyDeploymentTypeEnum = "ForceResetDeployment"
)

func (e *CreateDeploymentRequestBodyDeploymentTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NewDeployment":
		fallthrough
	case "Redeployment":
		fallthrough
	case "ResetDeployment":
		fallthrough
	case "ForceResetDeployment":
		*e = CreateDeploymentRequestBodyDeploymentTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentRequestBodyDeploymentTypeEnum: %s", s)
	}
}

type CreateDeploymentRequestBody struct {
	// The ID of the deployment if you wish to redeploy a previous deployment.
	DeploymentID *string `json:"DeploymentId,omitempty"`
	// The type of deployment. When used for ''CreateDeployment'', only ''NewDeployment'' and ''Redeployment'' are valid.
	DeploymentType CreateDeploymentRequestBodyDeploymentTypeEnum `json:"DeploymentType"`
	// The ID of the group version to be deployed.
	GroupVersionID *string `json:"GroupVersionId,omitempty"`
}

type CreateDeploymentRequest struct {
	// The ID of the Greengrass group.
	GroupID           string                      `pathParam:"style=simple,explode=false,name=GroupId"`
	RequestBody       CreateDeploymentRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// A client token used to correlate requests and responses.
	XAmznClientToken *string `header:"style=simple,explode=false,name=X-Amzn-Client-Token"`
}

type CreateDeploymentResponse struct {
	// BadRequestException
	BadRequestException interface{}
	ContentType         string
	// Success
	CreateDeploymentResponse *shared.CreateDeploymentResponse
	StatusCode               int
	RawResponse              *http.Response
}
