// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ExportContextBakExportOptions - Options for exporting BAK files (SQL Server-only)
type ExportContextBakExportOptions struct {
	// Option for specifying how many stripes to use for the export. If blank, and the value of the striped field is true, the number of stripes is automatically chosen.
	StripeCount *int `json:"stripeCount,omitempty"`
	// Whether or not the export should be striped.
	Striped *bool `json:"striped,omitempty"`
}

// ExportContextCsvExportOptions - Options for exporting data as CSV. `MySQL` and `PostgreSQL` instances only.
type ExportContextCsvExportOptions struct {
	// Specifies the character that should appear before a data character that needs to be escaped.
	EscapeCharacter *string `json:"escapeCharacter,omitempty"`
	// Specifies the character that separates columns within each row (line) of the file.
	FieldsTerminatedBy *string `json:"fieldsTerminatedBy,omitempty"`
	// This is used to separate lines. If a line does not contain all fields, the rest of the columns are set to their default values.
	LinesTerminatedBy *string `json:"linesTerminatedBy,omitempty"`
	// Specifies the quoting character to be used when a data value is quoted.
	QuoteCharacter *string `json:"quoteCharacter,omitempty"`
	// The select query used to extract the data.
	SelectQuery *string `json:"selectQuery,omitempty"`
}

// ExportContextFileTypeEnum - The file type for the specified uri.
type ExportContextFileTypeEnum string

const (
	ExportContextFileTypeEnumSQLFileTypeUnspecified ExportContextFileTypeEnum = "SQL_FILE_TYPE_UNSPECIFIED"
	ExportContextFileTypeEnumSQL                    ExportContextFileTypeEnum = "SQL"
	ExportContextFileTypeEnumCsv                    ExportContextFileTypeEnum = "CSV"
	ExportContextFileTypeEnumBak                    ExportContextFileTypeEnum = "BAK"
)

func (e *ExportContextFileTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SQL_FILE_TYPE_UNSPECIFIED":
		fallthrough
	case "SQL":
		fallthrough
	case "CSV":
		fallthrough
	case "BAK":
		*e = ExportContextFileTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ExportContextFileTypeEnum: %s", s)
	}
}

// ExportContextSQLExportOptionsMysqlExportOptions - Options for exporting from MySQL.
type ExportContextSQLExportOptionsMysqlExportOptions struct {
	// Option to include SQL statement required to set up replication. If set to `1`, the dump file includes a CHANGE MASTER TO statement with the binary log coordinates, and --set-gtid-purged is set to ON. If set to `2`, the CHANGE MASTER TO statement is written as a SQL comment and has no effect. If set to any value other than `1`, --set-gtid-purged is set to OFF.
	MasterData *int `json:"masterData,omitempty"`
}

// ExportContextSQLExportOptions - Options for exporting data as SQL statements.
type ExportContextSQLExportOptions struct {
	// Options for exporting from MySQL.
	MysqlExportOptions *ExportContextSQLExportOptionsMysqlExportOptions `json:"mysqlExportOptions,omitempty"`
	// Export only schemas.
	SchemaOnly *bool `json:"schemaOnly,omitempty"`
	// Tables to export, or that were exported, from the specified database. If you specify tables, specify one and only one database. For PostgreSQL instances, you can specify only one table.
	Tables []string `json:"tables,omitempty"`
}

// ExportContext - Database instance export context.
type ExportContext struct {
	// Options for exporting BAK files (SQL Server-only)
	BakExportOptions *ExportContextBakExportOptions `json:"bakExportOptions,omitempty"`
	// Options for exporting data as CSV. `MySQL` and `PostgreSQL` instances only.
	CsvExportOptions *ExportContextCsvExportOptions `json:"csvExportOptions,omitempty"`
	// Databases to be exported. `MySQL instances:` If `fileType` is `SQL` and no database is specified, all databases are exported, except for the `mysql` system database. If `fileType` is `CSV`, you can specify one database, either by using this property or by using the `csvExportOptions.selectQuery` property, which takes precedence over this property. `PostgreSQL instances:` You must specify one database to be exported. If `fileType` is `CSV`, this database must match the one specified in the `csvExportOptions.selectQuery` property. `SQL Server instances:` You must specify one database to be exported, and the `fileType` must be `BAK`.
	Databases []string `json:"databases,omitempty"`
	// The file type for the specified uri.
	FileType *ExportContextFileTypeEnum `json:"fileType,omitempty"`
	// This is always `sql#exportContext`.
	Kind *string `json:"kind,omitempty"`
	// Option for export offload.
	Offload *bool `json:"offload,omitempty"`
	// Options for exporting data as SQL statements.
	SQLExportOptions *ExportContextSQLExportOptions `json:"sqlExportOptions,omitempty"`
	// The path to the file in Google Cloud Storage where the export will be stored. The URI is in the form `gs://bucketName/fileName`. If the file already exists, the request succeeds, but the operation fails. If `fileType` is `SQL` and the filename ends with .gz, the contents are compressed.
	URI *string `json:"uri,omitempty"`
}
