// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type InteractionTypeEnum string

const (
	InteractionTypeEnumUnspecified InteractionTypeEnum = "UNSPECIFIED"
	InteractionTypeEnumView        InteractionTypeEnum = "VIEW"
	InteractionTypeEnumEdit        InteractionTypeEnum = "EDIT"
)

func (e InteractionTypeEnum) ToPointer() *InteractionTypeEnum {
	return &e
}

func (e *InteractionTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNSPECIFIED":
		fallthrough
	case "VIEW":
		fallthrough
	case "EDIT":
		*e = InteractionTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InteractionTypeEnum: %v", v)
	}
}

// Interaction - Represents an interaction between a user and an item.
type Interaction struct {
	// The time when the user acted on the item. If multiple actions of the same type exist for a single user, only the most recent action is recorded.
	InteractionTime *string `json:"interactionTime,omitempty"`
	// Reference to a user, group, or domain.
	Principal *Principal           `json:"principal,omitempty"`
	Type      *InteractionTypeEnum `json:"type,omitempty"`
}
