/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * AccountDetails - The ASPSP shall give at least one of the account reference identifiers:
 *   - iban
 *   - bban
 *   - pan
 *   - maskedPan
 *   - msisdn
 * If the account is a multicurrency account currency code in "currency" is set to "XXX".
 * 
 */
public class AccountDetails {
    /**
     * Links to the account, which can be directly used for retrieving account information from this dedicated account.
     * 
     * Links to "balances" and/or "transactions"
     * 
     * These links are only supported, when the corresponding consent has been already granted.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    public java.util.Map<String, HrefType> links;
    public AccountDetails withLinks(java.util.Map<String, HrefType> links) {
        this.links = links;
        return this;
    }
    
    /**
     * A list of balances regarding this account, e.g. the current balance, the last booked balance.
     * The list might be restricted to the current balance.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("balances")
    public Balance[] balances;
    public AccountDetails withBalances(Balance[] balances) {
        this.balances = balances;
        return this;
    }
    
    /**
     * Basic Bank Account Number (BBAN) Identifier.
     * 
     * This data element can be used in the body of the consent request.
     *   Message for retrieving account access consent from this account. This
     *   data elements is used for payment accounts which have no IBAN.
     *   ISO20022: Basic Bank Account Number (BBAN). 
     *   
     *   Identifier used nationally by financial institutions, i.e., in individual countries, 
     *   generally as part of a National Account Numbering Scheme(s), 
     *   which uniquely identifies the account of a customer.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bban")
    public String bban;
    public AccountDetails withBban(String bban) {
        this.bban = bban;
        return this;
    }
    
    /**
     * BICFI
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bic")
    public String bic;
    public AccountDetails withBic(String bic) {
        this.bic = bic;
        return this;
    }
    
    /**
     * ExternalCashAccountType1Code from ISO 20022.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cashAccountType")
    public String cashAccountType;
    public AccountDetails withCashAccountType(String cashAccountType) {
        this.cashAccountType = cashAccountType;
        return this;
    }
    
    /**
     * ISO 4217 Alpha 3 currency code.
     * 
     */
    @JsonProperty("currency")
    public String currency;
    public AccountDetails withCurrency(String currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * Specifications that might be provided by the ASPSP:
     *   - characteristics of the account
     *   - characteristics of the relevant card
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("details")
    public String details;
    public AccountDetails withDetails(String details) {
        this.details = details;
        return this;
    }
    
    /**
     * Name of the account as defined by the PSU within online channels.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;
    public AccountDetails withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * IBAN of an account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("iban")
    public String iban;
    public AccountDetails withIban(String iban) {
        this.iban = iban;
        return this;
    }
    
    /**
     * Case of a set of pending card transactions, the APSP will provide the relevant cash account the card is set up on.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("linkedAccounts")
    public String linkedAccounts;
    public AccountDetails withLinkedAccounts(String linkedAccounts) {
        this.linkedAccounts = linkedAccounts;
        return this;
    }
    
    /**
     * Mobile phone number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("msisdn")
    public String msisdn;
    public AccountDetails withMsisdn(String msisdn) {
        this.msisdn = msisdn;
        return this;
    }
    
    /**
     * Name of the account, as assigned by the ASPSP, in agreement with the account owner in order to provide an additional means of identification of the account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public AccountDetails withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Name of the legal account owner. 
     * If there is more than one owner, then e.g. two names might be noted here.
     * 
     * For a corporate account, the corporate name is used for this attribute.
     * Even if supported by the ASPSP, the provision of this field might depend on the fact whether an explicit consent to this specific additional account information has been given by the PSU.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ownerName")
    public String ownerName;
    public AccountDetails withOwnerName(String ownerName) {
        this.ownerName = ownerName;
        return this;
    }
    
    /**
     * Product name of the bank for this account, proprietary definition.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("product")
    public String product;
    public AccountDetails withProduct(String product) {
        this.product = product;
        return this;
    }
    
    /**
     * This shall be filled, if addressable resource are created by the ASPSP on the /accounts or /card-accounts endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resourceId")
    public String resourceId;
    public AccountDetails withResourceId(String resourceId) {
        this.resourceId = resourceId;
        return this;
    }
    
    /**
     * Account status. The value is one of the following:
     *   - "enabled": account is available
     *   - "deleted": account is terminated
     *   - "blocked": account is blocked e.g. for legal reasons
     * If this field is not used, than the account is available in the sense of this specification.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public AccountStatusEnum status;
    public AccountDetails withStatus(AccountStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * Specifies the usage of the account:
     *   * PRIV: private personal account
     *   * ORGA: professional account
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("usage")
    public AccountDetailsUsageEnum usage;
    public AccountDetails withUsage(AccountDetailsUsageEnum usage) {
        this.usage = usage;
        return this;
    }
    
}
