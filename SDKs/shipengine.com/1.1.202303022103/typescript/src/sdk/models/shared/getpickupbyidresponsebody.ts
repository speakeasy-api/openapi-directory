/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ContactDetails } from "./contactdetails";
import { ErrorT } from "./error";
import { PickupWindows } from "./pickupwindows";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Indicates whether an address is residential.
 */
export enum GetPickupByIdResponseBodyPartialAddressAddressResidentialIndicatorEnum {
  Unknown = "unknown",
  Yes = "yes",
  No = "no",
}

/**
 * A complete or partial mailing address.
 */
export class GetPickupByIdResponseBodyPartialAddress extends SpeakeasyBase {
  /**
   * The first line of the street address.  For some addresses, this may be the only line.  Other addresses may require 2 or 3 lines.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address_line1" })
  addressLine1: string;

  /**
   * The second line of the street address.  For some addresses, this line may not be needed.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address_line2" })
  addressLine2?: string;

  /**
   * The third line of the street address.  For some addresses, this line may not be needed.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address_line3" })
  addressLine3?: string;

  /**
   * Indicates whether this is a residential address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address_residential_indicator" })
  addressResidentialIndicator: GetPickupByIdResponseBodyPartialAddressAddressResidentialIndicatorEnum;

  /**
   * The name of the city or locality
   */
  @SpeakeasyMetadata()
  @Expose({ name: "city_locality" })
  cityLocality: string;

  /**
   * If this is a business address, then the company name should be specified here.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "company_name" })
  companyName?: string;

  /**
   * The two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1)
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "country_code" })
  countryCode: string;

  /**
   * Email for the address owner.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  /**
   * The name of a contact person at this address.  This field may be set instead of - or in addition to - the `company_name` field.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * The phone number of a contact person at this address.  The format of this phone number varies depending on the country.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "phone" })
  phone: string;

  @SpeakeasyMetadata()
  @Expose({ name: "postal_code" })
  postalCode: string;

  /**
   * The state or province.  For some countries (including the U.S.) only abbreviations are allowed.  Other countries allow the full name or abbreviation.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state_province" })
  stateProvince: string;
}

/**
 * The information necessary to schedule a package pickup
 *
 * @remarks
 *
 */
export class GetPickupByIdResponseBodyOutput extends SpeakeasyBase {
  /**
   * The date and time that the pickup was cancelled in ShipEngine.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cancelled_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  cancelledAt?: Date;

  /**
   * The carrier_id associated with the pickup
   */
  @SpeakeasyMetadata()
  @Expose({ name: "carrier_id" })
  carrierId: string;

  /**
   * The carrier confirmation number for the scheduled pickup.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "confirmation_number" })
  confirmationNumber: string;

  @SpeakeasyMetadata()
  @Expose({ name: "contact_details" })
  @Type(() => ContactDetails)
  contactDetails: ContactDetails;

  /**
   * The date and time that the pickup was created in ShipEngine.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  /**
   * The errors associated with the failed API call
   */
  @SpeakeasyMetadata({ elemType: ErrorT })
  @Expose({ name: "errors" })
  @Type(() => ErrorT)
  errors: ErrorT[];

  /**
   * Label IDs that will be included in the pickup request
   */
  @SpeakeasyMetadata()
  @Expose({ name: "label_ids" })
  labelIds: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "pickup_address" })
  @Type(() => GetPickupByIdResponseBodyPartialAddress)
  pickupAddress: GetPickupByIdResponseBodyPartialAddress;

  @SpeakeasyMetadata()
  @Expose({ name: "pickup_id" })
  pickupId: string;

  /**
   * Used by some carriers to give special instructions for a package pickup
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pickup_notes" })
  pickupNotes?: string;

  /**
   * An array of available pickup windows. Carriers can return multiple times that they will pickup packages.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({ elemType: PickupWindows })
  @Expose({ name: "pickup_windows" })
  @Type(() => PickupWindows)
  pickupWindows?: PickupWindows[];

  /**
   * A UUID that uniquely identifies the request id.
   *
   * @remarks
   * This can be given to the support team to help debug non-trivial issues that may occur
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "request_id" })
  requestId: string;

  /**
   * The warehouse_id associated with the pickup
   */
  @SpeakeasyMetadata()
  @Expose({ name: "warehouse_id" })
  warehouseId: string;
}
