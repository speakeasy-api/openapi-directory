"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import comparisonoperator_enum as shared_comparisonoperator_enum
from ..shared import machinelearningdetectionconfig as shared_machinelearningdetectionconfig
from ..shared import metricvalue as shared_metricvalue
from ..shared import statisticalthreshold as shared_statisticalthreshold
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BehaviorCriteria:
    r"""The criteria by which the behavior is determined to be normal."""
    
    comparison_operator: Optional[shared_comparisonoperator_enum.ComparisonOperatorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comparisonOperator'), 'exclude': lambda f: f is None }})  
    consecutive_datapoints_to_alarm: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('consecutiveDatapointsToAlarm'), 'exclude': lambda f: f is None }})  
    consecutive_datapoints_to_clear: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('consecutiveDatapointsToClear'), 'exclude': lambda f: f is None }})  
    duration_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('durationSeconds'), 'exclude': lambda f: f is None }})  
    ml_detection_config: Optional[shared_machinelearningdetectionconfig.MachineLearningDetectionConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mlDetectionConfig'), 'exclude': lambda f: f is None }})  
    statistical_threshold: Optional[shared_statisticalthreshold.StatisticalThreshold] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statisticalThreshold'), 'exclude': lambda f: f is None }})  
    value: Optional[shared_metricvalue.MetricValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})  
    