// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type MrcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type MrcerRequestBodyCertificateParameters struct {
	// Date of birth in DD-MM-YYYY format
	Dob string `json:"DOB"`
	// Full name
	FullName string `json:"FullName"`
	// Roll No.
	Rroll string `json:"RROLL"`
	// Year
	Year string `json:"year"`
}

// MrcerRequestBodyFormatEnum - The format of the certificate in response.
type MrcerRequestBodyFormatEnum string

const (
	MrcerRequestBodyFormatEnumPdf MrcerRequestBodyFormatEnum = "pdf"
)

func (e *MrcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = MrcerRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MrcerRequestBodyFormatEnum: %s", s)
	}
}

// MrcerRequestBody - Request format
type MrcerRequestBody struct {
	CertificateParameters *MrcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format MrcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Mrcer504ApplicationJSONErrorEnum string

const (
	Mrcer504ApplicationJSONErrorEnumGatewayTimeout Mrcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Mrcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Mrcer504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mrcer504ApplicationJSONErrorEnum: %s", s)
	}
}

type Mrcer504ApplicationJSONErrorDescriptionEnum string

const (
	Mrcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Mrcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Mrcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Mrcer504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mrcer504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Mrcer504ApplicationJSON - Gateway timeout
type Mrcer504ApplicationJSON struct {
	Error            *Mrcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mrcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Mrcer503ApplicationJSONErrorEnum string

const (
	Mrcer503ApplicationJSONErrorEnumServiceUnavailable Mrcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Mrcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Mrcer503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mrcer503ApplicationJSONErrorEnum: %s", s)
	}
}

type Mrcer503ApplicationJSONErrorDescriptionEnum string

const (
	Mrcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Mrcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Mrcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Mrcer503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mrcer503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Mrcer503ApplicationJSON - Service unavailable
type Mrcer503ApplicationJSON struct {
	Error            *Mrcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mrcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Mrcer502ApplicationJSONErrorEnum string

const (
	Mrcer502ApplicationJSONErrorEnumBadGatewy Mrcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Mrcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Mrcer502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mrcer502ApplicationJSONErrorEnum: %s", s)
	}
}

type Mrcer502ApplicationJSONErrorDescriptionEnum string

const (
	Mrcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Mrcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Mrcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Mrcer502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mrcer502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Mrcer502ApplicationJSON - Bad gateway
type Mrcer502ApplicationJSON struct {
	Error            *Mrcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mrcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Mrcer500ApplicationJSONErrorEnum string

const (
	Mrcer500ApplicationJSONErrorEnumInternalServerError Mrcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Mrcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Mrcer500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mrcer500ApplicationJSONErrorEnum: %s", s)
	}
}

type Mrcer500ApplicationJSONErrorDescriptionEnum string

const (
	Mrcer500ApplicationJSONErrorDescriptionEnumInternalServerError Mrcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Mrcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Mrcer500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mrcer500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Mrcer500ApplicationJSON - Internal server error
type Mrcer500ApplicationJSON struct {
	Error            *Mrcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mrcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Mrcer404ApplicationJSONErrorEnum string

const (
	Mrcer404ApplicationJSONErrorEnumRecordNotFound Mrcer404ApplicationJSONErrorEnum = "record_not_found"
	Mrcer404ApplicationJSONErrorEnumURLNotFound    Mrcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Mrcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Mrcer404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mrcer404ApplicationJSONErrorEnum: %s", s)
	}
}

type Mrcer404ApplicationJSONErrorDescriptionEnum string

const (
	Mrcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Mrcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Mrcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Mrcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Mrcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Mrcer404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mrcer404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Mrcer404ApplicationJSON - No record found
type Mrcer404ApplicationJSON struct {
	Error            *Mrcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mrcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Mrcer401ApplicationJSONErrorEnum string

const (
	Mrcer401ApplicationJSONErrorEnumInvalidAuthentication Mrcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Mrcer401ApplicationJSONErrorEnumInvalidAuthorization  Mrcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Mrcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Mrcer401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mrcer401ApplicationJSONErrorEnum: %s", s)
	}
}

type Mrcer401ApplicationJSONErrorDescriptionEnum string

const (
	Mrcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Mrcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Mrcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Mrcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Mrcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Mrcer401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mrcer401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Mrcer401ApplicationJSON - Unauthorized access
type Mrcer401ApplicationJSON struct {
	Error            *Mrcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mrcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Mrcer400ApplicationJSONErrorEnum string

const (
	Mrcer400ApplicationJSONErrorEnumMissingParameter Mrcer400ApplicationJSONErrorEnum = "missing_parameter"
	Mrcer400ApplicationJSONErrorEnumInvalidParameter Mrcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Mrcer400ApplicationJSONErrorEnumInvalidFormat    Mrcer400ApplicationJSONErrorEnum = "invalid_format"
	Mrcer400ApplicationJSONErrorEnumInvalidTxnid     Mrcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Mrcer400ApplicationJSONErrorEnumInvalidConsentid Mrcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Mrcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Mrcer400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mrcer400ApplicationJSONErrorEnum: %s", s)
	}
}

type Mrcer400ApplicationJSONErrorDescriptionEnum string

const (
	Mrcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Mrcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Mrcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Mrcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Mrcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Mrcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Mrcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Mrcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Mrcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Mrcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Mrcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Mrcer400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mrcer400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Mrcer400ApplicationJSON - Bad request
type Mrcer400ApplicationJSON struct {
	Error            *Mrcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mrcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type MrcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Mrcer400ApplicationJSONObject *Mrcer400ApplicationJSON
	// Unauthorized access
	Mrcer401ApplicationJSONObject *Mrcer401ApplicationJSON
	// No record found
	Mrcer404ApplicationJSONObject *Mrcer404ApplicationJSON
	// Internal server error
	Mrcer500ApplicationJSONObject *Mrcer500ApplicationJSON
	// Bad gateway
	Mrcer502ApplicationJSONObject *Mrcer502ApplicationJSON
	// Service unavailable
	Mrcer503ApplicationJSONObject *Mrcer503ApplicationJSON
	// Gateway timeout
	Mrcer504ApplicationJSONObject *Mrcer504ApplicationJSON
}
