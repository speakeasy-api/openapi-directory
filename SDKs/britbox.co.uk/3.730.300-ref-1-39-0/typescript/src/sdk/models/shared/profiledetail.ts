/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { ClassificationSummary } from "./classificationsummary";
import { Watched } from "./watched";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Details of the active profile.
 */
export class ProfileDetail extends SpeakeasyBase {
  /**
   * A map of bookmarked itemIds => created date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bookmarked" })
  bookmarked: Record<string, Date>;

  /**
   * Hex color value assigned to the profile.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "color" })
  color?: string;

  /**
   * Gets the Hero row clip auto playback enabled
   */
  @SpeakeasyMetadata()
  @Expose({ name: "heroAutoplay" })
  heroAutoplay?: boolean;

  /**
   * Gets the Hero row clip auto playback audio enabled
   */
  @SpeakeasyMetadata()
  @Expose({ name: "heroWithAudio" })
  heroWithAudio?: boolean;

  /**
   * The id of the profile.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  /**
   * Whether the profile is active or not.
   *
   * @remarks
   *
   * **DEPRECATED** - Always true. Inactive profiles are no longer returned.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isActive" })
  isActive: boolean;

  /**
   * The code of the preferred language for the profile.
   *
   * @remarks
   * Must be a valid ISO language code e.g. "en-US" and must match the code of
   * one of the languages specified in the app config.
   * See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "languageCode" })
  languageCode?: string;

  /**
   * Whether the profile has opted in or out of marketing material.
   *
   * @remarks
   *
   * **DEPRECATED** - Marketing material is no longer tied to profiles, only account. See `Account.marketingEnabled`.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "marketingEnabled" })
  marketingEnabled: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "maxRatingContentFilter" })
  @Type(() => ClassificationSummary)
  maxRatingContentFilter?: ClassificationSummary;

  @SpeakeasyMetadata()
  @Expose({ name: "minRatingPlaybackGuard" })
  @Type(() => ClassificationSummary)
  minRatingPlaybackGuard?: ClassificationSummary;

  /**
   * The unique name of the profile.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Whether a pin is required to enter the profile.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pinEnabled" })
  pinEnabled: boolean;

  /**
   * Whether the profile can make purchases with the account payment options.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "purchaseEnabled" })
  purchaseEnabled: boolean;

  /**
   * A map of rated itemIds => rating out of 10
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rated" })
  rated: Record<string, number>;

  /**
   * The segments a profile has been placed under
   */
  @SpeakeasyMetadata()
  @Expose({ name: "segments" })
  segments: string[];

  /**
   * A map of watched itemIds => last watched position
   */
  @SpeakeasyMetadata({ elemType: Watched })
  @Expose({ name: "watched" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, Watched> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], Watched);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  watched: Record<string, Watched>;
}
