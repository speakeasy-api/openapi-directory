"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Score = exports.ScoreSeverityEnum = exports.ScoreResultEnum = exports.ScoreDataSetEnum = void 0;
var utils_1 = require("../../../internal/utils");
var scoredetail_1 = require("./scoredetail");
var class_transformer_1 = require("class-transformer");
/**
 * Dataset summed up to create the score
 */
var ScoreDataSetEnum;
(function (ScoreDataSetEnum) {
    ScoreDataSetEnum["AffiliationsAndInsurances"] = "affiliations_and_insurances";
    ScoreDataSetEnum["AlertInMedia"] = "alert_in_media";
    ScoreDataSetEnum["Behavior"] = "behavior";
    ScoreDataSetEnum["BusinessBackground"] = "business_background";
    ScoreDataSetEnum["CriminalRecord"] = "criminal_record";
    ScoreDataSetEnum["DrivingLicenses"] = "driving_licenses";
    ScoreDataSetEnum["InternationalBackground"] = "international_background";
    ScoreDataSetEnum["LegalBackground"] = "legal_background";
    ScoreDataSetEnum["PersonalIdentity"] = "personal_identity";
    ScoreDataSetEnum["ProfessionalBackground"] = "professional_background";
    ScoreDataSetEnum["TrafficFines"] = "traffic_fines";
    ScoreDataSetEnum["VehicleInformation"] = "vehicle_information";
    ScoreDataSetEnum["VehiclePermits"] = "vehicle_permits";
    ScoreDataSetEnum["TaxesAndFinances"] = "taxes_and_finances";
})(ScoreDataSetEnum = exports.ScoreDataSetEnum || (exports.ScoreDataSetEnum = {}));
/**
 * Overall result of the data collected. If at least one collected data status is found, the result will be found, otherwise, it will be the most frecuent status
 */
var ScoreResultEnum;
(function (ScoreResultEnum) {
    ScoreResultEnum["Pending"] = "pending";
    ScoreResultEnum["Found"] = "found";
    ScoreResultEnum["NotFound"] = "not_found";
    ScoreResultEnum["Error"] = "error";
    ScoreResultEnum["Delayed"] = "delayed";
    ScoreResultEnum["Ignored"] = "ignored";
})(ScoreResultEnum = exports.ScoreResultEnum || (exports.ScoreResultEnum = {}));
/**
 * Risk asociated with each category for the search according to the information found. None is returned when the person, vehicle or company is in the clear. Unknown is returned when the score is none due to a problem with one of the searches
 */
var ScoreSeverityEnum;
(function (ScoreSeverityEnum) {
    ScoreSeverityEnum["Unknown"] = "unknown";
    ScoreSeverityEnum["None"] = "none";
    ScoreSeverityEnum["VeryLow"] = "very_low";
    ScoreSeverityEnum["Low"] = "low";
    ScoreSeverityEnum["Medium"] = "medium";
    ScoreSeverityEnum["High"] = "high";
    ScoreSeverityEnum["VeryHigh"] = "very_high";
})(ScoreSeverityEnum = exports.ScoreSeverityEnum || (exports.ScoreSeverityEnum = {}));
/**
 * Represents dataset scores. A score is a number between 0 and 1 that indicates how trustworthy the person, vehicle, or company is accordig to the result of the background check. Severity represents the risk associated with each dataset according to the background check. Keep in mind that you should use either the score or the severity but not both
 */
var Score = /** @class */ (function (_super) {
    __extends(Score, _super);
    function Score() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "by_id" }),
        (0, class_transformer_1.Type)(function () { return scoredetail_1.ScoreDetail; }),
        __metadata("design:type", scoredetail_1.ScoreDetail)
    ], Score.prototype, "byId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "by_name" }),
        (0, class_transformer_1.Type)(function () { return scoredetail_1.ScoreDetail; }),
        __metadata("design:type", scoredetail_1.ScoreDetail)
    ], Score.prototype, "byName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "data_set" }),
        __metadata("design:type", String)
    ], Score.prototype, "dataSet", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "result" }),
        __metadata("design:type", String)
    ], Score.prototype, "result", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "score" }),
        __metadata("design:type", Number)
    ], Score.prototype, "score", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "severity" }),
        __metadata("design:type", String)
    ], Score.prototype, "severity", void 0);
    return Score;
}(utils_1.SpeakeasyBase));
exports.Score = Score;
