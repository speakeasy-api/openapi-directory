"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import dataconfig as shared_dataconfig
from ..shared import encryptionconfig as shared_encryptionconfig
from ..shared import monitorconfig as shared_monitorconfig
from ..shared import optimizationmetric_enum as shared_optimizationmetric_enum
from ..shared import tag as shared_tag
from ..shared import timealignmentboundary as shared_timealignmentboundary
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAutoPredictorRequest:
    
    predictor_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PredictorName') }})  
    data_config: Optional[shared_dataconfig.DataConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DataConfig'), 'exclude': lambda f: f is None }})  
    encryption_config: Optional[shared_encryptionconfig.EncryptionConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EncryptionConfig'), 'exclude': lambda f: f is None }})
    r"""An Key Management Service (KMS) key and an Identity and Access Management (IAM) role that Amazon Forecast can assume to access the key. You can specify this optional object in the <a>CreateDataset</a> and <a>CreatePredictor</a> requests."""  
    explain_predictor: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExplainPredictor'), 'exclude': lambda f: f is None }})  
    forecast_dimensions: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ForecastDimensions'), 'exclude': lambda f: f is None }})  
    forecast_frequency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ForecastFrequency'), 'exclude': lambda f: f is None }})  
    forecast_horizon: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ForecastHorizon'), 'exclude': lambda f: f is None }})  
    forecast_types: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ForecastTypes'), 'exclude': lambda f: f is None }})  
    monitor_config: Optional[shared_monitorconfig.MonitorConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MonitorConfig'), 'exclude': lambda f: f is None }})  
    optimization_metric: Optional[shared_optimizationmetric_enum.OptimizationMetricEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OptimizationMetric'), 'exclude': lambda f: f is None }})  
    reference_predictor_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReferencePredictorArn'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    time_alignment_boundary: Optional[shared_timealignmentboundary.TimeAlignmentBoundary] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TimeAlignmentBoundary'), 'exclude': lambda f: f is None }})  
    