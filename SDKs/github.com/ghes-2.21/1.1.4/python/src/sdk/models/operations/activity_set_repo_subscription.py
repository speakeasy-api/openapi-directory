"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import repository_subscription as shared_repository_subscription
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ActivitySetRepoSubscriptionRequestBody:
    
    ignored: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ignored'), 'exclude': lambda f: f is None }})
    r"""Determines if all notifications should be blocked from this repository."""  
    subscribed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscribed'), 'exclude': lambda f: f is None }})
    r"""Determines if notifications should be received from this repository."""  
    

@dataclasses.dataclass
class ActivitySetRepoSubscriptionRequest:
    
    owner: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner', 'style': 'simple', 'explode': False }})  
    repo: str = dataclasses.field(metadata={'path_param': { 'field_name': 'repo', 'style': 'simple', 'explode': False }})  
    request_body: Optional[ActivitySetRepoSubscriptionRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class ActivitySetRepoSubscriptionResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    repository_subscription: Optional[shared_repository_subscription.RepositorySubscription] = dataclasses.field(default=None)
    r"""Response"""  
    