/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { AuditMitigationActionsTaskStatusEnum } from "./auditmitigationactionstaskstatusenum";
import { AuditMitigationActionsTaskTarget } from "./auditmitigationactionstasktarget";
import { MitigationAction } from "./mitigationaction";
import { TaskStatisticsForAuditCheck } from "./taskstatisticsforauditcheck";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Success
 */
export class DescribeAuditMitigationActionsTaskResponse extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: MitigationAction })
  @Expose({ name: "actionsDefinition" })
  @Type(() => MitigationAction)
  actionsDefinition?: MitigationAction[];

  @SpeakeasyMetadata()
  @Expose({ name: "auditCheckToActionsMapping" })
  auditCheckToActionsMapping?: Record<string, string[]>;

  @SpeakeasyMetadata()
  @Expose({ name: "endTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "startTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "target" })
  @Type(() => AuditMitigationActionsTaskTarget)
  target?: AuditMitigationActionsTaskTarget;

  @SpeakeasyMetadata({ elemType: TaskStatisticsForAuditCheck })
  @Expose({ name: "taskStatistics" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, TaskStatisticsForAuditCheck> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], TaskStatisticsForAuditCheck);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  taskStatistics?: Record<string, TaskStatisticsForAuditCheck>;

  @SpeakeasyMetadata()
  @Expose({ name: "taskStatus" })
  taskStatus?: AuditMitigationActionsTaskStatusEnum;
}
