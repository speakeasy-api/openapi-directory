// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETAssociateSubnetCidrBlockActionEnum
type GETAssociateSubnetCidrBlockActionEnum string

const (
	GETAssociateSubnetCidrBlockActionEnumAssociateSubnetCidrBlock GETAssociateSubnetCidrBlockActionEnum = "AssociateSubnetCidrBlock"
)

func (e *GETAssociateSubnetCidrBlockActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AssociateSubnetCidrBlock":
		*e = GETAssociateSubnetCidrBlockActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETAssociateSubnetCidrBlockActionEnum: %s", s)
	}
}

// GETAssociateSubnetCidrBlockVersionEnum
type GETAssociateSubnetCidrBlockVersionEnum string

const (
	GETAssociateSubnetCidrBlockVersionEnumTwoThousandAndSixteen1115 GETAssociateSubnetCidrBlockVersionEnum = "2016-11-15"
)

func (e *GETAssociateSubnetCidrBlockVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETAssociateSubnetCidrBlockVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETAssociateSubnetCidrBlockVersionEnum: %s", s)
	}
}

type GETAssociateSubnetCidrBlockRequest struct {
	Action GETAssociateSubnetCidrBlockActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The IPv6 CIDR block for your subnet. The subnet must have a /64 prefix length.
	Ipv6CidrBlock string `queryParam:"style=form,explode=true,name=Ipv6CidrBlock"`
	// The ID of your subnet.
	SubnetID          string                                 `queryParam:"style=form,explode=true,name=SubnetId"`
	Version           GETAssociateSubnetCidrBlockVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                                `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETAssociateSubnetCidrBlockResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
