"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import policyrepresentation as shared_policyrepresentation
from ..shared import resourcerepresentation as shared_resourcerepresentation
from ..shared import scoperepresentation as shared_scoperepresentation
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ResourceServerRepresentationDecisionStrategyEnum(str, Enum):
    AFFIRMATIVE = 'AFFIRMATIVE'
    UNANIMOUS = 'UNANIMOUS'
    CONSENSUS = 'CONSENSUS'

class ResourceServerRepresentationPolicyEnforcementModeEnum(str, Enum):
    ENFORCING = 'ENFORCING'
    PERMISSIVE = 'PERMISSIVE'
    DISABLED = 'DISABLED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ResourceServerRepresentation:
    
    allow_remote_resource_management: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowRemoteResourceManagement'), 'exclude': lambda f: f is None }})  
    client_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientId'), 'exclude': lambda f: f is None }})  
    decision_strategy: Optional[ResourceServerRepresentationDecisionStrategyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('decisionStrategy'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    policies: Optional[list[shared_policyrepresentation.PolicyRepresentation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policies'), 'exclude': lambda f: f is None }})  
    policy_enforcement_mode: Optional[ResourceServerRepresentationPolicyEnforcementModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policyEnforcementMode'), 'exclude': lambda f: f is None }})  
    resources: Optional[list[shared_resourcerepresentation.ResourceRepresentation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resources'), 'exclude': lambda f: f is None }})  
    scopes: Optional[list[shared_scoperepresentation.ScopeRepresentation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scopes'), 'exclude': lambda f: f is None }})  
    