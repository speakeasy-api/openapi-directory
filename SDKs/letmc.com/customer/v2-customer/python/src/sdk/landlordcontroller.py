"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class LandlordController:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def landlord_controller_create_maintenance_preference(self, request: operations.LandlordControllerCreateMaintenancePreferenceRequest) -> operations.LandlordControllerCreateMaintenancePreferenceResponse:
        r"""Post tenancy maintenance preferences:-"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LandlordControllerCreateMaintenancePreferenceRequest, base_url, '/v2/customer/{shortName}/landlord/tenancy/maintenance/preference', request)
        
        query_params = utils.get_query_params(operations.LandlordControllerCreateMaintenancePreferenceRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LandlordControllerCreateMaintenancePreferenceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.landlord_controller_create_maintenance_preference_200_application_json_string = http_res.content
            if utils.match_content_type(content_type, 'application/xml'):
                res.landlord_controller_create_maintenance_preference_200_application_xml_string = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                res.landlord_controller_create_maintenance_preference_200_text_json_string = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.landlord_controller_create_maintenance_preference_200_text_xml_string = http_res.content

        return res

    def landlord_controller_get_accounts(self, request: operations.LandlordControllerGetAccountsRequest) -> operations.LandlordControllerGetAccountsResponse:
        r"""Get the accounting details for the landlord."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LandlordControllerGetAccountsRequest, base_url, '/v2/customer/{shortName}/landlord/accounting', request)
        
        query_params = utils.get_query_params(operations.LandlordControllerGetAccountsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LandlordControllerGetAccountsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LandlordAccountingModel])
                res.landlord_accounting_model = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LandlordAccountingModel])
                res.landlord_accounting_model = out

        return res

    def landlord_controller_get_document(self, request: operations.LandlordControllerGetDocumentRequest) -> operations.LandlordControllerGetDocumentResponse:
        r"""Download a Document"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LandlordControllerGetDocumentRequest, base_url, '/v2/customer/{shortName}/landlord/document', request)
        
        query_params = utils.get_query_params(operations.LandlordControllerGetDocumentRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LandlordControllerGetDocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.object = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.object = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def landlord_controller_get_invetory_report(self, request: operations.LandlordControllerGetInvetoryReportRequest) -> operations.LandlordControllerGetInvetoryReportResponse:
        r"""Generate a Inventory PDF for a tenancy"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LandlordControllerGetInvetoryReportRequest, base_url, '/v2/customer/{shortName}/landlord/inventory', request)
        
        query_params = utils.get_query_params(operations.LandlordControllerGetInvetoryReportRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LandlordControllerGetInvetoryReportResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.object = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.object = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def landlord_controller_get_invoice(self, request: operations.LandlordControllerGetInvoiceRequest) -> operations.LandlordControllerGetInvoiceResponse:
        r"""Get an invoice pdf belonging to the landlord."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LandlordControllerGetInvoiceRequest, base_url, '/v2/customer/{shortName}/landlord/invoice', request)
        
        query_params = utils.get_query_params(operations.LandlordControllerGetInvoiceRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LandlordControllerGetInvoiceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.object = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.object = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def landlord_controller_get_landlord_crm_entries(self, request: operations.LandlordControllerGetLandlordCrmEntriesRequest) -> operations.LandlordControllerGetLandlordCrmEntriesResponse:
        r"""Retrieve landlord's CRM ID"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LandlordControllerGetLandlordCrmEntriesRequest, base_url, '/v2/customer/{shortName}/landlord/landlordcrmentries', request)
        
        query_params = utils.get_query_params(operations.LandlordControllerGetLandlordCrmEntriesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LandlordControllerGetLandlordCrmEntriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.LandlordCrmEntry]])
                res.landlord_crm_entries = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.LandlordCrmEntry]])
                res.landlord_crm_entries = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def landlord_controller_get_maintenance_jobs(self, request: operations.LandlordControllerGetMaintenanceJobsRequest) -> operations.LandlordControllerGetMaintenanceJobsResponse:
        r"""Get Active maintenance jobs."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LandlordControllerGetMaintenanceJobsRequest, base_url, '/v2/customer/{shortName}/landlord/maintenance', request)
        
        query_params = utils.get_query_params(operations.LandlordControllerGetMaintenanceJobsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LandlordControllerGetMaintenanceJobsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LandlordMaintenanceModel])
                res.landlord_maintenance_model = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LandlordMaintenanceModel])
                res.landlord_maintenance_model = out

        return res

    def landlord_controller_get_profit_loss_report(self, request: operations.LandlordControllerGetProfitLossReportRequest) -> operations.LandlordControllerGetProfitLossReportResponse:
        r"""Generate a Profit and Loss Report"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LandlordControllerGetProfitLossReportRequest, base_url, '/v2/customer/{shortName}/landlord/profitloss', request)
        
        query_params = utils.get_query_params(operations.LandlordControllerGetProfitLossReportRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LandlordControllerGetProfitLossReportResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LandlordProfitLossModel])
                res.landlord_profit_loss_model = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LandlordProfitLossModel])
                res.landlord_profit_loss_model = out

        return res

    def landlord_controller_get_rent_arrears(self, request: operations.LandlordControllerGetRentArrearsRequest) -> operations.LandlordControllerGetRentArrearsResponse:
        r"""Rent Arrears"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LandlordControllerGetRentArrearsRequest, base_url, '/v2/customer/{shortName}/landlord/rentarrears', request)
        
        query_params = utils.get_query_params(operations.LandlordControllerGetRentArrearsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LandlordControllerGetRentArrearsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LandlordRentArrearsModel])
                res.landlord_rent_arrears_model = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LandlordRentArrearsModel])
                res.landlord_rent_arrears_model = out

        return res

    def landlord_controller_get_sas_report(self, request: operations.LandlordControllerGetSASReportRequest) -> operations.LandlordControllerGetSASReportResponse:
        r"""Generate a Self Assessment Tax Report"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LandlordControllerGetSASReportRequest, base_url, '/v2/customer/{shortName}/landlord/sas', request)
        
        query_params = utils.get_query_params(operations.LandlordControllerGetSASReportRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LandlordControllerGetSASReportResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.object = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.object = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def landlord_controller_get_settings(self, request: operations.LandlordControllerGetSettingsRequest) -> operations.LandlordControllerGetSettingsResponse:
        r"""Get contact details of all linked landlords."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LandlordControllerGetSettingsRequest, base_url, '/v2/customer/{shortName}/landlord/settings', request)
        
        query_params = utils.get_query_params(operations.LandlordControllerGetSettingsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LandlordControllerGetSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LandlordSettingsModel])
                res.landlord_settings_model = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LandlordSettingsModel])
                res.landlord_settings_model = out

        return res

    def landlord_controller_get_summary_details(self, request: operations.LandlordControllerGetSummaryDetailsRequest) -> operations.LandlordControllerGetSummaryDetailsResponse:
        r"""Get the summary details for the landlord."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LandlordControllerGetSummaryDetailsRequest, base_url, '/v2/customer/{shortName}/landlord/summary', request)
        
        query_params = utils.get_query_params(operations.LandlordControllerGetSummaryDetailsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LandlordControllerGetSummaryDetailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LandlordSummaryModel])
                res.landlord_summary_model = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LandlordSummaryModel])
                res.landlord_summary_model = out

        return res

    def landlord_controller_get_tenancy(self, request: operations.LandlordControllerGetTenancyRequest) -> operations.LandlordControllerGetTenancyResponse:
        r"""Get tenancy details."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LandlordControllerGetTenancyRequest, base_url, '/v2/customer/{shortName}/landlord/tenancy', request)
        
        query_params = utils.get_query_params(operations.LandlordControllerGetTenancyRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LandlordControllerGetTenancyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LandlordTenancyModel])
                res.landlord_tenancy_model = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LandlordTenancyModel])
                res.landlord_tenancy_model = out

        return res

    def landlord_controller_get_tenancy_agreement_report(self, request: operations.LandlordControllerGetTenancyAgreementReportRequest) -> operations.LandlordControllerGetTenancyAgreementReportResponse:
        r"""Generate a Tenancy Agreement Copy (PDF)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LandlordControllerGetTenancyAgreementReportRequest, base_url, '/v2/customer/{shortName}/landlord/tenancyagreement', request)
        
        query_params = utils.get_query_params(operations.LandlordControllerGetTenancyAgreementReportRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LandlordControllerGetTenancyAgreementReportResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.object = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.object = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    