<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Codespace - A codespace.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Codespace
{
    /**
     * A GitHub user.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\SimpleUser $billableOwner
     */
	#[\JMS\Serializer\Annotation\SerializedName('billable_owner')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\SimpleUser')]
    public SimpleUser $billableOwner;
    
	#[\JMS\Serializer\Annotation\SerializedName('created_at')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    public \DateTime $createdAt;
    
    /**
     * Path to devcontainer.json from repo root used to create Codespace.
     * 
     * @var ?string $devcontainerPath
     */
	#[\JMS\Serializer\Annotation\SerializedName('devcontainer_path')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $devcontainerPath = null;
    
    /**
     * Display name for this codespace.
     * 
     * @var ?string $displayName
     */
	#[\JMS\Serializer\Annotation\SerializedName('display_name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $displayName = null;
    
    /**
     * UUID identifying this codespace's environment.
     * 
     * @var string $environmentId
     */
	#[\JMS\Serializer\Annotation\SerializedName('environment_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $environmentId;
    
    /**
     * Details about the codespace's git repository.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\CodespaceGitStatus $gitStatus
     */
	#[\JMS\Serializer\Annotation\SerializedName('git_status')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CodespaceGitStatus')]
    public CodespaceGitStatus $gitStatus;
    
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $id;
    
    /**
     * The number of minutes of inactivity after which this codespace will be automatically stopped.
     * 
     * @var int $idleTimeoutMinutes
     */
	#[\JMS\Serializer\Annotation\SerializedName('idle_timeout_minutes')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $idleTimeoutMinutes;
    
    /**
     * Text to show user when codespace idle timeout minutes has been overriden by an organization policy
     * 
     * @var ?string $idleTimeoutNotice
     */
	#[\JMS\Serializer\Annotation\SerializedName('idle_timeout_notice')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $idleTimeoutNotice = null;
    
    /**
     * The text to display to a user when a codespace has been stopped for a potentially actionable reason.
     * 
     * @var ?string $lastKnownStopNotice
     */
	#[\JMS\Serializer\Annotation\SerializedName('last_known_stop_notice')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $lastKnownStopNotice = null;
    
    /**
     * Last known time this codespace was started.
     * 
     * @var \DateTime $lastUsedAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('last_used_at')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    public \DateTime $lastUsedAt;
    
    /**
     * The Azure region where this codespace is located.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\CodespaceLocationEnum $location
     */
	#[\JMS\Serializer\Annotation\SerializedName('location')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\CodespaceLocationEnum>')]
    public CodespaceLocationEnum $location;
    
    /**
     * A description of the machine powering a codespace.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\NullableCodespaceMachine $machine
     */
	#[\JMS\Serializer\Annotation\SerializedName('machine')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\NullableCodespaceMachine')]
    public NullableCodespaceMachine $machine;
    
    /**
     * API URL to access available alternate machine types for this codespace.
     * 
     * @var string $machinesUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('machines_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $machinesUrl;
    
    /**
     * Automatically generated name of this codespace.
     * 
     * @var string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $name;
    
    /**
     * A GitHub user.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\SimpleUser $owner
     */
	#[\JMS\Serializer\Annotation\SerializedName('owner')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\SimpleUser')]
    public SimpleUser $owner;
    
    /**
     * Whether or not a codespace has a pending async operation. This would mean that the codespace is temporarily unavailable. The only thing that you can do with a codespace in this state is delete it.
     * 
     * @var ?bool $pendingOperation
     */
	#[\JMS\Serializer\Annotation\SerializedName('pending_operation')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $pendingOperation = null;
    
    /**
     * Text to show user when codespace is disabled by a pending operation
     * 
     * @var ?string $pendingOperationDisabledReason
     */
	#[\JMS\Serializer\Annotation\SerializedName('pending_operation_disabled_reason')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $pendingOperationDisabledReason = null;
    
    /**
     * Whether the codespace was created from a prebuild.
     * 
     * @var bool $prebuild
     */
	#[\JMS\Serializer\Annotation\SerializedName('prebuild')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $prebuild;
    
    /**
     * API URL to publish this codespace to a new repository.
     * 
     * @var ?string $publishUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('publish_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $publishUrl = null;
    
    /**
     * API URL for the Pull Request associated with this codespace, if any.
     * 
     * @var string $pullsUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('pulls_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $pullsUrl;
    
    /**
     * $recentFolders
     * 
     * @var array<string> $recentFolders
     */
	#[\JMS\Serializer\Annotation\SerializedName('recent_folders')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    public array $recentFolders;
    
    /**
     * Minimal Repository
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\MinimalRepository $repository
     */
	#[\JMS\Serializer\Annotation\SerializedName('repository')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\MinimalRepository')]
    public MinimalRepository $repository;
    
    /**
     * When a codespace will be auto-deleted based on the "retention_period_minutes" and "last_used_at"
     * 
     * @var ?\DateTime $retentionExpiresAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('retention_expires_at')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $retentionExpiresAt = null;
    
    /**
     * Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
     * 
     * @var ?int $retentionPeriodMinutes
     */
	#[\JMS\Serializer\Annotation\SerializedName('retention_period_minutes')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $retentionPeriodMinutes = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('runtime_constraints')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CodespaceRuntimeConstraints')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CodespaceRuntimeConstraints $runtimeConstraints = null;
    
    /**
     * API URL to start this codespace.
     * 
     * @var string $startUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('start_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $startUrl;
    
    /**
     * State of this codespace.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\CodespaceStateEnum $state
     */
	#[\JMS\Serializer\Annotation\SerializedName('state')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\CodespaceStateEnum>')]
    public CodespaceStateEnum $state;
    
    /**
     * API URL to stop this codespace.
     * 
     * @var string $stopUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('stop_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $stopUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('updated_at')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    public \DateTime $updatedAt;
    
    /**
     * API URL for this codespace.
     * 
     * @var string $url
     */
	#[\JMS\Serializer\Annotation\SerializedName('url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $url;
    
    /**
     * URL to access this codespace on the web.
     * 
     * @var string $webUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('web_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $webUrl;
    
	public function __construct()
	{
		$this->billableOwner = new \OpenAPI\OpenAPI\Models\Shared\SimpleUser();
		$this->createdAt = new \DateTime();
		$this->devcontainerPath = null;
		$this->displayName = null;
		$this->environmentId = "";
		$this->gitStatus = new \OpenAPI\OpenAPI\Models\Shared\CodespaceGitStatus();
		$this->id = 0;
		$this->idleTimeoutMinutes = 0;
		$this->idleTimeoutNotice = null;
		$this->lastKnownStopNotice = null;
		$this->lastUsedAt = new \DateTime();
		$this->location = \OpenAPI\OpenAPI\Models\Shared\CodespaceLocationEnum::EAST_US;
		$this->machine = new \OpenAPI\OpenAPI\Models\Shared\NullableCodespaceMachine();
		$this->machinesUrl = "";
		$this->name = "";
		$this->owner = new \OpenAPI\OpenAPI\Models\Shared\SimpleUser();
		$this->pendingOperation = null;
		$this->pendingOperationDisabledReason = null;
		$this->prebuild = false;
		$this->publishUrl = null;
		$this->pullsUrl = "";
		$this->recentFolders = [];
		$this->repository = new \OpenAPI\OpenAPI\Models\Shared\MinimalRepository();
		$this->retentionExpiresAt = null;
		$this->retentionPeriodMinutes = null;
		$this->runtimeConstraints = null;
		$this->startUrl = "";
		$this->state = \OpenAPI\OpenAPI\Models\Shared\CodespaceStateEnum::UNKNOWN;
		$this->stopUrl = "";
		$this->updatedAt = new \DateTime();
		$this->url = "";
		$this->webUrl = "";
	}
}
