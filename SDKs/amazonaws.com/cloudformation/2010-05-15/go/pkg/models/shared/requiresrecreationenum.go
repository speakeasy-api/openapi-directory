// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type RequiresRecreationEnum string

const (
	RequiresRecreationEnumNever         RequiresRecreationEnum = "Never"
	RequiresRecreationEnumConditionally RequiresRecreationEnum = "Conditionally"
	RequiresRecreationEnumAlways        RequiresRecreationEnum = "Always"
)

func (e RequiresRecreationEnum) ToPointer() *RequiresRecreationEnum {
	return &e
}

func (e *RequiresRecreationEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Never":
		fallthrough
	case "Conditionally":
		fallthrough
	case "Always":
		*e = RequiresRecreationEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RequiresRecreationEnum: %v", v)
	}
}
