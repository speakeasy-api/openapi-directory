<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class FeedV3 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Commit feed items
     * 
     * Commit items in the [feed](https://developers.vtex.com/docs/guides/orders-feed) queue.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CommititemfeedorderstatusRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CommititemfeedorderstatusResponse
     */
	public function commititemfeedorderstatus(
        \OpenAPI\OpenAPI\Models\Operations\CommititemfeedorderstatusRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CommititemfeedorderstatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/orders/feed');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "commititemfeedorderstatusRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CommititemfeedorderstatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->commititemfeedorderstatus200TextPlainObject = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Create or update feed configuration
     * 
     * The Orders Feed v3 is the best way to create order integrations. Below you can find details on the configuration API specification, and to know more see our [Feed v3 guide](https://developers.vtex.com/vtex-rest-api/docs/orders-feed) and our [order integration guide](https://developers.vtex.com/vtex-rest-api/docs/erp-integration-set-up-order-integration)
     * 
     * 
     * There are two types of filtering that can be used. The `FromWorkflow` type filters orders by status, whereas the `FromOrders` type uses JSONata expressions to filter orders according to any property in the orders JSON document. This enables stores to filter delivered orders and orders in which products have been added or removed, for example. To learn more, access the [JSONata documentation](https://docs.jsonata.org/overview.html) and test filtering JSONata expressions with our [Test JSONata expression](https://developers.vtex.com/docs/api-reference/orders-api#post-/api/orders/expressions/jsonata) endpoint.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FeedConfigurationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\FeedConfigurationResponse
     */
	public function feedConfiguration(
        \OpenAPI\OpenAPI\Models\Operations\FeedConfigurationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\FeedConfigurationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/orders/feed/config');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "feedConfigurationRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FeedConfigurationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * Delete feed configuration
     * 
     * Deletes the configuration set up in [Feed v3](https://developers.vtex.com/docs/guides/orders-feed).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FeedConfigurationDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\FeedConfigurationDeleteResponse
     */
	public function feedConfigurationDelete(
        \OpenAPI\OpenAPI\Models\Operations\FeedConfigurationDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\FeedConfigurationDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/orders/feed/config');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FeedConfigurationDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * Get feed configuration
     * 
     * The Orders Feed v3 is the best way to create order integrations. Below you can find details on the configuration API specification, and to know more see our [Feed v3 guide](https://developers.vtex.com/vtex-rest-api/docs/orders-feed) and our [order integration guide](https://developers.vtex.com/vtex-rest-api/docs/erp-integration-set-up-order-integration).
     * 
     * > ðŸ“˜ Onboarding guide 
     * >
     * > Check the new [Orders onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFeedConfigurationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFeedConfigurationResponse
     */
	public function getFeedConfiguration(
        \OpenAPI\OpenAPI\Models\Operations\GetFeedConfigurationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFeedConfigurationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/orders/feed/config');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFeedConfigurationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getFeedConfiguration200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetFeedConfiguration200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve feed items
     * 
     * Retrieve items from [feed](https://developers.vtex.com/docs/guides/orders-feed) queue. 
     * 
     * The event will be removed if the message `send retry` is equal to, or greater than the maximum retention period.
     * 
     * > This API will return `404 Not Found` if there is no [Feed Configuration](https://developers.vtex.com/docs/guides/orders-feed) available for the given X-VTEX-API-AppKey.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Getfeedorderstatus1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Getfeedorderstatus1Response
     */
	public function getfeedorderstatus1(
        \OpenAPI\OpenAPI\Models\Operations\Getfeedorderstatus1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Getfeedorderstatus1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/orders/feed');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Getfeedorderstatus1Request::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Getfeedorderstatus1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getfeedorderstatuses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Getfeedorderstatus>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Test JSONata expression
     * 
     * This endpoint allows you to test a JSON document with a JSONata expression, returning `true` if the document meets the criteria posed in the expression, or `false` if it does not.
     * 
     * 
     * Since JSONata expressions can be used to filter order updates in the [Orders API feed and hook](https://developers.vtex.com/docs/guides/orders-feed), this endpoint can be used to test an expression's results before configuring the [feed or hook](https://developers.vtex.com/docs/guides/orders-feed).
     * 
     * 
     * Learn more about how to use JSONata expressions, in the [JSONata documentation](https://docs.jsonata.org/overview.html).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestJSONataExpressionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TestJSONataExpressionResponse
     */
	public function testJSONataExpression(
        \OpenAPI\OpenAPI\Models\Operations\TestJSONataExpressionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TestJSONataExpressionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/orders/expressions/jsonata');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testJSONataExpression", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestJSONataExpressionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}