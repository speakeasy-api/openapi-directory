/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

/**
 *  The type of connector, such as Salesforce, Amplitude, and so on.
 */
export enum DescribeConnectorProfilesRequestBodyConnectorTypeEnum {
  Salesforce = "Salesforce",
  Singular = "Singular",
  Slack = "Slack",
  Redshift = "Redshift",
  S3 = "S3",
  Marketo = "Marketo",
  Googleanalytics = "Googleanalytics",
  Zendesk = "Zendesk",
  Servicenow = "Servicenow",
  Datadog = "Datadog",
  Trendmicro = "Trendmicro",
  Snowflake = "Snowflake",
  Dynatrace = "Dynatrace",
  Infornexus = "Infornexus",
  Amplitude = "Amplitude",
  Veeva = "Veeva",
  EventBridge = "EventBridge",
  LookoutMetrics = "LookoutMetrics",
  Upsolver = "Upsolver",
  Honeycode = "Honeycode",
  CustomerProfiles = "CustomerProfiles",
  SAPOData = "SAPOData",
  CustomConnector = "CustomConnector",
  Pardot = "Pardot",
}

export class DescribeConnectorProfilesRequestBody extends SpeakeasyBase {
  /**
   * The name of the connector. The name is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account. Only needed if calling for CUSTOMCONNECTOR connector type/.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "connectorLabel" })
  connectorLabel?: string;

  /**
   *  The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "connectorProfileNames" })
  connectorProfileNames?: string[];

  /**
   *  The type of connector, such as Salesforce, Amplitude, and so on.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "connectorType" })
  connectorType?: DescribeConnectorProfilesRequestBodyConnectorTypeEnum;

  /**
   *  Specifies the maximum number of items that should be returned in the result set. The default for <code>maxResults</code> is 20 (for all paginated API operations).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxResults" })
  maxResults?: number;

  /**
   *  The pagination token for the next page of data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nextToken" })
  nextToken?: string;
}

export class DescribeConnectorProfilesRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: DescribeConnectorProfilesRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * Pagination limit
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=maxResults",
  })
  maxResults?: string;

  /**
   * Pagination token
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=nextToken",
  })
  nextToken?: string;
}

export class DescribeConnectorProfilesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  describeConnectorProfilesResponse?: shared.DescribeConnectorProfilesResponse;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
