/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Can be used multiple times. Choices id id:asc id:desc created created:asc created:desc
 */
export enum GetFloatingIpsSortEnum {
  Id = "id",
  IdAsc = "id:asc",
  IdDesc = "id:desc",
  Created = "created",
  CreatedAsc = "created:asc",
  CreatedDesc = "created:desc",
}

export class GetFloatingIpsRequest extends SpeakeasyBase {
  /**
   * Can be used to filter Floating IPs by labels. The response will only contain Floating IPs matching the label selector.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=label_selector",
  })
  labelSelector?: string;

  /**
   * Can be used to filter Floating IPs by their name. The response will only contain the Floating IP matching the specified name.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=name" })
  name?: string;

  /**
   * Can be used multiple times. Choices id id:asc id:desc created created:asc created:desc
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: GetFloatingIpsSortEnum;
}

export class GetFloatingIps200ApplicationJSONFloatingIpsDnsPtr extends SpeakeasyBase {
  /**
   * DNS pointer for the specific IP address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dns_ptr" })
  dnsPtr: string;

  /**
   * Single IPv4 or IPv6 address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ip" })
  ip: string;
}

/**
 * Location the Floating IP was created in. Routing is optimized for this Location.
 */
export class GetFloatingIps200ApplicationJSONFloatingIpsHomeLocation extends SpeakeasyBase {
  /**
   * City the Location is closest to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "city" })
  city: string;

  /**
   * ISO 3166-1 alpha-2 code of the country the Location resides in
   */
  @SpeakeasyMetadata()
  @Expose({ name: "country" })
  country: string;

  /**
   * Description of the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * ID of the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Latitude of the city closest to the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "latitude" })
  latitude: number;

  /**
   * Longitude of the city closest to the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "longitude" })
  longitude: number;

  /**
   * Unique identifier of the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Name of network zone this Location resides in
   */
  @SpeakeasyMetadata()
  @Expose({ name: "network_zone" })
  networkZone: string;
}

/**
 * Protection configuration for the Resource
 */
export class GetFloatingIps200ApplicationJSONFloatingIpsProtection extends SpeakeasyBase {
  /**
   * If true, prevents the Resource from being deleted
   */
  @SpeakeasyMetadata()
  @Expose({ name: "delete" })
  delete: boolean;
}

/**
 * Type of the Floating IP
 */
export enum GetFloatingIps200ApplicationJSONFloatingIpsTypeEnum {
  Ipv4 = "ipv4",
  Ipv6 = "ipv6",
}

export class GetFloatingIps200ApplicationJSONFloatingIps extends SpeakeasyBase {
  /**
   * Whether the IP is blocked
   */
  @SpeakeasyMetadata()
  @Expose({ name: "blocked" })
  blocked: boolean;

  /**
   * Point in time when the Resource was created (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  created: string;

  /**
   * Description of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * Array of reverse DNS entries
   */
  @SpeakeasyMetadata({
    elemType: GetFloatingIps200ApplicationJSONFloatingIpsDnsPtr,
  })
  @Expose({ name: "dns_ptr" })
  @Type(() => GetFloatingIps200ApplicationJSONFloatingIpsDnsPtr)
  dnsPtr: GetFloatingIps200ApplicationJSONFloatingIpsDnsPtr[];

  /**
   * Location the Floating IP was created in. Routing is optimized for this Location.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "home_location" })
  @Type(() => GetFloatingIps200ApplicationJSONFloatingIpsHomeLocation)
  homeLocation: GetFloatingIps200ApplicationJSONFloatingIpsHomeLocation;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * IP address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ip" })
  ip: string;

  /**
   * User-defined labels (key-value pairs)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels: Record<string, string>;

  /**
   * Name of the Resource. Must be unique per Project.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Protection configuration for the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "protection" })
  @Type(() => GetFloatingIps200ApplicationJSONFloatingIpsProtection)
  protection: GetFloatingIps200ApplicationJSONFloatingIpsProtection;

  /**
   * ID of the Server the Floating IP is assigned to, null if it is not assigned at all
   */
  @SpeakeasyMetadata()
  @Expose({ name: "server" })
  server: number;

  /**
   * Type of the Floating IP
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: GetFloatingIps200ApplicationJSONFloatingIpsTypeEnum;
}

export class GetFloatingIps200ApplicationJSONMetaPagination extends SpeakeasyBase {
  /**
   * ID of the last page available. Can be null if the current page is the last one.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_page" })
  lastPage: number;

  /**
   * ID of the next page. Can be null if the current page is the last one.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "next_page" })
  nextPage: number;

  /**
   * Current page number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "page" })
  page: number;

  /**
   * Maximum number of items shown per page in the response
   */
  @SpeakeasyMetadata()
  @Expose({ name: "per_page" })
  perPage: number;

  /**
   * ID of the previous page. Can be null if the current page is the first one.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "previous_page" })
  previousPage: number;

  /**
   * The total number of entries that exist in the database for this query. Nullable if unknown.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_entries" })
  totalEntries: number;
}

export class GetFloatingIps200ApplicationJSONMeta extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "pagination" })
  @Type(() => GetFloatingIps200ApplicationJSONMetaPagination)
  pagination: GetFloatingIps200ApplicationJSONMetaPagination;
}

/**
 * The `floating_ips` key in the reply contains an array of Floating IP objects with this structure
 */
export class GetFloatingIps200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: GetFloatingIps200ApplicationJSONFloatingIps })
  @Expose({ name: "floating_ips" })
  @Type(() => GetFloatingIps200ApplicationJSONFloatingIps)
  floatingIps: GetFloatingIps200ApplicationJSONFloatingIps[];

  @SpeakeasyMetadata()
  @Expose({ name: "meta" })
  @Type(() => GetFloatingIps200ApplicationJSONMeta)
  meta?: GetFloatingIps200ApplicationJSONMeta;
}

export class GetFloatingIpsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * The `floating_ips` key in the reply contains an array of Floating IP objects with this structure
   */
  @SpeakeasyMetadata()
  getFloatingIps200ApplicationJSONObject?: GetFloatingIps200ApplicationJSON;
}
