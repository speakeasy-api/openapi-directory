<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Uploads 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Chunked upload of data
     * 
     * Send chunked data for an **Upload**.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChunkedUploadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ChunkedUploadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ChunkedUploadResponse
     */
	public function chunkedUpload(
        \OpenAPI\OpenAPI\Models\Operations\ChunkedUploadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ChunkedUploadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ChunkedUploadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/uploads/{uploadId}', \OpenAPI\OpenAPI\Models\Operations\ChunkedUploadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChunkedUploadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429 or $httpResponse->getStatusCode() === 500 or $httpResponse->getStatusCode() === 503) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve Upload status
     * 
     * Check the status of an **Upload** by ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUploadStatusByIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUploadStatusByIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchUploadStatusByIdResponse
     */
	public function fetchUploadStatusById(
        \OpenAPI\OpenAPI\Models\Operations\FetchUploadStatusByIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchUploadStatusByIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchUploadStatusByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/uploads/{uploadId}/status', \OpenAPI\OpenAPI\Models\Operations\FetchUploadStatusByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchUploadStatusByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->uploadStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UploadStatus', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429 or $httpResponse->getStatusCode() === 500 or $httpResponse->getStatusCode() === 503) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve Upload statuses in batch
     * 
     * Check the status of multiple **Uploads** (up to 100 per request).
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\UploadStatusQuery $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUploadStatusesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchUploadStatusesResponse
     */
	public function fetchUploadStatuses(
        \OpenAPI\OpenAPI\Models\Shared\UploadStatusQuery $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchUploadStatusesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchUploadStatusesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/uploads/status/query');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchUploadStatusesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->uploadStatuses = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UploadStatuses', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429 or $httpResponse->getStatusCode() === 500 or $httpResponse->getStatusCode() === 503) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Initiate a new upload
     * 
     * Step one in uploading a data product. The method will return an **Upload** ID which the caller will use in subsequent `PUT` requests.
     * The following `contentTypes` may be uploaded:
     *     <details><summary>__image/vnd.climate.thermal.geotiff__</summary>
     * 
     *     Allows for the upload of a thermal image. The image is a single band geotiff with 64 bit signed floating point values in degrees Celsius. The Coordinate Reference System (CRS) must be UTM with WGS84 datum.
     * 
     *     The following metadata entries are required to be embedded in the geotiff:
     *       * acquisitionStartDate - ISO8601 date
     *       * acquisitionEndDate - ISO8601 date
     *       * isCalibrated - boolean
     * 
     *     The following metadata entries are optional:
     *       * sourceId - uuid referencing the asset in the partner's system
     *       * fieldId - uuid referencing a field in the Climate system
     *       * boundaryId - uuid referencing a boundary in the Climate system
     *       * brandId - uuid referencing a partner's branding in the Climate system
     *       * name - name of the layer. The maximum number of characters that will be accepted as input is 20.
     * 
     *     Requires either imagery:write or platform scope.
     *   </details>
     *   <details><summary>__image/vnd.climate.ndvi.geotiff__</summary>
     * 
     *     Allows for the upload of a NDVI image. The image is a single band geotiff with 64 bit signed floating point values in the range of -1 to 1 inclusive. The Coordinate Reference System (CRS) must be UTM with WGS84 datum.
     * 
     *     The following metadata entries are required to be embedded in the geotiff:
     *       * acquisitionStartDate - ISO8601 date
     *       * acquisitionEndDate - ISO8601 date
     * 
     *     The following metadata entries are optional:
     *       * sourceId - uuid referencing the asset in the partner's system
     *       * fieldId - uuid referencing a field in the Climate system
     *       * boundaryId - uuid referencing a boundary in the Climate system
     *       * brandId - uuid referencing a partner's branding in the Climate system
     *       * name - name of the layer. The maximum number of characters that will be accepted as input is 20.
     * 
     *     Requires either imagery:write or platform scope.
     *   </details>
     *   <details><summary> __image/vnd.climate.rgb.geotiff__</summary>
     * 
     *     Allows for the upload of a true color image. The image is a multi band geotiff with 24-bit composite values. Each band is 8 bits with values in the range of 0 to 255. The Coordinate Reference System (CRS) must be UTM with WGS84 datum. The geotiff must contain 3 bands in the order Red, Green, Blue.
     * 
     *     The following metadata entries are required to be embedded in the geotiff:
     *       * acquisitionStartDate - ISO8601 date
     *       * acquisitionEndDate - ISO8601 date
     *       * isCalibrated - boolean
     * 
     *     The following metadata entries are optional:
     *       * sourceId - uuid referencing the asset in the partner's system
     *       * fieldId - uuid referencing a field in the Climate system
     *       * boundaryId - uuid referencing a boundary in the Climate system
     *       * brandId - uuid referencing a partner's branding in the Climate system
     *       * reflectanceComputeMethod - either TOA or GROUND
     *       * name - name of the layer. The maximum number of characters that will be accepted as input is 20.
     * 
     *     Requires either imagery:write or platform scope.
     *   </details>
     *   <details><summary> __image/vnd.climate.rgb-nir.geotiff__</summary>
     * 
     *     Allows for the upload of a Near Infrared (NIR) image. The Coordinate Reference System (CRS) must be UTM with WGS84 datum.
     * 
     *     The following metadata entries are required to be embedded in the geotiff:
     *       * acquisitionStartDate - ISO8601 date
     *       * acquisitionEndDate - ISO8601 date
     *       * isCalibrated - boolean
     * 
     *     The following metadata entries are optional:
     *       * sourceId - uuid referencing the asset in the partner's system
     *       * fieldId - uuid referencing a field in the Climate system
     *       * boundaryId - uuid referencing a boundary in the Climate system
     *       * brandId - uuid referencing a partner's branding in the Climate system
     *       * reflectanceComputeMethod - either TOA or GROUND
     *       * name - name of the layer. The maximum number of characters that will be accepted as input is 20.
     * 
     *     Requires either imagery:write or platform scope.
     *   </details>
     *   <details><summary>__image/vnd.climate.rgb-cir.geotiff__</summary>
     * 
     *     Allows for the upload of a Color Infrared (CIR) image. The Coordinate Reference System (CRS) must be UTM with WGS84 datum.
     * 
     *     The following metadata entries are required to be embedded in the geotiff:
     *       * acquisitionStartDate - ISO8601 date
     *       * acquisitionEndDate - ISO8601 date
     *       * isCalibrated - boolean
     * 
     *     The following metadata entries are optional:
     *       * sourceId - uuid referencing the asset in the partner's system
     *       * fieldId - uuid referencing a field in the Climate system
     *       * boundaryId - uuid referencing a boundary in the Climate system
     *       * brandId - uuid referencing a partner's branding in the Climate system
     *       * reflectanceComputeMethod - either TOA or GROUND
     *       * name - name of the layer. The maximum number of characters that will be accepted as input is 20.
     * 
     *     Requires either imagery:write or platform scope.
     *   </details>
     *   <details><summary> __application/vnd.climate.rx.planting.shp__</summary>
     * 
     *     Allows for the upload of a planting prescription in shapefile format.  The upload must be an archive in the zip format.  It should contain one and only one of each of the following file types:
     *       * .shp
     *       * .shx
     *       * .dbf
     * 
     *     All files with the above suffixes must have the same prefix, ie Back40.shp, Back40.shx and Back40.dbf.
     * 
     *     Requires either rx:write or platform scope.
     *   </details>
     *   <details><summary> __application/vnd.climate.prescription.zones.shp__</summary>
     * 
     *     Allows for the upload of a zones prescription in shapefile format.  The upload must be an archive in the zip format.  It should contain one and only one of each of the following file types:
     *       * .shp
     *       * .shx
     *       * .dbf
     * 
     *     All files with the above suffixes must have the same prefix, ie Back40.shp, Back40.shx and Back40.dbf.
     * 
     *     The following metadata entries are required:
     *       * fieldId - field identifier for prescription zones.
     *     
     *     Requires either rxZones:write or platform scope.
     *   </details>
     *   <details><summary> __application/vnd.climate.modus.xml__</summary>
     * 
     *     Allows for the upload of a soil sampling file in the modus 1.0 format with some restrictions.  The upload must be a single xml file.
     * 
     *     The following elements are required to be present in the modus file.
     *       * EventCode - Max length of 64 bytes
     *       * EventDate - Must be in ISO8601
     *       * SoilSample - Has a maxOccurs of 20k
     *       * Depth - Has a maxOccurs of 50
     *       * LabName - Must be non-empty.
     *       * StartingDepth - 0 to 36 inclusive, default 0
     *       * EndingDepth - 1 - 36 inclusive, default 1
     *       * ColumnDepth
     *       * DepthUnit - must be inches
     *       * Geometry - point in wgs84
     *     
     *     Requires the soil:write scope.
     *    </details>
     *    <details><summary> __application/vnd.climate.stand-count.geojson__</summary>
     * 
     *     Allows for the upload of a valid [geojson feature collection](https://tools.ietf.org/html/rfc7946#section-3.3).
     * 
     *     Each feature in the collection must contain the following entry in its properties section:
     *       * StandPPA - A count of the number of plants per acre:
     * 
     *     Additionally, the type field of each feature's geometry field must be:
     *       * Point
     * 
     *     Requires `imagery:write` scope.
     *    </details>
     *    <details><summary> __application/vnd.climate.weed-count.geojson__</summary>
     * 
     *     Allows for the upload of a valid [geojson feature collection](https://tools.ietf.org/html/rfc7946#section-3.3).
     * 
     *     Each feature in the collection must contain the following entry in its properties section:
     *       * StandPPA - A count of the number of plants per acre:
     * 
     *     Additionally, the type field of each feature's geometry field must be:
     *       * Point
     * 
     *     Requires `imagery:write` scope.
     *    </details>
     *    <details><summary> __application/vnd.climate.as-applied.zip__</summary>
     * 
     *     Allows for the upload of a valid application data [supported formats](https://support.climate.com/kt#/kA02A000000DjvOSAS/en_US).
     * 
     *     The following metadata entries are required:
     *       * fileName - name of the file being uploaded.
     * 
     *     The following metadata entries are optional:
     *       * resourceOwner - the grower's account email, where dealer/partner wants to upload data. As a prerequisite the grower must share their operation with the dealer/partner.
     * 
     *     Requires `asApplied:write` scope.
     *    </details>
     *    <details><summary> __application/vnd.climate.as-planted.zip__</summary>
     * 
     *     Allows for the upload of a valid planting data [supported formats](https://support.climate.com/kt#/kA02A000000DjvOSAS/en_US).
     * 
     *     The following metadata entries are required:
     *       * fileName - name of the file being uploaded.
     * 
     *     The following metadata entries are optional:
     *       * resourceOwner - the grower's account email, where dealer/partner wants to upload data. As a prerequisite the grower must share their operation with the dealer/partner.
     * 
     *     Requires `asPlanted:write` scope.
     *    </details>
     *    <details><summary> __application/vnd.climate.as-harvested.zip__</summary>
     * 
     *     Allows for the upload of a valid harvest data [supported formats](https://support.climate.com/kt#/kA02A000000DjvOSAS/en_US).
     * 
     *     The following metadata entries are required:
     *       * fileName - name of the file being uploaded.
     * 
     *     The following metadata entries are optional:
     *       * resourceOwner - the grower's account email, where dealer/partner wants to upload data. As a prerequisite the grower must share their operation with the dealer/partner.
     * 
     *     Requires `asHarvested:write` scope.
     *    </details>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostUploadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostUploadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostUploadResponse
     */
	public function postUpload(
        \OpenAPI\OpenAPI\Models\Operations\PostUploadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostUploadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostUploadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/uploads');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "upload", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostUploadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->createdUpload = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 429 or $httpResponse->getStatusCode() === 500 or $httpResponse->getStatusCode() === 503) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
}