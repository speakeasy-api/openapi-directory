/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * An object that defines the entire content of the email, including the message headers and the body content. You can create a simple email message, in which you specify the subject and the text and HTML versions of the message body. You can also create raw messages, in which you specify a complete MIME-formatted message. Raw messages can include attachments and custom headers.
 */
export class SendEmailRequestBodyContent extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Raw" })
  @Type(() => shared.RawMessage)
  raw?: shared.RawMessage;

  @SpeakeasyMetadata()
  @Expose({ name: "Simple" })
  @Type(() => shared.Message)
  simple?: shared.Message;

  @SpeakeasyMetadata()
  @Expose({ name: "Template" })
  @Type(() => shared.Template)
  template?: shared.Template;
}

/**
 * An object that describes the recipients for an email.
 */
export class SendEmailRequestBodyDestination extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "BccAddresses" })
  bccAddresses?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "CcAddresses" })
  ccAddresses?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "ToAddresses" })
  toAddresses?: string[];
}

export class SendEmailRequestBody extends SpeakeasyBase {
  /**
   * <p>The name of a configuration set.</p> <p>In Amazon Pinpoint, <i>configuration sets</i> are groups of rules that you can apply to the emails you send. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ConfigurationSetName" })
  configurationSetName?: string;

  /**
   * An object that defines the entire content of the email, including the message headers and the body content. You can create a simple email message, in which you specify the subject and the text and HTML versions of the message body. You can also create raw messages, in which you specify a complete MIME-formatted message. Raw messages can include attachments and custom headers.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Content" })
  @Type(() => SendEmailRequestBodyContent)
  content: SendEmailRequestBodyContent;

  /**
   * An object that describes the recipients for an email.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Destination" })
  @Type(() => SendEmailRequestBodyDestination)
  destination: SendEmailRequestBodyDestination;

  /**
   * A list of message tags.
   */
  @SpeakeasyMetadata({ elemType: shared.MessageTag })
  @Expose({ name: "EmailTags" })
  @Type(() => shared.MessageTag)
  emailTags?: shared.MessageTag[];

  /**
   * The address that Amazon Pinpoint should send bounce and complaint notifications to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "FeedbackForwardingEmailAddress" })
  feedbackForwardingEmailAddress?: string;

  /**
   * The email address that you want to use as the "From" address for the email. The address that you specify has to be verified.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "FromEmailAddress" })
  fromEmailAddress?: string;

  /**
   * The "Reply-to" email addresses for the message. When the recipient replies to the message, each Reply-to address receives the reply.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ReplyToAddresses" })
  replyToAddresses?: string[];
}

export class SendEmailRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: SendEmailRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class SendEmailResponse extends SpeakeasyBase {
  /**
   * AccountSuspendedException
   */
  @SpeakeasyMetadata()
  accountSuspendedException?: any;

  /**
   * BadRequestException
   */
  @SpeakeasyMetadata()
  badRequestException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * LimitExceededException
   */
  @SpeakeasyMetadata()
  limitExceededException?: any;

  /**
   * MailFromDomainNotVerifiedException
   */
  @SpeakeasyMetadata()
  mailFromDomainNotVerifiedException?: any;

  /**
   * MessageRejected
   */
  @SpeakeasyMetadata()
  messageRejected?: any;

  /**
   * NotFoundException
   */
  @SpeakeasyMetadata()
  notFoundException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  sendEmailResponse?: shared.SendEmailResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * SendingPausedException
   */
  @SpeakeasyMetadata()
  sendingPausedException?: any;

  /**
   * TooManyRequestsException
   */
  @SpeakeasyMetadata()
  tooManyRequestsException?: any;
}
