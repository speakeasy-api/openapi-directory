"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import payoutpayeev3 as shared_payoutpayeev3
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PaymentV3:
    
    payment_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentId') }})
    r"""The id of the payment"""  
    amount: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount'), 'exclude': lambda f: f is None }})
    r"""The amount of the payment in minor units"""  
    auto_withdrawn_reason_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoWithdrawnReasonCode'), 'exclude': lambda f: f is None }})
    r"""Populated only if the payment was automatically withdrawn during instruction for being invalid"""  
    currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency'), 'exclude': lambda f: f is None }})
    r"""The currency that the payment was made in"""  
    payee: Optional[shared_payoutpayeev3.PayoutPayeeV3] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payee'), 'exclude': lambda f: f is None }})
    r"""Payee data associated with a payment. Either individual or company must be populated"""  
    payment_memo: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentMemo'), 'exclude': lambda f: f is None }})
    r"""<p>Any value here will override the memo value in the parent payout</p>
    <p>This should be the reference field on the statement seen by the payee (but not via ACH)</p>
    """  
    payment_metadata: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentMetadata'), 'exclude': lambda f: f is None }})
    r"""<p>Metadata about the payment that may be relevant to the specific rails or remote system making the payout</p>
    <p>The structure of the data will be dictated by the requirements of the payment rails</p>
    """  
    payor_payment_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payorPaymentId'), 'exclude': lambda f: f is None }})
    r"""A reference identifier for the payor for the given payee payment"""  
    rails_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('railsId'), 'exclude': lambda f: f is None }})
    r"""Indicates the 3rd party system involved in making this payment"""  
    remote_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remoteId'), 'exclude': lambda f: f is None }})
    r"""The remoteId supplied by the payor that identifies the payee"""  
    remote_system_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remoteSystemId'), 'exclude': lambda f: f is None }})
    r"""<p>The identifier for the remote payments system if not Velo</p>"""  
    source_account_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceAccountName'), 'exclude': lambda f: f is None }})
    r"""The identifier of the source account to debit the payment from"""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Current status of payment. One of the following values: SUBMITTED, ACCEPTED, REJECTED, WITHDRAWN, RETURNED, AWAITING_FUNDS, FUNDED, UNFUNDED, CANCELLED, BANK_PAYMENT_REQUESTED"""  
    transmission_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transmissionType'), 'exclude': lambda f: f is None }})
    r"""The transmission method of the payment. One of the following values: ACH, SAME_DAY_ACH, WIRE, LOCAL, SWIFT"""  
    withdrawable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('withdrawable'), 'exclude': lambda f: f is None }})
    r"""Can this paynent be withdrawn"""  
    