/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Deal - A deal represents a segment of inventory for displaying ads on. A proposal can contain multiple deals. A deal contains the terms and targeting information that is used for serving.
 */
public class Deal {
    /**
     * Proposed flight end time of the deal. This will generally be stored in a granularity of a second. A value is not required for Private Auction deals or Preferred Deals.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("availableEndTime")
    public String availableEndTime;
    public Deal withAvailableEndTime(String availableEndTime) {
        this.availableEndTime = availableEndTime;
        return this;
    }
    
    /**
     * Optional. Proposed flight start time of the deal. This will generally be stored in the granularity of one second since deal serving starts at seconds boundary. Any time specified with more granularity (for example, in milliseconds) will be truncated towards the start of time in seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("availableStartTime")
    public String availableStartTime;
    public Deal withAvailableStartTime(String availableStartTime) {
        this.availableStartTime = availableStartTime;
        return this;
    }
    
    /**
     * Buyers are allowed to store certain types of private data in a proposal/deal.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buyerPrivateData")
    public PrivateData buyerPrivateData;
    public Deal withBuyerPrivateData(PrivateData buyerPrivateData) {
        this.buyerPrivateData = buyerPrivateData;
        return this;
    }
    
    /**
     * The product ID from which this deal was created. Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createProductId")
    public String createProductId;
    public Deal withCreateProductId(String createProductId) {
        this.createProductId = createProductId;
        return this;
    }
    
    /**
     * Optional. Revision number of the product that the deal was created from. If present on create, and the server `product_revision` has advanced since the passed-in `create_product_revision`, an `ABORTED` error will be returned. Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createProductRevision")
    public String createProductRevision;
    public Deal withCreateProductRevision(String createProductRevision) {
        this.createProductRevision = createProductRevision;
        return this;
    }
    
    /**
     * Output only. The time of the deal creation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;
    public Deal withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * Output only. Specifies the creative pre-approval policy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creativePreApprovalPolicy")
    public DealCreativePreApprovalPolicyEnum creativePreApprovalPolicy;
    public Deal withCreativePreApprovalPolicy(DealCreativePreApprovalPolicyEnum creativePreApprovalPolicy) {
        this.creativePreApprovalPolicy = creativePreApprovalPolicy;
        return this;
    }
    
    /**
     * Represents creative restrictions associated to Programmatic Guaranteed/ Preferred Deal in Ad Manager. This doesn't apply to Private Auction and AdX Preferred Deals.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creativeRestrictions")
    public CreativeRestrictions creativeRestrictions;
    public Deal withCreativeRestrictions(CreativeRestrictions creativeRestrictions) {
        this.creativeRestrictions = creativeRestrictions;
        return this;
    }
    
    /**
     * Output only. Specifies whether the creative is safeFrame compatible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creativeSafeFrameCompatibility")
    public DealCreativeSafeFrameCompatibilityEnum creativeSafeFrameCompatibility;
    public Deal withCreativeSafeFrameCompatibility(DealCreativeSafeFrameCompatibilityEnum creativeSafeFrameCompatibility) {
        this.creativeSafeFrameCompatibility = creativeSafeFrameCompatibility;
        return this;
    }
    
    /**
     * Output only. A unique deal ID for the deal (server-assigned).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dealId")
    public String dealId;
    public Deal withDealId(String dealId) {
        this.dealId = dealId;
        return this;
    }
    
    /**
     * Message captures metadata about the serving status of a deal.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dealServingMetadata")
    public DealServingMetadata dealServingMetadata;
    public Deal withDealServingMetadata(DealServingMetadata dealServingMetadata) {
        this.dealServingMetadata = dealServingMetadata;
        return this;
    }
    
    /**
     * The deal terms specify the details of a Product/deal. They specify things like price per buyer, the type of pricing model (for example, fixed price, auction) and expected impressions from the publisher.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dealTerms")
    public DealTerms dealTerms;
    public Deal withDealTerms(DealTerms dealTerms) {
        this.dealTerms = dealTerms;
        return this;
    }
    
    /**
     * Message contains details about how the deals will be paced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deliveryControl")
    public DeliveryControl deliveryControl;
    public Deal withDeliveryControl(DeliveryControl deliveryControl) {
        this.deliveryControl = deliveryControl;
        return this;
    }
    
    /**
     * Description for the deal terms.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public Deal withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The name of the deal.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;
    public Deal withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * Output only. The external deal ID assigned to this deal once the deal is finalized. This is the deal ID that shows up in serving/reporting etc.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("externalDealId")
    public String externalDealId;
    public Deal withExternalDealId(String externalDealId) {
        this.externalDealId = externalDealId;
        return this;
    }
    
    /**
     * Output only. True, if the buyside inventory setup is complete for this deal.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isSetupComplete")
    public Boolean isSetupComplete;
    public Deal withIsSetupComplete(Boolean isSetupComplete) {
        this.isSetupComplete = isSetupComplete;
        return this;
    }
    
    /**
     * Output only. Specifies the creative source for programmatic deals. PUBLISHER means creative is provided by seller and ADVERTISER means creative is provided by buyer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("programmaticCreativeSource")
    public DealProgrammaticCreativeSourceEnum programmaticCreativeSource;
    public Deal withProgrammaticCreativeSource(DealProgrammaticCreativeSourceEnum programmaticCreativeSource) {
        this.programmaticCreativeSource = programmaticCreativeSource;
        return this;
    }
    
    /**
     * Output only. ID of the proposal that this deal is part of.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("proposalId")
    public String proposalId;
    public Deal withProposalId(String proposalId) {
        this.proposalId = proposalId;
        return this;
    }
    
    /**
     * Output only. Seller contact information for the deal.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sellerContacts")
    public ContactInformation[] sellerContacts;
    public Deal withSellerContacts(ContactInformation[] sellerContacts) {
        this.sellerContacts = sellerContacts;
        return this;
    }
    
    /**
     * The syndication product associated with the deal. Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("syndicationProduct")
    public DealSyndicationProductEnum syndicationProduct;
    public Deal withSyndicationProduct(DealSyndicationProductEnum syndicationProduct) {
        this.syndicationProduct = syndicationProduct;
        return this;
    }
    
    /**
     * Targeting represents different criteria that can be used by advertisers to target ad inventory. For example, they can choose to target ad requests only if the user is in the US. Multiple types of targeting are always applied as a logical AND, unless noted otherwise.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targeting")
    public MarketplaceTargeting targeting;
    public Deal withTargeting(MarketplaceTargeting targeting) {
        this.targeting = targeting;
        return this;
    }
    
    /**
     * The shared targeting visible to buyers and sellers. Each shared targeting entity is AND'd together.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targetingCriterion")
    public TargetingCriteria[] targetingCriterion;
    public Deal withTargetingCriterion(TargetingCriteria[] targetingCriterion) {
        this.targetingCriterion = targetingCriterion;
        return this;
    }
    
    /**
     * Output only. The time when the deal was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    public String updateTime;
    public Deal withUpdateTime(String updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
    /**
     * The web property code for the seller copied over from the product.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webPropertyCode")
    public String webPropertyCode;
    public Deal withWebPropertyCode(String webPropertyCode) {
        this.webPropertyCode = webPropertyCode;
        return this;
    }
    
}
