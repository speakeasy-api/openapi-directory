<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Sm 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Force check-in a set of devices
     * 
     * Force check-in a set of devices
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CheckinNetworkSmDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CheckinNetworkSmDevicesResponse
     */
	public function checkinNetworkSmDevices(
        \OpenAPI\OpenAPI\Models\Operations\CheckinNetworkSmDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CheckinNetworkSmDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/checkin', \OpenAPI\OpenAPI\Models\Operations\CheckinNetworkSmDevicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CheckinNetworkSmDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->checkinNetworkSmDevices200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Bypass activation lock attempt
     * 
     * Bypass activation lock attempt
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSmBypassActivationLockAttemptRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSmBypassActivationLockAttemptResponse
     */
	public function createNetworkSmBypassActivationLockAttempt(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSmBypassActivationLockAttemptRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSmBypassActivationLockAttemptResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/bypassActivationLockAttempts', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSmBypassActivationLockAttemptRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSmBypassActivationLockAttemptResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkSmBypassActivationLockAttempt201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Bypass activation lock attempt status
     * 
     * Bypass activation lock attempt status
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmBypassActivationLockAttemptRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmBypassActivationLockAttemptResponse
     */
	public function getNetworkSmBypassActivationLockAttempt(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmBypassActivationLockAttemptRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmBypassActivationLockAttemptResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/bypassActivationLockAttempts/{attemptId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmBypassActivationLockAttemptRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmBypassActivationLockAttemptResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmBypassActivationLockAttempt200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the client's daily cellular data usage history
     * 
     * Return the client's daily cellular data usage history. Usage data is in kilobytes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmCellularUsageHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmCellularUsageHistoryResponse
     */
	public function getNetworkSmCellularUsageHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmCellularUsageHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmCellularUsageHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/{deviceId}/cellularUsageHistory', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmCellularUsageHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmCellularUsageHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmCellularUsageHistory200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the certs on a device
     * 
     * List the certs on a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmCertsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmCertsResponse
     */
	public function getNetworkSmCerts(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmCertsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmCertsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/{deviceId}/certs', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmCertsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmCertsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmCerts200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns historical connectivity data (whether a device is regularly checking in to Dashboard).
     * 
     * Returns historical connectivity data (whether a device is regularly checking in to Dashboard).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmConnectivityRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmConnectivityResponse
     */
	public function getNetworkSmConnectivity(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmConnectivityRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmConnectivityResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{network_id}/sm/{id}/connectivity', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmConnectivityRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkSmConnectivityRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmConnectivityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmConnectivity200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return historical records of various Systems Manager network connection details for desktop devices.
     * 
     * Return historical records of various Systems Manager network connection details for desktop devices.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDesktopLogsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDesktopLogsResponse
     */
	public function getNetworkSmDesktopLogs(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDesktopLogsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDesktopLogsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{network_id}/sm/{id}/desktopLogs', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDesktopLogsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDesktopLogsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDesktopLogsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmDesktopLogs200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return historical records of commands sent to Systems Manager devices
     * 
     * Return historical records of commands sent to Systems Manager devices. Note that this will include the name of the Dashboard user who initiated the command if it was generated by a Dashboard admin rather than the automatic behavior of the system; you may wish to filter this out of any reports.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCommandLogsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCommandLogsResponse
     */
	public function getNetworkSmDeviceCommandLogs(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCommandLogsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCommandLogsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{network_id}/sm/{id}/deviceCommandLogs', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCommandLogsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCommandLogsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCommandLogsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmDeviceCommandLogs200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the profiles associated with a device
     * 
     * Get the profiles associated with a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceProfilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceProfilesResponse
     */
	public function getNetworkSmDeviceProfiles(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceProfilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceProfilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/{deviceId}/deviceProfiles', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceProfilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceProfilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmDeviceProfiles200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the devices enrolled in an SM network with various specified fields and filters
     * 
     * List the devices enrolled in an SM network with various specified fields and filters
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicesResponse
     */
	public function getNetworkSmDevices(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmDevices200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the network adapters of a device
     * 
     * List the network adapters of a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmNetworkAdaptersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmNetworkAdaptersResponse
     */
	public function getNetworkSmNetworkAdapters(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmNetworkAdaptersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmNetworkAdaptersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/{deviceId}/networkAdapters', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmNetworkAdaptersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmNetworkAdaptersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmNetworkAdapters200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return historical records of various Systems Manager client metrics for desktop devices.
     * 
     * Return historical records of various Systems Manager client metrics for desktop devices.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmPerformanceHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmPerformanceHistoryResponse
     */
	public function getNetworkSmPerformanceHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmPerformanceHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmPerformanceHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{network_id}/sm/{id}/performanceHistory', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmPerformanceHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkSmPerformanceHistoryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmPerformanceHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmPerformanceHistory200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all the profiles in the network
     * 
     * List all the profiles in the network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmProfilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmProfilesResponse
     */
	public function getNetworkSmProfiles(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmProfilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmProfilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/profiles', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmProfilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmProfilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmProfiles200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the restrictions on a device
     * 
     * List the restrictions on a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmRestrictionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmRestrictionsResponse
     */
	public function getNetworkSmRestrictions(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmRestrictionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmRestrictionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/{deviceId}/restrictions', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmRestrictionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmRestrictionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmRestrictions200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the security centers on a device
     * 
     * List the security centers on a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmSecurityCentersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmSecurityCentersResponse
     */
	public function getNetworkSmSecurityCenters(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmSecurityCentersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmSecurityCentersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/{deviceId}/securityCenters', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmSecurityCentersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmSecurityCentersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmSecurityCenters200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of softwares associated with a device
     * 
     * Get a list of softwares associated with a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmSoftwaresRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmSoftwaresResponse
     */
	public function getNetworkSmSoftwares(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmSoftwaresRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmSoftwaresResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/{deviceId}/softwares', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmSoftwaresRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmSoftwaresResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmSoftwares200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the profiles associated with a user
     * 
     * Get the profiles associated with a user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserDeviceProfilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserDeviceProfilesResponse
     */
	public function getNetworkSmUserDeviceProfiles(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserDeviceProfilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserDeviceProfilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/user/{userId}/deviceProfiles', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserDeviceProfilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserDeviceProfilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmUserDeviceProfiles200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of softwares associated with a user
     * 
     * Get a list of softwares associated with a user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserSoftwaresRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserSoftwaresResponse
     */
	public function getNetworkSmUserSoftwares(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserSoftwaresRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserSoftwaresResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/user/{userId}/softwares', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserSoftwaresRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserSoftwaresResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmUserSoftwares200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the owners in an SM network with various specified fields and filters
     * 
     * List the owners in an SM network with various specified fields and filters
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUsersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUsersResponse
     */
	public function getNetworkSmUsers(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUsersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUsersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/users', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUsersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUsersRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUsersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmUsers200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the saved SSID names on a device
     * 
     * List the saved SSID names on a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmWlanListsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmWlanListsResponse
     */
	public function getNetworkSmWlanLists(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmWlanListsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmWlanListsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/{deviceId}/wlanLists', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmWlanListsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmWlanListsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmWlanLists200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lock a set of devices
     * 
     * Lock a set of devices
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LockNetworkSmDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\LockNetworkSmDevicesResponse
     */
	public function lockNetworkSmDevices(
        \OpenAPI\OpenAPI\Models\Operations\LockNetworkSmDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\LockNetworkSmDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{network_id}/sm/devices/lock', \OpenAPI\OpenAPI\Models\Operations\LockNetworkSmDevicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LockNetworkSmDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->lockNetworkSmDevices200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Refresh the details of a device
     * 
     * Refresh the details of a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RefreshNetworkSmDeviceDetailsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RefreshNetworkSmDeviceDetailsResponse
     */
	public function refreshNetworkSmDeviceDetails(
        \OpenAPI\OpenAPI\Models\Operations\RefreshNetworkSmDeviceDetailsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RefreshNetworkSmDeviceDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/device/{deviceId}/refreshDetails', \OpenAPI\OpenAPI\Models\Operations\RefreshNetworkSmDeviceDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RefreshNetworkSmDeviceDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Unenroll a device
     * 
     * Unenroll a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UnenrollNetworkSmDeviceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UnenrollNetworkSmDeviceResponse
     */
	public function unenrollNetworkSmDevice(
        \OpenAPI\OpenAPI\Models\Operations\UnenrollNetworkSmDeviceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UnenrollNetworkSmDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/{deviceId}/unenroll', \OpenAPI\OpenAPI\Models\Operations\UnenrollNetworkSmDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UnenrollNetworkSmDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unenrollNetworkSmDevice200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Modify the fields of a device
     * 
     * Modify the fields of a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmDeviceFieldsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmDeviceFieldsResponse
     */
	public function updateNetworkSmDeviceFields(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmDeviceFieldsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmDeviceFieldsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/device/fields', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmDeviceFieldsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmDeviceFieldsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSmDeviceFields200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add, delete, or update the tags of a set of devices
     * 
     * Add, delete, or update the tags of a set of devices
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmDevicesTagsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmDevicesTagsResponse
     */
	public function updateNetworkSmDevicesTags(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmDevicesTagsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmDevicesTagsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/tags', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmDevicesTagsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmDevicesTagsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSmDevicesTags200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Wipe a device
     * 
     * Wipe a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WipeNetworkSmDeviceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\WipeNetworkSmDeviceResponse
     */
	public function wipeNetworkSmDevice(
        \OpenAPI\OpenAPI\Models\Operations\WipeNetworkSmDeviceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\WipeNetworkSmDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/device/wipe', \OpenAPI\OpenAPI\Models\Operations\WipeNetworkSmDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WipeNetworkSmDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->wipeNetworkSmDevice200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
}