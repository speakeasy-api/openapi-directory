"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import code_scanning_analysis_tool as shared_code_scanning_analysis_tool
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CodeScanningAnalysis:
    r"""Response"""
    
    analysis_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('analysis_key') }})
    r"""Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name."""  
    commit_sha: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commit_sha') }})
    r"""The SHA of the commit to which the analysis you are uploading relates."""  
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`."""  
    deletable: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deletable') }})  
    environment: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('environment') }})
    r"""Identifies the variable values associated with the environment in which this analysis was performed."""  
    error: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Unique identifier for this analysis."""  
    ref: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ref') }})
    r"""The full Git reference, formatted as `refs/heads/<branch name>`,
    `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
    """  
    results_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('results_count') }})
    r"""The total number of results in the analysis."""  
    rules_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rules_count') }})
    r"""The total number of rules used in the analysis."""  
    sarif_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sarif_id') }})
    r"""An identifier for the upload."""  
    tool: shared_code_scanning_analysis_tool.CodeScanningAnalysisTool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tool') }})  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""The REST API URL of the analysis resource."""  
    warning: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('warning') }})
    r"""Warning generated when processing the analysis"""  
    category: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})
    r"""Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code."""  
    