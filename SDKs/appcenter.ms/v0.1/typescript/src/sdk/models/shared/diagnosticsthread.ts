/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { DiagnosticsException } from "./diagnosticsexception";
import { Expose, Type } from "class-transformer";

/**
 * programming language of the frame
 */
export enum DiagnosticsThreadFramesLanguageEnum {
  JavaScript = "JavaScript",
  CSharp = "CSharp",
  ObjectiveC = "Objective-C",
  ObjectiveCpp = "Objective-Cpp",
  Cpp = "Cpp",
  C = "C",
  Swift = "Swift",
  Java = "Java",
  Unknown = "Unknown",
}

/**
 * a single frame of a stack trace
 */
export class DiagnosticsThreadFrames extends SpeakeasyBase {
  /**
   * address of the frame
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address" })
  address?: string;

  /**
   * this line isn't from any framework
   */
  @SpeakeasyMetadata()
  @Expose({ name: "app_code" })
  appCode: boolean;

  /**
   * is a class method
   */
  @SpeakeasyMetadata()
  @Expose({ name: "class_method" })
  classMethod?: boolean;

  /**
   * name of the class
   */
  @SpeakeasyMetadata()
  @Expose({ name: "class_name" })
  className?: string;

  /**
   * Formatted frame string
   */
  @SpeakeasyMetadata()
  @Expose({ name: "code_formatted" })
  codeFormatted: string;

  /**
   * Raw frame string
   */
  @SpeakeasyMetadata()
  @Expose({ name: "code_raw" })
  codeRaw: string;

  /**
   * name of the file
   */
  @SpeakeasyMetadata()
  @Expose({ name: "file" })
  file?: string;

  /**
   * Name of the framework
   */
  @SpeakeasyMetadata()
  @Expose({ name: "framework_name" })
  frameworkName?: string;

  /**
   * programming language of the frame
   */
  @SpeakeasyMetadata()
  @Expose({ name: "language" })
  language?: DiagnosticsThreadFramesLanguageEnum;

  /**
   * line number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "line" })
  line?: number;

  /**
   * name of the method
   */
  @SpeakeasyMetadata()
  @Expose({ name: "method" })
  method?: string;

  /**
   * parameters of the frames method
   */
  @SpeakeasyMetadata()
  @Expose({ name: "method_params" })
  methodParams?: string;

  /**
   * frame should be shown always
   */
  @SpeakeasyMetadata()
  @Expose({ name: "relevant" })
  relevant?: boolean;
}

/**
 * SDK/Platform this thread is beeing generated from
 */
export enum DiagnosticsThreadPlatformEnum {
  Ios = "ios",
  Android = "android",
  Xamarin = "xamarin",
  ReactNative = "react-native",
  Ndk = "ndk",
  Unity = "unity",
  Other = "other",
}

/**
 * a thread representation
 */
export class DiagnosticsThread extends SpeakeasyBase {
  /**
   * True if this thread crashed
   */
  @SpeakeasyMetadata()
  @Expose({ name: "crashed" })
  crashed?: boolean;

  /**
   * a exception
   */
  @SpeakeasyMetadata()
  @Expose({ name: "exception" })
  @Type(() => DiagnosticsException)
  exception?: DiagnosticsException;

  /**
   * frames of that thread
   */
  @SpeakeasyMetadata({ elemType: DiagnosticsThreadFrames })
  @Expose({ name: "frames" })
  @Type(() => DiagnosticsThreadFrames)
  frames: DiagnosticsThreadFrames[];

  /**
   * SDK/Platform this thread is beeing generated from
   */
  @SpeakeasyMetadata()
  @Expose({ name: "platform" })
  platform?: DiagnosticsThreadPlatformEnum;

  /**
   * Shows if a thread is relevant or not. Is false if all frames are non relevant, otherwise true
   */
  @SpeakeasyMetadata()
  @Expose({ name: "relevant" })
  relevant?: boolean;

  /**
   * name of the thread
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title: string;
}
