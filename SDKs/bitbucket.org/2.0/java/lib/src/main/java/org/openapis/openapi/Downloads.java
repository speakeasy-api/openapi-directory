/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;

/**
 * Access the list of download links associated with the repository.
 */
public class Downloads {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Downloads(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Delete a download artifact
     * Deletes the specified download artifact from the repository.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteRepositoriesWorkspaceRepoSlugDownloadsFilenameResponse deleteRepositoriesWorkspaceRepoSlugDownloadsFilename(org.openapis.openapi.models.operations.DeleteRepositoriesWorkspaceRepoSlugDownloadsFilenameRequest request, org.openapis.openapi.models.operations.DeleteRepositoriesWorkspaceRepoSlugDownloadsFilenameSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteRepositoriesWorkspaceRepoSlugDownloadsFilenameRequest.class, baseUrl, "/repositories/{workspace}/{repo_slug}/downloads/{filename}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteRepositoriesWorkspaceRepoSlugDownloadsFilenameResponse res = new org.openapis.openapi.models.operations.DeleteRepositoriesWorkspaceRepoSlugDownloadsFilenameResponse(contentType, httpRes.statusCode()) {{
            error = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }
        else if (httpRes.statusCode() == 403 || httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.error = out;
            }
        }

        return res;
    }

    /**
     * List download artifacts
     * Returns a list of download links associated with the repository.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugDownloadsResponse getRepositoriesWorkspaceRepoSlugDownloads(org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugDownloadsRequest request, org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugDownloadsSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugDownloadsRequest.class, baseUrl, "/repositories/{workspace}/{repo_slug}/downloads", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugDownloadsResponse res = new org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugDownloadsResponse(contentType, httpRes.statusCode()) {{
            error = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.error = out;
            }
        }

        return res;
    }

    /**
     * Get a download artifact link
     * Return a redirect to the contents of a download artifact.
     * 
     * This endpoint returns the actual file contents and not the artifact's
     * metadata.
     * 
     *     $ curl -s -L https://api.bitbucket.org/2.0/repositories/evzijst/git-tests/downloads/hello.txt
     *     Hello World
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugDownloadsFilenameResponse getRepositoriesWorkspaceRepoSlugDownloadsFilename(org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugDownloadsFilenameRequest request, org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugDownloadsFilenameSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugDownloadsFilenameRequest.class, baseUrl, "/repositories/{workspace}/{repo_slug}/downloads/{filename}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugDownloadsFilenameResponse res = new org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugDownloadsFilenameResponse(contentType, httpRes.statusCode()) {{
            error = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 302) {
        }
        else if (httpRes.statusCode() == 403 || httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.error = out;
            }
        }

        return res;
    }

    /**
     * Upload a download artifact
     * Upload new download artifacts.
     * 
     * To upload files, perform a `multipart/form-data` POST containing one
     * or more `files` fields:
     * 
     *     $ echo Hello World &gt; hello.txt
     *     $ curl -s -u evzijst -X POST https://api.bitbucket.org/2.0/repositories/evzijst/git-tests/downloads -F files=@hello.txt
     * 
     * When a file is uploaded with the same name as an existing artifact,
     * then the existing file will be replaced.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRepositoriesWorkspaceRepoSlugDownloadsResponse postRepositoriesWorkspaceRepoSlugDownloads(org.openapis.openapi.models.operations.PostRepositoriesWorkspaceRepoSlugDownloadsRequest request, org.openapis.openapi.models.operations.PostRepositoriesWorkspaceRepoSlugDownloadsSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRepositoriesWorkspaceRepoSlugDownloadsRequest.class, baseUrl, "/repositories/{workspace}/{repo_slug}/downloads", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRepositoriesWorkspaceRepoSlugDownloadsResponse res = new org.openapis.openapi.models.operations.PostRepositoriesWorkspaceRepoSlugDownloadsResponse(contentType, httpRes.statusCode()) {{
            error = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 403 || httpRes.statusCode() == 406) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.error = out;
            }
        }

        return res;
    }
}