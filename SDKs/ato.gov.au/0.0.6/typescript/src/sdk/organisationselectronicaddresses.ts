/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * The registry maintains information about an organisation's contact details for administrative purposes.
 *
 * @remarks
 *
 *   Including:
 *   - an email address
 *   - a mobile number
 *
 */
export class OrganisationsElectronicAddresses {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete an electronic address
   *
   * @remarks
   * Delete an electronic address
   *
   */
  deleteOrganisationsPartyIdElectronicAddressesAddressId(
    req: operations.DeleteOrganisationsPartyIdElectronicAddressesAddressIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteOrganisationsPartyIdElectronicAddressesAddressIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DeleteOrganisationsPartyIdElectronicAddressesAddressIdRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/organisations/{partyId}/electronic-addresses/{addressId}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteOrganisationsPartyIdElectronicAddressesAddressIdResponse =
        new operations.DeleteOrganisationsPartyIdElectronicAddressesAddressIdResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 204:
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unauthenticated = utils.objectToClass(
              httpRes?.data,
              shared.Unauthenticated
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notFound = utils.objectToClass(httpRes?.data, shared.NotFound);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve a list of electronic addresses
   */
  getOrganisationsPartyIdElectronicAddresses(
    req: operations.GetOrganisationsPartyIdElectronicAddressesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetOrganisationsPartyIdElectronicAddressesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetOrganisationsPartyIdElectronicAddressesRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/organisations/{partyId}/electronic-addresses",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetOrganisationsPartyIdElectronicAddressesResponse =
        new operations.GetOrganisationsPartyIdElectronicAddressesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.electronicAddresses = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.electronicAddresses = utils.objectToClass(
              httpRes?.data,
              shared.ElectronicAddress,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unauthenticated = utils.objectToClass(
              httpRes?.data,
              shared.Unauthenticated
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notFound = utils.objectToClass(httpRes?.data, shared.NotFound);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve an electronic address
   *
   * @remarks
   * Retrieve an electronic address
   *
   */
  getOrganisationsPartyIdElectronicAddressesAddressId(
    req: operations.GetOrganisationsPartyIdElectronicAddressesAddressIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetOrganisationsPartyIdElectronicAddressesAddressIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetOrganisationsPartyIdElectronicAddressesAddressIdRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/organisations/{partyId}/electronic-addresses/{addressId}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetOrganisationsPartyIdElectronicAddressesAddressIdResponse =
        new operations.GetOrganisationsPartyIdElectronicAddressesAddressIdResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.electronicAddress = utils.objectToClass(
              httpRes?.data,
              shared.ElectronicAddress
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unauthenticated = utils.objectToClass(
              httpRes?.data,
              shared.Unauthenticated
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notFound = utils.objectToClass(httpRes?.data, shared.NotFound);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create an electronic address
   *
   * @remarks
   * Create an electronic address
   *
   */
  postOrganisationsPartyIdElectronicAddresses(
    req: operations.PostOrganisationsPartyIdElectronicAddressesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostOrganisationsPartyIdElectronicAddressesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostOrganisationsPartyIdElectronicAddressesRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/organisations/{partyId}/electronic-addresses",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "electronicAddressInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostOrganisationsPartyIdElectronicAddressesResponse =
        new operations.PostOrganisationsPartyIdElectronicAddressesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.electronicAddress = utils.objectToClass(
              httpRes?.data,
              shared.ElectronicAddress
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArgument = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArgument
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unauthenticated = utils.objectToClass(
              httpRes?.data,
              shared.Unauthenticated
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update an electronic address
   *
   * @remarks
   * Update an electronic address
   *
   */
  putOrganisationsPartyIdElectronicAddressesAddressId(
    req: operations.PutOrganisationsPartyIdElectronicAddressesAddressIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutOrganisationsPartyIdElectronicAddressesAddressIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PutOrganisationsPartyIdElectronicAddressesAddressIdRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/organisations/{partyId}/electronic-addresses/{addressId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "electronicAddressInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutOrganisationsPartyIdElectronicAddressesAddressIdResponse =
        new operations.PutOrganisationsPartyIdElectronicAddressesAddressIdResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.electronicAddress = utils.objectToClass(
              httpRes?.data,
              shared.ElectronicAddress
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArgument = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArgument
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unauthenticated = utils.objectToClass(
              httpRes?.data,
              shared.Unauthenticated
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notFound = utils.objectToClass(httpRes?.data, shared.NotFound);
          }
          break;
      }

      return res;
    });
  }
}
