// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETModifyTrafficMirrorFilterNetworkServicesActionEnum
type GETModifyTrafficMirrorFilterNetworkServicesActionEnum string

const (
	GETModifyTrafficMirrorFilterNetworkServicesActionEnumModifyTrafficMirrorFilterNetworkServices GETModifyTrafficMirrorFilterNetworkServicesActionEnum = "ModifyTrafficMirrorFilterNetworkServices"
)

func (e GETModifyTrafficMirrorFilterNetworkServicesActionEnum) ToPointer() *GETModifyTrafficMirrorFilterNetworkServicesActionEnum {
	return &e
}

func (e *GETModifyTrafficMirrorFilterNetworkServicesActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ModifyTrafficMirrorFilterNetworkServices":
		*e = GETModifyTrafficMirrorFilterNetworkServicesActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyTrafficMirrorFilterNetworkServicesActionEnum: %v", v)
	}
}

type GETModifyTrafficMirrorFilterNetworkServicesAddNetworkServiceEnum string

const (
	GETModifyTrafficMirrorFilterNetworkServicesAddNetworkServiceEnumAmazonDNS GETModifyTrafficMirrorFilterNetworkServicesAddNetworkServiceEnum = "amazon-dns"
)

func (e GETModifyTrafficMirrorFilterNetworkServicesAddNetworkServiceEnum) ToPointer() *GETModifyTrafficMirrorFilterNetworkServicesAddNetworkServiceEnum {
	return &e
}

func (e *GETModifyTrafficMirrorFilterNetworkServicesAddNetworkServiceEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amazon-dns":
		*e = GETModifyTrafficMirrorFilterNetworkServicesAddNetworkServiceEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyTrafficMirrorFilterNetworkServicesAddNetworkServiceEnum: %v", v)
	}
}

type GETModifyTrafficMirrorFilterNetworkServicesRemoveNetworkServiceEnum string

const (
	GETModifyTrafficMirrorFilterNetworkServicesRemoveNetworkServiceEnumAmazonDNS GETModifyTrafficMirrorFilterNetworkServicesRemoveNetworkServiceEnum = "amazon-dns"
)

func (e GETModifyTrafficMirrorFilterNetworkServicesRemoveNetworkServiceEnum) ToPointer() *GETModifyTrafficMirrorFilterNetworkServicesRemoveNetworkServiceEnum {
	return &e
}

func (e *GETModifyTrafficMirrorFilterNetworkServicesRemoveNetworkServiceEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amazon-dns":
		*e = GETModifyTrafficMirrorFilterNetworkServicesRemoveNetworkServiceEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyTrafficMirrorFilterNetworkServicesRemoveNetworkServiceEnum: %v", v)
	}
}

// GETModifyTrafficMirrorFilterNetworkServicesVersionEnum
type GETModifyTrafficMirrorFilterNetworkServicesVersionEnum string

const (
	GETModifyTrafficMirrorFilterNetworkServicesVersionEnumTwoThousandAndSixteen1115 GETModifyTrafficMirrorFilterNetworkServicesVersionEnum = "2016-11-15"
)

func (e GETModifyTrafficMirrorFilterNetworkServicesVersionEnum) ToPointer() *GETModifyTrafficMirrorFilterNetworkServicesVersionEnum {
	return &e
}

func (e *GETModifyTrafficMirrorFilterNetworkServicesVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = GETModifyTrafficMirrorFilterNetworkServicesVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyTrafficMirrorFilterNetworkServicesVersionEnum: %v", v)
	}
}

type GETModifyTrafficMirrorFilterNetworkServicesRequest struct {
	Action GETModifyTrafficMirrorFilterNetworkServicesActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The network service, for example Amazon DNS, that you want to mirror.
	AddNetworkService []GETModifyTrafficMirrorFilterNetworkServicesAddNetworkServiceEnum `queryParam:"style=form,explode=true,name=AddNetworkService"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The network service, for example Amazon DNS, that you no longer want to mirror.
	RemoveNetworkService []GETModifyTrafficMirrorFilterNetworkServicesRemoveNetworkServiceEnum `queryParam:"style=form,explode=true,name=RemoveNetworkService"`
	// The ID of the Traffic Mirror filter.
	TrafficMirrorFilterID string                                                 `queryParam:"style=form,explode=true,name=TrafficMirrorFilterId"`
	Version               GETModifyTrafficMirrorFilterNetworkServicesVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm         *string                                                `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256     *string                                                `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential        *string                                                `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate              *string                                                `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken     *string                                                `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature         *string                                                `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders     *string                                                `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETModifyTrafficMirrorFilterNetworkServicesResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
