/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Category } from "./category";
import { EmbedSettings } from "./embedsettings";
import { Picture } from "./picture";
import { Tag } from "./tag";
import { User } from "./user";
import { Expose, Type } from "class-transformer";

/**
 * The contextual action:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `Added to` - An Added To action.
 *  * `Appearance by` - An Appearance By action.
 *  * `Liked by` - A Liked By action.
 *  * `Uploaded by` - An Unloaded By action.
 *
 */
export enum VideoContextActionEnum {
  AddedTo = "Added to",
  AppearanceBy = "Appearance by",
  LikedBy = "Liked by",
  UploadedBy = "Uploaded by",
}

/**
 * The context of the video's subscription, if this video is part of a subscription.
 */
export class VideoContext extends SpeakeasyBase {
  /**
   * The contextual action:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `Added to` - An Added To action.
   *  * `Appearance by` - An Appearance By action.
   *  * `Liked by` - A Liked By action.
   *  * `Uploaded by` - An Unloaded By action.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "action" })
  action: VideoContextActionEnum;

  /**
   * The contextual resource: a user, group, or channel representation, or an object of a tag.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resource" })
  resource: Record<string, any>;

  /**
   * The contextual resource type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resource_type" })
  resourceType: string;
}

/**
 * The [Creative Commons](http://creativecommons.org/licenses/) license used for the video:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `by` - Attribution
 *  * `by-nc` - Attribution Non-Commercial
 *  * `by-nc-nd` - Attribution Non-Commercial No Derivatives
 *  * `by-nc-sa` - Attribution Non-Commercial Share Alike
 *  * `by-nd` - Attribution No Derivatives
 *  * `by-sa` - Attribution Share Alike
 *  * `cc0` - Public Domain Dedication
 *
 */
export enum VideoLicenseEnum {
  By = "by",
  ByNc = "by-nc",
  ByNcNd = "by-nc-nd",
  ByNcSa = "by-nc-sa",
  ByNd = "by-nd",
  BySa = "by-sa",
  Cc0 = "cc0",
}

/**
 * Information about the comments on this video.
 */
export class VideoMetadataConnectionsComments extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of comments on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the users credited in this video.
 */
export class VideoMetadataConnectionsCredits extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options?: string[];

  /**
   * The total number of users on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total?: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri?: string;
}

/**
 * Information about the users who have liked this video.
 */
export class VideoMetadataConnectionsLikes extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of likes on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this video's ondemand data.
 */
export class VideoMetadataConnectionsOndemand extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The On Demand connection resource key.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resource_key" })
  resourceKey: string;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this video's thumbnails.
 */
export class VideoMetadataConnectionsPictures extends SpeakeasyBase {
  /**
   * An array of HTTP methods allowed on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * Total number of thumbnails on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * The DRM playback status connection for this video.
 */
export class VideoMetadataConnectionsPlayback extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * The recommendations for this video.
 */
export class VideoMetadataConnectionsRecommendations extends SpeakeasyBase {
  /**
   * An array of HTTP methods allowed on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options?: string[];

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri?: string;
}

/**
 * Related content for this video.
 */
export class VideoMetadataConnectionsRelated extends SpeakeasyBase {
  /**
   * An array of HTTP methods allowed on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options?: string[];

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri?: string;
}

/**
 * Information about the video's season.
 */
export class VideoMetadataConnectionsSeason extends SpeakeasyBase {
  /**
   * The name of this season.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this video's text tracks.
 */
export class VideoMetadataConnectionsTexttracks extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of text tracks on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this video's VOD trailer.
 */
export class VideoMetadataConnectionsTrailer extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The trailer connection resource key.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resource_key" })
  resourceKey: string;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the user privacy of this video, if the video privacy is `users`.
 */
export class VideoMetadataConnectionsUsersWithAccess extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of users on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the versions of this video.
 */
export class VideoMetadataConnectionsVersions extends SpeakeasyBase {
  /**
   * The URI of the current version of the video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "current_uri" })
  currentUri?: string;

  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of versions on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * A list of resource URIs related to the video.
 */
export class VideoMetadataConnections extends SpeakeasyBase {
  /**
   * Information about the comments on this video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "comments" })
  @Type(() => VideoMetadataConnectionsComments)
  comments: VideoMetadataConnectionsComments;

  /**
   * Information about the users credited in this video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "credits" })
  @Type(() => VideoMetadataConnectionsCredits)
  credits: VideoMetadataConnectionsCredits;

  /**
   * Information about the users who have liked this video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "likes" })
  @Type(() => VideoMetadataConnectionsLikes)
  likes: VideoMetadataConnectionsLikes;

  /**
   * Information about this video's ondemand data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ondemand" })
  @Type(() => VideoMetadataConnectionsOndemand)
  ondemand: VideoMetadataConnectionsOndemand;

  /**
   * Information about this video's thumbnails.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pictures" })
  @Type(() => VideoMetadataConnectionsPictures)
  pictures: VideoMetadataConnectionsPictures;

  /**
   * The DRM playback status connection for this video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "playback" })
  @Type(() => VideoMetadataConnectionsPlayback)
  playback: VideoMetadataConnectionsPlayback;

  /**
   * The recommendations for this video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recommendations" })
  @Type(() => VideoMetadataConnectionsRecommendations)
  recommendations: VideoMetadataConnectionsRecommendations;

  /**
   * Related content for this video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "related" })
  @Type(() => VideoMetadataConnectionsRelated)
  related: VideoMetadataConnectionsRelated;

  /**
   * Information about the video's season.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "season" })
  @Type(() => VideoMetadataConnectionsSeason)
  season: VideoMetadataConnectionsSeason;

  /**
   * Information about this video's text tracks.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "texttracks" })
  @Type(() => VideoMetadataConnectionsTexttracks)
  texttracks: VideoMetadataConnectionsTexttracks;

  /**
   * Information about this video's VOD trailer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "trailer" })
  @Type(() => VideoMetadataConnectionsTrailer)
  trailer: VideoMetadataConnectionsTrailer;

  /**
   * Information about the user privacy of this video, if the video privacy is `users`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "users_with_access" })
  @Type(() => VideoMetadataConnectionsUsersWithAccess)
  usersWithAccess: VideoMetadataConnectionsUsersWithAccess;

  /**
   * Information about the versions of this video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "versions" })
  @Type(() => VideoMetadataConnectionsVersions)
  versions: VideoMetadataConnectionsVersions;
}

/**
 * The user's download access to this On Demand video:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `available` - The video is available for download.
 *  * `purchased` - The user has purchased the video.
 *  * `restricted` - The user isn't permitted to download the video.
 *  * `unavailable` - The video isn't available for download.
 *
 */
export enum VideoMetadataInteractionsBuyDownloadEnum {
  Available = "available",
  Purchased = "purchased",
  Restricted = "restricted",
  Unavailable = "unavailable",
}

/**
 * The user's streaming access to this On Demand video:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `available` - The video is available for streaming.
 *  * `purchased` - The user has purchased the video.
 *  * `restricted` - The user isn't permitted to stream the video.
 *  * `unavailable` - The video isn't available for streaming
 *
 */
export enum VideoMetadataInteractionsBuyStreamEnum {
  Available = "available",
  Purchased = "purchased",
  Restricted = "restricted",
  Unavailable = "unavailable",
}

/**
 * The Buy interaction for a On Demand video.
 */
export class VideoMetadataInteractionsBuy extends SpeakeasyBase {
  /**
   * The currency code for the current user's region.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency: string;

  /**
   * Formatted price to display to buy an On Demand video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "display_price" })
  displayPrice: string;

  /**
   * The user's download access to this On Demand video:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `available` - The video is available for download.
   *  * `purchased` - The user has purchased the video.
   *  * `restricted` - The user isn't permitted to download the video.
   *  * `unavailable` - The video isn't available for download.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "download" })
  download: VideoMetadataInteractionsBuyDownloadEnum;

  /**
   * Whether the video has DRM.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "drm" })
  drm: boolean;

  /**
   * The URL to buy the On Demand video on Vimeo.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "link" })
  link: string;

  /**
   * The numeric value of the price for buying the On Demand video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "price" })
  price: number;

  /**
   * The time in ISO 8601 format when the On Demand video was purchased.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "purchase_time" })
  purchaseTime: string;

  /**
   * The user's streaming access to this On Demand video:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `available` - The video is available for streaming.
   *  * `purchased` - The user has purchased the video.
   *  * `restricted` - The user isn't permitted to stream the video.
   *  * `unavailable` - The video isn't available for streaming
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stream" })
  stream: VideoMetadataInteractionsBuyStreamEnum;

  /**
   * The product URI to purchase the On Demand video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * When a video is referenced by a channel URI, if the user is a moderator of the channel, include information about removing the video from the channel.
 */
export class VideoMetadataInteractionsChannel extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about whether the authenticated user has liked this video.
 */
export class VideoMetadataInteractionsLike extends SpeakeasyBase {
  /**
   * Whether the user has liked the video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "added" })
  added: boolean;

  /**
   * The time in ISO 8601 format when the user liked the video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "added_time" })
  addedTime: string;

  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * The user's streaming access to this On Demand video:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `available` - The video is available for streaming.
 *  * `purchased` - The user has purchased the video.
 *  * `restricted` - The user isn't permitted to stream the video.
 *  * `unavailable` - The video isn't available for streaming.
 *
 */
export enum VideoMetadataInteractionsRentStreamEnum {
  Available = "available",
  Purchased = "purchased",
  Restricted = "restricted",
  Unavailable = "unavailable",
}

/**
 * The Rent interaction for an On Demand video.
 */
export class VideoMetadataInteractionsRent extends SpeakeasyBase {
  /**
   * The currency code for the current user's region.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency: string;

  /**
   * Formatted price to display to rent an On Demand video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "display_price" })
  displayPrice: string;

  /**
   * Whether the video has DRM.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "drm" })
  drm: boolean;

  /**
   * The time in ISO 8601 format when the rental period for the video expires.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expires_time" })
  expiresTime: string;

  /**
   * The URL to rent the On Demand video on Vimeo.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "link" })
  link: string;

  /**
   * The numeric value of the price for buying the On Demand video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "price" })
  price: number;

  /**
   * The time in ISO 8601 format when the On Demand video was rented.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "purchase_time" })
  purchaseTime: string;

  /**
   * The user's streaming access to this On Demand video:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `available` - The video is available for streaming.
   *  * `purchased` - The user has purchased the video.
   *  * `restricted` - The user isn't permitted to stream the video.
   *  * `unavailable` - The video isn't available for streaming.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stream" })
  stream: VideoMetadataInteractionsRentStreamEnum;

  /**
   * The product URI to rent the On Demand video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about where and how to report a video.
 */
export class VideoMetadataInteractionsReport extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * A list of valid reasons for reporting a video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reason" })
  reason: string[];

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Subscription information for an On Demand video.
 */
export class VideoMetadataInteractionsSubscribe extends SpeakeasyBase {
  /**
   * Whether the video has DRM.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "drm" })
  drm?: boolean;

  /**
   * The time in ISO 8601 format when the subscription expires.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expires_time" })
  expiresTime?: string;

  /**
   * The tine in ISO 8601 format when the subscription was purchased.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "purchase_time" })
  purchaseTime?: string;

  /**
   * The stream type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stream" })
  stream?: string;
}

/**
 * Information about removing this video from the user's list of watched videos.
 */
export class VideoMetadataInteractionsWatched extends SpeakeasyBase {
  /**
   * Whether the user has watched the video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "added" })
  added: boolean;

  /**
   * The time in ISO 8601 format when the user watched the video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "added_time" })
  addedTime: string;

  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about whether this video appears on the authenticated user's Watch Later list.
 */
export class VideoMetadataInteractionsWatchlater extends SpeakeasyBase {
  /**
   * Whether the user has added the video to their Watch later list.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "added" })
  added: boolean;

  /**
   * The time in ISO 8601 format when the user added the video to their Watch Later list.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "added_time" })
  addedTime: string;

  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * A list of resource URIs related to the video.
 */
export class VideoMetadataInteractions extends SpeakeasyBase {
  /**
   * The Buy interaction for a On Demand video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "buy" })
  @Type(() => VideoMetadataInteractionsBuy)
  buy: VideoMetadataInteractionsBuy;

  /**
   * When a video is referenced by a channel URI, if the user is a moderator of the channel, include information about removing the video from the channel.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channel" })
  @Type(() => VideoMetadataInteractionsChannel)
  channel: VideoMetadataInteractionsChannel;

  /**
   * Information about whether the authenticated user has liked this video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "like" })
  @Type(() => VideoMetadataInteractionsLike)
  like: VideoMetadataInteractionsLike;

  /**
   * The Rent interaction for an On Demand video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rent" })
  @Type(() => VideoMetadataInteractionsRent)
  rent: VideoMetadataInteractionsRent;

  /**
   * Information about where and how to report a video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "report" })
  @Type(() => VideoMetadataInteractionsReport)
  report: VideoMetadataInteractionsReport;

  /**
   * Subscription information for an On Demand video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subscribe" })
  @Type(() => VideoMetadataInteractionsSubscribe)
  subscribe?: VideoMetadataInteractionsSubscribe;

  /**
   * Information about removing this video from the user's list of watched videos.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "watched" })
  @Type(() => VideoMetadataInteractionsWatched)
  watched: VideoMetadataInteractionsWatched;

  /**
   * Information about whether this video appears on the authenticated user's Watch Later list.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "watchlater" })
  @Type(() => VideoMetadataInteractionsWatchlater)
  watchlater: VideoMetadataInteractionsWatchlater;
}

/**
 * The video's metadata.
 */
export class VideoMetadata extends SpeakeasyBase {
  /**
   * A list of resource URIs related to the video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "connections" })
  @Type(() => VideoMetadataConnections)
  connections: VideoMetadataConnections;

  /**
   * A list of resource URIs related to the video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "interactions" })
  @Type(() => VideoMetadataInteractions)
  interactions: VideoMetadataInteractions;
}

/**
 * A standard connection object indicating how to get all the videos in this project.
 */
export class VideoProjectMetadataConnectionsVideos extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of videos on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * A list of resource URIs related to the project.
 */
export class VideoProjectMetadataConnections extends SpeakeasyBase {
  /**
   * A standard connection object indicating how to get all the videos in this project.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "videos" })
  @Type(() => VideoProjectMetadataConnectionsVideos)
  videos: VideoProjectMetadataConnectionsVideos;
}

/**
 * The project's metadata.
 */
export class VideoProjectMetadata extends SpeakeasyBase {
  /**
   * A list of resource URIs related to the project.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "connections" })
  @Type(() => VideoProjectMetadataConnections)
  connections: VideoProjectMetadataConnections;
}

/**
 * Information about the folder that contains this video.
 */
export class VideoProject extends SpeakeasyBase {
  /**
   * The time in ISO 8601 format when the project was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_time" })
  createdTime: string;

  /**
   * The project's metadata.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  @Type(() => VideoProjectMetadata)
  metadata: VideoProjectMetadata;

  /**
   * The time in ISO 8601 format when the project was last modified.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "modified_time" })
  modifiedTime: string;

  /**
   * The name of the folder.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * The resource key string of the project.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resource_key" })
  resourceKey: string;

  /**
   * The URI of the project.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;

  /**
   * The owner of the project.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  @Type(() => User)
  user: User;
}

/**
 * Who can comment on the video:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `anybody` - Anyone can comment on the video.
 *  * `contacts` - Only contacts can comment on the video.
 *  * `nobody` - No one can comment on the video.
 *
 */
export enum VideoPrivacyCommentsEnum {
  Anybody = "anybody",
  Contacts = "contacts",
  Nobody = "nobody",
}

/**
 * The video's embed permission setting:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `private` - The video is private.
 *  * `public` - Anyone can embed the video.
 *
 */
export enum VideoPrivacyEmbedEnum {
  Private = "private",
  Public = "public",
}

/**
 * The general privacy setting for the video:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `anybody` - Anyone can view the video.
 *  * `contacts` - Only contacts can view the video.
 *  * `disable` - Hide from vimeo
 *  * `nobody` - No one besides the owner can view the video.
 *  * `password` - Anyone with the video's password can view the video.
 *  * `unlisted` - Not searchable from vimeo.com
 *  * `users` - Only people with a Vimeo account can view the video.
 *
 */
export enum VideoPrivacyViewEnum {
  Anybody = "anybody",
  Contacts = "contacts",
  Disable = "disable",
  Nobody = "nobody",
  Password = "password",
  Unlisted = "unlisted",
  Users = "users",
}

/**
 * The video's privacy setting.
 */
export class VideoPrivacy extends SpeakeasyBase {
  /**
   * Whether the video can be added to collections.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "add" })
  add: boolean;

  /**
   * Who can comment on the video:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `anybody` - Anyone can comment on the video.
   *  * `contacts` - Only contacts can comment on the video.
   *  * `nobody` - No one can comment on the video.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "comments" })
  comments: VideoPrivacyCommentsEnum;

  /**
   * The video's download permission setting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "download" })
  download: boolean;

  /**
   * The video's embed permission setting:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `private` - The video is private.
   *  * `public` - Anyone can embed the video.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "embed" })
  embed: VideoPrivacyEmbedEnum;

  /**
   * The general privacy setting for the video:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `anybody` - Anyone can view the video.
   *  * `contacts` - Only contacts can view the video.
   *  * `disable` - Hide from vimeo
   *  * `nobody` - No one besides the owner can view the video.
   *  * `password` - Anyone with the video's password can view the video.
   *  * `unlisted` - Not searchable from vimeo.com
   *  * `users` - Only people with a Vimeo account can view the video.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "view" })
  view: VideoPrivacyViewEnum;
}

export class VideoSpatialDirectorTimeline extends SpeakeasyBase {
  /**
   * The director timeline pitch, from -90 (minimum) to 90 (maximum).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pitch" })
  pitch?: number;

  /**
   * The director timeline roll.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "roll" })
  roll?: number;

  /**
   * The director timeline time code.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "time_code" })
  timeCode?: number;

  /**
   * The director timeline yaw, from 0 (minimum) to 360 (maximum).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "yaw" })
  yaw?: number;
}

/**
 * The 360 spatial projection:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `cubical` - The spatial projection is cubical.
 *  * `cylindrical` - The spatial projection is cylindrical.
 *  * `dome` - The spatial projection is dome-shaped.
 *  * `equirectangular` - The spatial projection is equirectangular.
 *  * `pyramid` - The spatial projection is pyramid-shaped.
 *
 */
export enum VideoSpatialProjectionEnum {
  Cubical = "cubical",
  Cylindrical = "cylindrical",
  Dome = "dome",
  Equirectangular = "equirectangular",
  Pyramid = "pyramid",
}

/**
 * The 360 stereo format:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `left-right` - The stereo format is left-right.
 *  * `mono` - The audio is monaural.
 *  * `top-bottom` - The stereo format is top-bottom.
 *
 */
export enum VideoSpatialStereoFormatEnum {
  LeftRight = "left-right",
  Mono = "mono",
  TopBottom = "top-bottom",
}

/**
 * 360 spatial data.
 */
export class VideoSpatial extends SpeakeasyBase {
  /**
   * 360 director timeline.
   */
  @SpeakeasyMetadata({ elemType: VideoSpatialDirectorTimeline })
  @Expose({ name: "director_timeline" })
  @Type(() => VideoSpatialDirectorTimeline)
  directorTimeline: VideoSpatialDirectorTimeline[];

  /**
   * The 360 field of view, from 30 (minimum) to 90 (maximum). The default is 50.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "field_of_view" })
  fieldOfView: number;

  /**
   * The 360 spatial projection:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `cubical` - The spatial projection is cubical.
   *  * `cylindrical` - The spatial projection is cylindrical.
   *  * `dome` - The spatial projection is dome-shaped.
   *  * `equirectangular` - The spatial projection is equirectangular.
   *  * `pyramid` - The spatial projection is pyramid-shaped.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "projection" })
  projection: VideoSpatialProjectionEnum;

  /**
   * The 360 stereo format:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `left-right` - The stereo format is left-right.
   *  * `mono` - The audio is monaural.
   *  * `top-bottom` - The stereo format is top-bottom.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stereo_format" })
  stereoFormat: VideoSpatialStereoFormatEnum;
}

/**
 * A collection of stats associated with this video.
 */
export class VideoStats extends SpeakeasyBase {
  /**
   * The current total number of times that the video has been played.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "plays" })
  plays: number;
}

/**
 * The status code for the availability of the video. This field is deprecated in favor of `upload` and `transcode`.
 *
 * @remarks
 *
 * Option descriptions:
 *  * `available` - The video is available.
 *  * `quota_exceeded` - The user's quota is exceeded with this video.
 *  * `total_cap_exceeded` - The user has exceeded their total cap with this video.
 *  * `transcode_starting` - Transcoding is beginning for the video.
 *  * `transcoding` - Transcoding is underway for the video.
 *  * `transcoding_error` - There was an error in transcoding the video.
 *  * `unavailable` - The video is unavailable.
 *  * `uploading` - The video is being uploaded.
 *  * `uploading_error` - There was an error in uploading the video.
 *
 */
export enum VideoStatusEnum {
  Available = "available",
  QuotaExceeded = "quota_exceeded",
  TotalCapExceeded = "total_cap_exceeded",
  TranscodeStarting = "transcode_starting",
  Transcoding = "transcoding",
  TranscodingError = "transcoding_error",
  Unavailable = "unavailable",
  Uploading = "uploading",
  UploadingError = "uploading_error",
}

/**
 * Status code for this video's availability.
 */
export enum VideoTranscodeStatusEnum {
  Complete = "complete",
  Error = "error",
  InProgress = "in_progress",
}

/**
 * The transcode information for a video upload.
 */
export class VideoTranscode extends SpeakeasyBase {
  /**
   * Status code for this video's availability.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: VideoTranscodeStatusEnum;
}

/**
 * The approach for uploading the video.
 */
export enum VideoUploadApproachEnum {
  Post = "post",
  Pull = "pull",
  Streaming = "streaming",
  Tus = "tus",
}

/**
 * The status code for the availability of the uploaded video:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `complete` - The upload is complete.
 *  * `error` - The upload ended with an error.
 *  * `in_progress` - The upload is underway.
 *
 */
export enum VideoUploadStatusEnum {
  Complete = "complete",
  Error = "error",
  InProgress = "in_progress",
}

/**
 * The upload information for this video.
 */
export class VideoUpload extends SpeakeasyBase {
  /**
   * The approach for uploading the video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "approach" })
  approach?: VideoUploadApproachEnum;

  /**
   * The URI for completing the upload.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "complete_uri" })
  completeUri?: string;

  /**
   * The HTML form for uploading a video through the post approach.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "form" })
  form?: string;

  /**
   * The link of the video to capture through the pull approach.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "link" })
  link?: string;

  /**
   * The redirect URL for the upload app.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "redirect_url" })
  redirectUrl?: string;

  /**
   * The file size in bytes of the uploaded video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "size" })
  size?: number;

  /**
   * The status code for the availability of the uploaded video:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `complete` - The upload is complete.
   *  * `error` - The upload ended with an error.
   *  * `in_progress` - The upload is underway.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: VideoUploadStatusEnum;

  /**
   * The link for sending video file data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "upload_link" })
  uploadLink?: string;
}

/**
 * The user's account type:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `basic` - The user has a Vimeo Basic subscription.
 *  * `business` - The user has a Vimeo Business subscription.
 *  * `live_business` - The user has a Vimeo Business Live subscription.
 *  * `live_premium` - The user has a Vimeo Premium subscription.
 *  * `live_pro` - The user has a Vimeo PRO Live subscription.
 *  * `plus` - The user has a Vimeo Plus subscription.
 *  * `pro` - The user has a Vimeo Pro subscription.
 *  * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
 *  * `producer` - The user has a Vimeo Producer subscription.
 *
 */
export enum VideoUserAccountEnum {
  Basic = "basic",
  Business = "business",
  LiveBusiness = "live_business",
  LivePremium = "live_premium",
  LivePro = "live_pro",
  Plus = "plus",
  Pro = "pro",
  ProUnlimited = "pro_unlimited",
  Producer = "producer",
}

/**
 * The user's content filters:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `drugs` - Drugs or alcohol use.
 *  * `language` - Profanity or sexually suggestive content.
 *  * `nudity` - Nudity.
 *  * `safe` - Suitable for all audiences.
 *  * `unrated` - No rating.
 *  * `violence` - Violent or graphic content.
 *
 */
export enum VideoUserContentFilterEnum {
  Drugs = "drugs",
  Language = "language",
  Nudity = "nudity",
  Safe = "safe",
  Unrated = "unrated",
  Violence = "violence",
}

/**
 * Information about the albums created by this user.
 */
export class VideoUserMetadataConnectionsAlbums extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of albums on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the appearances of this user in other videos.
 */
export class VideoUserMetadataConnectionsAppearances extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of appearances on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information on the users that the current user has blocked. This data requires a bearer token with the `private` scope.
 */
export class VideoUserMetadataConnectionsBlock extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of blocked users on this connection. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this user's followed categories.
 */
export class VideoUserMetadataConnectionsCategories extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of categories on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this user's subscribed channels.
 */
export class VideoUserMetadataConnectionsChannels extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of channels on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this user's feed.
 */
export class VideoUserMetadataConnectionsFeed extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this user's folders.
 */
export class VideoUserMetadataConnectionsFolders extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of folders on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the user's followers.
 */
export class VideoUserMetadataConnectionsFollowers extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of followers on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the users that the current user is following.
 */
export class VideoUserMetadataConnectionsFollowing extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of users on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the groups created by this user.
 */
export class VideoUserMetadataConnectionsGroups extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of groups on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the videos that this user has liked.
 */
export class VideoUserMetadataConnectionsLikes extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of likes on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the channels that this user moderates.
 */
export class VideoUserMetadataConnectionsModeratedChannels extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of channels on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this user's portraits.
 */
export class VideoUserMetadataConnectionsPictures extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of pictures on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this user's portfolios.
 */
export class VideoUserMetadataConnectionsPortfolios extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of portfolios on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * A collection of recommended channels for the current user to follow. This data requires a bearer token with the `private` scope.
 */
export class VideoUserMetadataConnectionsRecommendedChannels extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of channels on this connection. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * A Collection of recommended users for the current user to follow. This data requires a bearer token with the `private` scope.
 */
export class VideoUserMetadataConnectionsRecommendedUsers extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of users on this connection. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the videos that have been shared with this user.
 */
export class VideoUserMetadataConnectionsShared extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of videos on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the videos uploaded by this user.
 */
export class VideoUserMetadataConnectionsVideos extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of videos on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the videos that this user has watched.
 */
export class VideoUserMetadataConnectionsWatchedVideos extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of videos on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the videos that this user wants to watch later.
 */
export class VideoUserMetadataConnectionsWatchlater extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of videos on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * The list of resource URIs related to the user.
 */
export class VideoUserMetadataConnections extends SpeakeasyBase {
  /**
   * Information about the albums created by this user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "albums" })
  @Type(() => VideoUserMetadataConnectionsAlbums)
  albums: VideoUserMetadataConnectionsAlbums;

  /**
   * Information about the appearances of this user in other videos.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "appearances" })
  @Type(() => VideoUserMetadataConnectionsAppearances)
  appearances: VideoUserMetadataConnectionsAppearances;

  /**
   * Information on the users that the current user has blocked. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "block" })
  @Type(() => VideoUserMetadataConnectionsBlock)
  block: VideoUserMetadataConnectionsBlock;

  /**
   * Information about this user's followed categories.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "categories" })
  @Type(() => VideoUserMetadataConnectionsCategories)
  categories: VideoUserMetadataConnectionsCategories;

  /**
   * Information about this user's subscribed channels.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channels" })
  @Type(() => VideoUserMetadataConnectionsChannels)
  channels: VideoUserMetadataConnectionsChannels;

  /**
   * Information about this user's feed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "feed" })
  @Type(() => VideoUserMetadataConnectionsFeed)
  feed: VideoUserMetadataConnectionsFeed;

  /**
   * Information about this user's folders.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "folders" })
  @Type(() => VideoUserMetadataConnectionsFolders)
  folders: VideoUserMetadataConnectionsFolders;

  /**
   * Information about the user's followers.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "followers" })
  @Type(() => VideoUserMetadataConnectionsFollowers)
  followers: VideoUserMetadataConnectionsFollowers;

  /**
   * Information about the users that the current user is following.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "following" })
  @Type(() => VideoUserMetadataConnectionsFollowing)
  following: VideoUserMetadataConnectionsFollowing;

  /**
   * Information about the groups created by this user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "groups" })
  @Type(() => VideoUserMetadataConnectionsGroups)
  groups: VideoUserMetadataConnectionsGroups;

  /**
   * Information about the videos that this user has liked.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "likes" })
  @Type(() => VideoUserMetadataConnectionsLikes)
  likes: VideoUserMetadataConnectionsLikes;

  /**
   * Information about the channels that this user moderates.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "moderated_channels" })
  @Type(() => VideoUserMetadataConnectionsModeratedChannels)
  moderatedChannels: VideoUserMetadataConnectionsModeratedChannels;

  /**
   * Information about this user's portraits.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pictures" })
  @Type(() => VideoUserMetadataConnectionsPictures)
  pictures: VideoUserMetadataConnectionsPictures;

  /**
   * Information about this user's portfolios.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "portfolios" })
  @Type(() => VideoUserMetadataConnectionsPortfolios)
  portfolios: VideoUserMetadataConnectionsPortfolios;

  /**
   * A collection of recommended channels for the current user to follow. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recommended_channels" })
  @Type(() => VideoUserMetadataConnectionsRecommendedChannels)
  recommendedChannels: VideoUserMetadataConnectionsRecommendedChannels;

  /**
   * A Collection of recommended users for the current user to follow. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recommended_users" })
  @Type(() => VideoUserMetadataConnectionsRecommendedUsers)
  recommendedUsers: VideoUserMetadataConnectionsRecommendedUsers;

  /**
   * Information about the videos that have been shared with this user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shared" })
  @Type(() => VideoUserMetadataConnectionsShared)
  shared: VideoUserMetadataConnectionsShared;

  /**
   * Information about the videos uploaded by this user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "videos" })
  @Type(() => VideoUserMetadataConnectionsVideos)
  videos: VideoUserMetadataConnectionsVideos;

  /**
   * Information about the videos that this user has watched.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "watched_videos" })
  @Type(() => VideoUserMetadataConnectionsWatchedVideos)
  watchedVideos: VideoUserMetadataConnectionsWatchedVideos;

  /**
   * Information about the videos that this user wants to watch later.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "watchlater" })
  @Type(() => VideoUserMetadataConnectionsWatchlater)
  watchlater: VideoUserMetadataConnectionsWatchlater;
}

export class VideoUserMetadataInteractionsAddPrivacyUser extends SpeakeasyBase {
  /**
   * An array of the HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options?: string[];

  /**
   * The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri?: string;
}

/**
 * Information related to the block status of this user.
 */
export class VideoUserMetadataInteractionsBlock extends SpeakeasyBase {
  /**
   * Whether a user is blocking the current user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "added" })
  added: boolean;

  /**
   * The time in ISO 8601 format when the block occurred, or the null value if no block exists.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "added_time" })
  addedTime: string;

  /**
   * An array of the HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The URI to block or unblock the user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information related to the followed status of this user.
 */
export class VideoUserMetadataInteractionsFollow extends SpeakeasyBase {
  /**
   * Whether a user is following the current user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "added" })
  added: boolean;

  /**
   * An array of the HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The URI to follow the user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information regarding where and how to report a user.
 */
export class VideoUserMetadataInteractionsReport extends SpeakeasyBase {
  /**
   * An array of the HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * List of valid reasons for reporting a video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reason" })
  reason: string[];

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

export class VideoUserMetadataInteractions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "add_privacy_user" })
  @Type(() => VideoUserMetadataInteractionsAddPrivacyUser)
  addPrivacyUser?: VideoUserMetadataInteractionsAddPrivacyUser;

  /**
   * Information related to the block status of this user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "block" })
  @Type(() => VideoUserMetadataInteractionsBlock)
  block: VideoUserMetadataInteractionsBlock;

  /**
   * Information related to the followed status of this user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "follow" })
  @Type(() => VideoUserMetadataInteractionsFollow)
  follow: VideoUserMetadataInteractionsFollow;

  /**
   * Information regarding where and how to report a user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "report" })
  @Type(() => VideoUserMetadataInteractionsReport)
  report: VideoUserMetadataInteractionsReport;
}

/**
 * The user's metadata.
 */
export class VideoUserMetadata extends SpeakeasyBase {
  /**
   * The list of resource URIs related to the user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "connections" })
  @Type(() => VideoUserMetadataConnections)
  connections: VideoUserMetadataConnections;

  @SpeakeasyMetadata()
  @Expose({ name: "interactions" })
  @Type(() => VideoUserMetadataInteractions)
  interactions: VideoUserMetadataInteractions;
}

/**
 * The user's privacy preference for comments:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `anybody` - Anyone can comment on the user's videos.
 *  * `contacts` - Only contacts can comment on the user's videos.
 *  * `nobody` - No one can comment on the user's videos.
 *
 */
export enum VideoUserPreferencesVideosPrivacyCommentsEnum {
  Anybody = "anybody",
  Contacts = "contacts",
  Nobody = "nobody",
}

/**
 * The user's privacy preference for embeds:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `private` - Only the user can embed their own videos.
 *  * `public` - Anyone can embed the user's videos.
 *  * `whitelist` - Only those on the whitelist can embed the user's videos.
 *
 */
export enum VideoUserPreferencesVideosPrivacyEmbedEnum {
  Private = "private",
  Public = "public",
  Whitelist = "whitelist",
}

/**
 * The user's privacy preference for views:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `anybody` - Anyone can view the user's videos.
 *  * `contacts` - Only contacts can view the user's videos.
 *  * `disable` - Views are disabled for the user's videos.
 *  * `nobody` - No one except the user can view the user's videos.
 *  * `password` - Only those with the password can view the user's videos.
 *  * `unlisted` - Anybody can view the user's videos if they have a link.
 *  * `users` - Only other Vimeo members can view the user's videos.
 *
 */
export enum VideoUserPreferencesVideosPrivacyViewEnum {
  Anybody = "anybody",
  Contacts = "contacts",
  Disable = "disable",
  Nobody = "nobody",
  Password = "password",
  Unlisted = "unlisted",
  Users = "users",
}

export class VideoUserPreferencesVideosPrivacy extends SpeakeasyBase {
  /**
   * Whether other users can add the user's videos.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "add" })
  add?: boolean;

  /**
   * The user's privacy preference for comments:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `anybody` - Anyone can comment on the user's videos.
   *  * `contacts` - Only contacts can comment on the user's videos.
   *  * `nobody` - No one can comment on the user's videos.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "comments" })
  comments?: VideoUserPreferencesVideosPrivacyCommentsEnum;

  /**
   * Whether other users can download the user's videos.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "download" })
  download?: boolean;

  /**
   * The user's privacy preference for embeds:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `private` - Only the user can embed their own videos.
   *  * `public` - Anyone can embed the user's videos.
   *  * `whitelist` - Only those on the whitelist can embed the user's videos.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "embed" })
  embed?: VideoUserPreferencesVideosPrivacyEmbedEnum;

  /**
   * The user's privacy preference for views:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `anybody` - Anyone can view the user's videos.
   *  * `contacts` - Only contacts can view the user's videos.
   *  * `disable` - Views are disabled for the user's videos.
   *  * `nobody` - No one except the user can view the user's videos.
   *  * `password` - Only those with the password can view the user's videos.
   *  * `unlisted` - Anybody can view the user's videos if they have a link.
   *  * `users` - Only other Vimeo members can view the user's videos.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "view" })
  view?: VideoUserPreferencesVideosPrivacyViewEnum;
}

export class VideoUserPreferencesVideos extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "privacy" })
  @Type(() => VideoUserPreferencesVideosPrivacy)
  privacy?: VideoUserPreferencesVideosPrivacy;
}

export class VideoUserPreferences extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "videos" })
  @Type(() => VideoUserPreferencesVideos)
  videos?: VideoUserPreferencesVideos;
}

/**
 * Information about the user's lifetime upload usage.
 */
export class VideoUserUploadQuotaLifetime extends SpeakeasyBase {
  /**
   * The number of bytes remaining in your lifetime maximum.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "free" })
  free: number;

  /**
   * The total number of bytes that you can upload across the lifetime of your account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "max" })
  max: number;

  /**
   * The number of bytes that you've already uploaded against your lifetime limit.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "used" })
  used: number;
}

/**
 * Information about the user's usage for the current period.
 */
export class VideoUserUploadQuotaPeriodic extends SpeakeasyBase {
  /**
   * The number of bytes remaining in your upload quota for the current period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "free" })
  free: number;

  /**
   * The total number of bytes that you can upload per period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "max" })
  max: number;

  /**
   * The time in ISO 8601 format when your upload quota resets.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reset_date" })
  resetDate: string;

  /**
   * The number of bytes that you've already uploaded against your quota in the current period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "used" })
  used: number;
}

/**
 * Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota.
 */
export enum VideoUserUploadQuotaSpaceShowingEnum {
  Lifetime = "lifetime",
  Periodic = "periodic",
}

/**
 * Information about the user's upload space remaining for the current period.
 */
export class VideoUserUploadQuotaSpace extends SpeakeasyBase {
  /**
   * The number of bytes remaining in your upload quota.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "free" })
  free: number;

  /**
   * The maximum number of bytes allotted to your upload quota.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "max" })
  max: number;

  /**
   * Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "showing" })
  showing: VideoUserUploadQuotaSpaceShowingEnum;

  /**
   * The number of bytes that you've already uploaded against your quota.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "used" })
  used: number;
}

/**
 * Appears only when the user has upload access and is looking at their own user record.
 */
export class VideoUserUploadQuota extends SpeakeasyBase {
  /**
   * Information about the user's lifetime upload usage.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lifetime" })
  @Type(() => VideoUserUploadQuotaLifetime)
  lifetime: VideoUserUploadQuotaLifetime;

  /**
   * Information about the user's usage for the current period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "periodic" })
  @Type(() => VideoUserUploadQuotaPeriodic)
  periodic: VideoUserUploadQuotaPeriodic;

  /**
   * Information about the user's upload space remaining for the current period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "space" })
  @Type(() => VideoUserUploadQuotaSpace)
  space: VideoUserUploadQuotaSpace;
}

export class VideoUserWebsites extends SpeakeasyBase {
  /**
   * The website's description.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * The URL of the website.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "link" })
  link: string;

  /**
   * The name of the website.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;
}

/**
 * The video owner.
 */
export class VideoUser extends SpeakeasyBase {
  /**
   * The user's account type:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `basic` - The user has a Vimeo Basic subscription.
   *  * `business` - The user has a Vimeo Business subscription.
   *  * `live_business` - The user has a Vimeo Business Live subscription.
   *  * `live_premium` - The user has a Vimeo Premium subscription.
   *  * `live_pro` - The user has a Vimeo PRO Live subscription.
   *  * `plus` - The user has a Vimeo Plus subscription.
   *  * `pro` - The user has a Vimeo Pro subscription.
   *  * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
   *  * `producer` - The user has a Vimeo Producer subscription.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "account" })
  account: VideoUserAccountEnum;

  /**
   * The user's bio.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bio" })
  bio: string;

  /**
   * The user's content filters:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `drugs` - Drugs or alcohol use.
   *  * `language` - Profanity or sexually suggestive content.
   *  * `nudity` - Nudity.
   *  * `safe` - Suitable for all audiences.
   *  * `unrated` - No rating.
   *  * `violence` - Violent or graphic content.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "content_filter" })
  contentFilter?: VideoUserContentFilterEnum;

  /**
   * The time in ISO 8601 format when the user account was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_time" })
  createdTime: string;

  /**
   * The user's email address. This data requires a bearer token with the `email` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  /**
   * The absolute URL of this user's profile page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "link" })
  link: string;

  /**
   * The user's location.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "location" })
  location: string;

  /**
   * The user's metadata.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  @Type(() => VideoUserMetadata)
  metadata: VideoUserMetadata;

  /**
   * The user's display name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * The active portrait of this user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pictures" })
  @Type(() => Picture)
  pictures: Picture;

  @SpeakeasyMetadata()
  @Expose({ name: "preferences" })
  @Type(() => VideoUserPreferences)
  preferences?: VideoUserPreferences;

  /**
   * The user's resource key string.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resource_key" })
  resourceKey: string;

  /**
   * Appears only when the user has upload access and is looking at their own user record.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "upload_quota" })
  @Type(() => VideoUserUploadQuota)
  uploadQuota: VideoUserUploadQuota;

  /**
   * The user's canonical relative URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;

  /**
   * The user's websites.
   */
  @SpeakeasyMetadata({ elemType: VideoUserWebsites })
  @Expose({ name: "websites" })
  @Type(() => VideoUserWebsites)
  websites: VideoUserWebsites[];
}

/**
 * The video belongs to the category.
 */
export class Video extends SpeakeasyBase {
  /**
   * The categories to which this video belongs.
   */
  @SpeakeasyMetadata({ elemType: Category })
  @Expose({ name: "categories" })
  @Type(() => Category)
  categories: Category[];

  /**
   * The content ratings of this video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "content_rating" })
  contentRating: string[];

  /**
   * The context of the video's subscription, if this video is part of a subscription.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "context" })
  @Type(() => VideoContext)
  context: VideoContext;

  /**
   * The time in ISO 8601 format when the video was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_time" })
  createdTime: string;

  /**
   * A brief explanation of the video's content.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * The video's duration in seconds.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "duration" })
  duration: number;

  /**
   * Information about embedding this video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "embed" })
  @Type(() => EmbedSettings)
  embed: EmbedSettings;

  /**
   * The video's height in pixels.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "height" })
  height: number;

  /**
   * The video's primary language.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "language" })
  language: string;

  /**
   * The time in ISO 8601 format when the user last modified the video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_user_action_event_date" })
  lastUserActionEventDate?: string;

  /**
   * The [Creative Commons](http://creativecommons.org/licenses/) license used for the video:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `by` - Attribution
   *  * `by-nc` - Attribution Non-Commercial
   *  * `by-nc-nd` - Attribution Non-Commercial No Derivatives
   *  * `by-nc-sa` - Attribution Non-Commercial Share Alike
   *  * `by-nd` - Attribution No Derivatives
   *  * `by-sa` - Attribution Share Alike
   *  * `cc0` - Public Domain Dedication
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "license" })
  license: VideoLicenseEnum;

  /**
   * The link to the video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "link" })
  link: string;

  /**
   * The video's metadata.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  @Type(() => VideoMetadata)
  metadata: VideoMetadata;

  /**
   * The time in ISO 8601 format when the video metadata was last modified.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "modified_time" })
  modifiedTime: string;

  /**
   * The video's title.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Information about the folder that contains this video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "parent_folder" })
  @Type(() => VideoProject)
  parentFolder?: VideoProject;

  /**
   * The privacy-enabled password to watch this video. Only users can see their own video passwords. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "password" })
  password?: string;

  /**
   * The active picture for this video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pictures" })
  @Type(() => Picture)
  pictures: Picture;

  /**
   * The video's privacy setting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "privacy" })
  @Type(() => VideoPrivacy)
  privacy: VideoPrivacy;

  /**
   * The time in ISO 8601 format when the video was released.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "release_time" })
  releaseTime: string;

  /**
   * The resource key string of the video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resource_key" })
  resourceKey: string;

  /**
   * 360 spatial data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "spatial" })
  @Type(() => VideoSpatial)
  spatial: VideoSpatial;

  /**
   * A collection of stats associated with this video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stats" })
  @Type(() => VideoStats)
  stats: VideoStats;

  /**
   * The status code for the availability of the video. This field is deprecated in favor of `upload` and `transcode`.
   *
   * @remarks
   *
   * Option descriptions:
   *  * `available` - The video is available.
   *  * `quota_exceeded` - The user's quota is exceeded with this video.
   *  * `total_cap_exceeded` - The user has exceeded their total cap with this video.
   *  * `transcode_starting` - Transcoding is beginning for the video.
   *  * `transcoding` - Transcoding is underway for the video.
   *  * `transcoding_error` - There was an error in transcoding the video.
   *  * `unavailable` - The video is unavailable.
   *  * `uploading` - The video is being uploaded.
   *  * `uploading_error` - There was an error in uploading the video.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: VideoStatusEnum;

  /**
   * An array of all tags assigned to this video.
   */
  @SpeakeasyMetadata({ elemType: Tag })
  @Expose({ name: "tags" })
  @Type(() => Tag)
  tags: Tag[];

  /**
   * The transcode information for a video upload.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transcode" })
  @Type(() => VideoTranscode)
  transcode: VideoTranscode;

  /**
   * The upload information for this video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "upload" })
  @Type(() => VideoUpload)
  upload: VideoUpload;

  /**
   * The video's canonical relative URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;

  /**
   * The video owner.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  @Type(() => VideoUser)
  user: VideoUser;

  /**
   * The video's width in pixels.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "width" })
  width: number;
}
