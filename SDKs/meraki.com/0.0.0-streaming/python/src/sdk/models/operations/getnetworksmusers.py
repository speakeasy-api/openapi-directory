"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Any, Optional


@dataclasses.dataclass
class GetNetworkSmUsersRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    emails: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'emails', 'style': 'form', 'explode': True }})
    r"""Filter users by email(s). Multiple emails can be passed in as comma separated values."""  
    ids: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ids', 'style': 'form', 'explode': True }})
    r"""Filter users by id(s). Multiple ids can be passed in as comma separated values."""  
    scope: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'scope', 'style': 'form', 'explode': True }})
    r"""Specifiy a scope (one of all, none, withAny, withAll, withoutAny, withoutAll) and a set of tags as comma separated values."""  
    usernames: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'usernames', 'style': 'form', 'explode': True }})
    r"""Filter users by username(s). Multiple usernames can be passed in as comma separated values."""  
    

@dataclasses.dataclass
class GetNetworkSmUsersResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_network_sm_users_200_application_json_objects: Optional[list[dict[str, Any]]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    