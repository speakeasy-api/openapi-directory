"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import automlcandidatestep as shared_automlcandidatestep
from ..shared import automlcontainerdefinition as shared_automlcontainerdefinition
from ..shared import candidateproperties as shared_candidateproperties
from ..shared import candidatestatus_enum as shared_candidatestatus_enum
from ..shared import finalautomljobobjectivemetric as shared_finalautomljobobjectivemetric
from ..shared import objectivestatus_enum as shared_objectivestatus_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AutoMLCandidate:
    r"""Information about a candidate produced by an AutoML training job, including its status, steps, and other properties."""
    
    candidate_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CandidateName') }})  
    candidate_status: shared_candidatestatus_enum.CandidateStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CandidateStatus') }})  
    candidate_steps: list[shared_automlcandidatestep.AutoMLCandidateStep] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CandidateSteps') }})  
    creation_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    last_modified_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastModifiedTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    objective_status: shared_objectivestatus_enum.ObjectiveStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ObjectiveStatus') }})  
    candidate_properties: Optional[shared_candidateproperties.CandidateProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CandidateProperties'), 'exclude': lambda f: f is None }})  
    end_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    failure_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FailureReason'), 'exclude': lambda f: f is None }})  
    final_auto_ml_job_objective_metric: Optional[shared_finalautomljobobjectivemetric.FinalAutoMLJobObjectiveMetric] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FinalAutoMLJobObjectiveMetric'), 'exclude': lambda f: f is None }})
    r"""The best candidate result from an AutoML training job."""  
    inference_container_definitions: Optional[dict[str, list[shared_automlcontainerdefinition.AutoMLContainerDefinition]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InferenceContainerDefinitions'), 'exclude': lambda f: f is None }})  
    inference_containers: Optional[list[shared_automlcontainerdefinition.AutoMLContainerDefinition]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InferenceContainers'), 'exclude': lambda f: f is None }})  
    