"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class AchievementUpdateResponseCurrentStateEnum(str, Enum):
    r"""The current state of the achievement."""
    UPDATED_ACHIEVEMENT_STATE_UNSPECIFIED = 'UPDATED_ACHIEVEMENT_STATE_UNSPECIFIED'
    HIDDEN = 'HIDDEN'
    REVEALED = 'REVEALED'
    UNLOCKED = 'UNLOCKED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AchievementUpdateResponse:
    r"""An updated achievement."""
    
    achievement_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('achievementId'), 'exclude': lambda f: f is None }})
    r"""The achievement this update is was applied to."""  
    current_state: Optional[AchievementUpdateResponseCurrentStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentState'), 'exclude': lambda f: f is None }})
    r"""The current state of the achievement."""  
    current_steps: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentSteps'), 'exclude': lambda f: f is None }})
    r"""The current steps recorded for this achievement if it is incremental."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Uniquely identifies the type of this resource. Value is always the fixed string `games#achievementUpdateResponse`."""  
    newly_unlocked: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('newlyUnlocked'), 'exclude': lambda f: f is None }})
    r"""Whether this achievement was newly unlocked (that is, whether the unlock request for the achievement was the first for the player)."""  
    update_occurred: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateOccurred'), 'exclude': lambda f: f is None }})
    r"""Whether the requested updates actually affected the achievement."""  
    