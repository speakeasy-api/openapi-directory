/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Object specifying the stream attribute on which to filter.
 */
export class ListStreamsRequestBodyFilterBy extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "health" })
  health?: shared.StreamHealthEnum;
}

export class ListStreamsRequestBody extends SpeakeasyBase {
  /**
   * Object specifying the stream attribute on which to filter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "filterBy" })
  @Type(() => ListStreamsRequestBodyFilterBy)
  filterBy?: ListStreamsRequestBodyFilterBy;

  /**
   * Maximum number of streams to return. Default: 100.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxResults" })
  maxResults?: number;

  /**
   * The first stream to retrieve. This is used for pagination; see the <code>nextToken</code> response field.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nextToken" })
  nextToken?: string;
}

export class ListStreamsRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: ListStreamsRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * Pagination limit
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=maxResults",
  })
  maxResults?: string;

  /**
   * Pagination token
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=nextToken",
  })
  nextToken?: string;
}

export class ListStreamsResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  listStreamsResponse?: shared.ListStreamsResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
