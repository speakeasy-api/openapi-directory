"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import action_enum as shared_action_enum
from ..shared import blockoverridednstype_enum as shared_blockoverridednstype_enum
from ..shared import blockresponse_enum as shared_blockresponse_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateFirewallRuleRequest:
    
    firewall_domain_list_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FirewallDomainListId') }})  
    firewall_rule_group_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FirewallRuleGroupId') }})  
    action: Optional[shared_action_enum.ActionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Action'), 'exclude': lambda f: f is None }})  
    block_override_dns_type: Optional[shared_blockoverridednstype_enum.BlockOverrideDNSTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BlockOverrideDnsType'), 'exclude': lambda f: f is None }})  
    block_override_domain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BlockOverrideDomain'), 'exclude': lambda f: f is None }})  
    block_override_ttl: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BlockOverrideTtl'), 'exclude': lambda f: f is None }})  
    block_response: Optional[shared_blockresponse_enum.BlockResponseEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BlockResponse'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})  
    priority: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Priority'), 'exclude': lambda f: f is None }})  
    