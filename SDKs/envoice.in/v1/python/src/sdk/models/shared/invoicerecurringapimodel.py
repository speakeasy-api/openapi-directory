"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class InvoiceRecurringAPIModelDayOfWeekEnum(str, Enum):
    r"""Day when the recurrance should happen"""
    SUNDAY = 'Sunday'
    MONDAY = 'Monday'
    TUESDAY = 'Tuesday'
    WEDNESDAY = 'Wednesday'
    THURSDAY = 'Thursday'
    FRIDAY = 'Friday'
    SATURDAY = 'Saturday'

class InvoiceRecurringAPIModelRecurrancePatternEnum(str, Enum):
    r"""How often the recurrance occurs"""
    DAILY = 'Daily'
    WEEKLY = 'Weekly'
    MONTHLY = 'Monthly'
    YEARLY = 'Yearly'

class InvoiceRecurringAPIModelStatusEnum(str, Enum):
    r"""The status of the recurrance"""
    PENDING = 'Pending'
    ACTIVE = 'Active'
    CANCELLED = 'Cancelled'
    FINISHED = 'Finished'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InvoiceRecurringAPIModel:
    r"""Definition of invoice recurring profile"""
    
    day_of_month: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DayOfMonth'), 'exclude': lambda f: f is None }})
    r"""Day of month when the recurrance should happen"""  
    day_of_week: Optional[InvoiceRecurringAPIModelDayOfWeekEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DayOfWeek'), 'exclude': lambda f: f is None }})
    r"""Day when the recurrance should happen"""  
    due_date_in_days: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DueDateInDays'), 'exclude': lambda f: f is None }})
    r"""Total number of days for the client to pay the invoice after issuing it"""  
    end_of_recurrance: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndOfRecurrance'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Indcate the date when the recurrance should stop"""  
    month: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Month'), 'exclude': lambda f: f is None }})
    r"""Month when the recurrance should happen"""  
    recurrance_pattern: Optional[InvoiceRecurringAPIModelRecurrancePatternEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RecurrancePattern'), 'exclude': lambda f: f is None }})
    r"""How often the recurrance occurs"""  
    recurrance_value: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RecurranceValue'), 'exclude': lambda f: f is None }})
    r"""Recurring every [value] RecurrancePattern
    Ex: Recur every 1 week
    """  
    start_of_recurrance: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StartOfRecurrance'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Indcate the date when the recurrance has started"""  
    status: Optional[InvoiceRecurringAPIModelStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})
    r"""The status of the recurrance"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Title'), 'exclude': lambda f: f is None }})
    r"""Title of the recurring profile. 
    Ex: BRAND PACKAGE - 2017-08-16 - 2018-08-16
    """  
    