// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TrustTrustDirectionEnum - The trust direction, which decides if the current domain is trusted, trusting, or both.
type TrustTrustDirectionEnum string

const (
	TrustTrustDirectionEnumTrustDirectionUnspecified TrustTrustDirectionEnum = "TRUST_DIRECTION_UNSPECIFIED"
	TrustTrustDirectionEnumInbound                   TrustTrustDirectionEnum = "INBOUND"
	TrustTrustDirectionEnumOutbound                  TrustTrustDirectionEnum = "OUTBOUND"
	TrustTrustDirectionEnumBidirectional             TrustTrustDirectionEnum = "BIDIRECTIONAL"
)

func (e *TrustTrustDirectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TRUST_DIRECTION_UNSPECIFIED":
		fallthrough
	case "INBOUND":
		fallthrough
	case "OUTBOUND":
		fallthrough
	case "BIDIRECTIONAL":
		*e = TrustTrustDirectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TrustTrustDirectionEnum: %s", s)
	}
}

// TrustTrustTypeEnum - The type of trust represented by the trust resource.
type TrustTrustTypeEnum string

const (
	TrustTrustTypeEnumTrustTypeUnspecified TrustTrustTypeEnum = "TRUST_TYPE_UNSPECIFIED"
	TrustTrustTypeEnumForest               TrustTrustTypeEnum = "FOREST"
	TrustTrustTypeEnumExternal             TrustTrustTypeEnum = "EXTERNAL"
)

func (e *TrustTrustTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TRUST_TYPE_UNSPECIFIED":
		fallthrough
	case "FOREST":
		fallthrough
	case "EXTERNAL":
		*e = TrustTrustTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TrustTrustTypeEnum: %s", s)
	}
}

// TrustInput - Represents a relationship between two domains. This allows a controller in one domain to authenticate a user in another domain.
type TrustInput struct {
	// The trust authentication type, which decides whether the trusted side has forest/domain wide access or selective access to an approved set of resources.
	SelectiveAuthentication *bool `json:"selectiveAuthentication,omitempty"`
	// The target DNS server IP addresses which can resolve the remote domain involved in the trust.
	TargetDNSIPAddresses []string `json:"targetDnsIpAddresses,omitempty"`
	// The fully qualified target domain name which will be in trust with the current domain.
	TargetDomainName *string `json:"targetDomainName,omitempty"`
	// The trust direction, which decides if the current domain is trusted, trusting, or both.
	TrustDirection *TrustTrustDirectionEnum `json:"trustDirection,omitempty"`
	// Input only. The trust secret used for the handshake with the target domain. It will not be stored.
	TrustHandshakeSecret *string `json:"trustHandshakeSecret,omitempty"`
	// The type of trust represented by the trust resource.
	TrustType *TrustTrustTypeEnum `json:"trustType,omitempty"`
}

// TrustStateEnum - Output only. The current state of the trust.
type TrustStateEnum string

const (
	TrustStateEnumStateUnspecified TrustStateEnum = "STATE_UNSPECIFIED"
	TrustStateEnumCreating         TrustStateEnum = "CREATING"
	TrustStateEnumUpdating         TrustStateEnum = "UPDATING"
	TrustStateEnumDeleting         TrustStateEnum = "DELETING"
	TrustStateEnumConnected        TrustStateEnum = "CONNECTED"
	TrustStateEnumDisconnected     TrustStateEnum = "DISCONNECTED"
)

func (e *TrustStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "CREATING":
		fallthrough
	case "UPDATING":
		fallthrough
	case "DELETING":
		fallthrough
	case "CONNECTED":
		fallthrough
	case "DISCONNECTED":
		*e = TrustStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TrustStateEnum: %s", s)
	}
}

// Trust - Represents a relationship between two domains. This allows a controller in one domain to authenticate a user in another domain.
type Trust struct {
	// Output only. The time the instance was created.
	CreateTime *string `json:"createTime,omitempty"`
	// Output only. The last heartbeat time when the trust was known to be connected.
	LastTrustHeartbeatTime *string `json:"lastTrustHeartbeatTime,omitempty"`
	// The trust authentication type, which decides whether the trusted side has forest/domain wide access or selective access to an approved set of resources.
	SelectiveAuthentication *bool `json:"selectiveAuthentication,omitempty"`
	// Output only. The current state of the trust.
	State *TrustStateEnum `json:"state,omitempty"`
	// Output only. Additional information about the current state of the trust, if available.
	StateDescription *string `json:"stateDescription,omitempty"`
	// The target DNS server IP addresses which can resolve the remote domain involved in the trust.
	TargetDNSIPAddresses []string `json:"targetDnsIpAddresses,omitempty"`
	// The fully qualified target domain name which will be in trust with the current domain.
	TargetDomainName *string `json:"targetDomainName,omitempty"`
	// The trust direction, which decides if the current domain is trusted, trusting, or both.
	TrustDirection *TrustTrustDirectionEnum `json:"trustDirection,omitempty"`
	// Input only. The trust secret used for the handshake with the target domain. It will not be stored.
	TrustHandshakeSecret *string `json:"trustHandshakeSecret,omitempty"`
	// The type of trust represented by the trust resource.
	TrustType *TrustTrustTypeEnum `json:"trustType,omitempty"`
	// Output only. The last update time.
	UpdateTime *string `json:"updateTime,omitempty"`
}
