// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTGetCoipPoolUsageActionEnum
type POSTGetCoipPoolUsageActionEnum string

const (
	POSTGetCoipPoolUsageActionEnumGetCoipPoolUsage POSTGetCoipPoolUsageActionEnum = "GetCoipPoolUsage"
)

func (e POSTGetCoipPoolUsageActionEnum) ToPointer() *POSTGetCoipPoolUsageActionEnum {
	return &e
}

func (e *POSTGetCoipPoolUsageActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GetCoipPoolUsage":
		*e = POSTGetCoipPoolUsageActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTGetCoipPoolUsageActionEnum: %v", v)
	}
}

// POSTGetCoipPoolUsageVersionEnum
type POSTGetCoipPoolUsageVersionEnum string

const (
	POSTGetCoipPoolUsageVersionEnumTwoThousandAndSixteen1115 POSTGetCoipPoolUsageVersionEnum = "2016-11-15"
)

func (e POSTGetCoipPoolUsageVersionEnum) ToPointer() *POSTGetCoipPoolUsageVersionEnum {
	return &e
}

func (e *POSTGetCoipPoolUsageVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = POSTGetCoipPoolUsageVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTGetCoipPoolUsageVersionEnum: %v", v)
	}
}

type POSTGetCoipPoolUsageRequest struct {
	Action            POSTGetCoipPoolUsageActionEnum  `queryParam:"style=form,explode=true,name=Action"`
	RequestBody       []byte                          `request:"mediaType=text/xml"`
	Version           POSTGetCoipPoolUsageVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type POSTGetCoipPoolUsageResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
