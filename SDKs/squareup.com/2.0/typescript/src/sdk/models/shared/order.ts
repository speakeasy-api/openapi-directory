/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Money } from "./money";
import { OrderFulfillment } from "./orderfulfillment";
import { OrderLineItem } from "./orderlineitem";
import { OrderLineItemDiscount } from "./orderlineitemdiscount";
import { OrderLineItemTax } from "./orderlineitemtax";
import { OrderMoneyAmounts } from "./ordermoneyamounts";
import { OrderPricingOptions } from "./orderpricingoptions";
import { OrderReturn } from "./orderreturn";
import { OrderReward } from "./orderreward";
import { OrderRoundingAdjustment } from "./orderroundingadjustment";
import { OrderServiceCharge } from "./orderservicecharge";
import { OrderSource } from "./ordersource";
import { Refund } from "./refund";
import { Tender } from "./tender";
import { Expose, Type } from "class-transformer";

/**
 * Contains all information related to a single order to process with Square,
 *
 * @remarks
 * including line items that specify the products to purchase. `Order` objects also
 * include information about any associated tenders, refunds, and returns.
 *
 * All Connect V2 Transactions have all been converted to Orders including all associated
 * itemization data.
 */
export class Order extends SpeakeasyBase {
  /**
   * The timestamp for when the order reached a terminal [state](https://developer.squareup.com/reference/square_2021-08-18/enums/OrderState), in RFC 3339 format (for example "2016-09-04T23:59:33.123Z").
   */
  @SpeakeasyMetadata()
  @Expose({ name: "closed_at" })
  closedAt?: string;

  /**
   * The timestamp for when the order was created, in RFC 3339 format (for example, "2016-09-04T23:59:33.123Z").
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  createdAt?: string;

  /**
   * The ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) associated with the order.
   *
   * @remarks
   *
   * __IMPORTANT:__ You should specify a `customer_id` if you want the corresponding payment transactions
   * to be explicitly linked to the customer in the Seller Dashboard. If this field is omitted, the
   * `customer_id` assigned to any underlying `Payment` objects is ignored and might result in the
   * creation of new [instant profiles](https://developer.squareup.com/docs/customers-api/what-it-does#instant-profiles).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "customer_id" })
  customerId?: string;

  /**
   * The list of all discounts associated with the order.
   *
   * @remarks
   *
   * Discounts can be scoped to either `ORDER` or `LINE_ITEM`. For discounts scoped to `LINE_ITEM`,
   * an `OrderLineItemAppliedDiscount` must be added to each line item that the discount applies to.
   * For discounts with `ORDER` scope, the server generates an `OrderLineItemAppliedDiscount`
   * for every line item.
   *
   * __IMPORTANT__: If `LINE_ITEM` scope is set on any discounts in this field, using the deprecated
   * `line_items.discounts` field results in an error. Use `line_items.applied_discounts`
   * instead.
   */
  @SpeakeasyMetadata({ elemType: OrderLineItemDiscount })
  @Expose({ name: "discounts" })
  @Type(() => OrderLineItemDiscount)
  discounts?: OrderLineItemDiscount[];

  /**
   * Details about order fulfillment.
   *
   * @remarks
   *
   * Orders can only be created with at most one fulfillment. However, orders returned
   * by the API might contain multiple fulfillments.
   */
  @SpeakeasyMetadata({ elemType: OrderFulfillment })
  @Expose({ name: "fulfillments" })
  @Type(() => OrderFulfillment)
  fulfillments?: OrderFulfillment[];

  /**
   * The order's unique ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * The line items included in the order.
   */
  @SpeakeasyMetadata({ elemType: OrderLineItem })
  @Expose({ name: "line_items" })
  @Type(() => OrderLineItem)
  lineItems?: OrderLineItem[];

  /**
   * The ID of the seller location that this order is associated with.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "location_id" })
  locationId: string;

  /**
   * Application-defined data attached to this order. Metadata fields are intended
   *
   * @remarks
   * to store descriptive references or associations with an entity in another system or store brief
   * information about the object. Square does not process this field; it only stores and returns it
   * in relevant API calls. Do not use metadata to store any sensitive information (such as personally
   * identifiable information or card details).
   *
   * Keys written by applications must be 60 characters or less and must be in the character set
   * `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed
   * with a namespace, separated from the key with a ':' character.
   *
   * Values have a maximum length of 255 characters.
   *
   * An application can have up to 10 entries per metadata field.
   *
   * Entries written by applications are private and can only be read or modified by the same
   * application.
   *
   * For more information, see  [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  metadata?: Record<string, string>;

  /**
   * A collection of various money amounts.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "net_amounts" })
  @Type(() => OrderMoneyAmounts)
  netAmounts?: OrderMoneyAmounts;

  /**
   * Pricing options for an order. The options affect how the order's price is calculated.
   *
   * @remarks
   * They can be used, for example, to apply automatic price adjustments that are based on preconfigured
   * [pricing rules](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogPricingRule).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pricing_options" })
  @Type(() => OrderPricingOptions)
  pricingOptions?: OrderPricingOptions;

  /**
   * A client-specified ID to associate an entity in another system
   *
   * @remarks
   * with this order.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reference_id" })
  referenceId?: string;

  /**
   * The refunds that are part of this order.
   */
  @SpeakeasyMetadata({ elemType: Refund })
  @Expose({ name: "refunds" })
  @Type(() => Refund)
  refunds?: Refund[];

  /**
   * A collection of various money amounts.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "return_amounts" })
  @Type(() => OrderMoneyAmounts)
  returnAmounts?: OrderMoneyAmounts;

  /**
   * A collection of items from sale orders being returned in this one. Normally part of an
   *
   * @remarks
   * itemized return or exchange. There is exactly one `Return` object per sale `Order` being
   * referenced.
   */
  @SpeakeasyMetadata({ elemType: OrderReturn })
  @Expose({ name: "returns" })
  @Type(() => OrderReturn)
  returns?: OrderReturn[];

  /**
   * A set-like list of Rewards that have been added to the Order.
   */
  @SpeakeasyMetadata({ elemType: OrderReward })
  @Expose({ name: "rewards" })
  @Type(() => OrderReward)
  rewards?: OrderReward[];

  /**
   * A rounding adjustment of the money being returned. Commonly used to apply cash rounding
   *
   * @remarks
   * when the minimum unit of the account is smaller than the lowest physical denomination of the currency.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rounding_adjustment" })
  @Type(() => OrderRoundingAdjustment)
  roundingAdjustment?: OrderRoundingAdjustment;

  /**
   * A list of service charges applied to the order.
   */
  @SpeakeasyMetadata({ elemType: OrderServiceCharge })
  @Expose({ name: "service_charges" })
  @Type(() => OrderServiceCharge)
  serviceCharges?: OrderServiceCharge[];

  /**
   * Represents the origination details of an order.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "source" })
  @Type(() => OrderSource)
  source?: OrderSource;

  /**
   * The current state of the order: `OPEN`, `COMPLETED`, or `CANCELED`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: string;

  /**
   * The list of all taxes associated with the order.
   *
   * @remarks
   *
   * Taxes can be scoped to either `ORDER` or `LINE_ITEM`. For taxes with `LINE_ITEM` scope, an
   * `OrderLineItemAppliedTax` must be added to each line item that the tax applies to. For taxes
   * with `ORDER` scope, the server generates an `OrderLineItemAppliedTax` for every line item.
   *
   * On reads, each tax in the list includes the total amount of that tax applied to the order.
   *
   * __IMPORTANT__: If `LINE_ITEM` scope is set on any taxes in this field, using the deprecated
   * `line_items.taxes` field results in an error. Use `line_items.applied_taxes`
   * instead.
   */
  @SpeakeasyMetadata({ elemType: OrderLineItemTax })
  @Expose({ name: "taxes" })
  @Type(() => OrderLineItemTax)
  taxes?: OrderLineItemTax[];

  /**
   * The tenders that were used to pay for the order.
   */
  @SpeakeasyMetadata({ elemType: Tender })
  @Expose({ name: "tenders" })
  @Type(() => Tender)
  tenders?: Tender[];

  /**
   * Represents an amount of money. `Money` fields can be signed or unsigned.
   *
   * @remarks
   * Fields that do not explicitly define whether they are signed or unsigned are
   * considered unsigned and can only hold positive amounts. For signed fields, the
   * sign of the value indicates the purpose of the money transfer. See
   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
   * for more information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_discount_money" })
  @Type(() => Money)
  totalDiscountMoney?: Money;

  /**
   * Represents an amount of money. `Money` fields can be signed or unsigned.
   *
   * @remarks
   * Fields that do not explicitly define whether they are signed or unsigned are
   * considered unsigned and can only hold positive amounts. For signed fields, the
   * sign of the value indicates the purpose of the money transfer. See
   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
   * for more information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_money" })
  @Type(() => Money)
  totalMoney?: Money;

  /**
   * Represents an amount of money. `Money` fields can be signed or unsigned.
   *
   * @remarks
   * Fields that do not explicitly define whether they are signed or unsigned are
   * considered unsigned and can only hold positive amounts. For signed fields, the
   * sign of the value indicates the purpose of the money transfer. See
   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
   * for more information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_service_charge_money" })
  @Type(() => Money)
  totalServiceChargeMoney?: Money;

  /**
   * Represents an amount of money. `Money` fields can be signed or unsigned.
   *
   * @remarks
   * Fields that do not explicitly define whether they are signed or unsigned are
   * considered unsigned and can only hold positive amounts. For signed fields, the
   * sign of the value indicates the purpose of the money transfer. See
   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
   * for more information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_tax_money" })
  @Type(() => Money)
  totalTaxMoney?: Money;

  /**
   * Represents an amount of money. `Money` fields can be signed or unsigned.
   *
   * @remarks
   * Fields that do not explicitly define whether they are signed or unsigned are
   * considered unsigned and can only hold positive amounts. For signed fields, the
   * sign of the value indicates the purpose of the money transfer. See
   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
   * for more information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_tip_money" })
  @Type(() => Money)
  totalTipMoney?: Money;

  /**
   * The timestamp for when the order was last updated, in RFC 3339 format (for example, "2016-09-04T23:59:33.123Z").
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  updatedAt?: string;

  /**
   * The version number, which is incremented each time an update is committed to the order.
   *
   * @remarks
   * Orders not created through the API do not include a version number and
   * therefore cannot be updated.
   *
   * [Read more about working with versions](https://developer.squareup.com/docs/orders-api/manage-orders#update-orders).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "version" })
  version?: number;
}
