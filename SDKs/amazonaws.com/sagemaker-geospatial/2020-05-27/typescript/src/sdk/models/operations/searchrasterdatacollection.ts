/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * This is a RasterDataCollectionQueryInput containing AreaOfInterest, Time Range filter and Property filters.
 */
export class SearchRasterDataCollectionRequestBodyRasterDataCollectionQuery extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "AreaOfInterest" })
  @Type(() => shared.AreaOfInterest)
  areaOfInterest?: shared.AreaOfInterest;

  @SpeakeasyMetadata()
  @Expose({ name: "BandFilter" })
  bandFilter?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "PropertyFilters" })
  @Type(() => shared.PropertyFilters)
  propertyFilters?: shared.PropertyFilters;

  @SpeakeasyMetadata()
  @Expose({ name: "TimeRangeFilter" })
  @Type(() => shared.TimeRangeFilterInput)
  timeRangeFilter?: shared.TimeRangeFilterInput;
}

export class SearchRasterDataCollectionRequestBody extends SpeakeasyBase {
  /**
   * The Amazon Resource Name (ARN) of the raster data collection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Arn" })
  arn: string;

  /**
   * If the previous response was truncated, you receive this token. Use it in your next request to receive the next set of results.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "NextToken" })
  nextToken?: string;

  /**
   * This is a RasterDataCollectionQueryInput containing AreaOfInterest, Time Range filter and Property filters.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "RasterDataCollectionQuery" })
  @Type(() => SearchRasterDataCollectionRequestBodyRasterDataCollectionQuery)
  rasterDataCollectionQuery: SearchRasterDataCollectionRequestBodyRasterDataCollectionQuery;
}

export class SearchRasterDataCollectionRequest extends SpeakeasyBase {
  /**
   * Pagination token
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=NextToken",
  })
  nextToken?: string;

  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: SearchRasterDataCollectionRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class SearchRasterDataCollectionResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  searchRasterDataCollectionOutput?: shared.SearchRasterDataCollectionOutput;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
