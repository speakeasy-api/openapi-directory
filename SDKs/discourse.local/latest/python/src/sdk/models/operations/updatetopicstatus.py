"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class UpdateTopicStatusRequestBodyEnabledEnum(str, Enum):
    TRUE = 'true'
    FALSE = 'false'

class UpdateTopicStatusRequestBodyStatusEnum(str, Enum):
    CLOSED = 'closed'
    PINNED = 'pinned'
    PINNED_GLOBALLY = 'pinned_globally'
    ARCHIVED = 'archived'
    VISIBLE = 'visible'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateTopicStatusRequestBody:
    
    enabled: UpdateTopicStatusRequestBodyEnabledEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled') }})  
    status: UpdateTopicStatusRequestBodyStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    until: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('until'), 'exclude': lambda f: f is None }})
    r"""Only required for `pinned` and `pinned_globally`"""  
    

@dataclasses.dataclass
class UpdateTopicStatusRequest:
    
    api_key: str = dataclasses.field(metadata={'header': { 'field_name': 'Api-Key', 'style': 'simple', 'explode': False }})  
    api_username: str = dataclasses.field(metadata={'header': { 'field_name': 'Api-Username', 'style': 'simple', 'explode': False }})  
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})  
    request_body: Optional[UpdateTopicStatusRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateTopicStatus200ApplicationJSON:
    r"""topic updated"""
    
    success: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('success'), 'exclude': lambda f: f is None }})  
    topic_status_update: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topic_status_update'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class UpdateTopicStatusResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_topic_status_200_application_json_object: Optional[UpdateTopicStatus200ApplicationJSON] = dataclasses.field(default=None)
    r"""topic updated"""  
    