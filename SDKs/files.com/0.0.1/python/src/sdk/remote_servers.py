"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class RemoteServers:
    r"""Operations about remote_servers"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_remote_servers_id(self, request: operations.DeleteRemoteServersIDRequest) -> operations.DeleteRemoteServersIDResponse:
        r"""Delete Remote Server
        Delete Remote Server
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRemoteServersIDRequest, base_url, '/remote_servers/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRemoteServersIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_remote_servers(self, request: operations.GetRemoteServersRequest) -> operations.GetRemoteServersResponse:
        r"""List Remote Servers
        List Remote Servers
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/remote_servers'
        
        query_params = utils.get_query_params(operations.GetRemoteServersRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRemoteServersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RemoteServerEntity]])
                res.remote_server_entities = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    def get_remote_servers_id(self, request: operations.GetRemoteServersIDRequest) -> operations.GetRemoteServersIDResponse:
        r"""Show Remote Server
        Show Remote Server
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRemoteServersIDRequest, base_url, '/remote_servers/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRemoteServersIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RemoteServerEntity])
                res.remote_server_entity = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    def get_remote_servers_id_configuration_file(self, request: operations.GetRemoteServersIDConfigurationFileRequest) -> operations.GetRemoteServersIDConfigurationFileResponse:
        r"""Download configuration file (required for some Remote Server integrations, such as the Files.com Agent)
        Download configuration file (required for some Remote Server integrations, such as the Files.com Agent)
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRemoteServersIDConfigurationFileRequest, base_url, '/remote_servers/{id}/configuration_file', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRemoteServersIDConfigurationFileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RemoteServerConfigurationFileEntity])
                res.remote_server_configuration_file_entity = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    def patch_remote_servers_id(self, request: operations.PatchRemoteServersIDRequest) -> operations.PatchRemoteServersIDResponse:
        r"""Update Remote Server
        Update Remote Server
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchRemoteServersIDRequest, base_url, '/remote_servers/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchRemoteServersIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RemoteServerEntity])
                res.remote_server_entity = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    def post_remote_servers(self, request: operations.PostRemoteServersRequestBody) -> operations.PostRemoteServersResponse:
        r"""Create Remote Server
        Create Remote Server
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/remote_servers'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRemoteServersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RemoteServerEntity])
                res.remote_server_entity = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    def post_remote_servers_id_configuration_file(self, request: operations.PostRemoteServersIDConfigurationFileRequest) -> operations.PostRemoteServersIDConfigurationFileResponse:
        r"""Post local changes, check in, and download configuration file (used by some Remote Server integrations, such as the Files.com Agent)
        Post local changes, check in, and download configuration file (used by some Remote Server integrations, such as the Files.com Agent)
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRemoteServersIDConfigurationFileRequest, base_url, '/remote_servers/{id}/configuration_file', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRemoteServersIDConfigurationFileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RemoteServerConfigurationFileEntity])
                res.remote_server_configuration_file_entity = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    