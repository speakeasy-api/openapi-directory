// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type DelcsSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type DelcsRequestBodyCertificateParameters struct {
	// Application No.
	ApplicationNo string `json:"applicationNo"`
	// License No.
	LicenseNo string `json:"licenseNo"`
}

// DelcsRequestBodyFormatEnum - The format of the certificate in response.
type DelcsRequestBodyFormatEnum string

const (
	DelcsRequestBodyFormatEnumPdf DelcsRequestBodyFormatEnum = "pdf"
)

func (e *DelcsRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = DelcsRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DelcsRequestBodyFormatEnum: %s", s)
	}
}

// DelcsRequestBody - Request format
type DelcsRequestBody struct {
	CertificateParameters *DelcsRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format DelcsRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Delcs504ApplicationJSONErrorEnum string

const (
	Delcs504ApplicationJSONErrorEnumGatewayTimeout Delcs504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Delcs504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Delcs504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Delcs504ApplicationJSONErrorEnum: %s", s)
	}
}

type Delcs504ApplicationJSONErrorDescriptionEnum string

const (
	Delcs504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Delcs504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Delcs504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Delcs504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Delcs504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Delcs504ApplicationJSON - Gateway timeout
type Delcs504ApplicationJSON struct {
	Error            *Delcs504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Delcs504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Delcs503ApplicationJSONErrorEnum string

const (
	Delcs503ApplicationJSONErrorEnumServiceUnavailable Delcs503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Delcs503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Delcs503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Delcs503ApplicationJSONErrorEnum: %s", s)
	}
}

type Delcs503ApplicationJSONErrorDescriptionEnum string

const (
	Delcs503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Delcs503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Delcs503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Delcs503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Delcs503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Delcs503ApplicationJSON - Service unavailable
type Delcs503ApplicationJSON struct {
	Error            *Delcs503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Delcs503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Delcs502ApplicationJSONErrorEnum string

const (
	Delcs502ApplicationJSONErrorEnumBadGatewy Delcs502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Delcs502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Delcs502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Delcs502ApplicationJSONErrorEnum: %s", s)
	}
}

type Delcs502ApplicationJSONErrorDescriptionEnum string

const (
	Delcs502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Delcs502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Delcs502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Delcs502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Delcs502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Delcs502ApplicationJSON - Bad gateway
type Delcs502ApplicationJSON struct {
	Error            *Delcs502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Delcs502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Delcs500ApplicationJSONErrorEnum string

const (
	Delcs500ApplicationJSONErrorEnumInternalServerError Delcs500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Delcs500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Delcs500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Delcs500ApplicationJSONErrorEnum: %s", s)
	}
}

type Delcs500ApplicationJSONErrorDescriptionEnum string

const (
	Delcs500ApplicationJSONErrorDescriptionEnumInternalServerError Delcs500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Delcs500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Delcs500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Delcs500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Delcs500ApplicationJSON - Internal server error
type Delcs500ApplicationJSON struct {
	Error            *Delcs500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Delcs500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Delcs404ApplicationJSONErrorEnum string

const (
	Delcs404ApplicationJSONErrorEnumRecordNotFound Delcs404ApplicationJSONErrorEnum = "record_not_found"
	Delcs404ApplicationJSONErrorEnumURLNotFound    Delcs404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Delcs404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Delcs404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Delcs404ApplicationJSONErrorEnum: %s", s)
	}
}

type Delcs404ApplicationJSONErrorDescriptionEnum string

const (
	Delcs404ApplicationJSONErrorDescriptionEnumNoRecordFound               Delcs404ApplicationJSONErrorDescriptionEnum = "No record found"
	Delcs404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Delcs404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Delcs404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Delcs404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Delcs404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Delcs404ApplicationJSON - No record found
type Delcs404ApplicationJSON struct {
	Error            *Delcs404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Delcs404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Delcs401ApplicationJSONErrorEnum string

const (
	Delcs401ApplicationJSONErrorEnumInvalidAuthentication Delcs401ApplicationJSONErrorEnum = "invalid_authentication"
	Delcs401ApplicationJSONErrorEnumInvalidAuthorization  Delcs401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Delcs401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Delcs401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Delcs401ApplicationJSONErrorEnum: %s", s)
	}
}

type Delcs401ApplicationJSONErrorDescriptionEnum string

const (
	Delcs401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Delcs401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Delcs401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Delcs401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Delcs401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Delcs401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Delcs401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Delcs401ApplicationJSON - Unauthorized access
type Delcs401ApplicationJSON struct {
	Error            *Delcs401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Delcs401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Delcs400ApplicationJSONErrorEnum string

const (
	Delcs400ApplicationJSONErrorEnumMissingParameter Delcs400ApplicationJSONErrorEnum = "missing_parameter"
	Delcs400ApplicationJSONErrorEnumInvalidParameter Delcs400ApplicationJSONErrorEnum = "invalid_parameter"
	Delcs400ApplicationJSONErrorEnumInvalidFormat    Delcs400ApplicationJSONErrorEnum = "invalid_format"
	Delcs400ApplicationJSONErrorEnumInvalidTxnid     Delcs400ApplicationJSONErrorEnum = "invalid_txnid"
	Delcs400ApplicationJSONErrorEnumInvalidConsentid Delcs400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Delcs400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Delcs400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Delcs400ApplicationJSONErrorEnum: %s", s)
	}
}

type Delcs400ApplicationJSONErrorDescriptionEnum string

const (
	Delcs400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Delcs400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Delcs400ApplicationJSONErrorDescriptionEnumBadRequest                              Delcs400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Delcs400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Delcs400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Delcs400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Delcs400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Delcs400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Delcs400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Delcs400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Delcs400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Delcs400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Delcs400ApplicationJSON - Bad request
type Delcs400ApplicationJSON struct {
	Error            *Delcs400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Delcs400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type DelcsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Delcs400ApplicationJSONObject *Delcs400ApplicationJSON
	// Unauthorized access
	Delcs401ApplicationJSONObject *Delcs401ApplicationJSON
	// No record found
	Delcs404ApplicationJSONObject *Delcs404ApplicationJSON
	// Internal server error
	Delcs500ApplicationJSONObject *Delcs500ApplicationJSON
	// Bad gateway
	Delcs502ApplicationJSONObject *Delcs502ApplicationJSON
	// Service unavailable
	Delcs503ApplicationJSONObject *Delcs503ApplicationJSON
	// Gateway timeout
	Delcs504ApplicationJSONObject *Delcs504ApplicationJSON
}
