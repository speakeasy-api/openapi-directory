"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsableSubnetwork = exports.UsableSubnetworkStackTypeEnum = exports.UsableSubnetworkRoleEnum = exports.UsableSubnetworkPurposeEnum = exports.UsableSubnetworkIpv6AccessTypeEnum = void 0;
var utils_1 = require("../../../internal/utils");
var usablesubnetworksecondaryrange_1 = require("./usablesubnetworksecondaryrange");
var class_transformer_1 = require("class-transformer");
/**
 * The access type of IPv6 address this subnet holds. It's immutable and can only be specified during creation or the first time the subnet is updated into IPV4_IPV6 dual stack.
 */
var UsableSubnetworkIpv6AccessTypeEnum;
(function (UsableSubnetworkIpv6AccessTypeEnum) {
    UsableSubnetworkIpv6AccessTypeEnum["External"] = "EXTERNAL";
    UsableSubnetworkIpv6AccessTypeEnum["Internal"] = "INTERNAL";
})(UsableSubnetworkIpv6AccessTypeEnum = exports.UsableSubnetworkIpv6AccessTypeEnum || (exports.UsableSubnetworkIpv6AccessTypeEnum = {}));
/**
 * The purpose of the resource. This field can be either PRIVATE_RFC_1918 or INTERNAL_HTTPS_LOAD_BALANCER. A subnetwork with purpose set to INTERNAL_HTTPS_LOAD_BALANCER is a user-created subnetwork that is reserved for Internal HTTP(S) Load Balancing. If unspecified, the purpose defaults to PRIVATE_RFC_1918. The enableFlowLogs field isn't supported with the purpose field set to INTERNAL_HTTPS_LOAD_BALANCER.
 */
var UsableSubnetworkPurposeEnum;
(function (UsableSubnetworkPurposeEnum) {
    UsableSubnetworkPurposeEnum["Aggregate"] = "AGGREGATE";
    UsableSubnetworkPurposeEnum["CloudExtension"] = "CLOUD_EXTENSION";
    UsableSubnetworkPurposeEnum["GlobalManagedProxy"] = "GLOBAL_MANAGED_PROXY";
    UsableSubnetworkPurposeEnum["InternalHttpsLoadBalancer"] = "INTERNAL_HTTPS_LOAD_BALANCER";
    UsableSubnetworkPurposeEnum["Private"] = "PRIVATE";
    UsableSubnetworkPurposeEnum["PrivateNat"] = "PRIVATE_NAT";
    UsableSubnetworkPurposeEnum["PrivateRfc1918"] = "PRIVATE_RFC_1918";
    UsableSubnetworkPurposeEnum["PrivateServiceConnect"] = "PRIVATE_SERVICE_CONNECT";
    UsableSubnetworkPurposeEnum["RegionalManagedProxy"] = "REGIONAL_MANAGED_PROXY";
})(UsableSubnetworkPurposeEnum = exports.UsableSubnetworkPurposeEnum || (exports.UsableSubnetworkPurposeEnum = {}));
/**
 * The role of subnetwork. Currently, this field is only used when purpose = INTERNAL_HTTPS_LOAD_BALANCER. The value can be set to ACTIVE or BACKUP. An ACTIVE subnetwork is one that is currently being used for Internal HTTP(S) Load Balancing. A BACKUP subnetwork is one that is ready to be promoted to ACTIVE or is currently draining. This field can be updated with a patch request.
 */
var UsableSubnetworkRoleEnum;
(function (UsableSubnetworkRoleEnum) {
    UsableSubnetworkRoleEnum["Active"] = "ACTIVE";
    UsableSubnetworkRoleEnum["Backup"] = "BACKUP";
})(UsableSubnetworkRoleEnum = exports.UsableSubnetworkRoleEnum || (exports.UsableSubnetworkRoleEnum = {}));
/**
 * The stack type for the subnet. If set to IPV4_ONLY, new VMs in the subnet are assigned IPv4 addresses only. If set to IPV4_IPV6, new VMs in the subnet can be assigned both IPv4 and IPv6 addresses. If not specified, IPV4_ONLY is used. This field can be both set at resource creation time and updated using patch.
 */
var UsableSubnetworkStackTypeEnum;
(function (UsableSubnetworkStackTypeEnum) {
    UsableSubnetworkStackTypeEnum["Ipv4Ipv6"] = "IPV4_IPV6";
    UsableSubnetworkStackTypeEnum["Ipv4Only"] = "IPV4_ONLY";
})(UsableSubnetworkStackTypeEnum = exports.UsableSubnetworkStackTypeEnum || (exports.UsableSubnetworkStackTypeEnum = {}));
/**
 * Subnetwork which the current user has compute.subnetworks.use permission on.
 */
var UsableSubnetwork = /** @class */ (function (_super) {
    __extends(UsableSubnetwork, _super);
    function UsableSubnetwork() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "externalIpv6Prefix" }),
        __metadata("design:type", String)
    ], UsableSubnetwork.prototype, "externalIpv6Prefix", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "internalIpv6Prefix" }),
        __metadata("design:type", String)
    ], UsableSubnetwork.prototype, "internalIpv6Prefix", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ipCidrRange" }),
        __metadata("design:type", String)
    ], UsableSubnetwork.prototype, "ipCidrRange", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ipv6AccessType" }),
        __metadata("design:type", String)
    ], UsableSubnetwork.prototype, "ipv6AccessType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "network" }),
        __metadata("design:type", String)
    ], UsableSubnetwork.prototype, "network", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "purpose" }),
        __metadata("design:type", String)
    ], UsableSubnetwork.prototype, "purpose", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "role" }),
        __metadata("design:type", String)
    ], UsableSubnetwork.prototype, "role", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: usablesubnetworksecondaryrange_1.UsableSubnetworkSecondaryRange }),
        (0, class_transformer_1.Expose)({ name: "secondaryIpRanges" }),
        (0, class_transformer_1.Type)(function () { return usablesubnetworksecondaryrange_1.UsableSubnetworkSecondaryRange; }),
        __metadata("design:type", Array)
    ], UsableSubnetwork.prototype, "secondaryIpRanges", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "stackType" }),
        __metadata("design:type", String)
    ], UsableSubnetwork.prototype, "stackType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "subnetwork" }),
        __metadata("design:type", String)
    ], UsableSubnetwork.prototype, "subnetwork", void 0);
    return UsableSubnetwork;
}(utils_1.SpeakeasyBase));
exports.UsableSubnetwork = UsableSubnetwork;
