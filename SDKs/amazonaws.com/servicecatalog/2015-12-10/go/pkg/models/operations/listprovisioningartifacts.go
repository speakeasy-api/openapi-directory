// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListProvisioningArtifactsXAmzTargetEnum
type ListProvisioningArtifactsXAmzTargetEnum string

const (
	ListProvisioningArtifactsXAmzTargetEnumAws242ServiceCatalogServiceListProvisioningArtifacts ListProvisioningArtifactsXAmzTargetEnum = "AWS242ServiceCatalogService.ListProvisioningArtifacts"
)

func (e *ListProvisioningArtifactsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AWS242ServiceCatalogService.ListProvisioningArtifacts":
		*e = ListProvisioningArtifactsXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListProvisioningArtifactsXAmzTargetEnum: %s", s)
	}
}

type ListProvisioningArtifactsRequest struct {
	ListProvisioningArtifactsInput shared.ListProvisioningArtifactsInput   `request:"mediaType=application/json"`
	XAmzAlgorithm                  *string                                 `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256              *string                                 `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                 *string                                 `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                       *string                                 `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken              *string                                 `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                  *string                                 `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders              *string                                 `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                     ListProvisioningArtifactsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListProvisioningArtifactsResponse struct {
	ContentType string
	// InvalidParametersException
	InvalidParametersException interface{}
	// Success
	ListProvisioningArtifactsOutput *shared.ListProvisioningArtifactsOutput
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
