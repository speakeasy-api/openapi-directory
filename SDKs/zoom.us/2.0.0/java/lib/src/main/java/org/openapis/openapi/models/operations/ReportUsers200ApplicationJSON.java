/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

/**
 * ReportUsers200ApplicationJSON - **HTTP Status Code:** `200`&lt;br&gt;
 * Active or inactive hosts report returned.&lt;br&gt;
 * This is only available for paid account: {accountId}.
 */
public class ReportUsers200ApplicationJSON {
    /**
     * Start date for this report.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("from")
    public LocalDate from;
    public ReportUsers200ApplicationJSON withFrom(LocalDate from) {
        this.from = from;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("next_page_token")
    public String nextPageToken;
    public ReportUsers200ApplicationJSON withNextPageToken(String nextPageToken) {
        this.nextPageToken = nextPageToken;
        return this;
    }
    
    /**
     * The number of pages returned for the request made.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("page_count")
    public Long pageCount;
    public ReportUsers200ApplicationJSON withPageCount(Long pageCount) {
        this.pageCount = pageCount;
        return this;
    }
    
    /**
     * The page number of the current results.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("page_number")
    public Long pageNumber;
    public ReportUsers200ApplicationJSON withPageNumber(Long pageNumber) {
        this.pageNumber = pageNumber;
        return this;
    }
    
    /**
     * The number of records returned with a single API call.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("page_size")
    public Long pageSize;
    public ReportUsers200ApplicationJSON withPageSize(Long pageSize) {
        this.pageSize = pageSize;
        return this;
    }
    
    /**
     * End date for this report.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("to")
    public LocalDate to;
    public ReportUsers200ApplicationJSON withTo(LocalDate to) {
        this.to = to;
        return this;
    }
    
    /**
     * Number of meeting minutes for this range.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_meeting_minutes")
    public Long totalMeetingMinutes;
    public ReportUsers200ApplicationJSON withTotalMeetingMinutes(Long totalMeetingMinutes) {
        this.totalMeetingMinutes = totalMeetingMinutes;
        return this;
    }
    
    /**
     * Number of meetings for this range.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_meetings")
    public Long totalMeetings;
    public ReportUsers200ApplicationJSON withTotalMeetings(Long totalMeetings) {
        this.totalMeetings = totalMeetings;
        return this;
    }
    
    /**
     * Number of participants for this range.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_participants")
    public Long totalParticipants;
    public ReportUsers200ApplicationJSON withTotalParticipants(Long totalParticipants) {
        this.totalParticipants = totalParticipants;
        return this;
    }
    
    /**
     * The total number of all the records available across pages.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_records")
    public Long totalRecords;
    public ReportUsers200ApplicationJSON withTotalRecords(Long totalRecords) {
        this.totalRecords = totalRecords;
        return this;
    }
    
    /**
     * Array of user objects.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("users")
    public ReportUsers200ApplicationJSONUsers[] users;
    public ReportUsers200ApplicationJSON withUsers(ReportUsers200ApplicationJSONUsers[] users) {
        this.users = users;
        return this;
    }
    
}
