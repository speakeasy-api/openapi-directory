"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class UpdateNetworkSwitchRoutingOspfRequestBodyAreasAreaTypeEnum(str, Enum):
    r"""Area types in OSPF. Must be one of: [\\"normal\\", \\"stub\\", \\"nssa\\"]"""
    NORMAL = 'normal'
    NSSA = 'nssa'
    STUB = 'stub'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkSwitchRoutingOspfRequestBodyAreas:
    
    area_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('areaId') }})
    r"""OSPF area ID"""  
    area_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('areaName') }})
    r"""Name of the OSPF area"""  
    area_type: UpdateNetworkSwitchRoutingOspfRequestBodyAreasAreaTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('areaType') }})
    r"""Area types in OSPF. Must be one of: [\\"normal\\", \\"stub\\", \\"nssa\\"]"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkSwitchRoutingOspfRequestBodyMd5AuthenticationKey:
    r"""MD5 authentication credentials. This param is only relevant if md5AuthenticationEnabled is true"""
    
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""MD5 authentication key index. Key index must be between 1 to 255"""  
    passphrase: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('passphrase'), 'exclude': lambda f: f is None }})
    r"""MD5 authentication passphrase"""  
    
class UpdateNetworkSwitchRoutingOspfRequestBodyV3AreasAreaTypeEnum(str, Enum):
    r"""Area types in OSPF. Must be one of: [\\"normal\\", \\"stub\\", \\"nssa\\"]"""
    NORMAL = 'normal'
    NSSA = 'nssa'
    STUB = 'stub'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkSwitchRoutingOspfRequestBodyV3Areas:
    
    area_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('areaId') }})
    r"""OSPF area ID"""  
    area_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('areaName') }})
    r"""Name of the OSPF area"""  
    area_type: UpdateNetworkSwitchRoutingOspfRequestBodyV3AreasAreaTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('areaType') }})
    r"""Area types in OSPF. Must be one of: [\\"normal\\", \\"stub\\", \\"nssa\\"]"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkSwitchRoutingOspfRequestBodyV3:
    r"""OSPF v3 configuration"""
    
    areas: Optional[list[UpdateNetworkSwitchRoutingOspfRequestBodyV3Areas]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('areas'), 'exclude': lambda f: f is None }})
    r"""OSPF v3 areas"""  
    dead_timer_in_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deadTimerInSeconds'), 'exclude': lambda f: f is None }})
    r"""Time interval to determine when the peer will be declared inactive/dead. Value must be between 1 and 65535"""  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Boolean value to enable or disable V3 OSPF routing. OSPF V3 routing is disabled by default."""  
    hello_timer_in_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('helloTimerInSeconds'), 'exclude': lambda f: f is None }})
    r"""Time interval in seconds at which hello packet will be sent to OSPF neighbors to maintain connectivity. Value must be between 1 and 255. Default is 10 seconds."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkSwitchRoutingOspfRequestBody:
    
    areas: Optional[list[UpdateNetworkSwitchRoutingOspfRequestBodyAreas]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('areas'), 'exclude': lambda f: f is None }})
    r"""OSPF areas"""  
    dead_timer_in_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deadTimerInSeconds'), 'exclude': lambda f: f is None }})
    r"""Time interval to determine when the peer will be declared inactive/dead. Value must be between 1 and 65535"""  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Boolean value to enable or disable OSPF routing. OSPF routing is disabled by default."""  
    hello_timer_in_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('helloTimerInSeconds'), 'exclude': lambda f: f is None }})
    r"""Time interval in seconds at which hello packet will be sent to OSPF neighbors to maintain connectivity. Value must be between 1 and 255. Default is 10 seconds."""  
    md5_authentication_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('md5AuthenticationEnabled'), 'exclude': lambda f: f is None }})
    r"""Boolean value to enable or disable MD5 authentication. MD5 authentication is disabled by default."""  
    md5_authentication_key: Optional[UpdateNetworkSwitchRoutingOspfRequestBodyMd5AuthenticationKey] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('md5AuthenticationKey'), 'exclude': lambda f: f is None }})
    r"""MD5 authentication credentials. This param is only relevant if md5AuthenticationEnabled is true"""  
    v3: Optional[UpdateNetworkSwitchRoutingOspfRequestBodyV3] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('v3'), 'exclude': lambda f: f is None }})
    r"""OSPF v3 configuration"""  
    

@dataclasses.dataclass
class UpdateNetworkSwitchRoutingOspfRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    request_body: Optional[UpdateNetworkSwitchRoutingOspfRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class UpdateNetworkSwitchRoutingOspfResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_network_switch_routing_ospf_200_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    