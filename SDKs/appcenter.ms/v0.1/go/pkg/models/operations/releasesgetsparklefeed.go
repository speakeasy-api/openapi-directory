// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type ReleasesGetSparkleFeedRequest struct {
	// The secret of the application.
	AppSecret string `pathParam:"style=simple,explode=false,name=app_secret"`
}

type ReleasesGetSparkleFeedDefaultApplicationJSONCodeEnum string

const (
	ReleasesGetSparkleFeedDefaultApplicationJSONCodeEnumBadRequest          ReleasesGetSparkleFeedDefaultApplicationJSONCodeEnum = "BadRequest"
	ReleasesGetSparkleFeedDefaultApplicationJSONCodeEnumConflict            ReleasesGetSparkleFeedDefaultApplicationJSONCodeEnum = "Conflict"
	ReleasesGetSparkleFeedDefaultApplicationJSONCodeEnumNotAcceptable       ReleasesGetSparkleFeedDefaultApplicationJSONCodeEnum = "NotAcceptable"
	ReleasesGetSparkleFeedDefaultApplicationJSONCodeEnumNotFound            ReleasesGetSparkleFeedDefaultApplicationJSONCodeEnum = "NotFound"
	ReleasesGetSparkleFeedDefaultApplicationJSONCodeEnumInternalServerError ReleasesGetSparkleFeedDefaultApplicationJSONCodeEnum = "InternalServerError"
	ReleasesGetSparkleFeedDefaultApplicationJSONCodeEnumUnauthorized        ReleasesGetSparkleFeedDefaultApplicationJSONCodeEnum = "Unauthorized"
	ReleasesGetSparkleFeedDefaultApplicationJSONCodeEnumTooManyRequests     ReleasesGetSparkleFeedDefaultApplicationJSONCodeEnum = "TooManyRequests"
)

func (e *ReleasesGetSparkleFeedDefaultApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ReleasesGetSparkleFeedDefaultApplicationJSONCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesGetSparkleFeedDefaultApplicationJSONCodeEnum: %s", s)
	}
}

// ReleasesGetSparkleFeedDefaultApplicationJSON - Error
type ReleasesGetSparkleFeedDefaultApplicationJSON struct {
	Code    ReleasesGetSparkleFeedDefaultApplicationJSONCodeEnum `json:"code"`
	Message string                                               `json:"message"`
}

type ReleasesGetSparkleFeedResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Error
	ReleasesGetSparkleFeedDefaultApplicationJSONObject *ReleasesGetSparkleFeedDefaultApplicationJSON
}
