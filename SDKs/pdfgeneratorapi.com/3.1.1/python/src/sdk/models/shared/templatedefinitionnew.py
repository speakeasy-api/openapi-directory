"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import component as shared_component
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class TemplateDefinitionNewLayoutFormatEnum(str, Enum):
    r"""Defines template page size"""
    A4 = 'A4'
    LETTER = 'letter'
    CUSTOM = 'custom'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TemplateDefinitionNewLayoutMargins:
    r"""Page margins in units"""
    
    bottom: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bottom'), 'exclude': lambda f: f is None }})  
    left: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('left'), 'exclude': lambda f: f is None }})  
    right: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('right'), 'exclude': lambda f: f is None }})  
    top: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('top'), 'exclude': lambda f: f is None }})  
    
class TemplateDefinitionNewLayoutOrientationEnum(str, Enum):
    r"""Page orientation"""
    PORTRAIT = 'portrait'
    LANDSCAPE = 'landscape'

class TemplateDefinitionNewLayoutRepeatLayoutFormatEnum(str, Enum):
    r"""Defines template page size"""
    A4 = 'A4'
    LETTER = 'letter'
    CUSTOM = 'custom'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TemplateDefinitionNewLayoutRepeatLayout:
    r"""Defines page size if layout is repeated on the page e.g sheet labels"""
    
    format: Optional[TemplateDefinitionNewLayoutRepeatLayoutFormatEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('format'), 'exclude': lambda f: f is None }})
    r"""Defines template page size"""  
    height: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('height'), 'exclude': lambda f: f is None }})
    r"""Page height in units"""  
    width: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('width'), 'exclude': lambda f: f is None }})
    r"""Page width in units"""  
    
class TemplateDefinitionNewLayoutRotaionEnum(str, Enum):
    r"""Page rotation in degrees"""
    ZERO = '0'
    NINETY = '90'
    ONE_HUNDRED_AND_EIGHTY = '180'
    TWO_HUNDRED_AND_SEVENTY = '270'

class TemplateDefinitionNewLayoutUnitEnum(str, Enum):
    r"""Measure unit"""
    CM = 'cm'
    IN = 'in'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TemplateDefinitionNewLayout:
    r"""Defines template layout (e.g page format, margins)."""
    
    empty_labels: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emptyLabels'), 'exclude': lambda f: f is None }})
    r"""Defines how many pages or labels should be empty"""  
    format: Optional[TemplateDefinitionNewLayoutFormatEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('format'), 'exclude': lambda f: f is None }})
    r"""Defines template page size"""  
    height: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('height'), 'exclude': lambda f: f is None }})
    r"""Page height in units"""  
    margins: Optional[TemplateDefinitionNewLayoutMargins] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('margins'), 'exclude': lambda f: f is None }})
    r"""Page margins in units"""  
    orientation: Optional[TemplateDefinitionNewLayoutOrientationEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orientation'), 'exclude': lambda f: f is None }})
    r"""Page orientation"""  
    repeat_layout: Optional[TemplateDefinitionNewLayoutRepeatLayout] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repeatLayout'), 'exclude': lambda f: f is None }})
    r"""Defines page size if layout is repeated on the page e.g sheet labels"""  
    rotaion: Optional[TemplateDefinitionNewLayoutRotaionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rotaion'), 'exclude': lambda f: f is None }})
    r"""Page rotation in degrees"""  
    unit: Optional[TemplateDefinitionNewLayoutUnitEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unit'), 'exclude': lambda f: f is None }})
    r"""Measure unit"""  
    width: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('width'), 'exclude': lambda f: f is None }})
    r"""Page width in units"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TemplateDefinitionNewPagesMargins:
    
    bottom: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bottom'), 'exclude': lambda f: f is None }})
    r"""Page or label margin from bottom"""  
    right: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('right'), 'exclude': lambda f: f is None }})
    r"""Page or label margin from right"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TemplateDefinitionNewPages:
    
    components: Optional[list[shared_component.Component]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('components'), 'exclude': lambda f: f is None }})  
    height: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('height'), 'exclude': lambda f: f is None }})
    r"""Page height in units"""  
    margins: Optional[TemplateDefinitionNewPagesMargins] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('margins'), 'exclude': lambda f: f is None }})  
    width: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('width'), 'exclude': lambda f: f is None }})
    r"""Page width in units"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TemplateDefinitionNew:
    r"""Template configuration"""
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Template name"""  
    is_draft: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isDraft'), 'exclude': lambda f: f is None }})
    r"""Indicates if the template is a draft or published."""  
    layout: Optional[TemplateDefinitionNewLayout] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('layout'), 'exclude': lambda f: f is None }})
    r"""Defines template layout (e.g page format, margins)."""  
    pages: Optional[list[TemplateDefinitionNewPages]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pages'), 'exclude': lambda f: f is None }})
    r"""Defines page or label size, margins and components on page or label"""  
    tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""A list of tags assigned to a template"""  
    