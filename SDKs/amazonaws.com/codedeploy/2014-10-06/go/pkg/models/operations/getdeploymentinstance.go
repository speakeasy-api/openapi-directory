// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetDeploymentInstanceXAmzTargetEnum
type GetDeploymentInstanceXAmzTargetEnum string

const (
	GetDeploymentInstanceXAmzTargetEnumCodeDeploy20141006GetDeploymentInstance GetDeploymentInstanceXAmzTargetEnum = "CodeDeploy_20141006.GetDeploymentInstance"
)

func (e GetDeploymentInstanceXAmzTargetEnum) ToPointer() *GetDeploymentInstanceXAmzTargetEnum {
	return &e
}

func (e *GetDeploymentInstanceXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CodeDeploy_20141006.GetDeploymentInstance":
		*e = GetDeploymentInstanceXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentInstanceXAmzTargetEnum: %v", v)
	}
}

type GetDeploymentInstanceRequest struct {
	GetDeploymentInstanceInput shared.GetDeploymentInstanceInput   `request:"mediaType=application/json"`
	XAmzAlgorithm              *string                             `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256          *string                             `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential             *string                             `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                   *string                             `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken          *string                             `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature              *string                             `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders          *string                             `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                 GetDeploymentInstanceXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetDeploymentInstanceResponse struct {
	ContentType string
	// DeploymentDoesNotExistException
	DeploymentDoesNotExistException interface{}
	// DeploymentIdRequiredException
	DeploymentIDRequiredException interface{}
	// Success
	GetDeploymentInstanceOutput *shared.GetDeploymentInstanceOutput
	// InstanceDoesNotExistException
	InstanceDoesNotExistException interface{}
	// InstanceIdRequiredException
	InstanceIDRequiredException interface{}
	// InvalidComputePlatformException
	InvalidComputePlatformException interface{}
	// InvalidDeploymentIdException
	InvalidDeploymentIDException interface{}
	// InvalidInstanceNameException
	InvalidInstanceNameException interface{}
	StatusCode                   int
	RawResponse                  *http.Response
}
