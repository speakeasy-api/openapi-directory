<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * CertificateAddParameter - A certificate that can be installed on compute nodes and can be used to authenticate operations on the machine.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class CertificateAddParameter
{
    /**
     * Gets or sets the format of the certificate data. This must be pfx.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CertificateAddParameterCertificateFormatEnum $certificateFormat
     */
	#[\JMS\Serializer\Annotation\SerializedName('certificateFormat')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\CertificateAddParameterCertificateFormatEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CertificateAddParameterCertificateFormatEnum $certificateFormat = null;
    
    /**
     * Gets or sets the base64-encoded contents of the .pfx file containing the certificate. The maximum size is 10KB. This property is not populated by the Get Certificate operation.
     * 
     * @var string $data
     */
	#[\JMS\Serializer\Annotation\SerializedName('data')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $data;
    
    /**
     * Gets or sets the password to access the certificate's private key. This property is not populated by the Get Certificate operation.
     * 
     * @var ?string $password
     */
	#[\JMS\Serializer\Annotation\SerializedName('password')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $password = null;
    
    /**
     * Get or sets the X.509 thumbprint of the certificate. This is a sequence of up to 40 hex digits (it may include spaces but these are removed).
     * 
     * @var string $thumbprint
     */
	#[\JMS\Serializer\Annotation\SerializedName('thumbprint')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $thumbprint;
    
    /**
     * Gets or sets the algorithm used to derive the thumbprint. This must be sha1.
     * 
     * @var string $thumbprintAlgorithm
     */
	#[\JMS\Serializer\Annotation\SerializedName('thumbprintAlgorithm')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $thumbprintAlgorithm;
    
	public function __construct()
	{
		$this->certificateFormat = null;
		$this->data = "";
		$this->password = null;
		$this->thumbprint = "";
		$this->thumbprintAlgorithm = "";
	}
}
