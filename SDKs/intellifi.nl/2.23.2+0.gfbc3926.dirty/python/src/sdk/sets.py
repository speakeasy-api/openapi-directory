"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Sets:
    r"""It can be useful to group items or Smartspots in a list. The `sets` resource can be used to create and manage such list sets.
    Sets can be utilized in various Brain Management Console utilities and can also be useful in custom Brain applications.
    https://intellifi.zendesk.com/hc/en-us/articles/360007824993
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_item_ids_list(self, request: operations.AddItemIdsListRequest) -> operations.AddItemIdsListResponse:
        r"""Add items to an existing list"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddItemIdsListRequest, base_url, '/sets/itemlists/{id}/ids', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddItemIdsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseListResource])
                res.response_list_resource = out

        return res

    def add_item_ids_spot_list(self, request: operations.AddItemIdsSpotListRequest) -> operations.AddItemIdsSpotListResponse:
        r"""Add spots to an existing list"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddItemIdsSpotListRequest, base_url, '/sets/spotlists/{id}/ids', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddItemIdsSpotListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseListResource])
                res.response_list_resource = out

        return res

    def add_item_list(self, request: shared.ItemListInput) -> operations.AddItemListResponse:
        r"""Create item list"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/sets/itemlists'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddItemListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseDefaultResource])
                res.response_default_resource = out

        return res

    def add_spot_list(self, request: shared.ItemListInput) -> operations.AddSpotListResponse:
        r"""Create spot list"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/sets/spotlists'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddSpotListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseDefaultResource])
                res.response_default_resource = out

        return res

    def delete_item_id_from_item_list(self, request: operations.DeleteItemIDFromItemListRequest) -> operations.DeleteItemIDFromItemListResponse:
        r"""Delete item from list"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteItemIDFromItemListRequest, base_url, '/sets/itemlists/{id}/ids/{itemId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteItemIDFromItemListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseListResource])
                res.response_list_resource = out

        return res

    def delete_item_id_from_spot_list(self, request: operations.DeleteItemIDFromSpotListRequest) -> operations.DeleteItemIDFromSpotListResponse:
        r"""Delete spot from list"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteItemIDFromSpotListRequest, base_url, '/sets/spotlists/{id}/ids/{itemId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteItemIDFromSpotListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseListResource])
                res.response_list_resource = out

        return res

    def delete_item_set(self, request: operations.DeleteItemSetRequest) -> operations.DeleteItemSetResponse:
        r"""Delete item list"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteItemSetRequest, base_url, '/sets/itemlists/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteItemSetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseDefaultResource])
                res.response_default_resource = out

        return res

    def delete_spot_list(self, request: operations.DeleteSpotListRequest) -> operations.DeleteSpotListResponse:
        r"""Delete spot list"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSpotListRequest, base_url, '/sets/spotlists/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSpotListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseDefaultResource])
                res.response_default_resource = out

        return res

    def get_item_list_by_id(self, request: operations.GetItemListByIDRequest) -> operations.GetItemListByIDResponse:
        r"""Get item list"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetItemListByIDRequest, base_url, '/sets/itemlists/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetItemListByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ItemList])
                res.item_list = out

        return res

    def get_item_list_ids_by_id(self, request: operations.GetItemListIdsByIDRequest) -> operations.GetItemListIdsByIDResponse:
        r"""Get item ids for this list"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetItemListIdsByIDRequest, base_url, '/sets/itemlists/{id}/ids', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetItemListIdsByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.list_of_item_ids = out

        return res

    def get_item_lists(self, request: operations.GetItemListsRequest) -> operations.GetItemListsResponse:
        r"""Get all item lists"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/sets/itemlists'
        
        query_params = utils.get_query_params(operations.GetItemListsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetItemListsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetItemLists200ApplicationJSON])
                res.get_item_lists_200_application_json_object = out

        return res

    def get_spot_list_by_id(self, request: operations.GetSpotListByIDRequest) -> operations.GetSpotListByIDResponse:
        r"""Info for a specific spot list"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpotListByIDRequest, base_url, '/sets/spotlists/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpotListByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SpotList])
                res.spot_list = out

        return res

    def get_spot_list_ids_by_id(self, request: operations.GetSpotListIdsByIDRequest) -> operations.GetSpotListIdsByIDResponse:
        r"""Get spot ids for this list"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpotListIdsByIDRequest, base_url, '/sets/spotlists/{id}/ids', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpotListIdsByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.list_of_item_ids = out

        return res

    def get_spot_lists(self, request: operations.GetSpotListsRequest) -> operations.GetSpotListsResponse:
        r"""Get all spot lists"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/sets/spotlists'
        
        query_params = utils.get_query_params(operations.GetSpotListsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpotListsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetSpotLists200ApplicationJSON])
                res.get_spot_lists_200_application_json_object = out

        return res

    def update_item_list(self, request: operations.UpdateItemListRequest) -> operations.UpdateItemListResponse:
        r"""Update existing item list"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateItemListRequest, base_url, '/sets/itemlists/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "item_list_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateItemListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseDefaultResource])
                res.response_default_resource = out

        return res

    def update_spot_list(self, request: operations.UpdateSpotListRequest) -> operations.UpdateSpotListResponse:
        r"""Update existing spot list"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateSpotListRequest, base_url, '/sets/spotlists/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "spot_list_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateSpotListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseDefaultResource])
                res.response_default_resource = out

        return res

    