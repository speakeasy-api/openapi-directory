/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Generates an OAuth 2.0 access token for a service account.
   */
  iamcredentialsProjectsServiceAccountsGenerateAccessToken(
    req: operations.IamcredentialsProjectsServiceAccountsGenerateAccessTokenRequest,
    security: operations.IamcredentialsProjectsServiceAccountsGenerateAccessTokenSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.IamcredentialsProjectsServiceAccountsGenerateAccessTokenResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.IamcredentialsProjectsServiceAccountsGenerateAccessTokenRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{name}:generateAccessToken",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "generateAccessTokenRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.IamcredentialsProjectsServiceAccountsGenerateAccessTokenSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.IamcredentialsProjectsServiceAccountsGenerateAccessTokenResponse =
        new operations.IamcredentialsProjectsServiceAccountsGenerateAccessTokenResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.generateAccessTokenResponse = utils.objectToClass(
              httpRes?.data,
              shared.GenerateAccessTokenResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Generates an OpenID Connect ID token for a service account.
   */
  iamcredentialsProjectsServiceAccountsGenerateIdToken(
    req: operations.IamcredentialsProjectsServiceAccountsGenerateIdTokenRequest,
    security: operations.IamcredentialsProjectsServiceAccountsGenerateIdTokenSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.IamcredentialsProjectsServiceAccountsGenerateIdTokenResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.IamcredentialsProjectsServiceAccountsGenerateIdTokenRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{name}:generateIdToken",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "generateIdTokenRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.IamcredentialsProjectsServiceAccountsGenerateIdTokenSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.IamcredentialsProjectsServiceAccountsGenerateIdTokenResponse =
        new operations.IamcredentialsProjectsServiceAccountsGenerateIdTokenResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.generateIdTokenResponse = utils.objectToClass(
              httpRes?.data,
              shared.GenerateIdTokenResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Signs a blob using a service account's system-managed private key.
   */
  iamcredentialsProjectsServiceAccountsSignBlob(
    req: operations.IamcredentialsProjectsServiceAccountsSignBlobRequest,
    security: operations.IamcredentialsProjectsServiceAccountsSignBlobSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.IamcredentialsProjectsServiceAccountsSignBlobResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.IamcredentialsProjectsServiceAccountsSignBlobRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:signBlob", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "signBlobRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.IamcredentialsProjectsServiceAccountsSignBlobSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.IamcredentialsProjectsServiceAccountsSignBlobResponse =
        new operations.IamcredentialsProjectsServiceAccountsSignBlobResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.signBlobResponse = utils.objectToClass(
              httpRes?.data,
              shared.SignBlobResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Signs a JWT using a service account's system-managed private key.
   */
  iamcredentialsProjectsServiceAccountsSignJwt(
    req: operations.IamcredentialsProjectsServiceAccountsSignJwtRequest,
    security: operations.IamcredentialsProjectsServiceAccountsSignJwtSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.IamcredentialsProjectsServiceAccountsSignJwtResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.IamcredentialsProjectsServiceAccountsSignJwtRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:signJwt", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "signJwtRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.IamcredentialsProjectsServiceAccountsSignJwtSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.IamcredentialsProjectsServiceAccountsSignJwtResponse =
        new operations.IamcredentialsProjectsServiceAccountsSignJwtResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.signJwtResponse = utils.objectToClass(
              httpRes?.data,
              shared.SignJwtResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
