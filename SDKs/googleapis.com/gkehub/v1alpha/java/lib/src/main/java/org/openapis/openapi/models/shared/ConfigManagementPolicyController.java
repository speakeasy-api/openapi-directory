/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ConfigManagementPolicyController - Configuration for Policy Controller
 */
public class ConfigManagementPolicyController {
    /**
     * Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auditIntervalSeconds")
    public String auditIntervalSeconds;

    public ConfigManagementPolicyController withAuditIntervalSeconds(String auditIntervalSeconds) {
        this.auditIntervalSeconds = auditIntervalSeconds;
        return this;
    }
    
    /**
     * Enables the installation of Policy Controller. If false, the rest of PolicyController fields take no effect.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enabled")
    public Boolean enabled;

    public ConfigManagementPolicyController withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }
    
    /**
     * The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exemptableNamespaces")
    public String[] exemptableNamespaces;

    public ConfigManagementPolicyController withExemptableNamespaces(String[] exemptableNamespaces) {
        this.exemptableNamespaces = exemptableNamespaces;
        return this;
    }
    
    /**
     * Logs all denies and dry run failures.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logDeniesEnabled")
    public Boolean logDeniesEnabled;

    public ConfigManagementPolicyController withLogDeniesEnabled(Boolean logDeniesEnabled) {
        this.logDeniesEnabled = logDeniesEnabled;
        return this;
    }
    
    /**
     * PolicyControllerMonitoring specifies the backends Policy Controller should export metrics to. For example, to specify metrics should be exported to Cloud Monitoring and Prometheus, specify backends: ["cloudmonitoring", "prometheus"]
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("monitoring")
    public ConfigManagementPolicyControllerMonitoring monitoring;

    public ConfigManagementPolicyController withMonitoring(ConfigManagementPolicyControllerMonitoring monitoring) {
        this.monitoring = monitoring;
        return this;
    }
    
    /**
     * Enable or disable mutation in policy controller. If true, mutation CRDs, webhook and controller deployment will be deployed to the cluster.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mutationEnabled")
    public Boolean mutationEnabled;

    public ConfigManagementPolicyController withMutationEnabled(Boolean mutationEnabled) {
        this.mutationEnabled = mutationEnabled;
        return this;
    }
    
    /**
     * Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("referentialRulesEnabled")
    public Boolean referentialRulesEnabled;

    public ConfigManagementPolicyController withReferentialRulesEnabled(Boolean referentialRulesEnabled) {
        this.referentialRulesEnabled = referentialRulesEnabled;
        return this;
    }
    
    /**
     * Installs the default template library along with Policy Controller.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("templateLibraryInstalled")
    public Boolean templateLibraryInstalled;

    public ConfigManagementPolicyController withTemplateLibraryInstalled(Boolean templateLibraryInstalled) {
        this.templateLibraryInstalled = templateLibraryInstalled;
        return this;
    }
    
    public ConfigManagementPolicyController(){}
}
