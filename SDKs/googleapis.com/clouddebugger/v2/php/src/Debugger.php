<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Debugger 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes the breakpoint from the debuggee.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesBreakpointsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesBreakpointsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesBreakpointsDeleteResponse
     */
	public function clouddebuggerDebuggerDebuggeesBreakpointsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesBreakpointsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesBreakpointsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesBreakpointsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}', \OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesBreakpointsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesBreakpointsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesBreakpointsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets breakpoint information.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesBreakpointsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesBreakpointsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesBreakpointsGetResponse
     */
	public function clouddebuggerDebuggerDebuggeesBreakpointsGet(
        \OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesBreakpointsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesBreakpointsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesBreakpointsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}', \OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesBreakpointsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesBreakpointsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesBreakpointsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getBreakpointResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetBreakpointResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all breakpoints for the debuggee.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesBreakpointsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesBreakpointsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesBreakpointsListResponse
     */
	public function clouddebuggerDebuggerDebuggeesBreakpointsList(
        \OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesBreakpointsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesBreakpointsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesBreakpointsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/debugger/debuggees/{debuggeeId}/breakpoints', \OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesBreakpointsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesBreakpointsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesBreakpointsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listBreakpointsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListBreakpointsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the breakpoint to the debuggee.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesBreakpointsSetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesBreakpointsSetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesBreakpointsSetResponse
     */
	public function clouddebuggerDebuggerDebuggeesBreakpointsSet(
        \OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesBreakpointsSetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesBreakpointsSetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesBreakpointsSetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/debugger/debuggees/{debuggeeId}/breakpoints/set', \OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesBreakpointsSetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "breakpoint", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesBreakpointsSetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesBreakpointsSetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->setBreakpointResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SetBreakpointResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all the debuggees that the user has access to.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesListResponse
     */
	public function clouddebuggerDebuggerDebuggeesList(
        \OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/debugger/debuggees');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClouddebuggerDebuggerDebuggeesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDebuggeesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListDebuggeesResponse', 'json');
            }
        }

        return $response;
    }
}