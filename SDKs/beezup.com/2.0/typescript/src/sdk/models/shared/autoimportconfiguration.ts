/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { DuplicateProductValueConfiguration } from "./duplicateproductvalueconfiguration";
import { InputConfiguration } from "./inputconfiguration";
import { SchedulingTypeEnum } from "./schedulingtypeenum";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Auto import configuration
 */
export class AutoImportConfiguration extends SpeakeasyBase {
  /**
   * Describe how you want to manage the duplication of the product value
   */
  @SpeakeasyMetadata()
  @Expose({ name: "duplicateProductConfiguration" })
  @Type(() => DuplicateProductValueConfiguration)
  duplicateProductConfiguration: DuplicateProductValueConfiguration;

  /**
   * Describe the input configuration
   */
  @SpeakeasyMetadata()
  @Expose({ name: "input" })
  @Type(() => InputConfiguration)
  input: InputConfiguration;

  /**
   * The user identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "inputConfiguredByUserId" })
  inputConfiguredByUserId: string;

  /**
   * The user identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pauseStatusChangedByUserId" })
  pauseStatusChangedByUserId?: string;

  /**
   * Indicate when the pause status has changed in UTC date.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pauseStatusChangedUtcDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  pauseStatusChangedUtcDate?: Date;

  /**
   * Indicate if the auto import is in pause or not.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "paused" })
  paused: boolean;

  /**
   * The user identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scheduledByUserId" })
  scheduledByUserId?: string;

  /**
   * Indicate the time zone name of the scheduling. If the scheduling type is "Schedule"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "schedulingLocalTimeZoneName" })
  schedulingLocalTimeZoneName?: string;

  /**
   * Indicate the scheduling type. Schedule or Interval. We recommand you to use interval for a better reporting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "schedulingType" })
  schedulingType: SchedulingTypeEnum;

  /**
   * Indicate the scheduling value. If the scheduling type is Interval then the value will be a duration otherwise the values will be the time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "schedulingValue" })
  schedulingValue: string[];
}
