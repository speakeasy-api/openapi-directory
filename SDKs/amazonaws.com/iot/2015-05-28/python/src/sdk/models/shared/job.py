"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import abortconfig as shared_abortconfig
from ..shared import jobexecutionsretryconfig as shared_jobexecutionsretryconfig
from ..shared import jobexecutionsrolloutconfig as shared_jobexecutionsrolloutconfig
from ..shared import jobprocessdetails as shared_jobprocessdetails
from ..shared import jobstatus_enum as shared_jobstatus_enum
from ..shared import presignedurlconfig as shared_presignedurlconfig
from ..shared import scheduledjobrollout as shared_scheduledjobrollout
from ..shared import schedulingconfig as shared_schedulingconfig
from ..shared import targetselection_enum as shared_targetselection_enum
from ..shared import timeoutconfig as shared_timeoutconfig
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Job:
    r"""The <code>Job</code> object contains details about a job."""
    
    abort_config: Optional[shared_abortconfig.AbortConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('abortConfig'), 'exclude': lambda f: f is None }})  
    comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comment'), 'exclude': lambda f: f is None }})  
    completed_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('completedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    document_parameters: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('documentParameters'), 'exclude': lambda f: f is None }})  
    force_canceled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('forceCanceled'), 'exclude': lambda f: f is None }})  
    is_concurrent: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isConcurrent'), 'exclude': lambda f: f is None }})  
    job_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobArn'), 'exclude': lambda f: f is None }})  
    job_executions_retry_config: Optional[shared_jobexecutionsretryconfig.JobExecutionsRetryConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobExecutionsRetryConfig'), 'exclude': lambda f: f is None }})  
    job_executions_rollout_config: Optional[shared_jobexecutionsrolloutconfig.JobExecutionsRolloutConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobExecutionsRolloutConfig'), 'exclude': lambda f: f is None }})  
    job_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobId'), 'exclude': lambda f: f is None }})  
    job_process_details: Optional[shared_jobprocessdetails.JobProcessDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobProcessDetails'), 'exclude': lambda f: f is None }})  
    job_template_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobTemplateArn'), 'exclude': lambda f: f is None }})  
    last_updated_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastUpdatedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    namespace_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('namespaceId'), 'exclude': lambda f: f is None }})  
    presigned_url_config: Optional[shared_presignedurlconfig.PresignedURLConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('presignedUrlConfig'), 'exclude': lambda f: f is None }})  
    reason_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reasonCode'), 'exclude': lambda f: f is None }})  
    scheduled_job_rollouts: Optional[list[shared_scheduledjobrollout.ScheduledJobRollout]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scheduledJobRollouts'), 'exclude': lambda f: f is None }})  
    scheduling_config: Optional[shared_schedulingconfig.SchedulingConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schedulingConfig'), 'exclude': lambda f: f is None }})  
    status: Optional[shared_jobstatus_enum.JobStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    targets: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targets'), 'exclude': lambda f: f is None }})  
    target_selection: Optional[shared_targetselection_enum.TargetSelectionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetSelection'), 'exclude': lambda f: f is None }})  
    timeout_config: Optional[shared_timeoutconfig.TimeoutConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeoutConfig'), 'exclude': lambda f: f is None }})  
    