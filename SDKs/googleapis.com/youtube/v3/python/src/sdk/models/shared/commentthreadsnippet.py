"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import comment as shared_comment
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommentThreadSnippet:
    r"""Basic details about a comment thread."""
    
    can_reply: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('canReply'), 'exclude': lambda f: f is None }})
    r"""Whether the current viewer of the thread can reply to it. This is viewer specific - other viewers may see a different value for this field."""  
    channel_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelId'), 'exclude': lambda f: f is None }})
    r"""The YouTube channel the comments in the thread refer to or the channel with the video the comments refer to. If video_id isn't set the comments refer to the channel itself."""  
    is_public: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isPublic'), 'exclude': lambda f: f is None }})
    r"""Whether the thread (and therefore all its comments) is visible to all YouTube users."""  
    top_level_comment: Optional[shared_comment.Comment] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topLevelComment'), 'exclude': lambda f: f is None }})
    r"""A *comment* represents a single YouTube comment."""  
    total_reply_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalReplyCount'), 'exclude': lambda f: f is None }})
    r"""The total number of replies (not including the top level comment)."""  
    video_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videoId'), 'exclude': lambda f: f is None }})
    r"""The ID of the video the comments refer to, if any. No video_id implies a channel discussion comment."""  
    