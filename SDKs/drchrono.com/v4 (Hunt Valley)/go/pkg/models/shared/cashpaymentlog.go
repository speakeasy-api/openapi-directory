// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CashPaymentLogActionEnum - `C`(Create), `U`(Update), `D`(Delete), `F`(Fill), `A`(Autofill)
type CashPaymentLogActionEnum string

const (
	CashPaymentLogActionEnumC CashPaymentLogActionEnum = "C"
	CashPaymentLogActionEnumU CashPaymentLogActionEnum = "U"
	CashPaymentLogActionEnumD CashPaymentLogActionEnum = "D"
	CashPaymentLogActionEnumF CashPaymentLogActionEnum = "F"
	CashPaymentLogActionEnumA CashPaymentLogActionEnum = "A"
)

func (e *CashPaymentLogActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "C":
		fallthrough
	case "U":
		fallthrough
	case "D":
		fallthrough
	case "F":
		fallthrough
	case "A":
		*e = CashPaymentLogActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CashPaymentLogActionEnum: %s", s)
	}
}

// CashPaymentLogPaymentMethodEnum - `"CASH", "CHCK" for Check, "DBIT" for Debit, "CRDT" for Credit Card, "AMEX" for American Express, "VISA", "MSTR" for Mastercard, "DISC" for Discover, "SQR1" for Square (legacy), "SQRE" for Square, "PTPA" for Patient Payments, "ONPT" for onpatient, "OTHR" for Other`
type CashPaymentLogPaymentMethodEnum string

const (
	CashPaymentLogPaymentMethodEnumCash CashPaymentLogPaymentMethodEnum = "CASH"
	CashPaymentLogPaymentMethodEnumChck CashPaymentLogPaymentMethodEnum = "CHCK"
	CashPaymentLogPaymentMethodEnumDbit CashPaymentLogPaymentMethodEnum = "DBIT"
	CashPaymentLogPaymentMethodEnumCrdt CashPaymentLogPaymentMethodEnum = "CRDT"
	CashPaymentLogPaymentMethodEnumAmex CashPaymentLogPaymentMethodEnum = "AMEX"
	CashPaymentLogPaymentMethodEnumVisa CashPaymentLogPaymentMethodEnum = "VISA"
	CashPaymentLogPaymentMethodEnumMstr CashPaymentLogPaymentMethodEnum = "MSTR"
	CashPaymentLogPaymentMethodEnumDisc CashPaymentLogPaymentMethodEnum = "DISC"
	CashPaymentLogPaymentMethodEnumSqr1 CashPaymentLogPaymentMethodEnum = "SQR1"
	CashPaymentLogPaymentMethodEnumSqre CashPaymentLogPaymentMethodEnum = "SQRE"
	CashPaymentLogPaymentMethodEnumPtpa CashPaymentLogPaymentMethodEnum = "PTPA"
	CashPaymentLogPaymentMethodEnumOnpt CashPaymentLogPaymentMethodEnum = "ONPT"
	CashPaymentLogPaymentMethodEnumOthr CashPaymentLogPaymentMethodEnum = "OTHR"
)

func (e *CashPaymentLogPaymentMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CASH":
		fallthrough
	case "CHCK":
		fallthrough
	case "DBIT":
		fallthrough
	case "CRDT":
		fallthrough
	case "AMEX":
		fallthrough
	case "VISA":
		fallthrough
	case "MSTR":
		fallthrough
	case "DISC":
		fallthrough
	case "SQR1":
		fallthrough
	case "SQRE":
		fallthrough
	case "PTPA":
		fallthrough
	case "ONPT":
		fallthrough
	case "OTHR":
		*e = CashPaymentLogPaymentMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CashPaymentLogPaymentMethodEnum: %s", s)
	}
}

// CashPaymentLog - OK
type CashPaymentLog struct {
	// `C`(Create), `U`(Update), `D`(Delete), `F`(Fill), `A`(Autofill)
	Action *CashPaymentLogActionEnum `json:"action,omitempty"`
	Amount *float64                  `json:"amount,omitempty"`
	// ID of appointment associated with the payment
	Appointment *string `json:"appointment,omitempty"`
	// ID of user who created the payment
	CreatedBy *string `json:"created_by,omitempty"`
	Doctor    *string `json:"doctor,omitempty"`
	ID        *int64  `json:"id,omitempty"`
	Patient   *string `json:"patient,omitempty"`
	// `"CASH", "CHCK" for Check, "DBIT" for Debit, "CRDT" for Credit Card, "AMEX" for American Express, "VISA", "MSTR" for Mastercard, "DISC" for Discover, "SQR1" for Square (legacy), "SQRE" for Square, "PTPA" for Patient Payments, "ONPT" for onpatient, "OTHR" for Other`
	PaymentMethod *CashPaymentLogPaymentMethodEnum `json:"payment_method,omitempty"`
	Source        *string                          `json:"source,omitempty"`
	UpdatedAt     *string                          `json:"updated_at,omitempty"`
}
