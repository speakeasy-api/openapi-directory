import { SpeakeasyBase } from "../../../internal/utils";
/**
 * Additional information about this property.
 */
export declare class JsonSchemaAnnotations extends SpeakeasyBase {
    /**
     * A list of methods for which this property is required on requests.
     */
    required?: string[];
}
export declare class JsonSchemaVariantMap extends SpeakeasyBase {
    dollarRef?: string;
    typeValue?: string;
}
/**
 * In a variant data type, the value of one property is used to determine how to interpret the entire entity. Its value must exist in a map of descriminant values to schema names.
 */
export declare class JsonSchemaVariant extends SpeakeasyBase {
    /**
     * The name of the type discriminant property.
     */
    discriminant?: string;
    /**
     * The map of discriminant value to schema to use for parsing..
     */
    map?: JsonSchemaVariantMap[];
}
export declare class JsonSchema extends SpeakeasyBase {
    /**
     * A reference to another schema. The value of this property is the "id" of another schema.
     */
    dollarRef?: string;
    additionalProperties?: JsonSchema;
    /**
     * Additional information about this property.
     */
    annotations?: JsonSchemaAnnotations;
    /**
     * A description of this object.
     */
    description?: string;
    /**
     * Values this parameter may take (if it is an enum).
     */
    enum?: string[];
    /**
     * The descriptions for the enums. Each position maps to the corresponding value in the "enum" array.
     */
    enumDescriptions?: string[];
    /**
     * An additional regular expression or key that helps constrain the value. For more details see: http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.23
     */
    format?: string;
    /**
     * Unique identifier for this schema.
     */
    id?: string;
    items?: JsonSchema;
    /**
     * Whether this parameter goes in the query or the path for REST requests.
     */
    location?: string;
    /**
     * The maximum value of this parameter.
     */
    maximum?: string;
    /**
     * The minimum value of this parameter.
     */
    minimum?: string;
    /**
     * The regular expression this parameter must conform to. Uses Java 6 regex format: http://docs.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html
     */
    pattern?: string;
    /**
     * If this is a schema for an object, list the schema for each property of this object.
     */
    properties?: Record<string, JsonSchema>;
    /**
     * The value is read-only, generated by the service. The value cannot be modified by the client. If the value is included in a POST, PUT, or PATCH request, it is ignored by the service.
     */
    readOnly?: boolean;
    /**
     * Whether this parameter may appear multiple times.
     */
    repeated?: boolean;
    /**
     * Whether the parameter is required.
     */
    required?: boolean;
    /**
     * The value type for this schema. A list of values can be found here: http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.1
     */
    type?: string;
    /**
     * In a variant data type, the value of one property is used to determine how to interpret the entire entity. Its value must exist in a map of descriminant values to schema names.
     */
    variant?: JsonSchemaVariant;
}
