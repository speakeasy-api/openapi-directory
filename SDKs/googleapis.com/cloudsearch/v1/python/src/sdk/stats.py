"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Stats:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def cloudsearch_stats_get_index(self, request: operations.CloudsearchStatsGetIndexRequest, security: operations.CloudsearchStatsGetIndexSecurity) -> operations.CloudsearchStatsGetIndexResponse:
        r"""Gets indexed item statistics aggreggated across all data sources. This API only returns statistics for previous dates; it doesn't return statistics for the current day. **Note:** This API requires a standard end user account to execute."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/stats/index'
        
        query_params = utils.get_query_params(operations.CloudsearchStatsGetIndexRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudsearchStatsGetIndexResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetCustomerIndexStatsResponse])
                res.get_customer_index_stats_response = out

        return res

    def cloudsearch_stats_get_query(self, request: operations.CloudsearchStatsGetQueryRequest, security: operations.CloudsearchStatsGetQuerySecurity) -> operations.CloudsearchStatsGetQueryResponse:
        r"""Get the query statistics for customer. **Note:** This API requires a standard end user account to execute."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/stats/query'
        
        query_params = utils.get_query_params(operations.CloudsearchStatsGetQueryRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudsearchStatsGetQueryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetCustomerQueryStatsResponse])
                res.get_customer_query_stats_response = out

        return res

    def cloudsearch_stats_get_searchapplication(self, request: operations.CloudsearchStatsGetSearchapplicationRequest, security: operations.CloudsearchStatsGetSearchapplicationSecurity) -> operations.CloudsearchStatsGetSearchapplicationResponse:
        r"""Get search application stats for customer. **Note:** This API requires a standard end user account to execute."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/stats/searchapplication'
        
        query_params = utils.get_query_params(operations.CloudsearchStatsGetSearchapplicationRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudsearchStatsGetSearchapplicationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetCustomerSearchApplicationStatsResponse])
                res.get_customer_search_application_stats_response = out

        return res

    def cloudsearch_stats_get_session(self, request: operations.CloudsearchStatsGetSessionRequest, security: operations.CloudsearchStatsGetSessionSecurity) -> operations.CloudsearchStatsGetSessionResponse:
        r"""Get the # of search sessions, % of successful sessions with a click query statistics for customer. **Note:** This API requires a standard end user account to execute."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/stats/session'
        
        query_params = utils.get_query_params(operations.CloudsearchStatsGetSessionRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudsearchStatsGetSessionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetCustomerSessionStatsResponse])
                res.get_customer_session_stats_response = out

        return res

    def cloudsearch_stats_get_user(self, request: operations.CloudsearchStatsGetUserRequest, security: operations.CloudsearchStatsGetUserSecurity) -> operations.CloudsearchStatsGetUserResponse:
        r"""Get the users statistics for customer. **Note:** This API requires a standard end user account to execute."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/stats/user'
        
        query_params = utils.get_query_params(operations.CloudsearchStatsGetUserRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudsearchStatsGetUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetCustomerUserStatsResponse])
                res.get_customer_user_stats_response = out

        return res

    def cloudsearch_stats_index_datasources_get(self, request: operations.CloudsearchStatsIndexDatasourcesGetRequest, security: operations.CloudsearchStatsIndexDatasourcesGetSecurity) -> operations.CloudsearchStatsIndexDatasourcesGetResponse:
        r"""Gets indexed item statistics for a single data source. **Note:** This API requires a standard end user account to execute."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudsearchStatsIndexDatasourcesGetRequest, base_url, '/v1/stats/index/{name}', request)
        
        query_params = utils.get_query_params(operations.CloudsearchStatsIndexDatasourcesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudsearchStatsIndexDatasourcesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetDataSourceIndexStatsResponse])
                res.get_data_source_index_stats_response = out

        return res

    def cloudsearch_stats_query_searchapplications_get(self, request: operations.CloudsearchStatsQuerySearchapplicationsGetRequest, security: operations.CloudsearchStatsQuerySearchapplicationsGetSecurity) -> operations.CloudsearchStatsQuerySearchapplicationsGetResponse:
        r"""Get the query statistics for search application. **Note:** This API requires a standard end user account to execute."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudsearchStatsQuerySearchapplicationsGetRequest, base_url, '/v1/stats/query/{name}', request)
        
        query_params = utils.get_query_params(operations.CloudsearchStatsQuerySearchapplicationsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudsearchStatsQuerySearchapplicationsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetSearchApplicationQueryStatsResponse])
                res.get_search_application_query_stats_response = out

        return res

    def cloudsearch_stats_session_searchapplications_get(self, request: operations.CloudsearchStatsSessionSearchapplicationsGetRequest, security: operations.CloudsearchStatsSessionSearchapplicationsGetSecurity) -> operations.CloudsearchStatsSessionSearchapplicationsGetResponse:
        r"""Get the # of search sessions, % of successful sessions with a click query statistics for search application. **Note:** This API requires a standard end user account to execute."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudsearchStatsSessionSearchapplicationsGetRequest, base_url, '/v1/stats/session/{name}', request)
        
        query_params = utils.get_query_params(operations.CloudsearchStatsSessionSearchapplicationsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudsearchStatsSessionSearchapplicationsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetSearchApplicationSessionStatsResponse])
                res.get_search_application_session_stats_response = out

        return res

    def cloudsearch_stats_user_searchapplications_get(self, request: operations.CloudsearchStatsUserSearchapplicationsGetRequest, security: operations.CloudsearchStatsUserSearchapplicationsGetSecurity) -> operations.CloudsearchStatsUserSearchapplicationsGetResponse:
        r"""Get the users statistics for search application. **Note:** This API requires a standard end user account to execute."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudsearchStatsUserSearchapplicationsGetRequest, base_url, '/v1/stats/user/{name}', request)
        
        query_params = utils.get_query_params(operations.CloudsearchStatsUserSearchapplicationsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudsearchStatsUserSearchapplicationsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetSearchApplicationUserStatsResponse])
                res.get_search_application_user_stats_response = out

        return res

    