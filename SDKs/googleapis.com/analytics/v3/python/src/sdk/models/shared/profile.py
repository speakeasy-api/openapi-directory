"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProfileChildLink:
    r"""Child link for this view (profile). Points to the list of goals for this view (profile)."""
    
    href: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('href'), 'exclude': lambda f: f is None }})
    r"""Link to the list of goals for this view (profile)."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Value is \\"analytics#goals\\"."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProfileParentLink:
    r"""Parent link for this view (profile). Points to the web property to which this view (profile) belongs."""
    
    href: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('href'), 'exclude': lambda f: f is None }})
    r"""Link to the web property to which this view (profile) belongs."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Value is \\"analytics#webproperty\\"."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProfilePermissions:
    r"""Permissions the user has for this view (profile)."""
    
    effective: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('effective'), 'exclude': lambda f: f is None }})
    r"""All the permissions that the user has for this view (profile). These include any implied permissions (e.g., EDIT implies VIEW) or inherited permissions from the parent web property."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Profile:
    r"""JSON template for an Analytics view (profile)."""
    
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountId'), 'exclude': lambda f: f is None }})
    r"""Account ID to which this view (profile) belongs."""  
    bot_filtering_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('botFilteringEnabled'), 'exclude': lambda f: f is None }})
    r"""Indicates whether bot filtering is enabled for this view (profile)."""  
    child_link: Optional[ProfileChildLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('childLink'), 'exclude': lambda f: f is None }})
    r"""Child link for this view (profile). Points to the list of goals for this view (profile)."""  
    created: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Time this view (profile) was created."""  
    currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency'), 'exclude': lambda f: f is None }})
    r"""The currency type associated with this view (profile), defaults to USD. The supported values are:
    USD, JPY, EUR, GBP, AUD, KRW, BRL, CNY, DKK, RUB, SEK, NOK, PLN, TRY, TWD, HKD, THB, IDR, ARS, MXN, VND, PHP, INR, CHF, CAD, CZK, NZD, HUF, BGN, LTL, ZAR, UAH, AED, BOB, CLP, COP, EGP, HRK, ILS, MAD, MYR, PEN, PKR, RON, RSD, SAR, SGD, VEF, LVL
    """  
    default_page: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultPage'), 'exclude': lambda f: f is None }})
    r"""Default page for this view (profile)."""  
    e_commerce_tracking: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eCommerceTracking'), 'exclude': lambda f: f is None }})
    r"""Indicates whether ecommerce tracking is enabled for this view (profile)."""  
    enhanced_e_commerce_tracking: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enhancedECommerceTracking'), 'exclude': lambda f: f is None }})
    r"""Indicates whether enhanced ecommerce tracking is enabled for this view (profile). This property can only be enabled if ecommerce tracking is enabled."""  
    exclude_query_parameters: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('excludeQueryParameters'), 'exclude': lambda f: f is None }})
    r"""The query parameters that are excluded from this view (profile)."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""View (Profile) ID."""  
    internal_web_property_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('internalWebPropertyId'), 'exclude': lambda f: f is None }})
    r"""Internal ID for the web property to which this view (profile) belongs."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Resource type for Analytics view (profile)."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of this view (profile)."""  
    parent_link: Optional[ProfileParentLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parentLink'), 'exclude': lambda f: f is None }})
    r"""Parent link for this view (profile). Points to the web property to which this view (profile) belongs."""  
    permissions: Optional[ProfilePermissions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permissions'), 'exclude': lambda f: f is None }})
    r"""Permissions the user has for this view (profile)."""  
    self_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selfLink'), 'exclude': lambda f: f is None }})
    r"""Link for this view (profile)."""  
    site_search_category_parameters: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('siteSearchCategoryParameters'), 'exclude': lambda f: f is None }})
    r"""Site search category parameters for this view (profile)."""  
    site_search_query_parameters: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('siteSearchQueryParameters'), 'exclude': lambda f: f is None }})
    r"""The site search query parameters for this view (profile)."""  
    starred: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('starred'), 'exclude': lambda f: f is None }})
    r"""Indicates whether this view (profile) is starred or not."""  
    strip_site_search_category_parameters: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stripSiteSearchCategoryParameters'), 'exclude': lambda f: f is None }})
    r"""Whether or not Analytics will strip search category parameters from the URLs in your reports."""  
    strip_site_search_query_parameters: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stripSiteSearchQueryParameters'), 'exclude': lambda f: f is None }})
    r"""Whether or not Analytics will strip search query parameters from the URLs in your reports."""  
    timezone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timezone'), 'exclude': lambda f: f is None }})
    r"""Time zone for which this view (profile) has been configured. Time zones are identified by strings from the TZ database."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""View (Profile) type. Supported types: WEB or APP."""  
    updated: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Time this view (profile) was last modified."""  
    web_property_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webPropertyId'), 'exclude': lambda f: f is None }})
    r"""Web property ID of the form UA-XXXXX-YY to which this view (profile) belongs."""  
    website_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('websiteUrl'), 'exclude': lambda f: f is None }})
    r"""Website URL for this view (profile)."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProfileInput:
    r"""JSON template for an Analytics view (profile)."""
    
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountId'), 'exclude': lambda f: f is None }})
    r"""Account ID to which this view (profile) belongs."""  
    bot_filtering_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('botFilteringEnabled'), 'exclude': lambda f: f is None }})
    r"""Indicates whether bot filtering is enabled for this view (profile)."""  
    child_link: Optional[ProfileChildLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('childLink'), 'exclude': lambda f: f is None }})
    r"""Child link for this view (profile). Points to the list of goals for this view (profile)."""  
    currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency'), 'exclude': lambda f: f is None }})
    r"""The currency type associated with this view (profile), defaults to USD. The supported values are:
    USD, JPY, EUR, GBP, AUD, KRW, BRL, CNY, DKK, RUB, SEK, NOK, PLN, TRY, TWD, HKD, THB, IDR, ARS, MXN, VND, PHP, INR, CHF, CAD, CZK, NZD, HUF, BGN, LTL, ZAR, UAH, AED, BOB, CLP, COP, EGP, HRK, ILS, MAD, MYR, PEN, PKR, RON, RSD, SAR, SGD, VEF, LVL
    """  
    default_page: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultPage'), 'exclude': lambda f: f is None }})
    r"""Default page for this view (profile)."""  
    e_commerce_tracking: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eCommerceTracking'), 'exclude': lambda f: f is None }})
    r"""Indicates whether ecommerce tracking is enabled for this view (profile)."""  
    enhanced_e_commerce_tracking: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enhancedECommerceTracking'), 'exclude': lambda f: f is None }})
    r"""Indicates whether enhanced ecommerce tracking is enabled for this view (profile). This property can only be enabled if ecommerce tracking is enabled."""  
    exclude_query_parameters: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('excludeQueryParameters'), 'exclude': lambda f: f is None }})
    r"""The query parameters that are excluded from this view (profile)."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""View (Profile) ID."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of this view (profile)."""  
    parent_link: Optional[ProfileParentLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parentLink'), 'exclude': lambda f: f is None }})
    r"""Parent link for this view (profile). Points to the web property to which this view (profile) belongs."""  
    site_search_category_parameters: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('siteSearchCategoryParameters'), 'exclude': lambda f: f is None }})
    r"""Site search category parameters for this view (profile)."""  
    site_search_query_parameters: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('siteSearchQueryParameters'), 'exclude': lambda f: f is None }})
    r"""The site search query parameters for this view (profile)."""  
    starred: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('starred'), 'exclude': lambda f: f is None }})
    r"""Indicates whether this view (profile) is starred or not."""  
    strip_site_search_category_parameters: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stripSiteSearchCategoryParameters'), 'exclude': lambda f: f is None }})
    r"""Whether or not Analytics will strip search category parameters from the URLs in your reports."""  
    strip_site_search_query_parameters: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stripSiteSearchQueryParameters'), 'exclude': lambda f: f is None }})
    r"""Whether or not Analytics will strip search query parameters from the URLs in your reports."""  
    timezone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timezone'), 'exclude': lambda f: f is None }})
    r"""Time zone for which this view (profile) has been configured. Time zones are identified by strings from the TZ database."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""View (Profile) type. Supported types: WEB or APP."""  
    website_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('websiteUrl'), 'exclude': lambda f: f is None }})
    r"""Website URL for this view (profile)."""  
    