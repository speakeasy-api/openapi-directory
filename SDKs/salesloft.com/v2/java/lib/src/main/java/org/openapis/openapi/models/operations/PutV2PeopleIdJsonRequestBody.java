/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class PutV2PeopleIdJsonRequestBody {
    /**
     * ID of the Account to link this person to
     */
    @SpeakeasyMetadata("form:name=account_id")
    public Long accountId;

    public PutV2PeopleIdJsonRequestBody withAccountId(Long accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     * City
     */
    @SpeakeasyMetadata("form:name=city")
    public String city;

    public PutV2PeopleIdJsonRequestBody withCity(String city) {
        this.city = city;
        return this;
    }
    
    /**
     * Specific methods of communication to prevent for this person. This will prevent individual execution of these communication types as well as automatically skip cadence steps of this communication type for this person in SalesLoft. Values currently accepted: call, email, message
     */
    @SpeakeasyMetadata("form:name=contact_restrictions")
    public String[] contactRestrictions;

    public PutV2PeopleIdJsonRequestBody withContactRestrictions(String[] contactRestrictions) {
        this.contactRestrictions = contactRestrictions;
        return this;
    }
    
    /**
     * Country
     */
    @SpeakeasyMetadata("form:name=country")
    public String country;

    public PutV2PeopleIdJsonRequestBody withCountry(String country) {
        this.country = country;
        return this;
    }
    
    /**
     * Requires Salesforce.
     * 
     * ID of the person in your external CRM. You must provide a crm_id_type if this is included.
     * 
     * Validations will be applied to the crm_id depending on the crm_id_type. A "salesforce" ID must be exactly 18 characters. A "salesforce" ID must be either a Lead (00Q) or Contact (003) object. The type will be validated using the 18 character ID.
     * 
     * This field can only be used if your application or API key has the "person:set_crm_id" scope.
     * 
     * 
     */
    @SpeakeasyMetadata("form:name=crm_id")
    public String crmId;

    public PutV2PeopleIdJsonRequestBody withCrmId(String crmId) {
        this.crmId = crmId;
        return this;
    }
    
    /**
     * The CRM that the provided crm_id is for. Must be one of: salesforce
     */
    @SpeakeasyMetadata("form:name=crm_id_type")
    public String crmIdType;

    public PutV2PeopleIdJsonRequestBody withCrmIdType(String crmIdType) {
        this.crmIdType = crmIdType;
        return this;
    }
    
    /**
     * Custom fields are defined by the user's team. Only fields with values are presented in the API.
     */
    @SpeakeasyMetadata("form:name=custom_fields,json")
    public java.util.Map<String, Object> customFields;

    public PutV2PeopleIdJsonRequestBody withCustomFields(java.util.Map<String, Object> customFields) {
        this.customFields = customFields;
        return this;
    }
    
    /**
     * Whether or not this person has opted out of all communication. Setting this value to true prevents this person from being called, emailed, or added to a cadence in SalesLoft. If this person is currently in a cadence, they will be removed.
     */
    @SpeakeasyMetadata("form:name=do_not_contact")
    public Boolean doNotContact;

    public PutV2PeopleIdJsonRequestBody withDoNotContact(Boolean doNotContact) {
        this.doNotContact = doNotContact;
        return this;
    }
    
    /**
     * Email address
     */
    @SpeakeasyMetadata("form:name=email_address")
    public String emailAddress;

    public PutV2PeopleIdJsonRequestBody withEmailAddress(String emailAddress) {
        this.emailAddress = emailAddress;
        return this;
    }
    
    /**
     * First name
     */
    @SpeakeasyMetadata("form:name=first_name")
    public String firstName;

    public PutV2PeopleIdJsonRequestBody withFirstName(String firstName) {
        this.firstName = firstName;
        return this;
    }
    
    /**
     * Home phone without formatting
     */
    @SpeakeasyMetadata("form:name=home_phone")
    public String homePhone;

    public PutV2PeopleIdJsonRequestBody withHomePhone(String homePhone) {
        this.homePhone = homePhone;
        return this;
    }
    
    /**
     * ID of the Import this person is a part of. A person can be part of multiple imports, but this ID will always be the most recent Import
     */
    @SpeakeasyMetadata("form:name=import_id")
    public Long importId;

    public PutV2PeopleIdJsonRequestBody withImportId(Long importId) {
        this.importId = importId;
        return this;
    }
    
    /**
     * The Job Seniority of a Person, must be one of director, executive, individual_contributor, manager, vice_president, unknown
     */
    @SpeakeasyMetadata("form:name=job_seniority")
    public String jobSeniority;

    public PutV2PeopleIdJsonRequestBody withJobSeniority(String jobSeniority) {
        this.jobSeniority = jobSeniority;
        return this;
    }
    
    /**
     * Last name
     */
    @SpeakeasyMetadata("form:name=last_name")
    public String lastName;

    public PutV2PeopleIdJsonRequestBody withLastName(String lastName) {
        this.lastName = lastName;
        return this;
    }
    
    /**
     * Linkedin URL
     */
    @SpeakeasyMetadata("form:name=linkedin_url")
    public String linkedinUrl;

    public PutV2PeopleIdJsonRequestBody withLinkedinUrl(String linkedinUrl) {
        this.linkedinUrl = linkedinUrl;
        return this;
    }
    
    /**
     * Time locale of the person
     */
    @SpeakeasyMetadata("form:name=locale")
    public String locale;

    public PutV2PeopleIdJsonRequestBody withLocale(String locale) {
        this.locale = locale;
        return this;
    }
    
    /**
     * Mobile phone without formatting
     */
    @SpeakeasyMetadata("form:name=mobile_phone")
    public String mobilePhone;

    public PutV2PeopleIdJsonRequestBody withMobilePhone(String mobilePhone) {
        this.mobilePhone = mobilePhone;
        return this;
    }
    
    /**
     * ID of the User that owns this person
     */
    @SpeakeasyMetadata("form:name=owner_id")
    public Long ownerId;

    public PutV2PeopleIdJsonRequestBody withOwnerId(Long ownerId) {
        this.ownerId = ownerId;
        return this;
    }
    
    /**
     * Company industry. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended
     */
    @SpeakeasyMetadata("form:name=person_company_industry")
    public String personCompanyIndustry;

    public PutV2PeopleIdJsonRequestBody withPersonCompanyIndustry(String personCompanyIndustry) {
        this.personCompanyIndustry = personCompanyIndustry;
        return this;
    }
    
    /**
     * Company name. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended
     */
    @SpeakeasyMetadata("form:name=person_company_name")
    public String personCompanyName;

    public PutV2PeopleIdJsonRequestBody withPersonCompanyName(String personCompanyName) {
        this.personCompanyName = personCompanyName;
        return this;
    }
    
    /**
     * Company website. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended
     */
    @SpeakeasyMetadata("form:name=person_company_website")
    public String personCompanyWebsite;

    public PutV2PeopleIdJsonRequestBody withPersonCompanyWebsite(String personCompanyWebsite) {
        this.personCompanyWebsite = personCompanyWebsite;
        return this;
    }
    
    /**
     * ID of the PersonStage of this person
     */
    @SpeakeasyMetadata("form:name=person_stage_id")
    public Long personStageId;

    public PutV2PeopleIdJsonRequestBody withPersonStageId(Long personStageId) {
        this.personStageId = personStageId;
        return this;
    }
    
    /**
     * Personal email address
     */
    @SpeakeasyMetadata("form:name=personal_email_address")
    public String personalEmailAddress;

    public PutV2PeopleIdJsonRequestBody withPersonalEmailAddress(String personalEmailAddress) {
        this.personalEmailAddress = personalEmailAddress;
        return this;
    }
    
    /**
     * The website of this person
     */
    @SpeakeasyMetadata("form:name=personal_website")
    public String personalWebsite;

    public PutV2PeopleIdJsonRequestBody withPersonalWebsite(String personalWebsite) {
        this.personalWebsite = personalWebsite;
        return this;
    }
    
    /**
     * Phone without formatting
     */
    @SpeakeasyMetadata("form:name=phone")
    public String phone;

    public PutV2PeopleIdJsonRequestBody withPhone(String phone) {
        this.phone = phone;
        return this;
    }
    
    /**
     * Phone extension without formatting
     */
    @SpeakeasyMetadata("form:name=phone_extension")
    public String phoneExtension;

    public PutV2PeopleIdJsonRequestBody withPhoneExtension(String phoneExtension) {
        this.phoneExtension = phoneExtension;
        return this;
    }
    
    /**
     * Alternate email address
     */
    @SpeakeasyMetadata("form:name=secondary_email_address")
    public String secondaryEmailAddress;

    public PutV2PeopleIdJsonRequestBody withSecondaryEmailAddress(String secondaryEmailAddress) {
        this.secondaryEmailAddress = secondaryEmailAddress;
        return this;
    }
    
    /**
     * State
     */
    @SpeakeasyMetadata("form:name=state")
    public String state;

    public PutV2PeopleIdJsonRequestBody withState(String state) {
        this.state = state;
        return this;
    }
    
    /**
     * All tags applied to this person
     */
    @SpeakeasyMetadata("form:name=tags")
    public String[] tags;

    public PutV2PeopleIdJsonRequestBody withTags(String[] tags) {
        this.tags = tags;
        return this;
    }
    
    /**
     * Job title
     */
    @SpeakeasyMetadata("form:name=title")
    public String title;

    public PutV2PeopleIdJsonRequestBody withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * The twitter handle of this person
     */
    @SpeakeasyMetadata("form:name=twitter_handle")
    public String twitterHandle;

    public PutV2PeopleIdJsonRequestBody withTwitterHandle(String twitterHandle) {
        this.twitterHandle = twitterHandle;
        return this;
    }
    
    /**
     * Work location - city
     */
    @SpeakeasyMetadata("form:name=work_city")
    public String workCity;

    public PutV2PeopleIdJsonRequestBody withWorkCity(String workCity) {
        this.workCity = workCity;
        return this;
    }
    
    /**
     * Work location - country
     */
    @SpeakeasyMetadata("form:name=work_country")
    public String workCountry;

    public PutV2PeopleIdJsonRequestBody withWorkCountry(String workCountry) {
        this.workCountry = workCountry;
        return this;
    }
    
    /**
     * Work location - state
     */
    @SpeakeasyMetadata("form:name=work_state")
    public String workState;

    public PutV2PeopleIdJsonRequestBody withWorkState(String workState) {
        this.workState = workState;
        return this;
    }
    
    public PutV2PeopleIdJsonRequestBody(){}
}
