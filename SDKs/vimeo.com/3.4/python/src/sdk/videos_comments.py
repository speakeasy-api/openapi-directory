"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class VideosComments:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_comment(self, request: operations.CreateCommentRequest, security: operations.CreateCommentSecurity) -> operations.CreateCommentResponse:
        r"""Add a comment to a video"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateCommentRequest, base_url, '/videos/{video_id}/comments', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateCommentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.comment+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Comment])
                res.comment = out
        elif http_res.status_code in [400, 401, 403]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.comment+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def create_comment_alt1(self, request: operations.CreateCommentAlt1Request, security: operations.CreateCommentAlt1Security) -> operations.CreateCommentAlt1Response:
        r"""Add a comment to a video"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateCommentAlt1Request, base_url, '/channels/{channel_id}/videos/{video_id}/comments', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateCommentAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.comment+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Comment])
                res.comment = out
        elif http_res.status_code in [400, 401, 403]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.comment+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def create_comment_reply(self, request: operations.CreateCommentReplyRequest, security: operations.CreateCommentReplySecurity) -> operations.CreateCommentReplyResponse:
        r"""Add a reply to a video comment"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateCommentReplyRequest, base_url, '/videos/{video_id}/comments/{comment_id}/replies', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateCommentReplyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.comment+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Comment])
                res.comment = out
        elif http_res.status_code in [400, 403]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.comment+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def delete_comment(self, request: operations.DeleteCommentRequest, security: operations.DeleteCommentSecurity) -> operations.DeleteCommentResponse:
        r"""Delete a video comment"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteCommentRequest, base_url, '/videos/{video_id}/comments/{comment_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteCommentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def edit_comment(self, request: operations.EditCommentRequest, security: operations.EditCommentSecurity) -> operations.EditCommentResponse:
        r"""Edit a video comment"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.EditCommentRequest, base_url, '/videos/{video_id}/comments/{comment_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EditCommentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.comment+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Comment])
                res.comment = out
        elif http_res.status_code in [400, 403]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.comment+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_comment(self, request: operations.GetCommentRequest) -> operations.GetCommentResponse:
        r"""Get a specific video comment"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCommentRequest, base_url, '/videos/{video_id}/comments/{comment_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCommentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.comment+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Comment])
                res.comment = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.comment+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def get_comment_replies(self, request: operations.GetCommentRepliesRequest) -> operations.GetCommentRepliesResponse:
        r"""Get all the replies to a video comment"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCommentRepliesRequest, base_url, '/videos/{video_id}/comments/{comment_id}/replies', request)
        
        query_params = utils.get_query_params(operations.GetCommentRepliesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCommentRepliesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.comment+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Comment]])
                res.comments = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.comment+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def get_comments(self, request: operations.GetCommentsRequest) -> operations.GetCommentsResponse:
        r"""Get all the comments on a video"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCommentsRequest, base_url, '/videos/{video_id}/comments', request)
        
        query_params = utils.get_query_params(operations.GetCommentsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCommentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.comment+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Comment]])
                res.comments = out

        return res

    def get_comments_alt1(self, request: operations.GetCommentsAlt1Request) -> operations.GetCommentsAlt1Response:
        r"""Get all the comments on a video"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCommentsAlt1Request, base_url, '/channels/{channel_id}/videos/{video_id}/comments', request)
        
        query_params = utils.get_query_params(operations.GetCommentsAlt1Request, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCommentsAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.comment+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Comment]])
                res.comments = out

        return res

    