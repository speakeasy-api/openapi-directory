"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class UpdateScriptTagSecurity:
    
    o_auth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class UpdateScriptTagRequestBodyScriptTagDisplayScopeEnum(str, Enum):
    r"""スクリプトを出力するページ。
    
    - `all`: ショップページと注文完了ページの両方
    - `shop`: ショップページ
    - `thanks_page`: 注文完了ページ
    - `cart`: カートの途中のページ
    """
    ALL = 'all'
    SHOP = 'shop'
    THANKS_PAGE = 'thanks_page'
    CART = 'cart'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateScriptTagRequestBodyScriptTag:
    
    display_scope: Optional[UpdateScriptTagRequestBodyScriptTagDisplayScopeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display_scope'), 'exclude': lambda f: f is None }})
    r"""スクリプトを出力するページ。
    
    - `all`: ショップページと注文完了ページの両方
    - `shop`: ショップページ
    - `thanks_page`: 注文完了ページ
    - `cart`: カートの途中のページ
    """  
    src: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('src'), 'exclude': lambda f: f is None }})
    r"""スクリプトURL"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateScriptTagRequestBody:
    r"""作成するスクリプトタグの情報"""
    
    script_tag: Optional[UpdateScriptTagRequestBodyScriptTag] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('script_tag'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class UpdateScriptTagRequest:
    
    script_tag_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'scriptTagId', 'style': 'simple', 'explode': False }})
    r"""スクリプトタグID"""  
    request_body: Optional[UpdateScriptTagRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})
    r"""作成するスクリプトタグの情報"""  
    
class UpdateScriptTag200ApplicationJSONScriptTagDisplayScopeEnum(str, Enum):
    r"""スクリプトを出力するページ。
    
    - `all`: ショップページと注文完了ページの両方
    - `shop`: ショップページ
    - `thanks_page`: 注文完了ページ
    - `cart`: カートの途中のページ
    """
    ALL = 'all'
    SHOP = 'shop'
    THANKS_PAGE = 'thanks_page'
    CART = 'cart'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateScriptTag200ApplicationJSONScriptTag:
    
    display_scope: Optional[UpdateScriptTag200ApplicationJSONScriptTagDisplayScopeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display_scope'), 'exclude': lambda f: f is None }})
    r"""スクリプトを出力するページ。
    
    - `all`: ショップページと注文完了ページの両方
    - `shop`: ショップページ
    - `thanks_page`: 注文完了ページ
    - `cart`: カートの途中のページ
    """  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""スクリプトタグID"""  
    make_date: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('make_date'), 'exclude': lambda f: f is None }})
    r"""作成日時"""  
    src: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('src'), 'exclude': lambda f: f is None }})
    r"""スクリプトURL"""  
    update_date: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('update_date'), 'exclude': lambda f: f is None }})
    r"""更新日時"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateScriptTag200ApplicationJSON:
    
    script_tag: Optional[UpdateScriptTag200ApplicationJSONScriptTag] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('script_tag'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class UpdateScriptTagResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_script_tag_200_application_json_object: Optional[UpdateScriptTag200ApplicationJSON] = dataclasses.field(default=None)  
    