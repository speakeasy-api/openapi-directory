"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Boundaries:
    r"""Field Boundary data endpoints."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def fetch_boundaries(self, request: shared.BoundariesQuery, security: operations.FetchBoundariesSecurity) -> operations.FetchBoundariesResponse:
        r"""Retrieve Boundaries in batch
        Retrieve multiple **Boundaries** (up to 10 per request).
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v4/boundaries/query'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchBoundariesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Boundaries])
                res.boundaries = out
        elif http_res.status_code in [400, 401, 403, 404, 429, 500, 503]:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def fetch_boundary_by_id(self, request: operations.FetchBoundaryByIDRequest, security: operations.FetchBoundaryByIDSecurity) -> operations.FetchBoundaryByIDResponse:
        r"""Retrieve a Boundary by ID
        Retrieve a **Boundary** by ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.FetchBoundaryByIDRequest, base_url, '/v4/boundaries/{boundaryId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchBoundaryByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Boundary])
                res.boundary = out
        elif http_res.status_code in [400, 401, 403, 404, 429, 500, 503]:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def upload_boundary(self, request: shared.BoundaryUpload, security: operations.UploadBoundarySecurity) -> operations.UploadBoundaryResponse:
        r"""Upload a boundary
        Upload a **Boundary** entry by passing the geometry of the boundary. This will store the boundary but will not create field in Climate FieldView and will not link to an existing field in Climate FieldView.
        This is restricted to callers with **boundaries:write** scope.
        To upload a field boundary for field creation in Climate FieldView, please use **POST /v4/uploads**.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v4/boundaries'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UploadBoundaryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UploadedBoundaryID])
                res.uploaded_boundary_id = out
        elif http_res.status_code in [400, 401, 403, 404, 429, 500, 503]:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    