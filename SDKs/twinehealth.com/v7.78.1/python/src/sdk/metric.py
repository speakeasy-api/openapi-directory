"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Metric:
    r"""A metric is a quantitative result for a patient. For example, vital signs, lab results, etc. are all metrics."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_patient_health_metric(self, request: shared.CreatePatientHealthMetricRequest) -> operations.CreatePatientHealthMetricResponse:
        r"""Create patient health metrics
        Create one or more patient health metrics.
        
        Example for creating a patient health result with a patient specified using `meta.query` instead of `id`:
        
        ```JSON
          {
            \"data\": {
              \"type\": \"patient_health_metric\",
               \"attributes\": {
                 \"code\": {
                   \"system\": \"LOINC\",
                   \"value\": \"13457-7\"
                 },
                 \"type\": \"ldl_cholesterol\",
                 \"occurred_at\": \"2017-03-14T11:00:57.000Z\",
                 \"value\": 121,
                 \"unit\": \"mg/dl\"
              },
              \"relationships\": {
                \"patient\": {
                  \"data\": {
                    \"type\": \"patient\",
                    \"meta\": {
                      \"query\": {
                        \"identifier\": {
                          \"system\": \"medical-record-number\",
                          \"value\": \"121212\"
                        },
                        \"organization\": \"58c4554710123c5c40dbab81\"
                      }
                    }
                  }
                }
              }
            }
          }
        ```
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/patient_health_metric'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreatePatientHealthMetricResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.api+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreatePatientHealthMetricResponse])
                res.create_patient_health_metric_response = out
        elif http_res.status_code in [401, 403, 409]:
            if utils.match_content_type(content_type, 'application/vnd.api+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateOrUpdateErrorResponse])
                res.create_or_update_error_response = out

        return res

    def fetch_patient_health_metric(self, request: operations.FetchPatientHealthMetricRequest) -> operations.FetchPatientHealthMetricResponse:
        r"""Get a patient health metric
        Get the plan summary for a patient.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.FetchPatientHealthMetricRequest, base_url, '/patient_health_metric/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchPatientHealthMetricResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.api+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FetchPatientHealthMetricResponse])
                res.fetch_patient_health_metric_response = out
        elif http_res.status_code in [401, 403]:
            if utils.match_content_type(content_type, 'application/vnd.api+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FetchErrorResponse])
                res.fetch_error_response = out

        return res

    def fetch_patient_health_metrics(self, request: operations.FetchPatientHealthMetricsRequest) -> operations.FetchPatientHealthMetricsResponse:
        r"""List patient health metrics
        Get a list of patient health metrics.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/patient_health_metric'
        
        query_params = utils.get_query_params(operations.FetchPatientHealthMetricsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchPatientHealthMetricsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.api+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FetchPatientHealthMetricResponse])
                res.fetch_patient_health_metric_response = out
        elif http_res.status_code in [401, 403, 409]:
            if utils.match_content_type(content_type, 'application/vnd.api+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FetchErrorResponse])
                res.fetch_error_response = out

        return res

    