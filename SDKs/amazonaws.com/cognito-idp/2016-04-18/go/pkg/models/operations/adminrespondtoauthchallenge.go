// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// AdminRespondToAuthChallengeXAmzTargetEnum
type AdminRespondToAuthChallengeXAmzTargetEnum string

const (
	AdminRespondToAuthChallengeXAmzTargetEnumAwsCognitoIdentityProviderServiceAdminRespondToAuthChallenge AdminRespondToAuthChallengeXAmzTargetEnum = "AWSCognitoIdentityProviderService.AdminRespondToAuthChallenge"
)

func (e *AdminRespondToAuthChallengeXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AWSCognitoIdentityProviderService.AdminRespondToAuthChallenge":
		*e = AdminRespondToAuthChallengeXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AdminRespondToAuthChallengeXAmzTargetEnum: %s", s)
	}
}

type AdminRespondToAuthChallengeRequest struct {
	AdminRespondToAuthChallengeRequest shared.AdminRespondToAuthChallengeRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                      *string                                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256                  *string                                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                     *string                                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                           *string                                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken                  *string                                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                      *string                                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders                  *string                                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                         AdminRespondToAuthChallengeXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type AdminRespondToAuthChallengeResponse struct {
	// Success
	AdminRespondToAuthChallengeResponse *shared.AdminRespondToAuthChallengeResponse
	// AliasExistsException
	AliasExistsException interface{}
	// CodeMismatchException
	CodeMismatchException interface{}
	ContentType           string
	// ExpiredCodeException
	ExpiredCodeException interface{}
	// InternalErrorException
	InternalErrorException interface{}
	// InvalidLambdaResponseException
	InvalidLambdaResponseException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// InvalidPasswordException
	InvalidPasswordException interface{}
	// InvalidSmsRoleAccessPolicyException
	InvalidSmsRoleAccessPolicyException interface{}
	// InvalidSmsRoleTrustRelationshipException
	InvalidSmsRoleTrustRelationshipException interface{}
	// InvalidUserPoolConfigurationException
	InvalidUserPoolConfigurationException interface{}
	// MFAMethodNotFoundException
	MFAMethodNotFoundException interface{}
	// NotAuthorizedException
	NotAuthorizedException interface{}
	// PasswordResetRequiredException
	PasswordResetRequiredException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// SoftwareTokenMFANotFoundException
	SoftwareTokenMFANotFoundException interface{}
	// TooManyRequestsException
	TooManyRequestsException interface{}
	// UnexpectedLambdaException
	UnexpectedLambdaException interface{}
	// UserLambdaValidationException
	UserLambdaValidationException interface{}
	// UserNotConfirmedException
	UserNotConfirmedException interface{}
	// UserNotFoundException
	UserNotFoundException interface{}
}
