// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type PulsarRulePostRuleTypeEnum string

const (
	PulsarRulePostRuleTypeEnumPulsar PulsarRulePostRuleTypeEnum = "pulsar"
)

func (e PulsarRulePostRuleTypeEnum) ToPointer() *PulsarRulePostRuleTypeEnum {
	return &e
}

func (e *PulsarRulePostRuleTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pulsar":
		*e = PulsarRulePostRuleTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PulsarRulePostRuleTypeEnum: %v", v)
	}
}

type PulsarRulePostTargetAuthenticationType string

const (
	PulsarRulePostTargetAuthenticationTypeToken PulsarRulePostTargetAuthenticationType = "token"
)

type PulsarRulePostTargetAuthentication struct {
	PulsarTokenAuth *PulsarTokenAuth

	Type PulsarRulePostTargetAuthenticationType
}

func CreatePulsarRulePostTargetAuthenticationToken(token PulsarTokenAuth) PulsarRulePostTargetAuthentication {
	typ := PulsarRulePostTargetAuthenticationTypeToken
	typStr := PulsarTokenAuthAuthenticationModeEnum(typ)
	token.AuthenticationMode = typStr

	return PulsarRulePostTargetAuthentication{
		PulsarTokenAuth: &token,
		Type:            typ,
	}
}

func (u *PulsarRulePostTargetAuthentication) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	type discriminator struct {
		AuthenticationMode string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.AuthenticationMode {
	case "token":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		pulsarTokenAuth := new(PulsarTokenAuth)
		if err := d.Decode(&pulsarTokenAuth); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.PulsarTokenAuth = pulsarTokenAuth
		u.Type = PulsarRulePostTargetAuthenticationTypeToken
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PulsarRulePostTargetAuthentication) MarshalJSON() ([]byte, error) {
	if u.PulsarTokenAuth != nil {
		return json.Marshal(u.PulsarTokenAuth)
	}

	return nil, nil
}

type PulsarRulePostTarget struct {
	Authentication PulsarRulePostTargetAuthentication `json:"authentication"`
	Enveloped      *bool                              `json:"enveloped,omitempty"`
	Format         *string                            `json:"format,omitempty"`
	RoutingKey     *string                            `json:"routingKey,omitempty"`
	ServiceURL     string                             `json:"serviceUrl"`
	TLSTrustCerts  []string                           `json:"tlsTrustCerts,omitempty"`
	Topic          string                             `json:"topic"`
}

type PulsarRulePost struct {
	RequestMode string                     `json:"requestMode"`
	RuleType    PulsarRulePostRuleTypeEnum `json:"ruleType"`
	Source      RuleSource                 `json:"source"`
	Status      *string                    `json:"status,omitempty"`
	Target      PulsarRulePostTarget       `json:"target"`
}
