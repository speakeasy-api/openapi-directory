// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type DmcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type DmcerRequestBodyCertificateParameters struct {
	// Application No
	ApplicationNo string `json:"ApplicationNo"`
	// Certificate ID
	CertificateID string `json:"CertificateID"`
}

// DmcerRequestBodyFormatEnum - The format of the certificate in response.
type DmcerRequestBodyFormatEnum string

const (
	DmcerRequestBodyFormatEnumPdf DmcerRequestBodyFormatEnum = "pdf"
)

func (e DmcerRequestBodyFormatEnum) ToPointer() *DmcerRequestBodyFormatEnum {
	return &e
}

func (e *DmcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = DmcerRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DmcerRequestBodyFormatEnum: %v", v)
	}
}

// DmcerRequestBody - Request format
type DmcerRequestBody struct {
	CertificateParameters *DmcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format DmcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Dmcer504ApplicationJSONErrorEnum string

const (
	Dmcer504ApplicationJSONErrorEnumGatewayTimeout Dmcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Dmcer504ApplicationJSONErrorEnum) ToPointer() *Dmcer504ApplicationJSONErrorEnum {
	return &e
}

func (e *Dmcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Dmcer504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dmcer504ApplicationJSONErrorEnum: %v", v)
	}
}

type Dmcer504ApplicationJSONErrorDescriptionEnum string

const (
	Dmcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Dmcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Dmcer504ApplicationJSONErrorDescriptionEnum) ToPointer() *Dmcer504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Dmcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Dmcer504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dmcer504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Dmcer504ApplicationJSON - Gateway timeout
type Dmcer504ApplicationJSON struct {
	Error            *Dmcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dmcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dmcer503ApplicationJSONErrorEnum string

const (
	Dmcer503ApplicationJSONErrorEnumServiceUnavailable Dmcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Dmcer503ApplicationJSONErrorEnum) ToPointer() *Dmcer503ApplicationJSONErrorEnum {
	return &e
}

func (e *Dmcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Dmcer503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dmcer503ApplicationJSONErrorEnum: %v", v)
	}
}

type Dmcer503ApplicationJSONErrorDescriptionEnum string

const (
	Dmcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Dmcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Dmcer503ApplicationJSONErrorDescriptionEnum) ToPointer() *Dmcer503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Dmcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Dmcer503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dmcer503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Dmcer503ApplicationJSON - Service unavailable
type Dmcer503ApplicationJSON struct {
	Error            *Dmcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dmcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dmcer502ApplicationJSONErrorEnum string

const (
	Dmcer502ApplicationJSONErrorEnumBadGatewy Dmcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Dmcer502ApplicationJSONErrorEnum) ToPointer() *Dmcer502ApplicationJSONErrorEnum {
	return &e
}

func (e *Dmcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Dmcer502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dmcer502ApplicationJSONErrorEnum: %v", v)
	}
}

type Dmcer502ApplicationJSONErrorDescriptionEnum string

const (
	Dmcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Dmcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Dmcer502ApplicationJSONErrorDescriptionEnum) ToPointer() *Dmcer502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Dmcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Dmcer502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dmcer502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Dmcer502ApplicationJSON - Bad gateway
type Dmcer502ApplicationJSON struct {
	Error            *Dmcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dmcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dmcer500ApplicationJSONErrorEnum string

const (
	Dmcer500ApplicationJSONErrorEnumInternalServerError Dmcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Dmcer500ApplicationJSONErrorEnum) ToPointer() *Dmcer500ApplicationJSONErrorEnum {
	return &e
}

func (e *Dmcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Dmcer500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dmcer500ApplicationJSONErrorEnum: %v", v)
	}
}

type Dmcer500ApplicationJSONErrorDescriptionEnum string

const (
	Dmcer500ApplicationJSONErrorDescriptionEnumInternalServerError Dmcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Dmcer500ApplicationJSONErrorDescriptionEnum) ToPointer() *Dmcer500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Dmcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Dmcer500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dmcer500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Dmcer500ApplicationJSON - Internal server error
type Dmcer500ApplicationJSON struct {
	Error            *Dmcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dmcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dmcer404ApplicationJSONErrorEnum string

const (
	Dmcer404ApplicationJSONErrorEnumRecordNotFound Dmcer404ApplicationJSONErrorEnum = "record_not_found"
	Dmcer404ApplicationJSONErrorEnumURLNotFound    Dmcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Dmcer404ApplicationJSONErrorEnum) ToPointer() *Dmcer404ApplicationJSONErrorEnum {
	return &e
}

func (e *Dmcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Dmcer404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dmcer404ApplicationJSONErrorEnum: %v", v)
	}
}

type Dmcer404ApplicationJSONErrorDescriptionEnum string

const (
	Dmcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Dmcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Dmcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Dmcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Dmcer404ApplicationJSONErrorDescriptionEnum) ToPointer() *Dmcer404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Dmcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Dmcer404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dmcer404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Dmcer404ApplicationJSON - No record found
type Dmcer404ApplicationJSON struct {
	Error            *Dmcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dmcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dmcer401ApplicationJSONErrorEnum string

const (
	Dmcer401ApplicationJSONErrorEnumInvalidAuthentication Dmcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Dmcer401ApplicationJSONErrorEnumInvalidAuthorization  Dmcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Dmcer401ApplicationJSONErrorEnum) ToPointer() *Dmcer401ApplicationJSONErrorEnum {
	return &e
}

func (e *Dmcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Dmcer401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dmcer401ApplicationJSONErrorEnum: %v", v)
	}
}

type Dmcer401ApplicationJSONErrorDescriptionEnum string

const (
	Dmcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Dmcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Dmcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Dmcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Dmcer401ApplicationJSONErrorDescriptionEnum) ToPointer() *Dmcer401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Dmcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Dmcer401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dmcer401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Dmcer401ApplicationJSON - Unauthorized access
type Dmcer401ApplicationJSON struct {
	Error            *Dmcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dmcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dmcer400ApplicationJSONErrorEnum string

const (
	Dmcer400ApplicationJSONErrorEnumMissingParameter Dmcer400ApplicationJSONErrorEnum = "missing_parameter"
	Dmcer400ApplicationJSONErrorEnumInvalidParameter Dmcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Dmcer400ApplicationJSONErrorEnumInvalidFormat    Dmcer400ApplicationJSONErrorEnum = "invalid_format"
	Dmcer400ApplicationJSONErrorEnumInvalidTxnid     Dmcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Dmcer400ApplicationJSONErrorEnumInvalidConsentid Dmcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Dmcer400ApplicationJSONErrorEnum) ToPointer() *Dmcer400ApplicationJSONErrorEnum {
	return &e
}

func (e *Dmcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Dmcer400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dmcer400ApplicationJSONErrorEnum: %v", v)
	}
}

type Dmcer400ApplicationJSONErrorDescriptionEnum string

const (
	Dmcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Dmcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Dmcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Dmcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Dmcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Dmcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Dmcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Dmcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Dmcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Dmcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Dmcer400ApplicationJSONErrorDescriptionEnum) ToPointer() *Dmcer400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Dmcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Dmcer400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dmcer400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Dmcer400ApplicationJSON - Bad request
type Dmcer400ApplicationJSON struct {
	Error            *Dmcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dmcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type DmcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Dmcer400ApplicationJSONObject *Dmcer400ApplicationJSON
	// Unauthorized access
	Dmcer401ApplicationJSONObject *Dmcer401ApplicationJSON
	// No record found
	Dmcer404ApplicationJSONObject *Dmcer404ApplicationJSON
	// Internal server error
	Dmcer500ApplicationJSONObject *Dmcer500ApplicationJSON
	// Bad gateway
	Dmcer502ApplicationJSONObject *Dmcer502ApplicationJSON
	// Service unavailable
	Dmcer503ApplicationJSONObject *Dmcer503ApplicationJSON
	// Gateway timeout
	Dmcer504ApplicationJSONObject *Dmcer504ApplicationJSON
}
