"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnum(str, Enum):
    r"""The DHCP lease time config for the dhcp server running on switch stack interface ('30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week')"""
    ONE_DAY = '1 day'
    ONE_HOUR = '1 hour'
    ONE_WEEK = '1 week'
    TWELVE_HOURS = '12 hours'
    THIRTY_MINUTES = '30 minutes'
    FOUR_HOURS = '4 hours'

class UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpModeEnum(str, Enum):
    r"""The DHCP mode options for the switch stack interface ('dhcpDisabled', 'dhcpRelay' or 'dhcpServer')"""
    DHCP_DISABLED = 'dhcpDisabled'
    DHCP_RELAY = 'dhcpRelay'
    DHCP_SERVER = 'dhcpServer'

class UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptionsTypeEnum(str, Enum):
    r"""The type of the DHCP option which should be one of ('text', 'ip', 'integer' or 'hex')"""
    HEX = 'hex'
    INTEGER = 'integer'
    IP = 'ip'
    TEXT = 'text'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptions:
    
    code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})
    r"""The code for DHCP option which should be from 2 to 254"""  
    type: UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptionsTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of the DHCP option which should be one of ('text', 'ip', 'integer' or 'hex')"""  
    value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})
    r"""The value of the DHCP option"""  
    
class UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDNSNameserversOptionEnum(str, Enum):
    r"""The DHCP name server option for the dhcp server running on the switch stack interface ('googlePublicDns', 'openDns' or 'custom')"""
    CUSTOM = 'custom'
    GOOGLE_PUBLIC_DNS = 'googlePublicDns'
    OPEN_DNS = 'openDns'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyFixedIPAssignments:
    
    ip: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ip') }})
    r"""The IP address of the client which has fixed IP address assigned to it"""  
    mac: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mac') }})
    r"""The MAC address of the client which has fixed IP address"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the client which has fixed IP address"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyReservedIPRanges:
    
    end: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end') }})
    r"""The ending IP address of the reserved IP range"""  
    start: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start') }})
    r"""The starting IP address of the reserved IP range"""  
    comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comment'), 'exclude': lambda f: f is None }})
    r"""The comment for the reserved IP range"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBody:
    
    boot_file_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bootFileName'), 'exclude': lambda f: f is None }})
    r"""The PXE boot server file name for the DHCP server running on the switch stack interface"""  
    boot_next_server: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bootNextServer'), 'exclude': lambda f: f is None }})
    r"""The PXE boot server IP for the DHCP server running on the switch stack interface"""  
    boot_options_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bootOptionsEnabled'), 'exclude': lambda f: f is None }})
    r"""Enable DHCP boot options to provide PXE boot options configs for the dhcp server running on the switch stack interface"""  
    dhcp_lease_time: Optional[UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dhcpLeaseTime'), 'exclude': lambda f: f is None }})
    r"""The DHCP lease time config for the dhcp server running on switch stack interface ('30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week')"""  
    dhcp_mode: Optional[UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dhcpMode'), 'exclude': lambda f: f is None }})
    r"""The DHCP mode options for the switch stack interface ('dhcpDisabled', 'dhcpRelay' or 'dhcpServer')"""  
    dhcp_options: Optional[list[UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dhcpOptions'), 'exclude': lambda f: f is None }})
    r"""Array of DHCP options consisting of code, type and value for the DHCP server running on the switch stack interface"""  
    dhcp_relay_server_ips: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dhcpRelayServerIps'), 'exclude': lambda f: f is None }})
    r"""The DHCP relay server IPs to which DHCP packets would get relayed for the switch stack interface"""  
    dns_custom_nameservers: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dnsCustomNameservers'), 'exclude': lambda f: f is None }})
    r"""The DHCP name server IPs when DHCP name server option is 'custom'"""  
    dns_nameservers_option: Optional[UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDNSNameserversOptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dnsNameserversOption'), 'exclude': lambda f: f is None }})
    r"""The DHCP name server option for the dhcp server running on the switch stack interface ('googlePublicDns', 'openDns' or 'custom')"""  
    fixed_ip_assignments: Optional[list[UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyFixedIPAssignments]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fixedIpAssignments'), 'exclude': lambda f: f is None }})
    r"""Array of DHCP fixed IP assignments for the DHCP server running on the switch stack interface"""  
    reserved_ip_ranges: Optional[list[UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyReservedIPRanges]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reservedIpRanges'), 'exclude': lambda f: f is None }})
    r"""Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface"""  
    

@dataclasses.dataclass
class UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest:
    
    interface_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'interfaceId', 'style': 'simple', 'explode': False }})  
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    switch_stack_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'switchStackId', 'style': 'simple', 'explode': False }})  
    request_body: Optional[UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class UpdateNetworkSwitchStackRoutingInterfaceDhcpResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_network_switch_stack_routing_interface_dhcp_200_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    