"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import tagresourcerequest as shared_tagresourcerequest
from enum import Enum
from typing import Any, Optional

class TagResourceXAmzTargetEnum(str, Enum):
    AWS_SIMBA_API_SERVICE_V20180301_TAG_RESOURCE = 'AWSSimbaAPIService_v20180301.TagResource'


@dataclasses.dataclass
class TagResourceRequest:
    
    tag_resource_request: shared_tagresourcerequest.TagResourceRequest = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_target: TagResourceXAmzTargetEnum = dataclasses.field(metadata={'header': { 'field_name': 'X-Amz-Target', 'style': 'simple', 'explode': False }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class TagResourceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    bad_request: Optional[Any] = dataclasses.field(default=None)
    r"""BadRequest"""  
    internal_server_error: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerError"""  
    not_service_resource_error: Optional[Any] = dataclasses.field(default=None)
    r"""NotServiceResourceError"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_does_not_support_tagging: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceDoesNotSupportTagging"""  
    resource_not_found: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFound"""  
    tag_resource_response: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Success"""  
    