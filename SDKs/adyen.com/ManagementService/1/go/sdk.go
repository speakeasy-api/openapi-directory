// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"net/http"
	"openapi/pkg/utils"
	"time"
)

// ServerList contains the list of servers available to the SDK
var ServerList = []string{
	"https://management-test.adyen.com/v1",
}

// HTTPClient provides an interface for suplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// SDK - Configure and manage your Adyen company and merchant accounts, stores, and payment terminals.
// ## Authentication
// Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.
//
// To access the live endpoints, you need to generate a new API key in your live Customer Area.
// ## Versioning
//
// Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:
//
// ```text
// https://management-test.adyen.com/v1/companies/{companyId}/webhooks
// ```
//
// ## Going live
//
// To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:
//
// ```text
// https://management-live.adyen.com/v1
// ```
type SDK struct {
	APICredentialsCompanyLevel    *apiCredentialsCompanyLevel
	APICredentialsMerchantLevel   *apiCredentialsMerchantLevel
	APIKeyCompanyLevel            *apiKeyCompanyLevel
	APIKeyMerchantLevel           *apiKeyMerchantLevel
	AccountCompanyLevel           *accountCompanyLevel
	AccountMerchantLevel          *accountMerchantLevel
	AccountStoreLevel             *accountStoreLevel
	AllowedOriginsCompanyLevel    *allowedOriginsCompanyLevel
	AllowedOriginsMerchantLevel   *allowedOriginsMerchantLevel
	ClientKeyCompanyLevel         *clientKeyCompanyLevel
	ClientKeyMerchantLevel        *clientKeyMerchantLevel
	MyAPICredential               *myAPICredential
	PaymentMethodsMerchantLevel   *paymentMethodsMerchantLevel
	PayoutSettingsMerchantLevel   *payoutSettingsMerchantLevel
	TerminalActionsCompanyLevel   *terminalActionsCompanyLevel
	TerminalActionsTerminalLevel  *terminalActionsTerminalLevel
	TerminalOrdersCompanyLevel    *terminalOrdersCompanyLevel
	TerminalOrdersMerchantLevel   *terminalOrdersMerchantLevel
	TerminalSettingsCompanyLevel  *terminalSettingsCompanyLevel
	TerminalSettingsMerchantLevel *terminalSettingsMerchantLevel
	TerminalSettingsStoreLevel    *terminalSettingsStoreLevel
	TerminalSettingsTerminalLevel *terminalSettingsTerminalLevel
	TerminalsTerminalLevel        *terminalsTerminalLevel
	UsersCompanyLevel             *usersCompanyLevel
	UsersMerchantLevel            *usersMerchantLevel
	WebhooksCompanyLevel          *webhooksCompanyLevel
	WebhooksMerchantLevel         *webhooksMerchantLevel

	// Non-idiomatic field names below are to namespace fields from the fields names above to avoid name conflicts
	_defaultClient  HTTPClient
	_securityClient HTTPClient

	_serverURL  string
	_language   string
	_sdkVersion string
	_genVersion string
}

type SDKOption func(*SDK)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *SDK) {
		sdk._serverURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *SDK) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk._serverURL = serverURL
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *SDK) {
		sdk._defaultClient = client
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *SDK {
	sdk := &SDK{
		_language:   "go",
		_sdkVersion: "0.0.1",
		_genVersion: "internal",
	}
	for _, opt := range opts {
		opt(sdk)
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk._defaultClient == nil {
		sdk._defaultClient = &http.Client{Timeout: 60 * time.Second}
	}
	if sdk._securityClient == nil {
		sdk._securityClient = sdk._defaultClient
	}

	if sdk._serverURL == "" {
		sdk._serverURL = ServerList[0]
	}

	sdk.APICredentialsCompanyLevel = newAPICredentialsCompanyLevel(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.APICredentialsMerchantLevel = newAPICredentialsMerchantLevel(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.APIKeyCompanyLevel = newAPIKeyCompanyLevel(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.APIKeyMerchantLevel = newAPIKeyMerchantLevel(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.AccountCompanyLevel = newAccountCompanyLevel(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.AccountMerchantLevel = newAccountMerchantLevel(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.AccountStoreLevel = newAccountStoreLevel(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.AllowedOriginsCompanyLevel = newAllowedOriginsCompanyLevel(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.AllowedOriginsMerchantLevel = newAllowedOriginsMerchantLevel(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.ClientKeyCompanyLevel = newClientKeyCompanyLevel(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.ClientKeyMerchantLevel = newClientKeyMerchantLevel(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.MyAPICredential = newMyAPICredential(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.PaymentMethodsMerchantLevel = newPaymentMethodsMerchantLevel(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.PayoutSettingsMerchantLevel = newPayoutSettingsMerchantLevel(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.TerminalActionsCompanyLevel = newTerminalActionsCompanyLevel(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.TerminalActionsTerminalLevel = newTerminalActionsTerminalLevel(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.TerminalOrdersCompanyLevel = newTerminalOrdersCompanyLevel(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.TerminalOrdersMerchantLevel = newTerminalOrdersMerchantLevel(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.TerminalSettingsCompanyLevel = newTerminalSettingsCompanyLevel(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.TerminalSettingsMerchantLevel = newTerminalSettingsMerchantLevel(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.TerminalSettingsStoreLevel = newTerminalSettingsStoreLevel(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.TerminalSettingsTerminalLevel = newTerminalSettingsTerminalLevel(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.TerminalsTerminalLevel = newTerminalsTerminalLevel(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.UsersCompanyLevel = newUsersCompanyLevel(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.UsersMerchantLevel = newUsersMerchantLevel(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.WebhooksCompanyLevel = newWebhooksCompanyLevel(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.WebhooksMerchantLevel = newWebhooksMerchantLevel(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	return sdk
}
