"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import createsourcerepositorybranchresponse as shared_createsourcerepositorybranchresponse
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateSourceRepositoryBranchRequestBody:
    
    head_commit_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('headCommitId'), 'exclude': lambda f: f is None }})
    r"""The commit ID in an existing branch from which you want to create the new branch."""  
    

@dataclasses.dataclass
class CreateSourceRepositoryBranchRequest:
    
    name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'name', 'style': 'simple', 'explode': False }})
    r"""The name for the branch you're creating."""  
    project_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'projectName', 'style': 'simple', 'explode': False }})
    r"""The name of the project in the space."""  
    request_body: CreateSourceRepositoryBranchRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    source_repository_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'sourceRepositoryName', 'style': 'simple', 'explode': False }})
    r"""The name of the repository where you want to create a branch."""  
    space_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'spaceName', 'style': 'simple', 'explode': False }})
    r"""The name of the space."""  
    

@dataclasses.dataclass
class CreateSourceRepositoryBranchResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictException"""  
    create_source_repository_branch_response: Optional[shared_createsourcerepositorybranchresponse.CreateSourceRepositoryBranchResponse] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    service_quota_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceQuotaExceededException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    