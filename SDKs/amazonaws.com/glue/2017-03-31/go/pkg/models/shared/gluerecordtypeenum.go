// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type GlueRecordTypeEnum string

const (
	GlueRecordTypeEnumDate       GlueRecordTypeEnum = "DATE"
	GlueRecordTypeEnumString     GlueRecordTypeEnum = "STRING"
	GlueRecordTypeEnumTimestamp  GlueRecordTypeEnum = "TIMESTAMP"
	GlueRecordTypeEnumInt        GlueRecordTypeEnum = "INT"
	GlueRecordTypeEnumFloat      GlueRecordTypeEnum = "FLOAT"
	GlueRecordTypeEnumLong       GlueRecordTypeEnum = "LONG"
	GlueRecordTypeEnumBigdecimal GlueRecordTypeEnum = "BIGDECIMAL"
	GlueRecordTypeEnumByte       GlueRecordTypeEnum = "BYTE"
	GlueRecordTypeEnumShort      GlueRecordTypeEnum = "SHORT"
	GlueRecordTypeEnumDouble     GlueRecordTypeEnum = "DOUBLE"
)

func (e *GlueRecordTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DATE":
		fallthrough
	case "STRING":
		fallthrough
	case "TIMESTAMP":
		fallthrough
	case "INT":
		fallthrough
	case "FLOAT":
		fallthrough
	case "LONG":
		fallthrough
	case "BIGDECIMAL":
		fallthrough
	case "BYTE":
		fallthrough
	case "SHORT":
		fallthrough
	case "DOUBLE":
		*e = GlueRecordTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GlueRecordTypeEnum: %s", s)
	}
}
