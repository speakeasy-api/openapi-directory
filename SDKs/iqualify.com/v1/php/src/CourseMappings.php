<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class CourseMappings 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Remove course mapping
     * 
     * Removes the course mapping between the offering and the externalCourseId.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCourseMappingsOfferingIdExternalCourseIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCourseMappingsOfferingIdExternalCourseIdResponse
     */
	public function deleteCourseMappingsOfferingIdExternalCourseId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCourseMappingsOfferingIdExternalCourseIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCourseMappingsOfferingIdExternalCourseIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/course-mappings/{offeringId}/{externalCourseId}', \OpenAPI\OpenAPI\Models\Operations\DeleteCourseMappingsOfferingIdExternalCourseIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCourseMappingsOfferingIdExternalCourseIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteCourseMappingsOfferingIdExternalCourseId200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find course mappings
     * 
     * Returns all course mappings for course offerings.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCourseMappingsResponse
     */
	public function getCourseMappings(
    ): \OpenAPI\OpenAPI\Models\Operations\GetCourseMappingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/course-mappings');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCourseMappingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->courseMappings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find course mappings by externalCourseId
     * 
     * Responds with course mapping details by externalCourseId.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCourseMappingsExternalcourseExternalCourseIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCourseMappingsExternalcourseExternalCourseIdResponse
     */
	public function getCourseMappingsExternalcourseExternalCourseId(
        \OpenAPI\OpenAPI\Models\Operations\GetCourseMappingsExternalcourseExternalCourseIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCourseMappingsExternalcourseExternalCourseIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/course-mappings/externalcourse/{externalCourseId}', \OpenAPI\OpenAPI\Models\Operations\GetCourseMappingsExternalcourseExternalCourseIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCourseMappingsExternalcourseExternalCourseIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getCourseMappingsExternalcourseExternalCourseId200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find course mappings by offeringId
     * 
     * Responds with course mapping details by offeringId.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCourseMappingsOfferingIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCourseMappingsOfferingIdResponse
     */
	public function getCourseMappingsOfferingId(
        \OpenAPI\OpenAPI\Models\Operations\GetCourseMappingsOfferingIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCourseMappingsOfferingIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/course-mappings/{offeringId}', \OpenAPI\OpenAPI\Models\Operations\GetCourseMappingsOfferingIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCourseMappingsOfferingIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getCourseMappingsOfferingId200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add course mapping
     * 
     * Creates a mapping between the offering and the externalCourseId.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutCourseMappingsOfferingIdExternalCourseIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutCourseMappingsOfferingIdExternalCourseIdResponse
     */
	public function putCourseMappingsOfferingIdExternalCourseId(
        \OpenAPI\OpenAPI\Models\Operations\PutCourseMappingsOfferingIdExternalCourseIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutCourseMappingsOfferingIdExternalCourseIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/course-mappings/{offeringId}/{externalCourseId}', \OpenAPI\OpenAPI\Models\Operations\PutCourseMappingsOfferingIdExternalCourseIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutCourseMappingsOfferingIdExternalCourseIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->putCourseMappingsOfferingIdExternalCourseId200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
}