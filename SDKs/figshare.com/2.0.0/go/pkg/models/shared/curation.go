// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CurationStatusEnum - The status of the review.
type CurationStatusEnum string

const (
	CurationStatusEnumPending  CurationStatusEnum = "pending"
	CurationStatusEnumApproved CurationStatusEnum = "approved"
	CurationStatusEnumRejected CurationStatusEnum = "rejected"
	CurationStatusEnumClosed   CurationStatusEnum = "closed"
)

func (e *CurationStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pending":
		fallthrough
	case "approved":
		fallthrough
	case "rejected":
		fallthrough
	case "closed":
		*e = CurationStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CurationStatusEnum: %s", s)
	}
}

// Curation - OK. A list of curation reviews.
type Curation struct {
	// The ID of the account of the owner of the article of this review.
	AccountID *int64 `json:"account_id,omitempty"`
	// The ID of the article of this review.
	ArticleID *int64 `json:"article_id,omitempty"`
	// The ID of the account to which this review is assigned.
	AssignedTo *int64 `json:"assigned_to,omitempty"`
	// The number of comments in the review.
	CommentsCount *int64 `json:"comments_count,omitempty"`
	// The creation date of the review.
	CreatedDate *string `json:"created_date,omitempty"`
	// The group in which the article is present.
	GroupID *int64 `json:"group_id,omitempty"`
	// The review id
	ID *int64 `json:"id,omitempty"`
	// The date the review has been modified.
	ModifiedDate *string `json:"modified_date,omitempty"`
	// The last time a comment has been added to the review.
	ReviewDate *string `json:"review_date,omitempty"`
	// The status of the review.
	Status *CurationStatusEnum `json:"status,omitempty"`
	// The Version number of the article in review.
	Version *int64 `json:"version,omitempty"`
}
