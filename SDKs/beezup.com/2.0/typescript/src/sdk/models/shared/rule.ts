/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { OptimisationActionNameEnum } from "./optimisationactionnameenum";
import { RuleLastExecutionStatusEnum } from "./rulelastexecutionstatusenum";
import { RuleLinks } from "./rulelinks";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Get Rule
 */
export class Rule extends SpeakeasyBase {
  /**
   * The optimisation action
   */
  @SpeakeasyMetadata()
  @Expose({ name: "actionName" })
  actionName: OptimisationActionNameEnum;

  /**
   * Is the rule enabled
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled: boolean;

  /**
   * The status of the last execution
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastExecutionStatus" })
  lastExecutionStatus?: RuleLastExecutionStatusEnum;

  /**
   * The utc date of the last execution
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastExecutionUtcDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastExecutionUtcDate?: Date;

  /**
   * Links to retrieve/action on other entities
   */
  @SpeakeasyMetadata()
  @Expose({ name: "links" })
  @Type(() => RuleLinks)
  links: RuleLinks;

  /**
   * Rule execution position
   */
  @SpeakeasyMetadata()
  @Expose({ name: "position" })
  position: number;

  /**
   * Report filter identifier linked to the rule
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reportFilterId" })
  reportFilterId: string;

  /**
   * The identifier of the rule
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ruleId" })
  ruleId: string;

  /**
   * The name of the rule
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ruleName" })
  ruleName: string;

  /**
   * Rule validity end utc date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "validityEndUtcDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  validityEndUtcDate?: Date;

  /**
   * Rule validity start utc date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "validityStartUtcDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  validityStartUtcDate?: Date;
}
