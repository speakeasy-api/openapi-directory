"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class DayAndTimeAssignedTargetingOptionDetailsDayOfWeekEnum(str, Enum):
    r"""Required. The day of the week for this day and time targeting setting."""
    DAY_OF_WEEK_UNSPECIFIED = 'DAY_OF_WEEK_UNSPECIFIED'
    MONDAY = 'MONDAY'
    TUESDAY = 'TUESDAY'
    WEDNESDAY = 'WEDNESDAY'
    THURSDAY = 'THURSDAY'
    FRIDAY = 'FRIDAY'
    SATURDAY = 'SATURDAY'
    SUNDAY = 'SUNDAY'

class DayAndTimeAssignedTargetingOptionDetailsTimeZoneResolutionEnum(str, Enum):
    r"""Required. The mechanism used to determine which timezone to use for this day and time targeting setting."""
    TIME_ZONE_RESOLUTION_UNSPECIFIED = 'TIME_ZONE_RESOLUTION_UNSPECIFIED'
    TIME_ZONE_RESOLUTION_END_USER = 'TIME_ZONE_RESOLUTION_END_USER'
    TIME_ZONE_RESOLUTION_ADVERTISER = 'TIME_ZONE_RESOLUTION_ADVERTISER'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DayAndTimeAssignedTargetingOptionDetails:
    r"""Representation of a segment of time defined on a specific day of the week and with a start and end time. The time represented by `start_hour` must be before the time represented by `end_hour`."""
    
    day_of_week: Optional[DayAndTimeAssignedTargetingOptionDetailsDayOfWeekEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dayOfWeek'), 'exclude': lambda f: f is None }})
    r"""Required. The day of the week for this day and time targeting setting."""  
    end_hour: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endHour'), 'exclude': lambda f: f is None }})
    r"""Required. The end hour for day and time targeting. Must be between 1 (1 hour after start of day) and 24 (end of day)."""  
    start_hour: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startHour'), 'exclude': lambda f: f is None }})
    r"""Required. The start hour for day and time targeting. Must be between 0 (start of day) and 23 (1 hour before end of day)."""  
    time_zone_resolution: Optional[DayAndTimeAssignedTargetingOptionDetailsTimeZoneResolutionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeZoneResolution'), 'exclude': lambda f: f is None }})
    r"""Required. The mechanism used to determine which timezone to use for this day and time targeting setting."""  
    