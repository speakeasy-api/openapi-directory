"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetOrganizationSensorReadingsLatestRequest:
    
    organization_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'organizationId', 'style': 'simple', 'explode': False }})  
    ending_before: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'endingBefore', 'style': 'form', 'explode': True }})
    r"""A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."""  
    metrics: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'metrics', 'style': 'form', 'explode': False }})
    r"""Types of sensor readings to retrieve. If no metrics are supplied, all available types of readings will be retrieved. Allowed values are battery, button, door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water."""  
    network_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'networkIds', 'style': 'form', 'explode': False }})
    r"""Optional parameter to filter readings by network."""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'perPage', 'style': 'form', 'explode': True }})
    r"""The number of entries per page returned. Acceptable range is 3 - 100. Default is 100."""  
    serials: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'serials', 'style': 'form', 'explode': False }})
    r"""Optional parameter to filter readings by sensor."""  
    starting_after: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'startingAfter', 'style': 'form', 'explode': True }})
    r"""A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationSensorReadingsLatest200ApplicationJSONNetwork:
    r"""Network to which the sensor belongs."""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID of the network."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the network."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsBattery:
    r"""Reading for the 'battery' metric. This will only be present if the 'metric' property equals 'battery'."""
    
    percentage: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('percentage'), 'exclude': lambda f: f is None }})
    r"""Remaining battery life."""  
    
class GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsButtonPressTypeEnum(str, Enum):
    r"""Type of button press that occurred."""
    LONG = 'long'
    SHORT = 'short'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsButton:
    r"""Reading for the 'button' metric. This will only be present if the 'metric' property equals 'button'."""
    
    press_type: Optional[GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsButtonPressTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pressType'), 'exclude': lambda f: f is None }})
    r"""Type of button press that occurred."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsDoor:
    r"""Reading for the 'door' metric. This will only be present if the 'metric' property equals 'door'."""
    
    open: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('open'), 'exclude': lambda f: f is None }})
    r"""True if the door is open."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsHumidity:
    r"""Reading for the 'humidity' metric. This will only be present if the 'metric' property equals 'humidity'."""
    
    relative_percentage: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relativePercentage'), 'exclude': lambda f: f is None }})
    r"""Humidity reading in %RH."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsIndoorAirQuality:
    r"""Reading for the 'indoorAirQuality' metric. This will only be present if the 'metric' property equals 'indoorAirQuality'."""
    
    score: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('score'), 'exclude': lambda f: f is None }})
    r"""Indoor air quality score between 0 and 100."""  
    
class GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsMetricEnum(str, Enum):
    r"""Type of sensor reading."""
    BATTERY = 'battery'
    BUTTON = 'button'
    DOOR = 'door'
    HUMIDITY = 'humidity'
    INDOOR_AIR_QUALITY = 'indoorAirQuality'
    NOISE = 'noise'
    PM25 = 'pm25'
    TEMPERATURE = 'temperature'
    TVOC = 'tvoc'
    WATER = 'water'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsNoiseAmbient:
    r"""Ambient noise reading."""
    
    level: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('level'), 'exclude': lambda f: f is None }})
    r"""Ambient noise reading in adjusted decibels."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsNoise:
    r"""Reading for the 'noise' metric. This will only be present if the 'metric' property equals 'noise'."""
    
    ambient: Optional[GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsNoiseAmbient] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ambient'), 'exclude': lambda f: f is None }})
    r"""Ambient noise reading."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsPm25:
    r"""Reading for the 'pm25' metric. This will only be present if the 'metric' property equals 'pm25'."""
    
    concentration: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('concentration'), 'exclude': lambda f: f is None }})
    r"""PM2.5 reading in micrograms per cubic meter."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsTemperature:
    r"""Reading for the 'temperature' metric. This will only be present if the 'metric' property equals 'temperature'."""
    
    celsius: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('celsius'), 'exclude': lambda f: f is None }})
    r"""Temperature reading in degrees Celsius."""  
    fahrenheit: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fahrenheit'), 'exclude': lambda f: f is None }})
    r"""Temperature reading in degrees Fahrenheit."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsTvoc:
    r"""Reading for the 'tvoc' metric. This will only be present if the 'metric' property equals 'tvoc'."""
    
    concentration: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('concentration'), 'exclude': lambda f: f is None }})
    r"""TVOC reading in micrograms per cubic meter."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsWater:
    r"""Reading for the 'water' metric. This will only be present if the 'metric' property equals 'water'."""
    
    present: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('present'), 'exclude': lambda f: f is None }})
    r"""True if water is detected."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationSensorReadingsLatest200ApplicationJSONReadings:
    
    battery: Optional[GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsBattery] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('battery'), 'exclude': lambda f: f is None }})
    r"""Reading for the 'battery' metric. This will only be present if the 'metric' property equals 'battery'."""  
    button: Optional[GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsButton] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('button'), 'exclude': lambda f: f is None }})
    r"""Reading for the 'button' metric. This will only be present if the 'metric' property equals 'button'."""  
    door: Optional[GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsDoor] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('door'), 'exclude': lambda f: f is None }})
    r"""Reading for the 'door' metric. This will only be present if the 'metric' property equals 'door'."""  
    humidity: Optional[GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsHumidity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('humidity'), 'exclude': lambda f: f is None }})
    r"""Reading for the 'humidity' metric. This will only be present if the 'metric' property equals 'humidity'."""  
    indoor_air_quality: Optional[GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsIndoorAirQuality] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('indoorAirQuality'), 'exclude': lambda f: f is None }})
    r"""Reading for the 'indoorAirQuality' metric. This will only be present if the 'metric' property equals 'indoorAirQuality'."""  
    metric: Optional[GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsMetricEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metric'), 'exclude': lambda f: f is None }})
    r"""Type of sensor reading."""  
    noise: Optional[GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsNoise] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('noise'), 'exclude': lambda f: f is None }})
    r"""Reading for the 'noise' metric. This will only be present if the 'metric' property equals 'noise'."""  
    pm25: Optional[GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsPm25] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pm25'), 'exclude': lambda f: f is None }})
    r"""Reading for the 'pm25' metric. This will only be present if the 'metric' property equals 'pm25'."""  
    temperature: Optional[GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsTemperature] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('temperature'), 'exclude': lambda f: f is None }})
    r"""Reading for the 'temperature' metric. This will only be present if the 'metric' property equals 'temperature'."""  
    ts: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ts'), 'exclude': lambda f: f is None }})
    r"""Time at which the reading occurred, in ISO8601 format."""  
    tvoc: Optional[GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsTvoc] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tvoc'), 'exclude': lambda f: f is None }})
    r"""Reading for the 'tvoc' metric. This will only be present if the 'metric' property equals 'tvoc'."""  
    water: Optional[GetOrganizationSensorReadingsLatest200ApplicationJSONReadingsWater] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('water'), 'exclude': lambda f: f is None }})
    r"""Reading for the 'water' metric. This will only be present if the 'metric' property equals 'water'."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationSensorReadingsLatest200ApplicationJSON:
    
    network: Optional[GetOrganizationSensorReadingsLatest200ApplicationJSONNetwork] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('network'), 'exclude': lambda f: f is None }})
    r"""Network to which the sensor belongs."""  
    readings: Optional[list[GetOrganizationSensorReadingsLatest200ApplicationJSONReadings]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('readings'), 'exclude': lambda f: f is None }})
    r"""Array of latest readings from the sensor. Each object represents a single reading for a single metric."""  
    serial: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serial'), 'exclude': lambda f: f is None }})
    r"""Serial number of the sensor that took the readings."""  
    

@dataclasses.dataclass
class GetOrganizationSensorReadingsLatestResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_organization_sensor_readings_latest_200_application_json_objects: Optional[list[GetOrganizationSensorReadingsLatest200ApplicationJSON]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    