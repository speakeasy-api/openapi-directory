/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Card - Represents the payment details of a card to be used for payments. These
 * details are determined by the payment token generated by Web Payments SDK.
 */
public class Card {
    /**
     * Represents a postal address in a country. The address format is based 
     * on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
     * see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
     * This format has dedicated fields for four address components: postal code, 
     * locality (city), administrative district (state, prefecture, or province), and 
     * sublocality (town or village). These components have dedicated fields in the 
     * `Address` object because software sometimes behaves differently based on them. 
     * For example, sales tax software may charge different amounts of sales tax 
     * based on the postal code, and some software is only available in 
     * certain states due to compliance reasons.
     * 
     * For the remaining address components, the `Address` type provides the 
     * `address_line_1` and `address_line_2` fields for free-form data entry. 
     * These fields are free-form because the remaining address components have 
     * too many variations around the world and typical software does not parse 
     * these components. These fields enable users to enter anything they want. 
     * 
     * Note that, in the current implementation, all other `Address` type fields are blank. 
     * These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
     * `administrative_district_level_2`, `administrative_district_level_3`, 
     * `first_name`, `last_name`, and `organization`. 
     * 
     * When it comes to localization, the seller's language preferences 
     * (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
     * are ignored for addresses. Even though Square products (such as Square Point of Sale 
     * and the Seller Dashboard) mostly use a seller's language preference in 
     * communication, when it comes to addresses, they will use English for a US address, 
     * Japanese for an address in Japan, and so on.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billing_address")
    public Address billingAddress;
    public Card withBillingAddress(Address billingAddress) {
        this.billingAddress = billingAddress;
        return this;
    }
    
    /**
     * The first six digits of the card number, known as the Bank Identification Number (BIN). Only the Payments API
     * returns this field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bin")
    public String bin;
    public Card withBin(String bin) {
        this.bin = bin;
        return this;
    }
    
    /**
     * The card's brand.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("card_brand")
    public String cardBrand;
    public Card withCardBrand(String cardBrand) {
        this.cardBrand = cardBrand;
        return this;
    }
    
    /**
     * The type of the card.
     * The Card object includes this field only in response to Payments API calls.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("card_type")
    public String cardType;
    public Card withCardType(String cardType) {
        this.cardType = cardType;
        return this;
    }
    
    /**
     * The name of the cardholder.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cardholder_name")
    public String cardholderName;
    public Card withCardholderName(String cardholderName) {
        this.cardholderName = cardholderName;
        return this;
    }
    
    /**
     * The ID of a customer created using the Customers API to be associated with the card.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer_id")
    public String customerId;
    public Card withCustomerId(String customerId) {
        this.customerId = customerId;
        return this;
    }
    
    /**
     * Indicates whether or not a card can be used for payments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enabled")
    public Boolean enabled;
    public Card withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }
    
    /**
     * The expiration month of the associated card as an integer between 1 and 12.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exp_month")
    public Long expMonth;
    public Card withExpMonth(Long expMonth) {
        this.expMonth = expMonth;
        return this;
    }
    
    /**
     * The four-digit year of the card's expiration date.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exp_year")
    public Long expYear;
    public Card withExpYear(Long expYear) {
        this.expYear = expYear;
        return this;
    }
    
    /**
     * __Not currently set.__ Intended as a Square-assigned identifier, based
     * on the card number, to identify the card across multiple locations within a
     * single application.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fingerprint")
    public String fingerprint;
    public Card withFingerprint(String fingerprint) {
        this.fingerprint = fingerprint;
        return this;
    }
    
    /**
     * Unique ID for this card. Generated by Square.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public Card withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The last 4 digits of the card number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_4")
    public String last4;
    public Card withLast4(String last4) {
        this.last4 = last4;
        return this;
    }
    
    /**
     * Indicates whether the Card is prepaid or not.
     * The Card object includes this field only in response to Payments API calls.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prepaid_type")
    public String prepaidType;
    public Card withPrepaidType(String prepaidType) {
        this.prepaidType = prepaidType;
        return this;
    }
    
    /**
     * An optional user-defined reference ID that associates this card with
     * another entity in an external system. For example, a customer ID from an
     * external customer management system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference_id")
    public String referenceId;
    public Card withReferenceId(String referenceId) {
        this.referenceId = referenceId;
        return this;
    }
    
    /**
     * Current version number of the card. Increments with each card update. Requests to update an
     * existing Card object will be rejected unless the version in the request matches the current
     * version for the Card.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    public Long version;
    public Card withVersion(Long version) {
        this.version = version;
        return this;
    }
    
}
