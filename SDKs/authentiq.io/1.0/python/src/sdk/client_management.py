"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ClientManagement:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def client(self) -> operations.ClientResponse:
        r"""List clients
        Retrieve a list of clients.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/client'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClientResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Client]])
                res.clients = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OAuth2Error])
                res.o_auth2_error = out
            if utils.match_content_type(content_type, 'application/problem+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OAuth2Error])
                res.o_auth2_error = out
            if utils.match_content_type(content_type, 'application/x-www-form-urlencoded'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content

        return res

    def client_client_id(self, request: operations.ClientClientIDRequest, security: operations.ClientClientIDSecurity) -> operations.ClientClientIDResponse:
        r"""Delete a client
        Delete a previously registered client.
        http://openid.net/specs/openid-connect-registration-1_0.html#ClientConfigurationEndpoint - OIDC Client Configuration Endpoint
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ClientClientIDRequest, base_url, '/client/{client_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClientClientIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProblemDetail])
                res.problem_detail = out
            if utils.match_content_type(content_type, 'application/problem+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProblemDetail])
                res.problem_detail = out
            if utils.match_content_type(content_type, 'application/x-www-form-urlencoded'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content

        return res

    def create_client(self, request: shared.Client, security: operations.CreateClientSecurity) -> operations.CreateClientResponse:
        r"""Register a client
        Register a new client with this Authentiq Connect provider.
        
        This endpoint is compatible with [OIDC's Client Registration](http://openid.net/specs/openid-connect-registration-1_0.html) extension.
        http://openid.net/specs/openid-connect-registration-1_0.html#ClientRegistration - OIDC Client Registration Endpoint
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/client'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateClientResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProblemDetail])
                res.problem_detail = out
            if utils.match_content_type(content_type, 'application/problem+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProblemDetail])
                res.problem_detail = out
            if utils.match_content_type(content_type, 'application/x-www-form-urlencoded'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content

        return res

    def get_client(self, request: operations.GetClientRequest, security: operations.GetClientSecurity) -> operations.GetClientResponse:
        r"""View a client
        Retrieve the configuration of a previously registered client.
        http://openid.net/specs/openid-connect-registration-1_0.html#ClientConfigurationEndpoint - OIDC Client Configuration Endpoint
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetClientRequest, base_url, '/client/{client_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetClientResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Client])
                res.client = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OAuth2Error])
                res.o_auth2_error = out
            if utils.match_content_type(content_type, 'application/problem+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OAuth2Error])
                res.o_auth2_error = out
            if utils.match_content_type(content_type, 'application/x-www-form-urlencoded'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content

        return res

    def update_client(self, request: operations.UpdateClientRequest, security: operations.UpdateClientSecurity) -> operations.UpdateClientResponse:
        r"""Update a client
        Update the configuration of a previously registered client.
        http://openid.net/specs/openid-connect-registration-1_0.html#ClientConfigurationEndpoint - OIDC Client Configuration Endpoint
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateClientRequest, base_url, '/client/{client_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "client", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateClientResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Client])
                res.client = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProblemDetail])
                res.problem_detail = out
            if utils.match_content_type(content_type, 'application/problem+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProblemDetail])
                res.problem_detail = out
            if utils.match_content_type(content_type, 'application/x-www-form-urlencoded'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content

        return res

    