<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class RootFilesetTemplate 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create a fileset template
     * 
     * Create a fileset template. The template is applied to the host.  Each template is a set of paths on the host.
     * 
     * A template uses full paths and wildcards to define the objects to include, exclude, and exempt from exclusion.
     * 
     * The **_exceptions_** value specifies paths that should not be excluded from the fileset by the **_exclude_** value.
     * 
     * Specify an array of full path descriptions for each property **_include_**, **_exclude_**, and **_exceptions_**.
     * 
     * Acceptable wildcard characters are.
     * + **_\*_** Single asterisk matches zero or more characters up to a path deliminator.
     * + **_\*\*_** Double asterisk matches zero or more characters.
     * 
     * The following rules apply to path descriptions.
     * + Accepts UTF-8 characters.
     * + Case sensitive.
     * + Forward slash character **_/_** is the path deliminator.
     * + Symbolic links must point to a subset of a non symbolic link path.
     * + Paths that do not start with **_/_** are modified to start with **_\*\* /_**.
     * + Paths that do not end with **_\*_** are modified to end with **_/\*\*_**.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\FilesetTemplateCreate $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateFilesetTemplateResponse
     */
	public function createFilesetTemplate(
        \OpenAPI\OpenAPI\Models\Shared\FilesetTemplateCreate $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateFilesetTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/fileset_template');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateFilesetTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->filesetTemplateDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FilesetTemplateDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a fileset template
     * 
     * Deletes the specfied fileset template. All associated filesets are deleted.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteFilesetTemplateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteFilesetTemplateResponse
     */
	public function deleteFilesetTemplate(
        \OpenAPI\OpenAPI\Models\Operations\DeleteFilesetTemplateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteFilesetTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/fileset_template/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteFilesetTemplateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteFilesetTemplateRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteFilesetTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Get information for a fileset template
     * 
     * Retrieve summary information for a specified fileset template.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFilesetTemplateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFilesetTemplateResponse
     */
	public function getFilesetTemplate(
        \OpenAPI\OpenAPI\Models\Operations\GetFilesetTemplateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFilesetTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/fileset_template/{id}', \OpenAPI\OpenAPI\Models\Operations\GetFilesetTemplateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFilesetTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->filesetTemplateDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FilesetTemplateDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get summary information for all fileset templates
     * 
     * Retrieve summary information for all fileset templates, including: ID and name of the fileset template, fileset template creation timestamp, array of the included filepaths, array of the excluded filepaths.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\QueryFilesetTemplateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QueryFilesetTemplateResponse
     */
	public function queryFilesetTemplate(
        \OpenAPI\OpenAPI\Models\Operations\QueryFilesetTemplateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QueryFilesetTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/fileset_template');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\QueryFilesetTemplateRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QueryFilesetTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->filesetTemplateDetailListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FilesetTemplateDetailListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Modify a fileset template
     * 
     * Modify the values of specified fileset template.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateFilesetTemplateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateFilesetTemplateResponse
     */
	public function updateFilesetTemplate(
        \OpenAPI\OpenAPI\Models\Operations\UpdateFilesetTemplateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateFilesetTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/fileset_template/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateFilesetTemplateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "filesetTemplatePatch", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateFilesetTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->filesetTemplateDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FilesetTemplateDetail', 'json');
            }
        }

        return $response;
    }
}