/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class CreateDataRepositoryAssociationRequest {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BatchImportMetaDataOnCreate")
    public Boolean batchImportMetaDataOnCreate;
    public CreateDataRepositoryAssociationRequest withBatchImportMetaDataOnCreate(Boolean batchImportMetaDataOnCreate) {
        this.batchImportMetaDataOnCreate = batchImportMetaDataOnCreate;
        return this;
    }
    
    /**
     * (Optional) An idempotency token for resource creation, in a string of up to 64 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ClientRequestToken")
    public String clientRequestToken;
    public CreateDataRepositoryAssociationRequest withClientRequestToken(String clientRequestToken) {
        this.clientRequestToken = clientRequestToken;
        return this;
    }
    
    @JsonProperty("DataRepositoryPath")
    public String dataRepositoryPath;
    public CreateDataRepositoryAssociationRequest withDataRepositoryPath(String dataRepositoryPath) {
        this.dataRepositoryPath = dataRepositoryPath;
        return this;
    }
    
    /**
     * The globally unique ID of the file system, assigned by Amazon FSx.
     */
    @JsonProperty("FileSystemId")
    public String fileSystemId;
    public CreateDataRepositoryAssociationRequest withFileSystemId(String fileSystemId) {
        this.fileSystemId = fileSystemId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("FileSystemPath")
    public String fileSystemPath;
    public CreateDataRepositoryAssociationRequest withFileSystemPath(String fileSystemPath) {
        this.fileSystemPath = fileSystemPath;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ImportedFileChunkSize")
    public Long importedFileChunkSize;
    public CreateDataRepositoryAssociationRequest withImportedFileChunkSize(Long importedFileChunkSize) {
        this.importedFileChunkSize = importedFileChunkSize;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("S3")
    public S3DataRepositoryConfiguration s3;
    public CreateDataRepositoryAssociationRequest withS3(S3DataRepositoryConfiguration s3) {
        this.s3 = s3;
        return this;
    }
    
    /**
     * A list of &lt;code&gt;Tag&lt;/code&gt; values, with a maximum of 50 elements.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Tags")
    public Tag[] tags;
    public CreateDataRepositoryAssociationRequest withTags(Tag[] tags) {
        this.tags = tags;
        return this;
    }
    
}
