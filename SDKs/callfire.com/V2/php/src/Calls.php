<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Calls 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add batches to a call broadcast
     * 
     * The 'add batch' API allows user to add additional batches to an already created voice broadcast campaign. The added batch will go through the CallFire validation process, unlike in the recipients version of this API. That is why you can use the scrubDuplicates flag to remove duplicates from your batch. Batches may be added as a contact list id, a list of contact ids, or a list of numbers
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddCallBroadcastBatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddCallBroadcastBatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddCallBroadcastBatchResponse
     */
	public function addCallBroadcastBatch(
        \OpenAPI\OpenAPI\Models\Operations\AddCallBroadcastBatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddCallBroadcastBatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddCallBroadcastBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calls/broadcasts/{id}/batches', \OpenAPI\OpenAPI\Models\Operations\AddCallBroadcastBatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "batchRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AddCallBroadcastBatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddCallBroadcastBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceId = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResourceId', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add recipients to a call broadcast
     * 
     * Use this API to add the recipients to an existing voice broadcast. Post a list of Recipient objects to be added to the voice broadcast campaign. These contacts will not go through validation process, and will be acted upon as they are added. Recipients may be added as a list of contact ids, or list of numbers
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddCallBroadcastRecipientsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddCallBroadcastRecipientsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddCallBroadcastRecipientsResponse
     */
	public function addCallBroadcastRecipients(
        \OpenAPI\OpenAPI\Models\Operations\AddCallBroadcastRecipientsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddCallBroadcastRecipientsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddCallBroadcastRecipientsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calls/broadcasts/{id}/recipients', \OpenAPI\OpenAPI\Models\Operations\AddCallBroadcastRecipientsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AddCallBroadcastRecipientsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddCallBroadcastRecipientsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->callList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CallList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Archive voice broadcast
     * 
     * Archives a voice broadcast (voice broadcast will be hidden in search results)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ArchiveVoiceBroadcastRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ArchiveVoiceBroadcastSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ArchiveVoiceBroadcastResponse
     */
	public function archiveVoiceBroadcast(
        \OpenAPI\OpenAPI\Models\Operations\ArchiveVoiceBroadcastRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ArchiveVoiceBroadcastSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ArchiveVoiceBroadcastResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calls/broadcasts/{id}/archive', \OpenAPI\OpenAPI\Models\Operations\ArchiveVoiceBroadcastRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ArchiveVoiceBroadcastResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a call broadcast
     * 
     * Creates a call broadcast campaign using the Call Broadcast API. Send a CallBroadcast in the message body to add details in a voice broadcast campaign. The campaign can be created without contacts and bare minimum configuration, but contacts will have to be added further on to use the campaign
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCallBroadcastRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCallBroadcastSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateCallBroadcastResponse
     */
	public function createCallBroadcast(
        \OpenAPI\OpenAPI\Models\Operations\CreateCallBroadcastRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateCallBroadcastSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateCallBroadcastResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calls/broadcasts');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "callBroadcastInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CreateCallBroadcastRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateCallBroadcastResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceId = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResourceId', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find call broadcasts
     * 
     * Searches for all voice broadcasts created by user. Can query on label, name, and the current running status of the campaign. Returns a paged list of voice broadcasts
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FindCallBroadcastsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FindCallBroadcastsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FindCallBroadcastsResponse
     */
	public function findCallBroadcasts(
        \OpenAPI\OpenAPI\Models\Operations\FindCallBroadcastsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FindCallBroadcastsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FindCallBroadcastsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calls/broadcasts');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FindCallBroadcastsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FindCallBroadcastsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->callBroadcastPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CallBroadcastPage', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find calls
     * 
     * To search for all calls sent or received by the user. Use "id=0" for the campaignId parameter to query for all calls sent through the POST /calls API. See [call states and results](https://developers.callfire.com/results-responses-errors.html)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FindCallsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FindCallsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FindCallsResponse
     */
	public function findCalls(
        \OpenAPI\OpenAPI\Models\Operations\FindCallsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FindCallsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FindCallsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calls');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FindCallsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FindCallsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->callPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CallPage', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find a specific call
     * 
     * Returns a single Call instance for a given call id.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCallRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCallSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCallResponse
     */
	public function getCall(
        \OpenAPI\OpenAPI\Models\Operations\GetCallRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetCallSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCallResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calls/{id}', \OpenAPI\OpenAPI\Models\Operations\GetCallRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCallRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCallResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->call = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Call', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find a specific call broadcast
     * 
     * Returns a single CallBroadcast instance for a given call broadcast campaign id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCallBroadcastRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCallBroadcastSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCallBroadcastResponse
     */
	public function getCallBroadcast(
        \OpenAPI\OpenAPI\Models\Operations\GetCallBroadcastRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetCallBroadcastSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCallBroadcastResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calls/broadcasts/{id}', \OpenAPI\OpenAPI\Models\Operations\GetCallBroadcastRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCallBroadcastRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCallBroadcastResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->callBroadcast = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CallBroadcast', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find batches in a call broadcast
     * 
     * This endpoint will enable the user to page through all of the batches for a particular voice broadcast campaign
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCallBroadcastBatchesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCallBroadcastBatchesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCallBroadcastBatchesResponse
     */
	public function getCallBroadcastBatches(
        \OpenAPI\OpenAPI\Models\Operations\GetCallBroadcastBatchesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetCallBroadcastBatchesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCallBroadcastBatchesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calls/broadcasts/{id}/batches', \OpenAPI\OpenAPI\Models\Operations\GetCallBroadcastBatchesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCallBroadcastBatchesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCallBroadcastBatchesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchPage', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find calls in a call broadcast
     * 
     * This endpoint will enable the user to page through all calls for a particular call broadcast campaign
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCallBroadcastCallsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCallBroadcastCallsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCallBroadcastCallsResponse
     */
	public function getCallBroadcastCalls(
        \OpenAPI\OpenAPI\Models\Operations\GetCallBroadcastCallsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetCallBroadcastCallsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCallBroadcastCallsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calls/broadcasts/{id}/calls', \OpenAPI\OpenAPI\Models\Operations\GetCallBroadcastCallsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCallBroadcastCallsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCallBroadcastCallsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->callPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CallPage', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get statistics on call broadcast
     * 
     * Returns broadcast statistics like total number of sent/received actions, total cost, number of remaining outbound actions, error count, etc
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCallBroadcastStatsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCallBroadcastStatsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCallBroadcastStatsResponse
     */
	public function getCallBroadcastStats(
        \OpenAPI\OpenAPI\Models\Operations\GetCallBroadcastStatsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetCallBroadcastStatsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCallBroadcastStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calls/broadcasts/{id}/stats', \OpenAPI\OpenAPI\Models\Operations\GetCallBroadcastStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCallBroadcastStatsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCallBroadcastStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->callBroadcastStats = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CallBroadcastStats', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get call recording by id
     * 
     * Returns metadata of recording of a particular call. Metadata contains a link to a MP3 recording
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCallRecordingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCallRecordingSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCallRecordingResponse
     */
	public function getCallRecording(
        \OpenAPI\OpenAPI\Models\Operations\GetCallRecordingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetCallRecordingSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCallRecordingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calls/recordings/{id}', \OpenAPI\OpenAPI\Models\Operations\GetCallRecordingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCallRecordingRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCallRecordingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->callRecording = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CallRecording', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get call recording by name
     * 
     * Returns recording metadata of particular call. Metadata contains link to a MP3 recording
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCallRecordingByNameRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCallRecordingByNameSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCallRecordingByNameResponse
     */
	public function getCallRecordingByName(
        \OpenAPI\OpenAPI\Models\Operations\GetCallRecordingByNameRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetCallRecordingByNameSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCallRecordingByNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calls/{id}/recordings/{name}', \OpenAPI\OpenAPI\Models\Operations\GetCallRecordingByNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCallRecordingByNameRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCallRecordingByNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->callRecording = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CallRecording', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get call recording in mp3 format
     * 
     * Returns an MP3 recording of particular call, response contains binary data, content type is 'audio/mpeg'
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCallRecordingMp3Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCallRecordingMp3Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCallRecordingMp3Response
     */
	public function getCallRecordingMp3(
        \OpenAPI\OpenAPI\Models\Operations\GetCallRecordingMp3Request $request,
        \OpenAPI\OpenAPI\Models\Operations\GetCallRecordingMp3Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCallRecordingMp3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calls/recordings/{id}.mp3', \OpenAPI\OpenAPI\Models\Operations\GetCallRecordingMp3Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCallRecordingMp3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inputStream = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get call mp3 recording by name
     * 
     * Returns a MP3 recording of a particular call, response contains binary data, content type is 'audio/mpeg'
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCallRecordingMp3ByNameRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCallRecordingMp3ByNameSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCallRecordingMp3ByNameResponse
     */
	public function getCallRecordingMp3ByName(
        \OpenAPI\OpenAPI\Models\Operations\GetCallRecordingMp3ByNameRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetCallRecordingMp3ByNameSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCallRecordingMp3ByNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calls/{id}/recordings/{name}.mp3', \OpenAPI\OpenAPI\Models\Operations\GetCallRecordingMp3ByNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCallRecordingMp3ByNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'audio/mpeg')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get call recordings for a call
     * 
     * Returns a list of recordings metadata of particular call. Metadata contains link to a MP3 recording
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCallRecordingsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCallRecordingsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCallRecordingsResponse
     */
	public function getCallRecordings(
        \OpenAPI\OpenAPI\Models\Operations\GetCallRecordingsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetCallRecordingsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCallRecordingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calls/{id}/recordings', \OpenAPI\OpenAPI\Models\Operations\GetCallRecordingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCallRecordingsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCallRecordingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->callRecordingList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CallRecordingList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Send calls
     * 
     * Use the /calls API to send individual calls quickly. A verified Caller ID and sufficient credits are required to make a call. CallRecipient represents a single recipient identified by phone number or contact id in CallFire system. You can attach user-defined attributes to a Call action via CallRecipient.attributes property, attributes are available in Call action response
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SendCallsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SendCallsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SendCallsResponse
     */
	public function sendCalls(
        \OpenAPI\OpenAPI\Models\Operations\SendCallsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SendCallsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SendCallsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calls');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SendCallsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SendCallsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->callList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CallList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Start voice broadcast
     * 
     * Start a voice broadcast
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StartVoiceBroadcastRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\StartVoiceBroadcastSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\StartVoiceBroadcastResponse
     */
	public function startVoiceBroadcast(
        \OpenAPI\OpenAPI\Models\Operations\StartVoiceBroadcastRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\StartVoiceBroadcastSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\StartVoiceBroadcastResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calls/broadcasts/{id}/start', \OpenAPI\OpenAPI\Models\Operations\StartVoiceBroadcastRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StartVoiceBroadcastResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Stop voice broadcast
     * 
     * Stop a voice broadcast
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StopVoiceBroadcastRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\StopVoiceBroadcastSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\StopVoiceBroadcastResponse
     */
	public function stopVoiceBroadcast(
        \OpenAPI\OpenAPI\Models\Operations\StopVoiceBroadcastRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\StopVoiceBroadcastSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\StopVoiceBroadcastResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calls/broadcasts/{id}/stop', \OpenAPI\OpenAPI\Models\Operations\StopVoiceBroadcastRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StopVoiceBroadcastResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Disable/enable undialed recipients in broadcast
     * 
     * This operation lets the user to disable/enable undialed recipients in created broadcast
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ToggleCallBroadcastRecipientsStatusRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ToggleCallBroadcastRecipientsStatusSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ToggleCallBroadcastRecipientsStatusResponse
     */
	public function toggleCallBroadcastRecipientsStatus(
        \OpenAPI\OpenAPI\Models\Operations\ToggleCallBroadcastRecipientsStatusRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ToggleCallBroadcastRecipientsStatusSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ToggleCallBroadcastRecipientsStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calls/broadcasts/{id}/toggleRecipientsStatus', \OpenAPI\OpenAPI\Models\Operations\ToggleCallBroadcastRecipientsStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ToggleCallBroadcastRecipientsStatusRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ToggleCallBroadcastRecipientsStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a call broadcast
     * 
     * This operation lets the user modify the configuration of a voice broadcast campaign after call broadcast campaign is created. See CallBroadcast for more information on what can/can't be updated on this API
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCallBroadcastRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCallBroadcastSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateCallBroadcastResponse
     */
	public function updateCallBroadcast(
        \OpenAPI\OpenAPI\Models\Operations\UpdateCallBroadcastRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateCallBroadcastSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateCallBroadcastResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calls/broadcasts/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateCallBroadcastRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "callBroadcastInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\UpdateCallBroadcastRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateCallBroadcastResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
}