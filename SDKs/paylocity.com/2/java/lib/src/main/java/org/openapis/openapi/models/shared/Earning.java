/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Earning - The employee earning model
 */
public class Earning {
    /**
     * Third-party agency associated with earning. Must match Company setup.&lt;br  /&gt;Max length: 10
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("agency")
    public String agency;

    public Earning withAgency(String agency) {
        this.agency = agency;
        return this;
    }
    
    /**
     * Value that matches CalculationCode to add to gross wages. For percentage (%), enter whole number (10 = 10%).  &lt;br  /&gt;Decimal(12,2)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    public Double amount;

    public Earning withAmount(Double amount) {
        this.amount = amount;
        return this;
    }
    
    /**
     * Year to Date dollar amount not to be exceeded for an earning in the calendar year. Used only with company driven maximums. &lt;br  /&gt;Decimal(12,2)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("annualMaximum")
    public Double annualMaximum;

    public Earning withAnnualMaximum(Double annualMaximum) {
        this.annualMaximum = annualMaximum;
        return this;
    }
    
    /**
     * Defines how earnings are calculated. Common values are *% (percentage of gross), flat (flat dollar amount)*. Defaulted to the Company setup calcCode for earning. &lt;br  /&gt;Max length: 20
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("calculationCode")
    public String calculationCode;

    public Earning withCalculationCode(String calculationCode) {
        this.calculationCode = calculationCode;
        return this;
    }
    
    /**
     * Cost Center associated with earning. Must match Company setup.&lt;br  /&gt; Max length: 10
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("costCenter1")
    public String costCenter1;

    public Earning withCostCenter1(String costCenter1) {
        this.costCenter1 = costCenter1;
        return this;
    }
    
    /**
     * Cost Center associated with earning. Must match Company setup.&lt;br  /&gt; Max length: 10
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("costCenter2")
    public String costCenter2;

    public Earning withCostCenter2(String costCenter2) {
        this.costCenter2 = costCenter2;
        return this;
    }
    
    /**
     * Cost Center associated with earning. Must match Company setup.&lt;br  /&gt; Max length: 10
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("costCenter3")
    public String costCenter3;

    public Earning withCostCenter3(String costCenter3) {
        this.costCenter3 = costCenter3;
        return this;
    }
    
    /**
     * Earning code. Must match Company setup. &lt;br  /&gt;Max length: 10
     */
    @JsonProperty("earningCode")
    public String earningCode;

    public Earning withEarningCode(String earningCode) {
        this.earningCode = earningCode;
        return this;
    }
    
    /**
     * Date earning is active. Defaulted to run date or check date based on Company setup. Common formats are MM-DD-CCYY, CCYY-MM-DD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effectiveDate")
    public String effectiveDate;

    public Earning withEffectiveDate(String effectiveDate) {
        this.effectiveDate = effectiveDate;
        return this;
    }
    
    /**
     * Stop date of an earning. Common formats are MM-DD-CCYY, CCYY-MM-DD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endDate")
    public String endDate;

    public Earning withEndDate(String endDate) {
        this.endDate = endDate;
        return this;
    }
    
    /**
     * Needed if earning is applied differently from the payroll frequency (one time earning for example).&lt;br  /&gt; Max length: 5
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("frequency")
    public String frequency;

    public Earning withFrequency(String frequency) {
        this.frequency = frequency;
        return this;
    }
    
    /**
     * Dollar amount. The employee earning will stop when the goal amount is reached.&lt;br  /&gt; Decimal(12,2)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("goal")
    public Double goal;

    public Earning withGoal(Double goal) {
        this.goal = goal;
        return this;
    }
    
    /**
     * The value is used in conjunction with the Rate field. When entering Group Term Life Insurance (GTL), it should contain the full amount of the group term life insurance policy. &lt;br  /&gt; Decimal(12,2)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hoursOrUnits")
    public Double hoursOrUnits;

    public Earning withHoursOrUnits(Double hoursOrUnits) {
        this.hoursOrUnits = hoursOrUnits;
        return this;
    }
    
    /**
     * Used for ACA. If not entered, defaulted to Company earning setup.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isSelfInsured")
    public Boolean isSelfInsured;

    public Earning withIsSelfInsured(Boolean isSelfInsured) {
        this.isSelfInsured = isSelfInsured;
        return this;
    }
    
    /**
     * Job code associated with earnings. Must match Company setup.&lt;br  /&gt; Max length: 20
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jobCode")
    public String jobCode;

    public Earning withJobCode(String jobCode) {
        this.jobCode = jobCode;
        return this;
    }
    
    /**
     * Information to print on the check stub if agency is set up for this earning. &lt;br  /&gt;Max length: 50
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("miscellaneousInfo")
    public String miscellaneousInfo;

    public Earning withMiscellaneousInfo(String miscellaneousInfo) {
        this.miscellaneousInfo = miscellaneousInfo;
        return this;
    }
    
    /**
     * Amount already paid to employee toward goal. &lt;br  /&gt; Decimal(12,2)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paidTowardsGoal")
    public Double paidTowardsGoal;

    public Earning withPaidTowardsGoal(Double paidTowardsGoal) {
        this.paidTowardsGoal = paidTowardsGoal;
        return this;
    }
    
    /**
     * Maximum amount of the earning on a single paycheck. &lt;br  /&gt; Decimal(12,2)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payPeriodMaximum")
    public Double payPeriodMaximum;

    public Earning withPayPeriodMaximum(Double payPeriodMaximum) {
        this.payPeriodMaximum = payPeriodMaximum;
        return this;
    }
    
    /**
     * Minimum amount of the earning on a single paycheck. &lt;br  /&gt; Decimal(12,2)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payPeriodMinimum")
    public Double payPeriodMinimum;

    public Earning withPayPeriodMinimum(Double payPeriodMinimum) {
        this.payPeriodMinimum = payPeriodMinimum;
        return this;
    }
    
    /**
     * Rate is used in conjunction with the hoursOrUnits field. &lt;br  /&gt; Decimal(12,2)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rate")
    public Double rate;

    public Earning withRate(Double rate) {
        this.rate = rate;
        return this;
    }
    
    /**
     * Rate Code applies to additional pay rates entered for an employee. Must match Company setup. &lt;br  /&gt; Max length: 10
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rateCode")
    public String rateCode;

    public Earning withRateCode(String rateCode) {
        this.rateCode = rateCode;
        return this;
    }
    
    /**
     * Start date of an earning based on payroll calendar. Common formats are MM-DD-CCYY, CCYY-MM-DD.
     */
    @JsonProperty("startDate")
    public String startDate;

    public Earning withStartDate(String startDate) {
        this.startDate = startDate;
        return this;
    }
    
    public Earning(@JsonProperty("earningCode") String earningCode, @JsonProperty("startDate") String startDate) {
        this.earningCode = earningCode;
        this.startDate = startDate;
  }
}
