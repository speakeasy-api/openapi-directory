"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ServicePrincipalOwners:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def service_principals_add_owner(self, request: operations.ServicePrincipalsAddOwnerRequest) -> operations.ServicePrincipalsAddOwnerResponse:
        r"""Add an owner to a service principal."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ServicePrincipalsAddOwnerRequest, base_url, '/{tenantID}/servicePrincipals/{objectId}/$links/owners', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.ServicePrincipalsAddOwnerRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ServicePrincipalsAddOwnerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GraphError])
                res.graph_error = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GraphError])
                res.graph_error = out

        return res

    def service_principals_list_owners(self, request: operations.ServicePrincipalsListOwnersRequest) -> operations.ServicePrincipalsListOwnersResponse:
        r"""Directory objects that are owners of this service principal.
        The owners are a set of non-admin users who are allowed to modify this object.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ServicePrincipalsListOwnersRequest, base_url, '/{tenantID}/servicePrincipals/{objectId}/owners', request)
        
        query_params = utils.get_query_params(operations.ServicePrincipalsListOwnersRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ServicePrincipalsListOwnersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DirectoryObjectListResult])
                res.directory_object_list_result = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DirectoryObjectListResult])
                res.directory_object_list_result = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GraphError])
                res.graph_error = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GraphError])
                res.graph_error = out

        return res

    def service_principals_remove_owner(self, request: operations.ServicePrincipalsRemoveOwnerRequest) -> operations.ServicePrincipalsRemoveOwnerResponse:
        r"""Remove a member from owners."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ServicePrincipalsRemoveOwnerRequest, base_url, '/{tenantID}/servicePrincipals/{objectId}/$links/owners/{ownerObjectId}', request)
        
        query_params = utils.get_query_params(operations.ServicePrincipalsRemoveOwnerRequest, request)
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ServicePrincipalsRemoveOwnerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GraphError])
                res.graph_error = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GraphError])
                res.graph_error = out

        return res

    