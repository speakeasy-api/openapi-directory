<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Building - Public API: Resources.buildings
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Building
{
    /**
     * Public API: Resources.buildings
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\BuildingAddress $address
     */
	#[\JMS\Serializer\Annotation\SerializedName('address')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\BuildingAddress')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?BuildingAddress $address = null;
    
    /**
     * Unique identifier for the building. The maximum length is 100 characters.
     * 
     * @var ?string $buildingId
     */
	#[\JMS\Serializer\Annotation\SerializedName('buildingId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $buildingId = null;
    
    /**
     * The building name as seen by users in Calendar. Must be unique for the customer. For example, "NYC-CHEL". The maximum length is 100 characters.
     * 
     * @var ?string $buildingName
     */
	#[\JMS\Serializer\Annotation\SerializedName('buildingName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $buildingName = null;
    
    /**
     * Public API: Resources.buildings
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\BuildingCoordinates $coordinates
     */
	#[\JMS\Serializer\Annotation\SerializedName('coordinates')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\BuildingCoordinates')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?BuildingCoordinates $coordinates = null;
    
    /**
     * A brief description of the building. For example, "Chelsea Market".
     * 
     * @var ?string $description
     */
	#[\JMS\Serializer\Annotation\SerializedName('description')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $description = null;
    
    /**
     * ETag of the resource.
     * 
     * @var ?string $etags
     */
	#[\JMS\Serializer\Annotation\SerializedName('etags')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $etags = null;
    
    /**
     * The display names for all floors in this building. The floors are expected to be sorted in ascending order, from lowest floor to highest floor. For example, ["B2", "B1", "L", "1", "2", "2M", "3", "PH"] Must contain at least one entry.
     * 
     * @var ?array<string> $floorNames
     */
	#[\JMS\Serializer\Annotation\SerializedName('floorNames')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $floorNames = null;
    
    /**
     * Kind of resource this is.
     * 
     * @var ?string $kind
     */
	#[\JMS\Serializer\Annotation\SerializedName('kind')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $kind = null;
    
	public function __construct()
	{
		$this->address = null;
		$this->buildingId = null;
		$this->buildingName = null;
		$this->coordinates = null;
		$this->description = null;
		$this->etags = null;
		$this->floorNames = null;
		$this->kind = null;
	}
}
