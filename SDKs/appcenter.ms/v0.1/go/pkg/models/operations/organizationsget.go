// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type OrganizationsGetSecurity struct {
	APIToken shared.SchemeAPIToken `security:"scheme,type=apiKey,subtype=header"`
}

type OrganizationsGetPathParams struct {
	// The organization's name
	OrgName string `pathParam:"style=simple,explode=false,name=org_name"`
}

type OrganizationsGetRequest struct {
	PathParams OrganizationsGetPathParams
	Security   OrganizationsGetSecurity
}

type OrganizationsGetDefaultApplicationJSONErrorCodeEnum string

const (
	OrganizationsGetDefaultApplicationJSONErrorCodeEnumBadRequest          OrganizationsGetDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	OrganizationsGetDefaultApplicationJSONErrorCodeEnumConflict            OrganizationsGetDefaultApplicationJSONErrorCodeEnum = "Conflict"
	OrganizationsGetDefaultApplicationJSONErrorCodeEnumNotAcceptable       OrganizationsGetDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	OrganizationsGetDefaultApplicationJSONErrorCodeEnumNotFound            OrganizationsGetDefaultApplicationJSONErrorCodeEnum = "NotFound"
	OrganizationsGetDefaultApplicationJSONErrorCodeEnumInternalServerError OrganizationsGetDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	OrganizationsGetDefaultApplicationJSONErrorCodeEnumUnauthorized        OrganizationsGetDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	OrganizationsGetDefaultApplicationJSONErrorCodeEnumTooManyRequests     OrganizationsGetDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *OrganizationsGetDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = OrganizationsGetDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OrganizationsGetDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type OrganizationsGetDefaultApplicationJSONError struct {
	Code    OrganizationsGetDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                              `json:"message"`
}

// OrganizationsGetDefaultApplicationJSON - Error
type OrganizationsGetDefaultApplicationJSON struct {
	Error OrganizationsGetDefaultApplicationJSONError `json:"error"`
}

// OrganizationsGet200ApplicationJSONOriginEnum - The creation origin of this organization
type OrganizationsGet200ApplicationJSONOriginEnum string

const (
	OrganizationsGet200ApplicationJSONOriginEnumAppcenter OrganizationsGet200ApplicationJSONOriginEnum = "appcenter"
	OrganizationsGet200ApplicationJSONOriginEnumHockeyapp OrganizationsGet200ApplicationJSONOriginEnum = "hockeyapp"
)

func (e *OrganizationsGet200ApplicationJSONOriginEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "appcenter":
		fallthrough
	case "hockeyapp":
		*e = OrganizationsGet200ApplicationJSONOriginEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OrganizationsGet200ApplicationJSONOriginEnum: %s", s)
	}
}

// OrganizationsGet200ApplicationJSON - Success
type OrganizationsGet200ApplicationJSON struct {
	// The URL to a user-uploaded Avatar image
	AvatarURL *string `json:"avatar_url,omitempty"`
	// The creation date of this organization
	CreatedAt string `json:"created_at"`
	// The display name of the organization
	DisplayName string `json:"display_name"`
	// The internal unique id (UUID) of the organization.
	ID string `json:"id"`
	// The slug name of the organization
	Name string `json:"name"`
	// The creation origin of this organization
	Origin OrganizationsGet200ApplicationJSONOriginEnum `json:"origin"`
	// The date the organization was last updated at
	UpdatedAt string `json:"updated_at"`
}

type OrganizationsGetResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	OrganizationsGet200ApplicationJSONObject *OrganizationsGet200ApplicationJSON
	// Error
	OrganizationsGetDefaultApplicationJSONObject *OrganizationsGetDefaultApplicationJSON
}
