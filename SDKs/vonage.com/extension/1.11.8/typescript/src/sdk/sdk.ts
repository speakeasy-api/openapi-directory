/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import axios from "axios";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = [
  "https://api.vonage.com/t/vbc.prod/provisioning",
] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * The Vonage Business Cloud Extension API enables you to retrieve information about extensions.
 *
 * @remarks
 *
 * Your application must subscribe to the Provisioning API suite to use this API.
 *
 */
export class SDK {
  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    this._securityClient = this._defaultClient;
  }

  /**
   * Get extension data by account ID and extension number
   */
  extensionCtrlGetAccountExtensionByID(
    req: operations.ExtensionCtrlGetAccountExtensionByIDRequest,
    security: operations.ExtensionCtrlGetAccountExtensionByIDSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ExtensionCtrlGetAccountExtensionByIDResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ExtensionCtrlGetAccountExtensionByIDRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/accounts/{account_id}/extensions/{extension_number}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ExtensionCtrlGetAccountExtensionByIDSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ExtensionCtrlGetAccountExtensionByIDResponse =
        new operations.ExtensionCtrlGetAccountExtensionByIDResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.endUserRouteHalResponse = utils.objectToClass(
              httpRes?.data,
              shared.EndUserRouteHalResponse
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get account extensions data by account ID
   */
  extensionCtrlGetAccountExtensions(
    req: operations.ExtensionCtrlGetAccountExtensionsRequest,
    security: operations.ExtensionCtrlGetAccountExtensionsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ExtensionCtrlGetAccountExtensionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ExtensionCtrlGetAccountExtensionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/accounts/{account_id}/extensions",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ExtensionCtrlGetAccountExtensionsSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ExtensionCtrlGetAccountExtensionsResponse =
        new operations.ExtensionCtrlGetAccountExtensionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.endUserRouteHalResponse = utils.objectToClass(
              httpRes?.data,
              shared.EndUserRouteHalResponse
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationErrorsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ValidationErrorsResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
