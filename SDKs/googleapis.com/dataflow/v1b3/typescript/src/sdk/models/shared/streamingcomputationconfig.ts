/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ParallelInstruction } from "./parallelinstruction";
import { Expose, Type } from "class-transformer";

/**
 * Configuration information for a single streaming computation.
 */
export class StreamingComputationConfig extends SpeakeasyBase {
  /**
   * Unique identifier for this computation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "computationId" })
  computationId?: string;

  /**
   * Instructions that comprise the computation.
   */
  @SpeakeasyMetadata({ elemType: ParallelInstruction })
  @Expose({ name: "instructions" })
  @Type(() => ParallelInstruction)
  instructions?: ParallelInstruction[];

  /**
   * Stage name of this computation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stageName" })
  stageName?: string;

  /**
   * System defined name for this computation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "systemName" })
  systemName?: string;

  /**
   * Map from user name of stateful transforms in this stage to their state family.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transformUserNameToStateFamily" })
  transformUserNameToStateFamily?: Record<string, string>;
}
