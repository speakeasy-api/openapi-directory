"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import target as shared_target
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class UpdateNotificationRuleRequestBodyDetailTypeEnum(str, Enum):
    r"""The level of detail to include in the notifications for this resource. BASIC will include only the contents of the event as it would appear in Amazon CloudWatch. FULL will include any supplemental information provided by AWS CodeStar Notifications and/or the service for the resource for which the notification is created."""
    BASIC = 'BASIC'
    FULL = 'FULL'

class UpdateNotificationRuleRequestBodyStatusEnum(str, Enum):
    r"""The status of the notification rule. Valid statuses include enabled (sending notifications) or disabled (not sending notifications)."""
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNotificationRuleRequestBody:
    
    arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Arn') }})
    r"""The Amazon Resource Name (ARN) of the notification rule."""  
    detail_type: Optional[UpdateNotificationRuleRequestBodyDetailTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DetailType'), 'exclude': lambda f: f is None }})
    r"""The level of detail to include in the notifications for this resource. BASIC will include only the contents of the event as it would appear in Amazon CloudWatch. FULL will include any supplemental information provided by AWS CodeStar Notifications and/or the service for the resource for which the notification is created."""  
    event_type_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EventTypeIds'), 'exclude': lambda f: f is None }})
    r"""A list of event types associated with this notification rule. For a complete list of event types and IDs, see <a href=\\"https://docs.aws.amazon.com/codestar-notifications/latest/userguide/concepts.html#concepts-api\\">Notification concepts</a> in the <i>Developer Tools Console User Guide</i>."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})
    r"""The name of the notification rule."""  
    status: Optional[UpdateNotificationRuleRequestBodyStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})
    r"""The status of the notification rule. Valid statuses include enabled (sending notifications) or disabled (not sending notifications)."""  
    targets: Optional[list[shared_target.Target]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Targets'), 'exclude': lambda f: f is None }})
    r"""The address and type of the targets to receive notifications from this notification rule."""  
    

@dataclasses.dataclass
class UpdateNotificationRuleRequest:
    
    request_body: UpdateNotificationRuleRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateNotificationRuleResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    configuration_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConfigurationException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    update_notification_rule_result: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Success"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    