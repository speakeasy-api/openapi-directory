// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"context"
	"fmt"
	"net/http"
	"openapi/pkg/models/operations"
	"openapi/pkg/utils"
	"strings"
)

// partyCoordinatedExpenditures - Schedule F, it shows all special expenditures a national or state party committee makes in connection with the general election campaigns of federal candidates.
type partyCoordinatedExpenditures struct {
	defaultClient  HTTPClient
	securityClient HTTPClient
	serverURL      string
	language       string
	sdkVersion     string
	genVersion     string
}

func newPartyCoordinatedExpenditures(defaultClient, securityClient HTTPClient, serverURL, language, sdkVersion, genVersion string) *partyCoordinatedExpenditures {
	return &partyCoordinatedExpenditures{
		defaultClient:  defaultClient,
		securityClient: securityClient,
		serverURL:      serverURL,
		language:       language,
		sdkVersion:     sdkVersion,
		genVersion:     genVersion,
	}
}

// GetSchedulesScheduleF -
// Schedule F, it shows all special expenditures a national or state party committee
// makes in connection with the general election campaigns of federal candidates.
//
// These coordinated party expenditures do not count against the contribution limits but are subject to other limits,
// these limits are detailed in Chapter 7 of the FEC Campaign Guide for Political Party Committees.
func (s *partyCoordinatedExpenditures) GetSchedulesScheduleF(ctx context.Context, request operations.GetSchedulesScheduleFRequest) (*operations.GetSchedulesScheduleFResponse, error) {
	baseURL := s.serverURL
	url := strings.TrimSuffix(baseURL, "/") + "/schedules/schedule_f/"

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	if err := utils.PopulateQueryParams(ctx, req, request.QueryParams, nil); err != nil {
		return nil, fmt.Errorf("error populating query params: %w", err)
	}

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GetSchedulesScheduleFResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	default:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *operations.GetSchedulesScheduleFDefaultApplicationJSON
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.GetSchedulesScheduleFDefaultApplicationJSONObject = out
		}
	}

	return res, nil
}

// GetSchedulesScheduleFSubID -
// Schedule F, it shows all special expenditures a national or state party committee
// makes in connection with the general election campaigns of federal candidates.
//
// These coordinated party expenditures do not count against the contribution limits but are subject to other limits,
// these limits are detailed in Chapter 7 of the FEC Campaign Guide for Political Party Committees.
func (s *partyCoordinatedExpenditures) GetSchedulesScheduleFSubID(ctx context.Context, request operations.GetSchedulesScheduleFSubIDRequest) (*operations.GetSchedulesScheduleFSubIDResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/schedules/schedule_f/{sub_id}/", request.PathParams, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	if err := utils.PopulateQueryParams(ctx, req, request.QueryParams, nil); err != nil {
		return nil, fmt.Errorf("error populating query params: %w", err)
	}

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GetSchedulesScheduleFSubIDResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	default:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *operations.GetSchedulesScheduleFSubIDDefaultApplicationJSON
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.GetSchedulesScheduleFSubIDDefaultApplicationJSONObject = out
		}
	}

	return res, nil
}
