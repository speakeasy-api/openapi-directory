// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// PriceBulkUploadsFeedTypeEnum - The feed Type
type PriceBulkUploadsFeedTypeEnum string

const (
	PriceBulkUploadsFeedTypeEnumPrice                PriceBulkUploadsFeedTypeEnum = "price"
	PriceBulkUploadsFeedTypeEnumCptSellerEligibility PriceBulkUploadsFeedTypeEnum = "CPT_SELLER_ELIGIBILITY"
)

func (e *PriceBulkUploadsFeedTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "price":
		fallthrough
	case "CPT_SELLER_ELIGIBILITY":
		*e = PriceBulkUploadsFeedTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PriceBulkUploadsFeedTypeEnum: %s", s)
	}
}

type PriceBulkUploadsQueryParams struct {
	// The feed Type
	FeedType PriceBulkUploadsFeedTypeEnum `queryParam:"style=form,explode=true,name=feedType"`
}

type PriceBulkUploadsHeaders struct {
	// Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
	Authorization string `header:"style=simple,explode=false,name=Authorization"`
	// A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
	WmConsumerChannelType *string `header:"style=simple,explode=false,name=WM_CONSUMER.CHANNEL.TYPE"`
	// A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
	WmQosCorrelationID string `header:"style=simple,explode=false,name=WM_QOS.CORRELATION_ID"`
	// The access token retrieved in the Token API call
	WmSecAccessToken string `header:"style=simple,explode=false,name=WM_SEC.ACCESS_TOKEN"`
	// Walmart Service Name
	WmSvcName string `header:"style=simple,explode=false,name=WM_SVC.NAME"`
}

type PriceBulkUploadsRequestBodyFile struct {
	Content []byte `multipartForm:"content"`
	File    string `multipartForm:"name=file"`
}

// PriceBulkUploadsRequestBody - Feed file to upload
type PriceBulkUploadsRequestBody struct {
	File *PriceBulkUploadsRequestBodyFile `multipartForm:"file"`
}

type PriceBulkUploadsRequest struct {
	QueryParams PriceBulkUploadsQueryParams
	Headers     PriceBulkUploadsHeaders
	// Feed file to upload
	Request PriceBulkUploadsRequestBody `request:"mediaType=multipart/form-data"`
}

// PriceBulkUploads200ApplicationXML - Successful Operation
type PriceBulkUploads200ApplicationXML struct {
	AdditionalAttributes map[string]interface{}
	Errors               map[string]interface{}
	// A unique ID, returned from the Bulk Upload API, used for tracking the feed file
	FeedID *string
}

// PriceBulkUploads200ApplicationJSON - Successful Operation
type PriceBulkUploads200ApplicationJSON struct {
	AdditionalAttributes map[string]interface{} `json:"additionalAttributes,omitempty"`
	Errors               map[string]interface{} `json:"errors,omitempty"`
	// A unique ID, returned from the Bulk Upload API, used for tracking the feed file
	FeedID *string `json:"feedId,omitempty"`
}

type PriceBulkUploadsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful Operation
	PriceBulkUploads200ApplicationJSONObject *PriceBulkUploads200ApplicationJSON
}
