"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import applicationconfiguration as shared_applicationconfiguration
from ..shared import applicationmode_enum as shared_applicationmode_enum
from ..shared import cloudwatchloggingoption as shared_cloudwatchloggingoption
from ..shared import runtimeenvironment_enum as shared_runtimeenvironment_enum
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateApplicationRequest:
    
    application_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApplicationName') }})  
    runtime_environment: shared_runtimeenvironment_enum.RuntimeEnvironmentEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RuntimeEnvironment') }})  
    service_execution_role: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceExecutionRole') }})  
    application_configuration: Optional[shared_applicationconfiguration.ApplicationConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApplicationConfiguration'), 'exclude': lambda f: f is None }})  
    application_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApplicationDescription'), 'exclude': lambda f: f is None }})  
    application_mode: Optional[shared_applicationmode_enum.ApplicationModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApplicationMode'), 'exclude': lambda f: f is None }})  
    cloud_watch_logging_options: Optional[list[shared_cloudwatchloggingoption.CloudWatchLoggingOption]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CloudWatchLoggingOptions'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    