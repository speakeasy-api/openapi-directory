/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { GoogleCloudDialogflowV2MessageAnnotation } from "./googleclouddialogflowv2messageannotation";
import { GoogleCloudDialogflowV2SentimentAnalysisResult } from "./googleclouddialogflowv2sentimentanalysisresult";
import { Expose, Type } from "class-transformer";

/**
 * Output only. The role of the participant.
 */
export enum GoogleCloudDialogflowV2MessageParticipantRoleEnum {
  RoleUnspecified = "ROLE_UNSPECIFIED",
  HumanAgent = "HUMAN_AGENT",
  AutomatedAgent = "AUTOMATED_AGENT",
  EndUser = "END_USER",
}

/**
 * Represents a message posted into a conversation.
 */
export class GoogleCloudDialogflowV2Message extends SpeakeasyBase {
  /**
   * Required. The message content.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "content" })
  content?: string;

  /**
   * Output only. The time when the message was created in Contact Center AI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createTime" })
  createTime?: string;

  /**
   * Optional. The message language. This should be a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag. Example: "en-US".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "languageCode" })
  languageCode?: string;

  /**
   * Represents the result of annotation for the message.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "messageAnnotation" })
  @Type(() => GoogleCloudDialogflowV2MessageAnnotation)
  messageAnnotation?: GoogleCloudDialogflowV2MessageAnnotation;

  /**
   * Optional. The unique identifier of the message. Format: `projects//locations//conversations//messages/`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Output only. The participant that sends this message.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "participant" })
  participant?: string;

  /**
   * Output only. The role of the participant.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "participantRole" })
  participantRole?: GoogleCloudDialogflowV2MessageParticipantRoleEnum;

  /**
   * Optional. The time when the message was sent.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sendTime" })
  sendTime?: string;

  /**
   * The result of sentiment analysis. Sentiment analysis inspects user input and identifies the prevailing subjective opinion, especially to determine a user's attitude as positive, negative, or neutral. For Participants.DetectIntent, it needs to be configured in DetectIntentRequest.query_params. For Participants.StreamingDetectIntent, it needs to be configured in StreamingDetectIntentRequest.query_params. And for Participants.AnalyzeContent and Participants.StreamingAnalyzeContent, it needs to be configured in ConversationProfile.human_agent_assistant_config
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sentimentAnalysis" })
  @Type(() => GoogleCloudDialogflowV2SentimentAnalysisResult)
  sentimentAnalysis?: GoogleCloudDialogflowV2SentimentAnalysisResult;
}
