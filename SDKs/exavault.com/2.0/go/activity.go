// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"context"
	"fmt"
	"net/http"
	"openapi/pkg/models/operations"
	"openapi/pkg/models/shared"
	"openapi/pkg/utils"
	"strings"
)

// activity - The activity APIs allow you to get logs from your account. We track multiple types of under the umbrellas; __Activity Logs__ that show an action a user performed or initiated on a file, folder or the account. __Webhooks Logs__ that show records of all outbound webhook calls made by ExaVault. Both can be optionally filtered to only return specific data youâ€™re looking for.
type activity struct {
	defaultClient  HTTPClient
	securityClient HTTPClient
	serverURL      string
	language       string
	sdkVersion     string
	genVersion     string
}

func newActivity(defaultClient, securityClient HTTPClient, serverURL, language, sdkVersion, genVersion string) *activity {
	return &activity{
		defaultClient:  defaultClient,
		securityClient: securityClient,
		serverURL:      serverURL,
		language:       language,
		sdkVersion:     sdkVersion,
		genVersion:     genVersion,
	}
}

// GetSessionLogs - Get activity logs
// Returns the detailed activity logs for your account. Optional query paramaters will filter the returned results based on a number of options including usernames, activity types, or date ranges.
//
// **NOTE:** Total Results will always return as 0 to avoid quering data you're not using and stay as performant as possible.
//
// **Operation Types**
// Session activity is logged with an operation type that is different from what is visible through the [activity log interface in the web file manager](/docs/account/10-activity-logs/00-activity-logs). Consult the table below to compare the two:
//
// | File Manager Value | API Value | Notes |
// |-----|----|---|
// | Connect | PASS | |
// | Disconnect | EXIT | |
// | Upload | STOR | |
// | Download | RETR | |
// | Delete | DELE | |
// | Create Folder | MKD | |
// | Rename | RNTO | |
// | Move | MOVE | |
// | Copy | COPY | |
// | Compress | COMPR | |
// | Extract | EXTRACT | |
// | Shared Folders | SHARE | |
// | Send Files | SEND | |
// | Receive Files | RECV | |
// | _N/A_ | EDIT\_SEND | Update send. Not shown in file manager |
// | Update Share | EDIT\_SHARE| |
// | Update Receive | EDIT\_RECV | |
// | Delete Send | DELE\_SEND | |
// | Delete Receive | DELE\_RECV | |
// | Delete Share | DELE\_SHARE | |
// | Create Notification | NOTIFY | |
// | Update Notification | EDIT\_NTFY| |
// | Delete Notification | DELE\_NTFY | |
// | Create User | USER | |
// | Update User | EDIT\_USER | |
// | Delete User | DELE\_USER | |
// | _N/A_ | DFA | Create direct link. Not shown in file manager |
// | _N/A_ | EDIT\_DFA | Update direct link options. Not shown in file manager |
// | _N/A_ | DELE\_DFA | Deactivate direct link. Not shown in file manager|
func (s *activity) GetSessionLogs(ctx context.Context, request operations.GetSessionLogsRequest) (*operations.GetSessionLogsResponse, error) {
	baseURL := s.serverURL
	url := strings.TrimSuffix(baseURL, "/") + "/activity/session"

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	utils.PopulateHeaders(ctx, req, request.Headers)

	if err := utils.PopulateQueryParams(ctx, req, request.QueryParams, nil); err != nil {
		return nil, fmt.Errorf("error populating query params: %w", err)
	}

	client := s.defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GetSessionLogsResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.SessionActivityResponse
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.SessionActivityResponse = out
		}
	}

	return res, nil
}

// GetWebhookLogs - Get webhook logs
// Returns the webhook logs for your account. Use the available query parameters to filter the listing of activity that is returned.
//
// **NOTE:** Total Results will always return as 0 to avoid querying data you're not using and stay as performant as possible.
//
// **Event Types**
//
// Webhooks are triggered by enabled event types for your account, which are configured on the [developer settings page](/docs/account/09-settings/06-developer-settings). Not all event types may be allowed for your account type. These are the valid options for event types:
//
// - resources.upload
// - resources.download
// - resources.delete
// - resources.createFolder
// - resources.rename
// - resources.move
// - resources.copy
// - resources.compress
// - resources.extract
// - shares.formSubmit
func (s *activity) GetWebhookLogs(ctx context.Context, request operations.GetWebhookLogsRequest) (*operations.GetWebhookLogsResponse, error) {
	baseURL := s.serverURL
	url := strings.TrimSuffix(baseURL, "/") + "/activity/webhooks"

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	utils.PopulateHeaders(ctx, req, request.Headers)

	if err := utils.PopulateQueryParams(ctx, req, request.QueryParams, nil); err != nil {
		return nil, fmt.Errorf("error populating query params: %w", err)
	}

	client := s.defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GetWebhookLogsResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.WebhookActivityResponse
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.WebhookActivityResponse = out
		}
	}

	return res, nil
}
