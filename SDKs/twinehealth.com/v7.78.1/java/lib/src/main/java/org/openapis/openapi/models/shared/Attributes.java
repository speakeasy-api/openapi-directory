/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class Attributes {
    /**
     * True if the calendar event is an all day event, false otherwise. Must be set to true for `plan-check-in` event type. If it is true, then `start_at` and `end_at` must also be set to beginning of day, except `plan-check-in` event type does not need an `end_at` date. If it is false, then `start_at` and `end_at` must be on the same day.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("all_day")
    public Boolean allDay;
    public Attributes withAllDay(Boolean allDay) {
        this.allDay = allDay;
        return this;
    }
    
    /**
     * List of attendees for the calendar event
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attendees")
    public AttributesAttendees[] attendees;
    public Attributes withAttendees(AttributesAttendees[] attendees) {
        this.attendees = attendees;
        return this;
    }
    
    /**
     * The date and time when the calendar event is marked as completed. Only valid for `plan-check-in` event type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("completed_at")
    public String completedAt;
    public Attributes withCompletedAt(String completedAt) {
        this.completedAt = completedAt;
        return this;
    }
    
    /**
     * The coach who marked the calendar event as completed. Only valid for `plan-check-in` event type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("completed_by")
    public java.util.Map<String, Object> completedBy;
    public Attributes withCompletedBy(java.util.Map<String, Object> completedBy) {
        this.completedBy = completedBy;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public Attributes withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The date and time when the calendar event ends. Not valid for `plan-check-in` event type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_at")
    public String endAt;
    public Attributes withEndAt(String endAt) {
        this.endAt = endAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    public String location;
    public Attributes withLocation(String location) {
        this.location = location;
        return this;
    }
    
    /**
     * The date and time when the calendar event starts
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_at")
    public String startAt;
    public Attributes withStartAt(String startAt) {
        this.startAt = startAt;
        return this;
    }
    
    /**
     * The time zone in which the dates for the calendar event are specified
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("time_zone")
    public String timeZone;
    public Attributes withTimeZone(String timeZone) {
        this.timeZone = timeZone;
        return this;
    }
    
    /**
     * The title of the calendar event. Must not be empty or null
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;
    public Attributes withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * The type of calendar event. Immutable after event creation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public AttributesTypeEnum type;
    public Attributes withType(AttributesTypeEnum type) {
        this.type = type;
        return this;
    }
    
}
