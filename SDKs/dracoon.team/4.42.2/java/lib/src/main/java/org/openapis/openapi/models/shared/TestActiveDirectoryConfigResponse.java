/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * TestActiveDirectoryConfigResponse - Response model for testing connection for Active Directory configuration
 */
public class TestActiveDirectoryConfigResponse {
    /**
     * Search scope of Active Directory; only users below this node can log on.
     */
    @JsonProperty("ldapUsersDomain")
    public String ldapUsersDomain;
    public TestActiveDirectoryConfigResponse withLdapUsersDomain(String ldapUsersDomain) {
        this.ldapUsersDomain = ldapUsersDomain;
        return this;
    }
    
    /**
     * Distinguished Name (DN) of Active Directory administrative account
     */
    @JsonProperty("serverAdminName")
    public String serverAdminName;
    public TestActiveDirectoryConfigResponse withServerAdminName(String serverAdminName) {
        this.serverAdminName = serverAdminName;
        return this;
    }
    
    /**
     * Password of Active Directory administrative account
     */
    @JsonProperty("serverAdminPassword")
    public String serverAdminPassword;
    public TestActiveDirectoryConfigResponse withServerAdminPassword(String serverAdminPassword) {
        this.serverAdminPassword = serverAdminPassword;
        return this;
    }
    
    /**
     * IPv4 or IPv6 address or host name
     */
    @JsonProperty("serverIp")
    public String serverIp;
    public TestActiveDirectoryConfigResponse withServerIp(String serverIp) {
        this.serverIp = serverIp;
        return this;
    }
    
    /**
     * Port
     */
    @JsonProperty("serverPort")
    public Integer serverPort;
    public TestActiveDirectoryConfigResponse withServerPort(Integer serverPort) {
        this.serverPort = serverPort;
        return this;
    }
    
    /**
     * SSL finger print of Active Directory server.
     * 
     * Mandatory for LDAPS connections.
     * 
     * Format: `Algorithm/Fingerprint`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sslFingerPrint")
    public String sslFingerPrint;
    public TestActiveDirectoryConfigResponse withSslFingerPrint(String sslFingerPrint) {
        this.sslFingerPrint = sslFingerPrint;
        return this;
    }
    
    /**
     * Determines whether LDAPS should be used instead of plain LDAP.
     */
    @JsonProperty("useLdaps")
    public Boolean useLdaps;
    public TestActiveDirectoryConfigResponse withUseLdaps(Boolean useLdaps) {
        this.useLdaps = useLdaps;
        return this;
    }
    
}
