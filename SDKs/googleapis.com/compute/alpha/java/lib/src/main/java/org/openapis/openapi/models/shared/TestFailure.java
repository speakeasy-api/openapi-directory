/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class TestFailure {
    /**
     * The actual output URL evaluated by a load balancer containing the scheme, host, path and query parameters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("actualOutputUrl")
    public String actualOutputUrl;

    public TestFailure withActualOutputUrl(String actualOutputUrl) {
        this.actualOutputUrl = actualOutputUrl;
        return this;
    }
    
    /**
     * Actual HTTP status code for rule with `urlRedirect` calculated by load balancer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("actualRedirectResponseCode")
    public Integer actualRedirectResponseCode;

    public TestFailure withActualRedirectResponseCode(Integer actualRedirectResponseCode) {
        this.actualRedirectResponseCode = actualRedirectResponseCode;
        return this;
    }
    
    /**
     * BackendService or BackendBucket returned by load balancer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("actualService")
    public String actualService;

    public TestFailure withActualService(String actualService) {
        this.actualService = actualService;
        return this;
    }
    
    /**
     * The expected output URL evaluated by a load balancer containing the scheme, host, path and query parameters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expectedOutputUrl")
    public String expectedOutputUrl;

    public TestFailure withExpectedOutputUrl(String expectedOutputUrl) {
        this.expectedOutputUrl = expectedOutputUrl;
        return this;
    }
    
    /**
     * Expected HTTP status code for rule with `urlRedirect` calculated by load balancer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expectedRedirectResponseCode")
    public Integer expectedRedirectResponseCode;

    public TestFailure withExpectedRedirectResponseCode(Integer expectedRedirectResponseCode) {
        this.expectedRedirectResponseCode = expectedRedirectResponseCode;
        return this;
    }
    
    /**
     * Expected BackendService or BackendBucket resource the given URL should be mapped to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expectedService")
    public String expectedService;

    public TestFailure withExpectedService(String expectedService) {
        this.expectedService = expectedService;
        return this;
    }
    
    /**
     * HTTP headers of the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("headers")
    public UrlMapTestHeader[] headers;

    public TestFailure withHeaders(UrlMapTestHeader[] headers) {
        this.headers = headers;
        return this;
    }
    
    /**
     * Host portion of the URL.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("host")
    public String host;

    public TestFailure withHost(String host) {
        this.host = host;
        return this;
    }
    
    /**
     * Path portion including query parameters in the URL.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("path")
    public String path;

    public TestFailure withPath(String path) {
        this.path = path;
        return this;
    }
    
    public TestFailure(){}
}
