"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import error400_ng_sbs as shared_error400_ng_sbs
from ..shared import error400_sbs as shared_error400_sbs
from ..shared import error401_ng_sbs as shared_error401_ng_sbs
from ..shared import error401_sbs as shared_error401_sbs
from ..shared import error403_ng_sbs as shared_error403_ng_sbs
from ..shared import error403_sbs as shared_error403_sbs
from ..shared import error404_ng_sbs as shared_error404_ng_sbs
from ..shared import error404_sbs as shared_error404_sbs
from ..shared import error405_ng_sbs as shared_error405_ng_sbs
from ..shared import error405_sbs as shared_error405_sbs
from ..shared import error409_ng_sbs as shared_error409_ng_sbs
from ..shared import error409_sbs as shared_error409_sbs
from ..shared import psu_http_method_enum as shared_psu_http_method_enum
from ..shared import startscaprocessresponse as shared_startscaprocessresponse
from typing import Any, Optional


@dataclasses.dataclass
class StartSigningBasketAuthorisationSecurity:
    
    bearer_auth_o_auth: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'bearer', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class StartSigningBasketAuthorisationRequest:
    
    basket_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'basketId', 'style': 'simple', 'explode': False }})
    r"""This identification of the corresponding signing basket object."""  
    x_request_id: str = dataclasses.field(metadata={'header': { 'field_name': 'X-Request-ID', 'style': 'simple', 'explode': False }})
    r"""ID of the request, unique to the call, as determined by the initiating party."""  
    digest: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'Digest', 'style': 'simple', 'explode': False }})
    r"""Is contained if and only if the \\"Signature\\" element is contained in the header of the request."""  
    psu_accept: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-Accept', 'style': 'simple', 'explode': False }})
    r"""The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available."""  
    psu_accept_charset: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-Accept-Charset', 'style': 'simple', 'explode': False }})
    r"""The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available."""  
    psu_accept_encoding: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-Accept-Encoding', 'style': 'simple', 'explode': False }})
    r"""The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available."""  
    psu_accept_language: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-Accept-Language', 'style': 'simple', 'explode': False }})
    r"""The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available."""  
    psu_corporate_id: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-Corporate-ID', 'style': 'simple', 'explode': False }})
    r"""Might be mandated in the ASPSP's documentation. Only used in a corporate context."""  
    psu_corporate_id_type: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-Corporate-ID-Type', 'style': 'simple', 'explode': False }})
    r"""Might be mandated in the ASPSP's documentation. Only used in a corporate context."""  
    psu_device_id: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-Device-ID', 'style': 'simple', 'explode': False }})
    r"""UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available.
    UUID identifies either a device or a device dependant application installation.
    In case of an installation identification this ID needs to be unaltered until removal from device.
    """  
    psu_geo_location: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-Geo-Location', 'style': 'simple', 'explode': False }})
    r"""The forwarded Geo Location of the corresponding http request between PSU and TPP if available."""  
    psu_http_method: Optional[shared_psu_http_method_enum.PSUHTTPMethodEnum] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-Http-Method', 'style': 'simple', 'explode': False }})
    r"""HTTP method used at the PSU ? TPP interface, if available.
    Valid values are:
    * GET
    * POST
    * PUT
    * PATCH
    * DELETE
    """  
    psu_id: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-ID', 'style': 'simple', 'explode': False }})
    r"""Client ID of the PSU in the ASPSP client interface.
    
    Might be mandated in the ASPSP's documentation.
    
    It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding
    AIS service in the same session.
    In this case the ASPSP might check whether PSU-ID and token match,
    according to ASPSP documentation.
    """  
    psu_id_type: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-ID-Type', 'style': 'simple', 'explode': False }})
    r"""Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.
    
    In this case, the mean and use are then defined in the ASPSP's documentation.
    """  
    psu_ip_address: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-IP-Address', 'style': 'simple', 'explode': False }})
    r"""The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP."""  
    psu_ip_port: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-IP-Port', 'style': 'simple', 'explode': False }})
    r"""The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available."""  
    psu_user_agent: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-User-Agent', 'style': 'simple', 'explode': False }})
    r"""The forwarded Agent header field of the HTTP request between PSU and TPP, if available."""  
    request_body: Optional[Any] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'Signature', 'style': 'simple', 'explode': False }})
    r"""A signature of the request by the TPP on application level. This might be mandated by ASPSP."""  
    tpp_nok_redirect_uri: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'TPP-Nok-Redirect-URI', 'style': 'simple', 'explode': False }})
    r"""If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case
    of a negative result of the redirect SCA method. This might be ignored by the ASPSP.
    """  
    tpp_notification_content_preferred: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'TPP-Notification-Content-Preferred', 'style': 'simple', 'explode': False }})
    r"""The string has the form
    
    status=X1, ..., Xn
    
    where Xi is one of the constants SCA, PROCESS, LAST and where constants are not
    repeated.
    The usage of the constants supports the of following semantics:
    
      SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.
    
      PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.
      LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.
    
    This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP.
    """  
    tpp_notification_uri: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'TPP-Notification-URI', 'style': 'simple', 'explode': False }})
    r"""URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent.
    This header field may by ignored by the ASPSP.
    
    For security reasons, it shall be ensured that the TPP-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:
    
    URIs which are provided by TPPs in TPP-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.
    
    Wildcard definitions shall be taken into account for compliance checks by the ASPSP.
     ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply.
    """  
    tpp_redirect_preferred: Optional[bool] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'TPP-Redirect-Preferred', 'style': 'simple', 'explode': False }})
    r"""If it equals \\"true\\", the TPP prefers a redirect over an embedded SCA approach.
    If it equals \"false\", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled
    SCA approach, depending on the choice of the SCA procedure by the TPP/PSU.
    If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the
    TPP/PSU.
    """  
    tpp_redirect_uri: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'TPP-Redirect-URI', 'style': 'simple', 'explode': False }})
    r"""URI of the TPP, where the transaction flow shall be redirected to after a Redirect.
    
    Mandated for the Redirect SCA Approach, specifically
    when TPP-Redirect-Preferred equals \"true\".
    It is recommended to always use this header field.
    
    **Remark for Future:**
    This field might be changed to mandatory in the next version of the specification.
    """  
    tpp_signature_certificate: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'TPP-Signature-Certificate', 'style': 'simple', 'explode': False }})
    r"""The certificate used for signing the request, in base64 encoding.
    Must be contained if a signature is contained.
    """  
    

@dataclasses.dataclass
class StartSigningBasketAuthorisationResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    error400_ng_sbs: Optional[shared_error400_ng_sbs.Error400NGSBS] = dataclasses.field(default=None)
    r"""Bad Request"""  
    error400_sbs: Optional[shared_error400_sbs.Error400SBS] = dataclasses.field(default=None)
    r"""Bad Request"""  
    error401_ng_sbs: Optional[shared_error401_ng_sbs.Error401NGSBS] = dataclasses.field(default=None)
    r"""Unauthorized"""  
    error401_sbs: Optional[shared_error401_sbs.Error401SBS] = dataclasses.field(default=None)
    r"""Unauthorized"""  
    error403_ng_sbs: Optional[shared_error403_ng_sbs.Error403NGSBS] = dataclasses.field(default=None)
    r"""Forbidden"""  
    error403_sbs: Optional[shared_error403_sbs.Error403SBS] = dataclasses.field(default=None)
    r"""Forbidden"""  
    error404_ng_sbs: Optional[shared_error404_ng_sbs.Error404NGSBS] = dataclasses.field(default=None)
    r"""Not found"""  
    error404_sbs: Optional[shared_error404_sbs.Error404SBS] = dataclasses.field(default=None)
    r"""Not found"""  
    error405_ng_sbs: Optional[shared_error405_ng_sbs.Error405NGSBS] = dataclasses.field(default=None)
    r"""Method Not Allowed"""  
    error405_sbs: Optional[shared_error405_sbs.Error405SBS] = dataclasses.field(default=None)
    r"""Method Not Allowed"""  
    error409_ng_sbs: Optional[shared_error409_ng_sbs.Error409NGSBS] = dataclasses.field(default=None)
    r"""Conflict"""  
    error409_sbs: Optional[shared_error409_sbs.Error409SBS] = dataclasses.field(default=None)
    r"""Conflict"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    start_scaprocess_response: Optional[shared_startscaprocessresponse.StartScaprocessResponse] = dataclasses.field(default=None)
    r"""Created"""  
    