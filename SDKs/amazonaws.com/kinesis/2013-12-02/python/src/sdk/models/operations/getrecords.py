"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import getrecordsinput as shared_getrecordsinput
from ..shared import getrecordsoutput as shared_getrecordsoutput
from enum import Enum
from typing import Any, Optional

class GetRecordsXAmzTargetEnum(str, Enum):
    KINESIS_20131202_GET_RECORDS = 'Kinesis_20131202.GetRecords'


@dataclasses.dataclass
class GetRecordsRequest:
    
    get_records_input: shared_getrecordsinput.GetRecordsInput = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_target: GetRecordsXAmzTargetEnum = dataclasses.field(metadata={'header': { 'field_name': 'X-Amz-Target', 'style': 'simple', 'explode': False }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GetRecordsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    expired_iterator_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ExpiredIteratorException"""  
    get_records_output: Optional[shared_getrecordsoutput.GetRecordsOutput] = dataclasses.field(default=None)
    r"""Success"""  
    invalid_argument_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidArgumentException"""  
    kms_access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""KMSAccessDeniedException"""  
    kms_disabled_exception: Optional[Any] = dataclasses.field(default=None)
    r"""KMSDisabledException"""  
    kms_invalid_state_exception: Optional[Any] = dataclasses.field(default=None)
    r"""KMSInvalidStateException"""  
    kms_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""KMSNotFoundException"""  
    kms_opt_in_required: Optional[Any] = dataclasses.field(default=None)
    r"""KMSOptInRequired"""  
    kms_throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""KMSThrottlingException"""  
    provisioned_throughput_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ProvisionedThroughputExceededException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    