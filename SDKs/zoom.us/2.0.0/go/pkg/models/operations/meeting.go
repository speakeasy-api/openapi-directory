// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

type MeetingSecurity struct {
	OAuth shared.SchemeOAuth `security:"scheme,type=oauth2"`
}

type MeetingPathParams struct {
	// The meeting ID in **long** format. The data type of this field is "long"(represented as int64 in JSON).
	//
	// While storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits.
	MeetingID int64 `pathParam:"style=simple,explode=false,name=meetingId"`
}

type MeetingQueryParams struct {
	// Meeting Occurrence ID. Provide this field to view meeting details of a particular occurrence of the [recurring meeting](https://support.zoom.us/hc/en-us/articles/214973206-Scheduling-Recurring-Meetings).
	OccurrenceID *string `queryParam:"style=form,explode=true,name=occurrence_id"`
	// Set the value of this field to `true` if you would like to view meeting details of all previous occurrences of a [recurring meeting](https://support.zoom.us/hc/en-us/articles/214973206-Scheduling-Recurring-Meetings).
	ShowPreviousOccurrences *bool `queryParam:"style=form,explode=true,name=show_previous_occurrences"`
}

type MeetingRequest struct {
	PathParams  MeetingPathParams
	QueryParams MeetingQueryParams
	Security    MeetingSecurity
}

// Meeting200ApplicationXMLOccurrences - Occurence object. This object is only returned for Recurring Webinars.
type Meeting200ApplicationXMLOccurrences struct {
	// Duration.
	Duration *int64
	// Occurrence ID: Unique Identifier that identifies an occurrence of a recurring webinar. [Recurring webinars](https://support.zoom.us/hc/en-us/articles/216354763-How-to-Schedule-A-Recurring-Webinar) can have a maximum of 50 occurrences.
	OccurrenceID *string
	// Start time.
	StartTime *time.Time
	// Occurrence status.
	Status *string
}

// Meeting200ApplicationXMLRecurrenceMonthlyWeekEnum - Use this field **only if you're scheduling a recurring meeting of type** `3` to state the week of the month when the meeting should recur. If you use this field, **you must also use the `monthly_week_day` field to state the day of the week when the meeting should recur.** <br>`-1` - Last week of the month.<br>`1` - First week of the month.<br>`2` - Second week of the month.<br>`3` - Third week of the month.<br>`4` - Fourth week of the month.
type Meeting200ApplicationXMLRecurrenceMonthlyWeekEnum string

const (
	Meeting200ApplicationXMLRecurrenceMonthlyWeekEnumMinus1 Meeting200ApplicationXMLRecurrenceMonthlyWeekEnum = "-1"
	Meeting200ApplicationXMLRecurrenceMonthlyWeekEnumOne    Meeting200ApplicationXMLRecurrenceMonthlyWeekEnum = "1"
	Meeting200ApplicationXMLRecurrenceMonthlyWeekEnumTwo    Meeting200ApplicationXMLRecurrenceMonthlyWeekEnum = "2"
	Meeting200ApplicationXMLRecurrenceMonthlyWeekEnumThree  Meeting200ApplicationXMLRecurrenceMonthlyWeekEnum = "3"
	Meeting200ApplicationXMLRecurrenceMonthlyWeekEnumFour   Meeting200ApplicationXMLRecurrenceMonthlyWeekEnum = "4"
)

func (e *Meeting200ApplicationXMLRecurrenceMonthlyWeekEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "-1":
		fallthrough
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		*e = Meeting200ApplicationXMLRecurrenceMonthlyWeekEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Meeting200ApplicationXMLRecurrenceMonthlyWeekEnum: %s", s)
	}
}

// Meeting200ApplicationXMLRecurrenceMonthlyWeekDayEnum - Use this field **only if you're scheduling a recurring meeting of type** `3` to state a specific day in a week when the monthly meeting should recur. To use this field, you must also use the `monthly_week` field.
//
// <br>`1` - Sunday.<br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` - Thursday.<br>`6` - Friday.<br>`7` - Saturday.
type Meeting200ApplicationXMLRecurrenceMonthlyWeekDayEnum string

const (
	Meeting200ApplicationXMLRecurrenceMonthlyWeekDayEnumOne   Meeting200ApplicationXMLRecurrenceMonthlyWeekDayEnum = "1"
	Meeting200ApplicationXMLRecurrenceMonthlyWeekDayEnumTwo   Meeting200ApplicationXMLRecurrenceMonthlyWeekDayEnum = "2"
	Meeting200ApplicationXMLRecurrenceMonthlyWeekDayEnumThree Meeting200ApplicationXMLRecurrenceMonthlyWeekDayEnum = "3"
	Meeting200ApplicationXMLRecurrenceMonthlyWeekDayEnumFour  Meeting200ApplicationXMLRecurrenceMonthlyWeekDayEnum = "4"
	Meeting200ApplicationXMLRecurrenceMonthlyWeekDayEnumFive  Meeting200ApplicationXMLRecurrenceMonthlyWeekDayEnum = "5"
	Meeting200ApplicationXMLRecurrenceMonthlyWeekDayEnumSix   Meeting200ApplicationXMLRecurrenceMonthlyWeekDayEnum = "6"
	Meeting200ApplicationXMLRecurrenceMonthlyWeekDayEnumSeven Meeting200ApplicationXMLRecurrenceMonthlyWeekDayEnum = "7"
)

func (e *Meeting200ApplicationXMLRecurrenceMonthlyWeekDayEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		*e = Meeting200ApplicationXMLRecurrenceMonthlyWeekDayEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Meeting200ApplicationXMLRecurrenceMonthlyWeekDayEnum: %s", s)
	}
}

// Meeting200ApplicationXMLRecurrenceTypeEnum - Recurrence meeting types:<br>`1` - Daily.<br>`2` - Weekly.<br>`3` - Monthly.
type Meeting200ApplicationXMLRecurrenceTypeEnum string

const (
	Meeting200ApplicationXMLRecurrenceTypeEnumOne   Meeting200ApplicationXMLRecurrenceTypeEnum = "1"
	Meeting200ApplicationXMLRecurrenceTypeEnumTwo   Meeting200ApplicationXMLRecurrenceTypeEnum = "2"
	Meeting200ApplicationXMLRecurrenceTypeEnumThree Meeting200ApplicationXMLRecurrenceTypeEnum = "3"
)

func (e *Meeting200ApplicationXMLRecurrenceTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		*e = Meeting200ApplicationXMLRecurrenceTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Meeting200ApplicationXMLRecurrenceTypeEnum: %s", s)
	}
}

// Meeting200ApplicationXMLRecurrenceWeeklyDaysEnum - This field is required **if you're scheduling a recurring meeting of type** `2` to state which day(s) of the week the meeting should repeat. <br> <br> The value for this field could be a number between `1` to `7` in string format. For instance, if the meeting should recur on Sunday, provide `"1"` as the value of this field.<br><br> **Note:** If you would like the meeting to occur on multiple days of a week, you should provide comma separated values for this field. For instance, if the meeting should recur on Sundays and Tuesdays provide `"1,3"` as the value of this field.
//
//	<br>`1`  - Sunday. <br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` -  Thursday.<br>`6` - Friday.<br>`7` - Saturday.
type Meeting200ApplicationXMLRecurrenceWeeklyDaysEnum string

const (
	Meeting200ApplicationXMLRecurrenceWeeklyDaysEnumOne   Meeting200ApplicationXMLRecurrenceWeeklyDaysEnum = "1"
	Meeting200ApplicationXMLRecurrenceWeeklyDaysEnumTwo   Meeting200ApplicationXMLRecurrenceWeeklyDaysEnum = "2"
	Meeting200ApplicationXMLRecurrenceWeeklyDaysEnumThree Meeting200ApplicationXMLRecurrenceWeeklyDaysEnum = "3"
	Meeting200ApplicationXMLRecurrenceWeeklyDaysEnumFour  Meeting200ApplicationXMLRecurrenceWeeklyDaysEnum = "4"
	Meeting200ApplicationXMLRecurrenceWeeklyDaysEnumFive  Meeting200ApplicationXMLRecurrenceWeeklyDaysEnum = "5"
	Meeting200ApplicationXMLRecurrenceWeeklyDaysEnumSix   Meeting200ApplicationXMLRecurrenceWeeklyDaysEnum = "6"
	Meeting200ApplicationXMLRecurrenceWeeklyDaysEnumSeven Meeting200ApplicationXMLRecurrenceWeeklyDaysEnum = "7"
)

func (e *Meeting200ApplicationXMLRecurrenceWeeklyDaysEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		*e = Meeting200ApplicationXMLRecurrenceWeeklyDaysEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Meeting200ApplicationXMLRecurrenceWeeklyDaysEnum: %s", s)
	}
}

// Meeting200ApplicationXMLRecurrence - Recurrence object. Use this object only for a meeting with type `8` i.e., a recurring meeting with fixed time.
type Meeting200ApplicationXMLRecurrence struct {
	// Select the final date on which the meeting will recur before it is canceled. Should be in UTC time, such as 2017-11-25T12:00:00Z. (Cannot be used with "end_times".)
	EndDateTime *time.Time
	// Select how many times the meeting should recur before it is canceled. (Cannot be used with "end_date_time".)
	EndTimes *int64
	// Use this field **only if you're scheduling a recurring meeting of type** `3` to state which day in a month, the meeting should recur. The value range is from 1 to 31.
	//
	// For instance, if you would like the meeting to recur on 23rd of each month, provide `23` as the value of this field and `1` as the value of the `repeat_interval` field. Instead, if you would like the meeting to recur every three months, on 23rd of the month, change the value of the `repeat_interval` field to `3`.
	MonthlyDay *int64
	// Use this field **only if you're scheduling a recurring meeting of type** `3` to state the week of the month when the meeting should recur. If you use this field, **you must also use the `monthly_week_day` field to state the day of the week when the meeting should recur.** <br>`-1` - Last week of the month.<br>`1` - First week of the month.<br>`2` - Second week of the month.<br>`3` - Third week of the month.<br>`4` - Fourth week of the month.
	MonthlyWeek *Meeting200ApplicationXMLRecurrenceMonthlyWeekEnum
	// Use this field **only if you're scheduling a recurring meeting of type** `3` to state a specific day in a week when the monthly meeting should recur. To use this field, you must also use the `monthly_week` field.
	//
	// <br>`1` - Sunday.<br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` - Thursday.<br>`6` - Friday.<br>`7` - Saturday.
	MonthlyWeekDay *Meeting200ApplicationXMLRecurrenceMonthlyWeekDayEnum
	// Define the interval at which the meeting should recur. For instance, if you would like to schedule a meeting that recurs every two months, you must set the value of this field as `2` and the value of the `type` parameter as `3`.
	//
	// For a daily meeting, the maximum interval you can set is `90` days. For a weekly meeting the maximum interval that you can set is  of `12` weeks. For a monthly meeting, there is a maximum of `3` months.
	//
	//
	RepeatInterval *int64
	// Recurrence meeting types:<br>`1` - Daily.<br>`2` - Weekly.<br>`3` - Monthly.
	Type Meeting200ApplicationXMLRecurrenceTypeEnum
	// This field is required **if you're scheduling a recurring meeting of type** `2` to state which day(s) of the week the meeting should repeat. <br> <br> The value for this field could be a number between `1` to `7` in string format. For instance, if the meeting should recur on Sunday, provide `"1"` as the value of this field.<br><br> **Note:** If you would like the meeting to occur on multiple days of a week, you should provide comma separated values for this field. For instance, if the meeting should recur on Sundays and Tuesdays provide `"1,3"` as the value of this field.
	//
	//  <br>`1`  - Sunday. <br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` -  Thursday.<br>`6` - Friday.<br>`7` - Saturday.
	WeeklyDays *Meeting200ApplicationXMLRecurrenceWeeklyDaysEnum
}

// Meeting200ApplicationXMLSettingsApprovalTypeEnum - Enable registration and set approval for the registration. Note that this feature requires the host to be of **Licensed** user type. **Registration cannot be enabled for a basic user.** <br><br>
//
// `0` - Automatically approve.<br>`1` - Manually approve.<br>`2` - No registration required.
type Meeting200ApplicationXMLSettingsApprovalTypeEnum string

const (
	Meeting200ApplicationXMLSettingsApprovalTypeEnumZero Meeting200ApplicationXMLSettingsApprovalTypeEnum = "0"
	Meeting200ApplicationXMLSettingsApprovalTypeEnumOne  Meeting200ApplicationXMLSettingsApprovalTypeEnum = "1"
	Meeting200ApplicationXMLSettingsApprovalTypeEnumTwo  Meeting200ApplicationXMLSettingsApprovalTypeEnum = "2"
)

func (e *Meeting200ApplicationXMLSettingsApprovalTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "2":
		*e = Meeting200ApplicationXMLSettingsApprovalTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Meeting200ApplicationXMLSettingsApprovalTypeEnum: %s", s)
	}
}

// Meeting200ApplicationXMLSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum - Specify whether to allow users from specific regions to join this meeting; or block users from specific regions from joining this meeting. <br><br>
// `approve`: Allow users from specific regions/countries to join this meeting. If this setting is selected, the approved regions/countries must be included in the `approved_list`.<br><br>
// `deny`: Block users from specific regions/countries from joining this meeting. If this setting is selected, the approved regions/countries must be included in the `denied_list`
type Meeting200ApplicationXMLSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum string

const (
	Meeting200ApplicationXMLSettingsApprovedOrDeniedCountriesOrRegionsMethodEnumApprove Meeting200ApplicationXMLSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum = "approve"
	Meeting200ApplicationXMLSettingsApprovedOrDeniedCountriesOrRegionsMethodEnumDeny    Meeting200ApplicationXMLSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum = "deny"
)

func (e *Meeting200ApplicationXMLSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "approve":
		fallthrough
	case "deny":
		*e = Meeting200ApplicationXMLSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Meeting200ApplicationXMLSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum: %s", s)
	}
}

// Meeting200ApplicationXMLSettingsApprovedOrDeniedCountriesOrRegions - Approve or block users from specific regions/countries from joining this meeting.
type Meeting200ApplicationXMLSettingsApprovedOrDeniedCountriesOrRegions struct {
	// List of countries/regions from where participants can join this meeting.
	ApprovedList []string
	// List of countries/regions from where participants can not join this meeting.
	DeniedList []string
	// `true`: Setting enabled to either allow users or block users from specific regions to join your meetings. <br>
	//
	// `false`: Setting disabled.
	Enable *bool
	// Specify whether to allow users from specific regions to join this meeting; or block users from specific regions from joining this meeting. <br><br>
	// `approve`: Allow users from specific regions/countries to join this meeting. If this setting is selected, the approved regions/countries must be included in the `approved_list`.<br><br>
	// `deny`: Block users from specific regions/countries from joining this meeting. If this setting is selected, the approved regions/countries must be included in the `denied_list`
	Method *Meeting200ApplicationXMLSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum
}

// Meeting200ApplicationXMLSettingsAudioEnum - Determine how participants can join the audio portion of the meeting.<br>`both` - Both Telephony and VoIP.<br>`telephony` - Telephony only.<br>`voip` - VoIP only.
type Meeting200ApplicationXMLSettingsAudioEnum string

const (
	Meeting200ApplicationXMLSettingsAudioEnumBoth      Meeting200ApplicationXMLSettingsAudioEnum = "both"
	Meeting200ApplicationXMLSettingsAudioEnumTelephony Meeting200ApplicationXMLSettingsAudioEnum = "telephony"
	Meeting200ApplicationXMLSettingsAudioEnumVoip      Meeting200ApplicationXMLSettingsAudioEnum = "voip"
)

func (e *Meeting200ApplicationXMLSettingsAudioEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "both":
		fallthrough
	case "telephony":
		fallthrough
	case "voip":
		*e = Meeting200ApplicationXMLSettingsAudioEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Meeting200ApplicationXMLSettingsAudioEnum: %s", s)
	}
}

type Meeting200ApplicationXMLSettingsAuthenticationException struct {
	// Email address of the participant.
	Email *string
	// Name of the participant.
	Name *string
}

// Meeting200ApplicationXMLSettingsAutoRecordingEnum - Automatic recording:<br>`local` - Record on local.<br>`cloud` -  Record on cloud.<br>`none` - Disabled.
type Meeting200ApplicationXMLSettingsAutoRecordingEnum string

const (
	Meeting200ApplicationXMLSettingsAutoRecordingEnumLocal Meeting200ApplicationXMLSettingsAutoRecordingEnum = "local"
	Meeting200ApplicationXMLSettingsAutoRecordingEnumCloud Meeting200ApplicationXMLSettingsAutoRecordingEnum = "cloud"
	Meeting200ApplicationXMLSettingsAutoRecordingEnumNone  Meeting200ApplicationXMLSettingsAutoRecordingEnum = "none"
)

func (e *Meeting200ApplicationXMLSettingsAutoRecordingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "local":
		fallthrough
	case "cloud":
		fallthrough
	case "none":
		*e = Meeting200ApplicationXMLSettingsAutoRecordingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Meeting200ApplicationXMLSettingsAutoRecordingEnum: %s", s)
	}
}

type Meeting200ApplicationXMLSettingsBreakoutRoomRooms struct {
	// Name of the breakout room.
	Name *string
	// Email addresses of the participants who are to be assigned to the breakout room.
	Participants []string
}

// Meeting200ApplicationXMLSettingsBreakoutRoom - Setting to [pre-assign breakout rooms](https://support.zoom.us/hc/en-us/articles/360032752671-Pre-assigning-participants-to-breakout-rooms#h_36f71353-4190-48a2-b999-ca129861c1f4).
type Meeting200ApplicationXMLSettingsBreakoutRoom struct {
	// Set the value of this field to `true` if you would like to enable the [breakout room pre-assign](https://support.zoom.us/hc/en-us/articles/360032752671-Pre-assigning-participants-to-breakout-rooms#h_36f71353-4190-48a2-b999-ca129861c1f4) option.
	Enable *bool
	// Create room(s).
	Rooms []Meeting200ApplicationXMLSettingsBreakoutRoomRooms
}

type Meeting200ApplicationXMLSettingsCustomKeys struct {
	// Custom key associated with the user.
	Key *string
	// Value of the custom key associated with the user.
	Value *string
}

// Meeting200ApplicationXMLSettingsEncryptionTypeEnum - Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be **automatically disabled**. <br><br>The value of this field can be one of the following:<br>
// `enhanced_encryption`: Enhanced encryption. Encryption is stored in the cloud if you enable this option. <br>
//
// `e2ee`: [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the following features: join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.
type Meeting200ApplicationXMLSettingsEncryptionTypeEnum string

const (
	Meeting200ApplicationXMLSettingsEncryptionTypeEnumEnhancedEncryption Meeting200ApplicationXMLSettingsEncryptionTypeEnum = "enhanced_encryption"
	Meeting200ApplicationXMLSettingsEncryptionTypeEnumE2ee               Meeting200ApplicationXMLSettingsEncryptionTypeEnum = "e2ee"
)

func (e *Meeting200ApplicationXMLSettingsEncryptionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "enhanced_encryption":
		fallthrough
	case "e2ee":
		*e = Meeting200ApplicationXMLSettingsEncryptionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Meeting200ApplicationXMLSettingsEncryptionTypeEnum: %s", s)
	}
}

// Meeting200ApplicationXMLSettingsGlobalDialInNumbersTypeEnum - Type of number.
type Meeting200ApplicationXMLSettingsGlobalDialInNumbersTypeEnum string

const (
	Meeting200ApplicationXMLSettingsGlobalDialInNumbersTypeEnumToll     Meeting200ApplicationXMLSettingsGlobalDialInNumbersTypeEnum = "toll"
	Meeting200ApplicationXMLSettingsGlobalDialInNumbersTypeEnumTollfree Meeting200ApplicationXMLSettingsGlobalDialInNumbersTypeEnum = "tollfree"
)

func (e *Meeting200ApplicationXMLSettingsGlobalDialInNumbersTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "toll":
		fallthrough
	case "tollfree":
		*e = Meeting200ApplicationXMLSettingsGlobalDialInNumbersTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Meeting200ApplicationXMLSettingsGlobalDialInNumbersTypeEnum: %s", s)
	}
}

type Meeting200ApplicationXMLSettingsGlobalDialInNumbers struct {
	// City of the number, if any. For example, Chicago.
	City *string
	// Country code. For example, BR.
	Country *string
	// Full name of country. For example, Brazil.
	CountryName *string
	// Phone number. For example, +1 2332357613.
	Number *string
	// Type of number.
	Type *Meeting200ApplicationXMLSettingsGlobalDialInNumbersTypeEnum
}

// Meeting200ApplicationXMLSettingsJbhTimeEnum - If the value of "join_before_host" field is set to true, this field can be used to indicate time limits within which a participant may join a meeting before a host. The value of this field can be one of the following:
//
// *  `0`: Allow participant to join anytime.
// *  `5`: Allow participant to join 5 minutes before meeting start time.
//   - `10`: Allow participant to join 10 minutes before meeting start time.
type Meeting200ApplicationXMLSettingsJbhTimeEnum string

const (
	Meeting200ApplicationXMLSettingsJbhTimeEnumZero Meeting200ApplicationXMLSettingsJbhTimeEnum = "0"
	Meeting200ApplicationXMLSettingsJbhTimeEnumFive Meeting200ApplicationXMLSettingsJbhTimeEnum = "5"
	Meeting200ApplicationXMLSettingsJbhTimeEnumTen  Meeting200ApplicationXMLSettingsJbhTimeEnum = "10"
)

func (e *Meeting200ApplicationXMLSettingsJbhTimeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "5":
		fallthrough
	case "10":
		*e = Meeting200ApplicationXMLSettingsJbhTimeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Meeting200ApplicationXMLSettingsJbhTimeEnum: %s", s)
	}
}

type Meeting200ApplicationXMLSettingsLanguageInterpretationInterpreters struct {
	// Email address of the interpreter.
	Email *string
	// Languages for interpretation. The string must contain two [country Ids](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries) separated by a comma.
	//
	// For example, if the language is to be interpreted from English to Chinese, the value of this field should be "US,CN".
	Languages *string
}

type Meeting200ApplicationXMLSettingsLanguageInterpretation struct {
	Enable *bool
	// Information associated with the interpreter.
	Interpreters []Meeting200ApplicationXMLSettingsLanguageInterpretationInterpreters
}

// Meeting200ApplicationXMLSettingsRegistrationTypeEnum - Registration type. Used for recurring meeting with fixed time only. <br>`1` Attendees register once and can attend any of the occurrences.<br>`2` Attendees need to register for each occurrence to attend.<br>`3` Attendees register once and can choose one or more occurrences to attend.
type Meeting200ApplicationXMLSettingsRegistrationTypeEnum string

const (
	Meeting200ApplicationXMLSettingsRegistrationTypeEnumOne   Meeting200ApplicationXMLSettingsRegistrationTypeEnum = "1"
	Meeting200ApplicationXMLSettingsRegistrationTypeEnumTwo   Meeting200ApplicationXMLSettingsRegistrationTypeEnum = "2"
	Meeting200ApplicationXMLSettingsRegistrationTypeEnumThree Meeting200ApplicationXMLSettingsRegistrationTypeEnum = "3"
)

func (e *Meeting200ApplicationXMLSettingsRegistrationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		*e = Meeting200ApplicationXMLSettingsRegistrationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Meeting200ApplicationXMLSettingsRegistrationTypeEnum: %s", s)
	}
}

// Meeting200ApplicationXMLSettings - Meeting settings.
type Meeting200ApplicationXMLSettings struct {
	// Allow attendees to join the meeting from multiple devices. This setting only works for meetings that require [registration](https://support.zoom.us/hc/en-us/articles/211579443-Setting-up-registration-for-a-meeting).
	AllowMultipleDevices *bool
	// Alternative host's emails or IDs: multiple values are separated by a semicolon.
	AlternativeHosts *string
	// Flag to determine whether to send email notifications to alternative hosts, default value is true.
	AlternativeHostsEmailNotification *bool
	// Enable registration and set approval for the registration. Note that this feature requires the host to be of **Licensed** user type. **Registration cannot be enabled for a basic user.** <br><br>
	//
	// `0` - Automatically approve.<br>`1` - Manually approve.<br>`2` - No registration required.
	ApprovalType *Meeting200ApplicationXMLSettingsApprovalTypeEnum
	// Approve or block users from specific regions/countries from joining this meeting.
	//
	ApprovedOrDeniedCountriesOrRegions *Meeting200ApplicationXMLSettingsApprovedOrDeniedCountriesOrRegions
	// Determine how participants can join the audio portion of the meeting.<br>`both` - Both Telephony and VoIP.<br>`telephony` - Telephony only.<br>`voip` - VoIP only.
	Audio *Meeting200ApplicationXMLSettingsAudioEnum
	// If user has configured ["Sign Into Zoom with Specified Domains"](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f) option, this will list the domains that are authenticated.
	AuthenticationDomains *string
	// The participants added here will receive unique meeting invite links and bypass authentication.
	AuthenticationException []Meeting200ApplicationXMLSettingsAuthenticationException
	// Authentication name set in the [authentication profile](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f).
	AuthenticationName *string
	// Meeting authentication option id.
	AuthenticationOption *string
	// Automatic recording:<br>`local` - Record on local.<br>`cloud` -  Record on cloud.<br>`none` - Disabled.
	AutoRecording *Meeting200ApplicationXMLSettingsAutoRecordingEnum
	// Setting to [pre-assign breakout rooms](https://support.zoom.us/hc/en-us/articles/360032752671-Pre-assigning-participants-to-breakout-rooms#h_36f71353-4190-48a2-b999-ca129861c1f4).
	BreakoutRoom *Meeting200ApplicationXMLSettingsBreakoutRoom
	// Close registration after event date
	CloseRegistration *bool
	// Host meeting in China.
	CnMeeting *bool
	// Contact email for registration
	ContactEmail *string
	// Contact name for registration
	ContactName *string
	// Custom keys and values assigned to the meeting.
	CustomKeys []Meeting200ApplicationXMLSettingsCustomKeys
	// Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be **automatically disabled**. <br><br>The value of this field can be one of the following:<br>
	// `enhanced_encryption`: Enhanced encryption. Encryption is stored in the cloud if you enable this option. <br>
	//
	// `e2ee`: [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the following features: join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.
	EncryptionType *Meeting200ApplicationXMLSettingsEncryptionTypeEnum
	// Only signed in users can join this meeting.
	//
	// **This field is deprecated and will not be supported in the future.**  <br><br>As an alternative, use the "meeting_authentication", "authentication_option" and "authentication_domains" fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the meeting.
	EnforceLogin *bool
	// Only signed in users with specified domains can join meetings.
	//
	// **This field is deprecated and will not be supported in the future.**  <br><br>As an alternative, use the "meeting_authentication", "authentication_option" and "authentication_domains" fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the meeting.
	EnforceLoginDomains *string
	// List of global dial-in countries
	GlobalDialInCountries []string
	// Global Dial-in Countries/Regions
	GlobalDialInNumbers []Meeting200ApplicationXMLSettingsGlobalDialInNumbers
	// Start video when the host joins the meeting.
	HostVideo *bool
	// Host meeting in India.
	InMeeting *bool
	// If the value of "join_before_host" field is set to true, this field can be used to indicate time limits within which a participant may join a meeting before a host. The value of this field can be one of the following:
	//
	// *  `0`: Allow participant to join anytime.
	// *  `5`: Allow participant to join 5 minutes before meeting start time.
	//  * `10`: Allow participant to join 10 minutes before meeting start time.
	JbhTime *Meeting200ApplicationXMLSettingsJbhTimeEnum
	// Allow participants to join the meeting before the host starts the meeting. Only used for scheduled or recurring meetings.
	JoinBeforeHost         *bool
	LanguageInterpretation *Meeting200ApplicationXMLSettingsLanguageInterpretation
	// `true`- Only authenticated users can join meetings.
	MeetingAuthentication *bool
	// Mute participants upon entry.
	MuteUponEntry *bool
	// Start video when participants join the meeting.
	ParticipantVideo *bool
	// Send confirmation email to registrants upon successful registration.
	RegistrantsConfirmationEmail *bool
	// Send email notifications to registrants about approval, cancellation, denial of the registration. The value of this field must be set to true in order to use the `registrants_confirmation_email` field.
	RegistrantsEmailNotification *bool
	// Registration type. Used for recurring meeting with fixed time only. <br>`1` Attendees register once and can attend any of the occurrences.<br>`2` Attendees need to register for each occurrence to attend.<br>`3` Attendees register once and can choose one or more occurrences to attend.
	RegistrationType *Meeting200ApplicationXMLSettingsRegistrationTypeEnum
	// Show social share buttons on the meeting registration page.
	// This setting only works for meetings that require [registration](https://support.zoom.us/hc/en-us/articles/211579443-Setting-up-registration-for-a-meeting).
	ShowShareButton *bool
	// Use a personal meeting ID. Only used for scheduled meetings and recurring meetings with no fixed time.
	UsePmi *bool
	// Enable waiting room
	WaitingRoom *bool
	// Add watermark when viewing a shared screen.
	Watermark *bool
}

// Meeting200ApplicationXMLStatusEnum - Meeting status
type Meeting200ApplicationXMLStatusEnum string

const (
	Meeting200ApplicationXMLStatusEnumWaiting Meeting200ApplicationXMLStatusEnum = "waiting"
	Meeting200ApplicationXMLStatusEnumStarted Meeting200ApplicationXMLStatusEnum = "started"
)

func (e *Meeting200ApplicationXMLStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "waiting":
		fallthrough
	case "started":
		*e = Meeting200ApplicationXMLStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Meeting200ApplicationXMLStatusEnum: %s", s)
	}
}

type Meeting200ApplicationXMLTrackingFields struct {
	// Label of the tracking field.
	Field *string
	// Value for the field.
	Value *string
	// Indicates whether the [tracking field](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields) is visible in the meeting scheduling options in the Zoom Web Portal or not.
	//
	// `true`: Tracking field is visible. <br>
	//
	// `false`: Tracking field is not visible to the users when they look at the meeting details in the Zoom Web Portal but the field was used while scheduling this meeting via API. An invisible tracking field can be used by users while scheduling meetings via API only.
	Visible *bool
}

// Meeting200ApplicationXMLTypeEnum - Meeting Types:<br>`1` - Instant meeting.<br>`2` - Scheduled meeting.<br>`3` - Recurring meeting with no fixed time.<br>`4` - PMI Meeting<br>
// `8` - Recurring meeting with a fixed time.
type Meeting200ApplicationXMLTypeEnum string

const (
	Meeting200ApplicationXMLTypeEnumOne   Meeting200ApplicationXMLTypeEnum = "1"
	Meeting200ApplicationXMLTypeEnumTwo   Meeting200ApplicationXMLTypeEnum = "2"
	Meeting200ApplicationXMLTypeEnumThree Meeting200ApplicationXMLTypeEnum = "3"
	Meeting200ApplicationXMLTypeEnumEight Meeting200ApplicationXMLTypeEnum = "8"
)

func (e *Meeting200ApplicationXMLTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "8":
		*e = Meeting200ApplicationXMLTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Meeting200ApplicationXMLTypeEnum: %s", s)
	}
}

// Meeting200ApplicationXML - Meeting object.
type Meeting200ApplicationXML struct {
	// Meeting description
	Agenda *string
	// Unique identifier of the scheduler who scheduled this meeting on behalf of the host. This field is only returned if you used "schedule_for" option in the [Create a Meeting API request](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/meetingcreate).
	AssistantID *string
	// Time of creation.
	CreatedAt *time.Time
	// Meeting duration.
	Duration *int64
	// Encrypted passcode for third party endpoints (H323/SIP).
	EncryptedPassword *string
	// H.323/SIP room system passcode.
	H323Password *string
	// Email address of the meeting host.
	HostEmail *string
	// ID of the user who is set as host of meeting.
	HostID *string
	// [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "**long**" format(represented as int64 data type in JSON), also known as the meeting number.
	ID *int64
	// URL for participants to join the meeting. This URL should only be shared with users that you would like to invite for the meeting.
	JoinURL *string
	// Array of occurrence objects.
	Occurrences []Meeting200ApplicationXMLOccurrences
	// Meeting passcode.
	Password *string
	// Personal Meeting Id. Only used for scheduled meetings and recurring meetings with no fixed time.
	Pmi *int64
	// Recurrence object. Use this object only for a meeting with type `8` i.e., a recurring meeting with fixed time.
	Recurrence *Meeting200ApplicationXMLRecurrence
	// Meeting settings.
	Settings *Meeting200ApplicationXMLSettings
	// Meeting start time in GMT/UTC. Start time will not be returned if the meeting is an **instant** meeting.
	//
	StartTime *time.Time
	// <br><aside>The <code>start_url</code> of a Meeting is a URL using which a host or an alternative host can start the Meeting.
	//
	// The expiration time for the <code>start_url</code> field listed in the response of [Create a Meeting API](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/meetingcreate) is two hours for all regular users.
	//
	// For users created using the <code>custCreate</code> option via the [Create Users](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usercreate) API, the expiration time of the <code>start_url</code> field is 90 days.
	//
	// For security reasons, to retrieve the updated value for the <code>start_url</code> field programmatically (after the expiry time), you must call the [Retrieve a Meeting API](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/meeting) and refer to the value of the <code>start_url</code> field in the response.</aside><br>This URL should only be used by the host of the meeting and **should not be shared with anyone other than the host** of the meeting as anyone with this URL will be able to login to the Zoom Client as the host of the meeting.
	StartURL *string
	// Meeting status
	Status *Meeting200ApplicationXMLStatusEnum
	// Timezone to format the meeting start time on the .
	Timezone *string
	// Meeting topic.
	Topic *string
	// Tracking fields
	TrackingFields []Meeting200ApplicationXMLTrackingFields
	// Meeting Types:<br>`1` - Instant meeting.<br>`2` - Scheduled meeting.<br>`3` - Recurring meeting with no fixed time.<br>`4` - PMI Meeting<br>
	// `8` - Recurring meeting with a fixed time.
	Type *Meeting200ApplicationXMLTypeEnum
	// Unique meeting ID. Each meeting instance will generate its own Meeting UUID (i.e., after a meeting ends, a new UUID will be generated for the next instance of the meeting). You can retrieve a list of UUIDs from past meeting instances using [this API](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/pastmeetings) . Please double encode your UUID when using it for API calls if the UUID begins with a '/'or contains '//' in it.
	//
	UUID *string
}

// Meeting200ApplicationJSONOccurrences - Occurence object. This object is only returned for Recurring Webinars.
type Meeting200ApplicationJSONOccurrences struct {
	// Duration.
	Duration *int64 `json:"duration,omitempty"`
	// Occurrence ID: Unique Identifier that identifies an occurrence of a recurring webinar. [Recurring webinars](https://support.zoom.us/hc/en-us/articles/216354763-How-to-Schedule-A-Recurring-Webinar) can have a maximum of 50 occurrences.
	OccurrenceID *string `json:"occurrence_id,omitempty"`
	// Start time.
	StartTime *time.Time `json:"start_time,omitempty"`
	// Occurrence status.
	Status *string `json:"status,omitempty"`
}

// Meeting200ApplicationJSONRecurrenceMonthlyWeekEnum - Use this field **only if you're scheduling a recurring meeting of type** `3` to state the week of the month when the meeting should recur. If you use this field, **you must also use the `monthly_week_day` field to state the day of the week when the meeting should recur.** <br>`-1` - Last week of the month.<br>`1` - First week of the month.<br>`2` - Second week of the month.<br>`3` - Third week of the month.<br>`4` - Fourth week of the month.
type Meeting200ApplicationJSONRecurrenceMonthlyWeekEnum string

const (
	Meeting200ApplicationJSONRecurrenceMonthlyWeekEnumMinus1 Meeting200ApplicationJSONRecurrenceMonthlyWeekEnum = "-1"
	Meeting200ApplicationJSONRecurrenceMonthlyWeekEnumOne    Meeting200ApplicationJSONRecurrenceMonthlyWeekEnum = "1"
	Meeting200ApplicationJSONRecurrenceMonthlyWeekEnumTwo    Meeting200ApplicationJSONRecurrenceMonthlyWeekEnum = "2"
	Meeting200ApplicationJSONRecurrenceMonthlyWeekEnumThree  Meeting200ApplicationJSONRecurrenceMonthlyWeekEnum = "3"
	Meeting200ApplicationJSONRecurrenceMonthlyWeekEnumFour   Meeting200ApplicationJSONRecurrenceMonthlyWeekEnum = "4"
)

func (e *Meeting200ApplicationJSONRecurrenceMonthlyWeekEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "-1":
		fallthrough
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		*e = Meeting200ApplicationJSONRecurrenceMonthlyWeekEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Meeting200ApplicationJSONRecurrenceMonthlyWeekEnum: %s", s)
	}
}

// Meeting200ApplicationJSONRecurrenceMonthlyWeekDayEnum - Use this field **only if you're scheduling a recurring meeting of type** `3` to state a specific day in a week when the monthly meeting should recur. To use this field, you must also use the `monthly_week` field.
//
// <br>`1` - Sunday.<br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` - Thursday.<br>`6` - Friday.<br>`7` - Saturday.
type Meeting200ApplicationJSONRecurrenceMonthlyWeekDayEnum string

const (
	Meeting200ApplicationJSONRecurrenceMonthlyWeekDayEnumOne   Meeting200ApplicationJSONRecurrenceMonthlyWeekDayEnum = "1"
	Meeting200ApplicationJSONRecurrenceMonthlyWeekDayEnumTwo   Meeting200ApplicationJSONRecurrenceMonthlyWeekDayEnum = "2"
	Meeting200ApplicationJSONRecurrenceMonthlyWeekDayEnumThree Meeting200ApplicationJSONRecurrenceMonthlyWeekDayEnum = "3"
	Meeting200ApplicationJSONRecurrenceMonthlyWeekDayEnumFour  Meeting200ApplicationJSONRecurrenceMonthlyWeekDayEnum = "4"
	Meeting200ApplicationJSONRecurrenceMonthlyWeekDayEnumFive  Meeting200ApplicationJSONRecurrenceMonthlyWeekDayEnum = "5"
	Meeting200ApplicationJSONRecurrenceMonthlyWeekDayEnumSix   Meeting200ApplicationJSONRecurrenceMonthlyWeekDayEnum = "6"
	Meeting200ApplicationJSONRecurrenceMonthlyWeekDayEnumSeven Meeting200ApplicationJSONRecurrenceMonthlyWeekDayEnum = "7"
)

func (e *Meeting200ApplicationJSONRecurrenceMonthlyWeekDayEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		*e = Meeting200ApplicationJSONRecurrenceMonthlyWeekDayEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Meeting200ApplicationJSONRecurrenceMonthlyWeekDayEnum: %s", s)
	}
}

// Meeting200ApplicationJSONRecurrenceTypeEnum - Recurrence meeting types:<br>`1` - Daily.<br>`2` - Weekly.<br>`3` - Monthly.
type Meeting200ApplicationJSONRecurrenceTypeEnum string

const (
	Meeting200ApplicationJSONRecurrenceTypeEnumOne   Meeting200ApplicationJSONRecurrenceTypeEnum = "1"
	Meeting200ApplicationJSONRecurrenceTypeEnumTwo   Meeting200ApplicationJSONRecurrenceTypeEnum = "2"
	Meeting200ApplicationJSONRecurrenceTypeEnumThree Meeting200ApplicationJSONRecurrenceTypeEnum = "3"
)

func (e *Meeting200ApplicationJSONRecurrenceTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		*e = Meeting200ApplicationJSONRecurrenceTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Meeting200ApplicationJSONRecurrenceTypeEnum: %s", s)
	}
}

// Meeting200ApplicationJSONRecurrenceWeeklyDaysEnum - This field is required **if you're scheduling a recurring meeting of type** `2` to state which day(s) of the week the meeting should repeat. <br> <br> The value for this field could be a number between `1` to `7` in string format. For instance, if the meeting should recur on Sunday, provide `"1"` as the value of this field.<br><br> **Note:** If you would like the meeting to occur on multiple days of a week, you should provide comma separated values for this field. For instance, if the meeting should recur on Sundays and Tuesdays provide `"1,3"` as the value of this field.
//
//	<br>`1`  - Sunday. <br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` -  Thursday.<br>`6` - Friday.<br>`7` - Saturday.
type Meeting200ApplicationJSONRecurrenceWeeklyDaysEnum string

const (
	Meeting200ApplicationJSONRecurrenceWeeklyDaysEnumOne   Meeting200ApplicationJSONRecurrenceWeeklyDaysEnum = "1"
	Meeting200ApplicationJSONRecurrenceWeeklyDaysEnumTwo   Meeting200ApplicationJSONRecurrenceWeeklyDaysEnum = "2"
	Meeting200ApplicationJSONRecurrenceWeeklyDaysEnumThree Meeting200ApplicationJSONRecurrenceWeeklyDaysEnum = "3"
	Meeting200ApplicationJSONRecurrenceWeeklyDaysEnumFour  Meeting200ApplicationJSONRecurrenceWeeklyDaysEnum = "4"
	Meeting200ApplicationJSONRecurrenceWeeklyDaysEnumFive  Meeting200ApplicationJSONRecurrenceWeeklyDaysEnum = "5"
	Meeting200ApplicationJSONRecurrenceWeeklyDaysEnumSix   Meeting200ApplicationJSONRecurrenceWeeklyDaysEnum = "6"
	Meeting200ApplicationJSONRecurrenceWeeklyDaysEnumSeven Meeting200ApplicationJSONRecurrenceWeeklyDaysEnum = "7"
)

func (e *Meeting200ApplicationJSONRecurrenceWeeklyDaysEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		*e = Meeting200ApplicationJSONRecurrenceWeeklyDaysEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Meeting200ApplicationJSONRecurrenceWeeklyDaysEnum: %s", s)
	}
}

// Meeting200ApplicationJSONRecurrence - Recurrence object. Use this object only for a meeting with type `8` i.e., a recurring meeting with fixed time.
type Meeting200ApplicationJSONRecurrence struct {
	// Select the final date on which the meeting will recur before it is canceled. Should be in UTC time, such as 2017-11-25T12:00:00Z. (Cannot be used with "end_times".)
	EndDateTime *time.Time `json:"end_date_time,omitempty"`
	// Select how many times the meeting should recur before it is canceled. (Cannot be used with "end_date_time".)
	EndTimes *int64 `json:"end_times,omitempty"`
	// Use this field **only if you're scheduling a recurring meeting of type** `3` to state which day in a month, the meeting should recur. The value range is from 1 to 31.
	//
	// For instance, if you would like the meeting to recur on 23rd of each month, provide `23` as the value of this field and `1` as the value of the `repeat_interval` field. Instead, if you would like the meeting to recur every three months, on 23rd of the month, change the value of the `repeat_interval` field to `3`.
	MonthlyDay *int64 `json:"monthly_day,omitempty"`
	// Use this field **only if you're scheduling a recurring meeting of type** `3` to state the week of the month when the meeting should recur. If you use this field, **you must also use the `monthly_week_day` field to state the day of the week when the meeting should recur.** <br>`-1` - Last week of the month.<br>`1` - First week of the month.<br>`2` - Second week of the month.<br>`3` - Third week of the month.<br>`4` - Fourth week of the month.
	MonthlyWeek *Meeting200ApplicationJSONRecurrenceMonthlyWeekEnum `json:"monthly_week,omitempty"`
	// Use this field **only if you're scheduling a recurring meeting of type** `3` to state a specific day in a week when the monthly meeting should recur. To use this field, you must also use the `monthly_week` field.
	//
	// <br>`1` - Sunday.<br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` - Thursday.<br>`6` - Friday.<br>`7` - Saturday.
	MonthlyWeekDay *Meeting200ApplicationJSONRecurrenceMonthlyWeekDayEnum `json:"monthly_week_day,omitempty"`
	// Define the interval at which the meeting should recur. For instance, if you would like to schedule a meeting that recurs every two months, you must set the value of this field as `2` and the value of the `type` parameter as `3`.
	//
	// For a daily meeting, the maximum interval you can set is `90` days. For a weekly meeting the maximum interval that you can set is  of `12` weeks. For a monthly meeting, there is a maximum of `3` months.
	//
	//
	RepeatInterval *int64 `json:"repeat_interval,omitempty"`
	// Recurrence meeting types:<br>`1` - Daily.<br>`2` - Weekly.<br>`3` - Monthly.
	Type Meeting200ApplicationJSONRecurrenceTypeEnum `json:"type"`
	// This field is required **if you're scheduling a recurring meeting of type** `2` to state which day(s) of the week the meeting should repeat. <br> <br> The value for this field could be a number between `1` to `7` in string format. For instance, if the meeting should recur on Sunday, provide `"1"` as the value of this field.<br><br> **Note:** If you would like the meeting to occur on multiple days of a week, you should provide comma separated values for this field. For instance, if the meeting should recur on Sundays and Tuesdays provide `"1,3"` as the value of this field.
	//
	//  <br>`1`  - Sunday. <br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` -  Thursday.<br>`6` - Friday.<br>`7` - Saturday.
	WeeklyDays *Meeting200ApplicationJSONRecurrenceWeeklyDaysEnum `json:"weekly_days,omitempty"`
}

// Meeting200ApplicationJSONSettingsApprovalTypeEnum - Enable registration and set approval for the registration. Note that this feature requires the host to be of **Licensed** user type. **Registration cannot be enabled for a basic user.** <br><br>
//
// `0` - Automatically approve.<br>`1` - Manually approve.<br>`2` - No registration required.
type Meeting200ApplicationJSONSettingsApprovalTypeEnum string

const (
	Meeting200ApplicationJSONSettingsApprovalTypeEnumZero Meeting200ApplicationJSONSettingsApprovalTypeEnum = "0"
	Meeting200ApplicationJSONSettingsApprovalTypeEnumOne  Meeting200ApplicationJSONSettingsApprovalTypeEnum = "1"
	Meeting200ApplicationJSONSettingsApprovalTypeEnumTwo  Meeting200ApplicationJSONSettingsApprovalTypeEnum = "2"
)

func (e *Meeting200ApplicationJSONSettingsApprovalTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "2":
		*e = Meeting200ApplicationJSONSettingsApprovalTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Meeting200ApplicationJSONSettingsApprovalTypeEnum: %s", s)
	}
}

// Meeting200ApplicationJSONSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum - Specify whether to allow users from specific regions to join this meeting; or block users from specific regions from joining this meeting. <br><br>
// `approve`: Allow users from specific regions/countries to join this meeting. If this setting is selected, the approved regions/countries must be included in the `approved_list`.<br><br>
// `deny`: Block users from specific regions/countries from joining this meeting. If this setting is selected, the approved regions/countries must be included in the `denied_list`
type Meeting200ApplicationJSONSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum string

const (
	Meeting200ApplicationJSONSettingsApprovedOrDeniedCountriesOrRegionsMethodEnumApprove Meeting200ApplicationJSONSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum = "approve"
	Meeting200ApplicationJSONSettingsApprovedOrDeniedCountriesOrRegionsMethodEnumDeny    Meeting200ApplicationJSONSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum = "deny"
)

func (e *Meeting200ApplicationJSONSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "approve":
		fallthrough
	case "deny":
		*e = Meeting200ApplicationJSONSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Meeting200ApplicationJSONSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum: %s", s)
	}
}

// Meeting200ApplicationJSONSettingsApprovedOrDeniedCountriesOrRegions - Approve or block users from specific regions/countries from joining this meeting.
type Meeting200ApplicationJSONSettingsApprovedOrDeniedCountriesOrRegions struct {
	// List of countries/regions from where participants can join this meeting.
	ApprovedList []string `json:"approved_list,omitempty"`
	// List of countries/regions from where participants can not join this meeting.
	DeniedList []string `json:"denied_list,omitempty"`
	// `true`: Setting enabled to either allow users or block users from specific regions to join your meetings. <br>
	//
	// `false`: Setting disabled.
	Enable *bool `json:"enable,omitempty"`
	// Specify whether to allow users from specific regions to join this meeting; or block users from specific regions from joining this meeting. <br><br>
	// `approve`: Allow users from specific regions/countries to join this meeting. If this setting is selected, the approved regions/countries must be included in the `approved_list`.<br><br>
	// `deny`: Block users from specific regions/countries from joining this meeting. If this setting is selected, the approved regions/countries must be included in the `denied_list`
	Method *Meeting200ApplicationJSONSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum `json:"method,omitempty"`
}

// Meeting200ApplicationJSONSettingsAudioEnum - Determine how participants can join the audio portion of the meeting.<br>`both` - Both Telephony and VoIP.<br>`telephony` - Telephony only.<br>`voip` - VoIP only.
type Meeting200ApplicationJSONSettingsAudioEnum string

const (
	Meeting200ApplicationJSONSettingsAudioEnumBoth      Meeting200ApplicationJSONSettingsAudioEnum = "both"
	Meeting200ApplicationJSONSettingsAudioEnumTelephony Meeting200ApplicationJSONSettingsAudioEnum = "telephony"
	Meeting200ApplicationJSONSettingsAudioEnumVoip      Meeting200ApplicationJSONSettingsAudioEnum = "voip"
)

func (e *Meeting200ApplicationJSONSettingsAudioEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "both":
		fallthrough
	case "telephony":
		fallthrough
	case "voip":
		*e = Meeting200ApplicationJSONSettingsAudioEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Meeting200ApplicationJSONSettingsAudioEnum: %s", s)
	}
}

type Meeting200ApplicationJSONSettingsAuthenticationException struct {
	// Email address of the participant.
	Email *string `json:"email,omitempty"`
	// Name of the participant.
	Name *string `json:"name,omitempty"`
}

// Meeting200ApplicationJSONSettingsAutoRecordingEnum - Automatic recording:<br>`local` - Record on local.<br>`cloud` -  Record on cloud.<br>`none` - Disabled.
type Meeting200ApplicationJSONSettingsAutoRecordingEnum string

const (
	Meeting200ApplicationJSONSettingsAutoRecordingEnumLocal Meeting200ApplicationJSONSettingsAutoRecordingEnum = "local"
	Meeting200ApplicationJSONSettingsAutoRecordingEnumCloud Meeting200ApplicationJSONSettingsAutoRecordingEnum = "cloud"
	Meeting200ApplicationJSONSettingsAutoRecordingEnumNone  Meeting200ApplicationJSONSettingsAutoRecordingEnum = "none"
)

func (e *Meeting200ApplicationJSONSettingsAutoRecordingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "local":
		fallthrough
	case "cloud":
		fallthrough
	case "none":
		*e = Meeting200ApplicationJSONSettingsAutoRecordingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Meeting200ApplicationJSONSettingsAutoRecordingEnum: %s", s)
	}
}

type Meeting200ApplicationJSONSettingsBreakoutRoomRooms struct {
	// Name of the breakout room.
	Name *string `json:"name,omitempty"`
	// Email addresses of the participants who are to be assigned to the breakout room.
	Participants []string `json:"participants,omitempty"`
}

// Meeting200ApplicationJSONSettingsBreakoutRoom - Setting to [pre-assign breakout rooms](https://support.zoom.us/hc/en-us/articles/360032752671-Pre-assigning-participants-to-breakout-rooms#h_36f71353-4190-48a2-b999-ca129861c1f4).
type Meeting200ApplicationJSONSettingsBreakoutRoom struct {
	// Set the value of this field to `true` if you would like to enable the [breakout room pre-assign](https://support.zoom.us/hc/en-us/articles/360032752671-Pre-assigning-participants-to-breakout-rooms#h_36f71353-4190-48a2-b999-ca129861c1f4) option.
	Enable *bool `json:"enable,omitempty"`
	// Create room(s).
	Rooms []Meeting200ApplicationJSONSettingsBreakoutRoomRooms `json:"rooms,omitempty"`
}

type Meeting200ApplicationJSONSettingsCustomKeys struct {
	// Custom key associated with the user.
	Key *string `json:"key,omitempty"`
	// Value of the custom key associated with the user.
	Value *string `json:"value,omitempty"`
}

// Meeting200ApplicationJSONSettingsEncryptionTypeEnum - Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be **automatically disabled**. <br><br>The value of this field can be one of the following:<br>
// `enhanced_encryption`: Enhanced encryption. Encryption is stored in the cloud if you enable this option. <br>
//
// `e2ee`: [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the following features: join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.
type Meeting200ApplicationJSONSettingsEncryptionTypeEnum string

const (
	Meeting200ApplicationJSONSettingsEncryptionTypeEnumEnhancedEncryption Meeting200ApplicationJSONSettingsEncryptionTypeEnum = "enhanced_encryption"
	Meeting200ApplicationJSONSettingsEncryptionTypeEnumE2ee               Meeting200ApplicationJSONSettingsEncryptionTypeEnum = "e2ee"
)

func (e *Meeting200ApplicationJSONSettingsEncryptionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "enhanced_encryption":
		fallthrough
	case "e2ee":
		*e = Meeting200ApplicationJSONSettingsEncryptionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Meeting200ApplicationJSONSettingsEncryptionTypeEnum: %s", s)
	}
}

// Meeting200ApplicationJSONSettingsGlobalDialInNumbersTypeEnum - Type of number.
type Meeting200ApplicationJSONSettingsGlobalDialInNumbersTypeEnum string

const (
	Meeting200ApplicationJSONSettingsGlobalDialInNumbersTypeEnumToll     Meeting200ApplicationJSONSettingsGlobalDialInNumbersTypeEnum = "toll"
	Meeting200ApplicationJSONSettingsGlobalDialInNumbersTypeEnumTollfree Meeting200ApplicationJSONSettingsGlobalDialInNumbersTypeEnum = "tollfree"
)

func (e *Meeting200ApplicationJSONSettingsGlobalDialInNumbersTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "toll":
		fallthrough
	case "tollfree":
		*e = Meeting200ApplicationJSONSettingsGlobalDialInNumbersTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Meeting200ApplicationJSONSettingsGlobalDialInNumbersTypeEnum: %s", s)
	}
}

type Meeting200ApplicationJSONSettingsGlobalDialInNumbers struct {
	// City of the number, if any. For example, Chicago.
	City *string `json:"city,omitempty"`
	// Country code. For example, BR.
	Country *string `json:"country,omitempty"`
	// Full name of country. For example, Brazil.
	CountryName *string `json:"country_name,omitempty"`
	// Phone number. For example, +1 2332357613.
	Number *string `json:"number,omitempty"`
	// Type of number.
	Type *Meeting200ApplicationJSONSettingsGlobalDialInNumbersTypeEnum `json:"type,omitempty"`
}

// Meeting200ApplicationJSONSettingsJbhTimeEnum - If the value of "join_before_host" field is set to true, this field can be used to indicate time limits within which a participant may join a meeting before a host. The value of this field can be one of the following:
//
// *  `0`: Allow participant to join anytime.
// *  `5`: Allow participant to join 5 minutes before meeting start time.
//   - `10`: Allow participant to join 10 minutes before meeting start time.
type Meeting200ApplicationJSONSettingsJbhTimeEnum string

const (
	Meeting200ApplicationJSONSettingsJbhTimeEnumZero Meeting200ApplicationJSONSettingsJbhTimeEnum = "0"
	Meeting200ApplicationJSONSettingsJbhTimeEnumFive Meeting200ApplicationJSONSettingsJbhTimeEnum = "5"
	Meeting200ApplicationJSONSettingsJbhTimeEnumTen  Meeting200ApplicationJSONSettingsJbhTimeEnum = "10"
)

func (e *Meeting200ApplicationJSONSettingsJbhTimeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "5":
		fallthrough
	case "10":
		*e = Meeting200ApplicationJSONSettingsJbhTimeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Meeting200ApplicationJSONSettingsJbhTimeEnum: %s", s)
	}
}

type Meeting200ApplicationJSONSettingsLanguageInterpretationInterpreters struct {
	// Email address of the interpreter.
	Email *string `json:"email,omitempty"`
	// Languages for interpretation. The string must contain two [country Ids](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries) separated by a comma.
	//
	// For example, if the language is to be interpreted from English to Chinese, the value of this field should be "US,CN".
	Languages *string `json:"languages,omitempty"`
}

type Meeting200ApplicationJSONSettingsLanguageInterpretation struct {
	Enable *bool `json:"enable,omitempty"`
	// Information associated with the interpreter.
	Interpreters []Meeting200ApplicationJSONSettingsLanguageInterpretationInterpreters `json:"interpreters,omitempty"`
}

// Meeting200ApplicationJSONSettingsRegistrationTypeEnum - Registration type. Used for recurring meeting with fixed time only. <br>`1` Attendees register once and can attend any of the occurrences.<br>`2` Attendees need to register for each occurrence to attend.<br>`3` Attendees register once and can choose one or more occurrences to attend.
type Meeting200ApplicationJSONSettingsRegistrationTypeEnum string

const (
	Meeting200ApplicationJSONSettingsRegistrationTypeEnumOne   Meeting200ApplicationJSONSettingsRegistrationTypeEnum = "1"
	Meeting200ApplicationJSONSettingsRegistrationTypeEnumTwo   Meeting200ApplicationJSONSettingsRegistrationTypeEnum = "2"
	Meeting200ApplicationJSONSettingsRegistrationTypeEnumThree Meeting200ApplicationJSONSettingsRegistrationTypeEnum = "3"
)

func (e *Meeting200ApplicationJSONSettingsRegistrationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		*e = Meeting200ApplicationJSONSettingsRegistrationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Meeting200ApplicationJSONSettingsRegistrationTypeEnum: %s", s)
	}
}

// Meeting200ApplicationJSONSettings - Meeting settings.
type Meeting200ApplicationJSONSettings struct {
	// Allow attendees to join the meeting from multiple devices. This setting only works for meetings that require [registration](https://support.zoom.us/hc/en-us/articles/211579443-Setting-up-registration-for-a-meeting).
	AllowMultipleDevices *bool `json:"allow_multiple_devices,omitempty"`
	// Alternative host's emails or IDs: multiple values are separated by a semicolon.
	AlternativeHosts *string `json:"alternative_hosts,omitempty"`
	// Flag to determine whether to send email notifications to alternative hosts, default value is true.
	AlternativeHostsEmailNotification *bool `json:"alternative_hosts_email_notification,omitempty"`
	// Enable registration and set approval for the registration. Note that this feature requires the host to be of **Licensed** user type. **Registration cannot be enabled for a basic user.** <br><br>
	//
	// `0` - Automatically approve.<br>`1` - Manually approve.<br>`2` - No registration required.
	ApprovalType *Meeting200ApplicationJSONSettingsApprovalTypeEnum `json:"approval_type,omitempty"`
	// Approve or block users from specific regions/countries from joining this meeting.
	//
	ApprovedOrDeniedCountriesOrRegions *Meeting200ApplicationJSONSettingsApprovedOrDeniedCountriesOrRegions `json:"approved_or_denied_countries_or_regions,omitempty"`
	// Determine how participants can join the audio portion of the meeting.<br>`both` - Both Telephony and VoIP.<br>`telephony` - Telephony only.<br>`voip` - VoIP only.
	Audio *Meeting200ApplicationJSONSettingsAudioEnum `json:"audio,omitempty"`
	// If user has configured ["Sign Into Zoom with Specified Domains"](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f) option, this will list the domains that are authenticated.
	AuthenticationDomains *string `json:"authentication_domains,omitempty"`
	// The participants added here will receive unique meeting invite links and bypass authentication.
	AuthenticationException []Meeting200ApplicationJSONSettingsAuthenticationException `json:"authentication_exception,omitempty"`
	// Authentication name set in the [authentication profile](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f).
	AuthenticationName *string `json:"authentication_name,omitempty"`
	// Meeting authentication option id.
	AuthenticationOption *string `json:"authentication_option,omitempty"`
	// Automatic recording:<br>`local` - Record on local.<br>`cloud` -  Record on cloud.<br>`none` - Disabled.
	AutoRecording *Meeting200ApplicationJSONSettingsAutoRecordingEnum `json:"auto_recording,omitempty"`
	// Setting to [pre-assign breakout rooms](https://support.zoom.us/hc/en-us/articles/360032752671-Pre-assigning-participants-to-breakout-rooms#h_36f71353-4190-48a2-b999-ca129861c1f4).
	BreakoutRoom *Meeting200ApplicationJSONSettingsBreakoutRoom `json:"breakout_room,omitempty"`
	// Close registration after event date
	CloseRegistration *bool `json:"close_registration,omitempty"`
	// Host meeting in China.
	CnMeeting *bool `json:"cn_meeting,omitempty"`
	// Contact email for registration
	ContactEmail *string `json:"contact_email,omitempty"`
	// Contact name for registration
	ContactName *string `json:"contact_name,omitempty"`
	// Custom keys and values assigned to the meeting.
	CustomKeys []Meeting200ApplicationJSONSettingsCustomKeys `json:"custom_keys,omitempty"`
	// Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be **automatically disabled**. <br><br>The value of this field can be one of the following:<br>
	// `enhanced_encryption`: Enhanced encryption. Encryption is stored in the cloud if you enable this option. <br>
	//
	// `e2ee`: [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the following features: join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.
	EncryptionType *Meeting200ApplicationJSONSettingsEncryptionTypeEnum `json:"encryption_type,omitempty"`
	// Only signed in users can join this meeting.
	//
	// **This field is deprecated and will not be supported in the future.**  <br><br>As an alternative, use the "meeting_authentication", "authentication_option" and "authentication_domains" fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the meeting.
	EnforceLogin *bool `json:"enforce_login,omitempty"`
	// Only signed in users with specified domains can join meetings.
	//
	// **This field is deprecated and will not be supported in the future.**  <br><br>As an alternative, use the "meeting_authentication", "authentication_option" and "authentication_domains" fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the meeting.
	EnforceLoginDomains *string `json:"enforce_login_domains,omitempty"`
	// List of global dial-in countries
	GlobalDialInCountries []string `json:"global_dial_in_countries,omitempty"`
	// Global Dial-in Countries/Regions
	GlobalDialInNumbers []Meeting200ApplicationJSONSettingsGlobalDialInNumbers `json:"global_dial_in_numbers,omitempty"`
	// Start video when the host joins the meeting.
	HostVideo *bool `json:"host_video,omitempty"`
	// Host meeting in India.
	InMeeting *bool `json:"in_meeting,omitempty"`
	// If the value of "join_before_host" field is set to true, this field can be used to indicate time limits within which a participant may join a meeting before a host. The value of this field can be one of the following:
	//
	// *  `0`: Allow participant to join anytime.
	// *  `5`: Allow participant to join 5 minutes before meeting start time.
	//  * `10`: Allow participant to join 10 minutes before meeting start time.
	JbhTime *Meeting200ApplicationJSONSettingsJbhTimeEnum `json:"jbh_time,omitempty"`
	// Allow participants to join the meeting before the host starts the meeting. Only used for scheduled or recurring meetings.
	JoinBeforeHost         *bool                                                    `json:"join_before_host,omitempty"`
	LanguageInterpretation *Meeting200ApplicationJSONSettingsLanguageInterpretation `json:"language_interpretation,omitempty"`
	// `true`- Only authenticated users can join meetings.
	MeetingAuthentication *bool `json:"meeting_authentication,omitempty"`
	// Mute participants upon entry.
	MuteUponEntry *bool `json:"mute_upon_entry,omitempty"`
	// Start video when participants join the meeting.
	ParticipantVideo *bool `json:"participant_video,omitempty"`
	// Send confirmation email to registrants upon successful registration.
	RegistrantsConfirmationEmail *bool `json:"registrants_confirmation_email,omitempty"`
	// Send email notifications to registrants about approval, cancellation, denial of the registration. The value of this field must be set to true in order to use the `registrants_confirmation_email` field.
	RegistrantsEmailNotification *bool `json:"registrants_email_notification,omitempty"`
	// Registration type. Used for recurring meeting with fixed time only. <br>`1` Attendees register once and can attend any of the occurrences.<br>`2` Attendees need to register for each occurrence to attend.<br>`3` Attendees register once and can choose one or more occurrences to attend.
	RegistrationType *Meeting200ApplicationJSONSettingsRegistrationTypeEnum `json:"registration_type,omitempty"`
	// Show social share buttons on the meeting registration page.
	// This setting only works for meetings that require [registration](https://support.zoom.us/hc/en-us/articles/211579443-Setting-up-registration-for-a-meeting).
	ShowShareButton *bool `json:"show_share_button,omitempty"`
	// Use a personal meeting ID. Only used for scheduled meetings and recurring meetings with no fixed time.
	UsePmi *bool `json:"use_pmi,omitempty"`
	// Enable waiting room
	WaitingRoom *bool `json:"waiting_room,omitempty"`
	// Add watermark when viewing a shared screen.
	Watermark *bool `json:"watermark,omitempty"`
}

// Meeting200ApplicationJSONStatusEnum - Meeting status
type Meeting200ApplicationJSONStatusEnum string

const (
	Meeting200ApplicationJSONStatusEnumWaiting Meeting200ApplicationJSONStatusEnum = "waiting"
	Meeting200ApplicationJSONStatusEnumStarted Meeting200ApplicationJSONStatusEnum = "started"
)

func (e *Meeting200ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "waiting":
		fallthrough
	case "started":
		*e = Meeting200ApplicationJSONStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Meeting200ApplicationJSONStatusEnum: %s", s)
	}
}

type Meeting200ApplicationJSONTrackingFields struct {
	// Label of the tracking field.
	Field *string `json:"field,omitempty"`
	// Value for the field.
	Value *string `json:"value,omitempty"`
	// Indicates whether the [tracking field](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields) is visible in the meeting scheduling options in the Zoom Web Portal or not.
	//
	// `true`: Tracking field is visible. <br>
	//
	// `false`: Tracking field is not visible to the users when they look at the meeting details in the Zoom Web Portal but the field was used while scheduling this meeting via API. An invisible tracking field can be used by users while scheduling meetings via API only.
	Visible *bool `json:"visible,omitempty"`
}

// Meeting200ApplicationJSONTypeEnum - Meeting Types:<br>`1` - Instant meeting.<br>`2` - Scheduled meeting.<br>`3` - Recurring meeting with no fixed time.<br>`4` - PMI Meeting<br>
// `8` - Recurring meeting with a fixed time.
type Meeting200ApplicationJSONTypeEnum string

const (
	Meeting200ApplicationJSONTypeEnumOne   Meeting200ApplicationJSONTypeEnum = "1"
	Meeting200ApplicationJSONTypeEnumTwo   Meeting200ApplicationJSONTypeEnum = "2"
	Meeting200ApplicationJSONTypeEnumThree Meeting200ApplicationJSONTypeEnum = "3"
	Meeting200ApplicationJSONTypeEnumEight Meeting200ApplicationJSONTypeEnum = "8"
)

func (e *Meeting200ApplicationJSONTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "8":
		*e = Meeting200ApplicationJSONTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Meeting200ApplicationJSONTypeEnum: %s", s)
	}
}

// Meeting200ApplicationJSON - Meeting object.
type Meeting200ApplicationJSON struct {
	// Meeting description
	Agenda *string `json:"agenda,omitempty"`
	// Unique identifier of the scheduler who scheduled this meeting on behalf of the host. This field is only returned if you used "schedule_for" option in the [Create a Meeting API request](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/meetingcreate).
	AssistantID *string `json:"assistant_id,omitempty"`
	// Time of creation.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Meeting duration.
	Duration *int64 `json:"duration,omitempty"`
	// Encrypted passcode for third party endpoints (H323/SIP).
	EncryptedPassword *string `json:"encrypted_password,omitempty"`
	// H.323/SIP room system passcode.
	H323Password *string `json:"h323_password,omitempty"`
	// Email address of the meeting host.
	HostEmail *string `json:"host_email,omitempty"`
	// ID of the user who is set as host of meeting.
	HostID *string `json:"host_id,omitempty"`
	// [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "**long**" format(represented as int64 data type in JSON), also known as the meeting number.
	ID *int64 `json:"id,omitempty"`
	// URL for participants to join the meeting. This URL should only be shared with users that you would like to invite for the meeting.
	JoinURL *string `json:"join_url,omitempty"`
	// Array of occurrence objects.
	Occurrences []Meeting200ApplicationJSONOccurrences `json:"occurrences,omitempty"`
	// Meeting passcode.
	Password *string `json:"password,omitempty"`
	// Personal Meeting Id. Only used for scheduled meetings and recurring meetings with no fixed time.
	Pmi *int64 `json:"pmi,omitempty"`
	// Recurrence object. Use this object only for a meeting with type `8` i.e., a recurring meeting with fixed time.
	Recurrence *Meeting200ApplicationJSONRecurrence `json:"recurrence,omitempty"`
	// Meeting settings.
	Settings *Meeting200ApplicationJSONSettings `json:"settings,omitempty"`
	// Meeting start time in GMT/UTC. Start time will not be returned if the meeting is an **instant** meeting.
	//
	StartTime *time.Time `json:"start_time,omitempty"`
	// <br><aside>The <code>start_url</code> of a Meeting is a URL using which a host or an alternative host can start the Meeting.
	//
	// The expiration time for the <code>start_url</code> field listed in the response of [Create a Meeting API](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/meetingcreate) is two hours for all regular users.
	//
	// For users created using the <code>custCreate</code> option via the [Create Users](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usercreate) API, the expiration time of the <code>start_url</code> field is 90 days.
	//
	// For security reasons, to retrieve the updated value for the <code>start_url</code> field programmatically (after the expiry time), you must call the [Retrieve a Meeting API](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/meeting) and refer to the value of the <code>start_url</code> field in the response.</aside><br>This URL should only be used by the host of the meeting and **should not be shared with anyone other than the host** of the meeting as anyone with this URL will be able to login to the Zoom Client as the host of the meeting.
	StartURL *string `json:"start_url,omitempty"`
	// Meeting status
	Status *Meeting200ApplicationJSONStatusEnum `json:"status,omitempty"`
	// Timezone to format the meeting start time on the .
	Timezone *string `json:"timezone,omitempty"`
	// Meeting topic.
	Topic *string `json:"topic,omitempty"`
	// Tracking fields
	TrackingFields []Meeting200ApplicationJSONTrackingFields `json:"tracking_fields,omitempty"`
	// Meeting Types:<br>`1` - Instant meeting.<br>`2` - Scheduled meeting.<br>`3` - Recurring meeting with no fixed time.<br>`4` - PMI Meeting<br>
	// `8` - Recurring meeting with a fixed time.
	Type *Meeting200ApplicationJSONTypeEnum `json:"type,omitempty"`
	// Unique meeting ID. Each meeting instance will generate its own Meeting UUID (i.e., after a meeting ends, a new UUID will be generated for the next instance of the meeting). You can retrieve a list of UUIDs from past meeting instances using [this API](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/pastmeetings) . Please double encode your UUID when using it for API calls if the UUID begins with a '/'or contains '//' in it.
	//
	UUID *string `json:"uuid,omitempty"`
}

type MeetingResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200`<br>
	// Meeting object returned.
	Meeting200ApplicationJSONObject *Meeting200ApplicationJSON
}
