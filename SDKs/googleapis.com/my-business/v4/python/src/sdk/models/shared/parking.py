"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ParkingElectricCarChargingStationsExceptionEnum(str, Enum):
    r"""Electric car charging stations exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class ParkingFreeParkingExceptionEnum(str, Enum):
    r"""Free parking exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class ParkingFreeSelfParkingExceptionEnum(str, Enum):
    r"""Free self parking exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class ParkingFreeValetParkingExceptionEnum(str, Enum):
    r"""Free valet parking exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class ParkingParkingAvailableExceptionEnum(str, Enum):
    r"""Parking available exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class ParkingSelfParkingAvailableExceptionEnum(str, Enum):
    r"""Self parking available exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class ParkingValetParkingAvailableExceptionEnum(str, Enum):
    r"""Valet parking available exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Parking:
    r"""Parking options at the property."""
    
    electric_car_charging_stations: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('electricCarChargingStations'), 'exclude': lambda f: f is None }})
    r"""Electric car charging stations. Electric power stations, usually located outdoors, into which guests plug their electric cars to receive a charge."""  
    electric_car_charging_stations_exception: Optional[ParkingElectricCarChargingStationsExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('electricCarChargingStationsException'), 'exclude': lambda f: f is None }})
    r"""Electric car charging stations exception."""  
    free_parking: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('freeParking'), 'exclude': lambda f: f is None }})
    r"""Free parking. The hotel allows the cars of guests to be parked for free. Parking facility may be an outdoor lot or an indoor garage, but must be onsite. Nearby parking does not apply. Parking may be performed by the guest or by hotel staff. Free parking must be available to all guests (limited conditions does not apply)."""  
    free_parking_exception: Optional[ParkingFreeParkingExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('freeParkingException'), 'exclude': lambda f: f is None }})
    r"""Free parking exception."""  
    free_self_parking: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('freeSelfParking'), 'exclude': lambda f: f is None }})
    r"""Free self parking. Guests park their own cars for free. Parking facility may be an outdoor lot or an indoor garage, but must be onsite. Nearby parking does not apply."""  
    free_self_parking_exception: Optional[ParkingFreeSelfParkingExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('freeSelfParkingException'), 'exclude': lambda f: f is None }})
    r"""Free self parking exception."""  
    free_valet_parking: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('freeValetParking'), 'exclude': lambda f: f is None }})
    r"""Free valet parking. Hotel staff member parks the cars of guests. Parking with this service is free."""  
    free_valet_parking_exception: Optional[ParkingFreeValetParkingExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('freeValetParkingException'), 'exclude': lambda f: f is None }})
    r"""Free valet parking exception."""  
    parking_available: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parkingAvailable'), 'exclude': lambda f: f is None }})
    r"""Parking available. The hotel allows the cars of guests to be parked. Can be free or for a fee. Parking facility may be an outdoor lot or an indoor garage, but must be onsite. Nearby parking does not apply. Parking may be performed by the guest or by hotel staff."""  
    parking_available_exception: Optional[ParkingParkingAvailableExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parkingAvailableException'), 'exclude': lambda f: f is None }})
    r"""Parking available exception."""  
    self_parking_available: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selfParkingAvailable'), 'exclude': lambda f: f is None }})
    r"""Self parking available. Guests park their own cars. Parking facility may be an outdoor lot or an indoor garage, but must be onsite. Nearby parking does not apply. Can be free or for a fee."""  
    self_parking_available_exception: Optional[ParkingSelfParkingAvailableExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selfParkingAvailableException'), 'exclude': lambda f: f is None }})
    r"""Self parking available exception."""  
    valet_parking_available: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valetParkingAvailable'), 'exclude': lambda f: f is None }})
    r"""Valet parking available. Hotel staff member parks the cars of guests. Parking with this service can be free or for a fee."""  
    valet_parking_available_exception: Optional[ParkingValetParkingAvailableExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valetParkingAvailableException'), 'exclude': lambda f: f is None }})
    r"""Valet parking available exception."""  
    