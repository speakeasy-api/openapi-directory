"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class PayloadTemplates:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_network_webhooks_payload_template(self, request: operations.CreateNetworkWebhooksPayloadTemplateRequest) -> operations.CreateNetworkWebhooksPayloadTemplateResponse:
        r"""Create a webhook payload template for a network
        Create a webhook payload template for a network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateNetworkWebhooksPayloadTemplateRequest, base_url, '/networks/{networkId}/webhooks/payloadTemplates', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateNetworkWebhooksPayloadTemplateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateNetworkWebhooksPayloadTemplate201ApplicationJSON])
                res.create_network_webhooks_payload_template_201_application_json_object = out

        return res

    def delete_network_webhooks_payload_template(self, request: operations.DeleteNetworkWebhooksPayloadTemplateRequest) -> operations.DeleteNetworkWebhooksPayloadTemplateResponse:
        r"""Destroy a webhook payload template for a network
        Destroy a webhook payload template for a network. Does not work for included templates ('wpt_00001', 'wpt_00002', 'wpt_00003', 'wpt_00004', 'wpt_00005' or 'wpt_00006')
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteNetworkWebhooksPayloadTemplateRequest, base_url, '/networks/{networkId}/webhooks/payloadTemplates/{payloadTemplateId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteNetworkWebhooksPayloadTemplateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_network_webhooks_payload_template(self, request: operations.GetNetworkWebhooksPayloadTemplateRequest) -> operations.GetNetworkWebhooksPayloadTemplateResponse:
        r"""Get the webhook payload template for a network
        Get the webhook payload template for a network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkWebhooksPayloadTemplateRequest, base_url, '/networks/{networkId}/webhooks/payloadTemplates/{payloadTemplateId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkWebhooksPayloadTemplateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetNetworkWebhooksPayloadTemplate200ApplicationJSON])
                res.get_network_webhooks_payload_template_200_application_json_object = out

        return res

    def get_network_webhooks_payload_templates(self, request: operations.GetNetworkWebhooksPayloadTemplatesRequest) -> operations.GetNetworkWebhooksPayloadTemplatesResponse:
        r"""List the webhook payload templates for a network
        List the webhook payload templates for a network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkWebhooksPayloadTemplatesRequest, base_url, '/networks/{networkId}/webhooks/payloadTemplates', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkWebhooksPayloadTemplatesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetNetworkWebhooksPayloadTemplates200ApplicationJSON]])
                res.get_network_webhooks_payload_templates_200_application_json_objects = out

        return res

    def update_network_webhooks_payload_template(self, request: operations.UpdateNetworkWebhooksPayloadTemplateRequest) -> operations.UpdateNetworkWebhooksPayloadTemplateResponse:
        r"""Update a webhook payload template for a network
        Update a webhook payload template for a network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateNetworkWebhooksPayloadTemplateRequest, base_url, '/networks/{networkId}/webhooks/payloadTemplates/{payloadTemplateId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateNetworkWebhooksPayloadTemplateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateNetworkWebhooksPayloadTemplate200ApplicationJSON])
                res.update_network_webhooks_payload_template_200_application_json_object = out

        return res

    