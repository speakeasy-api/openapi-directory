/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * File upload without authentication headers
 */
export class Uploads {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Cancel file upload
   *
   * @remarks
   * ### Description:
   * Cancel file upload.
   *
   * ### Precondition:
   * Valid upload token.
   *
   * ### Postcondition:
   * Upload canceled, token invalidated and all already transfered chunks removed.
   *
   * ### Further Information:
   * It is recommended to notify the API about cancelled uploads if possible.
   */
  cancelFileUploadByToken(
    req: operations.CancelFileUploadByTokenRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CancelFileUploadByTokenResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CancelFileUploadByTokenRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v4/uploads/{token}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CancelFileUploadByTokenResponse =
        new operations.CancelFileUploadByTokenResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case [400, 401, 403, 404, 406, 507].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Complete file upload
   *
   * @remarks
   * ### Description:
   * Finish uploading a file.
   *
   * ### Precondition:
   * Valid upload token.
   *
   * ### Postcondition:
   * File created.
   *
   * ### Further Information:
   * The provided file name might be changed in accordance with the resolution strategy:
   *
   * * **autorename**: changes the file name and adds a number to avoid conflicts.
   * * **overwrite**: deletes any old file with the same file name.
   * * **fail**: returns an error; in this case, another `PUT` request with a different file name may be sent.
   *
   * Please ensure that all chunks have been transferred correctly before finishing the upload.
   *
   * Download share id (if exists) gets changed if:
   * - node with the same name exists in the target container
   * - `resolutionStrategy` is `overwrite`
   * - `keepShareLinks` is `true`
   */
  completeFileUploadByToken(
    req: operations.CompleteFileUploadByTokenRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CompleteFileUploadByTokenResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CompleteFileUploadByTokenRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v4/uploads/{token}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "completeUploadRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CompleteFileUploadByTokenResponse =
        new operations.CompleteFileUploadByTokenResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [201, 202].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.node = utils.objectToClass(httpRes?.data, shared.Node);
          }
          break;
        case [400, 401, 403, 404, 406, 409, 507].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Upload file
   *
   * @remarks
   * ### Description:
   * Upload a (chunk of a) file.
   *
   * ### Precondition:
   * Valid upload token.
   *
   * ### Postcondition:
   * Chunk uploaded.
   *
   * ### Further Information:
   * Range requests are supported.
   *
   * Following `Content-Types` are supported by this API:
   * * `multipart/form-data`
   * * provided `Content-Type`
   *
   * For both file upload types set the correct `Content-Type` header and body.
   *
   * ### Examples:
   *
   * * `multipart/form-data`
   * ```
   * POST /api/v4/uploads/{token} HTTP/1.1
   *
   * Header:
   * ...
   * Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW
   * ...
   *
   * Body:
   * ------WebKitFormBoundary7MA4YWxkTrZu0gW
   * Content-Disposition: form-data; name="file"; filename="file.txt"
   * Content-Type: text/plain
   *
   * Content of file.txt
   * ------WebKitFormBoundary7MA4YWxkTrZu0gW--
   * ```
   *
   * * any other `Content-Type`
   * ```
   * POST /api/v4/uploads/{token} HTTP/1.1
   *
   * Header:
   * ...
   * Content-Type: { ... }
   * ...
   *
   * Body:
   * raw content
   * ```
   *
   *
   * @see {@link https://tools.ietf.org/html/rfc7233} - Range Requests
   */
  uploadFileByTokenAsMultipart1(
    req: operations.UploadFileByTokenAsMultipart1Request,
    config?: AxiosRequestConfig
  ): Promise<operations.UploadFileByTokenAsMultipart1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UploadFileByTokenAsMultipart1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v4/uploads/{token}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UploadFileByTokenAsMultipart1Response =
        new operations.UploadFileByTokenAsMultipart1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 201].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.chunkUploadResponse = utils.objectToClass(
              httpRes?.data,
              shared.ChunkUploadResponse
            );
          }
          break;
        case [400, 401, 403, 404, 406, 507].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
