"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def baremetalsolution_projects_locations_instance_provisioning_settings_fetch(self, request: operations.BaremetalsolutionProjectsLocationsInstanceProvisioningSettingsFetchRequest, security: operations.BaremetalsolutionProjectsLocationsInstanceProvisioningSettingsFetchSecurity) -> operations.BaremetalsolutionProjectsLocationsInstanceProvisioningSettingsFetchResponse:
        r"""Get instance provisioning settings for a given project. This is hidden method used by UI only."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BaremetalsolutionProjectsLocationsInstanceProvisioningSettingsFetchRequest, base_url, '/v2/{location}/instanceProvisioningSettings:fetch', request)
        
        query_params = utils.get_query_params(operations.BaremetalsolutionProjectsLocationsInstanceProvisioningSettingsFetchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BaremetalsolutionProjectsLocationsInstanceProvisioningSettingsFetchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FetchInstanceProvisioningSettingsResponse])
                res.fetch_instance_provisioning_settings_response = out

        return res

    def baremetalsolution_projects_locations_instances_create(self, request: operations.BaremetalsolutionProjectsLocationsInstancesCreateRequest, security: operations.BaremetalsolutionProjectsLocationsInstancesCreateSecurity) -> operations.BaremetalsolutionProjectsLocationsInstancesCreateResponse:
        r"""Create an Instance."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BaremetalsolutionProjectsLocationsInstancesCreateRequest, base_url, '/v2/{parent}/instances', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "instance_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.BaremetalsolutionProjectsLocationsInstancesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BaremetalsolutionProjectsLocationsInstancesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def baremetalsolution_projects_locations_instances_detach_lun(self, request: operations.BaremetalsolutionProjectsLocationsInstancesDetachLunRequest, security: operations.BaremetalsolutionProjectsLocationsInstancesDetachLunSecurity) -> operations.BaremetalsolutionProjectsLocationsInstancesDetachLunResponse:
        r"""Detach LUN from Instance."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BaremetalsolutionProjectsLocationsInstancesDetachLunRequest, base_url, '/v2/{instance}:detachLun', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "detach_lun_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.BaremetalsolutionProjectsLocationsInstancesDetachLunRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BaremetalsolutionProjectsLocationsInstancesDetachLunResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def baremetalsolution_projects_locations_instances_disable_interactive_serial_console(self, request: operations.BaremetalsolutionProjectsLocationsInstancesDisableInteractiveSerialConsoleRequest, security: operations.BaremetalsolutionProjectsLocationsInstancesDisableInteractiveSerialConsoleSecurity) -> operations.BaremetalsolutionProjectsLocationsInstancesDisableInteractiveSerialConsoleResponse:
        r"""Disable the interactive serial console feature on an instance."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BaremetalsolutionProjectsLocationsInstancesDisableInteractiveSerialConsoleRequest, base_url, '/v2/{name}:disableInteractiveSerialConsole', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.BaremetalsolutionProjectsLocationsInstancesDisableInteractiveSerialConsoleRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BaremetalsolutionProjectsLocationsInstancesDisableInteractiveSerialConsoleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def baremetalsolution_projects_locations_instances_enable_interactive_serial_console(self, request: operations.BaremetalsolutionProjectsLocationsInstancesEnableInteractiveSerialConsoleRequest, security: operations.BaremetalsolutionProjectsLocationsInstancesEnableInteractiveSerialConsoleSecurity) -> operations.BaremetalsolutionProjectsLocationsInstancesEnableInteractiveSerialConsoleResponse:
        r"""Enable the interactive serial console feature on an instance."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BaremetalsolutionProjectsLocationsInstancesEnableInteractiveSerialConsoleRequest, base_url, '/v2/{name}:enableInteractiveSerialConsole', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.BaremetalsolutionProjectsLocationsInstancesEnableInteractiveSerialConsoleRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BaremetalsolutionProjectsLocationsInstancesEnableInteractiveSerialConsoleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def baremetalsolution_projects_locations_instances_list(self, request: operations.BaremetalsolutionProjectsLocationsInstancesListRequest, security: operations.BaremetalsolutionProjectsLocationsInstancesListSecurity) -> operations.BaremetalsolutionProjectsLocationsInstancesListResponse:
        r"""List servers in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BaremetalsolutionProjectsLocationsInstancesListRequest, base_url, '/v2/{parent}/instances', request)
        
        query_params = utils.get_query_params(operations.BaremetalsolutionProjectsLocationsInstancesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BaremetalsolutionProjectsLocationsInstancesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListInstancesResponse])
                res.list_instances_response = out

        return res

    def baremetalsolution_projects_locations_instances_reset(self, request: operations.BaremetalsolutionProjectsLocationsInstancesResetRequest, security: operations.BaremetalsolutionProjectsLocationsInstancesResetSecurity) -> operations.BaremetalsolutionProjectsLocationsInstancesResetResponse:
        r"""Perform an ungraceful, hard reset on a server. Equivalent to shutting the power off and then turning it back on."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BaremetalsolutionProjectsLocationsInstancesResetRequest, base_url, '/v2/{name}:reset', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.BaremetalsolutionProjectsLocationsInstancesResetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BaremetalsolutionProjectsLocationsInstancesResetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def baremetalsolution_projects_locations_instances_start(self, request: operations.BaremetalsolutionProjectsLocationsInstancesStartRequest, security: operations.BaremetalsolutionProjectsLocationsInstancesStartSecurity) -> operations.BaremetalsolutionProjectsLocationsInstancesStartResponse:
        r"""Starts a server that was shutdown."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BaremetalsolutionProjectsLocationsInstancesStartRequest, base_url, '/v2/{name}:start', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.BaremetalsolutionProjectsLocationsInstancesStartRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BaremetalsolutionProjectsLocationsInstancesStartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def baremetalsolution_projects_locations_instances_stop(self, request: operations.BaremetalsolutionProjectsLocationsInstancesStopRequest, security: operations.BaremetalsolutionProjectsLocationsInstancesStopSecurity) -> operations.BaremetalsolutionProjectsLocationsInstancesStopResponse:
        r"""Stop a running server."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BaremetalsolutionProjectsLocationsInstancesStopRequest, base_url, '/v2/{name}:stop', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.BaremetalsolutionProjectsLocationsInstancesStopRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BaremetalsolutionProjectsLocationsInstancesStopResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def baremetalsolution_projects_locations_list(self, request: operations.BaremetalsolutionProjectsLocationsListRequest, security: operations.BaremetalsolutionProjectsLocationsListSecurity) -> operations.BaremetalsolutionProjectsLocationsListResponse:
        r"""Lists information about the supported locations for this service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BaremetalsolutionProjectsLocationsListRequest, base_url, '/v2/{name}/locations', request)
        
        query_params = utils.get_query_params(operations.BaremetalsolutionProjectsLocationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BaremetalsolutionProjectsLocationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListLocationsResponse])
                res.list_locations_response = out

        return res

    def baremetalsolution_projects_locations_networks_list(self, request: operations.BaremetalsolutionProjectsLocationsNetworksListRequest, security: operations.BaremetalsolutionProjectsLocationsNetworksListSecurity) -> operations.BaremetalsolutionProjectsLocationsNetworksListResponse:
        r"""List network in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BaremetalsolutionProjectsLocationsNetworksListRequest, base_url, '/v2/{parent}/networks', request)
        
        query_params = utils.get_query_params(operations.BaremetalsolutionProjectsLocationsNetworksListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BaremetalsolutionProjectsLocationsNetworksListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListNetworksResponse])
                res.list_networks_response = out

        return res

    def baremetalsolution_projects_locations_networks_list_network_usage(self, request: operations.BaremetalsolutionProjectsLocationsNetworksListNetworkUsageRequest, security: operations.BaremetalsolutionProjectsLocationsNetworksListNetworkUsageSecurity) -> operations.BaremetalsolutionProjectsLocationsNetworksListNetworkUsageResponse:
        r"""List all Networks (and used IPs for each Network) in the vendor account associated with the specified project."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BaremetalsolutionProjectsLocationsNetworksListNetworkUsageRequest, base_url, '/v2/{location}/networks:listNetworkUsage', request)
        
        query_params = utils.get_query_params(operations.BaremetalsolutionProjectsLocationsNetworksListNetworkUsageRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BaremetalsolutionProjectsLocationsNetworksListNetworkUsageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListNetworkUsageResponse])
                res.list_network_usage_response = out

        return res

    def baremetalsolution_projects_locations_nfs_shares_create(self, request: operations.BaremetalsolutionProjectsLocationsNfsSharesCreateRequest, security: operations.BaremetalsolutionProjectsLocationsNfsSharesCreateSecurity) -> operations.BaremetalsolutionProjectsLocationsNfsSharesCreateResponse:
        r"""Create an NFS share."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BaremetalsolutionProjectsLocationsNfsSharesCreateRequest, base_url, '/v2/{parent}/nfsShares', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "nfs_share_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.BaremetalsolutionProjectsLocationsNfsSharesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BaremetalsolutionProjectsLocationsNfsSharesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def baremetalsolution_projects_locations_nfs_shares_list(self, request: operations.BaremetalsolutionProjectsLocationsNfsSharesListRequest, security: operations.BaremetalsolutionProjectsLocationsNfsSharesListSecurity) -> operations.BaremetalsolutionProjectsLocationsNfsSharesListResponse:
        r"""List NFS shares."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BaremetalsolutionProjectsLocationsNfsSharesListRequest, base_url, '/v2/{parent}/nfsShares', request)
        
        query_params = utils.get_query_params(operations.BaremetalsolutionProjectsLocationsNfsSharesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BaremetalsolutionProjectsLocationsNfsSharesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListNfsSharesResponse])
                res.list_nfs_shares_response = out

        return res

    def baremetalsolution_projects_locations_provisioning_configs_create(self, request: operations.BaremetalsolutionProjectsLocationsProvisioningConfigsCreateRequest, security: operations.BaremetalsolutionProjectsLocationsProvisioningConfigsCreateSecurity) -> operations.BaremetalsolutionProjectsLocationsProvisioningConfigsCreateResponse:
        r"""Create new ProvisioningConfig."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BaremetalsolutionProjectsLocationsProvisioningConfigsCreateRequest, base_url, '/v2/{parent}/provisioningConfigs', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "provisioning_config_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.BaremetalsolutionProjectsLocationsProvisioningConfigsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BaremetalsolutionProjectsLocationsProvisioningConfigsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProvisioningConfig])
                res.provisioning_config = out

        return res

    def baremetalsolution_projects_locations_provisioning_configs_submit(self, request: operations.BaremetalsolutionProjectsLocationsProvisioningConfigsSubmitRequest, security: operations.BaremetalsolutionProjectsLocationsProvisioningConfigsSubmitSecurity) -> operations.BaremetalsolutionProjectsLocationsProvisioningConfigsSubmitResponse:
        r"""Submit a provisiong configuration for a given project."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BaremetalsolutionProjectsLocationsProvisioningConfigsSubmitRequest, base_url, '/v2/{parent}/provisioningConfigs:submit', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "submit_provisioning_config_request_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.BaremetalsolutionProjectsLocationsProvisioningConfigsSubmitRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BaremetalsolutionProjectsLocationsProvisioningConfigsSubmitResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SubmitProvisioningConfigResponse])
                res.submit_provisioning_config_response = out

        return res

    def baremetalsolution_projects_locations_provisioning_quotas_list(self, request: operations.BaremetalsolutionProjectsLocationsProvisioningQuotasListRequest, security: operations.BaremetalsolutionProjectsLocationsProvisioningQuotasListSecurity) -> operations.BaremetalsolutionProjectsLocationsProvisioningQuotasListResponse:
        r"""List the budget details to provision resources on a given project."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BaremetalsolutionProjectsLocationsProvisioningQuotasListRequest, base_url, '/v2/{parent}/provisioningQuotas', request)
        
        query_params = utils.get_query_params(operations.BaremetalsolutionProjectsLocationsProvisioningQuotasListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BaremetalsolutionProjectsLocationsProvisioningQuotasListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListProvisioningQuotasResponse])
                res.list_provisioning_quotas_response = out

        return res

    def baremetalsolution_projects_locations_ssh_keys_create(self, request: operations.BaremetalsolutionProjectsLocationsSSHKeysCreateRequest, security: operations.BaremetalsolutionProjectsLocationsSSHKeysCreateSecurity) -> operations.BaremetalsolutionProjectsLocationsSSHKeysCreateResponse:
        r"""Register a public SSH key in the specified project for use with the interactive serial console feature."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BaremetalsolutionProjectsLocationsSSHKeysCreateRequest, base_url, '/v2/{parent}/sshKeys', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "ssh_key_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.BaremetalsolutionProjectsLocationsSSHKeysCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BaremetalsolutionProjectsLocationsSSHKeysCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SSHKey])
                res.ssh_key = out

        return res

    def baremetalsolution_projects_locations_ssh_keys_list(self, request: operations.BaremetalsolutionProjectsLocationsSSHKeysListRequest, security: operations.BaremetalsolutionProjectsLocationsSSHKeysListSecurity) -> operations.BaremetalsolutionProjectsLocationsSSHKeysListResponse:
        r"""Lists the public SSH keys registered for the specified project. These SSH keys are used only for the interactive serial console feature."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BaremetalsolutionProjectsLocationsSSHKeysListRequest, base_url, '/v2/{parent}/sshKeys', request)
        
        query_params = utils.get_query_params(operations.BaremetalsolutionProjectsLocationsSSHKeysListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BaremetalsolutionProjectsLocationsSSHKeysListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListSSHKeysResponse])
                res.list_ssh_keys_response = out

        return res

    def baremetalsolution_projects_locations_volumes_list(self, request: operations.BaremetalsolutionProjectsLocationsVolumesListRequest, security: operations.BaremetalsolutionProjectsLocationsVolumesListSecurity) -> operations.BaremetalsolutionProjectsLocationsVolumesListResponse:
        r"""List storage volumes in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BaremetalsolutionProjectsLocationsVolumesListRequest, base_url, '/v2/{parent}/volumes', request)
        
        query_params = utils.get_query_params(operations.BaremetalsolutionProjectsLocationsVolumesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BaremetalsolutionProjectsLocationsVolumesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListVolumesResponse])
                res.list_volumes_response = out

        return res

    def baremetalsolution_projects_locations_volumes_luns_evict(self, request: operations.BaremetalsolutionProjectsLocationsVolumesLunsEvictRequest, security: operations.BaremetalsolutionProjectsLocationsVolumesLunsEvictSecurity) -> operations.BaremetalsolutionProjectsLocationsVolumesLunsEvictResponse:
        r"""Skips lun's cooloff and deletes it now. Lun must be in cooloff state."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BaremetalsolutionProjectsLocationsVolumesLunsEvictRequest, base_url, '/v2/{name}:evict', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.BaremetalsolutionProjectsLocationsVolumesLunsEvictRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BaremetalsolutionProjectsLocationsVolumesLunsEvictResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def baremetalsolution_projects_locations_volumes_luns_list(self, request: operations.BaremetalsolutionProjectsLocationsVolumesLunsListRequest, security: operations.BaremetalsolutionProjectsLocationsVolumesLunsListSecurity) -> operations.BaremetalsolutionProjectsLocationsVolumesLunsListResponse:
        r"""List storage volume luns for given storage volume."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BaremetalsolutionProjectsLocationsVolumesLunsListRequest, base_url, '/v2/{parent}/luns', request)
        
        query_params = utils.get_query_params(operations.BaremetalsolutionProjectsLocationsVolumesLunsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BaremetalsolutionProjectsLocationsVolumesLunsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListLunsResponse])
                res.list_luns_response = out

        return res

    def baremetalsolution_projects_locations_volumes_patch(self, request: operations.BaremetalsolutionProjectsLocationsVolumesPatchRequest, security: operations.BaremetalsolutionProjectsLocationsVolumesPatchSecurity) -> operations.BaremetalsolutionProjectsLocationsVolumesPatchResponse:
        r"""Update details of a single storage volume."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BaremetalsolutionProjectsLocationsVolumesPatchRequest, base_url, '/v2/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "volume_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.BaremetalsolutionProjectsLocationsVolumesPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BaremetalsolutionProjectsLocationsVolumesPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def baremetalsolution_projects_locations_volumes_rename(self, request: operations.BaremetalsolutionProjectsLocationsVolumesRenameRequest, security: operations.BaremetalsolutionProjectsLocationsVolumesRenameSecurity) -> operations.BaremetalsolutionProjectsLocationsVolumesRenameResponse:
        r"""RenameVolume sets a new name for a volume. Use with caution, previous names become immediately invalidated."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BaremetalsolutionProjectsLocationsVolumesRenameRequest, base_url, '/v2/{name}:rename', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "rename_volume_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.BaremetalsolutionProjectsLocationsVolumesRenameRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BaremetalsolutionProjectsLocationsVolumesRenameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Volume])
                res.volume = out

        return res

    def baremetalsolution_projects_locations_volumes_resize(self, request: operations.BaremetalsolutionProjectsLocationsVolumesResizeRequest, security: operations.BaremetalsolutionProjectsLocationsVolumesResizeSecurity) -> operations.BaremetalsolutionProjectsLocationsVolumesResizeResponse:
        r"""Emergency Volume resize."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BaremetalsolutionProjectsLocationsVolumesResizeRequest, base_url, '/v2/{volume}:resize', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "resize_volume_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.BaremetalsolutionProjectsLocationsVolumesResizeRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BaremetalsolutionProjectsLocationsVolumesResizeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def baremetalsolution_projects_locations_volumes_snapshots_create(self, request: operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsCreateRequest, security: operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsCreateSecurity) -> operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsCreateResponse:
        r"""Takes a snapshot of a boot volume. Returns INVALID_ARGUMENT if called for a non-boot volume."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsCreateRequest, base_url, '/v2/{parent}/snapshots', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "volume_snapshot_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.VolumeSnapshot])
                res.volume_snapshot = out

        return res

    def baremetalsolution_projects_locations_volumes_snapshots_delete(self, request: operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsDeleteRequest, security: operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsDeleteSecurity) -> operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsDeleteResponse:
        r"""Deletes a volume snapshot. Returns INVALID_ARGUMENT if called for a non-boot volume."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsDeleteRequest, base_url, '/v2/{name}', request)
        
        query_params = utils.get_query_params(operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def baremetalsolution_projects_locations_volumes_snapshots_get(self, request: operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsGetRequest, security: operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsGetSecurity) -> operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsGetResponse:
        r"""Returns the specified snapshot resource. Returns INVALID_ARGUMENT if called for a non-boot volume."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsGetRequest, base_url, '/v2/{name}', request)
        
        query_params = utils.get_query_params(operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.VolumeSnapshot])
                res.volume_snapshot = out

        return res

    def baremetalsolution_projects_locations_volumes_snapshots_list(self, request: operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsListRequest, security: operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsListSecurity) -> operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsListResponse:
        r"""Retrieves the list of snapshots for the specified volume. Returns a response with an empty list of snapshots if called for a non-boot volume."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsListRequest, base_url, '/v2/{parent}/snapshots', request)
        
        query_params = utils.get_query_params(operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListVolumeSnapshotsResponse])
                res.list_volume_snapshots_response = out

        return res

    def baremetalsolution_projects_locations_volumes_snapshots_restore_volume_snapshot(self, request: operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsRestoreVolumeSnapshotRequest, security: operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsRestoreVolumeSnapshotSecurity) -> operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsRestoreVolumeSnapshotResponse:
        r"""Uses the specified snapshot to restore its parent volume. Returns INVALID_ARGUMENT if called for a non-boot volume."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsRestoreVolumeSnapshotRequest, base_url, '/v2/{volumeSnapshot}:restoreVolumeSnapshot', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsRestoreVolumeSnapshotRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsRestoreVolumeSnapshotResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    