<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Association 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Returns list of matching associations of a given type
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAssociationBySubjectAndAssocTypeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAssociationBySubjectAndAssocTypeResponse
     */
	public function getAssociationBySubjectAndAssocType(
        \OpenAPI\OpenAPI\Models\Operations\GetAssociationBySubjectAndAssocTypeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAssociationBySubjectAndAssocTypeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/association/type/{association_type}', \OpenAPI\OpenAPI\Models\Operations\GetAssociationBySubjectAndAssocTypeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAssociationBySubjectAndAssocTypeRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAssociationBySubjectAndAssocTypeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\AssociationResults>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns list of matching associations between a given subject and object category
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAssociationBySubjectAndObjectCategorySearchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAssociationBySubjectAndObjectCategorySearchResponse
     */
	public function getAssociationBySubjectAndObjectCategorySearch(
        \OpenAPI\OpenAPI\Models\Operations\GetAssociationBySubjectAndObjectCategorySearchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAssociationBySubjectAndObjectCategorySearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/association/find/{subject_category}/{object_category}', \OpenAPI\OpenAPI\Models\Operations\GetAssociationBySubjectAndObjectCategorySearchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAssociationBySubjectAndObjectCategorySearchRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAssociationBySubjectAndObjectCategorySearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\AssociationResults>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns list of matching associations for a given subject category
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAssociationBySubjectCategorySearchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAssociationBySubjectCategorySearchResponse
     */
	public function getAssociationBySubjectCategorySearch(
        \OpenAPI\OpenAPI\Models\Operations\GetAssociationBySubjectCategorySearchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAssociationBySubjectCategorySearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/association/find/{subject_category}', \OpenAPI\OpenAPI\Models\Operations\GetAssociationBySubjectCategorySearchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAssociationBySubjectCategorySearchRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAssociationBySubjectCategorySearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\AssociationResults>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the association with a given identifier
     * 
     * An association connects, at a minimum, two things, designated subject and object,
     * via some relationship. Associations also include evidence, provenance etc.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAssociationObjectRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAssociationObjectResponse
     */
	public function getAssociationObject(
        \OpenAPI\OpenAPI\Models\Operations\GetAssociationObjectRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAssociationObjectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/association/{id}', \OpenAPI\OpenAPI\Models\Operations\GetAssociationObjectRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAssociationObjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\AssociationResults>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns associations connecting two entities
     * 
     * Given two entities (e.g. a particular gene and a particular disease), if these two entities
     * are connected (directly or indirectly), then return the association objects describing
     * the connection.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAssociationsBetweenRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAssociationsBetweenResponse
     */
	public function getAssociationsBetween(
        \OpenAPI\OpenAPI\Models\Operations\GetAssociationsBetweenRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAssociationsBetweenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/association/between/{subject}/{object}', \OpenAPI\OpenAPI\Models\Operations\GetAssociationsBetweenRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAssociationsBetweenRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAssociationsBetweenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\AssociationResults>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns list of matching associations starting from a given subject (source)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAssociationsFromRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAssociationsFromResponse
     */
	public function getAssociationsFrom(
        \OpenAPI\OpenAPI\Models\Operations\GetAssociationsFromRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAssociationsFromResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/association/from/{subject}', \OpenAPI\OpenAPI\Models\Operations\GetAssociationsFromRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAssociationsFromRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAssociationsFromResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\AssociationResults>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns list of matching associations pointing to a given object (target)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAssociationsToRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAssociationsToResponse
     */
	public function getAssociationsTo(
        \OpenAPI\OpenAPI\Models\Operations\GetAssociationsToRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAssociationsToResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/association/to/{object}', \OpenAPI\OpenAPI\Models\Operations\GetAssociationsToRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAssociationsToRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAssociationsToResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associationResults = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\AssociationResults>', 'json');
            }
        }

        return $response;
    }
}