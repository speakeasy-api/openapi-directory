// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetSalesCountCarTypeEnum - Inventory type for which sales count is to be searched, default is used
type GetSalesCountCarTypeEnum string

const (
	GetSalesCountCarTypeEnumNew  GetSalesCountCarTypeEnum = "new"
	GetSalesCountCarTypeEnumUsed GetSalesCountCarTypeEnum = "used"
)

func (e *GetSalesCountCarTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "new":
		fallthrough
	case "used":
		*e = GetSalesCountCarTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSalesCountCarTypeEnum: %s", s)
	}
}

// GetSalesCountCountryEnum - Country for which the sales records are to be searched
type GetSalesCountCountryEnum string

const (
	GetSalesCountCountryEnumUsLower GetSalesCountCountryEnum = "us"
	GetSalesCountCountryEnumCaLower GetSalesCountCountryEnum = "ca"
	GetSalesCountCountryEnumUsUpper GetSalesCountCountryEnum = "US"
	GetSalesCountCountryEnumCaUpper GetSalesCountCountryEnum = "CA"
)

func (e *GetSalesCountCountryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "us":
		fallthrough
	case "ca":
		fallthrough
	case "US":
		fallthrough
	case "CA":
		*e = GetSalesCountCountryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSalesCountCountryEnum: %s", s)
	}
}

type GetSalesCountRequest struct {
	// The API Authentication Key. Mandatory with all API calls.
	APIKey *string `queryParam:"style=form,explode=true,name=api_key"`
	// Inventory type for which sales count is to be searched, default is used
	CarType *GetSalesCountCarTypeEnum `queryParam:"style=form,explode=true,name=car_type"`
	// City level sales count, pipe seperated like city_state=jacksonville|FL
	CityState *string `queryParam:"style=form,explode=true,name=city_state"`
	// Country for which the sales records are to be searched
	Country *GetSalesCountCountryEnum `queryParam:"style=form,explode=true,name=country"`
	// Make for which sales count is to be searched
	Make *string `queryParam:"style=form,explode=true,name=make"`
	// Make-Model for which sales count is to be searched, pipe seperated like mm=ford|f-150
	Mm *string `queryParam:"style=form,explode=true,name=mm"`
	// State level sales count
	State *string `queryParam:"style=form,explode=true,name=state"`
	// taxonomy_vin for which sales count is to be searched
	TaxonomyVin *string `queryParam:"style=form,explode=true,name=taxonomy_vin"`
	// VIN that will be transformed to taxonomy_vin
	Vin *string `queryParam:"style=form,explode=true,name=vin"`
	// Year-Make-Model for which sales count is to be searched, pipe seperated like ymm=2015|ford|f-150
	Ymm *string `queryParam:"style=form,explode=true,name=ymm"`
	// Year-Make-Model-Trim for which sales count is to be searched, pipe seperated like ymmt=2015|ford|f-150|platinum
	Ymmt *string `queryParam:"style=form,explode=true,name=ymmt"`
}

type GetSalesCountResponse struct {
	ContentType string
	// Error
	Error *shared.Error
	// Sales count for given parameters
	Sales       *shared.Sales
	StatusCode  int
	RawResponse *http.Response
}
