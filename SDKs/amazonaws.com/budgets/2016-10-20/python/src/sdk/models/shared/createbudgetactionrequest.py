"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import actionthreshold as shared_actionthreshold
from ..shared import actiontype_enum as shared_actiontype_enum
from ..shared import approvalmodel_enum as shared_approvalmodel_enum
from ..shared import definition as shared_definition
from ..shared import notificationtype_enum as shared_notificationtype_enum
from ..shared import subscriber as shared_subscriber
from dataclasses_json import Undefined, dataclass_json
from sdk import utils


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateBudgetActionRequest:
    
    account_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountId') }})
    r"""The account ID of the user. It's a 12-digit number."""  
    action_threshold: shared_actionthreshold.ActionThreshold = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ActionThreshold') }})
    r"""The trigger threshold of the action."""  
    action_type: shared_actiontype_enum.ActionTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ActionType') }})  
    approval_model: shared_approvalmodel_enum.ApprovalModelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApprovalModel') }})  
    budget_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BudgetName') }})
    r"""A string that represents the budget name. The \\":\\" and \\"\\\" characters aren't allowed."""  
    definition: shared_definition.Definition = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Definition') }})
    r"""Specifies all of the type-specific parameters."""  
    execution_role_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExecutionRoleArn') }})  
    notification_type: shared_notificationtype_enum.NotificationTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NotificationType') }})
    r"""The type of a notification. It must be ACTUAL or FORECASTED."""  
    subscribers: list[shared_subscriber.Subscriber] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Subscribers') }})
    r"""A list of subscribers."""  
    