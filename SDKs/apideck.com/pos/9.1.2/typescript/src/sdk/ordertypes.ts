/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class OrderTypes {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Create Order Type
   *
   * @remarks
   * Create Order Type
   */
  orderTypesAdd(
    req: operations.OrderTypesAddRequest,
    security: operations.OrderTypesAddSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OrderTypesAddResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.OrderTypesAddRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/pos/order-types";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "orderTypeInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.OrderTypesAddSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OrderTypesAddResponse =
        new operations.OrderTypesAddResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createOrderTypeResponse = utils.objectToClass(
              httpRes?.data,
              shared.CreateOrderTypeResponse
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.badRequestResponse = utils.objectToClass(
              httpRes?.data,
              shared.BadRequestResponse
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unauthorizedResponse = utils.objectToClass(
              httpRes?.data,
              shared.UnauthorizedResponse
            );
          }
          break;
        case httpRes?.status == 402:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.paymentRequiredResponse = utils.objectToClass(
              httpRes?.data,
              shared.PaymentRequiredResponse
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notFoundResponse = utils.objectToClass(
              httpRes?.data,
              shared.NotFoundResponse
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unprocessableResponse = utils.objectToClass(
              httpRes?.data,
              shared.UnprocessableResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unexpectedErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.UnexpectedErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List Order Types
   *
   * @remarks
   * List Order Types
   */
  orderTypesAll(
    req: operations.OrderTypesAllRequest,
    security: operations.OrderTypesAllSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OrderTypesAllResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.OrderTypesAllRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/pos/order-types";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.OrderTypesAllSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OrderTypesAllResponse =
        new operations.OrderTypesAllResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getOrderTypesResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetOrderTypesResponse
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.badRequestResponse = utils.objectToClass(
              httpRes?.data,
              shared.BadRequestResponse
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unauthorizedResponse = utils.objectToClass(
              httpRes?.data,
              shared.UnauthorizedResponse
            );
          }
          break;
        case httpRes?.status == 402:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.paymentRequiredResponse = utils.objectToClass(
              httpRes?.data,
              shared.PaymentRequiredResponse
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notFoundResponse = utils.objectToClass(
              httpRes?.data,
              shared.NotFoundResponse
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unprocessableResponse = utils.objectToClass(
              httpRes?.data,
              shared.UnprocessableResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unexpectedErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.UnexpectedErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete Order Type
   *
   * @remarks
   * Delete Order Type
   */
  orderTypesDelete(
    req: operations.OrderTypesDeleteRequest,
    security: operations.OrderTypesDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OrderTypesDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.OrderTypesDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/pos/order-types/{id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.OrderTypesDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OrderTypesDeleteResponse =
        new operations.OrderTypesDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteOrderTypeResponse = utils.objectToClass(
              httpRes?.data,
              shared.DeleteOrderTypeResponse
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.badRequestResponse = utils.objectToClass(
              httpRes?.data,
              shared.BadRequestResponse
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unauthorizedResponse = utils.objectToClass(
              httpRes?.data,
              shared.UnauthorizedResponse
            );
          }
          break;
        case httpRes?.status == 402:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.paymentRequiredResponse = utils.objectToClass(
              httpRes?.data,
              shared.PaymentRequiredResponse
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notFoundResponse = utils.objectToClass(
              httpRes?.data,
              shared.NotFoundResponse
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unprocessableResponse = utils.objectToClass(
              httpRes?.data,
              shared.UnprocessableResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unexpectedErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.UnexpectedErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Order Type
   *
   * @remarks
   * Get Order Type
   */
  orderTypesOne(
    req: operations.OrderTypesOneRequest,
    security: operations.OrderTypesOneSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OrderTypesOneResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.OrderTypesOneRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/pos/order-types/{id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.OrderTypesOneSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OrderTypesOneResponse =
        new operations.OrderTypesOneResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getOrderTypeResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetOrderTypeResponse
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.badRequestResponse = utils.objectToClass(
              httpRes?.data,
              shared.BadRequestResponse
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unauthorizedResponse = utils.objectToClass(
              httpRes?.data,
              shared.UnauthorizedResponse
            );
          }
          break;
        case httpRes?.status == 402:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.paymentRequiredResponse = utils.objectToClass(
              httpRes?.data,
              shared.PaymentRequiredResponse
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notFoundResponse = utils.objectToClass(
              httpRes?.data,
              shared.NotFoundResponse
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unprocessableResponse = utils.objectToClass(
              httpRes?.data,
              shared.UnprocessableResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unexpectedErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.UnexpectedErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update Order Type
   *
   * @remarks
   * Update Order Type
   */
  orderTypesUpdate(
    req: operations.OrderTypesUpdateRequest,
    security: operations.OrderTypesUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OrderTypesUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.OrderTypesUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/pos/order-types/{id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "orderTypeInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.OrderTypesUpdateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OrderTypesUpdateResponse =
        new operations.OrderTypesUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateOrderTypeResponse = utils.objectToClass(
              httpRes?.data,
              shared.UpdateOrderTypeResponse
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.badRequestResponse = utils.objectToClass(
              httpRes?.data,
              shared.BadRequestResponse
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unauthorizedResponse = utils.objectToClass(
              httpRes?.data,
              shared.UnauthorizedResponse
            );
          }
          break;
        case httpRes?.status == 402:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.paymentRequiredResponse = utils.objectToClass(
              httpRes?.data,
              shared.PaymentRequiredResponse
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notFoundResponse = utils.objectToClass(
              httpRes?.data,
              shared.NotFoundResponse
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unprocessableResponse = utils.objectToClass(
              httpRes?.data,
              shared.UnprocessableResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unexpectedErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.UnexpectedErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
