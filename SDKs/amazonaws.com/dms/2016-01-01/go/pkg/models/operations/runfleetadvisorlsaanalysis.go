// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// RunFleetAdvisorLsaAnalysisXAmzTargetEnum
type RunFleetAdvisorLsaAnalysisXAmzTargetEnum string

const (
	RunFleetAdvisorLsaAnalysisXAmzTargetEnumAmazonDmSv20160101RunFleetAdvisorLsaAnalysis RunFleetAdvisorLsaAnalysisXAmzTargetEnum = "AmazonDMSv20160101.RunFleetAdvisorLsaAnalysis"
)

func (e *RunFleetAdvisorLsaAnalysisXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AmazonDMSv20160101.RunFleetAdvisorLsaAnalysis":
		*e = RunFleetAdvisorLsaAnalysisXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RunFleetAdvisorLsaAnalysisXAmzTargetEnum: %s", s)
	}
}

type RunFleetAdvisorLsaAnalysisRequest struct {
	XAmzAlgorithm     *string                                  `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                  `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                  `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                  `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                  `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                  `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                  `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        RunFleetAdvisorLsaAnalysisXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type RunFleetAdvisorLsaAnalysisResponse struct {
	ContentType string
	// InvalidResourceStateFault
	InvalidResourceStateFault interface{}
	// ResourceNotFoundFault
	ResourceNotFoundFault interface{}
	// Success
	RunFleetAdvisorLsaAnalysisResponse *shared.RunFleetAdvisorLsaAnalysisResponse
	StatusCode                         int
	RawResponse                        *http.Response
}
