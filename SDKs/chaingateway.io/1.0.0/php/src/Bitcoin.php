<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Bitcoin 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * createWallet
     * 
     * createWallet
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreatewalletRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreatewalletResponse
     */
	public function createwallet(
        \OpenAPI\OpenAPI\Models\Operations\CreatewalletRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreatewalletResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bitcoin/wallets');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreatewalletResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createwallet200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Createwallet200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createWalletAddress
     * 
     * createWalletAddress
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreatewalletaddressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreatewalletaddressResponse
     */
	public function createwalletaddress(
        \OpenAPI\OpenAPI\Models\Operations\CreatewalletaddressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreatewalletaddressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bitcoin/wallets/{wallet_name}/addresses', \OpenAPI\OpenAPI\Models\Operations\CreatewalletaddressRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreatewalletaddressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createwalletaddress200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Createwalletaddress200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createwalletaddress422ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Createwalletaddress422ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * deleteWallet
     * 
     * deleteWallet
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeletewalletRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeletewalletResponse
     */
	public function deletewallet(
        \OpenAPI\OpenAPI\Models\Operations\DeletewalletRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeletewalletResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bitcoin/wallets/{walletname}', \OpenAPI\OpenAPI\Models\Operations\DeletewalletRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeletewalletResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deletewallet200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Deletewallet200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * exportAddressPrivateKey
     * 
     * exportAddressPrivateKey
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportaddressprivatekeyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportaddressprivatekeyResponse
     */
	public function exportaddressprivatekey(
        \OpenAPI\OpenAPI\Models\Operations\ExportaddressprivatekeyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ExportaddressprivatekeyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bitcoin/wallets/{name}/addresses/{address}/export', \OpenAPI\OpenAPI\Models\Operations\ExportaddressprivatekeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportaddressprivatekeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->exportaddressprivatekey200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Exportaddressprivatekey200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->exportaddressprivatekey422ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Exportaddressprivatekey422ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getBlock
     * 
     * getBlock
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Getblock4Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Getblock4Response
     */
	public function getblock4(
        \OpenAPI\OpenAPI\Models\Operations\Getblock4Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Getblock4Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bitcoin/blocks/{block}', \OpenAPI\OpenAPI\Models\Operations\Getblock4Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Getblock4Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getblock4200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getblock4200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getBlockchaIninfo
     * 
     * getBlockchaIninfo
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetblockchaininfoResponse
     */
	public function getblockchaininfo(
    ): \OpenAPI\OpenAPI\Models\Operations\GetblockchaininfoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bitcoin/info');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetblockchaininfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getblockchaininfo200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getblockchaininfo200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getFees
     * 
     * The fees are parted into three categroies
     * 
     * fast (10min / 1 block)  
     * medium (30 min / 3 blocks)  
     * slow (60 min / 6 blocks)
     * 
     * this tells you in wich block distance your transaction get confirmed. A block is around \~10 minutes.
     * 
     * Please note that fees are dynamic by transaction size. This is only an estimation!
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetfeesResponse
     */
	public function getfees(
    ): \OpenAPI\OpenAPI\Models\Operations\GetfeesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bitcoin/fees');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetfeesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getfees200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getfees200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getLastBlockNumber
     * 
     * Get the latest block number
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\Getlastblocknumber4Response
     */
	public function getlastblocknumber4(
    ): \OpenAPI\OpenAPI\Models\Operations\Getlastblocknumber4Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bitcoin/blocks/number');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Getlastblocknumber4Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getlastblocknumber4200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getlastblocknumber4200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getTransaction
     * 
     * You can get your transaction decoded by add /decoded to your api call. If you want to get the transaction encoded, youst remove the /decoded part
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Gettransaction4Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Gettransaction4Response
     */
	public function gettransaction4(
        \OpenAPI\OpenAPI\Models\Operations\Gettransaction4Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Gettransaction4Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bitcoin/transactions/{id}/decoded', \OpenAPI\OpenAPI\Models\Operations\Gettransaction4Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Gettransaction4Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gettransaction4200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Gettransaction4200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getWallet
     * 
     * getWallet
     * 
     * @param string $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetwalletResponse
     */
	public function getwallet(
        string $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetwalletResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bitcoin/wallets');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "raw");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetwalletResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getwallet200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getwallet200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getWalletAddresses
     * 
     * getWalletAddresses
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetwalletaddressesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetwalletaddressesResponse
     */
	public function getwalletaddresses(
        \OpenAPI\OpenAPI\Models\Operations\GetwalletaddressesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetwalletaddressesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bitcoin/wallets/{wallet_name}/addresses', \OpenAPI\OpenAPI\Models\Operations\GetwalletaddressesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetwalletaddressesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getwalletaddresses200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getwalletaddresses200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getwalletaddresses422ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getwalletaddresses422ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listFailedIPNs
     * 
     * Returns all subscriptions/IPNs created with an account.
     * 
     * @param string $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Listfailedipns4Response
     */
	public function listfailedipns4(
        string $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Listfailedipns4Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bitcoin/webhooks/notifications/failed');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "raw");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Listfailedipns4Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listfailedipns4200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Listfailedipns4200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listSubscribedAddresses
     * 
     * Returns all subscriptions/IPNs created with an account.
     * 
     * @param string $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Listsubscribedaddresses4Response
     */
	public function listsubscribedaddresses4(
        string $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Listsubscribedaddresses4Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bitcoin/webhooks');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "raw");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Listsubscribedaddresses4Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listsubscribedaddresses4200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Listsubscribedaddresses4200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * resendFailedIPN
     * 
     * Returns all subscriptions/IPNs created with an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Resendfailedipn4Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Resendfailedipn4Response
     */
	public function resendfailedipn4(
        \OpenAPI\OpenAPI\Models\Operations\Resendfailedipn4Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Resendfailedipn4Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bitcoin/webhooks/notifications/failed/{notification_id}', \OpenAPI\OpenAPI\Models\Operations\Resendfailedipn4Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Resendfailedipn4Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resendfailedipn4200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Resendfailedipn4200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * sendTransaction
     * 
     * sendTransaction
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Sendtransaction4RequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Sendtransaction4Response
     */
	public function sendtransaction4(
        \OpenAPI\OpenAPI\Models\Operations\Sendtransaction4RequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Sendtransaction4Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bitcoin/transactions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Sendtransaction4Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 400) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sendtransaction4400ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Sendtransaction4400ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sendtransaction4422ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Sendtransaction4422ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * subscribeAddress
     * 
     * Creates a new subscription/IPN for the given address (and contractaddress). You will receive a notification to the given url every time a deposit is received. Unsubscribe the address before sending tokens/ETH from it or you won't get reliable notifications anymore.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Subscribeaddress4RequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Subscribeaddress4Response
     */
	public function subscribeaddress4(
        \OpenAPI\OpenAPI\Models\Operations\Subscribeaddress4RequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Subscribeaddress4Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bitcoin/webhooks');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Subscribeaddress4Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->subscribeaddress4200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Subscribeaddress4200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * unsubscribeAddress
     * 
     * Deletes an existing subscription/IPN for the given address (and contractaddress).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Unsubscribeaddress4Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Unsubscribeaddress4Response
     */
	public function unsubscribeaddress4(
        \OpenAPI\OpenAPI\Models\Operations\Unsubscribeaddress4Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Unsubscribeaddress4Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/bitcoin/webhooks/{id}', \OpenAPI\OpenAPI\Models\Operations\Unsubscribeaddress4Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Unsubscribeaddress4Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unsubscribeaddress4200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Unsubscribeaddress4200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}