/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { SqlParameter } from "./sqlparameter";
import { StatusStringEnum } from "./statusstringenum";
import { SubStatementData } from "./substatementdata";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Success
 */
export class DescribeStatementResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "ClusterIdentifier" })
  clusterIdentifier?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "CreatedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "Database" })
  database?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "DbUser" })
  dbUser?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Duration" })
  duration?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "Error" })
  error?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "HasResultSet" })
  hasResultSet?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "Id" })
  id: string;

  @SpeakeasyMetadata({ elemType: SqlParameter })
  @Expose({ name: "QueryParameters" })
  @Type(() => SqlParameter)
  queryParameters?: SqlParameter[];

  @SpeakeasyMetadata()
  @Expose({ name: "QueryString" })
  queryString?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "RedshiftPid" })
  redshiftPid?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "RedshiftQueryId" })
  redshiftQueryId?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "ResultRows" })
  resultRows?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "ResultSize" })
  resultSize?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "SecretArn" })
  secretArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Status" })
  status?: StatusStringEnum;

  @SpeakeasyMetadata({ elemType: SubStatementData })
  @Expose({ name: "SubStatements" })
  @Type(() => SubStatementData)
  subStatements?: SubStatementData[];

  @SpeakeasyMetadata()
  @Expose({ name: "UpdatedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "WorkgroupName" })
  workgroupName?: string;
}
