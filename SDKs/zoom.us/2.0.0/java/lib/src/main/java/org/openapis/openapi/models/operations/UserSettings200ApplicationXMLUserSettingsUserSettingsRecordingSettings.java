/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;



public class UserSettings200ApplicationXMLUserSettingsUserSettingsRecordingSettings {
    /**
     * Ask host to confirm the disclaimer.
     */
    
    public Boolean askHostToConfirmDisclaimer;
    public UserSettings200ApplicationXMLUserSettingsUserSettingsRecordingSettings withAskHostToConfirmDisclaimer(Boolean askHostToConfirmDisclaimer) {
        this.askHostToConfirmDisclaimer = askHostToConfirmDisclaimer;
        return this;
    }
    
    /**
     * This field can be used if `recording_disclaimer` is set to true. This field indicates whether or not you would like to ask participants for consent when a recording starts. The value can be one of the following:&lt;br&gt;
     * * `true`: Ask participants for consent when a recording starts. &lt;br&gt;
     * * `false`: Do not ask participants for consent when a recording starts.
     */
    
    public Boolean askParticipantsToConsentDisclaimer;
    public UserSettings200ApplicationXMLUserSettingsUserSettingsRecordingSettings withAskParticipantsToConsentDisclaimer(Boolean askParticipantsToConsentDisclaimer) {
        this.askParticipantsToConsentDisclaimer = askParticipantsToConsentDisclaimer;
        return this;
    }
    
    /**
     * Auto delete cloud recordings.
     */
    
    public Boolean autoDeleteCmr;
    public UserSettings200ApplicationXMLUserSettingsUserSettingsRecordingSettings withAutoDeleteCmr(Boolean autoDeleteCmr) {
        this.autoDeleteCmr = autoDeleteCmr;
        return this;
    }
    
    /**
     * A specified number of days of auto delete cloud recordings.
     */
    
    public Long autoDeleteCmrDays;
    public UserSettings200ApplicationXMLUserSettingsUserSettingsRecordingSettings withAutoDeleteCmrDays(Long autoDeleteCmrDays) {
        this.autoDeleteCmrDays = autoDeleteCmrDays;
        return this;
    }
    
    /**
     * Automatic recording:&lt;br&gt;`local` - Record on local.&lt;br&gt;`cloud` - Record on cloud.&lt;br&gt;`none` - Disabled.
     */
    
    public UserSettings200ApplicationXMLUserSettingsUserSettingsRecordingSettingsAutoRecordingEnum autoRecording;
    public UserSettings200ApplicationXMLUserSettingsUserSettingsRecordingSettings withAutoRecording(UserSettings200ApplicationXMLUserSettingsUserSettingsRecordingSettingsAutoRecordingEnum autoRecording) {
        this.autoRecording = autoRecording;
        return this;
    }
    
    /**
     * Cloud recording.
     */
    
    public Boolean cloudRecording;
    public UserSettings200ApplicationXMLUserSettingsUserSettingsRecordingSettings withCloudRecording(Boolean cloudRecording) {
        this.cloudRecording = cloudRecording;
        return this;
    }
    
    /**
     * Host can pause/stop the auto recording in the cloud.
     */
    
    public Boolean hostPauseStopRecording;
    public UserSettings200ApplicationXMLUserSettingsUserSettingsRecordingSettings withHostPauseStopRecording(Boolean hostPauseStopRecording) {
        this.hostPauseStopRecording = hostPauseStopRecording;
        return this;
    }
    
    /**
     * Setting to allow cloud recording access only from specific IP address ranges.
     * 
     */
    
    public UserSettings200ApplicationXMLUserSettingsUserSettingsRecordingSettingsIpAddressAccessControl ipAddressAccessControl;
    public UserSettings200ApplicationXMLUserSettingsUserSettingsRecordingSettings withIpAddressAccessControl(UserSettings200ApplicationXMLUserSettingsUserSettingsRecordingSettingsIpAddressAccessControl ipAddressAccessControl) {
        this.ipAddressAccessControl = ipAddressAccessControl;
        return this;
    }
    
    /**
     * Local recording.
     */
    
    public Boolean localRecording;
    public UserSettings200ApplicationXMLUserSettingsUserSettingsRecordingSettings withLocalRecording(Boolean localRecording) {
        this.localRecording = localRecording;
        return this;
    }
    
    /**
     * Record an audio only file.
     */
    
    public Boolean recordAudioFile;
    public UserSettings200ApplicationXMLUserSettingsUserSettingsRecordingSettings withRecordAudioFile(Boolean recordAudioFile) {
        this.recordAudioFile = recordAudioFile;
        return this;
    }
    
    /**
     * Record the gallery view.
     */
    
    public Boolean recordGalleryView;
    public UserSettings200ApplicationXMLUserSettingsUserSettingsRecordingSettings withRecordGalleryView(Boolean recordGalleryView) {
        this.recordGalleryView = recordGalleryView;
        return this;
    }
    
    /**
     * Record the active speaker view.
     */
    
    public Boolean recordSpeakerView;
    public UserSettings200ApplicationXMLUserSettingsUserSettingsRecordingSettings withRecordSpeakerView(Boolean recordSpeakerView) {
        this.recordSpeakerView = recordSpeakerView;
        return this;
    }
    
    /**
     * Audio transcript.
     */
    
    public Boolean recordingAudioTranscript;
    public UserSettings200ApplicationXMLUserSettingsUserSettingsRecordingSettings withRecordingAudioTranscript(Boolean recordingAudioTranscript) {
        this.recordingAudioTranscript = recordingAudioTranscript;
        return this;
    }
    
    /**
     * Show a disclaimer to participants before a recording starts
     * 
     */
    
    public Boolean recordingDisclaimer;
    public UserSettings200ApplicationXMLUserSettingsUserSettingsRecordingSettings withRecordingDisclaimer(Boolean recordingDisclaimer) {
        this.recordingDisclaimer = recordingDisclaimer;
        return this;
    }
    
    /**
     * This object represents the minimum passcode requirements set for recordings via Account Recording Settings.
     */
    
    public UserSettings200ApplicationXMLUserSettingsUserSettingsRecordingSettingsRecordingPasswordRequirement recordingPasswordRequirement;
    public UserSettings200ApplicationXMLUserSettingsUserSettingsRecordingSettings withRecordingPasswordRequirement(UserSettings200ApplicationXMLUserSettingsUserSettingsRecordingSettingsRecordingPasswordRequirement recordingPasswordRequirement) {
        this.recordingPasswordRequirement = recordingPasswordRequirement;
        return this;
    }
    
    /**
     * Save chat text from the meeting.
     */
    
    public Boolean saveChatText;
    public UserSettings200ApplicationXMLUserSettingsUserSettingsRecordingSettings withSaveChatText(Boolean saveChatText) {
        this.saveChatText = saveChatText;
        return this;
    }
    
    /**
     * Show timestamp on video.
     */
    
    public Boolean showTimestamp;
    public UserSettings200ApplicationXMLUserSettingsUserSettingsRecordingSettings withShowTimestamp(Boolean showTimestamp) {
        this.showTimestamp = showTimestamp;
        return this;
    }
    
}
