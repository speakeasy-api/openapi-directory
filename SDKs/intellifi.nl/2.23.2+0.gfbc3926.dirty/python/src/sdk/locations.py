"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Locations:
    r"""The `locations` resource is an abstraction for the area around a physical location that items can be localized at.
    https://intellifi.zendesk.com/hc/en-us/articles/360007502554
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_location(self, request: shared.LocationInput) -> operations.AddLocationResponse:
        r"""Create location"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/locations'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddLocationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseDefaultResource])
                res.response_default_resource = out

        return res

    def delete_location(self, request: operations.DeleteLocationRequest) -> operations.DeleteLocationResponse:
        r"""Delete location"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteLocationRequest, base_url, '/locations/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteLocationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseDefaultResource])
                res.response_default_resource = out

        return res

    def get_location_by_id(self, request: operations.GetLocationByIDRequest) -> operations.GetLocationByIDResponse:
        r"""Get location"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetLocationByIDRequest, base_url, '/locations/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetLocationByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Location])
                res.location = out

        return res

    def get_locations(self, request: operations.GetLocationsRequest) -> operations.GetLocationsResponse:
        r"""Get all locations"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/locations'
        
        query_params = utils.get_query_params(operations.GetLocationsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetLocationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetLocations200ApplicationJSON])
                res.get_locations_200_application_json_object = out

        return res

    def update_location(self, request: operations.UpdateLocationRequest) -> operations.UpdateLocationResponse:
        r"""Update existing location"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateLocationRequest, base_url, '/locations/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "location_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateLocationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseDefaultResource])
                res.response_default_resource = out

        return res

    