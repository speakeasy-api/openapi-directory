<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class PortfolioOptimizationMeanVariance 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Maximum Return Portfolio
     * 
     * Compute the asset weights of the maximum return portfolio, optionally subject to:  
     * * Minimum and maximum weights constraints
     * * Maximum group weights constraints
     * * Minimum and maximum portfolio exposure constraints
     * 
     * References
     *  * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumReturnRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumReturnResponse
     */
	public function postPortfolioOptimizationMaximumReturn(
        \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumReturnRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumReturnResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/portfolio/optimization/maximum-return');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumReturnResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postPortfolioOptimizationMaximumReturn200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumReturn200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Diversified Maximum Return Portfolio
     * 
     * Compute the asset weights of the diversified maximum return portfolio, as defined in the first reference, optionally subject to:  
     * * Minimum and maximum weights constraints
     * * Maximum group weights constraints
     * * Minimum and maximum portfolio exposure constraints
     * 
     * The diversification measure used in the optimization procedure is the [Herfindahl-Hirschman Index](https://en.wikipedia.org/wiki/Herfindahl%E2%80%93Hirschman_index) of the assets weights.
     * 
     * References
     *  * [Alejandro Corvalan, 2005. Well Diversified Efficient Portfolios, Working Papers Central Bank of Chile 336, Central Bank of Chile](https://ideas.repec.org/p/chb/bcchwp/336.html)
     *  * [Bouchaud, Jean-Philippe and Potters, Marc and Aguilar, Jean-Pierre, Missing Information and Asset Allocation, arXiv, 1997](https://arxiv.org/abs/cond-mat/9707042)
     *  * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumReturnDiversifiedRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumReturnDiversifiedResponse
     */
	public function postPortfolioOptimizationMaximumReturnDiversified(
        \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumReturnDiversifiedRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumReturnDiversifiedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/portfolio/optimization/maximum-return/diversified');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumReturnDiversifiedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postPortfolioOptimizationMaximumReturnDiversified200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumReturnDiversified200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Subset Resampling-Based Maximum Return Portfolio
     * 
     * Compute the asset weights of the subset resampling-based maximum return portfolio, following the methodology described in the first and the second references, optionally subject to:  
     * * Minimum and maximum weights constraints
     * * Maximum group weights constraints
     * * Minimum and maximum portfolio exposure constraints
     * 
     * References
     *  * [CSSA, Random Subspace Optimization (RSO)](https://cssanalytics.wordpress.com/2013/10/06/random-subspace-optimization-rso/)
     *  * [Subset Optimization for Asset Allocation,Benjamin J. Gillen](https://www.bengillen.com/uploads/1/2/3/8/123891022/subsets.pdf)
     *  * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumReturnSubsetResamplingBasedRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumReturnSubsetResamplingBasedResponse
     */
	public function postPortfolioOptimizationMaximumReturnSubsetResamplingBased(
        \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumReturnSubsetResamplingBasedRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumReturnSubsetResamplingBasedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/portfolio/optimization/maximum-return/subset-resampling-based');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumReturnSubsetResamplingBasedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postPortfolioOptimizationMaximumReturnSubsetResamplingBased200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumReturnSubsetResamplingBased200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Maximum Sharpe Ratio Portfolio
     * 
     * Compute the asset weights of the maximum Sharpe ratio portfolio, optionally subject to:  
     * * Minimum and maximum weights constraints
     * * Maximum group weights constraints
     * * Minimum and maximum portfolio exposure constraints
     * 
     * References
     *  * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumSharpeRatioRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumSharpeRatioResponse
     */
	public function postPortfolioOptimizationMaximumSharpeRatio(
        \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumSharpeRatioRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumSharpeRatioResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/portfolio/optimization/maximum-sharpe-ratio');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumSharpeRatioResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postPortfolioOptimizationMaximumSharpeRatio200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumSharpeRatio200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Diversified Maximum Sharpe Ratio Portfolio
     * 
     * Compute the asset weights of the diversified maximum Sharpe ratio portfolio, as defined in the first reference, optionally subject to:  
     * * Minimum and maximum weights constraints
     * * Maximum group weights constraints
     * * Minimum and maximum portfolio exposure constraints
     * 
     * The diversification measure used in the optimization procedure is the [Herfindahl-Hirschman Index](https://en.wikipedia.org/wiki/Herfindahl%E2%80%93Hirschman_index) of the assets weights.
     * 
     * References
     *  * [Alejandro Corvalan, 2005. Well Diversified Efficient Portfolios, Working Papers Central Bank of Chile 336, Central Bank of Chile](https://ideas.repec.org/p/chb/bcchwp/336.html)
     *  * [Bouchaud, Jean-Philippe and Potters, Marc and Aguilar, Jean-Pierre, Missing Information and Asset Allocation, arXiv, 1997](https://arxiv.org/abs/cond-mat/9707042)
     *  * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumSharpeRatioDiversifiedRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumSharpeRatioDiversifiedResponse
     */
	public function postPortfolioOptimizationMaximumSharpeRatioDiversified(
        \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumSharpeRatioDiversifiedRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumSharpeRatioDiversifiedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/portfolio/optimization/maximum-sharpe-ratio/diversified');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumSharpeRatioDiversifiedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postPortfolioOptimizationMaximumSharpeRatioDiversified200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumSharpeRatioDiversified200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Subset Resampling-Based Maximum Sharpe Ratio Portfolio
     * 
     * Compute the asset weights of the susbet resampling-based maximum Sharpe ratio portfolio, following the methodology described in the first and the second references, optionally subject to:  
     * * Minimum and maximum weights constraints
     * * Maximum group weights constraints
     * * Minimum and maximum portfolio exposure constraints
     * 
     * References
     *  * [CSSA, Random Subspace Optimization (RSO)](https://cssanalytics.wordpress.com/2013/10/06/random-subspace-optimization-rso/)
     *  * [Subset Optimization for Asset Allocation,Benjamin J. Gillen](https://www.bengillen.com/uploads/1/2/3/8/123891022/subsets.pdf)
     *  * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedResponse
     */
	public function postPortfolioOptimizationMaximumSharpeRatioSubsetResamplingBased(
        \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/portfolio/optimization/maximum-sharpe-ratio/subset-resampling-based');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postPortfolioOptimizationMaximumSharpeRatioSubsetResamplingBased200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMaximumSharpeRatioSubsetResamplingBased200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Mean-Variance Efficient Portfolio
     * 
     * Compute the asset weights of a mean-variance efficient portfolio, optionally subject to:  
     * * Minimum and maximum weights constraints
     * * Maximum group weights constraints
     * * Minimum and maximum portfolio exposure constraints
     * 
     * > A mean-variance efficient portfolio is a portfolio belonging to [the mean-variance efficient frontier](#post-/portfolio/analysis/mean-variance/efficient-frontier).
     * 
     * References
     *  * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMeanVarianceEfficientRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMeanVarianceEfficientResponse
     */
	public function postPortfolioOptimizationMeanVarianceEfficient(
        \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMeanVarianceEfficientRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMeanVarianceEfficientResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/portfolio/optimization/mean-variance-efficient');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMeanVarianceEfficientResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postPortfolioOptimizationMeanVarianceEfficient200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMeanVarianceEfficient200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Diversified Mean-Variance Efficient Portfolio
     * 
     * Compute the asset weights of a diversified mean-variance efficient portfolio, as defined in the first reference, optionally subject to:  
     * * Minimum and maximum weights constraints
     * * Maximum group weights constraints
     * * Minimum and maximum portfolio exposure constraints
     * 
     * The diversification measure used in the optimization procedure is the [Herfindahl-Hirschman Index](https://en.wikipedia.org/wiki/Herfindahl%E2%80%93Hirschman_index) of the assets weights.
     * 
     * > A diversified mean-variance efficient portfolio does NOT belong to [the mean-variance efficient frontier](#post-/portfolio/analysis/mean-variance/efficient-frontier), but is close to this frontier.
     * 
     * References
     *  * [Alejandro Corvalan, 2005. Well Diversified Efficient Portfolios, Working Papers Central Bank of Chile 336, Central Bank of Chile](https://ideas.repec.org/p/chb/bcchwp/336.html)
     *  * [Bouchaud, Jean-Philippe and Potters, Marc and Aguilar, Jean-Pierre, Missing Information and Asset Allocation, arXiv, 1997](https://arxiv.org/abs/cond-mat/9707042)
     *  * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMeanVarianceEfficientDiversifiedRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMeanVarianceEfficientDiversifiedResponse
     */
	public function postPortfolioOptimizationMeanVarianceEfficientDiversified(
        \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMeanVarianceEfficientDiversifiedRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMeanVarianceEfficientDiversifiedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/portfolio/optimization/mean-variance-efficient/diversified');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMeanVarianceEfficientDiversifiedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postPortfolioOptimizationMeanVarianceEfficientDiversified200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMeanVarianceEfficientDiversified200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Subset Resampling-Based Mean-Variance Efficient Portfolio
     * 
     * Compute the asset weights of a subset resampling-based  mean-variance efficient portfolio, following the methodology described in the first and the second references, optionally subject to:  
     * * Minimum and maximum weights constraints
     * * Maximum group weights constraints
     * * Minimum and maximum portfolio exposure constraints
     * 
     * References
     *  * [CSSA, Random Subspace Optimization (RSO)](https://cssanalytics.wordpress.com/2013/10/06/random-subspace-optimization-rso/)
     *  * [Subset Optimization for Asset Allocation,Benjamin J. Gillen](https://www.bengillen.com/uploads/1/2/3/8/123891022/subsets.pdf)
     *  * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMeanVarianceEfficientSubsetResamplingBasedRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMeanVarianceEfficientSubsetResamplingBasedResponse
     */
	public function postPortfolioOptimizationMeanVarianceEfficientSubsetResamplingBased(
        \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMeanVarianceEfficientSubsetResamplingBasedRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMeanVarianceEfficientSubsetResamplingBasedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/portfolio/optimization/mean-variance-efficient/subset-resampling-based');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMeanVarianceEfficientSubsetResamplingBasedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postPortfolioOptimizationMeanVarianceEfficientSubsetResamplingBased200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMeanVarianceEfficientSubsetResamplingBased200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Minimum Variance Portfolio
     * 
     * Compute the asset weights of the minimum variance portfolio, optionally subject to:  
     * * Minimum and maximum weights constraints
     * * Maximum group weights constraints
     * * Minimum and maximum portfolio exposure constraints
     * 
     * References
     *  * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMinimumVarianceRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMinimumVarianceResponse
     */
	public function postPortfolioOptimizationMinimumVariance(
        \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMinimumVarianceRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMinimumVarianceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/portfolio/optimization/minimum-variance');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMinimumVarianceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postPortfolioOptimizationMinimumVariance200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMinimumVariance200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Diversified Minimum Variance Portfolio
     * 
     * Compute the asset weights of the diversified minimum variance portfolio, as defined in the first reference, optionally subject to:  
     * * Minimum and maximum weights constraints
     * * Maximum group weights constraints
     * * Minimum and maximum portfolio exposure constraints
     * 
     * The diversification measure used in the optimization procedure is the [Herfindahl-Hirschman Index](https://en.wikipedia.org/wiki/Herfindahl%E2%80%93Hirschman_index) of the assets weights.
     * 
     * References
     *  * [Alejandro Corvalan, 2005. Well Diversified Efficient Portfolios, Working Papers Central Bank of Chile 336, Central Bank of Chile](https://ideas.repec.org/p/chb/bcchwp/336.html)
     *  * [Bouchaud, Jean-Philippe and Potters, Marc and Aguilar, Jean-Pierre, Missing Information and Asset Allocation, arXiv, 1997](https://arxiv.org/abs/cond-mat/9707042)
     *  * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMinimumVarianceDiversifiedRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMinimumVarianceDiversifiedResponse
     */
	public function postPortfolioOptimizationMinimumVarianceDiversified(
        \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMinimumVarianceDiversifiedRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMinimumVarianceDiversifiedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/portfolio/optimization/minimum-variance/diversified');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMinimumVarianceDiversifiedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postPortfolioOptimizationMinimumVarianceDiversified200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMinimumVarianceDiversified200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Subset Resampling-Based Minimum Variance Portfolio
     * 
     * Compute the asset weights of the subset resampling-based minimum variance portfolio, following the methodology described in the first and the second references, optionally subject to:  
     * * Minimum and maximum weights constraints
     * * Maximum group weights constraints
     * * Minimum and maximum portfolio exposure constraints
     * 
     * References
     *  * [CSSA, Random Subspace Optimization (RSO)](https://cssanalytics.wordpress.com/2013/10/06/random-subspace-optimization-rso/)
     *  * [Subset Optimization for Asset Allocation,Benjamin J. Gillen](https://www.bengillen.com/uploads/1/2/3/8/123891022/subsets.pdf)
     *  * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMinimumVarianceSubsetResamplingBasedRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMinimumVarianceSubsetResamplingBasedResponse
     */
	public function postPortfolioOptimizationMinimumVarianceSubsetResamplingBased(
        \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMinimumVarianceSubsetResamplingBasedRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMinimumVarianceSubsetResamplingBasedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/portfolio/optimization/minimum-variance/subset-resampling-based');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMinimumVarianceSubsetResamplingBasedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postPortfolioOptimizationMinimumVarianceSubsetResamplingBased200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostPortfolioOptimizationMinimumVarianceSubsetResamplingBased200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}