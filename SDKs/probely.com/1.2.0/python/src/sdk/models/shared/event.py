"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import eventobjecttype_enum as shared_eventobjecttype_enum
from ..shared import eventtype_enum as shared_eventtype_enum
from ..shared import webhook as shared_webhook
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Event:
    r"""A Probely event"""
    
    content: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content'), 'exclude': lambda f: f is None }})
    r"""Event object."""  
    event_type: Optional[shared_eventtype_enum.EventTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('event_type'), 'exclude': lambda f: f is None }})
    r"""Event type:
    - `user_created` new user added to account
    - `user_deleted` user deleted from account
    - `target_created` new target added to account
    - `target_deleted` target deleted from account
    - `target_verified` target ownership verified
    - `target_verification_failed` target ownership verification failed
    - `scan_started` scan started on target
    - `scan_canceled` scan on target canceled
    - `scan_completed` scan finished with successfuly
    - `scan_failed` scan finished unsuccessfuly
    - `finding_detected` new finding detected (not found before)
    - `finding_fixed` finding was fixed
    """  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Object id."""  
    object_type: Optional[shared_eventobjecttype_enum.EventObjectTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('object_type'), 'exclude': lambda f: f is None }})
    r"""Type of object in the event content."""  
    ocurred_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ocurred_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date time of when the event occurred"""  
    webhooks: Optional[list[shared_webhook.Webhook]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webhooks'), 'exclude': lambda f: f is None }})  
    