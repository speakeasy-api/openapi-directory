"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import documentlist as shared_documentlist
from ..shared import listordertype_enum as shared_listordertype_enum
from enum import Enum
from typing import Optional

class GetDocumentsOrderByEnum(str, Enum):
    ID = 'id'
    UPDATED_AT = 'updated_at'
    CREATED_AT = 'created_at'
    NAME = 'name'

class GetDocumentsTypeFilterEnum(str, Enum):
    ALL = 'ALL'
    TEXT_DOCUMENTS = 'TEXT_DOCUMENTS'
    PRESENTATIONS = 'PRESENTATIONS'
    SPREADSHEETS = 'SPREADSHEETS'
    PDFS = 'PDFS'
    IMAGES = 'IMAGES'
    SUBTITLES = 'SUBTITLES'
    DESIGNS = 'DESIGNS'
    LOCALIZATION = 'LOCALIZATION'
    WEB = 'WEB'
    STYLE_GUIDES = 'STYLE_GUIDES'
    GLOSSARIES = 'GLOSSARIES'

class GetDocumentsWithEnum(str, Enum):
    PREVIEW = 'preview'
    EDITORS = 'editors'


@dataclasses.dataclass
class GetDocumentsRequest:
    
    language_code: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'language_code', 'style': 'form', 'explode': True }})
    r"""searches in source language of documents, in source and target languages of document's quote"""  
    order_by: Optional[GetDocumentsOrderByEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'order_by', 'style': 'form', 'explode': True }})  
    order_type: Optional[shared_listordertype_enum.ListOrderTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'order_type', 'style': 'form', 'explode': True }})  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})  
    recent: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'recent', 'style': 'form', 'explode': True }})
    r"""When true, this will return the most 4 recent active documents."""  
    search: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search', 'style': 'form', 'explode': True }})  
    type_filter: Optional[GetDocumentsTypeFilterEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'type_filter', 'style': 'form', 'explode': True }})  
    with_: Optional[list[GetDocumentsWithEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'with[]', 'style': 'form', 'explode': True }})
    r"""Attach further information. Possible values 'preview' to fetch temporary preview URLs. This is NOT recommended to be used with list calls. Only use with[]=preview for single document/style guide calls."""  
    

@dataclasses.dataclass
class GetDocumentsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    document_list: Optional[shared_documentlist.DocumentList] = dataclasses.field(default=None)
    r"""Document list"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    