/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * LogEvent - Log event information
 */
public class LogEvent {
    /**
     * Attribute 1
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attribute1")
    public String attribute1;
    public LogEvent withAttribute1(String attribute1) {
        this.attribute1 = attribute1;
        return this;
    }
    
    /**
     * Attribute 2
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attribute2")
    public String attribute2;
    public LogEvent withAttribute2(String attribute2) {
        this.attribute2 = attribute2;
        return this;
    }
    
    /**
     * Attribute 3
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attribute3")
    public String attribute3;
    public LogEvent withAttribute3(String attribute3) {
        this.attribute3 = attribute3;
        return this;
    }
    
    /**
     * Auth parent source ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authParentSource")
    public String authParentSource;
    public LogEvent withAuthParentSource(String authParentSource) {
        this.authParentSource = authParentSource;
        return this;
    }
    
    /**
     * Auth parent target ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authParentTarget")
    public String authParentTarget;
    public LogEvent withAuthParentTarget(String authParentTarget) {
        this.authParentTarget = authParentTarget;
        return this;
    }
    
    /**
     * Unique identifier for the customer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customerId")
    public Long customerId;
    public LogEvent withCustomerId(Long customerId) {
        this.customerId = customerId;
        return this;
    }
    
    /**
     * Event ID
     */
    @JsonProperty("id")
    public Long id;
    public LogEvent withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * Event description
     */
    @JsonProperty("message")
    public String message;
    public LogEvent withMessage(String message) {
        this.message = message;
        return this;
    }
    
    /**
     * Object ID 1
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("objectId1")
    public Long objectId1;
    public LogEvent withObjectId1(Long objectId1) {
        this.objectId1 = objectId1;
        return this;
    }
    
    /**
     * Object ID 2
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("objectId2")
    public Long objectId2;
    public LogEvent withObjectId2(Long objectId2) {
        this.objectId2 = objectId2;
        return this;
    }
    
    /**
     * Object name 1
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("objectName1")
    public String objectName1;
    public LogEvent withObjectName1(String objectName1) {
        this.objectName1 = objectName1;
        return this;
    }
    
    /**
     * Object name 2
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("objectName2")
    public String objectName2;
    public LogEvent withObjectName2(String objectName2) {
        this.objectName2 = objectName2;
        return this;
    }
    
    /**
     * Object type 1
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("objectType1")
    public Integer objectType1;
    public LogEvent withObjectType1(Integer objectType1) {
        this.objectType1 = objectType1;
        return this;
    }
    
    /**
     * Object type 2
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("objectType2")
    public Integer objectType2;
    public LogEvent withObjectType2(Integer objectType2) {
        this.objectType2 = objectType2;
        return this;
    }
    
    /**
     * Operation type ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("operationId")
    public Integer operationId;
    public LogEvent withOperationId(Integer operationId) {
        this.operationId = operationId;
        return this;
    }
    
    /**
     * Operation name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("operationName")
    public String operationName;
    public LogEvent withOperationName(String operationName) {
        this.operationName = operationName;
        return this;
    }
    
    /**
     * Operation status:
     * 
     * * `0` - Success
     * 
     * * `2` - Error
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public LogEventStatusEnum status;
    public LogEvent withStatus(LogEventStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * Event timestamp
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("time")
    public OffsetDateTime time;
    public LogEvent withTime(OffsetDateTime time) {
        this.time = time;
        return this;
    }
    
    /**
     * Client
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userClient")
    public String userClient;
    public LogEvent withUserClient(String userClient) {
        this.userClient = userClient;
        return this;
    }
    
    /**
     * Unique identifier for the user
     */
    @JsonProperty("userId")
    public Long userId;
    public LogEvent withUserId(Long userId) {
        this.userId = userId;
        return this;
    }
    
    /**
     * User IP
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userIp")
    public String userIp;
    public LogEvent withUserIp(String userIp) {
        this.userIp = userIp;
        return this;
    }
    
    /**
     * Username
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userName")
    public String userName;
    public LogEvent withUserName(String userName) {
        this.userName = userName;
        return this;
    }
    
}
