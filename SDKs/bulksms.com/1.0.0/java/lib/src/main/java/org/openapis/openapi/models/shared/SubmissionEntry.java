/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * SubmissionEntry - An object that you use when posting messages.
 */
public class SubmissionEntry {
    /**
     * The message content as described in the `encoding`. If the `encoding` is BINARY, the body must contain only hexadecimal digits where one byte is represented as two digits. For example, if you want to send two bytes '0x05' and '0x1F', the message body must contain the text '051F'.
     * 
     * The message content can also contain templates, read the [body templates section](#tag/Message) for more information.
     * 
     */
    @JsonProperty("body")
    public String body;
    public SubmissionEntry withBody(String body) {
        this.body = body;
        return this;
    }
    
    /**
     * The type of delivery reports to request from the delivering network.
     * The default value  is `ALL`. Please note that not all networks support delivery reports.
     * ALL. All possible delivery reports
     * ERRORS. Only error delivery reports
     * NONE. No delivery reports
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deliveryReports")
    public SubmissionEntryDeliveryReportsEnum deliveryReports;
    public SubmissionEntry withDeliveryReports(SubmissionEntryDeliveryReportsEnum deliveryReports) {
        this.deliveryReports = deliveryReports;
        return this;
    }
    
    /**
     * Describes the content of the message body.
     * 
     * Typically this is TEXT, which is the default if no value is provided.
     * 
     * If you need to send characters that are not covered by the [GSM 03.38](https://en.wikipedia.org/wiki/GSM_03.38) character set you will need to specify UNICODE.
     * 
     * If you want to send a sequence of bytes, you must use BINARY.
     * 
     * You can also or use the `auto-unicode` parameter of the Send Messages Operation.   
     * 
     * If you supply the value of `TEXT` while `auto-unicode` is `true` then your message may be converted to `UNICODE`.
     * 
     * If you supply a value other than `TEXT` for this property while `auto-unicode` is `true` then no automatic conversion will take place.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encoding")
    public SubmissionEntryEncodingEnum encoding;
    public SubmissionEntry withEncoding(SubmissionEntryEncodingEnum encoding) {
        this.encoding = encoding;
        return this;
    }
    
    /**
     * Identifies the sender.
     * 
     * Instead of a structured object, you can supply a string value here. 
     * If you do this, the `type` of the sender is derived to be either INTERNATIONAL or ALPHANUMERIC.  If the value does not begin with a `+` and it contains at least one character that is not a digit, the type is detected as ALPHANUMERIC. Otherwise, the type is detected as INTERNATIONAL.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("from")
    public SubmissionEntryFrom from;
    public SubmissionEntry withFrom(SubmissionEntryFrom from) {
        this.from = from;
        return this;
    }
    
    /**
     * The maximum number of message parts that can be used for a [concatenated message](https://en.wikipedia.org/wiki/Concatenated_SMS).
     * The default is `3`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("longMessageMaxParts")
    public Integer longMessageMaxParts;
    public SubmissionEntry withLongMessageMaxParts(Integer longMessageMaxParts) {
        this.longMessageMaxParts = longMessageMaxParts;
        return this;
    }
    
    /**
     * The class of the message, as specified by \u00a74 of the GSM 03.38 specification.
     * 
     * You can provide either an integer value, or a mnemonic string.
     * 
     * The default value is SIM_SPECIFIC.
     * Numeric values are
     * | Name | Value|
     * |------|------|
     * | FLASH_SMS | 0      |
     * | ME_SPECIFIC | 1    |
     * | SIM_SPECIFIC | 2   |
     * | TE_SPECIFIC | 3   |
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("messageClass")
    public SubmissionEntryMessageClassEnum messageClass;
    public SubmissionEntry withMessageClass(SubmissionEntryMessageClassEnum messageClass) {
        this.messageClass = messageClass;
        return this;
    }
    
    /**
     * The TP-PID value from GSM 03.40[.750] \u00a79.2.3.9.
     * 
     * You can provide either an integer value, or a mnemonic string.
     * 
     * If unspecified, this property defaults to `0`, representing the IMPLICIT value.
     * Numeric values are listed below
     * | Name | Value|
     * |----- |------|
     * | IMPLICIT              | 00 |
     * | SHORT_MESSAGE_TYPE_0  | 64 |
     * | REPLACE_MESSAGE_1     | 65 |
     * | REPLACE_MESSAGE_2     | 66 |
     * | REPLACE_MESSAGE_3     | 67 |
     * | REPLACE_MESSAGE_4     | 68 |
     * | REPLACE_MESSAGE_5     | 69 |
     * | REPLACE_MESSAGE_6     | 70 |
     * | REPLACE_MESSAGE_7     | 71 |
     * | RETURN_CALL           | 95 |
     * | ME_DOWNLOAD           | 125 |
     * | ME_DEPERSONALIZE      | 126 |
     * | SIM_DOWNLOAD          | 127 |
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("protocolId")
    public SubmissionEntryProtocolIdEnum protocolId;
    public SubmissionEntry withProtocolId(SubmissionEntryProtocolIdEnum protocolId) {
        this.protocolId = protocolId;
        return this;
    }
    
    /**
     * Allows you to choose routing. The default is STANDARD.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("routingGroup")
    public SubmissionEntryRoutingGroupEnum routingGroup;
    public SubmissionEntry withRoutingGroup(SubmissionEntryRoutingGroupEnum routingGroup) {
        this.routingGroup = routingGroup;
        return this;
    }
    
    /**
     * Identifies the recipients
     * 
     * Instead of an array of structured objects, you can also provide a single object, a simple string or an array of strings.
     * If you supply a string, the `type` is taken as INTERNATIONAL.
     * 
     */
    @JsonProperty("to")
    public SubmissionEntryTo[] to;
    public SubmissionEntry withTo(SubmissionEntryTo[] to) {
        this.to = to;
        return this;
    }
    
    /**
     * Correlate the messages created from this submission to your data.
     * 
     * The value can contain no more than 20 characters.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userSuppliedId")
    public String userSuppliedId;
    public SubmissionEntry withUserSuppliedId(String userSuppliedId) {
        this.userSuppliedId = userSuppliedId;
        return this;
    }
    
}
