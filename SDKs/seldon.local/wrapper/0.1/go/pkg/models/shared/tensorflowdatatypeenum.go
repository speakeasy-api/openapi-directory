// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TensorflowDataTypeEnum - - DT_INVALID: Not a legal value for DataType.  Used to indicate a DataType field
// has not been set.
//   - DT_FLOAT: Data types that all computation devices are expected to be
//
// capable to support.
//   - DT_FLOAT_REF: Do not use!  These are only for parameters.  Every enum above
//
// should have a corresponding value below (verified by types_test).
type TensorflowDataTypeEnum string

const (
	TensorflowDataTypeEnumDtInvalid       TensorflowDataTypeEnum = "DT_INVALID"
	TensorflowDataTypeEnumDtFloat         TensorflowDataTypeEnum = "DT_FLOAT"
	TensorflowDataTypeEnumDtDouble        TensorflowDataTypeEnum = "DT_DOUBLE"
	TensorflowDataTypeEnumDtInt32         TensorflowDataTypeEnum = "DT_INT32"
	TensorflowDataTypeEnumDtUint8         TensorflowDataTypeEnum = "DT_UINT8"
	TensorflowDataTypeEnumDtInt16         TensorflowDataTypeEnum = "DT_INT16"
	TensorflowDataTypeEnumDtInt8          TensorflowDataTypeEnum = "DT_INT8"
	TensorflowDataTypeEnumDtString        TensorflowDataTypeEnum = "DT_STRING"
	TensorflowDataTypeEnumDtComplex64     TensorflowDataTypeEnum = "DT_COMPLEX64"
	TensorflowDataTypeEnumDtInt64         TensorflowDataTypeEnum = "DT_INT64"
	TensorflowDataTypeEnumDtBool          TensorflowDataTypeEnum = "DT_BOOL"
	TensorflowDataTypeEnumDtQint8         TensorflowDataTypeEnum = "DT_QINT8"
	TensorflowDataTypeEnumDtQuint8        TensorflowDataTypeEnum = "DT_QUINT8"
	TensorflowDataTypeEnumDtQint32        TensorflowDataTypeEnum = "DT_QINT32"
	TensorflowDataTypeEnumDtBfloat16      TensorflowDataTypeEnum = "DT_BFLOAT16"
	TensorflowDataTypeEnumDtQint16        TensorflowDataTypeEnum = "DT_QINT16"
	TensorflowDataTypeEnumDtQuint16       TensorflowDataTypeEnum = "DT_QUINT16"
	TensorflowDataTypeEnumDtUint16        TensorflowDataTypeEnum = "DT_UINT16"
	TensorflowDataTypeEnumDtComplex128    TensorflowDataTypeEnum = "DT_COMPLEX128"
	TensorflowDataTypeEnumDtHalf          TensorflowDataTypeEnum = "DT_HALF"
	TensorflowDataTypeEnumDtResource      TensorflowDataTypeEnum = "DT_RESOURCE"
	TensorflowDataTypeEnumDtVariant       TensorflowDataTypeEnum = "DT_VARIANT"
	TensorflowDataTypeEnumDtUint32        TensorflowDataTypeEnum = "DT_UINT32"
	TensorflowDataTypeEnumDtUint64        TensorflowDataTypeEnum = "DT_UINT64"
	TensorflowDataTypeEnumDtFloatRef      TensorflowDataTypeEnum = "DT_FLOAT_REF"
	TensorflowDataTypeEnumDtDoubleRef     TensorflowDataTypeEnum = "DT_DOUBLE_REF"
	TensorflowDataTypeEnumDtInt32Ref      TensorflowDataTypeEnum = "DT_INT32_REF"
	TensorflowDataTypeEnumDtUint8Ref      TensorflowDataTypeEnum = "DT_UINT8_REF"
	TensorflowDataTypeEnumDtInt16Ref      TensorflowDataTypeEnum = "DT_INT16_REF"
	TensorflowDataTypeEnumDtInt8Ref       TensorflowDataTypeEnum = "DT_INT8_REF"
	TensorflowDataTypeEnumDtStringRef     TensorflowDataTypeEnum = "DT_STRING_REF"
	TensorflowDataTypeEnumDtComplex64Ref  TensorflowDataTypeEnum = "DT_COMPLEX64_REF"
	TensorflowDataTypeEnumDtInt64Ref      TensorflowDataTypeEnum = "DT_INT64_REF"
	TensorflowDataTypeEnumDtBoolRef       TensorflowDataTypeEnum = "DT_BOOL_REF"
	TensorflowDataTypeEnumDtQint8Ref      TensorflowDataTypeEnum = "DT_QINT8_REF"
	TensorflowDataTypeEnumDtQuint8Ref     TensorflowDataTypeEnum = "DT_QUINT8_REF"
	TensorflowDataTypeEnumDtQint32Ref     TensorflowDataTypeEnum = "DT_QINT32_REF"
	TensorflowDataTypeEnumDtBfloat16Ref   TensorflowDataTypeEnum = "DT_BFLOAT16_REF"
	TensorflowDataTypeEnumDtQint16Ref     TensorflowDataTypeEnum = "DT_QINT16_REF"
	TensorflowDataTypeEnumDtQuint16Ref    TensorflowDataTypeEnum = "DT_QUINT16_REF"
	TensorflowDataTypeEnumDtUint16Ref     TensorflowDataTypeEnum = "DT_UINT16_REF"
	TensorflowDataTypeEnumDtComplex128Ref TensorflowDataTypeEnum = "DT_COMPLEX128_REF"
	TensorflowDataTypeEnumDtHalfRef       TensorflowDataTypeEnum = "DT_HALF_REF"
	TensorflowDataTypeEnumDtResourceRef   TensorflowDataTypeEnum = "DT_RESOURCE_REF"
	TensorflowDataTypeEnumDtVariantRef    TensorflowDataTypeEnum = "DT_VARIANT_REF"
	TensorflowDataTypeEnumDtUint32Ref     TensorflowDataTypeEnum = "DT_UINT32_REF"
	TensorflowDataTypeEnumDtUint64Ref     TensorflowDataTypeEnum = "DT_UINT64_REF"
)

func (e *TensorflowDataTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DT_INVALID":
		fallthrough
	case "DT_FLOAT":
		fallthrough
	case "DT_DOUBLE":
		fallthrough
	case "DT_INT32":
		fallthrough
	case "DT_UINT8":
		fallthrough
	case "DT_INT16":
		fallthrough
	case "DT_INT8":
		fallthrough
	case "DT_STRING":
		fallthrough
	case "DT_COMPLEX64":
		fallthrough
	case "DT_INT64":
		fallthrough
	case "DT_BOOL":
		fallthrough
	case "DT_QINT8":
		fallthrough
	case "DT_QUINT8":
		fallthrough
	case "DT_QINT32":
		fallthrough
	case "DT_BFLOAT16":
		fallthrough
	case "DT_QINT16":
		fallthrough
	case "DT_QUINT16":
		fallthrough
	case "DT_UINT16":
		fallthrough
	case "DT_COMPLEX128":
		fallthrough
	case "DT_HALF":
		fallthrough
	case "DT_RESOURCE":
		fallthrough
	case "DT_VARIANT":
		fallthrough
	case "DT_UINT32":
		fallthrough
	case "DT_UINT64":
		fallthrough
	case "DT_FLOAT_REF":
		fallthrough
	case "DT_DOUBLE_REF":
		fallthrough
	case "DT_INT32_REF":
		fallthrough
	case "DT_UINT8_REF":
		fallthrough
	case "DT_INT16_REF":
		fallthrough
	case "DT_INT8_REF":
		fallthrough
	case "DT_STRING_REF":
		fallthrough
	case "DT_COMPLEX64_REF":
		fallthrough
	case "DT_INT64_REF":
		fallthrough
	case "DT_BOOL_REF":
		fallthrough
	case "DT_QINT8_REF":
		fallthrough
	case "DT_QUINT8_REF":
		fallthrough
	case "DT_QINT32_REF":
		fallthrough
	case "DT_BFLOAT16_REF":
		fallthrough
	case "DT_QINT16_REF":
		fallthrough
	case "DT_QUINT16_REF":
		fallthrough
	case "DT_UINT16_REF":
		fallthrough
	case "DT_COMPLEX128_REF":
		fallthrough
	case "DT_HALF_REF":
		fallthrough
	case "DT_RESOURCE_REF":
		fallthrough
	case "DT_VARIANT_REF":
		fallthrough
	case "DT_UINT32_REF":
		fallthrough
	case "DT_UINT64_REF":
		*e = TensorflowDataTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TensorflowDataTypeEnum: %s", s)
	}
}
