"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import accesseffect_enum as shared_accesseffect_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ImpersonationRule:
    r"""The rules for the given impersonation role."""
    
    effect: shared_accesseffect_enum.AccessEffectEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Effect') }})  
    impersonation_rule_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ImpersonationRuleId') }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})  
    not_target_users: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NotTargetUsers'), 'exclude': lambda f: f is None }})  
    target_users: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TargetUsers'), 'exclude': lambda f: f is None }})  
    