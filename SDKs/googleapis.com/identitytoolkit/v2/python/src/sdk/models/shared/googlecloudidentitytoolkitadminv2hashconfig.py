"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleCloudIdentitytoolkitAdminV2HashConfigAlgorithmEnum(str, Enum):
    r"""Output only. Different password hash algorithms used in Identity Toolkit."""
    HASH_ALGORITHM_UNSPECIFIED = 'HASH_ALGORITHM_UNSPECIFIED'
    HMAC_SHA256 = 'HMAC_SHA256'
    HMAC_SHA1 = 'HMAC_SHA1'
    HMAC_MD5 = 'HMAC_MD5'
    SCRYPT = 'SCRYPT'
    PBKDF_SHA1 = 'PBKDF_SHA1'
    MD5 = 'MD5'
    HMAC_SHA512 = 'HMAC_SHA512'
    SHA1 = 'SHA1'
    BCRYPT = 'BCRYPT'
    PBKDF2_SHA256 = 'PBKDF2_SHA256'
    SHA256 = 'SHA256'
    SHA512 = 'SHA512'
    STANDARD_SCRYPT = 'STANDARD_SCRYPT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudIdentitytoolkitAdminV2HashConfig:
    r"""History information of the hash algorithm and key. Different accounts' passwords may be generated by different version."""
    
    algorithm: Optional[GoogleCloudIdentitytoolkitAdminV2HashConfigAlgorithmEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('algorithm'), 'exclude': lambda f: f is None }})
    r"""Output only. Different password hash algorithms used in Identity Toolkit."""  
    memory_cost: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memoryCost'), 'exclude': lambda f: f is None }})
    r"""Output only. Memory cost for hash calculation. Used by scrypt and other similar password derivation algorithms. See https://tools.ietf.org/html/rfc7914 for explanation of field."""  
    rounds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rounds'), 'exclude': lambda f: f is None }})
    r"""Output only. How many rounds for hash calculation. Used by scrypt and other similar password derivation algorithms."""  
    salt_separator: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('saltSeparator'), 'exclude': lambda f: f is None }})
    r"""Output only. Non-printable character to be inserted between the salt and plain text password in base64."""  
    signer_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('signerKey'), 'exclude': lambda f: f is None }})
    r"""Output only. Signer key in base64."""  
    