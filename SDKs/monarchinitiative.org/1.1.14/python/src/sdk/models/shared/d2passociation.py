"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import annotationextension as shared_annotationextension
from ..shared import bioobjectcore as shared_bioobjectcore
from ..shared import entityreference as shared_entityreference
from ..shared import graph as shared_graph
from ..shared import relationref as shared_relationref
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class D2PAssociation:
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Association/annotation unique ID"""  
    object: shared_bioobjectcore.BioObjectCore = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('object') }})
    r"""Object (sensu RDF), aka target, e.g. HP:0000448, MP:0002109, DOID:14330"""  
    relation: shared_relationref.RelationRef = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relation') }})
    r"""Relationship type connecting subject and object"""  
    subject: shared_bioobjectcore.BioObjectCore = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subject') }})
    r"""Subject of association (what it is about), e.g. ClinVar:nnn, MGI:1201606"""  
    evidence_graph: Optional[shared_graph.Graph] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('evidence_graph'), 'exclude': lambda f: f is None }})
    r"""An indirect association is a join between two or more direct assocations, e.g. gene to disease via ortholog. We record the full set of associations as a graph object"""  
    evidence_types: Optional[list[shared_entityreference.EntityReference]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('evidence_types'), 'exclude': lambda f: f is None }})
    r"""Evidence types (ECO classes)"""  
    frequency: Optional[shared_entityreference.EntityReference] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('frequency'), 'exclude': lambda f: f is None }})
    r"""Frequency of phenotype in patients with disease"""  
    negated: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('negated'), 'exclude': lambda f: f is None }})
    r"""True if association is negated"""  
    object_eq: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('object_eq'), 'exclude': lambda f: f is None }})
    r"""Equivalent identifiers to object node"""  
    object_extensions: Optional[list[shared_annotationextension.AnnotationExtension]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('object_extensions'), 'exclude': lambda f: f is None }})  
    onset: Optional[shared_entityreference.EntityReference] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('onset'), 'exclude': lambda f: f is None }})
    r"""Onset of phenotype in disease process"""  
    provided_by: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provided_by'), 'exclude': lambda f: f is None }})
    r"""Provider of association, e.g. Orphanet, ClinVar"""  
    publications: Optional[list[shared_entityreference.EntityReference]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publications'), 'exclude': lambda f: f is None }})
    r"""Publications supporting association, extracted from evidence graph"""  
    qualifiers: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('qualifiers'), 'exclude': lambda f: f is None }})
    r"""Qualifier on the association"""  
    slim: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slim'), 'exclude': lambda f: f is None }})
    r"""Objects mapped to a slim"""  
    subject_eq: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subject_eq'), 'exclude': lambda f: f is None }})
    r"""Equivalent identifiers to subject node"""  
    subject_extensions: Optional[list[shared_annotationextension.AnnotationExtension]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subject_extensions'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of association, e.g. gene-phenotype"""  
    