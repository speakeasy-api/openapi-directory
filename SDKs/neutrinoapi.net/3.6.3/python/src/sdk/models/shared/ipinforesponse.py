"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import timezone as shared_timezone
from dataclasses_json import Undefined, dataclass_json
from sdk import utils


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class IPInfoResponse:
    
    city: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city') }})
    r"""Name of the city (if detectable)"""  
    continent_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('continent-code') }})
    r"""ISO 2-letter continent code"""  
    country: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country') }})
    r"""Full country name"""  
    country_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country-code') }})
    r"""ISO 2-letter country code"""  
    country_code3: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country-code3') }})
    r"""ISO 3-letter country code"""  
    currency_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency-code') }})
    r"""ISO 4217 currency code associated with the country"""  
    host_domain: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('host-domain') }})
    r"""The IPs host domain (only set if reverse-lookup has been used)"""  
    hostname: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hostname') }})
    r"""The IPs full hostname (only set if reverse-lookup has been used)"""  
    ip: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ip') }})
    r"""The IP address"""  
    is_bogon: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is-bogon') }})
    r"""True if this is a bogon IP address such as a private network, local network or reserved address"""  
    is_v4_mapped: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is-v4-mapped') }})
    r"""True if this is a <a href=\\"https://en.wikipedia.org/wiki/IPv6#IPv4-mapped_IPv6_addresses\\">IPv4 mapped IPv6 address</a>"""  
    is_v6: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is-v6') }})
    r"""True if this is a IPv6 address. False if IPv4"""  
    latitude: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('latitude') }})
    r"""Location latitude"""  
    longitude: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('longitude') }})
    r"""Location longitude"""  
    region: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('region') }})
    r"""Name of the region (if detectable)"""  
    region_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('region-code') }})
    r"""ISO 3166-2 region code (if detectable)"""  
    timezone: dict[str, shared_timezone.Timezone] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timezone') }})
    r"""Map containing timezone details for the location"""  
    valid: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valid') }})
    r"""True if this is a valid IPv4 or IPv6 address"""  
    