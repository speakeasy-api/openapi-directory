/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { FieldMetadata, FieldMetadataInput } from "./fieldmetadata";
import { Expose, Type } from "class-transformer";

/**
 * A person's relation to another person.
 */
export class Relation extends SpeakeasyBase {
  /**
   * Output only. The type of the relation translated and formatted in the viewer's account locale or the locale specified in the Accept-Language HTTP header.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "formattedType" })
  formattedType?: string;

  /**
   * Metadata about a field.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  @Type(() => FieldMetadata)
  metadata?: FieldMetadata;

  /**
   * The name of the other person this relation refers to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "person" })
  person?: string;

  /**
   * The person's relation to the other person. The type can be custom or one of these predefined values: * `spouse` * `child` * `mother` * `father` * `parent` * `brother` * `sister` * `friend` * `relative` * `domesticPartner` * `manager` * `assistant` * `referredBy` * `partner`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}

/**
 * A person's relation to another person.
 */
export class RelationInput extends SpeakeasyBase {
  /**
   * Metadata about a field.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  @Type(() => FieldMetadataInput)
  metadata?: FieldMetadataInput;

  /**
   * The name of the other person this relation refers to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "person" })
  person?: string;

  /**
   * The person's relation to the other person. The type can be custom or one of these predefined values: * `spouse` * `child` * `mother` * `father` * `parent` * `brother` * `sister` * `friend` * `relative` * `domesticPartner` * `manager` * `assistant` * `referredBy` * `partner`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}
