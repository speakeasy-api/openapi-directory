/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class GetRepositoriesWorkspaceRepoSlugSrcSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=Authorization",
  })
  apiKey?: string;

  @SpeakeasyMetadata({ data: "security, scheme=true;type=http;subtype=basic" })
  basic?: shared.SchemeBasic;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2?: string;
}

/**
 * Instead of returning the file's contents, return the (json) meta data for it.
 */
export enum GetRepositoriesWorkspaceRepoSlugSrcFormatEnum {
  Meta = "meta",
}

export class GetRepositoriesWorkspaceRepoSlugSrcRequest extends SpeakeasyBase {
  /**
   * Instead of returning the file's contents, return the (json) meta data for it.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=format",
  })
  format?: GetRepositoriesWorkspaceRepoSlugSrcFormatEnum;

  /**
   * This can either be the repository slug or the UUID of the repository,
   *
   * @remarks
   * surrounded by curly-braces, for example: `{repository UUID}`.
   *
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=repo_slug",
  })
  repoSlug: string;

  /**
   * This can either be the workspace ID (slug) or the workspace UUID
   *
   * @remarks
   * surrounded by curly-braces, for example: `{workspace UUID}`.
   *
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=workspace",
  })
  workspace: string;
}

export class GetRepositoriesWorkspaceRepoSlugSrcResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * If the path or commit in the URL does not exist.
   */
  @SpeakeasyMetadata()
  error?: Record<string, any>;

  /**
   * If the path matches a file, then the raw contents of the file are
   *
   * @remarks
   * returned (unless the `format=meta` query parameter was provided,
   * in which case a json document containing the file's meta data is
   * returned). If the path matches a directory, then a paginated
   * list of file and directory entries is returned (if the
   * `format=meta` query parameter was provided, then the json document
   * containing the directory's meta data is returned).
   *
   */
  @SpeakeasyMetadata()
  paginatedTreeentries?: shared.PaginatedTreeentries;
}
