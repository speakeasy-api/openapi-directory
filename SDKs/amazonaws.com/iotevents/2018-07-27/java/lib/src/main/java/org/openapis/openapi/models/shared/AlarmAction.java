/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * AlarmAction - Specifies one of the following actions to receive notifications when the alarm state changes.
 */
public class AlarmAction {
    /**
     * &lt;p&gt;Defines an action to write to the Amazon DynamoDB table that you created. The standard action payload contains all the information about the detector model instance and the event that triggered the action. You can customize the &lt;a href="https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html"&gt;payload&lt;/a&gt;. One column of the DynamoDB table receives all attribute-value pairs in the payload that you specify.&lt;/p&gt; &lt;p&gt;You must use expressions for all parameters in &lt;code&gt;DynamoDBAction&lt;/code&gt;. The expressions accept literals, operators, functions, references, and substitution templates.&lt;/p&gt; &lt;p class="title"&gt; &lt;b&gt;Examples&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For literal values, the expressions must contain single quotes. For example, the value for the &lt;code&gt;hashKeyType&lt;/code&gt; parameter can be &lt;code&gt;'STRING'&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For references, you must specify either variables or input values. For example, the value for the &lt;code&gt;hashKeyField&lt;/code&gt; parameter can be &lt;code&gt;$input.GreenhouseInput.name&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For a substitution template, you must use &lt;code&gt;${}&lt;/code&gt;, and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates.&lt;/p&gt; &lt;p&gt;In the following example, the value for the &lt;code&gt;hashKeyValue&lt;/code&gt; parameter uses a substitution template. &lt;/p&gt; &lt;p&gt; &lt;code&gt;'${$input.GreenhouseInput.temperature * 6 / 5 + 32} in Fahrenheit'&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For a string concatenation, you must use &lt;code&gt;+&lt;/code&gt;. A string concatenation can also contain a combination of literals, operators, functions, references, and substitution templates.&lt;/p&gt; &lt;p&gt;In the following example, the value for the &lt;code&gt;tableName&lt;/code&gt; parameter uses a string concatenation. &lt;/p&gt; &lt;p&gt; &lt;code&gt;'GreenhouseTemperatureTable ' + $input.GreenhouseInput.date&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href="https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html"&gt;Expressions&lt;/a&gt; in the &lt;i&gt;AWS IoT Events Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If the defined payload type is a string, &lt;code&gt;DynamoDBAction&lt;/code&gt; writes non-JSON data to the DynamoDB table as binary data. The DynamoDB console displays the data as Base64-encoded text. The value for the &lt;code&gt;payloadField&lt;/code&gt; parameter is &lt;code&gt;&amp;lt;payload-field&amp;gt;_raw&lt;/code&gt;.&lt;/p&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dynamoDB")
    public DynamoDBAction dynamoDB;

    public AlarmAction withDynamoDB(DynamoDBAction dynamoDB) {
        this.dynamoDB = dynamoDB;
        return this;
    }
    
    /**
     * &lt;p&gt;Defines an action to write to the Amazon DynamoDB table that you created. The default action payload contains all the information about the detector model instance and the event that triggered the action. You can customize the &lt;a href="https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html"&gt;payload&lt;/a&gt;. A separate column of the DynamoDB table receives one attribute-value pair in the payload that you specify.&lt;/p&gt; &lt;p&gt;You must use expressions for all parameters in &lt;code&gt;DynamoDBv2Action&lt;/code&gt;. The expressions accept literals, operators, functions, references, and substitution templates.&lt;/p&gt; &lt;p class="title"&gt; &lt;b&gt;Examples&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For literal values, the expressions must contain single quotes. For example, the value for the &lt;code&gt;tableName&lt;/code&gt; parameter can be &lt;code&gt;'GreenhouseTemperatureTable'&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For references, you must specify either variables or input values. For example, the value for the &lt;code&gt;tableName&lt;/code&gt; parameter can be &lt;code&gt;$variable.ddbtableName&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For a substitution template, you must use &lt;code&gt;${}&lt;/code&gt;, and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates.&lt;/p&gt; &lt;p&gt;In the following example, the value for the &lt;code&gt;contentExpression&lt;/code&gt; parameter in &lt;code&gt;Payload&lt;/code&gt; uses a substitution template. &lt;/p&gt; &lt;p&gt; &lt;code&gt;'{\"sensorID\": \"${$input.GreenhouseInput.sensor_id}\", \"temperature\": \"${$input.GreenhouseInput.temperature * 9 / 5 + 32}\"}'&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For a string concatenation, you must use &lt;code&gt;+&lt;/code&gt;. A string concatenation can also contain a combination of literals, operators, functions, references, and substitution templates.&lt;/p&gt; &lt;p&gt;In the following example, the value for the &lt;code&gt;tableName&lt;/code&gt; parameter uses a string concatenation. &lt;/p&gt; &lt;p&gt; &lt;code&gt;'GreenhouseTemperatureTable ' + $input.GreenhouseInput.date&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href="https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html"&gt;Expressions&lt;/a&gt; in the &lt;i&gt;AWS IoT Events Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;The value for the &lt;code&gt;type&lt;/code&gt; parameter in &lt;code&gt;Payload&lt;/code&gt; must be &lt;code&gt;JSON&lt;/code&gt;.&lt;/p&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dynamoDBv2")
    public DynamoDBv2Action dynamoDBv2;

    public AlarmAction withDynamoDBv2(DynamoDBv2Action dynamoDBv2) {
        this.dynamoDBv2 = dynamoDBv2;
        return this;
    }
    
    /**
     * Sends information about the detector model instance and the event that triggered the action to an Amazon Kinesis Data Firehose delivery stream.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("firehose")
    public FirehoseAction firehose;

    public AlarmAction withFirehose(FirehoseAction firehose) {
        this.firehose = firehose;
        return this;
    }
    
    /**
     * Sends an AWS IoT Events input, passing in information about the detector model instance and the event that triggered the action.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("iotEvents")
    public IotEventsAction iotEvents;

    public AlarmAction withIotEvents(IotEventsAction iotEvents) {
        this.iotEvents = iotEvents;
        return this;
    }
    
    /**
     * &lt;p&gt;Sends information about the detector model instance and the event that triggered the action to a specified asset property in AWS IoT SiteWise.&lt;/p&gt; &lt;p&gt;You must use expressions for all parameters in &lt;code&gt;IotSiteWiseAction&lt;/code&gt;. The expressions accept literals, operators, functions, references, and substitutions templates.&lt;/p&gt; &lt;p class="title"&gt; &lt;b&gt;Examples&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For literal values, the expressions must contain single quotes. For example, the value for the &lt;code&gt;propertyAlias&lt;/code&gt; parameter can be &lt;code&gt;'/company/windfarm/3/turbine/7/temperature'&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For references, you must specify either variables or input values. For example, the value for the &lt;code&gt;assetId&lt;/code&gt; parameter can be &lt;code&gt;$input.TurbineInput.assetId1&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For a substitution template, you must use &lt;code&gt;${}&lt;/code&gt;, and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates.&lt;/p&gt; &lt;p&gt;In the following example, the value for the &lt;code&gt;propertyAlias&lt;/code&gt; parameter uses a substitution template. &lt;/p&gt; &lt;p&gt; &lt;code&gt;'company/windfarm/${$input.TemperatureInput.sensorData.windfarmID}/turbine/ ${$input.TemperatureInput.sensorData.turbineID}/temperature'&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You must specify either &lt;code&gt;propertyAlias&lt;/code&gt; or both &lt;code&gt;assetId&lt;/code&gt; and &lt;code&gt;propertyId&lt;/code&gt; to identify the target asset property in AWS IoT SiteWise.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href="https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html"&gt;Expressions&lt;/a&gt; in the &lt;i&gt;AWS IoT Events Developer Guide&lt;/i&gt;.&lt;/p&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("iotSiteWise")
    public IotSiteWiseAction iotSiteWise;

    public AlarmAction withIotSiteWise(IotSiteWiseAction iotSiteWise) {
        this.iotSiteWise = iotSiteWise;
        return this;
    }
    
    /**
     * Information required to publish the MQTT message through the AWS IoT message broker.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("iotTopicPublish")
    public IotTopicPublishAction iotTopicPublish;

    public AlarmAction withIotTopicPublish(IotTopicPublishAction iotTopicPublish) {
        this.iotTopicPublish = iotTopicPublish;
        return this;
    }
    
    /**
     * Calls a Lambda function, passing in information about the detector model instance and the event that triggered the action.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lambda")
    public LambdaAction lambda;

    public AlarmAction withLambda(LambdaAction lambda) {
        this.lambda = lambda;
        return this;
    }
    
    /**
     * Information required to publish the Amazon SNS message.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sns")
    public SNSTopicPublishAction sns;

    public AlarmAction withSns(SNSTopicPublishAction sns) {
        this.sns = sns;
        return this;
    }
    
    /**
     * Sends information about the detector model instance and the event that triggered the action to an Amazon SQS queue.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sqs")
    public SqsAction sqs;

    public AlarmAction withSqs(SqsAction sqs) {
        this.sqs = sqs;
        return this;
    }
    
    public AlarmAction(){}
}
