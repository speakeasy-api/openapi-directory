// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"openapi/pkg/types"
)

type GetElectionDatesOfficeSoughtEnum string

const (
	GetElectionDatesOfficeSoughtEnumH GetElectionDatesOfficeSoughtEnum = "H"
	GetElectionDatesOfficeSoughtEnumS GetElectionDatesOfficeSoughtEnum = "S"
	GetElectionDatesOfficeSoughtEnumP GetElectionDatesOfficeSoughtEnum = "P"
)

func (e GetElectionDatesOfficeSoughtEnum) ToPointer() *GetElectionDatesOfficeSoughtEnum {
	return &e
}

func (e *GetElectionDatesOfficeSoughtEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "H":
		fallthrough
	case "S":
		fallthrough
	case "P":
		*e = GetElectionDatesOfficeSoughtEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetElectionDatesOfficeSoughtEnum: %v", v)
	}
}

type GetElectionDatesRequest struct {
	// API key for https://api.data.gov. Get one at https://api.data.gov/signup.
	//
	APIKey string `queryParam:"style=form,explode=true,name=api_key"`
	// House district of the office sought, if applicable.
	//
	ElectionDistrict []string `queryParam:"style=form,explode=true,name=election_district"`
	// Party, if applicable.
	//
	ElectionParty []string `queryParam:"style=form,explode=true,name=election_party"`
	// State or territory of the office sought.
	//
	ElectionState []string `queryParam:"style=form,explode=true,name=election_state"`
	// Election type id
	//
	ElectionTypeID []string `queryParam:"style=form,explode=true,name=election_type_id"`
	// Year of election
	ElectionYear []string `queryParam:"style=form,explode=true,name=election_year"`
	// The maximum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD)
	//
	MaxCreateDate *types.Date `queryParam:"style=form,explode=true,name=max_create_date"`
	// The maximum date of election.
	//
	MaxElectionDate *types.Date `queryParam:"style=form,explode=true,name=max_election_date"`
	// The maximum date of primary or general election.(MM/DD/YYYY or YYYY-MM-DD)
	//
	MaxPrimaryGeneralDate *types.Date `queryParam:"style=form,explode=true,name=max_primary_general_date"`
	// The maximum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD)
	//
	MaxUpdateDate *types.Date `queryParam:"style=form,explode=true,name=max_update_date"`
	// The minimum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD)
	//
	MinCreateDate *types.Date `queryParam:"style=form,explode=true,name=min_create_date"`
	// The minimum date of election.
	//
	MinElectionDate *types.Date `queryParam:"style=form,explode=true,name=min_election_date"`
	// The minimum date of primary or general election.(MM/DD/YYYY or YYYY-MM-DD)
	//
	MinPrimaryGeneralDate *types.Date `queryParam:"style=form,explode=true,name=min_primary_general_date"`
	// The minimum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD)
	//
	MinUpdateDate *types.Date `queryParam:"style=form,explode=true,name=min_update_date"`
	// House, Senate or presidential office.
	//
	OfficeSought []GetElectionDatesOfficeSoughtEnum `queryParam:"style=form,explode=true,name=office_sought"`
	// For paginating through results, starting at page 1
	Page *int `queryParam:"style=form,explode=true,name=page"`
	// The number of results returned per page. Defaults to 20.
	PerPage *int `queryParam:"style=form,explode=true,name=per_page"`
	// Provide a field to sort by. Use `-` for descending order.
	//
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// Hide null values on sorted column(s).
	SortHideNull *bool `queryParam:"style=form,explode=true,name=sort_hide_null"`
	// Toggle that filters out all rows having sort column that is non-null
	SortNullOnly *bool `queryParam:"style=form,explode=true,name=sort_null_only"`
	// Toggle that sorts null values last
	SortNullsLast *bool `queryParam:"style=form,explode=true,name=sort_nulls_last"`
}

type GetElectionDatesDefaultApplicationJSON struct {
	Pagination *shared.OffsetInfo    `json:"pagination,omitempty"`
	Results    []shared.ElectionDate `json:"results,omitempty"`
}

type GetElectionDatesResponse struct {
	ContentType                                  string
	StatusCode                                   int
	RawResponse                                  *http.Response
	GetElectionDatesDefaultApplicationJSONObject *GetElectionDatesDefaultApplicationJSON
}
