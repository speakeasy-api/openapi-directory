"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googlecloudcontactcenterinsightsv1calculatestatsresponsetimeseries as shared_googlecloudcontactcenterinsightsv1calculatestatsresponsetimeseries
from ..shared import googlecloudcontactcenterinsightsv1issuemodellabelstatsissuestats as shared_googlecloudcontactcenterinsightsv1issuemodellabelstatsissuestats
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudContactcenterinsightsV1CalculateStatsResponse:
    r"""The response for calculating conversation statistics."""
    
    average_duration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('averageDuration'), 'exclude': lambda f: f is None }})
    r"""The average duration of all conversations. The average is calculated using only conversations that have a time duration."""  
    average_turn_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('averageTurnCount'), 'exclude': lambda f: f is None }})
    r"""The average number of turns per conversation."""  
    conversation_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conversationCount'), 'exclude': lambda f: f is None }})
    r"""The total number of conversations."""  
    conversation_count_time_series: Optional[shared_googlecloudcontactcenterinsightsv1calculatestatsresponsetimeseries.GoogleCloudContactcenterinsightsV1CalculateStatsResponseTimeSeries] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conversationCountTimeSeries'), 'exclude': lambda f: f is None }})
    r"""A time series representing conversations over time."""  
    custom_highlighter_matches: Optional[dict[str, int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customHighlighterMatches'), 'exclude': lambda f: f is None }})
    r"""A map associating each custom highlighter resource name with its respective number of matches in the set of conversations."""  
    issue_matches: Optional[dict[str, int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issueMatches'), 'exclude': lambda f: f is None }})
    r"""A map associating each issue resource name with its respective number of matches in the set of conversations. Key has the format: `projects//locations//issueModels//issues/` Deprecated, use `issue_matches_stats` field instead."""  
    issue_matches_stats: Optional[dict[str, shared_googlecloudcontactcenterinsightsv1issuemodellabelstatsissuestats.GoogleCloudContactcenterinsightsV1IssueModelLabelStatsIssueStats]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issueMatchesStats'), 'exclude': lambda f: f is None }})
    r"""A map associating each issue resource name with its respective number of matches in the set of conversations. Key has the format: `projects//locations//issueModels//issues/`"""  
    smart_highlighter_matches: Optional[dict[str, int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('smartHighlighterMatches'), 'exclude': lambda f: f is None }})
    r"""A map associating each smart highlighter display name with its respective number of matches in the set of conversations."""  
    