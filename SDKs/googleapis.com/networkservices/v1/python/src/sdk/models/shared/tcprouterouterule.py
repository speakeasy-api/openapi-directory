"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import tcprouterouteaction as shared_tcprouterouteaction
from ..shared import tcprouteroutematch as shared_tcprouteroutematch
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TCPRouteRouteRule:
    r"""Specifies how to match traffic and how to route traffic when traffic is matched."""
    
    action: Optional[shared_tcprouterouteaction.TCPRouteRouteAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action'), 'exclude': lambda f: f is None }})
    r"""The specifications for routing traffic and applying associated policies."""  
    matches: Optional[list[shared_tcprouteroutematch.TCPRouteRouteMatch]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('matches'), 'exclude': lambda f: f is None }})
    r"""Optional. RouteMatch defines the predicate used to match requests to a given action. Multiple match types are \\"OR\\"ed for evaluation. If no routeMatch field is specified, this rule will unconditionally match traffic."""  
    