"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from ..shared import onetrack_get_responses_200_content_application_1json_schema_properties_origin as shared_onetrack_get_responses_200_content_application_1json_schema_properties_origin
from ..shared import onetrack_get_responses_200_content_application_1json_schema_properties_origin_properties_geometry as shared_onetrack_get_responses_200_content_application_1json_schema_properties_origin_properties_geometry
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class GetTrackRequest:
    
    tracking_number: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'trackingNumber', 'style': 'form', 'explode': True }})  
    
class GetTrackTrackingResponseFeatureGeometryTypeEnum(str, Enum):
    r"""the geometry type"""
    POINT = 'Point'
    LINE_STRING = 'LineString'
    POLYGON = 'Polygon'
    MULTI_POINT = 'MultiPoint'
    MULTI_LINE_STRING = 'MultiLineString'
    MULTI_POLYGON = 'MultiPolygon'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTrackTrackingResponseFeatureGeometry:
    r"""GeoJSon geometry
    http://geojson.org/geojson-spec.html#geometry-objects
    """
    
    coordinates: Any = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coordinates') }})  
    type: GetTrackTrackingResponseFeatureGeometryTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""the geometry type"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTrackTrackingResponseFeatureProperties:
    
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    
class GetTrackTrackingResponseFeatureTypeEnum(str, Enum):
    FEATURE = 'Feature'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTrackTrackingResponseFeature:
    r"""GeoJSon Feature
    https://tools.ietf.org/html/rfc7946#section-3.2
    """
    
    geometry: GetTrackTrackingResponseFeatureGeometry = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('geometry') }})
    r"""GeoJSon geometry
    http://geojson.org/geojson-spec.html#geometry-objects
    """  
    properties: GetTrackTrackingResponseFeatureProperties = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('properties') }})  
    type: GetTrackTrackingResponseFeatureTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    bbox: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bbox'), 'exclude': lambda f: f is None }})  
    centerline: Optional[shared_onetrack_get_responses_200_content_application_1json_schema_properties_origin_properties_geometry.OnetrackGetResponses200ContentApplication1jsonSchemaPropertiesOriginPropertiesGeometry] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('centerline'), 'exclude': lambda f: f is None }})
    r"""GeoJSon geometry
    http://geojson.org/geojson-spec.html#geometry-objects
    """  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})  
    
class GetTrackTrackingResponseTrackingEventV2EventSourceEnum(str, Enum):
    CARRIER = 'carrier'
    INTERNAL = 'internal'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTrackTrackingResponseTrackingEventV2:
    
    event_category: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventCategory'), 'exclude': lambda f: f is None }})  
    event_category_code: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventCategoryCode'), 'exclude': lambda f: f is None }})  
    event_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    event_location: Optional[shared_onetrack_get_responses_200_content_application_1json_schema_properties_origin.OnetrackGetResponses200ContentApplication1jsonSchemaPropertiesOrigin] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventLocation'), 'exclude': lambda f: f is None }})
    r"""GeoJSon Feature
    https://tools.ietf.org/html/rfc7946#section-3.2
    """  
    event_source: Optional[GetTrackTrackingResponseTrackingEventV2EventSourceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventSource'), 'exclude': lambda f: f is None }})  
    event_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventStatus'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTrackTrackingResponseTrackingNumberV2CarrierSimpleV2:
    
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTrackTrackingResponseTrackingNumberV2:
    
    barcode_scan_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('barcodeScanValue'), 'exclude': lambda f: f is None }})
    r"""The computer readable alternative to the human readable"""  
    carrier: Optional[GetTrackTrackingResponseTrackingNumberV2CarrierSimpleV2] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('carrier'), 'exclude': lambda f: f is None }})  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""The human readable tracking number recipients (consignee) expect"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTrackTrackingResponse:
    r"""OK"""
    
    destination: Optional[shared_onetrack_get_responses_200_content_application_1json_schema_properties_origin.OnetrackGetResponses200ContentApplication1jsonSchemaPropertiesOrigin] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destination'), 'exclude': lambda f: f is None }})
    r"""GeoJSon Feature
    https://tools.ietf.org/html/rfc7946#section-3.2
    """  
    fdc_order_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fdcOrderId'), 'exclude': lambda f: f is None }})  
    first_checked_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firstCheckedDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    first_transit_event: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firstTransitEvent'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    last_checked_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastCheckedDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    last_updated_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastUpdatedDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    origin: Optional[GetTrackTrackingResponseFeature] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('origin'), 'exclude': lambda f: f is None }})
    r"""GeoJSon Feature
    https://tools.ietf.org/html/rfc7946#section-3.2
    """  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    status_category_code: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statusCategoryCode'), 'exclude': lambda f: f is None }})  
    status_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statusDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    status_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statusMessage'), 'exclude': lambda f: f is None }})  
    tracked_events: Optional[list[GetTrackTrackingResponseTrackingEventV2]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trackedEvents'), 'exclude': lambda f: f is None }})  
    tracking_number: Optional[GetTrackTrackingResponseTrackingNumberV2] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trackingNumber'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetTrackResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    tracking_response: Optional[GetTrackTrackingResponse] = dataclasses.field(default=None)
    r"""OK"""  
    