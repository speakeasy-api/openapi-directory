"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import keyschemaelement as shared_keyschemaelement
from ..shared import projection as shared_projection
from ..shared import provisionedthroughput as shared_provisionedthroughput
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GlobalSecondaryIndex:
    r"""Represents the properties of a global secondary index."""
    
    index_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IndexName') }})  
    key_schema: list[shared_keyschemaelement.KeySchemaElement] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KeySchema') }})  
    projection: shared_projection.Projection = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Projection') }})  
    provisioned_throughput: Optional[shared_provisionedthroughput.ProvisionedThroughput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProvisionedThroughput'), 'exclude': lambda f: f is None }})  
    