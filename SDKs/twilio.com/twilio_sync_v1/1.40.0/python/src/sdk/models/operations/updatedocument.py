"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import sync_v1_service_document as shared_sync_v1_service_document
from typing import Any, Optional

UPDATE_DOCUMENT_SERVERS = [
	"https://sync.twilio.com",
]


@dataclasses.dataclass
class UpdateDocumentSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    

@dataclasses.dataclass
class UpdateDocumentUpdateDocumentRequest:
    
    data: Optional[Any] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Data' }})
    r"""A JSON string that represents an arbitrary, schema-less object that the Sync Document stores. Can be up to 16 KiB in length."""  
    ttl: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Ttl' }})
    r"""How long, [in seconds](https://www.twilio.com/docs/sync/limits#sync-payload-limits), before the Sync Document expires and is deleted (time-to-live)."""  
    

@dataclasses.dataclass
class UpdateDocumentRequest:
    
    service_sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'ServiceSid', 'style': 'simple', 'explode': False }})
    r"""The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Document resource to update."""  
    sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'Sid', 'style': 'simple', 'explode': False }})
    r"""The SID of the Document resource to update. Can be the Document resource's `sid` or its `unique_name`."""  
    if_match: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'If-Match', 'style': 'simple', 'explode': False }})
    r"""The If-Match HTTP request header"""  
    request_body: Optional[UpdateDocumentUpdateDocumentRequest] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/x-www-form-urlencoded' }})  
    

@dataclasses.dataclass
class UpdateDocumentResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    sync_v1_service_document: Optional[shared_sync_v1_service_document.SyncV1ServiceDocument] = dataclasses.field(default=None)
    r"""OK"""  
    