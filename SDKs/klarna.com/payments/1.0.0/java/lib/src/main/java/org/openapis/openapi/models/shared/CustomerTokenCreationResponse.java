/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CustomerTokenCreationResponse - Token was successfully created.
 */
public class CustomerTokenCreationResponse {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billing_address")
    public Address billingAddress;

    public CustomerTokenCreationResponse withBillingAddress(Address billingAddress) {
        this.billingAddress = billingAddress;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer")
    public CustomerReadCreateToken customer;

    public CustomerTokenCreationResponse withCustomer(CustomerReadCreateToken customer) {
        this.customer = customer;
        return this;
    }
    
    /**
     * Used to connect customers with payment method when it is present.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_method_reference")
    public String paymentMethodReference;

    public CustomerTokenCreationResponse withPaymentMethodReference(String paymentMethodReference) {
        this.paymentMethodReference = paymentMethodReference;
        return this;
    }
    
    /**
     * URL to redirect the customer to after placing the order. This is a Klarna URL where Klarna will place a cookie in the customer\u2019s browser (if redirected) and redirect the customer back to the confirmation URL provided by the merchant. This is not a mandatory step but a recommended one to improve the returning customer\u2019s experience.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("redirect_url")
    public String redirectUrl;

    public CustomerTokenCreationResponse withRedirectUrl(String redirectUrl) {
        this.redirectUrl = redirectUrl;
        return this;
    }
    
    /**
     * Generated customer token. This token will be used to create a new order for the subscription using the Create a New order using token API.
     */
    @JsonProperty("token_id")
    public String tokenId;

    public CustomerTokenCreationResponse withTokenId(String tokenId) {
        this.tokenId = tokenId;
        return this;
    }
    
    public CustomerTokenCreationResponse(@JsonProperty("token_id") String tokenId) {
        this.tokenId = tokenId;
  }
}
