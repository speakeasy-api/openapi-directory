"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import constraintsummary as shared_constraintsummary
from ..shared import provisioningartifactoutput as shared_provisioningartifactoutput
from ..shared import provisioningartifactparameter as shared_provisioningartifactparameter
from ..shared import provisioningartifactpreferences as shared_provisioningartifactpreferences
from ..shared import tagoptionsummary as shared_tagoptionsummary
from ..shared import usageinstruction as shared_usageinstruction
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DescribeProvisioningParametersOutput:
    r"""Success"""
    
    constraint_summaries: Optional[list[shared_constraintsummary.ConstraintSummary]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConstraintSummaries'), 'exclude': lambda f: f is None }})  
    provisioning_artifact_output_keys: Optional[list[shared_provisioningartifactoutput.ProvisioningArtifactOutput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProvisioningArtifactOutputKeys'), 'exclude': lambda f: f is None }})  
    provisioning_artifact_outputs: Optional[list[shared_provisioningartifactoutput.ProvisioningArtifactOutput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProvisioningArtifactOutputs'), 'exclude': lambda f: f is None }})  
    provisioning_artifact_parameters: Optional[list[shared_provisioningartifactparameter.ProvisioningArtifactParameter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProvisioningArtifactParameters'), 'exclude': lambda f: f is None }})  
    provisioning_artifact_preferences: Optional[shared_provisioningartifactpreferences.ProvisioningArtifactPreferences] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProvisioningArtifactPreferences'), 'exclude': lambda f: f is None }})  
    tag_options: Optional[list[shared_tagoptionsummary.TagOptionSummary]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TagOptions'), 'exclude': lambda f: f is None }})  
    usage_instructions: Optional[list[shared_usageinstruction.UsageInstruction]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UsageInstructions'), 'exclude': lambda f: f is None }})  
    