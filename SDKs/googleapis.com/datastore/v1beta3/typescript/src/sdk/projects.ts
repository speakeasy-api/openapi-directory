/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Allocates IDs for the given keys, which is useful for referencing an entity before it is inserted.
   */
  datastoreProjectsAllocateIds(
    req: operations.DatastoreProjectsAllocateIdsRequest,
    security: operations.DatastoreProjectsAllocateIdsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatastoreProjectsAllocateIdsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DatastoreProjectsAllocateIdsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta3/projects/{projectId}:allocateIds",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "allocateIdsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DatastoreProjectsAllocateIdsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatastoreProjectsAllocateIdsResponse =
        new operations.DatastoreProjectsAllocateIdsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.allocateIdsResponse = utils.objectToClass(
              httpRes?.data,
              shared.AllocateIdsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Begins a new transaction.
   */
  datastoreProjectsBeginTransaction(
    req: operations.DatastoreProjectsBeginTransactionRequest,
    security: operations.DatastoreProjectsBeginTransactionSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatastoreProjectsBeginTransactionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DatastoreProjectsBeginTransactionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta3/projects/{projectId}:beginTransaction",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "beginTransactionRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DatastoreProjectsBeginTransactionSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatastoreProjectsBeginTransactionResponse =
        new operations.DatastoreProjectsBeginTransactionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.beginTransactionResponse = utils.objectToClass(
              httpRes?.data,
              shared.BeginTransactionResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Commits a transaction, optionally creating, deleting or modifying some entities.
   */
  datastoreProjectsCommit(
    req: operations.DatastoreProjectsCommitRequest,
    security: operations.DatastoreProjectsCommitSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatastoreProjectsCommitResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DatastoreProjectsCommitRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta3/projects/{projectId}:commit",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "commitRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DatastoreProjectsCommitSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatastoreProjectsCommitResponse =
        new operations.DatastoreProjectsCommitResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.commitResponse = utils.objectToClass(
              httpRes?.data,
              shared.CommitResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Looks up entities by key.
   */
  datastoreProjectsLookup(
    req: operations.DatastoreProjectsLookupRequest,
    security: operations.DatastoreProjectsLookupSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatastoreProjectsLookupResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DatastoreProjectsLookupRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta3/projects/{projectId}:lookup",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "lookupRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DatastoreProjectsLookupSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatastoreProjectsLookupResponse =
        new operations.DatastoreProjectsLookupResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.lookupResponse = utils.objectToClass(
              httpRes?.data,
              shared.LookupResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Prevents the supplied keys' IDs from being auto-allocated by Cloud Datastore.
   */
  datastoreProjectsReserveIds(
    req: operations.DatastoreProjectsReserveIdsRequest,
    security: operations.DatastoreProjectsReserveIdsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatastoreProjectsReserveIdsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DatastoreProjectsReserveIdsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta3/projects/{projectId}:reserveIds",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "reserveIdsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DatastoreProjectsReserveIdsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatastoreProjectsReserveIdsResponse =
        new operations.DatastoreProjectsReserveIdsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reserveIdsResponse = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Rolls back a transaction.
   */
  datastoreProjectsRollback(
    req: operations.DatastoreProjectsRollbackRequest,
    security: operations.DatastoreProjectsRollbackSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatastoreProjectsRollbackResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DatastoreProjectsRollbackRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta3/projects/{projectId}:rollback",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "rollbackRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DatastoreProjectsRollbackSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatastoreProjectsRollbackResponse =
        new operations.DatastoreProjectsRollbackResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.rollbackResponse = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Runs an aggregation query.
   */
  datastoreProjectsRunAggregationQuery(
    req: operations.DatastoreProjectsRunAggregationQueryRequest,
    security: operations.DatastoreProjectsRunAggregationQuerySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatastoreProjectsRunAggregationQueryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DatastoreProjectsRunAggregationQueryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta3/projects/{projectId}:runAggregationQuery",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "runAggregationQueryRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DatastoreProjectsRunAggregationQuerySecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatastoreProjectsRunAggregationQueryResponse =
        new operations.DatastoreProjectsRunAggregationQueryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.runAggregationQueryResponse = utils.objectToClass(
              httpRes?.data,
              shared.RunAggregationQueryResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Queries for entities.
   */
  datastoreProjectsRunQuery(
    req: operations.DatastoreProjectsRunQueryRequest,
    security: operations.DatastoreProjectsRunQuerySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatastoreProjectsRunQueryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DatastoreProjectsRunQueryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta3/projects/{projectId}:runQuery",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "runQueryRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DatastoreProjectsRunQuerySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatastoreProjectsRunQueryResponse =
        new operations.DatastoreProjectsRunQueryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.runQueryResponse = utils.objectToClass(
              httpRes?.data,
              shared.RunQueryResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
