"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GetSpacesIDCollectiveDecisionHasCompanyRegistrationCertificateEnum(str, Enum):
    r"""If true returns only invoices with a CompanyRegistrationCertificate"""
    TRUE = 'true'
    FALSE = 'false'

class GetSpacesIDCollectiveDecisionHasMinutesEnum(str, Enum):
    r"""If true returns only invoices with Minutes"""
    TRUE = 'true'
    FALSE = 'false'

class GetSpacesIDCollectiveDecisionHasSireneRegisterEnum(str, Enum):
    r"""If true returns only invoices with a SireneRegister"""
    TRUE = 'true'
    FALSE = 'false'

class GetSpacesIDCollectiveDecisionHasStatusEnum(str, Enum):
    r"""If true returns only invoices with a Status"""
    TRUE = 'true'
    FALSE = 'false'


@dataclasses.dataclass
class GetSpacesIDCollectiveDecisionRequest:
    
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""Id of the space"""  
    date_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Date', 'style': 'form', 'explode': True }})
    r"""Date of the collective decision YYYMMDD"""  
    event: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Event', 'style': 'form', 'explode': True }})
    r"""Event of the collective decision (see post for the list of events)"""  
    has_company_registration_certificate: Optional[GetSpacesIDCollectiveDecisionHasCompanyRegistrationCertificateEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'HasCompanyRegistrationCertificate', 'style': 'form', 'explode': True }})
    r"""If true returns only invoices with a CompanyRegistrationCertificate"""  
    has_minutes: Optional[GetSpacesIDCollectiveDecisionHasMinutesEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'HasMinutes', 'style': 'form', 'explode': True }})
    r"""If true returns only invoices with Minutes"""  
    has_sirene_register: Optional[GetSpacesIDCollectiveDecisionHasSireneRegisterEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'HasSireneRegister', 'style': 'form', 'explode': True }})
    r"""If true returns only invoices with a SireneRegister"""  
    has_status: Optional[GetSpacesIDCollectiveDecisionHasStatusEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'HasStatus', 'style': 'form', 'explode': True }})
    r"""If true returns only invoices with a Status"""  
    range: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Range', 'style': 'form', 'explode': True }})
    r"""index range of the results"""  
    
class GetSpacesIDCollectiveDecision200ApplicationJSONEventEnum(str, Enum):
    EGM = 'EGM'
    CGM = 'CGM'
    OGM = 'OGM'
    CONSTITUENT_ASSEMBLY = 'ConstituentAssembly'
    SOLE_PARTNER = 'SolePartner'
    OTHER_EVENT = 'OtherEvent'
    OTHER = 'Other'
    OFFICE = 'Office'
    EXECUTIVE_COMMITTEE = 'ExecutiveCommittee'
    CONSULTING = 'Consulting'
    BOARD = 'Board'
    PARTNERS_MEETING = 'PartnersMeeting'

class GetSpacesIDCollectiveDecision200ApplicationJSONLevelEnum(str, Enum):
    CONFIDENTIAL = 'confidential'
    REGULAR = 'regular'
    PUBLIC = 'public'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetSpacesIDCollectiveDecision200ApplicationJSON:
    
    about: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('About'), 'exclude': lambda f: f is None }})  
    archival_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ArchivalDate'), 'exclude': lambda f: f is None }})  
    class_: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Class'), 'exclude': lambda f: f is None }})  
    comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Comment'), 'exclude': lambda f: f is None }})  
    date_: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Date'), 'exclude': lambda f: f is None }})  
    dividend_distributions: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DividendDistributions'), 'exclude': lambda f: f is None }})  
    dividend_distributions_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DividendDistributionsDate'), 'exclude': lambda f: f is None }})  
    event: Optional[GetSpacesIDCollectiveDecision200ApplicationJSONEventEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Event'), 'exclude': lambda f: f is None }})  
    home: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Home'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id'), 'exclude': lambda f: f is None }})  
    keywords: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Keywords'), 'exclude': lambda f: f is None }})  
    level: Optional[GetSpacesIDCollectiveDecision200ApplicationJSONLevelEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Level'), 'exclude': lambda f: f is None }})  
    modification_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModificationDate'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})  
    parent: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Parent'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetSpacesIDCollectiveDecisionResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_spaces_id_collective_decision_200_application_json_anies: Optional[list[GetSpacesIDCollectiveDecision200ApplicationJSON]] = dataclasses.field(default=None)
    r"""A list of collective decisions"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    