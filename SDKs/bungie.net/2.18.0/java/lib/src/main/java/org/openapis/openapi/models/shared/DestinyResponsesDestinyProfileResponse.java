/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import java.time.OffsetDateTime;

/**
 * DestinyResponsesDestinyProfileResponse - The response for GetDestinyProfile, with components for character and item-level data.
 */
public class DestinyResponsesDestinyProfileResponse {
    /**
     * Character activity data - the activities available to this character and its status, keyed by the Character's Id.
     * COMPONENT TYPE: CharacterActivities
     */
    
    public DestinyResponsesDestinyProfileResponseCharacterActivities characterActivities;
    public DestinyResponsesDestinyProfileResponse withCharacterActivities(DestinyResponsesDestinyProfileResponseCharacterActivities characterActivities) {
        this.characterActivities = characterActivities;
        return this;
    }
    
    /**
     * COMPONENT TYPE: Collectibles
     */
    
    public DestinyResponsesDestinyProfileResponseCharacterCollectibles characterCollectibles;
    public DestinyResponsesDestinyProfileResponse withCharacterCollectibles(DestinyResponsesDestinyProfileResponseCharacterCollectibles characterCollectibles) {
        this.characterCollectibles = characterCollectibles;
        return this;
    }
    
    /**
     * COMPONENT TYPE: Craftables
     */
    
    public DestinyResponsesDestinyProfileResponseCharacterCraftables characterCraftables;
    public DestinyResponsesDestinyProfileResponse withCharacterCraftables(DestinyResponsesDestinyProfileResponseCharacterCraftables characterCraftables) {
        this.characterCraftables = characterCraftables;
        return this;
    }
    
    /**
     * A "lookup" convenience component that can be used to quickly check if the character has access to items that can be used for purchasing.
     * COMPONENT TYPE: CurrencyLookups
     */
    
    public DestinyResponsesDestinyProfileResponseCharacterCurrencyLookups characterCurrencyLookups;
    public DestinyResponsesDestinyProfileResponse withCharacterCurrencyLookups(DestinyResponsesDestinyProfileResponseCharacterCurrencyLookups characterCurrencyLookups) {
        this.characterCurrencyLookups = characterCurrencyLookups;
        return this;
    }
    
    /**
     * The character's equipped items, keyed by the Character's Id.
     * COMPONENT TYPE: CharacterEquipment
     */
    
    public DestinyResponsesDestinyProfileResponseCharacterEquipment characterEquipment;
    public DestinyResponsesDestinyProfileResponse withCharacterEquipment(DestinyResponsesDestinyProfileResponseCharacterEquipment characterEquipment) {
        this.characterEquipment = characterEquipment;
        return this;
    }
    
    /**
     * The character-level non-equipped inventory items, keyed by the Character's Id.
     * COMPONENT TYPE: CharacterInventories
     */
    
    public DestinyResponsesDestinyProfileResponseCharacterInventories characterInventories;
    public DestinyResponsesDestinyProfileResponse withCharacterInventories(DestinyResponsesDestinyProfileResponseCharacterInventories characterInventories) {
        this.characterInventories = characterInventories;
        return this;
    }
    
    /**
     * Items available from Kiosks that are available to a specific character as opposed to the account as a whole. It must be combined with data from the profileKiosks property to get a full picture of the character's available items to check out of a kiosk.
     * This component returns information about what Kiosk items are available to you on a *Character* level. Usually, kiosk items will be earned for the entire Profile (all characters) at once. To find those, look in the profileKiosks property.
     * COMPONENT TYPE: Kiosks
     */
    
    public DestinyResponsesDestinyProfileResponseCharacterKiosks characterKiosks;
    public DestinyResponsesDestinyProfileResponse withCharacterKiosks(DestinyResponsesDestinyProfileResponseCharacterKiosks characterKiosks) {
        this.characterKiosks = characterKiosks;
        return this;
    }
    
    /**
     * The character loadouts, keyed by the Character's Id.
     * COMPONENT TYPE: CharacterLoadouts
     */
    
    public DestinyResponsesDestinyProfileResponseCharacterLoadouts characterLoadouts;
    public DestinyResponsesDestinyProfileResponse withCharacterLoadouts(DestinyResponsesDestinyProfileResponseCharacterLoadouts characterLoadouts) {
        this.characterLoadouts = characterLoadouts;
        return this;
    }
    
    /**
     * When sockets refer to reusable Plug Sets (see DestinyPlugSetDefinition for more info), this is the set of plugs and their states, per character, that are character-scoped.
     * This comes back with ItemSockets, as it is needed for a complete picture of the sockets on requested items.
     * COMPONENT TYPE: ItemSockets
     */
    
    public DestinyResponsesDestinyProfileResponseCharacterPlugSets characterPlugSets;
    public DestinyResponsesDestinyProfileResponse withCharacterPlugSets(DestinyResponsesDestinyProfileResponseCharacterPlugSets characterPlugSets) {
        this.characterPlugSets = characterPlugSets;
        return this;
    }
    
    /**
     * COMPONENT TYPE: PresentationNodes
     */
    
    public DestinyResponsesDestinyProfileResponseCharacterPresentationNodes characterPresentationNodes;
    public DestinyResponsesDestinyProfileResponse withCharacterPresentationNodes(DestinyResponsesDestinyProfileResponseCharacterPresentationNodes characterPresentationNodes) {
        this.characterPresentationNodes = characterPresentationNodes;
        return this;
    }
    
    /**
     * Character-level progression data, keyed by the Character's Id.
     * COMPONENT TYPE: CharacterProgressions
     */
    
    public DestinyResponsesDestinyProfileResponseCharacterProgressions characterProgressions;
    public DestinyResponsesDestinyProfileResponse withCharacterProgressions(DestinyResponsesDestinyProfileResponseCharacterProgressions characterProgressions) {
        this.characterProgressions = characterProgressions;
        return this;
    }
    
    /**
     * COMPONENT TYPE: Records
     */
    
    public DestinyResponsesDestinyProfileResponseCharacterRecords characterRecords;
    public DestinyResponsesDestinyProfileResponse withCharacterRecords(DestinyResponsesDestinyProfileResponseCharacterRecords characterRecords) {
        this.characterRecords = characterRecords;
        return this;
    }
    
    /**
     * Character rendering data - a minimal set of info needed to render a character in 3D - keyed by the Character's Id.
     * COMPONENT TYPE: CharacterRenderData
     */
    
    public DestinyResponsesDestinyProfileResponseCharacterRenderData characterRenderData;
    public DestinyResponsesDestinyProfileResponse withCharacterRenderData(DestinyResponsesDestinyProfileResponseCharacterRenderData characterRenderData) {
        this.characterRenderData = characterRenderData;
        return this;
    }
    
    /**
     * COMPONENT TYPE: StringVariables
     */
    
    public DestinyResponsesDestinyProfileResponseCharacterStringVariables characterStringVariables;
    public DestinyResponsesDestinyProfileResponse withCharacterStringVariables(DestinyResponsesDestinyProfileResponseCharacterStringVariables characterStringVariables) {
        this.characterStringVariables = characterStringVariables;
        return this;
    }
    
    /**
     * Do you ever get the feeling that a system was designed *too* flexibly? That it can be used in so many different ways that you end up being unable to provide an easy to use abstraction for the mess that's happening under the surface?
     * Let's talk about character-specific data that might be related to items without instances. These two statements are totally unrelated, I promise.
     * At some point during D2, it was decided that items - such as Bounties - could be given to characters and *not* have instance data, but that *could* display and even use relevant state information on your account and character.
     * Up to now, any item that had meaningful dependencies on character or account state had to be instanced, and thus "itemComponents" was all that you needed: it was keyed by item's instance IDs and provided the stateful information you needed inside.
     * Unfortunately, we don't live in such a magical world anymore. This is information held on a per-character basis about non-instanced items that the characters have in their inventory - or that reference character-specific state information even if it's in Account-level inventory - and the values related to that item's state in relation to the given character.
     * To give a concrete example, look at a Moments of Triumph bounty. They exist in a character's inventory, and show/care about a character's progression toward completing the bounty. But the bounty itself is a non-instanced item, like a mod or a currency. This returns that data for the characters who have the bounty in their inventory.
     * I'm not crying, you're crying Okay we're both crying but it's going to be okay I promise Actually I shouldn't promise that, I don't know if it's going to be okay
     */
    
    public java.util.Map<String, DestinyBaseItemComponentSetOfuint32> characterUninstancedItemComponents;
    public DestinyResponsesDestinyProfileResponse withCharacterUninstancedItemComponents(java.util.Map<String, DestinyBaseItemComponentSetOfuint32> characterUninstancedItemComponents) {
        this.characterUninstancedItemComponents = characterUninstancedItemComponents;
        return this;
    }
    
    /**
     * Basic information about each character, keyed by the CharacterId.
     * COMPONENT TYPE: Characters
     */
    
    public DestinyResponsesDestinyProfileResponseCharacters characters;
    public DestinyResponsesDestinyProfileResponse withCharacters(DestinyResponsesDestinyProfileResponseCharacters characters) {
        this.characters = characters;
        return this;
    }
    
    /**
     * Information about instanced items across all returned characters, keyed by the item's instance ID.
     * COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]
     */
    
    public DestinyResponsesDestinyProfileResponseItemComponents itemComponents;
    public DestinyResponsesDestinyProfileResponse withItemComponents(DestinyResponsesDestinyProfileResponseItemComponents itemComponents) {
        this.itemComponents = itemComponents;
        return this;
    }
    
    /**
     * COMPONENT TYPE: Metrics
     */
    
    public DestinyResponsesDestinyProfileResponseMetrics metrics;
    public DestinyResponsesDestinyProfileResponse withMetrics(DestinyResponsesDestinyProfileResponseMetrics metrics) {
        this.metrics = metrics;
        return this;
    }
    
    /**
     * Silver quantities for any platform on which this Profile plays destiny.
     *  COMPONENT TYPE: PlatformSilver
     */
    
    public DestinyResponsesDestinyProfileResponsePlatformSilver platformSilver;
    public DestinyResponsesDestinyProfileResponse withPlatformSilver(DestinyResponsesDestinyProfileResponsePlatformSilver platformSilver) {
        this.platformSilver = platformSilver;
        return this;
    }
    
    /**
     * The basic information about the Destiny Profile (formerly "Account").
     * COMPONENT TYPE: Profiles
     */
    
    public DestinyResponsesDestinyProfileResponseProfile profile;
    public DestinyResponsesDestinyProfileResponse withProfile(DestinyResponsesDestinyProfileResponseProfile profile) {
        this.profile = profile;
        return this;
    }
    
    /**
     * COMPONENT TYPE: Collectibles
     */
    
    public DestinyResponsesDestinyProfileResponseProfileCollectibles profileCollectibles;
    public DestinyResponsesDestinyProfileResponse withProfileCollectibles(DestinyResponsesDestinyProfileResponseProfileCollectibles profileCollectibles) {
        this.profileCollectibles = profileCollectibles;
        return this;
    }
    
    /**
     * COMPONENT TYPE: SocialCommendations
     */
    
    public DestinyResponsesDestinyProfileResponseProfileCommendations profileCommendations;
    public DestinyResponsesDestinyProfileResponse withProfileCommendations(DestinyResponsesDestinyProfileResponseProfileCommendations profileCommendations) {
        this.profileCommendations = profileCommendations;
        return this;
    }
    
    /**
     * The profile-level currencies owned by the Destiny Profile.
     * COMPONENT TYPE: ProfileCurrencies
     */
    
    public DestinyResponsesDestinyProfileResponseProfileCurrencies profileCurrencies;
    public DestinyResponsesDestinyProfileResponse withProfileCurrencies(DestinyResponsesDestinyProfileResponseProfileCurrencies profileCurrencies) {
        this.profileCurrencies = profileCurrencies;
        return this;
    }
    
    /**
     * The profile-level inventory of the Destiny Profile.
     * COMPONENT TYPE: ProfileInventories
     */
    
    public DestinyResponsesDestinyProfileResponseProfileInventory profileInventory;
    public DestinyResponsesDestinyProfileResponse withProfileInventory(DestinyResponsesDestinyProfileResponseProfileInventory profileInventory) {
        this.profileInventory = profileInventory;
        return this;
    }
    
    /**
     * Items available from Kiosks that are available Profile-wide (i.e. across all characters)
     * This component returns information about what Kiosk items are available to you on a *Profile* level. It is theoretically possible for Kiosks to have items gated by specific Character as well. If you ever have those, you will find them on the characterKiosks property.
     * COMPONENT TYPE: Kiosks
     */
    
    public DestinyResponsesDestinyProfileResponseProfileKiosks profileKiosks;
    public DestinyResponsesDestinyProfileResponse withProfileKiosks(DestinyResponsesDestinyProfileResponseProfileKiosks profileKiosks) {
        this.profileKiosks = profileKiosks;
        return this;
    }
    
    /**
     * When sockets refer to reusable Plug Sets (see DestinyPlugSetDefinition for more info), this is the set of plugs and their states that are profile-scoped.
     * This comes back with ItemSockets, as it is needed for a complete picture of the sockets on requested items.
     * COMPONENT TYPE: ItemSockets
     */
    
    public DestinyResponsesDestinyProfileResponseProfilePlugSets profilePlugSets;
    public DestinyResponsesDestinyProfileResponse withProfilePlugSets(DestinyResponsesDestinyProfileResponseProfilePlugSets profilePlugSets) {
        this.profilePlugSets = profilePlugSets;
        return this;
    }
    
    /**
     * COMPONENT TYPE: PresentationNodes
     */
    
    public DestinyResponsesDestinyProfileResponseProfilePresentationNodes profilePresentationNodes;
    public DestinyResponsesDestinyProfileResponse withProfilePresentationNodes(DestinyResponsesDestinyProfileResponseProfilePresentationNodes profilePresentationNodes) {
        this.profilePresentationNodes = profilePresentationNodes;
        return this;
    }
    
    /**
     * When we have progression information - such as Checklists - that may apply profile-wide, it will be returned here rather than in the per-character progression data.
     * COMPONENT TYPE: ProfileProgression
     */
    
    public DestinyResponsesDestinyProfileResponseProfileProgression profileProgression;
    public DestinyResponsesDestinyProfileResponse withProfileProgression(DestinyResponsesDestinyProfileResponseProfileProgression profileProgression) {
        this.profileProgression = profileProgression;
        return this;
    }
    
    /**
     * COMPONENT TYPE: Records
     */
    
    public DestinyResponsesDestinyProfileResponseProfileRecords profileRecords;
    public DestinyResponsesDestinyProfileResponse withProfileRecords(DestinyResponsesDestinyProfileResponseProfileRecords profileRecords) {
        this.profileRecords = profileRecords;
        return this;
    }
    
    /**
     * COMPONENT TYPE: StringVariables
     */
    
    public DestinyResponsesDestinyProfileResponseProfileStringVariables profileStringVariables;
    public DestinyResponsesDestinyProfileResponse withProfileStringVariables(DestinyResponsesDestinyProfileResponseProfileStringVariables profileStringVariables) {
        this.profileStringVariables = profileStringVariables;
        return this;
    }
    
    /**
     * COMPONENT TYPE: Transitory
     */
    
    public DestinyResponsesDestinyProfileResponseProfileTransitoryData profileTransitoryData;
    public DestinyResponsesDestinyProfileResponse withProfileTransitoryData(DestinyResponsesDestinyProfileResponseProfileTransitoryData profileTransitoryData) {
        this.profileTransitoryData = profileTransitoryData;
        return this;
    }
    
    /**
     * Records the timestamp of when most components were last generated from the world server source. Unless the component type is specified in the documentation for secondaryComponentsMintedTimestamp, this value is sufficient to do data freshness.
     */
    
    public OffsetDateTime responseMintedTimestamp;
    public DestinyResponsesDestinyProfileResponse withResponseMintedTimestamp(OffsetDateTime responseMintedTimestamp) {
        this.responseMintedTimestamp = responseMintedTimestamp;
        return this;
    }
    
    /**
     * Some secondary components are not tracked in the primary response timestamp and have their timestamp tracked here. If your component is any of the following, this field is where you will find your timestamp value:
     *  PresentationNodes, Records, Collectibles, Metrics, StringVariables, Craftables, Transitory
     *  All other component types may use the primary timestamp property.
     */
    
    public OffsetDateTime secondaryComponentsMintedTimestamp;
    public DestinyResponsesDestinyProfileResponse withSecondaryComponentsMintedTimestamp(OffsetDateTime secondaryComponentsMintedTimestamp) {
        this.secondaryComponentsMintedTimestamp = secondaryComponentsMintedTimestamp;
        return this;
    }
    
    /**
     * Recent, refundable purchases you have made from vendors. When will you use it? Couldn't say...
     * COMPONENT TYPE: VendorReceipts
     */
    
    public DestinyResponsesDestinyProfileResponseVendorReceipts vendorReceipts;
    public DestinyResponsesDestinyProfileResponse withVendorReceipts(DestinyResponsesDestinyProfileResponseVendorReceipts vendorReceipts) {
        this.vendorReceipts = vendorReceipts;
        return this;
    }
    
}
