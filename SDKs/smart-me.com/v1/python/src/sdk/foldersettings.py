"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class FolderSettings:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def folder_settings_delete(self, request: operations.FolderSettingsDeleteRequest) -> operations.FolderSettingsDeleteResponse:
        r"""Deletes a folder"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FolderSettingsDeleteRequest, base_url, '/api/folder/settings/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FolderSettingsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def folder_settings_get(self, request: operations.FolderSettingsGetRequest) -> operations.FolderSettingsGetResponse:
        r"""Gets the settings of a folder or meter"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FolderSettingsGetRequest, base_url, '/api/folder/settings/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FolderSettingsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FolderSettings])
                res.folder_settings = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FolderSettings])
                res.folder_settings = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def folder_settings_post_form(self, request: operations.FolderSettingsPostFormRequest) -> operations.FolderSettingsPostFormResponse:
        r"""Add or edit a folder or a meter. To add a new folder use and empty ID"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FolderSettingsPostFormRequest, base_url, '/api/folder/settings/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "folder_settings", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FolderSettingsPostFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FolderMenuItem])
                res.folder_menu_item = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FolderMenuItem])
                res.folder_menu_item = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def folder_settings_post_json(self, request: operations.FolderSettingsPostJSONRequest) -> operations.FolderSettingsPostJSONResponse:
        r"""Add or edit a folder or a meter. To add a new folder use and empty ID"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FolderSettingsPostJSONRequest, base_url, '/api/folder/settings/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "folder_settings", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FolderSettingsPostJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FolderMenuItem])
                res.folder_menu_item = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FolderMenuItem])
                res.folder_menu_item = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def folder_settings_post_raw(self, request: operations.FolderSettingsPostRawRequest) -> operations.FolderSettingsPostRawResponse:
        r"""Add or edit a folder or a meter. To add a new folder use and empty ID"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FolderSettingsPostRawRequest, base_url, '/api/folder/settings/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FolderSettingsPostRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FolderMenuItem])
                res.folder_menu_item = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FolderMenuItem])
                res.folder_menu_item = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    