"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import exportformat_enum as shared_exportformat_enum
from ..shared import s3ssealgorithm_enum as shared_s3ssealgorithm_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ExportTableToPointInTimeInput:
    
    s3_bucket: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3Bucket') }})  
    table_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TableArn') }})  
    client_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClientToken'), 'exclude': lambda f: f is None }})  
    export_format: Optional[shared_exportformat_enum.ExportFormatEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExportFormat'), 'exclude': lambda f: f is None }})  
    export_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExportTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    s3_bucket_owner: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3BucketOwner'), 'exclude': lambda f: f is None }})  
    s3_prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3Prefix'), 'exclude': lambda f: f is None }})  
    s3_sse_algorithm: Optional[shared_s3ssealgorithm_enum.S3SseAlgorithmEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3SseAlgorithm'), 'exclude': lambda f: f is None }})  
    s3_sse_kms_key_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3SseKmsKeyId'), 'exclude': lambda f: f is None }})  
    