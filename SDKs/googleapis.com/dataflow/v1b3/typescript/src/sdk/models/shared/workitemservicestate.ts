/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ApproximateProgress } from "./approximateprogress";
import { ApproximateSplitRequest } from "./approximatesplitrequest";
import { HotKeyDetection } from "./hotkeydetection";
import { MetricShortId } from "./metricshortid";
import { Position } from "./position";
import { Status } from "./status";
import { Expose, Type } from "class-transformer";

/**
 * The Dataflow service's idea of the current state of a WorkItem being processed by a worker.
 */
export class WorkItemServiceState extends SpeakeasyBase {
  /**
   * The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "completeWorkStatus" })
  @Type(() => Status)
  completeWorkStatus?: Status;

  /**
   * Other data returned by the service, specific to the particular worker harness.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "harnessData" })
  harnessData?: Record<string, any>;

  /**
   * Proto describing a hot key detected on a given WorkItem.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hotKeyDetection" })
  @Type(() => HotKeyDetection)
  hotKeyDetection?: HotKeyDetection;

  /**
   * Time at which the current lease will expire.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "leaseExpireTime" })
  leaseExpireTime?: string;

  /**
   * The short ids that workers should use in subsequent metric updates. Workers should strive to use short ids whenever possible, but it is ok to request the short_id again if a worker lost track of it (e.g. if the worker is recovering from a crash). NOTE: it is possible that the response may have short ids for a subset of the metrics.
   */
  @SpeakeasyMetadata({ elemType: MetricShortId })
  @Expose({ name: "metricShortId" })
  @Type(() => MetricShortId)
  metricShortId?: MetricShortId[];

  /**
   * The index value to use for the next report sent by the worker. Note: If the report call fails for whatever reason, the worker should reuse this index for subsequent report attempts.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nextReportIndex" })
  nextReportIndex?: string;

  /**
   * New recommended reporting interval.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reportStatusInterval" })
  reportStatusInterval?: string;

  /**
   * A suggestion by the service to the worker to dynamically split the WorkItem.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "splitRequest" })
  @Type(() => ApproximateSplitRequest)
  splitRequest?: ApproximateSplitRequest;

  /**
   * Obsolete in favor of ApproximateReportedProgress and ApproximateSplitRequest.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "suggestedStopPoint" })
  @Type(() => ApproximateProgress)
  suggestedStopPoint?: ApproximateProgress;

  /**
   * Position defines a position within a collection of data. The value can be either the end position, a key (used with ordered collections), a byte offset, or a record index.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "suggestedStopPosition" })
  @Type(() => Position)
  suggestedStopPosition?: Position;
}
