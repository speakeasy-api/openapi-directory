// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type DeleteLensPathParams struct {
	LensAlias string `pathParam:"style=simple,explode=false,name=LensAlias"`
}

// DeleteLensLensStatusEnum - The status of the lens to be deleted.
type DeleteLensLensStatusEnum string

const (
	DeleteLensLensStatusEnumAll       DeleteLensLensStatusEnum = "ALL"
	DeleteLensLensStatusEnumDraft     DeleteLensLensStatusEnum = "DRAFT"
	DeleteLensLensStatusEnumPublished DeleteLensLensStatusEnum = "PUBLISHED"
)

func (e *DeleteLensLensStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ALL":
		fallthrough
	case "DRAFT":
		fallthrough
	case "PUBLISHED":
		*e = DeleteLensLensStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteLensLensStatusEnum: %s", s)
	}
}

type DeleteLensQueryParams struct {
	ClientRequestToken string `queryParam:"style=form,explode=true,name=ClientRequestToken"`
	// The status of the lens to be deleted.
	LensStatus DeleteLensLensStatusEnum `queryParam:"style=form,explode=true,name=LensStatus"`
}

type DeleteLensHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type DeleteLensRequest struct {
	PathParams  DeleteLensPathParams
	QueryParams DeleteLensQueryParams
	Headers     DeleteLensHeaders
}

type DeleteLensResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// InternalServerException
	InternalServerException interface{}
	StatusCode              int
	RawResponse             *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
