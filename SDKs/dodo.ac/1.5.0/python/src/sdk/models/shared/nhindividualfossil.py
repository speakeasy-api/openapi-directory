"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class NHIndividualFossilColorsEnum(str, Enum):
    AQUA = 'Aqua'
    BEIGE = 'Beige'
    BLACK = 'Black'
    BLUE = 'Blue'
    BROWN = 'Brown'
    COLORFUL = 'Colorful'
    GRAY = 'Gray'
    GREEN = 'Green'
    ORANGE = 'Orange'
    PINK = 'Pink'
    PURPLE = 'Purple'
    RED = 'Red'
    WHITE = 'White'
    YELLOW = 'Yellow'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NHIndividualFossil:
    r"""A JSON object describing the individual fossil."""
    
    colors: Optional[list[NHIndividualFossilColorsEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('colors'), 'exclude': lambda f: f is None }})  
    fossil_group: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fossil_group'), 'exclude': lambda f: f is None }})
    r"""The name of the group that the fossil belongs to."""  
    hha_base: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hha_base'), 'exclude': lambda f: f is None }})
    r"""The base value that the item provides to a player's Happy Home Academy score when placed in their home."""  
    image_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image_url'), 'exclude': lambda f: f is None }})
    r"""Image of the fossil's icon. dodo.ac is Nookipedia's CDN server."""  
    interactable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interactable'), 'exclude': lambda f: f is None }})
    r"""Whether or not the item can be interacted with."""  
    length: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('length'), 'exclude': lambda f: f is None }})
    r"""The length of the fossil."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the fossil."""  
    sell: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sell'), 'exclude': lambda f: f is None }})
    r"""The number of bells the item can be sold to Nook's store for."""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""Link to the respective Nookipedia article."""  
    width: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('width'), 'exclude': lambda f: f is None }})
    r"""The width of the fossil."""  
    