<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * IdentitytoolkitRelyingpartyCreateAuthUriRequest - Request to get the IDP authentication URL.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class IdentitytoolkitRelyingpartyCreateAuthUriRequest
{
    /**
     * The app ID of the mobile app, base64(CERT_SHA1):PACKAGE_NAME for Android, BUNDLE_ID for iOS.
     * 
     * @var ?string $appId
     */
	#[\JMS\Serializer\Annotation\SerializedName('appId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $appId = null;
    
    /**
     * Explicitly specify the auth flow type. Currently only support "CODE_FLOW" type. The field is only used for Google provider.
     * 
     * @var ?string $authFlowType
     */
	#[\JMS\Serializer\Annotation\SerializedName('authFlowType')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $authFlowType = null;
    
    /**
     * The relying party OAuth client ID.
     * 
     * @var ?string $clientId
     */
	#[\JMS\Serializer\Annotation\SerializedName('clientId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $clientId = null;
    
    /**
     * The opaque value used by the client to maintain context info between the authentication request and the IDP callback.
     * 
     * @var ?string $context
     */
	#[\JMS\Serializer\Annotation\SerializedName('context')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $context = null;
    
    /**
     * The URI to which the IDP redirects the user after the federated login flow.
     * 
     * @var ?string $continueUri
     */
	#[\JMS\Serializer\Annotation\SerializedName('continueUri')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $continueUri = null;
    
    /**
     * The query parameter that client can customize by themselves in auth url. The following parameters are reserved for server so that they cannot be customized by clients: client_id, response_type, scope, redirect_uri, state, oauth_token.
     * 
     * @var ?array<string, string> $customParameter
     */
	#[\JMS\Serializer\Annotation\SerializedName('customParameter')]
    #[\JMS\Serializer\Annotation\Type('array<string, string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $customParameter = null;
    
    /**
     * The hosted domain to restrict sign-in to accounts at that domain for Google Apps hosted accounts.
     * 
     * @var ?string $hostedDomain
     */
	#[\JMS\Serializer\Annotation\SerializedName('hostedDomain')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $hostedDomain = null;
    
    /**
     * The email or federated ID of the user.
     * 
     * @var ?string $identifier
     */
	#[\JMS\Serializer\Annotation\SerializedName('identifier')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $identifier = null;
    
    /**
     * The developer's consumer key for OpenId OAuth Extension
     * 
     * @var ?string $oauthConsumerKey
     */
	#[\JMS\Serializer\Annotation\SerializedName('oauthConsumerKey')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $oauthConsumerKey = null;
    
    /**
     * Additional oauth scopes, beyond the basid user profile, that the user would be prompted to grant
     * 
     * @var ?string $oauthScope
     */
	#[\JMS\Serializer\Annotation\SerializedName('oauthScope')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $oauthScope = null;
    
    /**
     * Optional realm for OpenID protocol. The sub string "scheme://domain:port" of the param "continueUri" is used if this is not set.
     * 
     * @var ?string $openidRealm
     */
	#[\JMS\Serializer\Annotation\SerializedName('openidRealm')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $openidRealm = null;
    
    /**
     * The native app package for OTA installation.
     * 
     * @var ?string $otaApp
     */
	#[\JMS\Serializer\Annotation\SerializedName('otaApp')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $otaApp = null;
    
    /**
     * The IdP ID. For white listed IdPs it's a short domain name e.g. google.com, aol.com, live.net and yahoo.com. For other OpenID IdPs it's the OP identifier.
     * 
     * @var ?string $providerId
     */
	#[\JMS\Serializer\Annotation\SerializedName('providerId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $providerId = null;
    
    /**
     * The session_id passed by client.
     * 
     * @var ?string $sessionId
     */
	#[\JMS\Serializer\Annotation\SerializedName('sessionId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $sessionId = null;
    
    /**
     * For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from.
     * 
     * @var ?string $tenantId
     */
	#[\JMS\Serializer\Annotation\SerializedName('tenantId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $tenantId = null;
    
    /**
     * Tenant project number to be used for idp discovery.
     * 
     * @var ?string $tenantProjectNumber
     */
	#[\JMS\Serializer\Annotation\SerializedName('tenantProjectNumber')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $tenantProjectNumber = null;
    
	public function __construct()
	{
		$this->appId = null;
		$this->authFlowType = null;
		$this->clientId = null;
		$this->context = null;
		$this->continueUri = null;
		$this->customParameter = null;
		$this->hostedDomain = null;
		$this->identifier = null;
		$this->oauthConsumerKey = null;
		$this->oauthScope = null;
		$this->openidRealm = null;
		$this->otaApp = null;
		$this->providerId = null;
		$this->sessionId = null;
		$this->tenantId = null;
		$this->tenantProjectNumber = null;
	}
}
