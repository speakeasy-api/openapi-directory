"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import exclusionrule as shared_exclusionrule
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional

class OfferAvailabilityEnum(str, Enum):
    AVAILABLE = 'Available'
    COMING_SOON = 'ComingSoon'

class OfferDeliveryTypeEnum(str, Enum):
    STREAM = 'Stream'
    DOWNLOAD = 'Download'
    STREAM_OR_DOWNLOAD = 'StreamOrDownload'
    PROGRESSIVE_DOWNLOAD = 'ProgressiveDownload'
    NONE = 'None'

class OfferOwnershipEnum(str, Enum):
    SUBSCRIPTION = 'Subscription'
    FREE = 'Free'
    RENT = 'Rent'
    OWN = 'Own'
    NONE = 'None'

class OfferResolutionEnum(str, Enum):
    SD = 'SD'
    HD_720 = 'HD-720'
    HD_1080 = 'HD-1080'
    HD_4_K = 'HD-4K'
    EXTERNAL = 'External'
    UNKNOWN = 'Unknown'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Offer:
    r"""The base type for both Offer and Entitlement."""
    
    availability: OfferAvailabilityEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availability') }})  
    delivery_type: OfferDeliveryTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deliveryType') }})  
    ownership: OfferOwnershipEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ownership') }})  
    price: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price') }})  
    resolution: OfferResolutionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resolution') }})  
    scopes: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scopes') }})  
    custom_fields: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customFields'), 'exclude': lambda f: f is None }})
    r"""A map of custom fields defined by a curator for an offer."""  
    end_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    exclusion_rules: Optional[list[shared_exclusionrule.ExclusionRule]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exclusionRules'), 'exclude': lambda f: f is None }})
    r"""Any specific playback exclusion rules."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    max_downloads: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxDownloads'), 'exclude': lambda f: f is None }})
    r"""The maximum number of allowed downloads."""  
    max_plays: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxPlays'), 'exclude': lambda f: f is None }})
    r"""The maximum number of allowed plays."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    play_period: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('playPeriod'), 'exclude': lambda f: f is None }})
    r"""The length of time in minutes which the rental will last once played for the first time."""  
    rental_period: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rentalPeriod'), 'exclude': lambda f: f is None }})
    r"""The length of time in minutes which the rental will last once purchased."""  
    start_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    subscription_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriptionCode'), 'exclude': lambda f: f is None }})
    r"""The code of the subscription this offer is offered under, if any."""  
    