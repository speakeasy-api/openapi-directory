/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Container - A single application container. This specifies both the container to run, the command to run in the container and the arguments to supply to it. Note that additional arguments may be supplied by the system to the container at runtime.
 */
public class Container {
    /**
     * (Optional) Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("args")
    public String[] args;

    public Container withArgs(String[] args) {
        this.args = args;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("command")
    public String[] command;

    public Container withCommand(String[] command) {
        this.command = command;
        return this;
    }
    
    /**
     * (Optional) List of environment variables to set in the container.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("env")
    public EnvVar[] env;

    public Container withEnv(EnvVar[] env) {
        this.env = env;
        return this;
    }
    
    /**
     * (Optional) List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("envFrom")
    public EnvFromSource[] envFrom;

    public Container withEnvFrom(EnvFromSource[] envFrom) {
        this.envFrom = envFrom;
        return this;
    }
    
    /**
     * Only supports containers from Google Container Registry or Artifact Registry URL of the Container image. More info: https://kubernetes.io/docs/concepts/containers/images
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image")
    public String image;

    public Container withImage(String image) {
        this.image = image;
        return this;
    }
    
    /**
     * (Optional) Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("imagePullPolicy")
    public String imagePullPolicy;

    public Container withImagePullPolicy(String imagePullPolicy) {
        this.imagePullPolicy = imagePullPolicy;
        return this;
    }
    
    /**
     * Not supported by Cloud Run Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("livenessProbe")
    public Probe livenessProbe;

    public Container withLivenessProbe(Probe livenessProbe) {
        this.livenessProbe = livenessProbe;
        return this;
    }
    
    /**
     * (Optional) Name of the container specified as a DNS_LABEL. Currently unused in Cloud Run. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-label-names
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Container withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * (Optional) List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ports")
    public ContainerPort[] ports;

    public Container withPorts(ContainerPort[] ports) {
        this.ports = ports;
        return this;
    }
    
    /**
     * Not supported by Cloud Run Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("readinessProbe")
    public Probe readinessProbe;

    public Container withReadinessProbe(Probe readinessProbe) {
        this.readinessProbe = readinessProbe;
        return this;
    }
    
    /**
     * ResourceRequirements describes the compute resource requirements.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resources")
    public ResourceRequirements resources;

    public Container withResources(ResourceRequirements resources) {
        this.resources = resources;
        return this;
    }
    
    /**
     * Not supported by Cloud Run SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext. When both are set, the values in SecurityContext take precedence.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("securityContext")
    public SecurityContext securityContext;

    public Container withSecurityContext(SecurityContext securityContext) {
        this.securityContext = securityContext;
        return this;
    }
    
    /**
     * Not supported by Cloud Run Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startupProbe")
    public Probe startupProbe;

    public Container withStartupProbe(Probe startupProbe) {
        this.startupProbe = startupProbe;
        return this;
    }
    
    /**
     * (Optional) Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("terminationMessagePath")
    public String terminationMessagePath;

    public Container withTerminationMessagePath(String terminationMessagePath) {
        this.terminationMessagePath = terminationMessagePath;
        return this;
    }
    
    /**
     * (Optional) Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("terminationMessagePolicy")
    public String terminationMessagePolicy;

    public Container withTerminationMessagePolicy(String terminationMessagePolicy) {
        this.terminationMessagePolicy = terminationMessagePolicy;
        return this;
    }
    
    /**
     * (Optional) Volume to mount into the container's filesystem. Only supports SecretVolumeSources. Pod volumes to mount into the container's filesystem.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("volumeMounts")
    public VolumeMount[] volumeMounts;

    public Container withVolumeMounts(VolumeMount[] volumeMounts) {
        this.volumeMounts = volumeMounts;
        return this;
    }
    
    /**
     * (Optional) Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workingDir")
    public String workingDir;

    public Container withWorkingDir(String workingDir) {
        this.workingDir = workingDir;
        return this;
    }
    
    public Container(){}
}
