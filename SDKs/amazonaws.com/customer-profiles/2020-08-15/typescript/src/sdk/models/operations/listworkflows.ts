/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform } from "class-transformer";

/**
 * Status of workflow execution.
 */
export enum ListWorkflowsRequestBodyStatusEnum {
  NotStarted = "NOT_STARTED",
  InProgress = "IN_PROGRESS",
  Complete = "COMPLETE",
  Failed = "FAILED",
  Split = "SPLIT",
  Retry = "RETRY",
  Cancelled = "CANCELLED",
}

/**
 * The type of workflow. The only supported value is APPFLOW_INTEGRATION.
 */
export enum ListWorkflowsRequestBodyWorkflowTypeEnum {
  AppflowIntegration = "APPFLOW_INTEGRATION",
}

export class ListWorkflowsRequestBody extends SpeakeasyBase {
  /**
   * Retrieve workflows ended after timestamp.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "QueryEndDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  queryEndDate?: Date;

  /**
   * Retrieve workflows started after timestamp.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "QueryStartDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  queryStartDate?: Date;

  /**
   * Status of workflow execution.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Status" })
  status?: ListWorkflowsRequestBodyStatusEnum;

  /**
   * The type of workflow. The only supported value is APPFLOW_INTEGRATION.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "WorkflowType" })
  workflowType?: ListWorkflowsRequestBodyWorkflowTypeEnum;
}

export class ListWorkflowsRequest extends SpeakeasyBase {
  /**
   * The unique name of the domain.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=DomainName",
  })
  domainName: string;

  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: ListWorkflowsRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The maximum number of results to return per page.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=max-results",
  })
  maxResults?: number;

  /**
   * The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=next-token",
  })
  nextToken?: string;
}

export class ListWorkflowsResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * BadRequestException
   */
  @SpeakeasyMetadata()
  badRequestException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  listWorkflowsResponse?: shared.ListWorkflowsResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;
}
