"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class GetSuggestions:
    r"""Search and filter all suggestions using specific criteria"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_suggestion(self, request: operations.GetSuggestionRequest) -> operations.GetSuggestionResponse:
        r"""Get SKU Suggestion by ID
        This endpoint retrieves the data of a specific SKU sent by the seller, to the marketplace. Marketplaces or external matchers can call this endpoint when they want to check the information about a single SKU. 
        
        Note that all the information sent by the seller will be in the [content] object. All remaining information in this endpoint's response is given by the Matcher. 
        
        Matcher rates received SKUs by correlating the data sent by sellers, to existing fields in the marketplace. The calculation of these scores determines whether the product has been: 
        
        `Approved`: score equal to or greater than 80 points. 
        
        `Pending`: from 31 to 79 points.
        
        `Denied`: from 0 to 30 points. 
        
        Note that  if the autoApprove setting is enabled, the SKUs will be approved, regardless of the Score.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSuggestionRequest, base_url, '/suggestions/{sellerId}/{sellerSkuId}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetSuggestionRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSuggestionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def getsuggestions(self, request: operations.GetsuggestionsRequest) -> operations.GetsuggestionsResponse:
        r"""Get all SKU suggestions
        This endpoint retrieves a list of all SKUs sent by the seller for the Marketplace's approval. Marketplace operators should use this endpoint whenever they want to check the full list of received SKUs and their  information. 
        
        Note that all the information sent by the seller will be in the [content] object. All remaining information in this endpoint's response is given by the Matcher. 
        
        Matcher rates received SKUs by correlating the data sent by sellers, to existing fields in the marketplace. The calculation of these scores determines whether the product has been: 
        
        `Approved`: score equal to or greater than 80 points. 
        
        `Pending`: from 31 to 79 points.
        
        `Denied`: from 0 to 30 points. 
        
        Note that  if the autoApprove setting is enabled, the SKUs will be approved, regardless of the Score.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/suggestions'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetsuggestionsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetsuggestionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    