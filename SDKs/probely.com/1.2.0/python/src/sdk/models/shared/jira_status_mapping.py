"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class JiraStatusMapping:
    
    accepted: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accepted'), 'exclude': lambda f: f is None }})
    r"""Id of the Jira status that `accepted` findings should be mapped to."""  
    fixed: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fixed'), 'exclude': lambda f: f is None }})
    r"""Id of the Jira status that `fixed` findings should be mapped to."""  
    invalid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invalid'), 'exclude': lambda f: f is None }})
    r"""Id of the Jira status that `invalid` findings should be mapped to."""  
    notfixed: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notfixed'), 'exclude': lambda f: f is None }})
    r"""Id of the Jira status that `notfixed` findings should be mapped to."""  
    