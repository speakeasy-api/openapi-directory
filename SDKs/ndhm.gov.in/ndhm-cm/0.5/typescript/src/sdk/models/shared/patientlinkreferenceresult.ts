/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ErrorT } from "./error";
import { Meta } from "./meta";
import { RequestReference } from "./requestreference";
import { Expose, Transform, Type } from "class-transformer";

export enum PatientLinkReferenceResultLinkAuthenticationTypeEnum {
  Direct = "DIRECT",
  Mediated = "MEDIATED",
}

export class PatientLinkReferenceResultLink extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "authenticationType" })
  authenticationType: PatientLinkReferenceResultLinkAuthenticationTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "meta" })
  @Type(() => Meta)
  meta?: Meta;

  @SpeakeasyMetadata()
  @Expose({ name: "referenceNumber" })
  referenceNumber: string;
}

export class PatientLinkReferenceResult extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  @Type(() => ErrorT)
  error?: ErrorT;

  @SpeakeasyMetadata()
  @Expose({ name: "link" })
  @Type(() => PatientLinkReferenceResultLink)
  link?: PatientLinkReferenceResultLink;

  /**
   * a nonce, unique for each HTTP request
   */
  @SpeakeasyMetadata()
  @Expose({ name: "requestId" })
  requestId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "resp" })
  @Type(() => RequestReference)
  resp: RequestReference;

  /**
   * Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timestamp" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  timestamp: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "transactionId" })
  transactionId: string;
}
