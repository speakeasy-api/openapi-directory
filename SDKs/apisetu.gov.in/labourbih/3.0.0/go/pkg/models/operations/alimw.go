// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type AlimwSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type AlimwRequestBodyCertificateParameters struct {
	// Reference No.
	RefNo string `json:"RefNo"`
	// Token ID
	TokenNo string `json:"TokenNo"`
}

// AlimwRequestBodyFormatEnum - The format of the certificate in response.
type AlimwRequestBodyFormatEnum string

const (
	AlimwRequestBodyFormatEnumPdf AlimwRequestBodyFormatEnum = "pdf"
)

func (e AlimwRequestBodyFormatEnum) ToPointer() *AlimwRequestBodyFormatEnum {
	return &e
}

func (e *AlimwRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = AlimwRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AlimwRequestBodyFormatEnum: %v", v)
	}
}

// AlimwRequestBody - Request format
type AlimwRequestBody struct {
	CertificateParameters *AlimwRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format AlimwRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Alimw504ApplicationJSONErrorEnum string

const (
	Alimw504ApplicationJSONErrorEnumGatewayTimeout Alimw504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Alimw504ApplicationJSONErrorEnum) ToPointer() *Alimw504ApplicationJSONErrorEnum {
	return &e
}

func (e *Alimw504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Alimw504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Alimw504ApplicationJSONErrorEnum: %v", v)
	}
}

type Alimw504ApplicationJSONErrorDescriptionEnum string

const (
	Alimw504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Alimw504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Alimw504ApplicationJSONErrorDescriptionEnum) ToPointer() *Alimw504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Alimw504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Alimw504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Alimw504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Alimw504ApplicationJSON - Gateway timeout
type Alimw504ApplicationJSON struct {
	Error            *Alimw504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Alimw504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Alimw503ApplicationJSONErrorEnum string

const (
	Alimw503ApplicationJSONErrorEnumServiceUnavailable Alimw503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Alimw503ApplicationJSONErrorEnum) ToPointer() *Alimw503ApplicationJSONErrorEnum {
	return &e
}

func (e *Alimw503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Alimw503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Alimw503ApplicationJSONErrorEnum: %v", v)
	}
}

type Alimw503ApplicationJSONErrorDescriptionEnum string

const (
	Alimw503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Alimw503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Alimw503ApplicationJSONErrorDescriptionEnum) ToPointer() *Alimw503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Alimw503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Alimw503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Alimw503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Alimw503ApplicationJSON - Service unavailable
type Alimw503ApplicationJSON struct {
	Error            *Alimw503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Alimw503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Alimw502ApplicationJSONErrorEnum string

const (
	Alimw502ApplicationJSONErrorEnumBadGatewy Alimw502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Alimw502ApplicationJSONErrorEnum) ToPointer() *Alimw502ApplicationJSONErrorEnum {
	return &e
}

func (e *Alimw502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Alimw502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Alimw502ApplicationJSONErrorEnum: %v", v)
	}
}

type Alimw502ApplicationJSONErrorDescriptionEnum string

const (
	Alimw502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Alimw502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Alimw502ApplicationJSONErrorDescriptionEnum) ToPointer() *Alimw502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Alimw502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Alimw502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Alimw502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Alimw502ApplicationJSON - Bad gateway
type Alimw502ApplicationJSON struct {
	Error            *Alimw502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Alimw502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Alimw500ApplicationJSONErrorEnum string

const (
	Alimw500ApplicationJSONErrorEnumInternalServerError Alimw500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Alimw500ApplicationJSONErrorEnum) ToPointer() *Alimw500ApplicationJSONErrorEnum {
	return &e
}

func (e *Alimw500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Alimw500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Alimw500ApplicationJSONErrorEnum: %v", v)
	}
}

type Alimw500ApplicationJSONErrorDescriptionEnum string

const (
	Alimw500ApplicationJSONErrorDescriptionEnumInternalServerError Alimw500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Alimw500ApplicationJSONErrorDescriptionEnum) ToPointer() *Alimw500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Alimw500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Alimw500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Alimw500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Alimw500ApplicationJSON - Internal server error
type Alimw500ApplicationJSON struct {
	Error            *Alimw500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Alimw500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Alimw404ApplicationJSONErrorEnum string

const (
	Alimw404ApplicationJSONErrorEnumRecordNotFound Alimw404ApplicationJSONErrorEnum = "record_not_found"
	Alimw404ApplicationJSONErrorEnumURLNotFound    Alimw404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Alimw404ApplicationJSONErrorEnum) ToPointer() *Alimw404ApplicationJSONErrorEnum {
	return &e
}

func (e *Alimw404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Alimw404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Alimw404ApplicationJSONErrorEnum: %v", v)
	}
}

type Alimw404ApplicationJSONErrorDescriptionEnum string

const (
	Alimw404ApplicationJSONErrorDescriptionEnumNoRecordFound               Alimw404ApplicationJSONErrorDescriptionEnum = "No record found"
	Alimw404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Alimw404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Alimw404ApplicationJSONErrorDescriptionEnum) ToPointer() *Alimw404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Alimw404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Alimw404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Alimw404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Alimw404ApplicationJSON - No record found
type Alimw404ApplicationJSON struct {
	Error            *Alimw404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Alimw404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Alimw401ApplicationJSONErrorEnum string

const (
	Alimw401ApplicationJSONErrorEnumInvalidAuthentication Alimw401ApplicationJSONErrorEnum = "invalid_authentication"
	Alimw401ApplicationJSONErrorEnumInvalidAuthorization  Alimw401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Alimw401ApplicationJSONErrorEnum) ToPointer() *Alimw401ApplicationJSONErrorEnum {
	return &e
}

func (e *Alimw401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Alimw401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Alimw401ApplicationJSONErrorEnum: %v", v)
	}
}

type Alimw401ApplicationJSONErrorDescriptionEnum string

const (
	Alimw401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Alimw401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Alimw401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Alimw401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Alimw401ApplicationJSONErrorDescriptionEnum) ToPointer() *Alimw401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Alimw401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Alimw401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Alimw401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Alimw401ApplicationJSON - Unauthorized access
type Alimw401ApplicationJSON struct {
	Error            *Alimw401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Alimw401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Alimw400ApplicationJSONErrorEnum string

const (
	Alimw400ApplicationJSONErrorEnumMissingParameter Alimw400ApplicationJSONErrorEnum = "missing_parameter"
	Alimw400ApplicationJSONErrorEnumInvalidParameter Alimw400ApplicationJSONErrorEnum = "invalid_parameter"
	Alimw400ApplicationJSONErrorEnumInvalidFormat    Alimw400ApplicationJSONErrorEnum = "invalid_format"
	Alimw400ApplicationJSONErrorEnumInvalidTxnid     Alimw400ApplicationJSONErrorEnum = "invalid_txnid"
	Alimw400ApplicationJSONErrorEnumInvalidConsentid Alimw400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Alimw400ApplicationJSONErrorEnum) ToPointer() *Alimw400ApplicationJSONErrorEnum {
	return &e
}

func (e *Alimw400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Alimw400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Alimw400ApplicationJSONErrorEnum: %v", v)
	}
}

type Alimw400ApplicationJSONErrorDescriptionEnum string

const (
	Alimw400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Alimw400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Alimw400ApplicationJSONErrorDescriptionEnumBadRequest                              Alimw400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Alimw400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Alimw400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Alimw400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Alimw400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Alimw400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Alimw400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Alimw400ApplicationJSONErrorDescriptionEnum) ToPointer() *Alimw400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Alimw400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Alimw400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Alimw400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Alimw400ApplicationJSON - Bad request
type Alimw400ApplicationJSON struct {
	Error            *Alimw400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Alimw400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type AlimwResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Alimw400ApplicationJSONObject *Alimw400ApplicationJSON
	// Unauthorized access
	Alimw401ApplicationJSONObject *Alimw401ApplicationJSON
	// No record found
	Alimw404ApplicationJSONObject *Alimw404ApplicationJSON
	// Internal server error
	Alimw500ApplicationJSONObject *Alimw500ApplicationJSON
	// Bad gateway
	Alimw502ApplicationJSONObject *Alimw502ApplicationJSON
	// Service unavailable
	Alimw503ApplicationJSONObject *Alimw503ApplicationJSON
	// Gateway timeout
	Alimw504ApplicationJSONObject *Alimw504ApplicationJSON
}
