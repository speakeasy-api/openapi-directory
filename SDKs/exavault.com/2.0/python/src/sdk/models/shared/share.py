"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import shareattributes as shared_shareattributes
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ShareShareRelationshipsShareRelationshipsMessageShareMessageDataTypeEnum(str, Enum):
    r"""Type is message."""
    MESSAGE = 'message'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ShareShareRelationshipsShareRelationshipsMessageShareMessageData:
    
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID of the message."""  
    type: Optional[ShareShareRelationshipsShareRelationshipsMessageShareMessageDataTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type is message."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ShareShareRelationshipsShareRelationshipsMessage:
    
    data: Optional[ShareShareRelationshipsShareRelationshipsMessageShareMessageData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    
class ShareShareRelationshipsShareRelationshipsNotificationDataTypeEnum(str, Enum):
    r"""Type is notification."""
    NOTIFICATION = 'notification'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ShareShareRelationshipsShareRelationshipsNotificationData:
    
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID of the notification."""  
    type: Optional[ShareShareRelationshipsShareRelationshipsNotificationDataTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type is notification."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ShareShareRelationshipsShareRelationshipsNotification:
    
    data: Optional[ShareShareRelationshipsShareRelationshipsNotificationData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ShareShareRelationshipsShareRelationshipsOwnerData:
    
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID of the owner."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type is user."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ShareShareRelationshipsShareRelationshipsOwner:
    
    data: Optional[ShareShareRelationshipsShareRelationshipsOwnerData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    
class ShareShareRelationshipsShareRelationshipsResourceShareResourceDataTypeEnum(str, Enum):
    r"""Type is resource."""
    RESOURCE = 'resource'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ShareShareRelationshipsShareRelationshipsResourceShareResourceData:
    
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID of the shared resource."""  
    type: Optional[ShareShareRelationshipsShareRelationshipsResourceShareResourceDataTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type is resource."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ShareShareRelationshipsShareRelationshipsResource:
    
    data: Optional[ShareShareRelationshipsShareRelationshipsResourceShareResourceData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ShareShareRelationships:
    r"""Message, owner, resource, and notification relationships of the share."""
    
    messages: Optional[list[ShareShareRelationshipsShareRelationshipsMessage]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('messages'), 'exclude': lambda f: f is None }})  
    notifications: Optional[list[ShareShareRelationshipsShareRelationshipsNotification]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notifications'), 'exclude': lambda f: f is None }})  
    owner: Optional[ShareShareRelationshipsShareRelationshipsOwner] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('owner'), 'exclude': lambda f: f is None }})  
    resources: Optional[list[ShareShareRelationshipsShareRelationshipsResource]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resources'), 'exclude': lambda f: f is None }})  
    
class ShareTypeEnum(str, Enum):
    r"""Type of the share."""
    SHARE = 'share'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Share:
    r"""Object contains share properties."""
    
    attributes: Optional[shared_shareattributes.ShareAttributes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes'), 'exclude': lambda f: f is None }})
    r"""Attributes of the share including the name, path and share recipients."""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID of the share."""  
    relationships: Optional[ShareShareRelationships] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationships'), 'exclude': lambda f: f is None }})
    r"""Message, owner, resource, and notification relationships of the share."""  
    type: Optional[ShareTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of the share."""  
    