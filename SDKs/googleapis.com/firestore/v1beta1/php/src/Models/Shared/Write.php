<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Write - A write on a document.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Write
{
    /**
     * A precondition on a document, used for conditional operations.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Precondition $currentDocument
     */
	#[\JMS\Serializer\Annotation\SerializedName('currentDocument')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Precondition')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Precondition $currentDocument = null;
    
    /**
     * A document name to delete. In the format: `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
     * 
     * @var ?string $delete
     */
	#[\JMS\Serializer\Annotation\SerializedName('delete')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $delete = null;
    
    /**
     * A transformation of a document.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DocumentTransform $transform
     */
	#[\JMS\Serializer\Annotation\SerializedName('transform')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\DocumentTransform')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DocumentTransform $transform = null;
    
    /**
     * A Firestore document. Must not exceed 1 MiB - 4 bytes.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Document $update
     */
	#[\JMS\Serializer\Annotation\SerializedName('update')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Document')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Document $update = null;
    
    /**
     * A set of field paths on a document. Used to restrict a get or update operation on a document to a subset of its fields. This is different from standard field masks, as this is always scoped to a Document, and takes in account the dynamic nature of Value.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DocumentMask $updateMask
     */
	#[\JMS\Serializer\Annotation\SerializedName('updateMask')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\DocumentMask')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DocumentMask $updateMask = null;
    
    /**
     * The transforms to perform after update. This field can be set only when the operation is `update`. If present, this write is equivalent to performing `update` and `transform` to the same document atomically and in order.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\FieldTransform> $updateTransforms
     */
	#[\JMS\Serializer\Annotation\SerializedName('updateTransforms')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\FieldTransform>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $updateTransforms = null;
    
	public function __construct()
	{
		$this->currentDocument = null;
		$this->delete = null;
		$this->transform = null;
		$this->update = null;
		$this->updateMask = null;
		$this->updateTransforms = null;
	}
}
