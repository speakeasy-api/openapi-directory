/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * PicoChargingData - Container class for the pico charging station API
 */
public class PicoChargingData {
    /**
     * The energy used by this active charging (in kWh)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ActiveChargingEnergy")
    public Double activeChargingEnergy;
    public PicoChargingData withActiveChargingEnergy(Double activeChargingEnergy) {
        this.activeChargingEnergy = activeChargingEnergy;
        return this;
    }
    
    /**
     * The power of the active charging (in kW)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ActiveChargingPower")
    public Double activeChargingPower;
    public PicoChargingData withActiveChargingPower(Double activeChargingPower) {
        this.activeChargingPower = activeChargingPower;
        return this;
    }
    
    /**
     * The mode how this station is connected to the cloud
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ConnectionMode")
    public PicoChargingDataConnectionModeEnum connectionMode;
    public PicoChargingData withConnectionMode(PicoChargingDataConnectionModeEnum connectionMode) {
        this.connectionMode = connectionMode;
        return this;
    }
    
    /**
     * The duration of this charging in seconds
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Duration")
    public Integer duration;
    public PicoChargingData withDuration(Integer duration) {
        this.duration = duration;
        return this;
    }
    
    /**
     * The last warning or error of the station. This message is only shown if the warning or error happend in the last 5 minutes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("LastWarningOrError")
    public PicoChargingDataLastWarningOrErrorEnum lastWarningOrError;
    public PicoChargingData withLastWarningOrError(PicoChargingDataLastWarningOrErrorEnum lastWarningOrError) {
        this.lastWarningOrError = lastWarningOrError;
        return this;
    }
    
    /**
     * The message of the last warning or error of the station.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("LastWarningOrErrorMessage")
    public String lastWarningOrErrorMessage;
    public PicoChargingData withLastWarningOrErrorMessage(String lastWarningOrErrorMessage) {
        this.lastWarningOrErrorMessage = lastWarningOrErrorMessage;
        return this;
    }
    
    /**
     * The time when the LastWarningOrError happend
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("LastWarningOrErrorTime")
    public OffsetDateTime lastWarningOrErrorTime;
    public PicoChargingData withLastWarningOrErrorTime(OffsetDateTime lastWarningOrErrorTime) {
        this.lastWarningOrErrorTime = lastWarningOrErrorTime;
        return this;
    }
    
    /**
     * Max. dynamic current (e.g. set over API or Modbus TCP) of this station or the loadmanagement group of the station if the station is in a group. in A
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("LoadSheddingState")
    public PicoChargingDataLoadSheddingStateEnum loadSheddingState;
    public PicoChargingData withLoadSheddingState(PicoChargingDataLoadSheddingStateEnum loadSheddingState) {
        this.loadSheddingState = loadSheddingState;
        return this;
    }
    
    /**
     * The name of the loadmanagement group. Or string.empty if the station is not in a group
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("LoadmanagementGroupName")
    public String loadmanagementGroupName;
    public PicoChargingData withLoadmanagementGroupName(String loadmanagementGroupName) {
        this.loadmanagementGroupName = loadmanagementGroupName;
        return this;
    }
    
    /**
     * Max allowed charging current in A
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MaxAllowedChargingCurrent")
    public Integer maxAllowedChargingCurrent;
    public PicoChargingData withMaxAllowedChargingCurrent(Integer maxAllowedChargingCurrent) {
        this.maxAllowedChargingCurrent = maxAllowedChargingCurrent;
        return this;
    }
    
    /**
     * Max. dynamic current (e.g. set over API or Modbus TCP) of this station or the loadmanagement group of the station if the station is in a group. in A
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MaxDynamicCurrent")
    public Integer maxDynamicCurrent;
    public PicoChargingData withMaxDynamicCurrent(Integer maxDynamicCurrent) {
        this.maxDynamicCurrent = maxDynamicCurrent;
        return this;
    }
    
    /**
     * Max. current of the loadmanagement group of this station (if there is any) in A
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MaxLoadmanagementGroupCurrent")
    public Integer maxLoadmanagementGroupCurrent;
    public PicoChargingData withMaxLoadmanagementGroupCurrent(Integer maxLoadmanagementGroupCurrent) {
        this.maxLoadmanagementGroupCurrent = maxLoadmanagementGroupCurrent;
        return this;
    }
    
    /**
     * Max. current of the station in A
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MaxStationCurrent")
    public Integer maxStationCurrent;
    public PicoChargingData withMaxStationCurrent(Integer maxStationCurrent) {
        this.maxStationCurrent = maxStationCurrent;
        return this;
    }
    
    /**
     * Min. current of the station in A
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MinStationCurrent")
    public Integer minStationCurrent;
    public PicoChargingData withMinStationCurrent(Integer minStationCurrent) {
        this.minStationCurrent = minStationCurrent;
        return this;
    }
    
    /**
     * The state of the charging station
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("State")
    public PicoChargingDataStateEnum state;
    public PicoChargingData withState(PicoChargingDataStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * The date of this values
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("ValueDate")
    public OffsetDateTime valueDate;
    public PicoChargingData withValueDate(OffsetDateTime valueDate) {
        this.valueDate = valueDate;
        return this;
    }
    
}
