/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Charging Locations are created by a user to denote locations where they pay for the power used to charge their vehicle. Smart Charging is active at these locations only.
 */
export class ChargingLocations {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete Charging Location
   *
   * @remarks
   * Delete a Charging Location
   */
  deleteCharginglocationsCharginglocationid(
    req: operations.DeleteCharginglocationsCharginglocationidRequest,
    security: operations.DeleteCharginglocationsCharginglocationidSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteCharginglocationsCharginglocationidResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteCharginglocationsCharginglocationidRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/charging-locations/{chargingLocationId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DeleteCharginglocationsCharginglocationidSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteCharginglocationsCharginglocationidResponse =
        new operations.DeleteCharginglocationsCharginglocationidResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * List Charging Locations
   *
   * @remarks
   * Returns a list of Charging Locations registered to the User
   */
  getCharginglocations(
    config?: AxiosRequestConfig
  ): Promise<operations.GetCharginglocationsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/charging-locations";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCharginglocationsResponse =
        new operations.GetCharginglocationsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.onechargingLocationsPostRequestBodyContentApplication1jsonSchemas =
              [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.onechargingLocationsPostRequestBodyContentApplication1jsonSchemas =
              utils.objectToClass(
                httpRes?.data,
                shared.OnechargingLocationsPostRequestBodyContentApplication1jsonSchema,
                resFieldDepth
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Charging Location
   */
  getCharginglocationsCharginglocationid(
    req: operations.GetCharginglocationsCharginglocationidRequest,
    security: operations.GetCharginglocationsCharginglocationidSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetCharginglocationsCharginglocationidResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetCharginglocationsCharginglocationidRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/charging-locations/{chargingLocationId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetCharginglocationsCharginglocationidSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCharginglocationsCharginglocationidResponse =
        new operations.GetCharginglocationsCharginglocationidResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.onechargingLocationsPostRequestBodyContentApplication1jsonSchema =
              utils.objectToClass(
                httpRes?.data,
                shared.OnechargingLocationsPostRequestBodyContentApplication1jsonSchema
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create Charging Location
   */
  postCharginglocations(
    req: operations.PostCharginglocationsRequestBodyInput,
    security: operations.PostCharginglocationsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostCharginglocationsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostCharginglocationsRequestBodyInput(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/charging-locations";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostCharginglocationsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostCharginglocationsResponse =
        new operations.PostCharginglocationsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.onechargingLocationsPostRequestBodyContentApplication1jsonSchema =
              utils.objectToClass(
                httpRes?.data,
                shared.OnechargingLocationsPostRequestBodyContentApplication1jsonSchema
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update Charging Location
   *
   * @remarks
   * Updates a charging location with new configuration
   */
  putCharginglocationsCharginglocationid(
    req: operations.PutCharginglocationsCharginglocationidRequest,
    security: operations.PutCharginglocationsCharginglocationidSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PutCharginglocationsCharginglocationidResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutCharginglocationsCharginglocationidRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/charging-locations/{chargingLocationId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "onechargingLocationsPostRequestBodyContentApplication1jsonSchemaInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PutCharginglocationsCharginglocationidSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutCharginglocationsCharginglocationidResponse =
        new operations.PutCharginglocationsCharginglocationidResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.onechargingLocationsPostRequestBodyContentApplication1jsonSchema =
              utils.objectToClass(
                httpRes?.data,
                shared.OnechargingLocationsPostRequestBodyContentApplication1jsonSchema
              );
          }
          break;
      }

      return res;
    });
  }
}
