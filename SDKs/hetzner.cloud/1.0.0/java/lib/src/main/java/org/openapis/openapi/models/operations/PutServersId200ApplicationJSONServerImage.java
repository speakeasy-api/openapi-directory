/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class PutServersId200ApplicationJSONServerImage {
    /**
     * ID of Server the Image is bound to. Only set for Images of type `backup`.
     */
    @JsonProperty("bound_to")
    public Long boundTo;
    public PutServersId200ApplicationJSONServerImage withBoundTo(Long boundTo) {
        this.boundTo = boundTo;
        return this;
    }
    
    /**
     * Point in time when the Resource was created (in ISO-8601 format)
     */
    @JsonProperty("created")
    public String created;
    public PutServersId200ApplicationJSONServerImage withCreated(String created) {
        this.created = created;
        return this;
    }
    
    /**
     * Information about the Server the Image was created from
     */
    @JsonProperty("created_from")
    public PutServersId200ApplicationJSONServerImageCreatedFrom createdFrom;
    public PutServersId200ApplicationJSONServerImage withCreatedFrom(PutServersId200ApplicationJSONServerImageCreatedFrom createdFrom) {
        this.createdFrom = createdFrom;
        return this;
    }
    
    /**
     * Point in time where the Image was deleted (in ISO-8601 format)
     */
    @JsonProperty("deleted")
    public String deleted;
    public PutServersId200ApplicationJSONServerImage withDeleted(String deleted) {
        this.deleted = deleted;
        return this;
    }
    
    /**
     * Point in time when the Image is considered to be deprecated (in ISO-8601 format)
     */
    @JsonProperty("deprecated")
    public String deprecated;
    public PutServersId200ApplicationJSONServerImage withDeprecated(String deprecated) {
        this.deprecated = deprecated;
        return this;
    }
    
    /**
     * Description of the Image
     */
    @JsonProperty("description")
    public String description;
    public PutServersId200ApplicationJSONServerImage withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Size of the disk contained in the Image in GB
     */
    @JsonProperty("disk_size")
    public Double diskSize;
    public PutServersId200ApplicationJSONServerImage withDiskSize(Double diskSize) {
        this.diskSize = diskSize;
        return this;
    }
    
    /**
     * ID of the Resource
     */
    @JsonProperty("id")
    public Long id;
    public PutServersId200ApplicationJSONServerImage withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * Size of the Image file in our storage in GB. For snapshot Images this is the value relevant for calculating costs for the Image.
     */
    @JsonProperty("image_size")
    public Double imageSize;
    public PutServersId200ApplicationJSONServerImage withImageSize(Double imageSize) {
        this.imageSize = imageSize;
        return this;
    }
    
    /**
     * User-defined labels (key-value pairs)
     */
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;
    public PutServersId200ApplicationJSONServerImage withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Unique identifier of the Image. This value is only set for system Images.
     */
    @JsonProperty("name")
    public String name;
    public PutServersId200ApplicationJSONServerImage withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Flavor of operating system contained in the Image
     */
    @JsonProperty("os_flavor")
    public PutServersId200ApplicationJSONServerImageOsFlavorEnum osFlavor;
    public PutServersId200ApplicationJSONServerImage withOsFlavor(PutServersId200ApplicationJSONServerImageOsFlavorEnum osFlavor) {
        this.osFlavor = osFlavor;
        return this;
    }
    
    /**
     * Operating system version
     */
    @JsonProperty("os_version")
    public String osVersion;
    public PutServersId200ApplicationJSONServerImage withOsVersion(String osVersion) {
        this.osVersion = osVersion;
        return this;
    }
    
    /**
     * Protection configuration for the Resource
     */
    @JsonProperty("protection")
    public PutServersId200ApplicationJSONServerImageProtection protection;
    public PutServersId200ApplicationJSONServerImage withProtection(PutServersId200ApplicationJSONServerImageProtection protection) {
        this.protection = protection;
        return this;
    }
    
    /**
     * Indicates that rapid deploy of the Image is available
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rapid_deploy")
    public Boolean rapidDeploy;
    public PutServersId200ApplicationJSONServerImage withRapidDeploy(Boolean rapidDeploy) {
        this.rapidDeploy = rapidDeploy;
        return this;
    }
    
    /**
     * Whether the Image can be used or if it's still being created or unavailable
     */
    @JsonProperty("status")
    public PutServersId200ApplicationJSONServerImageStatusEnum status;
    public PutServersId200ApplicationJSONServerImage withStatus(PutServersId200ApplicationJSONServerImageStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * Type of the Image
     */
    @JsonProperty("type")
    public PutServersId200ApplicationJSONServerImageTypeEnum type;
    public PutServersId200ApplicationJSONServerImage withType(PutServersId200ApplicationJSONServerImageTypeEnum type) {
        this.type = type;
        return this;
    }
    
}
