/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GetV2ActivitiesEmailsJsonRequest {
    /**
     * Filters emails by action_id. Multiple action ids can be applied
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=action_id")
    public Long[] actionId;

    public GetV2ActivitiesEmailsJsonRequest withActionId(Long[] actionId) {
        this.actionId = actionId;
        return this;
    }
    
    /**
     * Filters emails by whether they have bounced or not
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=bounced")
    public Boolean bounced;

    public GetV2ActivitiesEmailsJsonRequest withBounced(Boolean bounced) {
        this.bounced = bounced;
        return this;
    }
    
    /**
     * Filters emails by cadence. Multiple cadence ids can be applied
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=cadence_id")
    public Long[] cadenceId;

    public GetV2ActivitiesEmailsJsonRequest withCadenceId(Long[] cadenceId) {
        this.cadenceId = cadenceId;
        return this;
    }
    
    /**
     * Filters emails by crm_activity_id. Multiple crm activty ids can be applied
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=crm_activity_id")
    public Long[] crmActivityId;

    public GetV2ActivitiesEmailsJsonRequest withCrmActivityId(Long[] crmActivityId) {
        this.crmActivityId = crmActivityId;
        return this;
    }
    
    /**
     * Filters emails by recipient email address. Multiple emails can be applied.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=email_addresses")
    public String[] emailAddresses;

    public GetV2ActivitiesEmailsJsonRequest withEmailAddresses(String[] emailAddresses) {
        this.emailAddresses = emailAddresses;
        return this;
    }
    
    /**
     * IDs of emails to fetch. If a record can't be found, that record won't be returned and your request will be successful
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=ids")
    public Long[] ids;

    public GetV2ActivitiesEmailsJsonRequest withIds(Long[] ids) {
        this.ids = ids;
        return this;
    }
    
    /**
     * Whether to include total_pages and total_count in the metadata. Defaults to false
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=include_paging_counts")
    public Boolean includePagingCounts;

    public GetV2ActivitiesEmailsJsonRequest withIncludePagingCounts(Boolean includePagingCounts) {
        this.includePagingCounts = includePagingCounts;
        return this;
    }
    
    /**
     * Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit_paging_counts")
    public Boolean limitPagingCounts;

    public GetV2ActivitiesEmailsJsonRequest withLimitPagingCounts(Boolean limitPagingCounts) {
        this.limitPagingCounts = limitPagingCounts;
        return this;
    }
    
    /**
     * Filters emails by one-off only
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=one_off")
    public Boolean oneOff;

    public GetV2ActivitiesEmailsJsonRequest withOneOff(Boolean oneOff) {
        this.oneOff = oneOff;
        return this;
    }
    
    /**
     * The current page to fetch results from. Defaults to 1
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    public Long page;

    public GetV2ActivitiesEmailsJsonRequest withPage(Long page) {
        this.page = page;
        return this;
    }
    
    /**
     * How many records to show per page in the range [1, 100]. Defaults to 25
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=per_page")
    public Long perPage;

    public GetV2ActivitiesEmailsJsonRequest withPerPage(Long perPage) {
        this.perPage = perPage;
        return this;
    }
    
    /**
     * Filters emails by person_id. Multiple person ids can be applied
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=person_id")
    public Long[] personId;

    public GetV2ActivitiesEmailsJsonRequest withPersonId(Long[] personId) {
        this.personId = personId;
        return this;
    }
    
    /**
     * Filters emails by personalization score
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=personalization")
    public String[] personalization;

    public GetV2ActivitiesEmailsJsonRequest withPersonalization(String[] personalization) {
        this.personalization = personalization;
        return this;
    }
    
    /**
     * Specify explicit scoped fields desired on the Email Resource.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=scoped_fields")
    public String[] scopedFields;

    public GetV2ActivitiesEmailsJsonRequest withScopedFields(String[] scopedFields) {
        this.scopedFields = scopedFields;
        return this;
    }
    
    /**
     * Equality filters that are applied to the sent_at field. A single filter can be used by itself or combined with other filters to create a range.
     * 
     * ---CUSTOM---
     * {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=sent_at")
    public String[] sentAt;

    public GetV2ActivitiesEmailsJsonRequest withSentAt(String[] sentAt) {
        this.sentAt = sentAt;
        return this;
    }
    
    /**
     * Key to sort on, must be one of: updated_at, send_time. Defaults to updated_at
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort_by")
    public String sortBy;

    public GetV2ActivitiesEmailsJsonRequest withSortBy(String sortBy) {
        this.sortBy = sortBy;
        return this;
    }
    
    /**
     * Direction to sort in, must be one of: ASC, DESC. Defaults to DESC
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort_direction")
    public String sortDirection;

    public GetV2ActivitiesEmailsJsonRequest withSortDirection(String sortDirection) {
        this.sortDirection = sortDirection;
        return this;
    }
    
    /**
     * Filters emails by status. Multiple status can be applied, possible values are sent, sent_from_gmail, sent_from_external, pending, pending_reply_check, scheduled, sending, delivering, failed, cancelled, pending_through_gmail, pending_through_external
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=status")
    public String[] status;

    public GetV2ActivitiesEmailsJsonRequest withStatus(String[] status) {
        this.status = status;
        return this;
    }
    
    /**
     * Filters emails by step. Multiple step ids can be applied
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=step_id")
    public Long[] stepId;

    public GetV2ActivitiesEmailsJsonRequest withStepId(Long[] stepId) {
        this.stepId = stepId;
        return this;
    }
    
    /**
     * Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.
     * 
     * ---CUSTOM---
     * {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=updated_at")
    public String[] updatedAt;

    public GetV2ActivitiesEmailsJsonRequest withUpdatedAt(String[] updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    /**
     * Filters emails by user_id. Multiple User ids can be applied
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=user_id")
    public Long[] userId;

    public GetV2ActivitiesEmailsJsonRequest withUserId(Long[] userId) {
        this.userId = userId;
        return this;
    }
    
    public GetV2ActivitiesEmailsJsonRequest(){}
}
