// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DescribeVirtualGatewaysXAmzTargetEnum
type DescribeVirtualGatewaysXAmzTargetEnum string

const (
	DescribeVirtualGatewaysXAmzTargetEnumOvertureServiceDescribeVirtualGateways DescribeVirtualGatewaysXAmzTargetEnum = "OvertureService.DescribeVirtualGateways"
)

func (e DescribeVirtualGatewaysXAmzTargetEnum) ToPointer() *DescribeVirtualGatewaysXAmzTargetEnum {
	return &e
}

func (e *DescribeVirtualGatewaysXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OvertureService.DescribeVirtualGateways":
		*e = DescribeVirtualGatewaysXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeVirtualGatewaysXAmzTargetEnum: %v", v)
	}
}

type DescribeVirtualGatewaysRequest struct {
	XAmzAlgorithm     *string                               `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                               `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                               `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                               `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                               `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                               `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                               `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        DescribeVirtualGatewaysXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DescribeVirtualGatewaysResponse struct {
	ContentType string
	// DirectConnectClientException
	DirectConnectClientException interface{}
	// DirectConnectServerException
	DirectConnectServerException interface{}
	StatusCode                   int
	RawResponse                  *http.Response
	// Success
	VirtualGateways *shared.VirtualGateways
}
