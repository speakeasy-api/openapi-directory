/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import java.time.OffsetDateTime;

/**
 * RegistrationsListRegistrationAttributes - The properties of the registration entity.
 */
public class RegistrationsListRegistrationAttributes {
    /**
     * The category of the registered node.
     */
    
    public RegistrationsListRegistrationAttributesCategoryEnum category;

    public RegistrationsListRegistrationAttributes withCategory(RegistrationsListRegistrationAttributesCategoryEnum category) {
        this.category = category;
        return this;
    }
    
    /**
     * Whether or not this registration represents a collection. This value should always be `false`. This field may be deprecated in future versions.
     */
    
    public Boolean collection;

    public RegistrationsListRegistrationAttributes withCollection(Boolean collection) {
        this.collection = collection;
        return this;
    }
    
    /**
     * Whether or not the current user has permission to post comments on this registration. Comments on registrations can be set to allow all users to comment or restricted to only contributors.
     */
    
    public Boolean currentUserCanComment;

    public RegistrationsListRegistrationAttributes withCurrentUserCanComment(Boolean currentUserCanComment) {
        this.currentUserCanComment = currentUserCanComment;
        return this;
    }
    
    /**
     * A list of strings representing the permissions for the current user on this registration. Valid permissions are "admin", "read", and "write".
     */
    
    public String[] currentUserPermissions;

    public RegistrationsListRegistrationAttributes withCurrentUserPermissions(String[] currentUserPermissions) {
        this.currentUserPermissions = currentUserPermissions;
        return this;
    }
    
    /**
     * The time at which the registered node was created, as an iso8601 formatted timestamp.
     */
    
    public OffsetDateTime dateCreated;

    public RegistrationsListRegistrationAttributes withDateCreated(OffsetDateTime dateCreated) {
        this.dateCreated = dateCreated;
        return this;
    }
    
    /**
     * The time at which the registered node was last modified, as an iso8601 formatted timestamp.
     */
    
    public OffsetDateTime dateModified;

    public RegistrationsListRegistrationAttributes withDateModified(OffsetDateTime dateModified) {
        this.dateModified = dateModified;
        return this;
    }
    
    /**
     * The time at which this registration was created, as an iso8601 formatted timestamp.
     */
    
    public OffsetDateTime dateRegistered;

    public RegistrationsListRegistrationAttributes withDateRegistered(OffsetDateTime dateRegistered) {
        this.dateRegistered = dateRegistered;
        return this;
    }
    
    /**
     * The time at which this registration was withdrawn, as an iso8601 formatted timestamp.
     */
    
    public OffsetDateTime dateWithdrawn;

    public RegistrationsListRegistrationAttributes withDateWithdrawn(OffsetDateTime dateWithdrawn) {
        this.dateWithdrawn = dateWithdrawn;
        return this;
    }
    
    /**
     * The description of the registered node.
     */
    
    public String description;

    public RegistrationsListRegistrationAttributes withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The time at which the embargo on this registration will be lifted and the registration will become public, as an iso8601 formatted timestamp.
     */
    
    public OffsetDateTime embargoEndDate;

    public RegistrationsListRegistrationAttributes withEmbargoEndDate(OffsetDateTime embargoEndDate) {
        this.embargoEndDate = embargoEndDate;
        return this;
    }
    
    /**
     * Whether or not this registration represents a fork of another node.
     */
    
    public Boolean fork;

    public RegistrationsListRegistrationAttributes withFork(Boolean fork) {
        this.fork = fork;
        return this;
    }
    
    /**
     * A dictionary containing the metadata (copyright year and holder) associated with the registered node license (required for certain license types).
     */
    
    public String nodeLicense;

    public RegistrationsListRegistrationAttributes withNodeLicense(String nodeLicense) {
        this.nodeLicense = nodeLicense;
        return this;
    }
    
    /**
     * Whether or not the embargo associated with this registration is pending approval from project administrators.
     */
    
    public Boolean pendingEmbargoApproval;

    public RegistrationsListRegistrationAttributes withPendingEmbargoApproval(Boolean pendingEmbargoApproval) {
        this.pendingEmbargoApproval = pendingEmbargoApproval;
        return this;
    }
    
    /**
     * Whether or not the registration is pending approval from project administrators.
     */
    
    public Boolean pendingRegistrationApproval;

    public RegistrationsListRegistrationAttributes withPendingRegistrationApproval(Boolean pendingRegistrationApproval) {
        this.pendingRegistrationApproval = pendingRegistrationApproval;
        return this;
    }
    
    /**
     * Whether or not the registration is pending approval for withdrawal from project administrators.
     */
    
    public Boolean pendingWithdrawal;

    public RegistrationsListRegistrationAttributes withPendingWithdrawal(Boolean pendingWithdrawal) {
        this.pendingWithdrawal = pendingWithdrawal;
        return this;
    }
    
    /**
     * Whether or not a preprint has been created from this node, or if this node was created for a preprint.
     */
    
    public Boolean preprint;

    public RegistrationsListRegistrationAttributes withPreprint(Boolean preprint) {
        this.preprint = preprint;
        return this;
    }
    
    /**
     * Whether or not the registration is publicly visible.
     */
    
    public Boolean public_;

    public RegistrationsListRegistrationAttributes withPublic(Boolean public_) {
        this.public_ = public_;
        return this;
    }
    
    /**
     * A dictionary with supplemental registration questions and responses.
     */
    
    public String registeredMeta;

    public RegistrationsListRegistrationAttributes withRegisteredMeta(String registeredMeta) {
        this.registeredMeta = registeredMeta;
        return this;
    }
    
    /**
     * Whether or not this is a registration. This value should always be `true`. This field may be deprecated in future versions.
     */
    
    public Boolean registration;

    public RegistrationsListRegistrationAttributes withRegistration(Boolean registration) {
        this.registration = registration;
        return this;
    }
    
    /**
     * The title of the registration schema this registration conforms to.
     */
    
    public String registrationSupplement;

    public RegistrationsListRegistrationAttributes withRegistrationSupplement(String registrationSupplement) {
        this.registrationSupplement = registrationSupplement;
        return this;
    }
    
    /**
     * A list of strings that describe the registered node.
     */
    
    public String[] tags;

    public RegistrationsListRegistrationAttributes withTags(String[] tags) {
        this.tags = tags;
        return this;
    }
    
    /**
     * The unique ID of the node from which the registered node was templated, if the registered node was created from a template.
     */
    
    public String templateFrom;

    public RegistrationsListRegistrationAttributes withTemplateFrom(String templateFrom) {
        this.templateFrom = templateFrom;
        return this;
    }
    
    /**
     * The title of the registered node.
     */
    
    public String title;

    public RegistrationsListRegistrationAttributes withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * The reasoning for why this registration was withdrawn, as entered by the administrator that initiated the withdrawal.
     */
    
    public String withdrawalJustification;

    public RegistrationsListRegistrationAttributes withWithdrawalJustification(String withdrawalJustification) {
        this.withdrawalJustification = withdrawalJustification;
        return this;
    }
    
    /**
     * Whether or not this registration has been withdrawn.
     */
    
    public Boolean withdrawn;

    public RegistrationsListRegistrationAttributes withWithdrawn(Boolean withdrawn) {
        this.withdrawn = withdrawn;
        return this;
    }
    
    public RegistrationsListRegistrationAttributes(){}
}
