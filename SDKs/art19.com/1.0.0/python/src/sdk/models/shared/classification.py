"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional

class ClassificationAttributesTypeEnum(str, Enum):
    r"""The type of classification. The type of retrievable classifications depends on the privileges
    of the credential being used.
    """
    ALTERNATE_FEED_TYPE = 'AlternateFeedType'
    GENRE = 'Genre'
    INDUSTRY = 'Industry'
    LANGUAGE = 'Language'
    MEDIA_RATING = 'MediaRating'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ClassificationAttributes:
    
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display_name'), 'exclude': lambda f: f is None }})
    r"""Human readable representation of the classification"""  
    metadata: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata'), 'exclude': lambda f: f is None }})
    r"""An object with more detailed information about the classification.
    The possible members are different per type of classification.
    """  
    parent_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parent_id'), 'exclude': lambda f: f is None }})
    r"""This will be replaced by the relationship `parent` in a future update.<br/>
    For hierarchical classifications, this is the ID of the parent classification
    """  
    tree_path: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tree_path'), 'exclude': lambda f: f is None }})
    r"""For hierarchical classifications this is the list of IDs reflecting the hierarchy starting
    with the root level node.
    """  
    type: Optional[ClassificationAttributesTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of classification. The type of retrievable classifications depends on the privileges
    of the credential being used.
    """  
    updated_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""The value the classification represents. The meaning of this attribute depends on the type of classification."""  
    value_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value_path'), 'exclude': lambda f: f is None }})
    r"""For hierarchical classifications this is a concatenated string of all the classification
    values from the root to this classification using a `: ` as separator.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Classification:
    r"""A classification, in general, is something that can describe other resources, such as countries, genres or
    languages. How they're described (included or excluded, and whether they're the primary classification
    of this type) is handled using other resources. Different functions of ART19 rely on classifications differently,
    and could have an effect only on directory information, or may have an effect on ad decisioning.
    """
    
    attributes: Optional[ClassificationAttributes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of resource. This is always `classifications`"""  
    