// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
)

type PostSpacesSpaceIDFoldersIDDocumentClassJSONSecurity struct {
	GmaAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2AccountingWorkbookEnum string

const (
	PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2AccountingWorkbookEnumCustomer    PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2AccountingWorkbookEnum = "customer"
	PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2AccountingWorkbookEnumProvider    PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2AccountingWorkbookEnum = "provider"
	PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2AccountingWorkbookEnumBank        PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2AccountingWorkbookEnum = "bank"
	PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2AccountingWorkbookEnumCashWoucher PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2AccountingWorkbookEnum = "cashWoucher"
	PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2AccountingWorkbookEnumFiscal      PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2AccountingWorkbookEnum = "fiscal"
	PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2AccountingWorkbookEnumInsurance   PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2AccountingWorkbookEnum = "insurance"
	PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2AccountingWorkbookEnumSocial      PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2AccountingWorkbookEnum = "social"
	PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2AccountingWorkbookEnumOther       PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2AccountingWorkbookEnum = "other"
	PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2AccountingWorkbookEnumPermanent   PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2AccountingWorkbookEnum = "permanent"
)

func (e PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2AccountingWorkbookEnum) ToPointer() *PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2AccountingWorkbookEnum {
	return &e
}

func (e *PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2AccountingWorkbookEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "customer":
		fallthrough
	case "provider":
		fallthrough
	case "bank":
		fallthrough
	case "cashWoucher":
		fallthrough
	case "fiscal":
		fallthrough
	case "insurance":
		fallthrough
	case "social":
		fallthrough
	case "other":
		fallthrough
	case "permanent":
		*e = PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2AccountingWorkbookEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2AccountingWorkbookEnum: %v", v)
	}
}

type PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2Accounting struct {
	AccountedOn *string                                                                        `json:"AccountedOn,omitempty"`
	Workbook    *PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2AccountingWorkbookEnum `json:"Workbook,omitempty"`
	YearMonth   *string                                                                        `json:"YearMonth,omitempty"`
}

type PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2File struct {
	Content64Encoded *string `json:"Content64Encoded,omitempty"`
	Name             *string `json:"Name,omitempty"`
}

type PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2 struct {
	Accounting *PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2Accounting `json:"Accounting,omitempty"`
	Author     *string                                                            `json:"Author,omitempty"`
	Code       *string                                                            `json:"Code,omitempty"`
	Comment    *string                                                            `json:"Comment,omitempty"`
	Date       *string                                                            `json:"Date,omitempty"`
	File       PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2File        `json:"File"`
	Title      string                                                             `json:"Title"`
}

type PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON1 struct {
	DocumentID *string `json:"DocumentId,omitempty"`
}

type PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSONType string

const (
	PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSONTypePostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON1 PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSONType = "post_/spaces/{spaceId}/folders/{id}/{documentClass}_ApplicationJSON_1"
	PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSONTypePostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2 PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSONType = "post_/spaces/{spaceId}/folders/{id}/{documentClass}_ApplicationJSON_2"
)

type PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON struct {
	PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON1 *PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON1
	PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2 *PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2

	Type PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSONType
}

func CreatePostSpacesSpaceIDFoldersIDDocumentClassApplicationJSONPostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON1(postSpacesSpaceIDFoldersIDDocumentClassApplicationJSON1 PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON1) PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON {
	typ := PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSONTypePostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON1

	return PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON{
		PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON1: &postSpacesSpaceIDFoldersIDDocumentClassApplicationJSON1,
		Type: typ,
	}
}

func CreatePostSpacesSpaceIDFoldersIDDocumentClassApplicationJSONPostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2(postSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2 PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2) PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON {
	typ := PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSONTypePostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2

	return PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON{
		PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2: &postSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2,
		Type: typ,
	}
}

func (u *PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	postSpacesSpaceIDFoldersIDDocumentClassApplicationJSON1 := new(PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postSpacesSpaceIDFoldersIDDocumentClassApplicationJSON1); err == nil {
		u.PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON1 = postSpacesSpaceIDFoldersIDDocumentClassApplicationJSON1
		u.Type = PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSONTypePostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON1
		return nil
	}

	postSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2 := new(PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2); err == nil {
		u.PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2 = postSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2
		u.Type = PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSONTypePostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON1 != nil {
		return json.Marshal(u.PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON1)
	}

	if u.PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2 != nil {
		return json.Marshal(u.PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON2)
	}

	return nil, nil
}

type PostSpacesSpaceIDFoldersIDDocumentClassJSONRequest struct {
	// Document to add (either DocumentId either (File,Name,Content64Encoded,Title) is mandatory)
	RequestBody PostSpacesSpaceIDFoldersIDDocumentClassApplicationJSON `request:"mediaType=application/json"`
	// class of the document
	DocumentClass string `pathParam:"style=simple,explode=false,name=documentClass"`
	// Id of the folder
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Id of the space
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

// PostSpacesSpaceIDFoldersIDDocumentClassJSON201ApplicationJSON - Id of document created
type PostSpacesSpaceIDFoldersIDDocumentClassJSON201ApplicationJSON struct {
	ID *string `json:"Id,omitempty"`
}

type PostSpacesSpaceIDFoldersIDDocumentClassJSONResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Id of document created
	PostSpacesSpaceIDFoldersIDDocumentClassJSON201ApplicationJSONObject *PostSpacesSpaceIDFoldersIDDocumentClassJSON201ApplicationJSON
}
