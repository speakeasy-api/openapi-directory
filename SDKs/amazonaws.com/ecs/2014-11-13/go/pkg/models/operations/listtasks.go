// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ListTasksQueryParams struct {
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=maxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
}

// ListTasksXAmzTargetEnum
type ListTasksXAmzTargetEnum string

const (
	ListTasksXAmzTargetEnumAmazonEc2ContainerServiceV20141113ListTasks ListTasksXAmzTargetEnum = "AmazonEC2ContainerServiceV20141113.ListTasks"
)

func (e *ListTasksXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AmazonEC2ContainerServiceV20141113.ListTasks":
		*e = ListTasksXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTasksXAmzTargetEnum: %s", s)
	}
}

type ListTasksHeaders struct {
	XAmzAlgorithm     *string                 `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                 `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                 `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                 `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                 `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                 `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                 `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ListTasksXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListTasksRequest struct {
	QueryParams ListTasksQueryParams
	Headers     ListTasksHeaders
	Request     shared.ListTasksRequest `request:"mediaType=application/json"`
}

type ListTasksResponse struct {
	// ClientException
	ClientException interface{}
	// ClusterNotFoundException
	ClusterNotFoundException interface{}
	ContentType              string
	// InvalidParameterException
	InvalidParameterException interface{}
	// Success
	ListTasksResponse *shared.ListTasksResponse
	// ServerException
	ServerException interface{}
	// ServiceNotFoundException
	ServiceNotFoundException interface{}
	StatusCode               int
	RawResponse              *http.Response
}
