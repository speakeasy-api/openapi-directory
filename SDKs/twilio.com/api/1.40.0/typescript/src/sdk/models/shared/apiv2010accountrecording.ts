/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { RecordingEnumSourceEnum } from "./recordingenumsourceenum";
import { RecordingEnumStatusEnum } from "./recordingenumstatusenum";
import { Expose } from "class-transformer";

/**
 * OK
 */
export class ApiV2010AccountRecording extends SpeakeasyBase {
  /**
   * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "account_sid" })
  accountSid?: string;

  /**
   * The API version used during the recording.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "api_version" })
  apiVersion?: string;

  /**
   * The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the Recording resource is associated with. This will always refer to the parent leg of a two-leg call.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "call_sid" })
  callSid?: string;

  /**
   * The number of channels in the final recording file. Can be: `1` or `2`. You can split a call with two legs into two separate recording channels if you record using [TwiML Dial](https://www.twilio.com/docs/voice/twiml/dial#record) or the [Outbound Rest API](https://www.twilio.com/docs/voice/make-calls#manage-your-outbound-call).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channels" })
  channels?: number;

  /**
   * The Conference SID that identifies the conference associated with the recording, if a conference recording.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "conference_sid" })
  conferenceSid?: string;

  /**
   * The date and time in GMT that the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date_created" })
  dateCreated?: string;

  /**
   * The date and time in GMT that the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date_updated" })
  dateUpdated?: string;

  /**
   * The length of the recording in seconds.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "duration" })
  duration?: string;

  /**
   * How to decrypt the recording if it was encrypted using [Call Recording Encryption](https://www.twilio.com/docs/voice/tutorials/voice-recording-encryption) feature.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "encryption_details" })
  encryptionDetails?: any;

  /**
   * The error code that describes why the recording is `absent`. The error code is described in our [Error Dictionary](https://www.twilio.com/docs/api/errors). This value is null if the recording `status` is not `absent`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error_code" })
  errorCode?: number;

  /**
   * The URL of the media file associated with this recording resource. When stored externally, this is the full URL location of the media file.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "media_url" })
  mediaUrl?: string;

  /**
   * The one-time cost of creating the recording in the `price_unit` currency.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "price" })
  price?: string;

  /**
   * The currency used in the `price` property. Example: `USD`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "price_unit" })
  priceUnit?: string;

  /**
   * The unique string that that we created to identify the Recording resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sid" })
  sid?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "source" })
  source?: RecordingEnumSourceEnum;

  /**
   * The start time of the recording in GMT and in [RFC 2822](https://www.php.net/manual/en/class.datetime.php#datetime.constants.rfc2822) format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "start_time" })
  startTime?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: RecordingEnumStatusEnum;

  /**
   * A list of related resources identified by their relative URIs.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subresource_uris" })
  subresourceUris?: Record<string, any>;

  /**
   * The URI of the resource, relative to `https://api.twilio.com`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri?: string;
}
