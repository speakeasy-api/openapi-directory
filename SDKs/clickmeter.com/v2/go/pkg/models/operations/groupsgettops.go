// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GroupsGetTopsPathParams struct {
	// Id of the group
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
}

// GroupsGetTopsHittypeEnum - Type of the event you want to filter this report with. By default no filter is applied.
type GroupsGetTopsHittypeEnum string

const (
	GroupsGetTopsHittypeEnumClicks GroupsGetTopsHittypeEnum = "clicks"
	GroupsGetTopsHittypeEnumViews  GroupsGetTopsHittypeEnum = "views"
)

func (e *GroupsGetTopsHittypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "clicks":
		fallthrough
	case "views":
		*e = GroupsGetTopsHittypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupsGetTopsHittypeEnum: %s", s)
	}
}

// GroupsGetTopsTimeframeEnum - Timeframe of the request. See list at $timeframeList
type GroupsGetTopsTimeframeEnum string

const (
	GroupsGetTopsTimeframeEnumYesterday     GroupsGetTopsTimeframeEnum = "yesterday"
	GroupsGetTopsTimeframeEnumLast7         GroupsGetTopsTimeframeEnum = "last7"
	GroupsGetTopsTimeframeEnumLast30        GroupsGetTopsTimeframeEnum = "last30"
	GroupsGetTopsTimeframeEnumLastmonth     GroupsGetTopsTimeframeEnum = "lastmonth"
	GroupsGetTopsTimeframeEnumCurrentmonth  GroupsGetTopsTimeframeEnum = "currentmonth"
	GroupsGetTopsTimeframeEnumPreviousmonth GroupsGetTopsTimeframeEnum = "previousmonth"
	GroupsGetTopsTimeframeEnumLast90        GroupsGetTopsTimeframeEnum = "last90"
	GroupsGetTopsTimeframeEnumLast120       GroupsGetTopsTimeframeEnum = "last120"
	GroupsGetTopsTimeframeEnumLast180       GroupsGetTopsTimeframeEnum = "last180"
	GroupsGetTopsTimeframeEnumBeginning     GroupsGetTopsTimeframeEnum = "beginning"
	GroupsGetTopsTimeframeEnumCustom        GroupsGetTopsTimeframeEnum = "custom"
)

func (e *GroupsGetTopsTimeframeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "yesterday":
		fallthrough
	case "last7":
		fallthrough
	case "last30":
		fallthrough
	case "lastmonth":
		fallthrough
	case "currentmonth":
		fallthrough
	case "previousmonth":
		fallthrough
	case "last90":
		fallthrough
	case "last120":
		fallthrough
	case "last180":
		fallthrough
	case "beginning":
		fallthrough
	case "custom":
		*e = GroupsGetTopsTimeframeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupsGetTopsTimeframeEnum: %s", s)
	}
}

// GroupsGetTopsTypeEnum - Type of the report.
type GroupsGetTopsTypeEnum string

const (
	GroupsGetTopsTypeEnumBrowsers         GroupsGetTopsTypeEnum = "browsers"
	GroupsGetTopsTypeEnumBrowsersfamilies GroupsGetTopsTypeEnum = "browsersfamilies"
	GroupsGetTopsTypeEnumPlatforms        GroupsGetTopsTypeEnum = "platforms"
	GroupsGetTopsTypeEnumCities           GroupsGetTopsTypeEnum = "cities"
	GroupsGetTopsTypeEnumCountries        GroupsGetTopsTypeEnum = "countries"
	GroupsGetTopsTypeEnumIsps             GroupsGetTopsTypeEnum = "isps"
	GroupsGetTopsTypeEnumIps              GroupsGetTopsTypeEnum = "ips"
	GroupsGetTopsTypeEnumOss              GroupsGetTopsTypeEnum = "oss"
	GroupsGetTopsTypeEnumOssfamilies      GroupsGetTopsTypeEnum = "ossfamilies"
	GroupsGetTopsTypeEnumKeywords         GroupsGetTopsTypeEnum = "keywords"
	GroupsGetTopsTypeEnumReferrers        GroupsGetTopsTypeEnum = "referrers"
	GroupsGetTopsTypeEnumDestinations     GroupsGetTopsTypeEnum = "destinations"
	GroupsGetTopsTypeEnumLanguages        GroupsGetTopsTypeEnum = "languages"
	GroupsGetTopsTypeEnumParams           GroupsGetTopsTypeEnum = "params"
)

func (e *GroupsGetTopsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "browsers":
		fallthrough
	case "browsersfamilies":
		fallthrough
	case "platforms":
		fallthrough
	case "cities":
		fallthrough
	case "countries":
		fallthrough
	case "isps":
		fallthrough
	case "ips":
		fallthrough
	case "oss":
		fallthrough
	case "ossfamilies":
		fallthrough
	case "keywords":
		fallthrough
	case "referrers":
		fallthrough
	case "destinations":
		fallthrough
	case "languages":
		fallthrough
	case "params":
		*e = GroupsGetTopsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupsGetTopsTypeEnum: %s", s)
	}
}

type GroupsGetTopsQueryParams struct {
	// If using a "custom" timeFrame you can specify the starting day (YYYYMMDD)
	FromDay *string `queryParam:"style=form,explode=true,name=fromDay"`
	// Type of the event you want to filter this report with. By default no filter is applied.
	Hittype *GroupsGetTopsHittypeEnum `queryParam:"style=form,explode=true,name=hittype"`
	// Timeframe of the request. See list at $timeframeList
	Timeframe GroupsGetTopsTimeframeEnum `queryParam:"style=form,explode=true,name=timeframe"`
	// If using a "custom" timeFrame you can specify the ending day (YYYYMMDD)
	ToDay *string `queryParam:"style=form,explode=true,name=toDay"`
	// Type of the report.
	Type GroupsGetTopsTypeEnum `queryParam:"style=form,explode=true,name=type"`
}

type GroupsGetTopsRequest struct {
	PathParams  GroupsGetTopsPathParams
	QueryParams GroupsGetTopsQueryParams
}

type GroupsGetTopsResponse struct {
	APICoreDtoTopsTop *shared.APICoreDtoTopsTop
	ContentType       string
	StatusCode        int
	RawResponse       *http.Response
}
