// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETCreateSpotDatafeedSubscriptionActionEnum
type GETCreateSpotDatafeedSubscriptionActionEnum string

const (
	GETCreateSpotDatafeedSubscriptionActionEnumCreateSpotDatafeedSubscription GETCreateSpotDatafeedSubscriptionActionEnum = "CreateSpotDatafeedSubscription"
)

func (e *GETCreateSpotDatafeedSubscriptionActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CreateSpotDatafeedSubscription":
		*e = GETCreateSpotDatafeedSubscriptionActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETCreateSpotDatafeedSubscriptionActionEnum: %s", s)
	}
}

// GETCreateSpotDatafeedSubscriptionVersionEnum
type GETCreateSpotDatafeedSubscriptionVersionEnum string

const (
	GETCreateSpotDatafeedSubscriptionVersionEnumTwoThousandAndSixteen1115 GETCreateSpotDatafeedSubscriptionVersionEnum = "2016-11-15"
)

func (e *GETCreateSpotDatafeedSubscriptionVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETCreateSpotDatafeedSubscriptionVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETCreateSpotDatafeedSubscriptionVersionEnum: %s", s)
	}
}

type GETCreateSpotDatafeedSubscriptionQueryParams struct {
	Action GETCreateSpotDatafeedSubscriptionActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The name of the Amazon S3 bucket in which to store the Spot Instance data feed. For more information about bucket names, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html#bucketnamingrules">Rules for bucket naming</a> in the <i>Amazon S3 Developer Guide</i>.
	Bucket string `queryParam:"style=form,explode=true,name=Bucket"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The prefix for the data feed file names.
	Prefix  *string                                      `queryParam:"style=form,explode=true,name=Prefix"`
	Version GETCreateSpotDatafeedSubscriptionVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETCreateSpotDatafeedSubscriptionHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETCreateSpotDatafeedSubscriptionRequest struct {
	QueryParams GETCreateSpotDatafeedSubscriptionQueryParams
	Headers     GETCreateSpotDatafeedSubscriptionHeaders
}

type GETCreateSpotDatafeedSubscriptionResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
