// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PostAssetsReturnsTurbulencePartitionedRequestBodyAssets struct {
	// assetReturns[t] is the return of the asset at the time t; all the assetReturns arrays must have the same length
	AssetReturns []float64 `json:"assetReturns"`
}

// PostAssetsReturnsTurbulencePartitionedRequestBodyTurbulenceThresholdsConversionMethodEnum - The method to use to convert the turbulence threshold(s) into turbulence score(s)
type PostAssetsReturnsTurbulencePartitionedRequestBodyTurbulenceThresholdsConversionMethodEnum string

const (
	PostAssetsReturnsTurbulencePartitionedRequestBodyTurbulenceThresholdsConversionMethodEnumEmpiricalQuantileDistribution PostAssetsReturnsTurbulencePartitionedRequestBodyTurbulenceThresholdsConversionMethodEnum = "empiricalQuantileDistribution"
	PostAssetsReturnsTurbulencePartitionedRequestBodyTurbulenceThresholdsConversionMethodEnumChisquareInverseDistribution  PostAssetsReturnsTurbulencePartitionedRequestBodyTurbulenceThresholdsConversionMethodEnum = "chisquareInverseDistribution"
)

func (e PostAssetsReturnsTurbulencePartitionedRequestBodyTurbulenceThresholdsConversionMethodEnum) ToPointer() *PostAssetsReturnsTurbulencePartitionedRequestBodyTurbulenceThresholdsConversionMethodEnum {
	return &e
}

func (e *PostAssetsReturnsTurbulencePartitionedRequestBodyTurbulenceThresholdsConversionMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "empiricalQuantileDistribution":
		fallthrough
	case "chisquareInverseDistribution":
		*e = PostAssetsReturnsTurbulencePartitionedRequestBodyTurbulenceThresholdsConversionMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostAssetsReturnsTurbulencePartitionedRequestBodyTurbulenceThresholdsConversionMethodEnum: %v", v)
	}
}

type PostAssetsReturnsTurbulencePartitionedRequestBody struct {
	Assets []PostAssetsReturnsTurbulencePartitionedRequestBodyAssets `json:"assets"`
	// The turbulence threshold(s), in percentage; in case several turbulence thresholds are provided, they must be provided in increasing order
	TurbulenceThresholds []float64 `json:"turbulenceThresholds"`
	// The method to use to convert the turbulence threshold(s) into turbulence score(s)
	TurbulenceThresholdsConversionMethod *PostAssetsReturnsTurbulencePartitionedRequestBodyTurbulenceThresholdsConversionMethodEnum `json:"turbulenceThresholdsConversionMethod,omitempty"`
}

type PostAssetsReturnsTurbulencePartitioned200ApplicationJSONAssetsAssetTurbulencePartitionedReturns struct {
	// assetReturns[t] is the return of the asset at a time t; the array assetReturns is possibly empty in case no asset returns have a turbulence index lower than or equal to the turbulence score associated with the turbulence threshold turbulenceThresholds[k]
	AssetReturns []float64 `json:"assetReturns"`
}

type PostAssetsReturnsTurbulencePartitioned200ApplicationJSONAssets struct {
	// assetTurbulencePartitionedReturns[k] corresponds to all the asset returns whose turbulence index is lower than or equal to the turbulence score associated with the turbulence threshold turbulenceThresholds[k]; the length of the array assetTurbulencePartitionedReturns is equal to the length of the array turbulenceThresholds plus 1
	AssetTurbulencePartitionedReturns []PostAssetsReturnsTurbulencePartitioned200ApplicationJSONAssetsAssetTurbulencePartitionedReturns `json:"assetTurbulencePartitionedReturns"`
}

// PostAssetsReturnsTurbulencePartitioned200ApplicationJSON - OK
type PostAssetsReturnsTurbulencePartitioned200ApplicationJSON struct {
	Assets []PostAssetsReturnsTurbulencePartitioned200ApplicationJSONAssets `json:"assets"`
}

type PostAssetsReturnsTurbulencePartitionedResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	PostAssetsReturnsTurbulencePartitioned200ApplicationJSONObject *PostAssetsReturnsTurbulencePartitioned200ApplicationJSON
}
