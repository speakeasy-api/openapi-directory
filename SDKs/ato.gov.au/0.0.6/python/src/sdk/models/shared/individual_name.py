"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class IndividualNameDirectionEnum(str, Enum):
    r"""The direction used to render the individual's name."""
    LEFT_TO_RIGHT = 'left-to-right'
    RIGHT_TO_LEFT = 'right-to-left'

class IndividualNameNamePrefixEnum(str, Enum):
    r"""The individual's name prefix."""
    MR = 'Mr'
    MS = 'Ms'

class IndividualNameNameTypeEnum(str, Enum):
    r"""The name type."""
    ALIAS = 'Alias'
    PRINCIPAL_NAME = 'Principal Name'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class IndividualNameInput:
    r"""The Individual Name resource."""
    
    direction: Optional[IndividualNameDirectionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('direction'), 'exclude': lambda f: f is None }})
    r"""The direction used to render the individual's name."""  
    family_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('familyName'), 'exclude': lambda f: f is None }})
    r"""The individual's family name."""  
    formal_salutation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('formalSalutation'), 'exclude': lambda f: f is None }})
    r"""The individual's formal salutation, for example, \\"Mr William Smith\\"."""  
    given_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('givenName'), 'exclude': lambda f: f is None }})
    r"""The individual's given name."""  
    informal_salutation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('informalSalutation'), 'exclude': lambda f: f is None }})
    r"""The individual's informal salutation, for example, \\"Bill\\"."""  
    middle_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('middleName'), 'exclude': lambda f: f is None }})
    r"""The individual's middle name."""  
    name_prefix: Optional[IndividualNameNamePrefixEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('namePrefix'), 'exclude': lambda f: f is None }})
    r"""The individual's name prefix."""  
    name_suffix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nameSuffix'), 'exclude': lambda f: f is None }})
    r"""The individual's name suffix, for example, \\"Jr\\" or \\"Sr\\"."""  
    name_type: Optional[IndividualNameNameTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nameType'), 'exclude': lambda f: f is None }})
    r"""The name type."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class IndividualName:
    r"""The Individual Name resource."""
    
    direction: Optional[IndividualNameDirectionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('direction'), 'exclude': lambda f: f is None }})
    r"""The direction used to render the individual's name."""  
    family_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('familyName'), 'exclude': lambda f: f is None }})
    r"""The individual's family name."""  
    formal_salutation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('formalSalutation'), 'exclude': lambda f: f is None }})
    r"""The individual's formal salutation, for example, \\"Mr William Smith\\"."""  
    from_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fromDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)."""  
    given_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('givenName'), 'exclude': lambda f: f is None }})
    r"""The individual's given name."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The resource's unique identifier."""  
    informal_salutation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('informalSalutation'), 'exclude': lambda f: f is None }})
    r"""The individual's informal salutation, for example, \\"Bill\\"."""  
    middle_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('middleName'), 'exclude': lambda f: f is None }})
    r"""The individual's middle name."""  
    name_prefix: Optional[IndividualNameNamePrefixEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('namePrefix'), 'exclude': lambda f: f is None }})
    r"""The individual's name prefix."""  
    name_suffix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nameSuffix'), 'exclude': lambda f: f is None }})
    r"""The individual's name suffix, for example, \\"Jr\\" or \\"Sr\\"."""  
    name_type: Optional[IndividualNameNameTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nameType'), 'exclude': lambda f: f is None }})
    r"""The name type."""  
    to_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)."""  
    