"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .alias import Alias
from .click import Click
from .statistics import Statistics

SERVERS = [
    "https://api.shorten.rest",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""## Introduction
    
    
    The Shorten.rest API allows you to programmatically create short URLs (an &apos;alias&apos;) for longer URL (a &apos;destination&apos;).
    
    Each alias you create can be used to redirect the end user (person clicking on the link) to one or more destination URLs
    
    A default destination is always set and specific destinations can be set to redirect the end user to preferred destinations based on the user&apos;s geographical location (country) and device Operating System.
    
    In order to use the Shorten.Rest URL Shortening API you can choose to bind your own branded domain, sub-domain or to use our default domain - Short.FYI 
    
     ### Destination Matching 
    
     When creating or editing a short URL (&apos;alias&apos;) you can choose to specify a destination for each country and OS ([Supported OSes list](#tag/OperatingSystems)) combination. 
    
     When a user clicks on the short link, Shorten.rest will examine the end user's country (determined by User's IP) and OS (User agent) and match the most suitable destination for each user. 
    
     (*) If no destination is set for a specific request combination Shorten.rest will use the default destination that exists within each short URL 
    
     (**) BRANDED DOMAINS: If the requested alias does not exist in our database - Shorten.rest will redirect the user to the default fallback you set within your dashboard under the ‘Alias Not Found Page Url’ value for a custom domain. 
    
     (***) Operating System (OS) destinations are stronger than a country destination! 
     For example - if you have a custom landing page that is targeting people in the USA and a second landing page that is hyper focused for people who use iOS devices - a person clicking on your link in the USA that is on an iPhone will be redirected to the iOS landing page, while all other devices will be redirected to the USA landing page. 
    
     | OS  | Country  | Destination |
    | :------------: |:---------------:| -----|
    | iOS      |  | YourDestination.com/ios |
    |       | US        |   YourDestination.com/usa | 
    
     Shorten.rest will choose the YourDestination.com/ios url as the most suitable destination.
    
     ### Branded Domain Attributes 
    
     When setting up your custom domain you can include optional metatags and snippets ([Supported snippets list](#tag/Snippets)). These parameters (such as retargeting, tracking and conversion pixels) are populated and fired on click - at the time of the redirect. 
    
     By default the parameters you set in the domain setting will be included in all Short URLs associated with that domain. 
    
     You can always override the domain defaults for each URL by passing the appropriate variables when creating or updating a short URL 
    
     ### Setting a Custom string for an Alias (short.fyi/alias) 
    
     While creating a short URL you can specify which domain to use. You can choose to use your own branded domain or our default domain - Short.fyi. 
    
     Each Alias is unique within a domain they are related to. This means that if multiple accounts use you the same domain (for example short.fyi), if an alias is already taken you may not create a new destination for it.
    
     That said - If you would like to use a specific alias which is already taken - the only way to do so is to create it on a new domain you own and have attached to your Shorten.rest account. 
    
     ### Random Aliases 
    
     By default - unless you specify a vanity URI for your alias each URL that is shortened on our platform will have a random string generated by the API. This means that if the &apos;alias&apos; attribute of a /aliases POST request is not provided, or is an empty string, a random string of seven characters will be generated and returned as part of the POST response. 
    
     You can also place the @**rnd** macro within the alias field when you create a new alias, for example /vanity/@rnd, which might return an alias like /vanity/ZMAefRt, or /vanity@rnd, which might produce something like /vanityMRtvxadf. Only the first @rnd in an alias attribute will be replaced. 
    
     ### NOTES 
    
     ( * ) All methods of the Shorten.REST API require that your API key be provided in **x-api-key** header. 
    
     (**) All API parameters are case sensitive
    https://shorten.rest - Visit main site
    """
    alias: Alias
    r"""**Operations:** Create, Get, Update, Delete, Get List"""
    click: Click
    r"""**Operations:** Get List"""
    statistics: Statistics

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.alias = Alias(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.click = Click(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.statistics = Statistics(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    