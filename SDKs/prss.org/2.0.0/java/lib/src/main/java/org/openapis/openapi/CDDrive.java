/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.util.function.Function;
import java.util.stream.Collectors;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

/**
 * ContentDepot Drive functionality for uploading and stating content files for use in other API operations.
 */
public class CDDrive {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public CDDrive(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Delete a file.
     * Delete a file from the customer's private CD Drive.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteApiV2CddriveFilesFileIdResponse deleteApiV2CddriveFilesFileId(org.openapis.openapi.models.operations.DeleteApiV2CddriveFilesFileIdRequest request, org.openapis.openapi.models.operations.DeleteApiV2CddriveFilesFileIdSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteApiV2CddriveFilesFileIdRequest.class, baseUrl, "/api/v2/cddrive/files/{file-id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteApiV2CddriveFilesFileIdResponse res = new org.openapis.openapi.models.operations.DeleteApiV2CddriveFilesFileIdResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * UNDER DEVELOPMENT - Delete a folder.
     * Delete a file from the customer's private CD Drive.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteApiV2CddriveFoldersFolderIdResponse deleteApiV2CddriveFoldersFolderId(org.openapis.openapi.models.operations.DeleteApiV2CddriveFoldersFolderIdRequest request, org.openapis.openapi.models.operations.DeleteApiV2CddriveFoldersFolderIdSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteApiV2CddriveFoldersFolderIdRequest.class, baseUrl, "/api/v2/cddrive/folders/{folder-id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DeleteApiV2CddriveFoldersFolderIdRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteApiV2CddriveFoldersFolderIdResponse res = new org.openapis.openapi.models.operations.DeleteApiV2CddriveFoldersFolderIdResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Get file information.
     * Get the information about a file in the customer's private CD Drive.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetApiV2CddriveFilesFileIdResponse getApiV2CddriveFilesFileId(org.openapis.openapi.models.operations.GetApiV2CddriveFilesFileIdRequest request, org.openapis.openapi.models.operations.GetApiV2CddriveFilesFileIdSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetApiV2CddriveFilesFileIdRequest.class, baseUrl, "/api/v2/cddrive/files/{file-id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetApiV2CddriveFilesFileIdResponse res = new org.openapis.openapi.models.operations.GetApiV2CddriveFilesFileIdResponse(contentType, httpRes.statusCode()) {{
            cdDriveFile = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CDDriveFile out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CDDriveFile.class);
                res.cdDriveFile = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * UNDER DEVELOPMENT - Download a file.
     * Download a file from the customer's private CD Drive.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetApiV2CddriveFilesFileIdContentResponse getApiV2CddriveFilesFileIdContent(org.openapis.openapi.models.operations.GetApiV2CddriveFilesFileIdContentRequest request, org.openapis.openapi.models.operations.GetApiV2CddriveFilesFileIdContentSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetApiV2CddriveFilesFileIdContentRequest.class, baseUrl, "/api/v2/cddrive/files/{file-id}/content", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetApiV2CddriveFilesFileIdContentResponse res = new org.openapis.openapi.models.operations.GetApiV2CddriveFilesFileIdContentResponse(contentType, httpRes.statusCode()) {{
            getApiV2CddriveFilesFileIdContent200ApplicationOctetStreamBinaryString = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/octet-stream")) {
                byte[] out = httpRes.body();
                res.getApiV2CddriveFilesFileIdContent200ApplicationOctetStreamBinaryString = out;
            }
        }
        else if (httpRes.statusCode() == 302) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
        }
        else if (httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * UNDER DEVELOPMENT - Get folder information.
     * Get the information about a folder in the customer's private CD Drive.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetApiV2CddriveFoldersFolderIdResponse getApiV2CddriveFoldersFolderId(org.openapis.openapi.models.operations.GetApiV2CddriveFoldersFolderIdRequest request, org.openapis.openapi.models.operations.GetApiV2CddriveFoldersFolderIdSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetApiV2CddriveFoldersFolderIdRequest.class, baseUrl, "/api/v2/cddrive/folders/{folder-id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetApiV2CddriveFoldersFolderIdResponse res = new org.openapis.openapi.models.operations.GetApiV2CddriveFoldersFolderIdResponse(contentType, httpRes.statusCode()) {{
            cdDriveFolder = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CDDriveFolder out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CDDriveFolder.class);
                res.cdDriveFolder = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Get the items in the folder.
     * Get the information about a folder in the customer's private CD Drive.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetApiV2CddriveFoldersFolderIdItemsResponse getApiV2CddriveFoldersFolderIdItems(org.openapis.openapi.models.operations.GetApiV2CddriveFoldersFolderIdItemsRequest request, org.openapis.openapi.models.operations.GetApiV2CddriveFoldersFolderIdItemsSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetApiV2CddriveFoldersFolderIdItemsRequest.class, baseUrl, "/api/v2/cddrive/folders/{folder-id}/items", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetApiV2CddriveFoldersFolderIdItemsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetApiV2CddriveFoldersFolderIdItemsResponse res = new org.openapis.openapi.models.operations.GetApiV2CddriveFoldersFolderIdItemsResponse(contentType, httpRes.statusCode()) {{
            getApiV2CddriveFoldersFolderIdItems200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetApiV2CddriveFoldersFolderIdItems200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetApiV2CddriveFoldersFolderIdItems200ApplicationJSON.class);
                res.getApiV2CddriveFoldersFolderIdItems200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Upload a file.
     * Upload a file to the customer's private CD Drive.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostApiV2CddriveFilesContentResponse postApiV2CddriveFilesContent(org.openapis.openapi.models.operations.PostApiV2CddriveFilesContentRequest request, org.openapis.openapi.models.operations.PostApiV2CddriveFilesContentSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/api/v2/cddrive/files/content");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "multipart");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostApiV2CddriveFilesContentResponse res = new org.openapis.openapi.models.operations.PostApiV2CddriveFilesContentResponse(contentType, httpRes.statusCode()) {{
            cdDriveFile = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CDDriveFile out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CDDriveFile.class);
                res.cdDriveFile = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 403 || httpRes.statusCode() == 404 || httpRes.statusCode() == 409 || httpRes.statusCode() == 413) {
        }

        return res;
    }

    /**
     * Create a folder.
     * Create a new folder in the customer's private CD Drive.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostApiV2CddriveFoldersResponse postApiV2CddriveFolders(org.openapis.openapi.models.operations.PostApiV2CddriveFoldersRequestBody request, org.openapis.openapi.models.operations.PostApiV2CddriveFoldersSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/api/v2/cddrive/folders");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostApiV2CddriveFoldersResponse res = new org.openapis.openapi.models.operations.PostApiV2CddriveFoldersResponse(contentType, httpRes.statusCode()) {{
            cdDriveFolder = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CDDriveFolder out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CDDriveFolder.class);
                res.cdDriveFolder = out;
            }
        }
        else if (httpRes.statusCode() == 403 || httpRes.statusCode() == 404 || httpRes.statusCode() == 409) {
        }

        return res;
    }
}