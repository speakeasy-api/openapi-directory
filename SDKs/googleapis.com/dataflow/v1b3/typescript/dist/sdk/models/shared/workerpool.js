"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkerPool = exports.WorkerPoolTeardownPolicyEnum = exports.WorkerPoolIpConfigurationEnum = exports.WorkerPoolDefaultPackageSetEnum = void 0;
var utils_1 = require("../../../internal/utils");
var autoscalingsettings_1 = require("./autoscalingsettings");
var disk_1 = require("./disk");
var package_1 = require("./package");
var sdkharnesscontainerimage_1 = require("./sdkharnesscontainerimage");
var taskrunnersettings_1 = require("./taskrunnersettings");
var class_transformer_1 = require("class-transformer");
/**
 * The default package set to install. This allows the service to select a default set of packages which are useful to worker harnesses written in a particular language.
 */
var WorkerPoolDefaultPackageSetEnum;
(function (WorkerPoolDefaultPackageSetEnum) {
    WorkerPoolDefaultPackageSetEnum["DefaultPackageSetUnknown"] = "DEFAULT_PACKAGE_SET_UNKNOWN";
    WorkerPoolDefaultPackageSetEnum["DefaultPackageSetNone"] = "DEFAULT_PACKAGE_SET_NONE";
    WorkerPoolDefaultPackageSetEnum["DefaultPackageSetJava"] = "DEFAULT_PACKAGE_SET_JAVA";
    WorkerPoolDefaultPackageSetEnum["DefaultPackageSetPython"] = "DEFAULT_PACKAGE_SET_PYTHON";
})(WorkerPoolDefaultPackageSetEnum = exports.WorkerPoolDefaultPackageSetEnum || (exports.WorkerPoolDefaultPackageSetEnum = {}));
/**
 * Configuration for VM IPs.
 */
var WorkerPoolIpConfigurationEnum;
(function (WorkerPoolIpConfigurationEnum) {
    WorkerPoolIpConfigurationEnum["WorkerIpUnspecified"] = "WORKER_IP_UNSPECIFIED";
    WorkerPoolIpConfigurationEnum["WorkerIpPublic"] = "WORKER_IP_PUBLIC";
    WorkerPoolIpConfigurationEnum["WorkerIpPrivate"] = "WORKER_IP_PRIVATE";
})(WorkerPoolIpConfigurationEnum = exports.WorkerPoolIpConfigurationEnum || (exports.WorkerPoolIpConfigurationEnum = {}));
/**
 * Sets the policy for determining when to turndown worker pool. Allowed values are: `TEARDOWN_ALWAYS`, `TEARDOWN_ON_SUCCESS`, and `TEARDOWN_NEVER`. `TEARDOWN_ALWAYS` means workers are always torn down regardless of whether the job succeeds. `TEARDOWN_ON_SUCCESS` means workers are torn down if the job succeeds. `TEARDOWN_NEVER` means the workers are never torn down. If the workers are not torn down by the service, they will continue to run and use Google Compute Engine VM resources in the user's project until they are explicitly terminated by the user. Because of this, Google recommends using the `TEARDOWN_ALWAYS` policy except for small, manually supervised test jobs. If unknown or unspecified, the service will attempt to choose a reasonable default.
 */
var WorkerPoolTeardownPolicyEnum;
(function (WorkerPoolTeardownPolicyEnum) {
    WorkerPoolTeardownPolicyEnum["TeardownPolicyUnknown"] = "TEARDOWN_POLICY_UNKNOWN";
    WorkerPoolTeardownPolicyEnum["TeardownAlways"] = "TEARDOWN_ALWAYS";
    WorkerPoolTeardownPolicyEnum["TeardownOnSuccess"] = "TEARDOWN_ON_SUCCESS";
    WorkerPoolTeardownPolicyEnum["TeardownNever"] = "TEARDOWN_NEVER";
})(WorkerPoolTeardownPolicyEnum = exports.WorkerPoolTeardownPolicyEnum || (exports.WorkerPoolTeardownPolicyEnum = {}));
/**
 * Describes one particular pool of Cloud Dataflow workers to be instantiated by the Cloud Dataflow service in order to perform the computations required by a job. Note that a workflow job may use multiple pools, in order to match the various computational requirements of the various stages of the job.
 */
var WorkerPool = /** @class */ (function (_super) {
    __extends(WorkerPool, _super);
    function WorkerPool() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "autoscalingSettings" }),
        (0, class_transformer_1.Type)(function () { return autoscalingsettings_1.AutoscalingSettings; }),
        __metadata("design:type", autoscalingsettings_1.AutoscalingSettings)
    ], WorkerPool.prototype, "autoscalingSettings", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: disk_1.Disk }),
        (0, class_transformer_1.Expose)({ name: "dataDisks" }),
        (0, class_transformer_1.Type)(function () { return disk_1.Disk; }),
        __metadata("design:type", Array)
    ], WorkerPool.prototype, "dataDisks", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "defaultPackageSet" }),
        __metadata("design:type", String)
    ], WorkerPool.prototype, "defaultPackageSet", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "diskSizeGb" }),
        __metadata("design:type", Number)
    ], WorkerPool.prototype, "diskSizeGb", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "diskSourceImage" }),
        __metadata("design:type", String)
    ], WorkerPool.prototype, "diskSourceImage", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "diskType" }),
        __metadata("design:type", String)
    ], WorkerPool.prototype, "diskType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ipConfiguration" }),
        __metadata("design:type", String)
    ], WorkerPool.prototype, "ipConfiguration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "kind" }),
        __metadata("design:type", String)
    ], WorkerPool.prototype, "kind", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "machineType" }),
        __metadata("design:type", String)
    ], WorkerPool.prototype, "machineType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "metadata" }),
        __metadata("design:type", Object)
    ], WorkerPool.prototype, "metadata", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "network" }),
        __metadata("design:type", String)
    ], WorkerPool.prototype, "network", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "numThreadsPerWorker" }),
        __metadata("design:type", Number)
    ], WorkerPool.prototype, "numThreadsPerWorker", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "numWorkers" }),
        __metadata("design:type", Number)
    ], WorkerPool.prototype, "numWorkers", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "onHostMaintenance" }),
        __metadata("design:type", String)
    ], WorkerPool.prototype, "onHostMaintenance", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: package_1.Package }),
        (0, class_transformer_1.Expose)({ name: "packages" }),
        (0, class_transformer_1.Type)(function () { return package_1.Package; }),
        __metadata("design:type", Array)
    ], WorkerPool.prototype, "packages", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "poolArgs" }),
        __metadata("design:type", Object)
    ], WorkerPool.prototype, "poolArgs", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: sdkharnesscontainerimage_1.SDKHarnessContainerImage }),
        (0, class_transformer_1.Expose)({ name: "sdkHarnessContainerImages" }),
        (0, class_transformer_1.Type)(function () { return sdkharnesscontainerimage_1.SDKHarnessContainerImage; }),
        __metadata("design:type", Array)
    ], WorkerPool.prototype, "sdkHarnessContainerImages", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "subnetwork" }),
        __metadata("design:type", String)
    ], WorkerPool.prototype, "subnetwork", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "taskrunnerSettings" }),
        (0, class_transformer_1.Type)(function () { return taskrunnersettings_1.TaskRunnerSettings; }),
        __metadata("design:type", taskrunnersettings_1.TaskRunnerSettings)
    ], WorkerPool.prototype, "taskrunnerSettings", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "teardownPolicy" }),
        __metadata("design:type", String)
    ], WorkerPool.prototype, "teardownPolicy", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "workerHarnessContainerImage" }),
        __metadata("design:type", String)
    ], WorkerPool.prototype, "workerHarnessContainerImage", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "zone" }),
        __metadata("design:type", String)
    ], WorkerPool.prototype, "zone", void 0);
    return WorkerPool;
}(utils_1.SpeakeasyBase));
exports.WorkerPool = WorkerPool;
