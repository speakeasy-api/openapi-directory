<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Me 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes a user who is followed by the authenticated user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteMeFollowingsUserIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteMeFollowingsUserIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteMeFollowingsUserIdResponse
     */
	public function deleteMeFollowingsUserId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteMeFollowingsUserIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteMeFollowingsUserIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteMeFollowingsUserIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/followings/{user_id}', \OpenAPI\OpenAPI\Models\Operations\DeleteMeFollowingsUserIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteMeFollowingsUserIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the authenticated userâ€™s information.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMeResponse
     */
	public function getMe(
        \OpenAPI\OpenAPI\Models\Operations\GetMeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->completeUser = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CompleteUser', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the authenticated user's activities.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMeActivitiesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMeActivitiesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMeActivitiesResponse
     */
	public function getMeActivities(
        \OpenAPI\OpenAPI\Models\Operations\GetMeActivitiesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetMeActivitiesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMeActivitiesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/activities');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetMeActivitiesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMeActivitiesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->activities = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Activities', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Recent the authenticated user's activities.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMeActivitiesAllOwnRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMeActivitiesAllOwnSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMeActivitiesAllOwnResponse
     */
	public function getMeActivitiesAllOwn(
        \OpenAPI\OpenAPI\Models\Operations\GetMeActivitiesAllOwnRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetMeActivitiesAllOwnSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMeActivitiesAllOwnResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/activities/all/own');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetMeActivitiesAllOwnRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMeActivitiesAllOwnResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->activities = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Activities', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the authenticated user's recent track related activities.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMeActivitiesTracksRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMeActivitiesTracksSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMeActivitiesTracksResponse
     */
	public function getMeActivitiesTracks(
        \OpenAPI\OpenAPI\Models\Operations\GetMeActivitiesTracksRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetMeActivitiesTracksSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMeActivitiesTracksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/activities/tracks');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetMeActivitiesTracksRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMeActivitiesTracksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->activities = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Activities', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of the authenticated user's connected social accounts.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMeConnectionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMeConnectionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMeConnectionsResponse
     */
	public function getMeConnections(
        \OpenAPI\OpenAPI\Models\Operations\GetMeConnectionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetMeConnectionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMeConnectionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/connections');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetMeConnectionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMeConnectionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->connections = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Connection>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the authenticated user's connected social account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMeConnectionsConnectionIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMeConnectionsConnectionIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMeConnectionsConnectionIdResponse
     */
	public function getMeConnectionsConnectionId(
        \OpenAPI\OpenAPI\Models\Operations\GetMeConnectionsConnectionIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetMeConnectionsConnectionIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMeConnectionsConnectionIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/connections/{connection_id}', \OpenAPI\OpenAPI\Models\Operations\GetMeConnectionsConnectionIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMeConnectionsConnectionIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->connection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Connection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns userâ€™s favorites ids. (use /me/likes/tracks instead to fetch the authenticated user's likes)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMeFavoritesIdsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMeFavoritesIdsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMeFavoritesIdsResponse
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function getMeFavoritesIds(
        \OpenAPI\OpenAPI\Models\Operations\GetMeFavoritesIdsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetMeFavoritesIdsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMeFavoritesIdsResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/favorites/ids');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetMeFavoritesIdsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMeFavoritesIdsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Returns a list of users who are following the authenticated user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMeFollowersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMeFollowersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMeFollowersResponse
     */
	public function getMeFollowers(
        \OpenAPI\OpenAPI\Models\Operations\GetMeFollowersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetMeFollowersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMeFollowersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/followers');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetMeFollowersRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMeFollowersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getMeFollowers200ApplicationJSONOneOf = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a user who is following the authenticated user. (use /users/{user_id} instead, to fetch the user details)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMeFollowersFollowerIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMeFollowersFollowerIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMeFollowersFollowerIdResponse
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function getMeFollowersFollowerId(
        \OpenAPI\OpenAPI\Models\Operations\GetMeFollowersFollowerIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetMeFollowersFollowerIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMeFollowersFollowerIdResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/followers/{follower_id}', \OpenAPI\OpenAPI\Models\Operations\GetMeFollowersFollowerIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMeFollowersFollowerIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->user = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\User', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of users who are followed by the authenticated user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMeFollowingsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMeFollowingsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMeFollowingsResponse
     */
	public function getMeFollowings(
        \OpenAPI\OpenAPI\Models\Operations\GetMeFollowingsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetMeFollowingsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMeFollowingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/followings');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetMeFollowingsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMeFollowingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getMeFollowings200ApplicationJSONOneOf = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of recent tracks from users followed by the authenticated user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMeFollowingsTracksRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMeFollowingsTracksSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMeFollowingsTracksResponse
     */
	public function getMeFollowingsTracks(
        \OpenAPI\OpenAPI\Models\Operations\GetMeFollowingsTracksRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetMeFollowingsTracksSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMeFollowingsTracksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/followings/tracks');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetMeFollowingsTracksRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMeFollowingsTracksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tracksList = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Track>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a user who is followed by the authenticated user. (use /users/{user_id} instead, to fetch the user details)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMeFollowingsUserIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMeFollowingsUserIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMeFollowingsUserIdResponse
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function getMeFollowingsUserId(
        \OpenAPI\OpenAPI\Models\Operations\GetMeFollowingsUserIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetMeFollowingsUserIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMeFollowingsUserIdResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/followings/{user_id}', \OpenAPI\OpenAPI\Models\Operations\GetMeFollowingsUserIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMeFollowingsUserIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->user = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\User', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of favorited or liked tracks of the authenticated user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMeLikesTracksRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMeLikesTracksSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMeLikesTracksResponse
     */
	public function getMeLikesTracks(
        \OpenAPI\OpenAPI\Models\Operations\GetMeLikesTracksRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetMeLikesTracksSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMeLikesTracksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/likes/tracks');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetMeLikesTracksRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMeLikesTracksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getMeLikesTracks200ApplicationJSONOneOf = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns userâ€™s playlists (sets).
     * 
     * Returns playlist info, playlist tracks and tracks owner info.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMePlaylistsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMePlaylistsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMePlaylistsResponse
     */
	public function getMePlaylists(
        \OpenAPI\OpenAPI\Models\Operations\GetMePlaylistsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetMePlaylistsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMePlaylistsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/playlists');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetMePlaylistsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMePlaylistsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playlistsArray = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Playlist>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns playlist. (use /playlists/{playlist_id} instead, to fetch the playlist details)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMePlaylistsPlaylistIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMePlaylistsPlaylistIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMePlaylistsPlaylistIdResponse
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function getMePlaylistsPlaylistId(
        \OpenAPI\OpenAPI\Models\Operations\GetMePlaylistsPlaylistIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetMePlaylistsPlaylistIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMePlaylistsPlaylistIdResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/playlists/{playlist_id}', \OpenAPI\OpenAPI\Models\Operations\GetMePlaylistsPlaylistIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMePlaylistsPlaylistIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playlist = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Playlist', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of user's tracks.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMeTracksRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMeTracksSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMeTracksResponse
     */
	public function getMeTracks(
        \OpenAPI\OpenAPI\Models\Operations\GetMeTracksRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetMeTracksSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMeTracksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/tracks');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetMeTracksRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMeTracksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getMeTracks200ApplicationJSONOneOf = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a specified track. (use /tracks/{track_id} instead, to fetch the track details)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMeTracksTrackIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMeTracksTrackIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMeTracksTrackIdResponse
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function getMeTracksTrackId(
        \OpenAPI\OpenAPI\Models\Operations\GetMeTracksTrackIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetMeTracksTrackIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMeTracksTrackIdResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/tracks/{track_id}', \OpenAPI\OpenAPI\Models\Operations\GetMeTracksTrackIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMeTracksTrackIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->track = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Track', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Follows a user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutMeFollowingsUserIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PutMeFollowingsUserIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PutMeFollowingsUserIdResponse
     */
	public function putMeFollowingsUserId(
        \OpenAPI\OpenAPI\Models\Operations\PutMeFollowingsUserIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PutMeFollowingsUserIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PutMeFollowingsUserIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/followings/{user_id}', \OpenAPI\OpenAPI\Models\Operations\PutMeFollowingsUserIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutMeFollowingsUserIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->user = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\User', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
}