/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CallRecipient - Recipient of a campaign action. Can be a phone number, contact, or contact list with attributes added to action. It is required to specify one of this values
 */
public class CallRecipient {
    /**
     * Map of user-defined string attributes associated with recipient
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attributes")
    public java.util.Map<String, String> attributes;
    public CallRecipient withAttributes(java.util.Map<String, String> attributes) {
        this.attributes = attributes;
        return this;
    }
    
    /**
     * An id of existing contact used as recipient
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contactId")
    public Long contactId;
    public CallRecipient withContactId(Long contactId) {
        this.contactId = contactId;
        return this;
    }
    
    /**
     * An IVR xml document describing dialplan to setup an IVR broadcast. If dialplan is set there is no need to set live, machine and transfer sounds (or vice versa)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dialplanXml")
    public String dialplanXml;
    public CallRecipient withDialplanXml(String dialplanXml) {
        this.dialplanXml = dialplanXml;
        return this;
    }
    
    /**
     * ~
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fromNumber")
    public String fromNumber;
    public CallRecipient withFromNumber(String fromNumber) {
        this.fromNumber = fromNumber;
        return this;
    }
    
    /**
     * Text to be turned into a sound, this text will be played when the phone is answered
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("liveMessage")
    public String liveMessage;
    public CallRecipient withLiveMessage(String liveMessage) {
        this.liveMessage = liveMessage;
        return this;
    }
    
    /**
     * An id of a sound file to play if phone is answered
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("liveMessageSoundId")
    public Long liveMessageSoundId;
    public CallRecipient withLiveMessageSoundId(Long liveMessageSoundId) {
        this.liveMessageSoundId = liveMessageSoundId;
        return this;
    }
    
    /**
     * Text to be used to turn into sound, this text will be played when answering machine is detected
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("machineMessage")
    public String machineMessage;
    public CallRecipient withMachineMessage(String machineMessage) {
        this.machineMessage = machineMessage;
        return this;
    }
    
    /**
     * An id of a sound file to play if answering machine is detected
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("machineMessageSoundId")
    public Long machineMessageSoundId;
    public CallRecipient withMachineMessageSoundId(Long machineMessageSoundId) {
        this.machineMessageSoundId = machineMessageSoundId;
        return this;
    }
    
    /**
     * Recipient's phone number in E.164 format (11-digit) or short code. Example: 12132000384
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phoneNumber")
    public String phoneNumber;
    public CallRecipient withPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
        return this;
    }
    
    /**
     * A digit pressed to initiate the transfer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transferDigit")
    public String transferDigit;
    public CallRecipient withTransferDigit(String transferDigit) {
        this.transferDigit = transferDigit;
        return this;
    }
    
    /**
     * Text to be turned into sound, this text will be played when the transfer digit is played
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transferMessage")
    public String transferMessage;
    public CallRecipient withTransferMessage(String transferMessage) {
        this.transferMessage = transferMessage;
        return this;
    }
    
    /**
     * An id of a sound file to play if call is transferred
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transferMessageSoundId")
    public Long transferMessageSoundId;
    public CallRecipient withTransferMessageSoundId(Long transferMessageSoundId) {
        this.transferMessageSoundId = transferMessageSoundId;
        return this;
    }
    
    /**
     * Phone number in E.164 format (11-digit) to transfer the call to. Example: 12132000384
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transferNumber")
    public String transferNumber;
    public CallRecipient withTransferNumber(String transferNumber) {
        this.transferNumber = transferNumber;
        return this;
    }
    
    /**
     * The voice to be used (MALE1, FEMALE1, FEMALE2, SPANISH1, FRENCHCANADIAN1)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("voice")
    public CallRecipientVoiceEnum voice;
    public CallRecipient withVoice(CallRecipientVoiceEnum voice) {
        this.voice = voice;
        return this;
    }
    
}
