/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import java.net.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;

/**
 * API operations to interact with the monitored Devices.
 */
public class Devices {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Devices(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Gets a list of all the devices monitored by an Agent.
     * You need to provide the &lt;b&gt;Device ID&lt;/b&gt; of a device to retrieve any other devices monitored by the same Agent:&lt;br&gt;-use the &lt;b&gt;hardware/devices&lt;/b&gt; service to get all available device IDs.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetAgentDevicesResponse getAgentDevices(org.openapis.openapi.models.operations.GetAgentDevicesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetAgentDevicesPathParams.class, baseUrl, "/hardware/devices/{deviceId}/agent-devices", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetAgentDevicesResponse res = new org.openapis.openapi.models.operations.GetAgentDevicesResponse() {{
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "*/*")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Gets detailed information about a specific device.
     * You need to provide a &lt;b&gt;Device ID&lt;/b&gt;:&lt;br&gt;-use the &lt;b&gt;hardware/devices&lt;/b&gt; service to get all available device IDs.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetDeviceResponse getDevice(org.openapis.openapi.models.operations.GetDeviceRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetDevicePathParams.class, baseUrl, "/hardware/devices/{deviceId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetDeviceResponse res = new org.openapis.openapi.models.operations.GetDeviceResponse() {{
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 404 || httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "*/*")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Gets detailed information about an Agent.
     * You need to provide a &lt;b&gt;Device ID&lt;/b&gt; to retrieve detailed information about the Agent that Monitors the device:&lt;br&gt;-use the &lt;b&gt;hardware/devices&lt;/b&gt; service to get all available device IDs.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetDeviceAgentResponse getDeviceAgent(org.openapis.openapi.models.operations.GetDeviceAgentRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetDeviceAgentPathParams.class, baseUrl, "/hardware/devices/{deviceId}/agent", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetDeviceAgentResponse res = new org.openapis.openapi.models.operations.GetDeviceAgentResponse() {{
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "*/*")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Gets the energy usage for a specific device and a given period.
     * You need to provide the device ID:&lt;br&gt;- use the &lt;b&gt;hardware/devices&lt;/b&gt; service to get all available device IDs.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetDeviceEnergyUsageResponse getDeviceEnergyUsage(org.openapis.openapi.models.operations.GetDeviceEnergyUsageRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetDeviceEnergyUsagePathParams.class, baseUrl, "/hardware/energy-usage/{deviceId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetDeviceEnergyUsageQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetDeviceEnergyUsageResponse res = new org.openapis.openapi.models.operations.GetDeviceEnergyUsageResponse() {{
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "*/*")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Gets the Monitors for a specific device.
     * You need to provide a &lt;b&gt;Device ID&lt;/b&gt;:&lt;br&gt;- use the &lt;b&gt;hardware/devices&lt;/b&gt; service to get all available device IDs.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetDeviceMonitorsResponse getDeviceMonitors(org.openapis.openapi.models.operations.GetDeviceMonitorsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetDeviceMonitorsPathParams.class, baseUrl, "/hardware/device-monitors/{deviceId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetDeviceMonitorsResponse res = new org.openapis.openapi.models.operations.GetDeviceMonitorsResponse() {{
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }
        else if (httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "*/*")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Gets data history for a parameter of a specific device over a given period.
     * You need to provide the &lt;b&gt;Device ID&lt;/b&gt;, &lt;b&gt;Parameter Name&lt;/b&gt;, &lt;b&gt;Monitor Type&lt;/b&gt; and &lt;b&gt;Monitor SID&lt;/b&gt;:&lt;br&gt;- use the &lt;b&gt;hardware/devices&lt;/b&gt; service to get all available device IDs&lt;br&gt;- use the &lt;b&gt;/hardware/device-monitors/{deviceId}&lt;/b&gt; to get the parameter name, the Monitor type and the Monitor SID.&lt;br&gt;&lt;br&gt;Finally, define the period for which you wish to retrieve data history.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetDeviceParameterHistoryResponse getDeviceParameterHistory(org.openapis.openapi.models.operations.GetDeviceParameterHistoryRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetDeviceParameterHistoryPathParams.class, baseUrl, "/hardware/devices/{deviceId}/parameter-history", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetDeviceParameterHistoryQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetDeviceParameterHistoryResponse res = new org.openapis.openapi.models.operations.GetDeviceParameterHistoryResponse() {{
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "*/*")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Gets summarized information about all monitored devices.
     * Lists the available DeviceSummary instances.&lt;br&gt;&lt;br&gt;If a parent ID (group ID, application ID, or service ID) is provided, the function narrows down the devices list to those attached to the specified parent:&lt;br&gt;- use the &lt;b&gt;hardware/groups&lt;/b&gt; service in the &lt;b&gt;Groups&lt;/b&gt; section to get all available group IDs.&lt;br&gt;- use the &lt;b&gt;hardware/applications&lt;/b&gt; service in the &lt;b&gt;Applications&lt;/b&gt; section to get all available application IDs.&lt;br&gt;- use the &lt;b&gt;hardware/services&lt;/b&gt; service in the &lt;b&gt;Services&lt;/b&gt; section to get all available service IDs.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: At most, one parent ID is taken into account according to this order of precedence:&lt;ol&gt;&lt;li&gt;group ID&lt;/li&gt;&lt;li&gt;application ID&lt;/li&gt;&lt;li&gt;service ID&lt;/li&gt;&lt;/ol&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetDevicesResponse getDevices(org.openapis.openapi.models.operations.GetDevicesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/hardware/devices");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetDevicesQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetDevicesResponse res = new org.openapis.openapi.models.operations.GetDevicesResponse() {{
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 404 || httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "*/*")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Gets overall information for all devices.
     * Lists the GlobalSummary instance for all the monitored devices.
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetDevicesSummaryResponse getDevicesSummary() throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/hardware/devices-summary");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetDevicesSummaryResponse res = new org.openapis.openapi.models.operations.GetDevicesSummaryResponse() {{
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "*/*")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Gets the heating margin values for each monitored device, when available.
     * If a parent ID (group ID, application ID, or service ID) is provided, the function narrows down the devices list to those attached to the specified parent:&lt;br&gt;- use the &lt;b&gt;hardware/groups&lt;/b&gt; service in the &lt;b&gt;Groups&lt;/b&gt; section to get all available group IDs.&lt;br&gt;- use the &lt;b&gt;hardware/applications&lt;/b&gt; service in the &lt;b&gt;Applications&lt;/b&gt; section to get all available application IDs.&lt;br&gt;- use the &lt;b&gt;hardware/services&lt;/b&gt; service in the &lt;b&gt;Services&lt;/b&gt; section to get all available service IDs.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: At most, one parent ID is taken into account according to this order of precedence:&lt;ol&gt;&lt;li&gt;group ID&lt;/li&gt;&lt;li&gt;application ID&lt;/li&gt;&lt;li&gt;service ID&lt;/li&gt;&lt;/ol&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetHeatingMarginCoverageResponse getHeatingMarginCoverage(org.openapis.openapi.models.operations.GetHeatingMarginCoverageRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/hardware/heating-margin-devices");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetHeatingMarginCoverageQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetHeatingMarginCoverageResponse res = new org.openapis.openapi.models.operations.GetHeatingMarginCoverageResponse() {{
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 404 || httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "*/*")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Searches devices by name, model, manufacturer or serial number.
     * Gets the DeviceSummary instances whose name, model, manufacturer or serial number match the specified criteria.&lt;br&gt;&lt;br&gt;If a parent ID (group ID, application ID, or service ID) is provided, the function narrows down the devices list to those attached to the specified parent:&lt;br&gt;- use the &lt;b&gt;hardware/groups&lt;/b&gt; service in the &lt;b&gt;Groups&lt;/b&gt; section to get all available group IDs.&lt;br&gt;- use the &lt;b&gt;hardware/applications&lt;/b&gt; service in the &lt;b&gt;Applications&lt;/b&gt; section to get all available application IDs.&lt;br&gt;- use the &lt;b&gt;hardware/services&lt;/b&gt; service in the &lt;b&gt;Services&lt;/b&gt; section to get all available service IDs.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: At most, one parent ID is taken into account according to this order of precedence:&lt;ol&gt;&lt;li&gt;group ID&lt;/li&gt;&lt;li&gt;application ID&lt;/li&gt;&lt;li&gt;service ID&lt;/li&gt;&lt;/ol&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.SearchDevicesResponse searchDevices(org.openapis.openapi.models.operations.SearchDevicesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/hardware/search-devices");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.SearchDevicesQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.SearchDevicesResponse res = new org.openapis.openapi.models.operations.SearchDevicesResponse() {{
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 404 || httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "*/*")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }
}