/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * StreamInput - A resource representing streaming data from a source to a destination.
 */
public class StreamInput {
    /**
     * Backfill strategy to automatically backfill the Stream's objects. Specific objects can be excluded.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("backfillAll")
    public BackfillAllStrategy backfillAll;

    public StreamInput withBackfillAll(BackfillAllStrategy backfillAll) {
        this.backfillAll = backfillAll;
        return this;
    }
    
    /**
     * Backfill strategy to disable automatic backfill for the Stream's objects.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("backfillNone")
    public java.util.Map<String, Object> backfillNone;

    public StreamInput withBackfillNone(java.util.Map<String, Object> backfillNone) {
        this.backfillNone = backfillNone;
        return this;
    }
    
    /**
     * Immutable. A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data will be encrypted using an internal Stream-specific encryption key provisioned through KMS.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customerManagedEncryptionKey")
    public String customerManagedEncryptionKey;

    public StreamInput withCustomerManagedEncryptionKey(String customerManagedEncryptionKey) {
        this.customerManagedEncryptionKey = customerManagedEncryptionKey;
        return this;
    }
    
    /**
     * The configuration of the stream destination.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destinationConfig")
    public DestinationConfig destinationConfig;

    public StreamInput withDestinationConfig(DestinationConfig destinationConfig) {
        this.destinationConfig = destinationConfig;
        return this;
    }
    
    /**
     * Required. Display name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;

    public StreamInput withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * Labels.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;

    public StreamInput withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * The configuration of the stream source.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceConfig")
    public SourceConfig sourceConfig;

    public StreamInput withSourceConfig(SourceConfig sourceConfig) {
        this.sourceConfig = sourceConfig;
        return this;
    }
    
    /**
     * The state of the stream.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public StreamStateEnum state;

    public StreamInput withState(StreamStateEnum state) {
        this.state = state;
        return this;
    }
    
    public StreamInput(){}
}
