/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * AutoscalingPolicy - Cloud Autoscaler policy.
 */
public class AutoscalingPolicy {
    /**
     * The number of seconds that the autoscaler waits before it starts collecting information from a new instance. This prevents the autoscaler from collecting information when the instance is initializing, during which the collected usage would not be reliable. The default time autoscaler waits is 60 seconds. Virtual machine initialization times might vary because of numerous factors. We recommend that you test how long an instance may take to initialize. To do this, create an instance and time the startup process.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("coolDownPeriodSec")
    public Integer coolDownPeriodSec;

    public AutoscalingPolicy withCoolDownPeriodSec(Integer coolDownPeriodSec) {
        this.coolDownPeriodSec = coolDownPeriodSec;
        return this;
    }
    
    /**
     * CPU utilization policy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cpuUtilization")
    public AutoscalingPolicyCpuUtilization cpuUtilization;

    public AutoscalingPolicy withCpuUtilization(AutoscalingPolicyCpuUtilization cpuUtilization) {
        this.cpuUtilization = cpuUtilization;
        return this;
    }
    
    /**
     * Configuration parameters of autoscaling based on a custom metric.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customMetricUtilizations")
    public AutoscalingPolicyCustomMetricUtilization[] customMetricUtilizations;

    public AutoscalingPolicy withCustomMetricUtilizations(AutoscalingPolicyCustomMetricUtilization[] customMetricUtilizations) {
        this.customMetricUtilizations = customMetricUtilizations;
        return this;
    }
    
    /**
     * Configuration parameters of autoscaling based on load balancing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("loadBalancingUtilization")
    public AutoscalingPolicyLoadBalancingUtilization loadBalancingUtilization;

    public AutoscalingPolicy withLoadBalancingUtilization(AutoscalingPolicyLoadBalancingUtilization loadBalancingUtilization) {
        this.loadBalancingUtilization = loadBalancingUtilization;
        return this;
    }
    
    /**
     * The maximum number of instances that the autoscaler can scale out to. This is required when creating or updating an autoscaler. The maximum number of replicas must not be lower than minimal number of replicas.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxNumReplicas")
    public Integer maxNumReplicas;

    public AutoscalingPolicy withMaxNumReplicas(Integer maxNumReplicas) {
        this.maxNumReplicas = maxNumReplicas;
        return this;
    }
    
    /**
     * The minimum number of replicas that the autoscaler can scale in to. This cannot be less than 0. If not provided, autoscaler chooses a default value depending on maximum number of instances allowed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minNumReplicas")
    public Integer minNumReplicas;

    public AutoscalingPolicy withMinNumReplicas(Integer minNumReplicas) {
        this.minNumReplicas = minNumReplicas;
        return this;
    }
    
    /**
     * Defines operating mode for this policy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mode")
    public AutoscalingPolicyModeEnum mode;

    public AutoscalingPolicy withMode(AutoscalingPolicyModeEnum mode) {
        this.mode = mode;
        return this;
    }
    
    /**
     * Configuration that allows for slower scale in so that even if Autoscaler recommends an abrupt scale in of a MIG, it will be throttled as specified by the parameters below.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scaleDownControl")
    public AutoscalingPolicyScaleDownControl scaleDownControl;

    public AutoscalingPolicy withScaleDownControl(AutoscalingPolicyScaleDownControl scaleDownControl) {
        this.scaleDownControl = scaleDownControl;
        return this;
    }
    
    /**
     * Configuration that allows for slower scale in so that even if Autoscaler recommends an abrupt scale in of a MIG, it will be throttled as specified by the parameters below.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scaleInControl")
    public AutoscalingPolicyScaleInControl scaleInControl;

    public AutoscalingPolicy withScaleInControl(AutoscalingPolicyScaleInControl scaleInControl) {
        this.scaleInControl = scaleInControl;
        return this;
    }
    
    /**
     * Scaling schedules defined for an autoscaler. Multiple schedules can be set on an autoscaler, and they can overlap. During overlapping periods the greatest min_required_replicas of all scaling schedules is applied. Up to 128 scaling schedules are allowed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scalingSchedules")
    public java.util.Map<String, AutoscalingPolicyScalingSchedule> scalingSchedules;

    public AutoscalingPolicy withScalingSchedules(java.util.Map<String, AutoscalingPolicyScalingSchedule> scalingSchedules) {
        this.scalingSchedules = scalingSchedules;
        return this;
    }
    
    public AutoscalingPolicy(){}
}
