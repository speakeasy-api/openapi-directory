/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * <p>Authentication mode for the environment.</p> <ul> <li> <p> <code>FEDERATED</code> - Users access FinSpace through Single Sign On (SSO) via your Identity provider.</p> </li> <li> <p> <code>LOCAL</code> - Users access FinSpace via email and password managed within the FinSpace environment.</p> </li> </ul>
 */
export enum UpdateEnvironmentRequestBodyFederationModeEnum {
  Federated = "FEDERATED",
  Local = "LOCAL",
}

/**
 * Configuration information when authentication mode is FEDERATED.
 */
export class UpdateEnvironmentRequestBodyFederationParameters extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "applicationCallBackURL" })
  applicationCallBackURL?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "attributeMap" })
  attributeMap?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "federationProviderName" })
  federationProviderName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "federationURN" })
  federationURN?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "samlMetadataDocument" })
  samlMetadataDocument?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "samlMetadataURL" })
  samlMetadataURL?: string;
}

export class UpdateEnvironmentRequestBody extends SpeakeasyBase {
  /**
   * The description of the environment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * <p>Authentication mode for the environment.</p> <ul> <li> <p> <code>FEDERATED</code> - Users access FinSpace through Single Sign On (SSO) via your Identity provider.</p> </li> <li> <p> <code>LOCAL</code> - Users access FinSpace via email and password managed within the FinSpace environment.</p> </li> </ul>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "federationMode" })
  federationMode?: UpdateEnvironmentRequestBodyFederationModeEnum;

  /**
   * Configuration information when authentication mode is FEDERATED.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "federationParameters" })
  @Type(() => UpdateEnvironmentRequestBodyFederationParameters)
  federationParameters?: UpdateEnvironmentRequestBodyFederationParameters;

  /**
   * The name of the environment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

export class UpdateEnvironmentRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateEnvironmentRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The identifier of the FinSpace environment.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=environmentId",
  })
  environmentId: string;
}

export class UpdateEnvironmentResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateEnvironmentResponse?: shared.UpdateEnvironmentResponse;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
