"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

SERVERS = [
    "https://trusthub.twilio.com",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""This is the public Twilio REST API."""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        
    
    
    def create_customer_profile(self, request: operations.CreateCustomerProfileCreateCustomerProfileRequest, security: operations.CreateCustomerProfileSecurity, server_url: Optional[str] = None) -> operations.CreateCustomerProfileResponse:
        r"""Create a new Customer-Profile."""
        base_url = operations.CREATE_CUSTOMER_PROFILE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/CustomerProfiles'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateCustomerProfileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrusthubV1CustomerProfile])
                res.trusthub_v1_customer_profile = out

        return res

    def create_customer_profile_channel_endpoint_assignment(self, request: operations.CreateCustomerProfileChannelEndpointAssignmentRequest, security: operations.CreateCustomerProfileChannelEndpointAssignmentSecurity, server_url: Optional[str] = None) -> operations.CreateCustomerProfileChannelEndpointAssignmentResponse:
        r"""Create a new Assigned Item."""
        base_url = operations.CREATE_CUSTOMER_PROFILE_CHANNEL_ENDPOINT_ASSIGNMENT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreateCustomerProfileChannelEndpointAssignmentRequest, base_url, '/v1/CustomerProfiles/{CustomerProfileSid}/ChannelEndpointAssignments', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateCustomerProfileChannelEndpointAssignmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrusthubV1CustomerProfileCustomerProfileChannelEndpointAssignment])
                res.trusthub_v1_customer_profile_customer_profile_channel_endpoint_assignment = out

        return res

    def create_customer_profile_entity_assignment(self, request: operations.CreateCustomerProfileEntityAssignmentRequest, security: operations.CreateCustomerProfileEntityAssignmentSecurity, server_url: Optional[str] = None) -> operations.CreateCustomerProfileEntityAssignmentResponse:
        r"""Create a new Assigned Item."""
        base_url = operations.CREATE_CUSTOMER_PROFILE_ENTITY_ASSIGNMENT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreateCustomerProfileEntityAssignmentRequest, base_url, '/v1/CustomerProfiles/{CustomerProfileSid}/EntityAssignments', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateCustomerProfileEntityAssignmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrusthubV1CustomerProfileCustomerProfileEntityAssignment])
                res.trusthub_v1_customer_profile_customer_profile_entity_assignment = out

        return res

    def create_customer_profile_evaluation(self, request: operations.CreateCustomerProfileEvaluationRequest, security: operations.CreateCustomerProfileEvaluationSecurity, server_url: Optional[str] = None) -> operations.CreateCustomerProfileEvaluationResponse:
        r"""Create a new Evaluation"""
        base_url = operations.CREATE_CUSTOMER_PROFILE_EVALUATION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreateCustomerProfileEvaluationRequest, base_url, '/v1/CustomerProfiles/{CustomerProfileSid}/Evaluations', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateCustomerProfileEvaluationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrusthubV1CustomerProfileCustomerProfileEvaluation])
                res.trusthub_v1_customer_profile_customer_profile_evaluation = out

        return res

    def create_end_user(self, request: operations.CreateEndUserCreateEndUserRequest, security: operations.CreateEndUserSecurity, server_url: Optional[str] = None) -> operations.CreateEndUserResponse:
        r"""Create a new End User."""
        base_url = operations.CREATE_END_USER_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/EndUsers'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateEndUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrusthubV1EndUser])
                res.trusthub_v1_end_user = out

        return res

    def create_supporting_document(self, request: operations.CreateSupportingDocumentCreateSupportingDocumentRequest, security: operations.CreateSupportingDocumentSecurity, server_url: Optional[str] = None) -> operations.CreateSupportingDocumentResponse:
        r"""Create a new Supporting Document."""
        base_url = operations.CREATE_SUPPORTING_DOCUMENT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/SupportingDocuments'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateSupportingDocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrusthubV1SupportingDocument])
                res.trusthub_v1_supporting_document = out

        return res

    def create_trust_product(self, request: operations.CreateTrustProductCreateTrustProductRequest, security: operations.CreateTrustProductSecurity, server_url: Optional[str] = None) -> operations.CreateTrustProductResponse:
        r"""Create a new Customer-Profile."""
        base_url = operations.CREATE_TRUST_PRODUCT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/TrustProducts'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateTrustProductResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrusthubV1TrustProduct])
                res.trusthub_v1_trust_product = out

        return res

    def create_trust_product_channel_endpoint_assignment(self, request: operations.CreateTrustProductChannelEndpointAssignmentRequest, security: operations.CreateTrustProductChannelEndpointAssignmentSecurity, server_url: Optional[str] = None) -> operations.CreateTrustProductChannelEndpointAssignmentResponse:
        r"""Create a new Assigned Item."""
        base_url = operations.CREATE_TRUST_PRODUCT_CHANNEL_ENDPOINT_ASSIGNMENT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreateTrustProductChannelEndpointAssignmentRequest, base_url, '/v1/TrustProducts/{TrustProductSid}/ChannelEndpointAssignments', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateTrustProductChannelEndpointAssignmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrusthubV1TrustProductTrustProductChannelEndpointAssignment])
                res.trusthub_v1_trust_product_trust_product_channel_endpoint_assignment = out

        return res

    def create_trust_product_entity_assignment(self, request: operations.CreateTrustProductEntityAssignmentRequest, security: operations.CreateTrustProductEntityAssignmentSecurity, server_url: Optional[str] = None) -> operations.CreateTrustProductEntityAssignmentResponse:
        r"""Create a new Assigned Item."""
        base_url = operations.CREATE_TRUST_PRODUCT_ENTITY_ASSIGNMENT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreateTrustProductEntityAssignmentRequest, base_url, '/v1/TrustProducts/{TrustProductSid}/EntityAssignments', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateTrustProductEntityAssignmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrusthubV1TrustProductTrustProductEntityAssignment])
                res.trusthub_v1_trust_product_trust_product_entity_assignment = out

        return res

    def create_trust_product_evaluation(self, request: operations.CreateTrustProductEvaluationRequest, security: operations.CreateTrustProductEvaluationSecurity, server_url: Optional[str] = None) -> operations.CreateTrustProductEvaluationResponse:
        r"""Create a new Evaluation"""
        base_url = operations.CREATE_TRUST_PRODUCT_EVALUATION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreateTrustProductEvaluationRequest, base_url, '/v1/TrustProducts/{TrustProductSid}/Evaluations', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateTrustProductEvaluationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrusthubV1TrustProductTrustProductEvaluation])
                res.trusthub_v1_trust_product_trust_product_evaluation = out

        return res

    def delete_customer_profile(self, request: operations.DeleteCustomerProfileRequest, security: operations.DeleteCustomerProfileSecurity, server_url: Optional[str] = None) -> operations.DeleteCustomerProfileResponse:
        r"""Delete a specific Customer-Profile."""
        base_url = operations.DELETE_CUSTOMER_PROFILE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteCustomerProfileRequest, base_url, '/v1/CustomerProfiles/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteCustomerProfileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_customer_profile_channel_endpoint_assignment(self, request: operations.DeleteCustomerProfileChannelEndpointAssignmentRequest, security: operations.DeleteCustomerProfileChannelEndpointAssignmentSecurity, server_url: Optional[str] = None) -> operations.DeleteCustomerProfileChannelEndpointAssignmentResponse:
        r"""Remove an Assignment Item Instance."""
        base_url = operations.DELETE_CUSTOMER_PROFILE_CHANNEL_ENDPOINT_ASSIGNMENT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteCustomerProfileChannelEndpointAssignmentRequest, base_url, '/v1/CustomerProfiles/{CustomerProfileSid}/ChannelEndpointAssignments/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteCustomerProfileChannelEndpointAssignmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_customer_profile_entity_assignment(self, request: operations.DeleteCustomerProfileEntityAssignmentRequest, security: operations.DeleteCustomerProfileEntityAssignmentSecurity, server_url: Optional[str] = None) -> operations.DeleteCustomerProfileEntityAssignmentResponse:
        r"""Remove an Assignment Item Instance."""
        base_url = operations.DELETE_CUSTOMER_PROFILE_ENTITY_ASSIGNMENT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteCustomerProfileEntityAssignmentRequest, base_url, '/v1/CustomerProfiles/{CustomerProfileSid}/EntityAssignments/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteCustomerProfileEntityAssignmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_end_user(self, request: operations.DeleteEndUserRequest, security: operations.DeleteEndUserSecurity, server_url: Optional[str] = None) -> operations.DeleteEndUserResponse:
        r"""Delete a specific End User."""
        base_url = operations.DELETE_END_USER_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteEndUserRequest, base_url, '/v1/EndUsers/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteEndUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_supporting_document(self, request: operations.DeleteSupportingDocumentRequest, security: operations.DeleteSupportingDocumentSecurity, server_url: Optional[str] = None) -> operations.DeleteSupportingDocumentResponse:
        r"""Delete a specific Supporting Document."""
        base_url = operations.DELETE_SUPPORTING_DOCUMENT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteSupportingDocumentRequest, base_url, '/v1/SupportingDocuments/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSupportingDocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_trust_product(self, request: operations.DeleteTrustProductRequest, security: operations.DeleteTrustProductSecurity, server_url: Optional[str] = None) -> operations.DeleteTrustProductResponse:
        r"""Delete a specific Customer-Profile."""
        base_url = operations.DELETE_TRUST_PRODUCT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteTrustProductRequest, base_url, '/v1/TrustProducts/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteTrustProductResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_trust_product_channel_endpoint_assignment(self, request: operations.DeleteTrustProductChannelEndpointAssignmentRequest, security: operations.DeleteTrustProductChannelEndpointAssignmentSecurity, server_url: Optional[str] = None) -> operations.DeleteTrustProductChannelEndpointAssignmentResponse:
        r"""Remove an Assignment Item Instance."""
        base_url = operations.DELETE_TRUST_PRODUCT_CHANNEL_ENDPOINT_ASSIGNMENT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteTrustProductChannelEndpointAssignmentRequest, base_url, '/v1/TrustProducts/{TrustProductSid}/ChannelEndpointAssignments/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteTrustProductChannelEndpointAssignmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_trust_product_entity_assignment(self, request: operations.DeleteTrustProductEntityAssignmentRequest, security: operations.DeleteTrustProductEntityAssignmentSecurity, server_url: Optional[str] = None) -> operations.DeleteTrustProductEntityAssignmentResponse:
        r"""Remove an Assignment Item Instance."""
        base_url = operations.DELETE_TRUST_PRODUCT_ENTITY_ASSIGNMENT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteTrustProductEntityAssignmentRequest, base_url, '/v1/TrustProducts/{TrustProductSid}/EntityAssignments/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteTrustProductEntityAssignmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def fetch_customer_profile(self, request: operations.FetchCustomerProfileRequest, security: operations.FetchCustomerProfileSecurity, server_url: Optional[str] = None) -> operations.FetchCustomerProfileResponse:
        r"""Fetch a specific Customer-Profile instance."""
        base_url = operations.FETCH_CUSTOMER_PROFILE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchCustomerProfileRequest, base_url, '/v1/CustomerProfiles/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchCustomerProfileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrusthubV1CustomerProfile])
                res.trusthub_v1_customer_profile = out

        return res

    def fetch_customer_profile_channel_endpoint_assignment(self, request: operations.FetchCustomerProfileChannelEndpointAssignmentRequest, security: operations.FetchCustomerProfileChannelEndpointAssignmentSecurity, server_url: Optional[str] = None) -> operations.FetchCustomerProfileChannelEndpointAssignmentResponse:
        r"""Fetch specific Assigned Item Instance."""
        base_url = operations.FETCH_CUSTOMER_PROFILE_CHANNEL_ENDPOINT_ASSIGNMENT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchCustomerProfileChannelEndpointAssignmentRequest, base_url, '/v1/CustomerProfiles/{CustomerProfileSid}/ChannelEndpointAssignments/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchCustomerProfileChannelEndpointAssignmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrusthubV1CustomerProfileCustomerProfileChannelEndpointAssignment])
                res.trusthub_v1_customer_profile_customer_profile_channel_endpoint_assignment = out

        return res

    def fetch_customer_profile_entity_assignment(self, request: operations.FetchCustomerProfileEntityAssignmentRequest, security: operations.FetchCustomerProfileEntityAssignmentSecurity, server_url: Optional[str] = None) -> operations.FetchCustomerProfileEntityAssignmentResponse:
        r"""Fetch specific Assigned Item Instance."""
        base_url = operations.FETCH_CUSTOMER_PROFILE_ENTITY_ASSIGNMENT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchCustomerProfileEntityAssignmentRequest, base_url, '/v1/CustomerProfiles/{CustomerProfileSid}/EntityAssignments/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchCustomerProfileEntityAssignmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrusthubV1CustomerProfileCustomerProfileEntityAssignment])
                res.trusthub_v1_customer_profile_customer_profile_entity_assignment = out

        return res

    def fetch_customer_profile_evaluation(self, request: operations.FetchCustomerProfileEvaluationRequest, security: operations.FetchCustomerProfileEvaluationSecurity, server_url: Optional[str] = None) -> operations.FetchCustomerProfileEvaluationResponse:
        r"""Fetch specific Evaluation Instance."""
        base_url = operations.FETCH_CUSTOMER_PROFILE_EVALUATION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchCustomerProfileEvaluationRequest, base_url, '/v1/CustomerProfiles/{CustomerProfileSid}/Evaluations/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchCustomerProfileEvaluationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrusthubV1CustomerProfileCustomerProfileEvaluation])
                res.trusthub_v1_customer_profile_customer_profile_evaluation = out

        return res

    def fetch_end_user(self, request: operations.FetchEndUserRequest, security: operations.FetchEndUserSecurity, server_url: Optional[str] = None) -> operations.FetchEndUserResponse:
        r"""Fetch specific End User Instance."""
        base_url = operations.FETCH_END_USER_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchEndUserRequest, base_url, '/v1/EndUsers/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchEndUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrusthubV1EndUser])
                res.trusthub_v1_end_user = out

        return res

    def fetch_end_user_type(self, request: operations.FetchEndUserTypeRequest, security: operations.FetchEndUserTypeSecurity, server_url: Optional[str] = None) -> operations.FetchEndUserTypeResponse:
        r"""Fetch a specific End-User Type Instance."""
        base_url = operations.FETCH_END_USER_TYPE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchEndUserTypeRequest, base_url, '/v1/EndUserTypes/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchEndUserTypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrusthubV1EndUserType])
                res.trusthub_v1_end_user_type = out

        return res

    def fetch_policies(self, request: operations.FetchPoliciesRequest, security: operations.FetchPoliciesSecurity, server_url: Optional[str] = None) -> operations.FetchPoliciesResponse:
        r"""Fetch specific Policy Instance."""
        base_url = operations.FETCH_POLICIES_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchPoliciesRequest, base_url, '/v1/Policies/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchPoliciesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrusthubV1Policies])
                res.trusthub_v1_policies = out

        return res

    def fetch_supporting_document(self, request: operations.FetchSupportingDocumentRequest, security: operations.FetchSupportingDocumentSecurity, server_url: Optional[str] = None) -> operations.FetchSupportingDocumentResponse:
        r"""Fetch specific Supporting Document Instance."""
        base_url = operations.FETCH_SUPPORTING_DOCUMENT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchSupportingDocumentRequest, base_url, '/v1/SupportingDocuments/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchSupportingDocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrusthubV1SupportingDocument])
                res.trusthub_v1_supporting_document = out

        return res

    def fetch_supporting_document_type(self, request: operations.FetchSupportingDocumentTypeRequest, security: operations.FetchSupportingDocumentTypeSecurity, server_url: Optional[str] = None) -> operations.FetchSupportingDocumentTypeResponse:
        r"""Fetch a specific Supporting Document Type Instance."""
        base_url = operations.FETCH_SUPPORTING_DOCUMENT_TYPE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchSupportingDocumentTypeRequest, base_url, '/v1/SupportingDocumentTypes/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchSupportingDocumentTypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrusthubV1SupportingDocumentType])
                res.trusthub_v1_supporting_document_type = out

        return res

    def fetch_trust_product(self, request: operations.FetchTrustProductRequest, security: operations.FetchTrustProductSecurity, server_url: Optional[str] = None) -> operations.FetchTrustProductResponse:
        r"""Fetch a specific Customer-Profile instance."""
        base_url = operations.FETCH_TRUST_PRODUCT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchTrustProductRequest, base_url, '/v1/TrustProducts/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchTrustProductResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrusthubV1TrustProduct])
                res.trusthub_v1_trust_product = out

        return res

    def fetch_trust_product_channel_endpoint_assignment(self, request: operations.FetchTrustProductChannelEndpointAssignmentRequest, security: operations.FetchTrustProductChannelEndpointAssignmentSecurity, server_url: Optional[str] = None) -> operations.FetchTrustProductChannelEndpointAssignmentResponse:
        r"""Fetch specific Assigned Item Instance."""
        base_url = operations.FETCH_TRUST_PRODUCT_CHANNEL_ENDPOINT_ASSIGNMENT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchTrustProductChannelEndpointAssignmentRequest, base_url, '/v1/TrustProducts/{TrustProductSid}/ChannelEndpointAssignments/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchTrustProductChannelEndpointAssignmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrusthubV1TrustProductTrustProductChannelEndpointAssignment])
                res.trusthub_v1_trust_product_trust_product_channel_endpoint_assignment = out

        return res

    def fetch_trust_product_entity_assignment(self, request: operations.FetchTrustProductEntityAssignmentRequest, security: operations.FetchTrustProductEntityAssignmentSecurity, server_url: Optional[str] = None) -> operations.FetchTrustProductEntityAssignmentResponse:
        r"""Fetch specific Assigned Item Instance."""
        base_url = operations.FETCH_TRUST_PRODUCT_ENTITY_ASSIGNMENT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchTrustProductEntityAssignmentRequest, base_url, '/v1/TrustProducts/{TrustProductSid}/EntityAssignments/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchTrustProductEntityAssignmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrusthubV1TrustProductTrustProductEntityAssignment])
                res.trusthub_v1_trust_product_trust_product_entity_assignment = out

        return res

    def fetch_trust_product_evaluation(self, request: operations.FetchTrustProductEvaluationRequest, security: operations.FetchTrustProductEvaluationSecurity, server_url: Optional[str] = None) -> operations.FetchTrustProductEvaluationResponse:
        r"""Fetch specific Evaluation Instance."""
        base_url = operations.FETCH_TRUST_PRODUCT_EVALUATION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchTrustProductEvaluationRequest, base_url, '/v1/TrustProducts/{TrustProductSid}/Evaluations/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchTrustProductEvaluationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrusthubV1TrustProductTrustProductEvaluation])
                res.trusthub_v1_trust_product_trust_product_evaluation = out

        return res

    def list_customer_profile(self, request: operations.ListCustomerProfileRequest, security: operations.ListCustomerProfileSecurity, server_url: Optional[str] = None) -> operations.ListCustomerProfileResponse:
        r"""Retrieve a list of all Customer-Profiles for an account."""
        base_url = operations.LIST_CUSTOMER_PROFILE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/CustomerProfiles'
        
        query_params = utils.get_query_params(operations.ListCustomerProfileRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListCustomerProfileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListCustomerProfileListCustomerProfileResponse])
                res.list_customer_profile_response = out

        return res

    def list_customer_profile_channel_endpoint_assignment(self, request: operations.ListCustomerProfileChannelEndpointAssignmentRequest, security: operations.ListCustomerProfileChannelEndpointAssignmentSecurity, server_url: Optional[str] = None) -> operations.ListCustomerProfileChannelEndpointAssignmentResponse:
        r"""Retrieve a list of all Assigned Items for an account."""
        base_url = operations.LIST_CUSTOMER_PROFILE_CHANNEL_ENDPOINT_ASSIGNMENT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListCustomerProfileChannelEndpointAssignmentRequest, base_url, '/v1/CustomerProfiles/{CustomerProfileSid}/ChannelEndpointAssignments', request)
        
        query_params = utils.get_query_params(operations.ListCustomerProfileChannelEndpointAssignmentRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListCustomerProfileChannelEndpointAssignmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListCustomerProfileChannelEndpointAssignmentListCustomerProfileChannelEndpointAssignmentResponse])
                res.list_customer_profile_channel_endpoint_assignment_response = out

        return res

    def list_customer_profile_entity_assignment(self, request: operations.ListCustomerProfileEntityAssignmentRequest, security: operations.ListCustomerProfileEntityAssignmentSecurity, server_url: Optional[str] = None) -> operations.ListCustomerProfileEntityAssignmentResponse:
        r"""Retrieve a list of all Assigned Items for an account."""
        base_url = operations.LIST_CUSTOMER_PROFILE_ENTITY_ASSIGNMENT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListCustomerProfileEntityAssignmentRequest, base_url, '/v1/CustomerProfiles/{CustomerProfileSid}/EntityAssignments', request)
        
        query_params = utils.get_query_params(operations.ListCustomerProfileEntityAssignmentRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListCustomerProfileEntityAssignmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListCustomerProfileEntityAssignmentListCustomerProfileEntityAssignmentResponse])
                res.list_customer_profile_entity_assignment_response = out

        return res

    def list_customer_profile_evaluation(self, request: operations.ListCustomerProfileEvaluationRequest, security: operations.ListCustomerProfileEvaluationSecurity, server_url: Optional[str] = None) -> operations.ListCustomerProfileEvaluationResponse:
        r"""Retrieve a list of Evaluations associated to the customer_profile resource."""
        base_url = operations.LIST_CUSTOMER_PROFILE_EVALUATION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListCustomerProfileEvaluationRequest, base_url, '/v1/CustomerProfiles/{CustomerProfileSid}/Evaluations', request)
        
        query_params = utils.get_query_params(operations.ListCustomerProfileEvaluationRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListCustomerProfileEvaluationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListCustomerProfileEvaluationListCustomerProfileEvaluationResponse])
                res.list_customer_profile_evaluation_response = out

        return res

    def list_end_user(self, request: operations.ListEndUserRequest, security: operations.ListEndUserSecurity, server_url: Optional[str] = None) -> operations.ListEndUserResponse:
        r"""Retrieve a list of all End User for an account."""
        base_url = operations.LIST_END_USER_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/EndUsers'
        
        query_params = utils.get_query_params(operations.ListEndUserRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListEndUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListEndUserListEndUserResponse])
                res.list_end_user_response = out

        return res

    def list_end_user_type(self, request: operations.ListEndUserTypeRequest, security: operations.ListEndUserTypeSecurity, server_url: Optional[str] = None) -> operations.ListEndUserTypeResponse:
        r"""Retrieve a list of all End-User Types."""
        base_url = operations.LIST_END_USER_TYPE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/EndUserTypes'
        
        query_params = utils.get_query_params(operations.ListEndUserTypeRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListEndUserTypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListEndUserTypeListEndUserTypeResponse])
                res.list_end_user_type_response = out

        return res

    def list_policies(self, request: operations.ListPoliciesRequest, security: operations.ListPoliciesSecurity, server_url: Optional[str] = None) -> operations.ListPoliciesResponse:
        r"""Retrieve a list of all Policys."""
        base_url = operations.LIST_POLICIES_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/Policies'
        
        query_params = utils.get_query_params(operations.ListPoliciesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListPoliciesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListPoliciesListPoliciesResponse])
                res.list_policies_response = out

        return res

    def list_supporting_document(self, request: operations.ListSupportingDocumentRequest, security: operations.ListSupportingDocumentSecurity, server_url: Optional[str] = None) -> operations.ListSupportingDocumentResponse:
        r"""Retrieve a list of all Supporting Document for an account."""
        base_url = operations.LIST_SUPPORTING_DOCUMENT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/SupportingDocuments'
        
        query_params = utils.get_query_params(operations.ListSupportingDocumentRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListSupportingDocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSupportingDocumentListSupportingDocumentResponse])
                res.list_supporting_document_response = out

        return res

    def list_supporting_document_type(self, request: operations.ListSupportingDocumentTypeRequest, security: operations.ListSupportingDocumentTypeSecurity, server_url: Optional[str] = None) -> operations.ListSupportingDocumentTypeResponse:
        r"""Retrieve a list of all Supporting Document Types."""
        base_url = operations.LIST_SUPPORTING_DOCUMENT_TYPE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/SupportingDocumentTypes'
        
        query_params = utils.get_query_params(operations.ListSupportingDocumentTypeRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListSupportingDocumentTypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSupportingDocumentTypeListSupportingDocumentTypeResponse])
                res.list_supporting_document_type_response = out

        return res

    def list_trust_product(self, request: operations.ListTrustProductRequest, security: operations.ListTrustProductSecurity, server_url: Optional[str] = None) -> operations.ListTrustProductResponse:
        r"""Retrieve a list of all Customer-Profiles for an account."""
        base_url = operations.LIST_TRUST_PRODUCT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/TrustProducts'
        
        query_params = utils.get_query_params(operations.ListTrustProductRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListTrustProductResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListTrustProductListTrustProductResponse])
                res.list_trust_product_response = out

        return res

    def list_trust_product_channel_endpoint_assignment(self, request: operations.ListTrustProductChannelEndpointAssignmentRequest, security: operations.ListTrustProductChannelEndpointAssignmentSecurity, server_url: Optional[str] = None) -> operations.ListTrustProductChannelEndpointAssignmentResponse:
        r"""Retrieve a list of all Assigned Items for an account."""
        base_url = operations.LIST_TRUST_PRODUCT_CHANNEL_ENDPOINT_ASSIGNMENT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListTrustProductChannelEndpointAssignmentRequest, base_url, '/v1/TrustProducts/{TrustProductSid}/ChannelEndpointAssignments', request)
        
        query_params = utils.get_query_params(operations.ListTrustProductChannelEndpointAssignmentRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListTrustProductChannelEndpointAssignmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListTrustProductChannelEndpointAssignmentListTrustProductChannelEndpointAssignmentResponse])
                res.list_trust_product_channel_endpoint_assignment_response = out

        return res

    def list_trust_product_entity_assignment(self, request: operations.ListTrustProductEntityAssignmentRequest, security: operations.ListTrustProductEntityAssignmentSecurity, server_url: Optional[str] = None) -> operations.ListTrustProductEntityAssignmentResponse:
        r"""Retrieve a list of all Assigned Items for an account."""
        base_url = operations.LIST_TRUST_PRODUCT_ENTITY_ASSIGNMENT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListTrustProductEntityAssignmentRequest, base_url, '/v1/TrustProducts/{TrustProductSid}/EntityAssignments', request)
        
        query_params = utils.get_query_params(operations.ListTrustProductEntityAssignmentRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListTrustProductEntityAssignmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListTrustProductEntityAssignmentListTrustProductEntityAssignmentResponse])
                res.list_trust_product_entity_assignment_response = out

        return res

    def list_trust_product_evaluation(self, request: operations.ListTrustProductEvaluationRequest, security: operations.ListTrustProductEvaluationSecurity, server_url: Optional[str] = None) -> operations.ListTrustProductEvaluationResponse:
        r"""Retrieve a list of Evaluations associated to the trust_product resource."""
        base_url = operations.LIST_TRUST_PRODUCT_EVALUATION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListTrustProductEvaluationRequest, base_url, '/v1/TrustProducts/{TrustProductSid}/Evaluations', request)
        
        query_params = utils.get_query_params(operations.ListTrustProductEvaluationRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListTrustProductEvaluationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListTrustProductEvaluationListTrustProductEvaluationResponse])
                res.list_trust_product_evaluation_response = out

        return res

    def update_customer_profile(self, request: operations.UpdateCustomerProfileRequest, security: operations.UpdateCustomerProfileSecurity, server_url: Optional[str] = None) -> operations.UpdateCustomerProfileResponse:
        r"""Updates a Customer-Profile in an account."""
        base_url = operations.UPDATE_CUSTOMER_PROFILE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateCustomerProfileRequest, base_url, '/v1/CustomerProfiles/{Sid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateCustomerProfileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrusthubV1CustomerProfile])
                res.trusthub_v1_customer_profile = out

        return res

    def update_end_user(self, request: operations.UpdateEndUserRequest, security: operations.UpdateEndUserSecurity, server_url: Optional[str] = None) -> operations.UpdateEndUserResponse:
        r"""Update an existing End User."""
        base_url = operations.UPDATE_END_USER_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateEndUserRequest, base_url, '/v1/EndUsers/{Sid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateEndUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrusthubV1EndUser])
                res.trusthub_v1_end_user = out

        return res

    def update_supporting_document(self, request: operations.UpdateSupportingDocumentRequest, security: operations.UpdateSupportingDocumentSecurity, server_url: Optional[str] = None) -> operations.UpdateSupportingDocumentResponse:
        r"""Update an existing Supporting Document."""
        base_url = operations.UPDATE_SUPPORTING_DOCUMENT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateSupportingDocumentRequest, base_url, '/v1/SupportingDocuments/{Sid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateSupportingDocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrusthubV1SupportingDocument])
                res.trusthub_v1_supporting_document = out

        return res

    def update_trust_product(self, request: operations.UpdateTrustProductRequest, security: operations.UpdateTrustProductSecurity, server_url: Optional[str] = None) -> operations.UpdateTrustProductResponse:
        r"""Updates a Customer-Profile in an account."""
        base_url = operations.UPDATE_TRUST_PRODUCT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateTrustProductRequest, base_url, '/v1/TrustProducts/{Sid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateTrustProductResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrusthubV1TrustProduct])
                res.trusthub_v1_trust_product = out

        return res

    