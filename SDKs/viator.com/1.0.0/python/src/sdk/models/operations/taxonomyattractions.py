"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class TaxonomyAttractionsRequestBodySortOrderEnum(str, Enum):
    r"""**sort order** in which to return the results that is *one of*:
      * `\"SEO_PUBLISHED_DATE_D\"`: publish date (descending)
      * `\"SEO_PUBLISHED_DATE_A\"`: publish date (ascending)
      * `\"SEO_REVIEW_AVG_RATING_D\"`: traveler rating (high→low)
      * `\"SEO_REVIEW_AVG_RATING_A\"`: traveler rating (low→high)
      * `\"SEO_ALPHABETICAL\"`: alphabetical (A→Z)
    """
    SEO_PUBLISHED_DATE_D = 'SEO_PUBLISHED_DATE_D'
    SEO_PUBLISHED_DATE_A = 'SEO_PUBLISHED_DATE_A'
    SEO_REVIEW_AVG_RATING_D = 'SEO_REVIEW_AVG_RATING_D'
    SEO_REVIEW_AVG_RATING_A = 'SEO_REVIEW_AVG_RATING_A'
    SEO_ALPHABETICAL = 'SEO_ALPHABETICAL'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TaxonomyAttractionsRequestBody:
    
    dest_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destId'), 'exclude': lambda f: f is None }})
    r"""**unique numeric identifier** of the destination in which to search for attractions"""  
    sort_order: Optional[TaxonomyAttractionsRequestBodySortOrderEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sortOrder'), 'exclude': lambda f: f is None }})
    r"""**sort order** in which to return the results that is *one of*:
      * `\"SEO_PUBLISHED_DATE_D\"`: publish date (descending)
      * `\"SEO_PUBLISHED_DATE_A\"`: publish date (ascending)
      * `\"SEO_REVIEW_AVG_RATING_D\"`: traveler rating (high→low)
      * `\"SEO_REVIEW_AVG_RATING_A\"`: traveler rating (low→high)
      * `\"SEO_ALPHABETICAL\"`: alphabetical (A→Z)
    """  
    top_x: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topX'), 'exclude': lambda f: f is None }})
    r"""**start and end rows** to return in the format {start}-{end}
    - e.g. `'1-10'`, `'11-20'`
    
    **Note**: 
    - the maximum number of rows per request is 100; therefore, `'100-400'` will return the same as `'100-200'`
    - if `topX` is not specified, the default is `'1-100'`
    """  
    

@dataclasses.dataclass
class TaxonomyAttractionsRequest:
    
    accept_language: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept-Language', 'style': 'simple', 'explode': False }})
    r"""Specifies the language into which the natural-language fields in the response from this service will be translated (see [Accept-Language header](#section/Appendices/Accept-Language-header) for available langage codes)"""  
    request_body: Optional[TaxonomyAttractionsRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TaxonomyAttractions200ApplicationJSONData:
    
    attraction_city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attractionCity'), 'exclude': lambda f: f is None }})
    r"""**name** of the city in which the attraction is located"""  
    attraction_latitude: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attractionLatitude'), 'exclude': lambda f: f is None }})
    r"""**latitude component** of the attraction's location"""  
    attraction_longitude: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attractionLongitude'), 'exclude': lambda f: f is None }})
    r"""**longitude component** of the attraction's location"""  
    attraction_state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attractionState'), 'exclude': lambda f: f is None }})
    r"""**name** of the state in which the attraction is located"""  
    attraction_street_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attractionStreetAddress'), 'exclude': lambda f: f is None }})
    r"""**street address** of the attraction"""  
    destination_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationId'), 'exclude': lambda f: f is None }})
    r"""**unique numeric identifier** of the the destination associated with the attraction"""  
    page_url_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pageUrlName'), 'exclude': lambda f: f is None }})
    r"""**URL-formatted title** of the attraction page"""  
    photo_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('photoCount'), 'exclude': lambda f: f is None }})
    r"""**number** of user photos published for the attraction"""  
    primary_destination_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primaryDestinationId'), 'exclude': lambda f: f is None }})
    r"""**unique numeric identifier** of the attraction's primary destination"""  
    primary_destination_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primaryDestinationName'), 'exclude': lambda f: f is None }})
    r"""**natural-language name** of the attraction's primary destination"""  
    primary_destination_url_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primaryDestinationUrlName'), 'exclude': lambda f: f is None }})
    r"""**URL-formatted name** of the destination associated with *this* attraction"""  
    product_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productCount'), 'exclude': lambda f: f is None }})
    r"""**number** of products associated with the attraction"""  
    published_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publishedDate'), 'exclude': lambda f: f is None }})
    r"""**conventionally-formatted date** on which the attraction was listed"""  
    rating: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rating'), 'exclude': lambda f: f is None }})
    r"""**average user rating** of the attraction"""  
    seo_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('seoId'), 'exclude': lambda f: f is None }})
    r"""**unique numeric identifier** of the attraction
    - use as an input for [/search/products](#operation/searchProducts)
    """  
    sort_order: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sortOrder'), 'exclude': lambda f: f is None }})
    r"""**sort order** of *this* listing"""  
    thumbnail_hi_res_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thumbnailHiResURL'), 'exclude': lambda f: f is None }})
    r"""**URL** for the attraction's high-resolution thumbnail image"""  
    thumbnail_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thumbnailURL'), 'exclude': lambda f: f is None }})
    r"""**URL** the attraction's thumbnail image"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""**natural-language title** of the attraction"""  
    web_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webURL'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TaxonomyAttractions200ApplicationJSON:
    r"""Success"""
    
    data: Optional[list[TaxonomyAttractions200ApplicationJSONData]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})
    r"""**array** of attraction objects"""  
    date_stamp: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateStamp'), 'exclude': lambda f: f is None }})
    r"""**timestamp** of *this* response"""  
    error_codes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorCodes'), 'exclude': lambda f: f is None }})
    r"""**array** of error codes pertaining to *this* error
    - See: [Viator API error codes](#section/Appendices/Viator-API-error-codes) for a list of possible error codes
    """  
    error_message: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorMessage'), 'exclude': lambda f: f is None }})
    r"""**array** of error message strings"""  
    error_message_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorMessageText'), 'exclude': lambda f: f is None }})
    r"""**array** of error message strings in plain text"""  
    error_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorName'), 'exclude': lambda f: f is None }})
    r"""**name** of *this* type of error"""  
    error_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorReference'), 'exclude': lambda f: f is None }})
    r"""**reference number** of *this* error"""  
    error_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorType'), 'exclude': lambda f: f is None }})
    r"""**code** specifying the type of error"""  
    extra_info: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extraInfo'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    extra_object: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extraObject'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    success: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('success'), 'exclude': lambda f: f is None }})
    r"""**boolean indicator** of *this* request's outcome
    - `true`: the request was successful with no errors
    - `false`: an error was encountered
    """  
    total_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalCount'), 'exclude': lambda f: f is None }})
    r"""**number** of results available for *this* service"""  
    vmid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vmid'), 'exclude': lambda f: f is None }})
    r"""**unique numeric id** of the server that processed *this* request"""  
    

@dataclasses.dataclass
class TaxonomyAttractionsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    taxonomy_attractions_200_application_json_object: Optional[TaxonomyAttractions200ApplicationJSON] = dataclasses.field(default=None)
    r"""Success"""  
    