/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class ReferenceData {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Aircraft
   *
   * @remarks
   * List all aircraft types or one specific aircraft type.
   */
  referencesAircraftByAircraftCodeGet(
    req: operations.ReferencesAircraftByAircraftCodeGetRequest,
    security: operations.ReferencesAircraftByAircraftCodeGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ReferencesAircraftByAircraftCodeGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReferencesAircraftByAircraftCodeGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/references/aircraft/{aircraftCode}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ReferencesAircraftByAircraftCodeGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReferencesAircraftByAircraftCodeGetResponse =
        new operations.ReferencesAircraftByAircraftCodeGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.referencesAircraftByAircraftCodeGet200ApplicationJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Airlines
   *
   * @remarks
   * List all airlines or one specific airline.
   */
  referencesAirlinesByAirlineCodeGet(
    req: operations.ReferencesAirlinesByAirlineCodeGetRequest,
    security: operations.ReferencesAirlinesByAirlineCodeGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ReferencesAirlinesByAirlineCodeGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReferencesAirlinesByAirlineCodeGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/references/airlines/{airlineCode}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ReferencesAirlinesByAirlineCodeGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReferencesAirlinesByAirlineCodeGetResponse =
        new operations.ReferencesAirlinesByAirlineCodeGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.referencesAirlinesByAirlineCodeGet200ApplicationJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Airports
   *
   * @remarks
   * List all airports or one specific airport. All airports response is very large. It is possible to request the response in a specific language.
   */
  referencesAirportsByAirportCodeGet(
    req: operations.ReferencesAirportsByAirportCodeGetRequest,
    security: operations.ReferencesAirportsByAirportCodeGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ReferencesAirportsByAirportCodeGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReferencesAirportsByAirportCodeGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/references/airports/{airportCode}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ReferencesAirportsByAirportCodeGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReferencesAirportsByAirportCodeGetResponse =
        new operations.ReferencesAirportsByAirportCodeGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.airportResponse = utils.objectToClass(
              httpRes?.data,
              shared.AirportResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Nearest Airports
   *
   * @remarks
   * List the 5 closest airports to the given latitude and longitude, irrespective of the radius of the reference point.
   */
  referencesAirportsNearestByLatitudeAndLongitudeGet(
    req: operations.ReferencesAirportsNearestByLatitudeAndLongitudeGetRequest,
    security: operations.ReferencesAirportsNearestByLatitudeAndLongitudeGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ReferencesAirportsNearestByLatitudeAndLongitudeGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ReferencesAirportsNearestByLatitudeAndLongitudeGetRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/references/airports/nearest/{latitude},{longitude}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ReferencesAirportsNearestByLatitudeAndLongitudeGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReferencesAirportsNearestByLatitudeAndLongitudeGetResponse =
        new operations.ReferencesAirportsNearestByLatitudeAndLongitudeGetResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.referencesAirportsNearestByLatitudeAndLongitudeGet200ApplicationJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Cities
   *
   * @remarks
   * List all cities or one specific city. It is possible to request the response in a specific language.
   */
  referencesCitiesByCityCodeGet(
    req: operations.ReferencesCitiesByCityCodeGetRequest,
    security: operations.ReferencesCitiesByCityCodeGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ReferencesCitiesByCityCodeGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReferencesCitiesByCityCodeGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/references/cities/{cityCode}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ReferencesCitiesByCityCodeGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReferencesCitiesByCityCodeGetResponse =
        new operations.ReferencesCitiesByCityCodeGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.referencesCitiesByCityCodeGet200ApplicationJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Countries
   *
   * @remarks
   * List all countries or one specific country. It is possible to request the response in a specific language.
   */
  referencesCountriesByCountryCodeGet(
    req: operations.ReferencesCountriesByCountryCodeGetRequest,
    security: operations.ReferencesCountriesByCountryCodeGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ReferencesCountriesByCountryCodeGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReferencesCountriesByCountryCodeGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/references/countries/{countryCode}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ReferencesCountriesByCountryCodeGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReferencesCountriesByCountryCodeGetResponse =
        new operations.ReferencesCountriesByCountryCodeGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.referencesCountriesByCountryCodeGet200ApplicationJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }
}
