<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Locale 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get User Locale
     * 
     * Get the current user location based on IP. Returns an object with user country code, country name, continent name, continent code, ip address and suggested currency. You can use the locale header to get the data in a supported language.
     * 
     * ([IP Geolocation by DB-IP](https://db-ip.com))
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LocaleGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LocaleGetResponse
     */
	public function localeGet(
        \OpenAPI\OpenAPI\Models\Operations\LocaleGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LocaleGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/locale');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LocaleGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->locale = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Locale', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List Continents
     * 
     * List of all continents. You can use the locale header to get the data in a supported language.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LocaleGetContinentsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LocaleGetContinentsResponse
     */
	public function localeGetContinents(
        \OpenAPI\OpenAPI\Models\Operations\LocaleGetContinentsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LocaleGetContinentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/locale/continents');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LocaleGetContinentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->continentList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContinentList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List Countries
     * 
     * List of all countries. You can use the locale header to get the data in a supported language.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LocaleGetCountriesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LocaleGetCountriesResponse
     */
	public function localeGetCountries(
        \OpenAPI\OpenAPI\Models\Operations\LocaleGetCountriesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LocaleGetCountriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/locale/countries');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LocaleGetCountriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->countryList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CountryList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List EU Countries
     * 
     * List of all countries that are currently members of the EU. You can use the locale header to get the data in a supported language.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LocaleGetCountriesEUSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LocaleGetCountriesEUResponse
     */
	public function localeGetCountriesEU(
        \OpenAPI\OpenAPI\Models\Operations\LocaleGetCountriesEUSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LocaleGetCountriesEUResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/locale/countries/eu');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LocaleGetCountriesEUResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->countryList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CountryList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List Countries Phone Codes
     * 
     * List of all countries phone codes. You can use the locale header to get the data in a supported language.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LocaleGetCountriesPhonesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LocaleGetCountriesPhonesResponse
     */
	public function localeGetCountriesPhones(
        \OpenAPI\OpenAPI\Models\Operations\LocaleGetCountriesPhonesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LocaleGetCountriesPhonesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/locale/countries/phones');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LocaleGetCountriesPhonesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->phoneList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PhoneList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List Currencies
     * 
     * List of all currencies, including currency symbol, name, plural, and decimal digits for all major and minor currencies. You can use the locale header to get the data in a supported language.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LocaleGetCurrenciesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LocaleGetCurrenciesResponse
     */
	public function localeGetCurrencies(
        \OpenAPI\OpenAPI\Models\Operations\LocaleGetCurrenciesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LocaleGetCurrenciesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/locale/currencies');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LocaleGetCurrenciesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->currencyList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CurrencyList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List Languages
     * 
     * List of all languages classified by ISO 639-1 including 2-letter code, name in English, and name in the respective language.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LocaleGetLanguagesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LocaleGetLanguagesResponse
     */
	public function localeGetLanguages(
        \OpenAPI\OpenAPI\Models\Operations\LocaleGetLanguagesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LocaleGetLanguagesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/locale/languages');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LocaleGetLanguagesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->languageList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LanguageList', 'json');
            }
        }

        return $response;
    }
}