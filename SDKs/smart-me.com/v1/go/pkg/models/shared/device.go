// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// DeviceChargingStationStateEnum - The state of a pico charging station. (Only available for pico charging stations)
type DeviceChargingStationStateEnum string

const (
	DeviceChargingStationStateEnumBooting             DeviceChargingStationStateEnum = "Booting"
	DeviceChargingStationStateEnumReadyNoCarConnected DeviceChargingStationStateEnum = "ReadyNoCarConnected"
	DeviceChargingStationStateEnumReadyCarConnected   DeviceChargingStationStateEnum = "ReadyCarConnected"
	DeviceChargingStationStateEnumStartedWaitForCar   DeviceChargingStationStateEnum = "StartedWaitForCar"
	DeviceChargingStationStateEnumCharging            DeviceChargingStationStateEnum = "Charging"
	DeviceChargingStationStateEnumInstallation        DeviceChargingStationStateEnum = "Installation"
	DeviceChargingStationStateEnumAuthorize           DeviceChargingStationStateEnum = "Authorize"
	DeviceChargingStationStateEnumOffline             DeviceChargingStationStateEnum = "Offline"
)

func (e DeviceChargingStationStateEnum) ToPointer() *DeviceChargingStationStateEnum {
	return &e
}

func (e *DeviceChargingStationStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Booting":
		fallthrough
	case "ReadyNoCarConnected":
		fallthrough
	case "ReadyCarConnected":
		fallthrough
	case "StartedWaitForCar":
		fallthrough
	case "Charging":
		fallthrough
	case "Installation":
		fallthrough
	case "Authorize":
		fallthrough
	case "Offline":
		*e = DeviceChargingStationStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeviceChargingStationStateEnum: %v", v)
	}
}

// DeviceDeviceEnergyTypeEnum - The Energy Type of this device
type DeviceDeviceEnergyTypeEnum string

const (
	DeviceDeviceEnergyTypeEnumMeterTypeUnknown       DeviceDeviceEnergyTypeEnum = "MeterTypeUnknown"
	DeviceDeviceEnergyTypeEnumMeterTypeElectricity   DeviceDeviceEnergyTypeEnum = "MeterTypeElectricity"
	DeviceDeviceEnergyTypeEnumMeterTypeWater         DeviceDeviceEnergyTypeEnum = "MeterTypeWater"
	DeviceDeviceEnergyTypeEnumMeterTypeGas           DeviceDeviceEnergyTypeEnum = "MeterTypeGas"
	DeviceDeviceEnergyTypeEnumMeterTypeHeat          DeviceDeviceEnergyTypeEnum = "MeterTypeHeat"
	DeviceDeviceEnergyTypeEnumMeterTypeHca           DeviceDeviceEnergyTypeEnum = "MeterTypeHCA"
	DeviceDeviceEnergyTypeEnumMeterTypeAllMeters     DeviceDeviceEnergyTypeEnum = "MeterTypeAllMeters"
	DeviceDeviceEnergyTypeEnumMeterTypeTemperature   DeviceDeviceEnergyTypeEnum = "MeterTypeTemperature"
	DeviceDeviceEnergyTypeEnumMeterTypeMBusGateway   DeviceDeviceEnergyTypeEnum = "MeterTypeMBusGateway"
	DeviceDeviceEnergyTypeEnumMeterTypeRs485Gateway  DeviceDeviceEnergyTypeEnum = "MeterTypeRS485Gateway"
	DeviceDeviceEnergyTypeEnumMeterTypeCustomDevice  DeviceDeviceEnergyTypeEnum = "MeterTypeCustomDevice"
	DeviceDeviceEnergyTypeEnumMeterTypeCompressedAir DeviceDeviceEnergyTypeEnum = "MeterTypeCompressedAir"
	DeviceDeviceEnergyTypeEnumMeterTypeSolarLog      DeviceDeviceEnergyTypeEnum = "MeterTypeSolarLog"
	DeviceDeviceEnergyTypeEnumMeterTypeVirtualMeter  DeviceDeviceEnergyTypeEnum = "MeterTypeVirtualMeter"
	DeviceDeviceEnergyTypeEnumMeterTypeWmBusGateway  DeviceDeviceEnergyTypeEnum = "MeterTypeWMBusGateway"
)

func (e DeviceDeviceEnergyTypeEnum) ToPointer() *DeviceDeviceEnergyTypeEnum {
	return &e
}

func (e *DeviceDeviceEnergyTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MeterTypeUnknown":
		fallthrough
	case "MeterTypeElectricity":
		fallthrough
	case "MeterTypeWater":
		fallthrough
	case "MeterTypeGas":
		fallthrough
	case "MeterTypeHeat":
		fallthrough
	case "MeterTypeHCA":
		fallthrough
	case "MeterTypeAllMeters":
		fallthrough
	case "MeterTypeTemperature":
		fallthrough
	case "MeterTypeMBusGateway":
		fallthrough
	case "MeterTypeRS485Gateway":
		fallthrough
	case "MeterTypeCustomDevice":
		fallthrough
	case "MeterTypeCompressedAir":
		fallthrough
	case "MeterTypeSolarLog":
		fallthrough
	case "MeterTypeVirtualMeter":
		fallthrough
	case "MeterTypeWMBusGateway":
		*e = DeviceDeviceEnergyTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeviceDeviceEnergyTypeEnum: %v", v)
	}
}

// DeviceFamilyTypeEnum - The Family Type of the device.
type DeviceFamilyTypeEnum string

const (
	DeviceFamilyTypeEnumMeterFamilyTypeUnknown                               DeviceFamilyTypeEnum = "MeterFamilyTypeUnknown"
	DeviceFamilyTypeEnumMeterFamilyTypeSmartMeConnectV1                      DeviceFamilyTypeEnum = "MeterFamilyTypeSmartMeConnectV1"
	DeviceFamilyTypeEnumMeterFamiliyTypeSmartMeMeter                         DeviceFamilyTypeEnum = "MeterFamiliyTypeSmartMeMeter"
	DeviceFamilyTypeEnumMeterFamiliyTypeSmartMeMeterWithSwitch               DeviceFamilyTypeEnum = "MeterFamiliyTypeSmartMeMeterWithSwitch"
	DeviceFamilyTypeEnumMeterFamilyTypeMBusGatewayV1                         DeviceFamilyTypeEnum = "MeterFamilyTypeMBusGatewayV1"
	DeviceFamilyTypeEnumMeterFamilyTypeRs485GatewayV1                        DeviceFamilyTypeEnum = "MeterFamilyTypeRS485GatewayV1"
	DeviceFamilyTypeEnumMeterFamilyTypeKamstrupModule                        DeviceFamilyTypeEnum = "MeterFamilyTypeKamstrupModule"
	DeviceFamilyTypeEnumMeterFamilyTypeSmartMe3PhaseMeter80A                 DeviceFamilyTypeEnum = "MeterFamilyTypeSmartMe3PhaseMeter80A"
	DeviceFamilyTypeEnumMeterFamilyTypeSmartMe3PhaseMeter32A                 DeviceFamilyTypeEnum = "MeterFamilyTypeSmartMe3PhaseMeter32A"
	DeviceFamilyTypeEnumMeterFamilyTypeSmartMe3PhaseTelstarTransformer       DeviceFamilyTypeEnum = "MeterFamilyTypeSmartMe3PhaseTelstarTransformer"
	DeviceFamilyTypeEnumMeterFamilyTypeLandisGyrModule                       DeviceFamilyTypeEnum = "MeterFamilyTypeLandisGyrModule"
	DeviceFamilyTypeEnumMeterFamilyTypeFnnOpticalModule                      DeviceFamilyTypeEnum = "MeterFamilyTypeFnnOpticalModule"
	DeviceFamilyTypeEnumMeterFamilyTypeSmartMe3PhaseTelstar80AWiFi           DeviceFamilyTypeEnum = "MeterFamilyTypeSmartMe3PhaseTelstar80AWiFi"
	DeviceFamilyTypeEnumMeterFamilyTypeSmartMe3PhaseTelstar80AMobile         DeviceFamilyTypeEnum = "MeterFamilyTypeSmartMe3PhaseTelstar80AMobile"
	DeviceFamilyTypeEnumMeterFamilyTypeSmartMe1PhaseMeter80Av2WiFi           DeviceFamilyTypeEnum = "MeterFamilyTypeSmartMe1PhaseMeter80AV2WiFi"
	DeviceFamilyTypeEnumMeterFamilyTypeSmartMe1PhaseMeter32Av2WiFi           DeviceFamilyTypeEnum = "MeterFamilyTypeSmartMe1PhaseMeter32AV2WiFi"
	DeviceFamilyTypeEnumMeterFamilyTypeSmartMe1PhaseMeter80AGprs             DeviceFamilyTypeEnum = "MeterFamilyTypeSmartMe1PhaseMeter80AGprs"
	DeviceFamilyTypeEnumMeterFamilyTypeSmartMe1PhaseMeter32AGprs             DeviceFamilyTypeEnum = "MeterFamilyTypeSmartMe1PhaseMeter32AGprs"
	DeviceFamilyTypeEnumMeterFamilyTypeWmBusGatewayV1                        DeviceFamilyTypeEnum = "MeterFamilyTypeWMBusGatewayV1"
	DeviceFamilyTypeEnumMeterFamilyTypeSmartMe3PhaseTelstarTransformerMobile DeviceFamilyTypeEnum = "MeterFamilyTypeSmartMe3PhaseTelstarTransformerMobile"
	DeviceFamilyTypeEnumMeterFamilyTypeMithralHallV1                         DeviceFamilyTypeEnum = "MeterFamilyTypeMithralHallV1"
	DeviceFamilyTypeEnumMeterFamilyTypeRestAPIMeter                          DeviceFamilyTypeEnum = "MeterFamilyTypeRestApiMeter"
	DeviceFamilyTypeEnumMeterFamilyTypeVirtualBillingMeter                   DeviceFamilyTypeEnum = "MeterFamilyTypeVirtualBillingMeter"
)

func (e DeviceFamilyTypeEnum) ToPointer() *DeviceFamilyTypeEnum {
	return &e
}

func (e *DeviceFamilyTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MeterFamilyTypeUnknown":
		fallthrough
	case "MeterFamilyTypeSmartMeConnectV1":
		fallthrough
	case "MeterFamiliyTypeSmartMeMeter":
		fallthrough
	case "MeterFamiliyTypeSmartMeMeterWithSwitch":
		fallthrough
	case "MeterFamilyTypeMBusGatewayV1":
		fallthrough
	case "MeterFamilyTypeRS485GatewayV1":
		fallthrough
	case "MeterFamilyTypeKamstrupModule":
		fallthrough
	case "MeterFamilyTypeSmartMe3PhaseMeter80A":
		fallthrough
	case "MeterFamilyTypeSmartMe3PhaseMeter32A":
		fallthrough
	case "MeterFamilyTypeSmartMe3PhaseTelstarTransformer":
		fallthrough
	case "MeterFamilyTypeLandisGyrModule":
		fallthrough
	case "MeterFamilyTypeFnnOpticalModule":
		fallthrough
	case "MeterFamilyTypeSmartMe3PhaseTelstar80AWiFi":
		fallthrough
	case "MeterFamilyTypeSmartMe3PhaseTelstar80AMobile":
		fallthrough
	case "MeterFamilyTypeSmartMe1PhaseMeter80AV2WiFi":
		fallthrough
	case "MeterFamilyTypeSmartMe1PhaseMeter32AV2WiFi":
		fallthrough
	case "MeterFamilyTypeSmartMe1PhaseMeter80AGprs":
		fallthrough
	case "MeterFamilyTypeSmartMe1PhaseMeter32AGprs":
		fallthrough
	case "MeterFamilyTypeWMBusGatewayV1":
		fallthrough
	case "MeterFamilyTypeSmartMe3PhaseTelstarTransformerMobile":
		fallthrough
	case "MeterFamilyTypeMithralHallV1":
		fallthrough
	case "MeterFamilyTypeRestApiMeter":
		fallthrough
	case "MeterFamilyTypeVirtualBillingMeter":
		*e = DeviceFamilyTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeviceFamilyTypeEnum: %v", v)
	}
}

// DeviceMeterSubTypeEnum - The sub meter type (e.g. warmwater or coldwater)
type DeviceMeterSubTypeEnum string

const (
	DeviceMeterSubTypeEnumMeterSubTypeUnknown         DeviceMeterSubTypeEnum = "MeterSubTypeUnknown"
	DeviceMeterSubTypeEnumMeterSubTypeCold            DeviceMeterSubTypeEnum = "MeterSubTypeCold"
	DeviceMeterSubTypeEnumMeterSubTypeHeat            DeviceMeterSubTypeEnum = "MeterSubTypeHeat"
	DeviceMeterSubTypeEnumMeterSubTypeChargingStation DeviceMeterSubTypeEnum = "MeterSubTypeChargingStation"
	DeviceMeterSubTypeEnumMeterSubTypeElectricity     DeviceMeterSubTypeEnum = "MeterSubTypeElectricity"
	DeviceMeterSubTypeEnumMeterSubTypeWater           DeviceMeterSubTypeEnum = "MeterSubTypeWater"
	DeviceMeterSubTypeEnumMeterSubTypeGas             DeviceMeterSubTypeEnum = "MeterSubTypeGas"
	DeviceMeterSubTypeEnumMeterSubTypeElectricityHeat DeviceMeterSubTypeEnum = "MeterSubTypeElectricityHeat"
	DeviceMeterSubTypeEnumMeterSubTypeTemperature     DeviceMeterSubTypeEnum = "MeterSubTypeTemperature"
	DeviceMeterSubTypeEnumMeterSubTypeVirtualBattery  DeviceMeterSubTypeEnum = "MeterSubTypeVirtualBattery"
)

func (e DeviceMeterSubTypeEnum) ToPointer() *DeviceMeterSubTypeEnum {
	return &e
}

func (e *DeviceMeterSubTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MeterSubTypeUnknown":
		fallthrough
	case "MeterSubTypeCold":
		fallthrough
	case "MeterSubTypeHeat":
		fallthrough
	case "MeterSubTypeChargingStation":
		fallthrough
	case "MeterSubTypeElectricity":
		fallthrough
	case "MeterSubTypeWater":
		fallthrough
	case "MeterSubTypeGas":
		fallthrough
	case "MeterSubTypeElectricityHeat":
		fallthrough
	case "MeterSubTypeTemperature":
		fallthrough
	case "MeterSubTypeVirtualBattery":
		*e = DeviceMeterSubTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeviceMeterSubTypeEnum: %v", v)
	}
}

// Device - Container Class for the Web API
type Device struct {
	// The Actvie Power or current flow rate
	ActivePower *float64 `json:"ActivePower,omitempty"`
	// The Actvie Power Phase L1
	ActivePowerL1 *float64 `json:"ActivePowerL1,omitempty"`
	// The Actvie Power Phase L2
	ActivePowerL2 *float64 `json:"ActivePowerL2,omitempty"`
	// The Actvie Power Phase L3
	ActivePowerL3 *float64 `json:"ActivePowerL3,omitempty"`
	// The Unit of the Active Power Value
	ActivePowerUnit *string `json:"ActivePowerUnit,omitempty"`
	// The Number of the Active Tariff
	ActiveTariff *int `json:"ActiveTariff,omitempty"`
	// An additional Meter serial number. e.g. the number of a meter a smart-me device is connected to.
	AdditionalMeterSerialNumber *string `json:"AdditionalMeterSerialNumber,omitempty"`
	// The analog output number 1 (PWM signal) (0 - 32183)
	AnalogOutput1 *int `json:"AnalogOutput1,omitempty"`
	// The analog output number 2 (PWM signal) (0 - 32183)
	AnalogOutput2 *int `json:"AnalogOutput2,omitempty"`
	// The state of a pico charging station. (Only available for pico charging stations)
	ChargingStationState *DeviceChargingStationStateEnum `json:"ChargingStationState,omitempty"`
	// The Meter Counter Reading (Total Energy used)
	CounterReading *float64 `json:"CounterReading,omitempty"`
	// The Meter Counter Reading only export
	CounterReadingExport *float64 `json:"CounterReadingExport,omitempty"`
	// The Meter Counter Reading only import
	CounterReadingImport *float64 `json:"CounterReadingImport,omitempty"`
	// The Meter Counter Reading Tariff 1
	CounterReadingT1 *float64 `json:"CounterReadingT1,omitempty"`
	// The Meter Counter Reading Tariff 2
	CounterReadingT2 *float64 `json:"CounterReadingT2,omitempty"`
	// The Meter Counter Reading Tariff 3
	CounterReadingT3 *float64 `json:"CounterReadingT3,omitempty"`
	// The Meter Counter Reading Tariff 4
	CounterReadingT4 *float64 `json:"CounterReadingT4,omitempty"`
	// The Unit of the Counter Reading
	CounterReadingUnit *string `json:"CounterReadingUnit,omitempty"`
	// The Current (in A)
	Current *float64 `json:"Current,omitempty"`
	// The Current Phase L1 (in A)
	CurrentL1 *float64 `json:"CurrentL1,omitempty"`
	// The Current Phase L2 (in A)
	CurrentL2 *float64 `json:"CurrentL2,omitempty"`
	// The Current Phase L3 (in A)
	CurrentL3 *float64 `json:"CurrentL3,omitempty"`
	// The Energy Type of this device
	DeviceEnergyType *DeviceDeviceEnergyTypeEnum `json:"DeviceEnergyType,omitempty"`
	// The digital input number 1
	DigitalInput1 *bool `json:"DigitalInput1,omitempty"`
	// The digital input number 2
	DigitalInput2 *bool `json:"DigitalInput2,omitempty"`
	// The digital output number 1
	DigitalOutput1 *bool `json:"DigitalOutput1,omitempty"`
	// The digital output number 2
	DigitalOutput2 *bool `json:"DigitalOutput2,omitempty"`
	// The Family Type of the device.
	FamilyType *DeviceFamilyTypeEnum `json:"FamilyType,omitempty"`
	// The current flow rate (e.g. m3/h)
	FlowRate *float64 `json:"FlowRate,omitempty"`
	// The ID of the device
	ID *string `json:"Id,omitempty"`
	// The sub meter type (e.g. warmwater or coldwater)
	MeterSubType *DeviceMeterSubTypeEnum `json:"MeterSubType,omitempty"`
	// The Name of the Device
	Name *string `json:"Name,omitempty"`
	// The Power Factor (cos phi). Range: 0 - 1
	PowerFactor *float64 `json:"PowerFactor,omitempty"`
	// The Power Factor (cos phi) Phase L1. Range: 0 - 1
	PowerFactorL1 *float64 `json:"PowerFactorL1,omitempty"`
	// The Power Factor (cos phi) Phase L2. Range: 0 - 1
	PowerFactorL2 *float64 `json:"PowerFactorL2,omitempty"`
	// The Power Factor (cos phi) Phase L3. Range: 0 - 1
	PowerFactorL3 *float64 `json:"PowerFactorL3,omitempty"`
	// The Serial number
	Serial *int64 `json:"Serial,omitempty"`
	// Flag if the Switch is on on this device.
	SwitchOn *bool `json:"SwitchOn,omitempty"`
	// Flag if the Phase L1 is on on this device.
	SwitchPhaseL1On *bool `json:"SwitchPhaseL1On,omitempty"`
	// Flag if the Phase L2 is on on this device.
	SwitchPhaseL2On *bool `json:"SwitchPhaseL2On,omitempty"`
	// Flag if the Phase L3 is on on this device.
	SwitchPhaseL3On *bool `json:"SwitchPhaseL3On,omitempty"`
	// The Temperature (in degree celsius)
	Temperature *float64 `json:"Temperature,omitempty"`
	// Time of last successful connection the the smart-me Cloud.
	ValueDate *time.Time `json:"ValueDate,omitempty"`
	// The Voltage (in V)
	Voltage *float64 `json:"Voltage,omitempty"`
	// The Voltage Phase L1 (in V)
	VoltageL1 *float64 `json:"VoltageL1,omitempty"`
	// The Voltage Phase L2 (in V)
	VoltageL2 *float64 `json:"VoltageL2,omitempty"`
	// The Voltage Phase L3 (in V)
	VoltageL3 *float64 `json:"VoltageL3,omitempty"`
}
