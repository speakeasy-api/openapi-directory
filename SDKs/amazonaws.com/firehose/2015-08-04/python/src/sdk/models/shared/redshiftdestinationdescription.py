"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import cloudwatchloggingoptions as shared_cloudwatchloggingoptions
from ..shared import copycommand as shared_copycommand
from ..shared import processingconfiguration as shared_processingconfiguration
from ..shared import redshiftretryoptions as shared_redshiftretryoptions
from ..shared import redshifts3backupmode_enum as shared_redshifts3backupmode_enum
from ..shared import s3destinationdescription as shared_s3destinationdescription
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RedshiftDestinationDescription:
    r"""Describes a destination in Amazon Redshift."""
    
    cluster_jdbcurl: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClusterJDBCURL') }})  
    copy_command: shared_copycommand.CopyCommand = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CopyCommand') }})  
    role_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RoleARN') }})  
    s3_destination_description: shared_s3destinationdescription.S3DestinationDescription = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3DestinationDescription') }})  
    username: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Username') }})  
    cloud_watch_logging_options: Optional[shared_cloudwatchloggingoptions.CloudWatchLoggingOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CloudWatchLoggingOptions'), 'exclude': lambda f: f is None }})  
    processing_configuration: Optional[shared_processingconfiguration.ProcessingConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProcessingConfiguration'), 'exclude': lambda f: f is None }})  
    retry_options: Optional[shared_redshiftretryoptions.RedshiftRetryOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RetryOptions'), 'exclude': lambda f: f is None }})  
    s3_backup_description: Optional[shared_s3destinationdescription.S3DestinationDescription] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3BackupDescription'), 'exclude': lambda f: f is None }})  
    s3_backup_mode: Optional[shared_redshifts3backupmode_enum.RedshiftS3BackupModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3BackupMode'), 'exclude': lambda f: f is None }})  
    