<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete project article
     * 
     * Delete project article
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticleDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticleDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticleDeleteResponse
     */
	public function privateProjectArticleDelete(
        \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticleDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticleDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticleDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/projects/{project_id}/articles/{article_id}', \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticleDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticleDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Project article details
     * 
     * Project article details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticleDetailsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticleDetailsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticleDetailsResponse
     */
	public function privateProjectArticleDetails(
        \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticleDetailsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticleDetailsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticleDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/projects/{project_id}/articles/{article_id}', \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticleDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticleDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectArticle = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProjectArticle', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Project article file details
     * 
     * Project article file details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticleFileRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticleFileSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticleFileResponse
     */
	public function privateProjectArticleFile(
        \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticleFileRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticleFileSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticleFileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/projects/{project_id}/articles/{article_id}/files/{file_id}', \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticleFileRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticleFileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->privateFile = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PrivateFile', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Project article list files
     * 
     * List article files
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticleFilesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticleFilesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticleFilesResponse
     */
	public function privateProjectArticleFiles(
        \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticleFilesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticleFilesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticleFilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/projects/{project_id}/articles/{article_id}/files', \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticleFilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticleFilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->privateFiles = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PrivateFile>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create project article
     * 
     * Create a new Article and associate it with this project
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticlesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticlesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticlesCreateResponse
     */
	public function privateProjectArticlesCreate(
        \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticlesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticlesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticlesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/projects/{project_id}/articles', \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticlesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "articleProjectCreate", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticlesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticlesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->locationWarnings = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LocationWarnings', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List project articles
     * 
     * List project articles
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticlesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticlesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticlesListResponse
     */
	public function privateProjectArticlesList(
        \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticlesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticlesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticlesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/projects/{project_id}/articles', \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticlesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticlesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateProjectArticlesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->articles = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Article>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove project collaborator
     * 
     * Remove project collaborator
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateProjectCollaboratorDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateProjectCollaboratorDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateProjectCollaboratorDeleteResponse
     */
	public function privateProjectCollaboratorDelete(
        \OpenAPI\OpenAPI\Models\Operations\PrivateProjectCollaboratorDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateProjectCollaboratorDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateProjectCollaboratorDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/projects/{project_id}/collaborators/{user_id}', \OpenAPI\OpenAPI\Models\Operations\PrivateProjectCollaboratorDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateProjectCollaboratorDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Invite project collaborators
     * 
     * Invite users to collaborate on project or view the project
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateProjectCollaboratorsInviteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateProjectCollaboratorsInviteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateProjectCollaboratorsInviteResponse
     */
	public function privateProjectCollaboratorsInvite(
        \OpenAPI\OpenAPI\Models\Operations\PrivateProjectCollaboratorsInviteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateProjectCollaboratorsInviteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateProjectCollaboratorsInviteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/projects/{project_id}/collaborators', \OpenAPI\OpenAPI\Models\Operations\PrivateProjectCollaboratorsInviteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "projectCollaboratorInvite", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateProjectCollaboratorsInviteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponseMessage', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List project collaborators
     * 
     * List Project collaborators and invited users
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateProjectCollaboratorsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateProjectCollaboratorsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateProjectCollaboratorsListResponse
     */
	public function privateProjectCollaboratorsList(
        \OpenAPI\OpenAPI\Models\Operations\PrivateProjectCollaboratorsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateProjectCollaboratorsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateProjectCollaboratorsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/projects/{project_id}/collaborators', \OpenAPI\OpenAPI\Models\Operations\PrivateProjectCollaboratorsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateProjectCollaboratorsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectCollaborators = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ProjectCollaborator>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create project
     * 
     * Create a new project
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ProjectCreate $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateProjectCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateProjectCreateResponse
     */
	public function privateProjectCreate(
        \OpenAPI\OpenAPI\Models\Shared\ProjectCreate $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateProjectCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateProjectCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/projects');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateProjectCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createProjectResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateProjectResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete project
     * 
     * A project can be deleted only if: - it is not public - it does not have public articles.
     * 
     * When an individual project is deleted, all the articles are moved to my data of each owner.
     * 
     * When a group project is deleted, all the articles and files are deleted as well. Only project owner, group admin and above can delete a project.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateProjectDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateProjectDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateProjectDeleteResponse
     */
	public function privateProjectDelete(
        \OpenAPI\OpenAPI\Models\Operations\PrivateProjectDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateProjectDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateProjectDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/projects/{project_id}', \OpenAPI\OpenAPI\Models\Operations\PrivateProjectDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateProjectDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View project details
     * 
     * View a private project
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateProjectDetailsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateProjectDetailsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateProjectDetailsResponse
     */
	public function privateProjectDetails(
        \OpenAPI\OpenAPI\Models\Operations\PrivateProjectDetailsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateProjectDetailsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateProjectDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/projects/{project_id}', \OpenAPI\OpenAPI\Models\Operations\PrivateProjectDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateProjectDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectCompletePrivate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProjectCompletePrivate', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Private Project Leave
     * 
     * Please note: project's owner cannot leave the project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateProjectLeaveRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateProjectLeaveSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateProjectLeaveResponse
     */
	public function privateProjectLeave(
        \OpenAPI\OpenAPI\Models\Operations\PrivateProjectLeaveRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateProjectLeaveSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateProjectLeaveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/projects/{project_id}/leave', \OpenAPI\OpenAPI\Models\Operations\PrivateProjectLeaveRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateProjectLeaveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Project note details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateProjectNoteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateProjectNoteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateProjectNoteResponse
     */
	public function privateProjectNote(
        \OpenAPI\OpenAPI\Models\Operations\PrivateProjectNoteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateProjectNoteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateProjectNoteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/projects/{project_id}/notes/{note_id}', \OpenAPI\OpenAPI\Models\Operations\PrivateProjectNoteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateProjectNoteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectNotePrivate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProjectNotePrivate', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete project note
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateProjectNoteDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateProjectNoteDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateProjectNoteDeleteResponse
     */
	public function privateProjectNoteDelete(
        \OpenAPI\OpenAPI\Models\Operations\PrivateProjectNoteDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateProjectNoteDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateProjectNoteDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/projects/{project_id}/notes/{note_id}', \OpenAPI\OpenAPI\Models\Operations\PrivateProjectNoteDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateProjectNoteDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update project note
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateProjectNoteUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateProjectNoteUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateProjectNoteUpdateResponse
     */
	public function privateProjectNoteUpdate(
        \OpenAPI\OpenAPI\Models\Operations\PrivateProjectNoteUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateProjectNoteUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateProjectNoteUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/projects/{project_id}/notes/{note_id}', \OpenAPI\OpenAPI\Models\Operations\PrivateProjectNoteUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "projectNoteCreate", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateProjectNoteUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 205) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create project note
     * 
     * Create a new project note
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateProjectNotesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateProjectNotesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateProjectNotesCreateResponse
     */
	public function privateProjectNotesCreate(
        \OpenAPI\OpenAPI\Models\Operations\PrivateProjectNotesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateProjectNotesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateProjectNotesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/projects/{project_id}/notes', \OpenAPI\OpenAPI\Models\Operations\PrivateProjectNotesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "projectNoteCreate", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateProjectNotesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->location = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Location', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List project notes
     * 
     * List project notes
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateProjectNotesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateProjectNotesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateProjectNotesListResponse
     */
	public function privateProjectNotesList(
        \OpenAPI\OpenAPI\Models\Operations\PrivateProjectNotesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateProjectNotesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateProjectNotesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/projects/{project_id}/notes', \OpenAPI\OpenAPI\Models\Operations\PrivateProjectNotesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PrivateProjectNotesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateProjectNotesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectNotes = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ProjectNote>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Private Project Publish
     * 
     * Publish a project. Possible after all items inside it are public
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateProjectPublishRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateProjectPublishSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateProjectPublishResponse
     */
	public function privateProjectPublish(
        \OpenAPI\OpenAPI\Models\Operations\PrivateProjectPublishRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateProjectPublishSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateProjectPublishResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/projects/{project_id}/publish', \OpenAPI\OpenAPI\Models\Operations\PrivateProjectPublishRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateProjectPublishResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponseMessage', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update project
     * 
     * Updating an project by passing body parameters; request can also be made with the PATCH method.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateProjectUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateProjectUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateProjectUpdateResponse
     */
	public function privateProjectUpdate(
        \OpenAPI\OpenAPI\Models\Operations\PrivateProjectUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateProjectUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateProjectUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/projects/{project_id}', \OpenAPI\OpenAPI\Models\Operations\PrivateProjectUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "projectUpdate", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateProjectUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 205) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Private Projects
     * 
     * List private projects
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateProjectsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateProjectsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateProjectsListResponse
     */
	public function privateProjectsList(
        \OpenAPI\OpenAPI\Models\Operations\PrivateProjectsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateProjectsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateProjectsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/projects');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PrivateProjectsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateProjectsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectPrivates = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ProjectPrivate>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Private Projects search
     * 
     * Search inside the private projects
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ProjectsSearch $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateProjectsSearchResponse
     */
	public function privateProjectsSearch(
        \OpenAPI\OpenAPI\Models\Shared\ProjectsSearch $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateProjectsSearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/projects/search');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateProjectsSearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectPrivates = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ProjectPrivate>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Public Project Articles
     * 
     * List articles in project
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProjectArticlesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProjectArticlesResponse
     */
	public function projectArticles(
        \OpenAPI\OpenAPI\Models\Operations\ProjectArticlesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProjectArticlesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project_id}/articles', \OpenAPI\OpenAPI\Models\Operations\ProjectArticlesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProjectArticlesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->articles = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Article>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Public Project
     * 
     * View a project
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProjectDetailsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProjectDetailsResponse
     */
	public function projectDetails(
        \OpenAPI\OpenAPI\Models\Operations\ProjectDetailsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProjectDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project_id}', \OpenAPI\OpenAPI\Models\Operations\ProjectDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProjectDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectComplete = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProjectComplete', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Public Projects
     * 
     * Returns a list of public projects
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProjectsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProjectsListResponse
     */
	public function projectsList(
        \OpenAPI\OpenAPI\Models\Operations\ProjectsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProjectsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ProjectsListRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProjectsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Project>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Public Projects Search
     * 
     * Returns a list of public articles
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProjectsSearchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProjectsSearchResponse
     */
	public function projectsSearch(
        \OpenAPI\OpenAPI\Models\Operations\ProjectsSearchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProjectsSearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/search');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "projectsSearch", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProjectsSearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Project>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
}