/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ItemList - A pageable list of items.
 */
public class ItemList {
    /**
     * A map of custom fields defined by a curator for a list.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customFields")
    public java.util.Map<String, Object> customFields;

    public ItemList withCustomFields(java.util.Map<String, Object> customFields) {
        this.customFields = customFields;
        return this;
    }
    
    /**
     * A full description of this list.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public ItemList withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The id of this list
     */
    @JsonProperty("id")
    public String id;

    public ItemList withId(String id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("images")
    public java.util.Map<String, String> images;

    public ItemList withImages(java.util.Map<String, String> images) {
        this.images = images;
        return this;
    }
    
    /**
     * The types of items in the list
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itemTypes")
    public ItemListItemTypesEnum[] itemTypes;

    public ItemList withItemTypes(ItemListItemTypesEnum[] itemTypes) {
        this.itemTypes = itemTypes;
        return this;
    }
    
    /**
     * A list of items
     */
    @JsonProperty("items")
    public ItemSummary[] items;

    public ItemList withItems(ItemSummary[] items) {
        this.items = items;
        return this;
    }
    
    /**
     * Extra data to accompany ItemList content. The (single) key in the object is
     * the list name and the data changes depending on the list
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("listData")
    public ListData listData;

    public ItemList withListData(ListData listData) {
        this.listData = listData;
        return this;
    }
    
    @JsonProperty("paging")
    public Pagination paging;

    public ItemList withPaging(Pagination paging) {
        this.paging = paging;
        return this;
    }
    
    /**
     * If this list is parameterized, then this contains the parameter of the list in the format `name:value`.
     * For example the Movies Genre list will take a parameter `genre` with a given value. e.g. `genre:action` or `genre:drama`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parameter")
    public String parameter;

    public ItemList withParameter(String parameter) {
        this.parameter = parameter;
        return this;
    }
    
    /**
     * The path of this list
     */
    @JsonProperty("path")
    public String path;

    public ItemList withPath(String path) {
        this.path = path;
        return this;
    }
    
    /**
     * A short description of this list.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shortDescription")
    public String shortDescription;

    public ItemList withShortDescription(String shortDescription) {
        this.shortDescription = shortDescription;
        return this;
    }
    
    /**
     * The total size of the list
     */
    @JsonProperty("size")
    public Integer size;

    public ItemList withSize(Integer size) {
        this.size = size;
        return this;
    }
    
    /**
     * The tagline of the item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tagline")
    public String tagline;

    public ItemList withTagline(String tagline) {
        this.tagline = tagline;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("themes")
    public Theme[] themes;

    public ItemList withThemes(Theme[] themes) {
        this.themes = themes;
        return this;
    }
    
    /**
     * The title of this list
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;

    public ItemList withTitle(String title) {
        this.title = title;
        return this;
    }
    
    public ItemList(@JsonProperty("id") String id, @JsonProperty("items") ItemSummary[] items, @JsonProperty("paging") Pagination paging, @JsonProperty("path") String path, @JsonProperty("size") Integer size) {
        this.id = id;
        this.items = items;
        this.paging = paging;
        this.path = path;
        this.size = size;
  }
}
