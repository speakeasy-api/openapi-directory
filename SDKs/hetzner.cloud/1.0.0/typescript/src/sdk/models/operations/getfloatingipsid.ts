/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class GetFloatingIpsIdRequest extends SpeakeasyBase {
  /**
   * ID of the Floating IP
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=id" })
  id: number;
}

export class GetFloatingIpsId200ApplicationJSONFloatingIpDnsPtr extends SpeakeasyBase {
  /**
   * DNS pointer for the specific IP address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dns_ptr" })
  dnsPtr: string;

  /**
   * Single IPv4 or IPv6 address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ip" })
  ip: string;
}

/**
 * Location the Floating IP was created in. Routing is optimized for this Location.
 */
export class GetFloatingIpsId200ApplicationJSONFloatingIpHomeLocation extends SpeakeasyBase {
  /**
   * City the Location is closest to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "city" })
  city: string;

  /**
   * ISO 3166-1 alpha-2 code of the country the Location resides in
   */
  @SpeakeasyMetadata()
  @Expose({ name: "country" })
  country: string;

  /**
   * Description of the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * ID of the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Latitude of the city closest to the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "latitude" })
  latitude: number;

  /**
   * Longitude of the city closest to the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "longitude" })
  longitude: number;

  /**
   * Unique identifier of the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Name of network zone this Location resides in
   */
  @SpeakeasyMetadata()
  @Expose({ name: "network_zone" })
  networkZone: string;
}

/**
 * Protection configuration for the Resource
 */
export class GetFloatingIpsId200ApplicationJSONFloatingIpProtection extends SpeakeasyBase {
  /**
   * If true, prevents the Resource from being deleted
   */
  @SpeakeasyMetadata()
  @Expose({ name: "delete" })
  delete: boolean;
}

/**
 * Type of the Floating IP
 */
export enum GetFloatingIpsId200ApplicationJSONFloatingIpTypeEnum {
  Ipv4 = "ipv4",
  Ipv6 = "ipv6",
}

export class GetFloatingIpsId200ApplicationJSONFloatingIp extends SpeakeasyBase {
  /**
   * Whether the IP is blocked
   */
  @SpeakeasyMetadata()
  @Expose({ name: "blocked" })
  blocked: boolean;

  /**
   * Point in time when the Resource was created (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  created: string;

  /**
   * Description of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * Array of reverse DNS entries
   */
  @SpeakeasyMetadata({
    elemType: GetFloatingIpsId200ApplicationJSONFloatingIpDnsPtr,
  })
  @Expose({ name: "dns_ptr" })
  @Type(() => GetFloatingIpsId200ApplicationJSONFloatingIpDnsPtr)
  dnsPtr: GetFloatingIpsId200ApplicationJSONFloatingIpDnsPtr[];

  /**
   * Location the Floating IP was created in. Routing is optimized for this Location.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "home_location" })
  @Type(() => GetFloatingIpsId200ApplicationJSONFloatingIpHomeLocation)
  homeLocation: GetFloatingIpsId200ApplicationJSONFloatingIpHomeLocation;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * IP address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ip" })
  ip: string;

  /**
   * User-defined labels (key-value pairs)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels: Record<string, string>;

  /**
   * Name of the Resource. Must be unique per Project.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Protection configuration for the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "protection" })
  @Type(() => GetFloatingIpsId200ApplicationJSONFloatingIpProtection)
  protection: GetFloatingIpsId200ApplicationJSONFloatingIpProtection;

  /**
   * ID of the Server the Floating IP is assigned to, null if it is not assigned at all
   */
  @SpeakeasyMetadata()
  @Expose({ name: "server" })
  server: number;

  /**
   * Type of the Floating IP
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: GetFloatingIpsId200ApplicationJSONFloatingIpTypeEnum;
}

/**
 * The `floating_ip` key in the reply contains a Floating IP object with this structure
 */
export class GetFloatingIpsId200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "floating_ip" })
  @Type(() => GetFloatingIpsId200ApplicationJSONFloatingIp)
  floatingIp: GetFloatingIpsId200ApplicationJSONFloatingIp;
}

export class GetFloatingIpsIdResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * The `floating_ip` key in the reply contains a Floating IP object with this structure
   */
  @SpeakeasyMetadata()
  getFloatingIpsId200ApplicationJSONObject?: GetFloatingIpsId200ApplicationJSON;
}
