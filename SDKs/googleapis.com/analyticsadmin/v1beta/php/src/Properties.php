<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Properties 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Acknowledges the terms of user data collection for the specified property. This acknowledgement must be completed (either in the Google Analytics UI or through this API) before MeasurementProtocolSecret resources may be created.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAcknowledgeUserDataCollectionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAcknowledgeUserDataCollectionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAcknowledgeUserDataCollectionResponse
     */
	public function analyticsadminPropertiesAcknowledgeUserDataCollection(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAcknowledgeUserDataCollectionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAcknowledgeUserDataCollectionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAcknowledgeUserDataCollectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{property}:acknowledgeUserDataCollection', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAcknowledgeUserDataCollectionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleAnalyticsAdminV1betaAcknowledgeUserDataCollectionRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAcknowledgeUserDataCollectionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAcknowledgeUserDataCollectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1betaAcknowledgeUserDataCollectionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a conversion event with the specified attributes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesConversionEventsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesConversionEventsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesConversionEventsCreateResponse
     */
	public function analyticsadminPropertiesConversionEventsCreate(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesConversionEventsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesConversionEventsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesConversionEventsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/conversionEvents', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesConversionEventsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleAnalyticsAdminV1betaConversionEventInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesConversionEventsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesConversionEventsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1betaConversionEvent = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1betaConversionEvent', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of conversion events in the specified parent property. Returns an empty list if no conversion events are found.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesConversionEventsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesConversionEventsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesConversionEventsListResponse
     */
	public function analyticsadminPropertiesConversionEventsList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesConversionEventsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesConversionEventsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesConversionEventsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/conversionEvents', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesConversionEventsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesConversionEventsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesConversionEventsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1betaListConversionEventsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1betaListConversionEventsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an "GA4" property with the specified location and attributes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCreateResponse
     */
	public function analyticsadminPropertiesCreate(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/properties');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleAnalyticsAdminV1betaPropertyInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1betaProperty = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1betaProperty', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a CustomDimension.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomDimensionsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomDimensionsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomDimensionsCreateResponse
     */
	public function analyticsadminPropertiesCustomDimensionsCreate(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomDimensionsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomDimensionsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomDimensionsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/customDimensions', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomDimensionsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleAnalyticsAdminV1betaCustomDimensionInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomDimensionsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomDimensionsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1betaCustomDimension = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1betaCustomDimension', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists CustomDimensions on a property.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomDimensionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomDimensionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomDimensionsListResponse
     */
	public function analyticsadminPropertiesCustomDimensionsList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomDimensionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomDimensionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomDimensionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/customDimensions', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomDimensionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomDimensionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomDimensionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1betaListCustomDimensionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1betaListCustomDimensionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Archives a CustomMetric on a property.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsArchiveRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsArchiveSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsArchiveResponse
     */
	public function analyticsadminPropertiesCustomMetricsArchive(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsArchiveRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsArchiveSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsArchiveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{name}:archive', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsArchiveRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsArchiveRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsArchiveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a CustomMetric.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsCreateResponse
     */
	public function analyticsadminPropertiesCustomMetricsCreate(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/customMetrics', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleAnalyticsAdminV1betaCustomMetricInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1betaCustomMetric = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1betaCustomMetric', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists CustomMetrics on a property.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsListResponse
     */
	public function analyticsadminPropertiesCustomMetricsList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/customMetrics', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1betaListCustomMetricsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1betaListCustomMetricsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a DataStream.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsCreateResponse
     */
	public function analyticsadminPropertiesDataStreamsCreate(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/dataStreams', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleAnalyticsAdminV1betaDataStreamInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1betaDataStream = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1betaDataStream', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists DataStreams on a property.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsListResponse
     */
	public function analyticsadminPropertiesDataStreamsList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/dataStreams', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1betaListDataStreamsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1betaListDataStreamsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a measurement protocol secret.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsCreateResponse
     */
	public function analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsCreate(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/measurementProtocolSecrets', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleAnalyticsAdminV1betaMeasurementProtocolSecretInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1betaMeasurementProtocolSecret = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1betaMeasurementProtocolSecret', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lookup for a single "GA4" MeasurementProtocolSecret.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGetResponse
     */
	public function analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGet(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{name}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1betaMeasurementProtocolSecret = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1betaMeasurementProtocolSecret', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns child MeasurementProtocolSecrets under the specified parent Property.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListResponse
     */
	public function analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/measurementProtocolSecrets', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1betaListMeasurementProtocolSecretsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1betaListMeasurementProtocolSecretsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a FirebaseLink. Properties can have at most one FirebaseLink.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFirebaseLinksCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFirebaseLinksCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFirebaseLinksCreateResponse
     */
	public function analyticsadminPropertiesFirebaseLinksCreate(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFirebaseLinksCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFirebaseLinksCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFirebaseLinksCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/firebaseLinks', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFirebaseLinksCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleAnalyticsAdminV1betaFirebaseLinkInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFirebaseLinksCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFirebaseLinksCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1betaFirebaseLink = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1betaFirebaseLink', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists FirebaseLinks on a property. Properties can have at most one FirebaseLink.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFirebaseLinksListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFirebaseLinksListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFirebaseLinksListResponse
     */
	public function analyticsadminPropertiesFirebaseLinksList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFirebaseLinksListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFirebaseLinksListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFirebaseLinksListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/firebaseLinks', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFirebaseLinksListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFirebaseLinksListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFirebaseLinksListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1betaListFirebaseLinksResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1betaListFirebaseLinksResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a GoogleAdsLink.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksCreateResponse
     */
	public function analyticsadminPropertiesGoogleAdsLinksCreate(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/googleAdsLinks', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleAnalyticsAdminV1betaGoogleAdsLinkInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1betaGoogleAdsLink = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1betaGoogleAdsLink', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a GoogleAdsLink on a property
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksDeleteResponse
     */
	public function analyticsadminPropertiesGoogleAdsLinksDelete(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{name}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists GoogleAdsLinks on a property.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksListResponse
     */
	public function analyticsadminPropertiesGoogleAdsLinksList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/googleAdsLinks', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1betaListGoogleAdsLinksResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1betaListGoogleAdsLinksResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a GoogleAdsLink on a property
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksPatchResponse
     */
	public function analyticsadminPropertiesGoogleAdsLinksPatch(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{name}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleAnalyticsAdminV1betaGoogleAdsLinkInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1betaGoogleAdsLink = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1betaGoogleAdsLink', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns child Properties under the specified parent Account. Only "GA4" properties will be returned. Properties will be excluded if the caller does not have access. Soft-deleted (ie: "trashed") properties are excluded by default. Returns an empty list if no relevant properties are found.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesListResponse
     */
	public function analyticsadminPropertiesList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/properties');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1betaListPropertiesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1betaListPropertiesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a customized report of data access records. The report provides records of each time a user reads Google Analytics reporting data. Access records are retained for up to 2 years. Data Access Reports can be requested for a property. The property must be in Google Analytics 360. This method is only available to Administrators. These data access records include GA4 UI Reporting, GA4 UI Explorations, GA4 Data API, and other products like Firebase & Admob that can retrieve data from Google Analytics through a linkage. These records don't include property configuration changes like adding a stream or changing a property's time zone. For configuration change history, see [searchChangeHistoryEvents](https://developers.google.com/analytics/devguides/config/admin/v1/rest/v1alpha/accounts/searchChangeHistoryEvents).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesRunAccessReportRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesRunAccessReportSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesRunAccessReportResponse
     */
	public function analyticsadminPropertiesRunAccessReport(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesRunAccessReportRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesRunAccessReportSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesRunAccessReportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{entity}:runAccessReport', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesRunAccessReportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleAnalyticsAdminV1betaRunAccessReportRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesRunAccessReportRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesRunAccessReportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1betaRunAccessReportResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1betaRunAccessReportResponse', 'json');
            }
        }

        return $response;
    }
}