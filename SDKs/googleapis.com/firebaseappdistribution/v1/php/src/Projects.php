<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes releases. A maximum of 100 releases can be deleted per request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesBatchDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesBatchDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesBatchDeleteResponse
     */
	public function firebaseappdistributionProjectsAppsReleasesBatchDelete(
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesBatchDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesBatchDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesBatchDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/releases:batchDelete', \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesBatchDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleFirebaseAppdistroV1BatchDeleteReleasesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesBatchDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesBatchDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Distributes a release to testers. This call does the following: 1. Creates testers for the specified emails, if none exist. 2. Adds the testers and groups to the release. 3. Sends new testers an invitation email. 4. Sends existing testers a new release email. The request will fail with a `INVALID_ARGUMENT` if it contains a group that doesn't exist.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesDistributeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesDistributeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesDistributeResponse
     */
	public function firebaseappdistributionProjectsAppsReleasesDistribute(
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesDistributeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesDistributeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesDistributeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:distribute', \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesDistributeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleFirebaseAppdistroV1DistributeReleaseRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesDistributeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesDistributeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleFirebaseAppdistroV1DistributeReleaseResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists feedback reports. By default, sorts by `createTime` in descending order.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesFeedbackReportsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesFeedbackReportsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesFeedbackReportsListResponse
     */
	public function firebaseappdistributionProjectsAppsReleasesFeedbackReportsList(
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesFeedbackReportsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesFeedbackReportsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesFeedbackReportsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/feedbackReports', \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesFeedbackReportsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesFeedbackReportsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesFeedbackReportsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleFirebaseAppdistroV1ListFeedbackReportsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleFirebaseAppdistroV1ListFeedbackReportsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists releases. By default, sorts by `createTime` in descending order.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesListResponse
     */
	public function firebaseappdistributionProjectsAppsReleasesList(
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/releases', \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleFirebaseAppdistroV1ListReleasesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleFirebaseAppdistroV1ListReleasesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesOperationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesOperationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesOperationsCancelResponse
     */
	public function firebaseappdistributionProjectsAppsReleasesOperationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesOperationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesOperationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesOperationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesOperationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesOperationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesOperationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesOperationsListResponse
     */
	public function firebaseappdistributionProjectsAppsReleasesOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningListOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningListOperationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesOperationsWaitRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesOperationsWaitSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesOperationsWaitResponse
     */
	public function firebaseappdistributionProjectsAppsReleasesOperationsWait(
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesOperationsWaitRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesOperationsWaitSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesOperationsWaitResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:wait', \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesOperationsWaitRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleLongrunningWaitOperationRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesOperationsWaitRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsAppsReleasesOperationsWaitResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Batch adds members to a group. The testers will gain access to all releases that the groups have access to.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsBatchJoinRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsBatchJoinSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsBatchJoinResponse
     */
	public function firebaseappdistributionProjectsGroupsBatchJoin(
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsBatchJoinRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsBatchJoinSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsBatchJoinResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{group}:batchJoin', \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsBatchJoinRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleFirebaseAppdistroV1BatchJoinGroupRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsBatchJoinRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsBatchJoinResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Batch removed members from a group. The testers will lose access to all releases that the groups have access to.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsBatchLeaveRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsBatchLeaveSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsBatchLeaveResponse
     */
	public function firebaseappdistributionProjectsGroupsBatchLeave(
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsBatchLeaveRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsBatchLeaveSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsBatchLeaveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{group}:batchLeave', \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsBatchLeaveRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleFirebaseAppdistroV1BatchLeaveGroupRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsBatchLeaveRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsBatchLeaveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsCreateResponse
     */
	public function firebaseappdistributionProjectsGroupsCreate(
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/groups', \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleFirebaseAppdistroV1GroupInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleFirebaseAppdistroV1Group = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleFirebaseAppdistroV1Group', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsDeleteResponse
     */
	public function firebaseappdistributionProjectsGroupsDelete(
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsGetResponse
     */
	public function firebaseappdistributionProjectsGroupsGet(
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleFirebaseAppdistroV1Group = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleFirebaseAppdistroV1Group', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List groups.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsListResponse
     */
	public function firebaseappdistributionProjectsGroupsList(
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/groups', \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsGroupsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleFirebaseAppdistroV1ListGroupsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleFirebaseAppdistroV1ListGroupsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Batch adds testers. This call adds testers for the specified emails if they don't already exist. Returns all testers specified in the request, including newly created and previously existing testers. This action is idempotent.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsTestersBatchAddRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsTestersBatchAddSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsTestersBatchAddResponse
     */
	public function firebaseappdistributionProjectsTestersBatchAdd(
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsTestersBatchAddRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsTestersBatchAddSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsTestersBatchAddResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{project}/testers:batchAdd', \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsTestersBatchAddRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleFirebaseAppdistroV1BatchAddTestersRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsTestersBatchAddRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsTestersBatchAddResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleFirebaseAppdistroV1BatchAddTestersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleFirebaseAppdistroV1BatchAddTestersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Batch removes testers. If found, this call deletes testers for the specified emails. Returns all deleted testers.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsTestersBatchRemoveRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsTestersBatchRemoveSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsTestersBatchRemoveResponse
     */
	public function firebaseappdistributionProjectsTestersBatchRemove(
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsTestersBatchRemoveRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsTestersBatchRemoveSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsTestersBatchRemoveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{project}/testers:batchRemove', \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsTestersBatchRemoveRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleFirebaseAppdistroV1BatchRemoveTestersRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsTestersBatchRemoveRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsTestersBatchRemoveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleFirebaseAppdistroV1BatchRemoveTestersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleFirebaseAppdistroV1BatchRemoveTestersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists testers and their resource ids.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsTestersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsTestersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsTestersListResponse
     */
	public function firebaseappdistributionProjectsTestersList(
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsTestersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsTestersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsTestersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/testers', \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsTestersListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsTestersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsTestersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleFirebaseAppdistroV1ListTestersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleFirebaseAppdistroV1ListTestersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a tester. If the testers joins a group they gain access to all releases that the group has access to.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsTestersPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsTestersPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsTestersPatchResponse
     */
	public function firebaseappdistributionProjectsTestersPatch(
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsTestersPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsTestersPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsTestersPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsTestersPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleFirebaseAppdistroV1TesterInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsTestersPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FirebaseappdistributionProjectsTestersPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleFirebaseAppdistroV1Tester = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleFirebaseAppdistroV1Tester', 'json');
            }
        }

        return $response;
    }
}