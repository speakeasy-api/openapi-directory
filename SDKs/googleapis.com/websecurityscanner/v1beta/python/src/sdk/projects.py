"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def websecurityscanner_projects_scan_configs_create(self, request: operations.WebsecurityscannerProjectsScanConfigsCreateRequest, security: operations.WebsecurityscannerProjectsScanConfigsCreateSecurity) -> operations.WebsecurityscannerProjectsScanConfigsCreateResponse:
        r"""Creates a new ScanConfig."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WebsecurityscannerProjectsScanConfigsCreateRequest, base_url, '/v1beta/{parent}/scanConfigs', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "scan_config", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WebsecurityscannerProjectsScanConfigsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WebsecurityscannerProjectsScanConfigsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScanConfig])
                res.scan_config = out

        return res

    def websecurityscanner_projects_scan_configs_delete(self, request: operations.WebsecurityscannerProjectsScanConfigsDeleteRequest, security: operations.WebsecurityscannerProjectsScanConfigsDeleteSecurity) -> operations.WebsecurityscannerProjectsScanConfigsDeleteResponse:
        r"""Deletes an existing ScanConfig and its child resources."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WebsecurityscannerProjectsScanConfigsDeleteRequest, base_url, '/v1beta/{name}', request)
        
        query_params = utils.get_query_params(operations.WebsecurityscannerProjectsScanConfigsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WebsecurityscannerProjectsScanConfigsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def websecurityscanner_projects_scan_configs_list(self, request: operations.WebsecurityscannerProjectsScanConfigsListRequest, security: operations.WebsecurityscannerProjectsScanConfigsListSecurity) -> operations.WebsecurityscannerProjectsScanConfigsListResponse:
        r"""Lists ScanConfigs under a given project."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WebsecurityscannerProjectsScanConfigsListRequest, base_url, '/v1beta/{parent}/scanConfigs', request)
        
        query_params = utils.get_query_params(operations.WebsecurityscannerProjectsScanConfigsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WebsecurityscannerProjectsScanConfigsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListScanConfigsResponse])
                res.list_scan_configs_response = out

        return res

    def websecurityscanner_projects_scan_configs_patch(self, request: operations.WebsecurityscannerProjectsScanConfigsPatchRequest, security: operations.WebsecurityscannerProjectsScanConfigsPatchSecurity) -> operations.WebsecurityscannerProjectsScanConfigsPatchResponse:
        r"""Updates a ScanConfig. This method support partial update of a ScanConfig."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WebsecurityscannerProjectsScanConfigsPatchRequest, base_url, '/v1beta/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "scan_config", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WebsecurityscannerProjectsScanConfigsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WebsecurityscannerProjectsScanConfigsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScanConfig])
                res.scan_config = out

        return res

    def websecurityscanner_projects_scan_configs_scan_runs_crawled_urls_list(self, request: operations.WebsecurityscannerProjectsScanConfigsScanRunsCrawledUrlsListRequest, security: operations.WebsecurityscannerProjectsScanConfigsScanRunsCrawledUrlsListSecurity) -> operations.WebsecurityscannerProjectsScanConfigsScanRunsCrawledUrlsListResponse:
        r"""List CrawledUrls under a given ScanRun."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WebsecurityscannerProjectsScanConfigsScanRunsCrawledUrlsListRequest, base_url, '/v1beta/{parent}/crawledUrls', request)
        
        query_params = utils.get_query_params(operations.WebsecurityscannerProjectsScanConfigsScanRunsCrawledUrlsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WebsecurityscannerProjectsScanConfigsScanRunsCrawledUrlsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListCrawledUrlsResponse])
                res.list_crawled_urls_response = out

        return res

    def websecurityscanner_projects_scan_configs_scan_runs_finding_type_stats_list(self, request: operations.WebsecurityscannerProjectsScanConfigsScanRunsFindingTypeStatsListRequest, security: operations.WebsecurityscannerProjectsScanConfigsScanRunsFindingTypeStatsListSecurity) -> operations.WebsecurityscannerProjectsScanConfigsScanRunsFindingTypeStatsListResponse:
        r"""List all FindingTypeStats under a given ScanRun."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WebsecurityscannerProjectsScanConfigsScanRunsFindingTypeStatsListRequest, base_url, '/v1beta/{parent}/findingTypeStats', request)
        
        query_params = utils.get_query_params(operations.WebsecurityscannerProjectsScanConfigsScanRunsFindingTypeStatsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WebsecurityscannerProjectsScanConfigsScanRunsFindingTypeStatsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListFindingTypeStatsResponse])
                res.list_finding_type_stats_response = out

        return res

    def websecurityscanner_projects_scan_configs_scan_runs_findings_get(self, request: operations.WebsecurityscannerProjectsScanConfigsScanRunsFindingsGetRequest, security: operations.WebsecurityscannerProjectsScanConfigsScanRunsFindingsGetSecurity) -> operations.WebsecurityscannerProjectsScanConfigsScanRunsFindingsGetResponse:
        r"""Gets a Finding."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WebsecurityscannerProjectsScanConfigsScanRunsFindingsGetRequest, base_url, '/v1beta/{name}', request)
        
        query_params = utils.get_query_params(operations.WebsecurityscannerProjectsScanConfigsScanRunsFindingsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WebsecurityscannerProjectsScanConfigsScanRunsFindingsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Finding])
                res.finding = out

        return res

    def websecurityscanner_projects_scan_configs_scan_runs_findings_list(self, request: operations.WebsecurityscannerProjectsScanConfigsScanRunsFindingsListRequest, security: operations.WebsecurityscannerProjectsScanConfigsScanRunsFindingsListSecurity) -> operations.WebsecurityscannerProjectsScanConfigsScanRunsFindingsListResponse:
        r"""List Findings under a given ScanRun."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WebsecurityscannerProjectsScanConfigsScanRunsFindingsListRequest, base_url, '/v1beta/{parent}/findings', request)
        
        query_params = utils.get_query_params(operations.WebsecurityscannerProjectsScanConfigsScanRunsFindingsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WebsecurityscannerProjectsScanConfigsScanRunsFindingsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListFindingsResponse])
                res.list_findings_response = out

        return res

    def websecurityscanner_projects_scan_configs_scan_runs_list(self, request: operations.WebsecurityscannerProjectsScanConfigsScanRunsListRequest, security: operations.WebsecurityscannerProjectsScanConfigsScanRunsListSecurity) -> operations.WebsecurityscannerProjectsScanConfigsScanRunsListResponse:
        r"""Lists ScanRuns under a given ScanConfig, in descending order of ScanRun stop time."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WebsecurityscannerProjectsScanConfigsScanRunsListRequest, base_url, '/v1beta/{parent}/scanRuns', request)
        
        query_params = utils.get_query_params(operations.WebsecurityscannerProjectsScanConfigsScanRunsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WebsecurityscannerProjectsScanConfigsScanRunsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListScanRunsResponse])
                res.list_scan_runs_response = out

        return res

    def websecurityscanner_projects_scan_configs_scan_runs_stop(self, request: operations.WebsecurityscannerProjectsScanConfigsScanRunsStopRequest, security: operations.WebsecurityscannerProjectsScanConfigsScanRunsStopSecurity) -> operations.WebsecurityscannerProjectsScanConfigsScanRunsStopResponse:
        r"""Stops a ScanRun. The stopped ScanRun is returned."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WebsecurityscannerProjectsScanConfigsScanRunsStopRequest, base_url, '/v1beta/{name}:stop', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WebsecurityscannerProjectsScanConfigsScanRunsStopRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WebsecurityscannerProjectsScanConfigsScanRunsStopResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScanRun])
                res.scan_run = out

        return res

    def websecurityscanner_projects_scan_configs_start(self, request: operations.WebsecurityscannerProjectsScanConfigsStartRequest, security: operations.WebsecurityscannerProjectsScanConfigsStartSecurity) -> operations.WebsecurityscannerProjectsScanConfigsStartResponse:
        r"""Start a ScanRun according to the given ScanConfig."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WebsecurityscannerProjectsScanConfigsStartRequest, base_url, '/v1beta/{name}:start', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WebsecurityscannerProjectsScanConfigsStartRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WebsecurityscannerProjectsScanConfigsStartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScanRun])
                res.scan_run = out

        return res

    