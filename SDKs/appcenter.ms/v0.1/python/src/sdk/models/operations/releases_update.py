"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class ReleasesUpdateSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    

@dataclasses.dataclass
class ReleasesUpdateRequestBodyBuild:
    r"""Contains metadata about the build that produced the release being uploaded"""
    
    branch_name: Optional[str] = dataclasses.field(default=None)
    r"""The branch name of the build producing the release"""  
    commit_hash: Optional[str] = dataclasses.field(default=None)
    r"""The commit hash of the build producing the release"""  
    commit_message: Optional[str] = dataclasses.field(default=None)
    r"""The commit message of the build producing the release"""  
    

@dataclasses.dataclass
class ReleasesUpdateRequestBodyDestinations:
    r"""A unique identifier for a destination. A destination can be identified by an ID (guid) or by a name. DestinationId encapsulates both options. A destination can be either a distribution group or a store."""
    
    id: Optional[str] = dataclasses.field(default=None)
    r"""Id of a distribution group / store. The release will be associated with this distribution group / store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence."""  
    name: Optional[str] = dataclasses.field(default=None)
    r"""Name of a distribution group / distribution store. The release will be associated with this distribution group or store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence."""  
    

@dataclasses.dataclass
class ReleasesUpdateRequestBodyMetadata:
    r"""An object containing all the release metadata."""
    
    dsa_signature: Optional[str] = dataclasses.field(default=None)
    r"""dsa signature of the release for the sparkle feed."""  
    ed_signature: Optional[str] = dataclasses.field(default=None)
    r"""edDSA signature of the release for the sparkle feed."""  
    

@dataclasses.dataclass
class ReleasesUpdateRequestBody:
    r"""A request containing information for updating a release."""
    
    build: Optional[ReleasesUpdateRequestBodyBuild] = dataclasses.field(default=None)
    r"""Contains metadata about the build that produced the release being uploaded"""  
    destination_id: Optional[str] = dataclasses.field(default=None)
    r"""OBSOLETE. Will be removed in future releases - use destinations instead. Id of a destination. The release will be associated with this destination. If the destination doesn't exist a 400 is returned. If both destination name and id are passed, the id is taking precedence."""  
    destination_name: Optional[str] = dataclasses.field(default=None)
    r"""OBSOLETE. Will be removed in future releases - use destinations instead. Name of a destination. The release will be associated with this destination. If the destination doesn't exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence."""  
    destination_type: Optional[str] = dataclasses.field(default=None)
    r"""Not used anymore."""  
    destinations: Optional[list[ReleasesUpdateRequestBodyDestinations]] = dataclasses.field(default=None)
    r"""Distribute this release under the following list of destinations (store groups or distribution groups)."""  
    distribution_group_id: Optional[str] = dataclasses.field(default=None)
    r"""OBSOLETE. Will be removed in future releases - use destinations instead. Id of a distribution group. The release will be associated with this distribution group. If the distribution group doesn't exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence."""  
    distribution_group_name: Optional[str] = dataclasses.field(default=None)
    r"""OBSOLETE. Will be removed in future releases - use destinations instead. Name of a distribution group. The release will be associated with this distribution group. If the distribution group doesn't exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence."""  
    mandatory_update: Optional[bool] = dataclasses.field(default=None)
    r"""A boolean which determines whether this version should be a mandatory update or not."""  
    metadata: Optional[ReleasesUpdateRequestBodyMetadata] = dataclasses.field(default=None)
    r"""An object containing all the release metadata."""  
    notify_testers: Optional[bool] = dataclasses.field(default=None)
    r"""A boolean which determines whether to notify testers of a new release, default to true."""  
    release_notes: Optional[str] = dataclasses.field(default=None)
    r"""Release notes for this release."""  
    

@dataclasses.dataclass
class ReleasesUpdateRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    release_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'release_id', 'style': 'simple', 'explode': False }})
    r"""The ID of the release"""  
    request_body: bytes = dataclasses.field(metadata={'request': { 'media_type': 'text/plain' }})
    r"""The release information."""  
    
class ReleasesUpdate404ApplicationJSONCodeEnum(str, Enum):
    BAD_REQUEST = 'BadRequest'
    CONFLICT = 'Conflict'
    NOT_ACCEPTABLE = 'NotAcceptable'
    NOT_FOUND = 'NotFound'
    INTERNAL_SERVER_ERROR = 'InternalServerError'
    UNAUTHORIZED = 'Unauthorized'
    TOO_MANY_REQUESTS = 'TooManyRequests'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReleasesUpdate404ApplicationJSON:
    r"""Release not found"""
    
    code: ReleasesUpdate404ApplicationJSONCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    
class ReleasesUpdate400ApplicationJSONCodeEnum(str, Enum):
    BAD_REQUEST = 'BadRequest'
    CONFLICT = 'Conflict'
    NOT_ACCEPTABLE = 'NotAcceptable'
    NOT_FOUND = 'NotFound'
    INTERNAL_SERVER_ERROR = 'InternalServerError'
    UNAUTHORIZED = 'Unauthorized'
    TOO_MANY_REQUESTS = 'TooManyRequests'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReleasesUpdate400ApplicationJSONDestinations:
    
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""Error Codes:<br>
    <b>invalid_store_secrets</b>: While distributing to store, secrets provided for store are not valid.<br>
    <b>store_release_bad_request</b>: Proper package release details for the store is not provided.<br>
    <b>store_release_unauthorized</b>: User is not authorized to publish to store due to invalid developer credentials.<br>
    <b>store_release_forbidden</b>: Publish to store is forbidden due to conflicts/errors in the release version and already existing version in the store.<br>
    <b>store_release_promotion</b>: Release already distributed, promoting a release is not supported.<br>
    <b>store_track_deactivated</b>: One or more tracks would be deactivated with this release. This is not supported yet.<br>
    <b>store_release_not_found</b>: App with the given package name is not found in the store.<br>
    <b>store_release_not_available</b>: The release is not available.<br>
    <b>internal_server_error</b>: Failed to distribute to a destination due to an internal server error.
    """  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReleasesUpdate400ApplicationJSON:
    r"""Failure"""
    
    code: ReleasesUpdate400ApplicationJSONCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    destinations: Optional[list[ReleasesUpdate400ApplicationJSONDestinations]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinations'), 'exclude': lambda f: f is None }})  
    mandatory_update: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mandatory_update'), 'exclude': lambda f: f is None }})  
    release_notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('release_notes'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReleasesUpdate200ApplicationJSON:
    r"""Response for updating release details"""
    
    release_notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('release_notes'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class ReleasesUpdateResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    releases_update_200_application_json_object: Optional[ReleasesUpdate200ApplicationJSON] = dataclasses.field(default=None)
    r"""Success"""  
    releases_update_400_application_json_object: Optional[ReleasesUpdate400ApplicationJSON] = dataclasses.field(default=None)
    r"""Failure"""  
    releases_update_404_application_json_object: Optional[ReleasesUpdate404ApplicationJSON] = dataclasses.field(default=None)
    r"""Release not found"""  
    