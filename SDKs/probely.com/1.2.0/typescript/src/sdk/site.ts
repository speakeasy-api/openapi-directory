/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Every target has a site object, it contains the main entry URL for scans.
 *
 * @remarks
 * Other settings are also connected to a site like login parameters,
 * basic auth, and custom headers and cookies.
 *
 */
export class Site {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Retrieve target's site
   */
  getTargetsTargetIdSite(
    req: operations.GetTargetsTargetIdSiteRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTargetsTargetIdSiteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTargetsTargetIdSiteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/targets/{target_id}/site/",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTargetsTargetIdSiteResponse =
        new operations.GetTargetsTargetIdSiteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.site = utils.objectToClass(httpRes?.data, shared.Site);
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdSite401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdSite401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdSite404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdSite404ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Partial update target's site
   *
   * @remarks
   * Note that the URL can only be set once.
   */
  patchTargetsTargetIdSite(
    req: operations.PatchTargetsTargetIdSiteRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PatchTargetsTargetIdSiteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PatchTargetsTargetIdSiteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/targets/{target_id}/site/",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "siteInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PatchTargetsTargetIdSiteResponse =
        new operations.PatchTargetsTargetIdSiteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.site = utils.objectToClass(httpRes?.data, shared.Site);
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.patchTargetsTargetIdSite400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PatchTargetsTargetIdSite400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.patchTargetsTargetIdSite401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PatchTargetsTargetIdSite401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.patchTargetsTargetIdSite403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PatchTargetsTargetIdSite403ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.patchTargetsTargetIdSite404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PatchTargetsTargetIdSite404ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Verify site ownership
   */
  postTargetsTargetIdSiteVerify(
    req: operations.PostTargetsTargetIdSiteVerifyRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostTargetsTargetIdSiteVerifyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostTargetsTargetIdSiteVerifyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/targets/{target_id}/site/verify/",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostTargetsTargetIdSiteVerifyResponse =
        new operations.PostTargetsTargetIdSiteVerifyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postTargetsTargetIdSiteVerify200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostTargetsTargetIdSiteVerify200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postTargetsTargetIdSiteVerify400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostTargetsTargetIdSiteVerify400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postTargetsTargetIdSiteVerify401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostTargetsTargetIdSiteVerify401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postTargetsTargetIdSiteVerify403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostTargetsTargetIdSiteVerify403ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postTargetsTargetIdSiteVerify404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostTargetsTargetIdSiteVerify404ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update target's site
   *
   * @remarks
   * Note that the URL can only be set once.
   */
  putTargetsTargetIdSite(
    req: operations.PutTargetsTargetIdSiteRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutTargetsTargetIdSiteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutTargetsTargetIdSiteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/targets/{target_id}/site/",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "siteInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutTargetsTargetIdSiteResponse =
        new operations.PutTargetsTargetIdSiteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.site = utils.objectToClass(httpRes?.data, shared.Site);
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.putTargetsTargetIdSite400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PutTargetsTargetIdSite400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.putTargetsTargetIdSite401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PutTargetsTargetIdSite401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.putTargetsTargetIdSite403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PutTargetsTargetIdSite403ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.putTargetsTargetIdSite404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PutTargetsTargetIdSite404ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
