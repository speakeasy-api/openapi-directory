/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class ActionsUpdateRequiredWorkflowRequestBody {
    /**
     * The ID of the repository that contains the workflow file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("repository_id")
    public String repositoryId;
    public ActionsUpdateRequiredWorkflowRequestBody withRepositoryId(String repositoryId) {
        this.repositoryId = repositoryId;
        return this;
    }
    
    /**
     * Enable the required workflow for all repositories or selected repositories in the organization.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scope")
    public ActionsUpdateRequiredWorkflowRequestBodyScopeEnum scope;
    public ActionsUpdateRequiredWorkflowRequestBody withScope(ActionsUpdateRequiredWorkflowRequestBodyScopeEnum scope) {
        this.scope = scope;
        return this;
    }
    
    /**
     * A list of repository IDs where you want to enable the required workflow. A list of repository IDs where you want to enable the required workflow. You can only provide a list of repository ids when the `scope` is set to `selected`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selected_repository_ids")
    public Long[] selectedRepositoryIds;
    public ActionsUpdateRequiredWorkflowRequestBody withSelectedRepositoryIds(Long[] selectedRepositoryIds) {
        this.selectedRepositoryIds = selectedRepositoryIds;
        return this;
    }
    
    /**
     * Path of the workflow file to be configured as a required workflow.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workflow_file_path")
    public String workflowFilePath;
    public ActionsUpdateRequiredWorkflowRequestBody withWorkflowFilePath(String workflowFilePath) {
        this.workflowFilePath = workflowFilePath;
        return this;
    }
    
}
