// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// LivingAreaAccessibilityAdaCompliantUnitExceptionEnum - ADA compliant unit exception.
type LivingAreaAccessibilityAdaCompliantUnitExceptionEnum string

const (
	LivingAreaAccessibilityAdaCompliantUnitExceptionEnumExceptionUnspecified LivingAreaAccessibilityAdaCompliantUnitExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaAccessibilityAdaCompliantUnitExceptionEnumUnderConstruction    LivingAreaAccessibilityAdaCompliantUnitExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaAccessibilityAdaCompliantUnitExceptionEnumDependentOnSeason    LivingAreaAccessibilityAdaCompliantUnitExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaAccessibilityAdaCompliantUnitExceptionEnumDependentOnDayOfWeek LivingAreaAccessibilityAdaCompliantUnitExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *LivingAreaAccessibilityAdaCompliantUnitExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaAccessibilityAdaCompliantUnitExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaAccessibilityAdaCompliantUnitExceptionEnum: %s", s)
	}
}

// LivingAreaAccessibilityHearingAccessibleDoorbellExceptionEnum - Hearing-accessible doorbell exception.
type LivingAreaAccessibilityHearingAccessibleDoorbellExceptionEnum string

const (
	LivingAreaAccessibilityHearingAccessibleDoorbellExceptionEnumExceptionUnspecified LivingAreaAccessibilityHearingAccessibleDoorbellExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaAccessibilityHearingAccessibleDoorbellExceptionEnumUnderConstruction    LivingAreaAccessibilityHearingAccessibleDoorbellExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaAccessibilityHearingAccessibleDoorbellExceptionEnumDependentOnSeason    LivingAreaAccessibilityHearingAccessibleDoorbellExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaAccessibilityHearingAccessibleDoorbellExceptionEnumDependentOnDayOfWeek LivingAreaAccessibilityHearingAccessibleDoorbellExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *LivingAreaAccessibilityHearingAccessibleDoorbellExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaAccessibilityHearingAccessibleDoorbellExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaAccessibilityHearingAccessibleDoorbellExceptionEnum: %s", s)
	}
}

// LivingAreaAccessibilityHearingAccessibleFireAlarmExceptionEnum - Hearing-accessible fire alarm exception.
type LivingAreaAccessibilityHearingAccessibleFireAlarmExceptionEnum string

const (
	LivingAreaAccessibilityHearingAccessibleFireAlarmExceptionEnumExceptionUnspecified LivingAreaAccessibilityHearingAccessibleFireAlarmExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaAccessibilityHearingAccessibleFireAlarmExceptionEnumUnderConstruction    LivingAreaAccessibilityHearingAccessibleFireAlarmExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaAccessibilityHearingAccessibleFireAlarmExceptionEnumDependentOnSeason    LivingAreaAccessibilityHearingAccessibleFireAlarmExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaAccessibilityHearingAccessibleFireAlarmExceptionEnumDependentOnDayOfWeek LivingAreaAccessibilityHearingAccessibleFireAlarmExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *LivingAreaAccessibilityHearingAccessibleFireAlarmExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaAccessibilityHearingAccessibleFireAlarmExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaAccessibilityHearingAccessibleFireAlarmExceptionEnum: %s", s)
	}
}

// LivingAreaAccessibilityHearingAccessibleUnitExceptionEnum - Hearing-accessible unit exception.
type LivingAreaAccessibilityHearingAccessibleUnitExceptionEnum string

const (
	LivingAreaAccessibilityHearingAccessibleUnitExceptionEnumExceptionUnspecified LivingAreaAccessibilityHearingAccessibleUnitExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaAccessibilityHearingAccessibleUnitExceptionEnumUnderConstruction    LivingAreaAccessibilityHearingAccessibleUnitExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaAccessibilityHearingAccessibleUnitExceptionEnumDependentOnSeason    LivingAreaAccessibilityHearingAccessibleUnitExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaAccessibilityHearingAccessibleUnitExceptionEnumDependentOnDayOfWeek LivingAreaAccessibilityHearingAccessibleUnitExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *LivingAreaAccessibilityHearingAccessibleUnitExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaAccessibilityHearingAccessibleUnitExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaAccessibilityHearingAccessibleUnitExceptionEnum: %s", s)
	}
}

// LivingAreaAccessibilityMobilityAccessibleBathtubExceptionEnum - Mobility-accessible bathtub exception.
type LivingAreaAccessibilityMobilityAccessibleBathtubExceptionEnum string

const (
	LivingAreaAccessibilityMobilityAccessibleBathtubExceptionEnumExceptionUnspecified LivingAreaAccessibilityMobilityAccessibleBathtubExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaAccessibilityMobilityAccessibleBathtubExceptionEnumUnderConstruction    LivingAreaAccessibilityMobilityAccessibleBathtubExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaAccessibilityMobilityAccessibleBathtubExceptionEnumDependentOnSeason    LivingAreaAccessibilityMobilityAccessibleBathtubExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaAccessibilityMobilityAccessibleBathtubExceptionEnumDependentOnDayOfWeek LivingAreaAccessibilityMobilityAccessibleBathtubExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *LivingAreaAccessibilityMobilityAccessibleBathtubExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaAccessibilityMobilityAccessibleBathtubExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaAccessibilityMobilityAccessibleBathtubExceptionEnum: %s", s)
	}
}

// LivingAreaAccessibilityMobilityAccessibleShowerExceptionEnum - Mobility-accessible shower exception.
type LivingAreaAccessibilityMobilityAccessibleShowerExceptionEnum string

const (
	LivingAreaAccessibilityMobilityAccessibleShowerExceptionEnumExceptionUnspecified LivingAreaAccessibilityMobilityAccessibleShowerExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaAccessibilityMobilityAccessibleShowerExceptionEnumUnderConstruction    LivingAreaAccessibilityMobilityAccessibleShowerExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaAccessibilityMobilityAccessibleShowerExceptionEnumDependentOnSeason    LivingAreaAccessibilityMobilityAccessibleShowerExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaAccessibilityMobilityAccessibleShowerExceptionEnumDependentOnDayOfWeek LivingAreaAccessibilityMobilityAccessibleShowerExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *LivingAreaAccessibilityMobilityAccessibleShowerExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaAccessibilityMobilityAccessibleShowerExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaAccessibilityMobilityAccessibleShowerExceptionEnum: %s", s)
	}
}

// LivingAreaAccessibilityMobilityAccessibleToiletExceptionEnum - Mobility-accessible toilet exception.
type LivingAreaAccessibilityMobilityAccessibleToiletExceptionEnum string

const (
	LivingAreaAccessibilityMobilityAccessibleToiletExceptionEnumExceptionUnspecified LivingAreaAccessibilityMobilityAccessibleToiletExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaAccessibilityMobilityAccessibleToiletExceptionEnumUnderConstruction    LivingAreaAccessibilityMobilityAccessibleToiletExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaAccessibilityMobilityAccessibleToiletExceptionEnumDependentOnSeason    LivingAreaAccessibilityMobilityAccessibleToiletExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaAccessibilityMobilityAccessibleToiletExceptionEnumDependentOnDayOfWeek LivingAreaAccessibilityMobilityAccessibleToiletExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *LivingAreaAccessibilityMobilityAccessibleToiletExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaAccessibilityMobilityAccessibleToiletExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaAccessibilityMobilityAccessibleToiletExceptionEnum: %s", s)
	}
}

// LivingAreaAccessibilityMobilityAccessibleUnitExceptionEnum - Mobility-accessible unit exception.
type LivingAreaAccessibilityMobilityAccessibleUnitExceptionEnum string

const (
	LivingAreaAccessibilityMobilityAccessibleUnitExceptionEnumExceptionUnspecified LivingAreaAccessibilityMobilityAccessibleUnitExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaAccessibilityMobilityAccessibleUnitExceptionEnumUnderConstruction    LivingAreaAccessibilityMobilityAccessibleUnitExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaAccessibilityMobilityAccessibleUnitExceptionEnumDependentOnSeason    LivingAreaAccessibilityMobilityAccessibleUnitExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaAccessibilityMobilityAccessibleUnitExceptionEnumDependentOnDayOfWeek LivingAreaAccessibilityMobilityAccessibleUnitExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *LivingAreaAccessibilityMobilityAccessibleUnitExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaAccessibilityMobilityAccessibleUnitExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaAccessibilityMobilityAccessibleUnitExceptionEnum: %s", s)
	}
}

// LivingAreaAccessibility - Accessibility features of the living area.
type LivingAreaAccessibility struct {
	// ADA compliant unit. A guestroom designed to accommodate the physical challenges of a guest with mobility and/or auditory and/or visual issues, as determined by legislative policy. Usually features enlarged doorways, roll-in showers with seats, bathroom grab bars, and communication equipment for the hearing and sight challenged.
	AdaCompliantUnit *bool `json:"adaCompliantUnit,omitempty"`
	// ADA compliant unit exception.
	AdaCompliantUnitException *LivingAreaAccessibilityAdaCompliantUnitExceptionEnum `json:"adaCompliantUnitException,omitempty"`
	// Hearing-accessible doorbell. A visual indicator(s) of a knock or ring at the door.
	HearingAccessibleDoorbell *bool `json:"hearingAccessibleDoorbell,omitempty"`
	// Hearing-accessible doorbell exception.
	HearingAccessibleDoorbellException *LivingAreaAccessibilityHearingAccessibleDoorbellExceptionEnum `json:"hearingAccessibleDoorbellException,omitempty"`
	// Hearing-accessible fire alarm. A device that gives warning of a fire through flashing lights.
	HearingAccessibleFireAlarm *bool `json:"hearingAccessibleFireAlarm,omitempty"`
	// Hearing-accessible fire alarm exception.
	HearingAccessibleFireAlarmException *LivingAreaAccessibilityHearingAccessibleFireAlarmExceptionEnum `json:"hearingAccessibleFireAlarmException,omitempty"`
	// Hearing-accessible unit. A guestroom designed to accommodate the physical challenges of a guest with auditory issues.
	HearingAccessibleUnit *bool `json:"hearingAccessibleUnit,omitempty"`
	// Hearing-accessible unit exception.
	HearingAccessibleUnitException *LivingAreaAccessibilityHearingAccessibleUnitExceptionEnum `json:"hearingAccessibleUnitException,omitempty"`
	// Mobility-accessible bathtub. A bathtub that accomodates the physically challenged with additional railings or hand grips, a transfer seat or lift, and/or a door to enable walking into the tub.
	MobilityAccessibleBathtub *bool `json:"mobilityAccessibleBathtub,omitempty"`
	// Mobility-accessible bathtub exception.
	MobilityAccessibleBathtubException *LivingAreaAccessibilityMobilityAccessibleBathtubExceptionEnum `json:"mobilityAccessibleBathtubException,omitempty"`
	// Mobility-accessible shower. A shower with an enlarged door or access point to accommodate a wheelchair or a waterproof seat for the physically challenged.
	MobilityAccessibleShower *bool `json:"mobilityAccessibleShower,omitempty"`
	// Mobility-accessible shower exception.
	MobilityAccessibleShowerException *LivingAreaAccessibilityMobilityAccessibleShowerExceptionEnum `json:"mobilityAccessibleShowerException,omitempty"`
	// Mobility-accessible toilet. A toilet with a higher seat, grab bars, and/or a larger area around it to accommodate the physically challenged.
	MobilityAccessibleToilet *bool `json:"mobilityAccessibleToilet,omitempty"`
	// Mobility-accessible toilet exception.
	MobilityAccessibleToiletException *LivingAreaAccessibilityMobilityAccessibleToiletExceptionEnum `json:"mobilityAccessibleToiletException,omitempty"`
	// Mobility-accessible unit. A guestroom designed to accommodate the physical challenges of a guest with mobility and/or auditory and/or visual issues. Usually features enlarged doorways, roll-in showers with seats, bathroom grab bars, and communication equipment for the hearing and sight challenged.
	MobilityAccessibleUnit *bool `json:"mobilityAccessibleUnit,omitempty"`
	// Mobility-accessible unit exception.
	MobilityAccessibleUnitException *LivingAreaAccessibilityMobilityAccessibleUnitExceptionEnum `json:"mobilityAccessibleUnitException,omitempty"`
}
