"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTaxesScope:
    r"""Scope of the tax."""
    
    all_catalog: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allCatalog'), 'exclude': lambda f: f is None }})
    r"""Determines if the tax applies to all products in the Catalog (`true`) or not (`false`)."""  
    brands: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brands'), 'exclude': lambda f: f is None }})
    r"""Quantity of brands which activate or deactivate the tax."""  
    brands_are_inclusive: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brandsAreInclusive'), 'exclude': lambda f: f is None }})
    r"""If set to `true`, this tax will be applied to any brand present on the `brands` field. If set to `false`, brands present on that field will make this tax not to be applied."""  
    categories: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categories'), 'exclude': lambda f: f is None }})
    r"""Quantity of categories which activate or deactivate the tax."""  
    categories_are_inclusive: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categoriesAreInclusive'), 'exclude': lambda f: f is None }})
    r"""If set to `true`, this tax will be applied to any category present on the `categories` field. If set to `false`, categories present on that field will make this tax not to be applied."""  
    collections: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('collections'), 'exclude': lambda f: f is None }})
    r"""Quantity of collections which activate or deactivate the tax."""  
    collections_are_inclusive: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('collectionsAreInclusive'), 'exclude': lambda f: f is None }})
    r"""If set to `true`, this tax will be applied to any collection present on the `collections` field. If set to `false`, collections present on that field will make this tax not to be applied."""  
    products: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('products'), 'exclude': lambda f: f is None }})
    r"""Quantity of products which activate or deactivate the tax."""  
    products_are_inclusive: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productsAreInclusive'), 'exclude': lambda f: f is None }})
    r"""If set to `true`, this tax will be applied to any product present on the `products` field. If set to `false`, products present on that field will make this tax not to be applied."""  
    sellers: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sellers'), 'exclude': lambda f: f is None }})
    r"""Quantity of sellers which activate or deactivate the tax."""  
    sellers_are_inclusive: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sellersAreInclusive'), 'exclude': lambda f: f is None }})
    r"""If set to `true`, this tax will be applied to any seller present on the `sellers` field. If set to `false`, sellers present on that field will make this tax not to be applied."""  
    skus: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skus'), 'exclude': lambda f: f is None }})
    r"""Quantity of SKUs which activate or deactivate the tax."""  
    skus_are_inclusive: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skusAreInclusive'), 'exclude': lambda f: f is None }})
    r"""If set to `true`, this tax will be applied to any SKU present on the `skus` field. If set to `false`, SKUs present on that field will make this tax not to be applied."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTaxes:
    r"""Object with information about a tax."""
    
    activate_gifts_multiplier: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activateGiftsMultiplier'), 'exclude': lambda f: f is None }})
    r"""If set as `true`, it activates gifts Multiplier."""  
    are_sales_channel_ids_exclusive: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('areSalesChannelIdsExclusive'), 'exclude': lambda f: f is None }})
    r"""If set to `false`, this tax will be applied to any trade policies present on the `idsSalesChannel` field. If set to `true`, trade policies present on that field will make this tax not to be applied."""  
    begin_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beginDate'), 'exclude': lambda f: f is None }})
    r"""Tax start date (UTC)."""  
    campaigns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Campaigns'), 'exclude': lambda f: f is None }})
    r"""Array with campaign audiences that activate this tax."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Tax internal description."""  
    end_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endDate'), 'exclude': lambda f: f is None }})
    r"""Tax end date (UTC)."""  
    has_max_price_per_item: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasMaxPricePerItem'), 'exclude': lambda f: f is None }})
    r"""Defines if there is a maximum price per item."""  
    id_calculator_configuration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idCalculatorConfiguration'), 'exclude': lambda f: f is None }})
    r"""Tax ID."""  
    ids_sales_channel: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idsSalesChannel'), 'exclude': lambda f: f is None }})
    r"""List of Trade Policies that activate this tax."""  
    is_active: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isActive'), 'exclude': lambda f: f is None }})
    r"""If set as `true` the tax is activated. If set as `false` the tax is deactivated."""  
    is_archived: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isArchived'), 'exclude': lambda f: f is None }})
    r"""If set as `true` the tax is archived. If set as `false` the tax is not archived."""  
    is_tax: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isTax'), 'exclude': lambda f: f is None }})
    r"""Defines if it is a tax."""  
    last_modified_utc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastModifiedUtc'), 'exclude': lambda f: f is None }})
    r"""Date and time when the tax was last modified (UTC)."""  
    max_usage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxUsage'), 'exclude': lambda f: f is None }})
    r"""Defines how many times the tax can be used."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Tax name."""  
    percentual_tax: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('percentualTax'), 'exclude': lambda f: f is None }})
    r"""Percentual tax applied."""  
    scope: Optional[GetTaxesScope] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scope'), 'exclude': lambda f: f is None }})
    r"""Scope of the tax."""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status of the tax."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Defines the type of tax."""  
    utm_campain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('utmCampain'), 'exclude': lambda f: f is None }})
    r"""utmCampaign code."""  
    utmi_campaign: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('utmiCampaign'), 'exclude': lambda f: f is None }})
    r"""utmiCampaign code."""  
    utm_source: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('utmSource'), 'exclude': lambda f: f is None }})
    r"""utmSource code."""  
    