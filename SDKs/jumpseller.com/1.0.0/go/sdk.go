// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"net/http"
	"openapi/pkg/utils"
	"time"
)

// ServerList contains the list of servers available to the SDK
var ServerList = []string{
	"https://api.jumpseller.com/v1",
}

// HTTPClient provides an interface for suplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// SDK - # Endpoint Structure
//
// All URLs are in the format:
//
// ```text
// https://api.jumpseller.com/v1/path.json?login=XXXXXX&authtoken=storetoken
// ```
//
// The path is prefixed by the API version and the URL takes as parameters the login (your store specific API login) and your authentication token.
// <br/><br/>
// ***
//
// # Version
//
// The current version of the API is **v1**.
// If we change the API in backward-incompatible ways, we'll increase the version number and maintain stable support for the old urls.
// <br/><br/>
// ***
//
// # Authentication
//
// The API uses a token-based authentication with a combination of a login key and an auth token. **Both parameters can be found on the left sidebar of the Account section, accessed from the main menu of your Admin Panel**. The auth token of the user can be reset on the same page.
//
// ![Store Login](/images/support/api/apilogin.png)
//
// The auth token is a **32 characters** string.
//
// If you are developing a Jumpseller App, the authentication should be done using [OAuth-2](/support/oauth-2). Please read the article [Build an App](/support/apps) for more information.
// <br/><br/>
// ***
//
// # Curl Examples
//
// To request all the products at your store, you would append the products index path to the base url to create an URL with the format:
//
// ```text
// https://api.jumpseller.com/v1/products.json?login=XXXXXX&authtoken=XXXXX
// ```
//
// In curl, you can invoque that URL with:
//
// ```text
// curl -X GET "https://api.jumpseller.com/v1/products.json?login=XXXXXX&authtoken=XXXXX"
// ```
//
// To create a product, you will include the JSON data and specify the MIME Type:
//
// ```text
// curl -X POST -d '{ "product" : {"name": "My new Product!", "price": 100} }' "https://api.jumpseller.com/v1/products.json?login=XXXXXX&authtoken=XXXXX" -H "Content-Type:application/json"
// ```
//
// and to update the product identified with 123:
//
// ```text
// curl -X PUT -d '{ "product" : {"name": "My updated Product!", "price": 99} }' "https://api.jumpseller.com/v1/products/123.json?login=XXXXXX&authtoken=XXXXX" -H "Content-Type:application/json"
// ```
//
// or delete it:
//
// ```text
// curl -X DELETE "https://api.jumpseller.com/v1/products/123.json?login=XXXXXX&authtoken=XXXXX" -H "Content-Type:application/json"
// ```
// <br/><br/>
// ***
//
// # PHP Examples
//
// Create a new Product (POST method)
//
// ```php
// $url = 'https://api.jumpseller.com/v1/products.json?login=XXXXX&authtoken=XXXXX;
// $ch = curl_init($url);
// curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
// curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));
//
// curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST"); //post method
// curl_setopt($ch, CURLOPT_POSTFIELDS, '{ "product" : {"name": "My updated Product!", "price": 99} }');
//
// $result = curl_exec($ch);
// print_r($result);
// curl_close($ch);
// ```
// <br/><br/>
// ***
//
// # Plain JSON only. No XML.
//
// * We only support JSON for data serialization.
// * Our node format has no root element.
// * We use snake_case to describe attribute keys (like "created_at").
// * All empty value are replaced with **null** strings.
// * All API URLs end in .json to indicate that they accept and return JSON.
// * POST and PUT methods require you to explicitly state the MIME type of your request's body content as **"application/json"**.
// <br/><br/>
// ***
//
// # Rate Limit
// You can perform a maximum of:
//
// + 240 (two hundred forty) requests per minute and
// + 8 (eight) requests per second
//
// If you exceed this limit, you'll get a 403 Forbidden (Rate Limit Exceeded) response for subsequent requests.
//
// The rate limits apply by IP address and by store. This means that multiple requests on different stores are not counted towards the same rate limit.
//
// This limits are necessary to ensure resources are correctly used. Your application should be aware of this limits and retry any unsuccessful request, check the following Ruby stub:
//
// ```ruby
// tries = 0; max_tries = 3;
// begin
//
//	HTTParty.send(method, uri) # perform an API call.
//	sleep 0.5
//	tries += 1
//
// rescue
//
//	unless tries >= max_tries
//	  sleep 1.0 # wait the necessary time before retrying the call again.
//	  retry
//	end
//
// end
// ```
//
// Finally, you can review the Response Headers of each request:
//
// ```text
// Jumpseller-PerMinuteRateLimit-Limit: 60
// Jumpseller-PerMinuteRateLimit-Remaining: 59 # requests available on the per-second interval
// Jumpseller-PerSecondRateLimit-Limit: 2
// Jumpseller-PerSecondRateLimit-Remaining: 1 # requests available on the per-second interval
// ```
//
// to better model your application requests intervals.
//
// In the event of getting your IP banned, the Response Header `Jumpseller-BannedByRateLimit-Reset` informs you the time when will your ban be reseted.
// <br/><br/>
// ***
//
// # Pagination
//
// By default we will return 50 objects (products, orders, etc) per page. There is a maximum of 100, using a query string `&limit=100`.
// If the result set gets paginated it is your responsibility to check the next page for more objects -- you do this by using query strings `&page=2`, `&page=3` and so on.
//
// ```text
// https://api.jumpseller.com/v1/products.json?login=XXXXXX&authtoken=XXXXX&page=3&limit=100
// ```
// <br/><br/>
// ***
//
// # More
// * [Jumpseller API wrapper](https://gitlab.com/jumpseller-api/ruby) provides a public Ruby abstraction over our API;
// * [Apps Page](/apps) showcases external integrations with Jumpseller done by technical experts;
// * [Imgbb API](https://api.imgbb.com/) provides an easy way to upload and temporaly host for images and files.
// <br/><br/>
// ***
// <br/><br/>
type SDK struct {
	Apps                     *apps
	Categories               *categories
	CheckoutCustomFields     *checkoutCustomFields
	Countries                *countries
	CustomFieldSelectOptions *customFieldSelectOptions
	CustomFields             *customFields
	CustomerAdditionalFields *customerAdditionalFields
	CustomerCategories       *customerCategories
	Customers                *customers
	Fulfillments             *fulfillments
	Hooks                    *hooks
	Orders                   *orders
	Pages                    *pages
	Partners                 *partners
	PaymentMethods           *paymentMethods
	ProductAttachments       *productAttachments
	ProductCustomFields      *productCustomFields
	ProductDigitalProducts   *productDigitalProducts
	ProductImages            *productImages
	ProductOptionValues      *productOptionValues
	ProductOptions           *productOptions
	ProductVariants          *productVariants
	Products                 *products
	Promotions               *promotions
	Regions                  *regions
	ShippingMethods          *shippingMethods
	Stores                   *stores
	Taxes                    *taxes

	// Non-idiomatic field names below are to namespace fields from the fields names above to avoid name conflicts
	_defaultClient  HTTPClient
	_securityClient HTTPClient

	_serverURL  string
	_language   string
	_sdkVersion string
	_genVersion string
}

type SDKOption func(*SDK)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *SDK) {
		sdk._serverURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *SDK) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk._serverURL = serverURL
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *SDK) {
		sdk._defaultClient = client
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *SDK {
	sdk := &SDK{
		_language:   "go",
		_sdkVersion: "0.0.1",
		_genVersion: "internal",
	}
	for _, opt := range opts {
		opt(sdk)
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk._defaultClient == nil {
		sdk._defaultClient = &http.Client{Timeout: 60 * time.Second}
	}
	if sdk._securityClient == nil {
		sdk._securityClient = sdk._defaultClient
	}

	if sdk._serverURL == "" {
		sdk._serverURL = ServerList[0]
	}

	sdk.Apps = newApps(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Categories = newCategories(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.CheckoutCustomFields = newCheckoutCustomFields(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Countries = newCountries(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.CustomFieldSelectOptions = newCustomFieldSelectOptions(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.CustomFields = newCustomFields(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.CustomerAdditionalFields = newCustomerAdditionalFields(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.CustomerCategories = newCustomerCategories(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Customers = newCustomers(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Fulfillments = newFulfillments(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Hooks = newHooks(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Orders = newOrders(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Pages = newPages(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Partners = newPartners(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.PaymentMethods = newPaymentMethods(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.ProductAttachments = newProductAttachments(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.ProductCustomFields = newProductCustomFields(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.ProductDigitalProducts = newProductDigitalProducts(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.ProductImages = newProductImages(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.ProductOptionValues = newProductOptionValues(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.ProductOptions = newProductOptions(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.ProductVariants = newProductVariants(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Products = newProducts(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Promotions = newPromotions(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Regions = newRegions(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.ShippingMethods = newShippingMethods(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Stores = newStores(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Taxes = newTaxes(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	return sdk
}
