/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class SKUBindings {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public SKUBindings(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Activate SKU Binding
     * Changes the status of an SKU Binding to active, setting `isActive` to `true`.
     * 
     *  &gt; \u2139 This path is an updated version of `/api/catalog_system/pvt/skuseller/activate/{sellerId}/{skuSellerId}`.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ActivateSKUBindingResponse activateSKUBinding(org.openapis.openapi.models.operations.ActivateSKUBindingRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ActivateSKUBindingPathParams.class, baseUrl, "/sku-binding/pvt/skuseller/activate/{sellerId}/{skuSellerId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ActivateSKUBindingResponse res = new org.openapis.openapi.models.operations.ActivateSKUBindingResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }

    /**
     * Bind a seller's SKU to another SKU
     * Associates a seller's SKU to another marketplace SKU.
     * 
     *  &gt; \u2139 This path is an updated version of `/api/catalog_system/pvt/skuseller/{sellerId}/{sellerSkuId}`.
     * 
     * ## Request body example
     * 
     * ```json
     * {
     *     "StockKeepingUnitId": 1
     * }
     * ```
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BindtoanotherskuResponse bindtoanothersku(org.openapis.openapi.models.operations.BindtoanotherskuRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BindtoanotherskuPathParams.class, baseUrl, "/sku-binding/pvt/skuseller/{sellerId}/{sellerSkuId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BindtoanotherskuResponse res = new org.openapis.openapi.models.operations.BindtoanotherskuResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Change Notification with SKU ID
     * The seller is responsible for suggesting new SKUs to be sold in the VTEX marketplace and also for informing the marketplace about changes in their SKUs that already exist in the marketplace. Both actions start with a catalog notification, which is made by this request.
     * 
     * With this notification, the seller is telling the marketplace that something has changed about a specific SKU, like price or inventory, or that this is a new SKU that the seller would like to offer to the marketplace.
     * 
     * The body of the request should be empty.
     * 
     *  &gt; \u2139 This path is an updated version of `/api/catalog_system/pvt/skuseller/changenotification/{skuId}`.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ChangeNotificationResponse changeNotification(org.openapis.openapi.models.operations.ChangeNotificationRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ChangeNotificationPathParams.class, baseUrl, "/sku-binding/pvt/skuseller/changenotification/{skuId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ChangeNotificationResponse res = new org.openapis.openapi.models.operations.ChangeNotificationResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 400 || httpRes.statusCode() == 403 || httpRes.statusCode() == 404 || httpRes.statusCode() == 429) {
        }

        return res;
    }

    /**
     * Deactivate SKU Binding
     * Changes the status of an SKU Binding to inactive, setting `isActive` to `false`.
     * 
     *   &gt; \u2139 This path is an updated version of `/api/catalog_system/pvt/skuseller/inactivate/{sellerId}/{skuSellerId}`.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeactivateSKUBindingResponse deactivateSKUBinding(org.openapis.openapi.models.operations.DeactivateSKUBindingRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeactivateSKUBindingPathParams.class, baseUrl, "/sku-binding/pvt/skuseller/inactivate/{sellerId}/{skuSellerId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeactivateSKUBindingResponse res = new org.openapis.openapi.models.operations.DeactivateSKUBindingResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }

    /**
     * Remove a seller's SKU Binding
     * Remove a seller's SKU binding, given the Seller ID and the SKU ID in the seller's store.
     * 
     *   &gt; \u2139 This path is an updated version of `/api/catalog_system/pvt/skuseller/remove/{sellerId}/{sellerSkuId}`.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSKUsellerassociationResponse deleteSKUsellerassociation(org.openapis.openapi.models.operations.DeleteSKUsellerassociationRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSKUsellerassociationPathParams.class, baseUrl, "/sku-binding/pvt/skuseller/remove/{sellerId}/{sellerSkuId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSKUsellerassociationResponse res = new org.openapis.openapi.models.operations.DeleteSKUsellerassociationResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }

    /**
     * Get details of a seller's SKU
     * Retrieves the details of a seller's SKU given a seller ID and the SKU ID in the seller's store. 
     * 
     *  &gt; \u2139 This path is an updated version of `/api/catalog_system/pvt/skuseller/{sellerId}/{sellerSkuId}`.
     * 
     * ## Response body example
     * 
     * ```json
     * {
     *     "IsPersisted": true,
     *     "IsRemoved": false,
     *     "SkuSellerId": 102,
     *     "UpdateDate": "2021-04-12T20:06:59.413Z",
     *     "RequestedUpdateDate": null,
     *     "SellerStockKeepingUnitId": "71",
     *     "SellerId": "vtxkfj7352",
     *     "StockKeepingUnitId": 1,
     *     "IsActive": true
     * }
     * ```
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSKUsellerResponse getSKUseller(org.openapis.openapi.models.operations.GetSKUsellerRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSKUsellerPathParams.class, baseUrl, "/sku-binding/pvt/skuseller/{sellerId}/{sellerSkuId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSKUsellerResponse res = new org.openapis.openapi.models.operations.GetSKUsellerResponse() {{
            getSKUseller200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetSKUseller200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetSKUseller200ApplicationJSON.class);
                res.getSKUseller200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get all SKU Bindings by Seller ID
     * Retrieves a list of SKU Bindings given a specific Seller ID. 
     * 
     *  &gt; \u2139 This path is an updated version of `/api/catalog_system/pvt/skuseller/list/bysellerId/{sellerId}`.
     * 
     * ## Response body example
     * 
     * ```json
     * [
     *     {
     *         "SellerStockKeepingUnitId": "24",
     *         "FreightCommissionPercentage": null,
     *         "ProductCommissionPercentage": null,
     *         "SellerId": "vtxkfj7352",
     *         "StockKeepingUnitId": 121,
     *         "IsActive": true
     *     }
     * ]
     * ```
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetallbySellerIdResponse getallbySellerId(org.openapis.openapi.models.operations.GetallbySellerIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetallbySellerIdPathParams.class, baseUrl, "/sku-binding/pvt/skuseller/list/bysellerId/{sellerId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetallbySellerIdResponse res = new org.openapis.openapi.models.operations.GetallbySellerIdResponse() {{
            getallbySellerId200ApplicationJSONObjects = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetallbySellerId200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetallbySellerId200ApplicationJSON[].class);
                res.getallbySellerId200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Get SKU Bindings by SKU ID
     * Retrieves SKU Bindings details by SKU ID.
     * 
     * ## Response body example
     * 
     * ```json
     * [
     *     {
     *         "Id": 48,
     *         "SellerId": "cosmetics1",
     *         "StockKeepingUnitId": 1,
     *         "SellerSkuId": "42",
     *         "IsActive": true,
     *         "LastUpdateDate": "2020-10-21T19:13:00.657",
     *         "SalesPolicy": 0
     *     }
     * ]
     * ```
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetbySkuIdResponse getbySkuId(org.openapis.openapi.models.operations.GetbySkuIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetbySkuIdPathParams.class, baseUrl, "/catalog/pvt/skusellers/{skuId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetbySkuIdResponse res = new org.openapis.openapi.models.operations.GetbySkuIdResponse() {{
            getbySkuId200ApplicationJSONObjects = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetbySkuId200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetbySkuId200ApplicationJSON[].class);
                res.getbySkuId200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Get SKU Bindings information
     * Retrieves SKU Bindings administrative information using optional query params `sellerId`, `skuId`, `sellerSkuId` and `IsActive` to filter results and `size` to restrict the amount of results. 
     * 
     *  &gt; \u2139 This path is an updated version of `/api/catalog_system/pvt/skuseller/admin`.
     * 
     * ## Response body example
     * 
     * ```json
     * [
     *     {
     *         "IsPersisted": true,
     *         "IsRemoved": false,
     *         "SkuSellerId": 1,
     *         "UpdateDate": "2019-12-04T01:56:00.673Z",
     *         "RequestedUpdateDate": null,
     *         "SellerStockKeepingUnitId": "12",
     *         "SellerId": "cosmetics1",
     *         "StockKeepingUnitId": 25,
     *         "IsActive": true
     *     }
     * ]
     * ```
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetpagedadminResponse getpagedadmin(org.openapis.openapi.models.operations.GetpagedadminRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/sku-binding/pvt/skuseller/admin");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetpagedadminQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetpagedadminResponse res = new org.openapis.openapi.models.operations.GetpagedadminResponse() {{
            getpagedadmin200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.Getpagedadmin200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.Getpagedadmin200ApplicationJSON.class);
                res.getpagedadmin200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get paged SKU Bindings by Seller ID
     * Retrieves a paged list of SKU Bindings given a specific Seller ID. 
     * 
     *  &gt; \u2139 This path is an updated version of `/api/catalog_system/pvt/skuseller/paged/sellerid/{sellerId}`.
     * 
     * ## Response body example
     * 
     * ```json
     * [
     *     {
     *         "SellerId": "vtxkfj7352",
     *         "StockKeepingUnitId": 121,
     *         "SellerStockKeepingUnitId": "24",
     *         "IsActive": true,
     *         "FreightCommissionPercentage": null,
     *         "ProductCommissionPercentage": null
     *     },
     *     {
     *         "SellerId": "vtxkfj7352",
     *         "StockKeepingUnitId": 14,
     *         "SellerStockKeepingUnitId": "60",
     *         "IsActive": true,
     *         "FreightCommissionPercentage": null,
     *         "ProductCommissionPercentage": null
     *     }
     * ]
     * ```
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetpagedbySellerIdResponse getpagedbySellerId(org.openapis.openapi.models.operations.GetpagedbySellerIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetpagedbySellerIdPathParams.class, baseUrl, "/sku-binding/pvt/skuseller/paged/sellerid/{sellerId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetpagedbySellerIdQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetpagedbySellerIdResponse res = new org.openapis.openapi.models.operations.GetpagedbySellerIdResponse() {{
            getpagedbySellerId200ApplicationJSONObjects = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetpagedbySellerId200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetpagedbySellerId200ApplicationJSON[].class);
                res.getpagedbySellerId200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Insert SKU Binding
     * Creates an SKU Binding, associating a seller's SKU with a marketplace's SKU.
     * 
     *  &gt; \u2139 This path is an updated version of `/api/catalog_system/pvt/skuseller/insertion`.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.InsertSKUBindingResponse insertSKUBinding(org.openapis.openapi.models.operations.InsertSKUBindingRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/sku-binding/pvt/skuseller/insertion");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.InsertSKUBindingResponse res = new org.openapis.openapi.models.operations.InsertSKUBindingResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 400 || httpRes.statusCode() == 409) {
        }

        return res;
    }

    /**
     * Change Notification with Seller ID and Seller SKU ID
     * The seller is responsible for suggesting new SKUs to be sold in the VTEX marketplace and also for informing the marketplace about changes in their SKUs that already exist in the marketplace. Both actions start with a catalog notification, which is made by this request.
     * 
     * With this notification, the seller is telling the marketplace that something has changed about a specific SKU, like price or inventory, or that this is a new SKU that the seller would like to offer to the marketplace.
     * 
     * There are two information expected by the marketplace in this request: the `sellerId`, which identifies the seller, and the `sellerSkuId`, which identifies the binding of the seller with the SKU.
     * 
     * Both information are passed through the request URL. The body of the request should be empty.
     *  &gt; \u2139 This path is an updated version of `/api/catalog_system/pvt/skuseller/changenotification/{sellerId}/{sellerSkuId}`.
     * 
     * ## Example
     * 
     * Let's say your seller has the ID `123` in the marketplace and you want to inform the marketplace that has been a change in the SKU with ID `700`.
     * 
     * In this case, you would have to replace the `sellerId` parameter with the value `123` and the `skuId` parameter with the value `700`. The URL of the request would be the following.
     * 
     * ```
     * https://{{accountName}}.vtexcommercestable.com.br/api/sku-binding/pvt/skuseller/changenotification/123/700
     * ```
     * 
     * ## Response codes
     * 
     * The following response codes are possible for this request.
     * * 200: the SKU whose ID was informed in the URL already exists in the marketplace and was found. The marketplace can now proceed with a fulfillment simulation in order to get updated information about this SKU's inventory and price.
     * * 403: Failure in the authentication.
     * * 404: the SKU was not found in the marketplace. The body of the response, in this case, should follow this format: "Seller StockKeepingUnit `{{skuId}}` not found for this seller id `{{sellerId}}`. This means that the seller can now proceed with sending an offer to the marketplace in order to suggest that this SKU is sold there.
     * * 429: Failure due to too many requests.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSkuBindingPvtSkusellerChangenotificationSellerIdSellerSkuIdResponse postSkuBindingPvtSkusellerChangenotificationSellerIdSellerSkuId(org.openapis.openapi.models.operations.PostSkuBindingPvtSkusellerChangenotificationSellerIdSellerSkuIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSkuBindingPvtSkusellerChangenotificationSellerIdSellerSkuIdPathParams.class, baseUrl, "/sku-binding/pvt/skuseller/changenotification/{sellerId}/{sellerSkuId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSkuBindingPvtSkusellerChangenotificationSellerIdSellerSkuIdResponse res = new org.openapis.openapi.models.operations.PostSkuBindingPvtSkusellerChangenotificationSellerIdSellerSkuIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 400 || httpRes.statusCode() == 403 || httpRes.statusCode() == 404 || httpRes.statusCode() == 429) {
        }

        return res;
    }
}