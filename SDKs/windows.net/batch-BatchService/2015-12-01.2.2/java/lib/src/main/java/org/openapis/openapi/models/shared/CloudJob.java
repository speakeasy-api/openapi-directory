/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * CloudJob - An Azure Batch job.
 */
public class CloudJob {
    /**
     * Gets or sets the list of common environment variable settings.  These environment variables are set for all tasks in the job (including the Job Manager, Job Preparation and Job Release tasks).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commonEnvironmentSettings")
    public EnvironmentSetting[] commonEnvironmentSettings;
    public CloudJob withCommonEnvironmentSettings(EnvironmentSetting[] commonEnvironmentSettings) {
        this.commonEnvironmentSettings = commonEnvironmentSettings;
        return this;
    }
    
    /**
     * Specifies the execution constraints for jobs created on a schedule.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("constraints")
    public JobConstraints constraints;
    public CloudJob withConstraints(JobConstraints constraints) {
        this.constraints = constraints;
        return this;
    }
    
    /**
     * Gets or sets the creation time of the job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("creationTime")
    public OffsetDateTime creationTime;
    public CloudJob withCreationTime(OffsetDateTime creationTime) {
        this.creationTime = creationTime;
        return this;
    }
    
    /**
     * Gets or sets the display name for the job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;
    public CloudJob withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * Gets or sets the ETag of the job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eTag")
    public String eTag;
    public CloudJob withETag(String eTag) {
        this.eTag = eTag;
        return this;
    }
    
    /**
     * Contains information about the execution of a job in the Azure Batch service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("executionInfo")
    public JobExecutionInformation executionInfo;
    public CloudJob withExecutionInfo(JobExecutionInformation executionInfo) {
        this.executionInfo = executionInfo;
        return this;
    }
    
    /**
     * Gets or sets a string that uniquely identifies the job within the account. The id can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. It is common to use a GUID for the id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public CloudJob withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Specifies details of a Job Manager task.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jobManagerTask")
    public JobManagerTask jobManagerTask;
    public CloudJob withJobManagerTask(JobManagerTask jobManagerTask) {
        this.jobManagerTask = jobManagerTask;
        return this;
    }
    
    /**
     * A Job Preparation task to run before any tasks of the job on any given compute node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jobPreparationTask")
    public JobPreparationTask jobPreparationTask;
    public CloudJob withJobPreparationTask(JobPreparationTask jobPreparationTask) {
        this.jobPreparationTask = jobPreparationTask;
        return this;
    }
    
    /**
     * A Job Release task to run on job completion on any compute node where the job has run.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jobReleaseTask")
    public JobReleaseTask jobReleaseTask;
    public CloudJob withJobReleaseTask(JobReleaseTask jobReleaseTask) {
        this.jobReleaseTask = jobReleaseTask;
        return this;
    }
    
    /**
     * Gets or sets the last modified time of the job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastModified")
    public OffsetDateTime lastModified;
    public CloudJob withLastModified(OffsetDateTime lastModified) {
        this.lastModified = lastModified;
        return this;
    }
    
    /**
     * Gets or sets a list of name-value pairs associated with the job as metadata.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    public MetadataItem[] metadata;
    public CloudJob withMetadata(MetadataItem[] metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * Specifies how a job should be assigned to a pool.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("poolInfo")
    public PoolInformation poolInfo;
    public CloudJob withPoolInfo(PoolInformation poolInfo) {
        this.poolInfo = poolInfo;
        return this;
    }
    
    /**
     * Gets or sets the previous state of the job. This property is not set if the job is in its initial Active state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("previousState")
    public CloudJobPreviousStateEnum previousState;
    public CloudJob withPreviousState(CloudJobPreviousStateEnum previousState) {
        this.previousState = previousState;
        return this;
    }
    
    /**
     * Gets or sets the time at which the job entered its previous state. This property is not set if the job is in its initial Active state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("previousStateTransitionTime")
    public OffsetDateTime previousStateTransitionTime;
    public CloudJob withPreviousStateTransitionTime(OffsetDateTime previousStateTransitionTime) {
        this.previousStateTransitionTime = previousStateTransitionTime;
        return this;
    }
    
    /**
     * Gets or sets the priority of the job. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priority")
    public Integer priority;
    public CloudJob withPriority(Integer priority) {
        this.priority = priority;
        return this;
    }
    
    /**
     * Gets or sets the current state of the job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public CloudJobStateEnum state;
    public CloudJob withState(CloudJobStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * Gets or sets the time at which the job entered its current state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("stateTransitionTime")
    public OffsetDateTime stateTransitionTime;
    public CloudJob withStateTransitionTime(OffsetDateTime stateTransitionTime) {
        this.stateTransitionTime = stateTransitionTime;
        return this;
    }
    
    /**
     * Resource usage statistics for a job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stats")
    public JobStatistics stats;
    public CloudJob withStats(JobStatistics stats) {
        this.stats = stats;
        return this;
    }
    
    /**
     * Gets or sets the URL of the job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;
    public CloudJob withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * Gets or sets the flag that determines if this job will use tasks with dependencies.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("usesTaskDependencies")
    public Boolean usesTaskDependencies;
    public CloudJob withUsesTaskDependencies(Boolean usesTaskDependencies) {
        this.usesTaskDependencies = usesTaskDependencies;
        return this;
    }
    
}
