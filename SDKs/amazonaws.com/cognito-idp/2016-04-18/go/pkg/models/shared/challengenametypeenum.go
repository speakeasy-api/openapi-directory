// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ChallengeNameTypeEnum string

const (
	ChallengeNameTypeEnumSmsMfa                 ChallengeNameTypeEnum = "SMS_MFA"
	ChallengeNameTypeEnumSoftwareTokenMfa       ChallengeNameTypeEnum = "SOFTWARE_TOKEN_MFA"
	ChallengeNameTypeEnumSelectMfaType          ChallengeNameTypeEnum = "SELECT_MFA_TYPE"
	ChallengeNameTypeEnumMfaSetup               ChallengeNameTypeEnum = "MFA_SETUP"
	ChallengeNameTypeEnumPasswordVerifier       ChallengeNameTypeEnum = "PASSWORD_VERIFIER"
	ChallengeNameTypeEnumCustomChallenge        ChallengeNameTypeEnum = "CUSTOM_CHALLENGE"
	ChallengeNameTypeEnumDeviceSrpAuth          ChallengeNameTypeEnum = "DEVICE_SRP_AUTH"
	ChallengeNameTypeEnumDevicePasswordVerifier ChallengeNameTypeEnum = "DEVICE_PASSWORD_VERIFIER"
	ChallengeNameTypeEnumAdminNoSrpAuth         ChallengeNameTypeEnum = "ADMIN_NO_SRP_AUTH"
	ChallengeNameTypeEnumNewPasswordRequired    ChallengeNameTypeEnum = "NEW_PASSWORD_REQUIRED"
)

func (e ChallengeNameTypeEnum) ToPointer() *ChallengeNameTypeEnum {
	return &e
}

func (e *ChallengeNameTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SMS_MFA":
		fallthrough
	case "SOFTWARE_TOKEN_MFA":
		fallthrough
	case "SELECT_MFA_TYPE":
		fallthrough
	case "MFA_SETUP":
		fallthrough
	case "PASSWORD_VERIFIER":
		fallthrough
	case "CUSTOM_CHALLENGE":
		fallthrough
	case "DEVICE_SRP_AUTH":
		fallthrough
	case "DEVICE_PASSWORD_VERIFIER":
		fallthrough
	case "ADMIN_NO_SRP_AUTH":
		fallthrough
	case "NEW_PASSWORD_REQUIRED":
		*e = ChallengeNameTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChallengeNameTypeEnum: %v", v)
	}
}
