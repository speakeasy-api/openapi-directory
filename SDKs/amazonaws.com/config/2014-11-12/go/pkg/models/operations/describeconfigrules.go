// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type DescribeConfigRulesQueryParams struct {
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=NextToken"`
}

// DescribeConfigRulesXAmzTargetEnum
type DescribeConfigRulesXAmzTargetEnum string

const (
	DescribeConfigRulesXAmzTargetEnumStarlingDoveServiceDescribeConfigRules DescribeConfigRulesXAmzTargetEnum = "StarlingDoveService.DescribeConfigRules"
)

func (e *DescribeConfigRulesXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "StarlingDoveService.DescribeConfigRules":
		*e = DescribeConfigRulesXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeConfigRulesXAmzTargetEnum: %s", s)
	}
}

type DescribeConfigRulesHeaders struct {
	XAmzAlgorithm     *string                           `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                           `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                           `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                           `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                           `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                           `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                           `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        DescribeConfigRulesXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DescribeConfigRulesRequest struct {
	QueryParams DescribeConfigRulesQueryParams
	Headers     DescribeConfigRulesHeaders
	Request     shared.DescribeConfigRulesRequest `request:"mediaType=application/json"`
}

type DescribeConfigRulesResponse struct {
	ContentType string
	// Success
	DescribeConfigRulesResponse *shared.DescribeConfigRulesResponse
	// InvalidNextTokenException
	InvalidNextTokenException interface{}
	// InvalidParameterValueException
	InvalidParameterValueException interface{}
	// NoSuchConfigRuleException
	NoSuchConfigRuleException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
