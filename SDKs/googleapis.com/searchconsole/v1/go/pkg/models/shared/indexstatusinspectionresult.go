// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// IndexStatusInspectionResultCrawledAsEnum - Primary crawler that was used by Google to crawl your site.
type IndexStatusInspectionResultCrawledAsEnum string

const (
	IndexStatusInspectionResultCrawledAsEnumCrawlingUserAgentUnspecified IndexStatusInspectionResultCrawledAsEnum = "CRAWLING_USER_AGENT_UNSPECIFIED"
	IndexStatusInspectionResultCrawledAsEnumDesktop                      IndexStatusInspectionResultCrawledAsEnum = "DESKTOP"
	IndexStatusInspectionResultCrawledAsEnumMobile                       IndexStatusInspectionResultCrawledAsEnum = "MOBILE"
)

func (e IndexStatusInspectionResultCrawledAsEnum) ToPointer() *IndexStatusInspectionResultCrawledAsEnum {
	return &e
}

func (e *IndexStatusInspectionResultCrawledAsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CRAWLING_USER_AGENT_UNSPECIFIED":
		fallthrough
	case "DESKTOP":
		fallthrough
	case "MOBILE":
		*e = IndexStatusInspectionResultCrawledAsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IndexStatusInspectionResultCrawledAsEnum: %v", v)
	}
}

// IndexStatusInspectionResultIndexingStateEnum - Whether or not the page blocks indexing through a noindex rule.
type IndexStatusInspectionResultIndexingStateEnum string

const (
	IndexStatusInspectionResultIndexingStateEnumIndexingStateUnspecified IndexStatusInspectionResultIndexingStateEnum = "INDEXING_STATE_UNSPECIFIED"
	IndexStatusInspectionResultIndexingStateEnumIndexingAllowed          IndexStatusInspectionResultIndexingStateEnum = "INDEXING_ALLOWED"
	IndexStatusInspectionResultIndexingStateEnumBlockedByMetaTag         IndexStatusInspectionResultIndexingStateEnum = "BLOCKED_BY_META_TAG"
	IndexStatusInspectionResultIndexingStateEnumBlockedByHTTPHeader      IndexStatusInspectionResultIndexingStateEnum = "BLOCKED_BY_HTTP_HEADER"
	IndexStatusInspectionResultIndexingStateEnumBlockedByRobotsTxt       IndexStatusInspectionResultIndexingStateEnum = "BLOCKED_BY_ROBOTS_TXT"
)

func (e IndexStatusInspectionResultIndexingStateEnum) ToPointer() *IndexStatusInspectionResultIndexingStateEnum {
	return &e
}

func (e *IndexStatusInspectionResultIndexingStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INDEXING_STATE_UNSPECIFIED":
		fallthrough
	case "INDEXING_ALLOWED":
		fallthrough
	case "BLOCKED_BY_META_TAG":
		fallthrough
	case "BLOCKED_BY_HTTP_HEADER":
		fallthrough
	case "BLOCKED_BY_ROBOTS_TXT":
		*e = IndexStatusInspectionResultIndexingStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IndexStatusInspectionResultIndexingStateEnum: %v", v)
	}
}

// IndexStatusInspectionResultPageFetchStateEnum - Whether or not Google could retrieve the page from your server. Equivalent to ["page fetch"](https://support.google.com/webmasters/answer/9012289#index_coverage) in the URL inspection report.
type IndexStatusInspectionResultPageFetchStateEnum string

const (
	IndexStatusInspectionResultPageFetchStateEnumPageFetchStateUnspecified IndexStatusInspectionResultPageFetchStateEnum = "PAGE_FETCH_STATE_UNSPECIFIED"
	IndexStatusInspectionResultPageFetchStateEnumSuccessful                IndexStatusInspectionResultPageFetchStateEnum = "SUCCESSFUL"
	IndexStatusInspectionResultPageFetchStateEnumSoft404                   IndexStatusInspectionResultPageFetchStateEnum = "SOFT_404"
	IndexStatusInspectionResultPageFetchStateEnumBlockedRobotsTxt          IndexStatusInspectionResultPageFetchStateEnum = "BLOCKED_ROBOTS_TXT"
	IndexStatusInspectionResultPageFetchStateEnumNotFound                  IndexStatusInspectionResultPageFetchStateEnum = "NOT_FOUND"
	IndexStatusInspectionResultPageFetchStateEnumAccessDenied              IndexStatusInspectionResultPageFetchStateEnum = "ACCESS_DENIED"
	IndexStatusInspectionResultPageFetchStateEnumServerError               IndexStatusInspectionResultPageFetchStateEnum = "SERVER_ERROR"
	IndexStatusInspectionResultPageFetchStateEnumRedirectError             IndexStatusInspectionResultPageFetchStateEnum = "REDIRECT_ERROR"
	IndexStatusInspectionResultPageFetchStateEnumAccessForbidden           IndexStatusInspectionResultPageFetchStateEnum = "ACCESS_FORBIDDEN"
	IndexStatusInspectionResultPageFetchStateEnumBlocked4Xx                IndexStatusInspectionResultPageFetchStateEnum = "BLOCKED_4XX"
	IndexStatusInspectionResultPageFetchStateEnumInternalCrawlError        IndexStatusInspectionResultPageFetchStateEnum = "INTERNAL_CRAWL_ERROR"
	IndexStatusInspectionResultPageFetchStateEnumInvalidURL                IndexStatusInspectionResultPageFetchStateEnum = "INVALID_URL"
)

func (e IndexStatusInspectionResultPageFetchStateEnum) ToPointer() *IndexStatusInspectionResultPageFetchStateEnum {
	return &e
}

func (e *IndexStatusInspectionResultPageFetchStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PAGE_FETCH_STATE_UNSPECIFIED":
		fallthrough
	case "SUCCESSFUL":
		fallthrough
	case "SOFT_404":
		fallthrough
	case "BLOCKED_ROBOTS_TXT":
		fallthrough
	case "NOT_FOUND":
		fallthrough
	case "ACCESS_DENIED":
		fallthrough
	case "SERVER_ERROR":
		fallthrough
	case "REDIRECT_ERROR":
		fallthrough
	case "ACCESS_FORBIDDEN":
		fallthrough
	case "BLOCKED_4XX":
		fallthrough
	case "INTERNAL_CRAWL_ERROR":
		fallthrough
	case "INVALID_URL":
		*e = IndexStatusInspectionResultPageFetchStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IndexStatusInspectionResultPageFetchStateEnum: %v", v)
	}
}

// IndexStatusInspectionResultRobotsTxtStateEnum - Whether or not the page is blocked to Google by a robots.txt rule.
type IndexStatusInspectionResultRobotsTxtStateEnum string

const (
	IndexStatusInspectionResultRobotsTxtStateEnumRobotsTxtStateUnspecified IndexStatusInspectionResultRobotsTxtStateEnum = "ROBOTS_TXT_STATE_UNSPECIFIED"
	IndexStatusInspectionResultRobotsTxtStateEnumAllowed                   IndexStatusInspectionResultRobotsTxtStateEnum = "ALLOWED"
	IndexStatusInspectionResultRobotsTxtStateEnumDisallowed                IndexStatusInspectionResultRobotsTxtStateEnum = "DISALLOWED"
)

func (e IndexStatusInspectionResultRobotsTxtStateEnum) ToPointer() *IndexStatusInspectionResultRobotsTxtStateEnum {
	return &e
}

func (e *IndexStatusInspectionResultRobotsTxtStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ROBOTS_TXT_STATE_UNSPECIFIED":
		fallthrough
	case "ALLOWED":
		fallthrough
	case "DISALLOWED":
		*e = IndexStatusInspectionResultRobotsTxtStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IndexStatusInspectionResultRobotsTxtStateEnum: %v", v)
	}
}

// IndexStatusInspectionResultVerdictEnum - High level verdict about whether the URL *is* indexed (indexed status), or *can be* indexed (live inspection).
type IndexStatusInspectionResultVerdictEnum string

const (
	IndexStatusInspectionResultVerdictEnumVerdictUnspecified IndexStatusInspectionResultVerdictEnum = "VERDICT_UNSPECIFIED"
	IndexStatusInspectionResultVerdictEnumPass               IndexStatusInspectionResultVerdictEnum = "PASS"
	IndexStatusInspectionResultVerdictEnumPartial            IndexStatusInspectionResultVerdictEnum = "PARTIAL"
	IndexStatusInspectionResultVerdictEnumFail               IndexStatusInspectionResultVerdictEnum = "FAIL"
	IndexStatusInspectionResultVerdictEnumNeutral            IndexStatusInspectionResultVerdictEnum = "NEUTRAL"
)

func (e IndexStatusInspectionResultVerdictEnum) ToPointer() *IndexStatusInspectionResultVerdictEnum {
	return &e
}

func (e *IndexStatusInspectionResultVerdictEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "VERDICT_UNSPECIFIED":
		fallthrough
	case "PASS":
		fallthrough
	case "PARTIAL":
		fallthrough
	case "FAIL":
		fallthrough
	case "NEUTRAL":
		*e = IndexStatusInspectionResultVerdictEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IndexStatusInspectionResultVerdictEnum: %v", v)
	}
}

// IndexStatusInspectionResult - Results of index status inspection for either the live page or the version in Google's index, depending on whether you requested a live inspection or not. For more information, see the [Index coverage report documentation](https://support.google.com/webmasters/answer/7440203).
type IndexStatusInspectionResult struct {
	// Could Google find and index the page. More details about page indexing appear in 'indexing_state'.
	CoverageState *string `json:"coverageState,omitempty"`
	// Primary crawler that was used by Google to crawl your site.
	CrawledAs *IndexStatusInspectionResultCrawledAsEnum `json:"crawledAs,omitempty"`
	// The URL of the page that Google selected as canonical. If the page was not indexed, this field is absent.
	GoogleCanonical *string `json:"googleCanonical,omitempty"`
	// Whether or not the page blocks indexing through a noindex rule.
	IndexingState *IndexStatusInspectionResultIndexingStateEnum `json:"indexingState,omitempty"`
	// Last time this URL was crawled by Google using the [primary crawler](https://support.google.com/webmasters/answer/7440203#primary_crawler). Absent if the URL was never crawled successfully.
	LastCrawlTime *string `json:"lastCrawlTime,omitempty"`
	// Whether or not Google could retrieve the page from your server. Equivalent to ["page fetch"](https://support.google.com/webmasters/answer/9012289#index_coverage) in the URL inspection report.
	PageFetchState *IndexStatusInspectionResultPageFetchStateEnum `json:"pageFetchState,omitempty"`
	// URLs that link to the inspected URL, directly and indirectly.
	ReferringUrls []string `json:"referringUrls,omitempty"`
	// Whether or not the page is blocked to Google by a robots.txt rule.
	RobotsTxtState *IndexStatusInspectionResultRobotsTxtStateEnum `json:"robotsTxtState,omitempty"`
	// Any sitemaps that this URL was listed in, as known by Google. Not guaranteed to be an exhaustive list, especially if Google did not discover this URL through a sitemap. Absent if no sitemaps were found.
	Sitemap []string `json:"sitemap,omitempty"`
	// The URL that your page or site [declares as canonical](https://developers.google.com/search/docs/advanced/crawling/consolidate-duplicate-urls?#define-canonical). If you did not declare a canonical URL, this field is absent.
	UserCanonical *string `json:"userCanonical,omitempty"`
	// High level verdict about whether the URL *is* indexed (indexed status), or *can be* indexed (live inspection).
	Verdict *IndexStatusInspectionResultVerdictEnum `json:"verdict,omitempty"`
}
