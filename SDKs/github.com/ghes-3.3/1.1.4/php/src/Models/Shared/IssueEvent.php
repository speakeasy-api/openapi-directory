<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * IssueEvent - Issue Event
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class IssueEvent
{
    /**
     * A GitHub user.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\NullableSimpleUser $actor
     */
	#[\JMS\Serializer\Annotation\SerializedName('actor')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\NullableSimpleUser')]
    public NullableSimpleUser $actor;
    
    /**
     * A GitHub user.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\NullableSimpleUser $assignee
     */
	#[\JMS\Serializer\Annotation\SerializedName('assignee')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\NullableSimpleUser')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?NullableSimpleUser $assignee = null;
    
    /**
     * A GitHub user.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\NullableSimpleUser $assigner
     */
	#[\JMS\Serializer\Annotation\SerializedName('assigner')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\NullableSimpleUser')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?NullableSimpleUser $assigner = null;
    
    /**
     * How the author is associated with the repository.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\AuthorAssociationEnum $authorAssociation
     */
	#[\JMS\Serializer\Annotation\SerializedName('author_association')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\AuthorAssociationEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?AuthorAssociationEnum $authorAssociation = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('commit_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $commitId;
    
	#[\JMS\Serializer\Annotation\SerializedName('commit_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $commitUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('created_at')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    public \DateTime $createdAt;
    
	#[\JMS\Serializer\Annotation\SerializedName('dismissed_review')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\IssueEventDismissedReview')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?IssueEventDismissedReview $dismissedReview = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('event')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $event;
    
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $id;
    
    /**
     * Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\NullableIssue $issue
     */
	#[\JMS\Serializer\Annotation\SerializedName('issue')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\NullableIssue')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?NullableIssue $issue = null;
    
    /**
     * Issue Event Label
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\IssueEventLabel $label
     */
	#[\JMS\Serializer\Annotation\SerializedName('label')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\IssueEventLabel')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?IssueEventLabel $label = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('lock_reason')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $lockReason = null;
    
    /**
     * Issue Event Milestone
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\IssueEventMilestone $milestone
     */
	#[\JMS\Serializer\Annotation\SerializedName('milestone')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\IssueEventMilestone')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?IssueEventMilestone $milestone = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('node_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $nodeId;
    
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\NullableIntegration $performedViaGithubApp
     */
	#[\JMS\Serializer\Annotation\SerializedName('performed_via_github_app')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\NullableIntegration')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?NullableIntegration $performedViaGithubApp = null;
    
    /**
     * Issue Event Project Card
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\IssueEventProjectCard $projectCard
     */
	#[\JMS\Serializer\Annotation\SerializedName('project_card')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\IssueEventProjectCard')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?IssueEventProjectCard $projectCard = null;
    
    /**
     * Issue Event Rename
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\IssueEventRename $rename
     */
	#[\JMS\Serializer\Annotation\SerializedName('rename')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\IssueEventRename')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?IssueEventRename $rename = null;
    
    /**
     * A GitHub user.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\NullableSimpleUser $requestedReviewer
     */
	#[\JMS\Serializer\Annotation\SerializedName('requested_reviewer')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\NullableSimpleUser')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?NullableSimpleUser $requestedReviewer = null;
    
    /**
     * Groups of organization members that gives permissions on specified repositories.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Team $requestedTeam
     */
	#[\JMS\Serializer\Annotation\SerializedName('requested_team')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Team')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Team $requestedTeam = null;
    
    /**
     * A GitHub user.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\NullableSimpleUser $reviewRequester
     */
	#[\JMS\Serializer\Annotation\SerializedName('review_requester')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\NullableSimpleUser')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?NullableSimpleUser $reviewRequester = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $url;
    
	public function __construct()
	{
		$this->actor = new \OpenAPI\OpenAPI\Models\Shared\NullableSimpleUser();
		$this->assignee = null;
		$this->assigner = null;
		$this->authorAssociation = null;
		$this->commitId = "";
		$this->commitUrl = "";
		$this->createdAt = new \DateTime();
		$this->dismissedReview = null;
		$this->event = "";
		$this->id = 0;
		$this->issue = null;
		$this->label = null;
		$this->lockReason = null;
		$this->milestone = null;
		$this->nodeId = "";
		$this->performedViaGithubApp = null;
		$this->projectCard = null;
		$this->rename = null;
		$this->requestedReviewer = null;
		$this->requestedTeam = null;
		$this->reviewRequester = null;
		$this->url = "";
	}
}
