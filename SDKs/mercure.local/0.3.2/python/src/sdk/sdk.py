"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

SERVERS = [
    "http://mercure.local",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""[Mercure](https://mercure.rocks) is a protocol allowing to push data updates to web browsers and other HTTP clients in a convenient, fast, reliable and battery-efficient way.
    https://mercure.rocks/spec - The Mercure protocol specification
    """

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 security: shared.Security = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = utils.configure_security_client(self._client, security)
        

        
    
    
    def get_well_known_mercure(self, request: operations.GetWellKnownMercureRequest) -> operations.GetWellKnownMercureResponse:
        r"""Subscribe to updates
        https://mercure.rocks/spec#subscription - Subscription specification
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/.well-known/mercure'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetWellKnownMercureRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWellKnownMercureResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_well_known_mercure_subscriptions(self) -> operations.GetWellKnownMercureSubscriptionsResponse:
        r"""Active subscriptions
        https://mercure.rocks/spec#subscription-api - Subscription API
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/.well-known/mercure/subscriptions'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWellKnownMercureSubscriptionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/ld+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Subscriptions])
                res.subscriptions = out
        elif http_res.status_code == 401:
            pass

        return res

    def get_well_known_mercure_subscriptions_topic_(self, request: operations.GetWellKnownMercureSubscriptionsTopicRequest) -> operations.GetWellKnownMercureSubscriptionsTopicResponse:
        r"""Active subscriptions for the given topic
        https://mercure.rocks/spec#subscription-api - Subscription API
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetWellKnownMercureSubscriptionsTopicRequest, base_url, '/.well-known/mercure/subscriptions/{topic}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWellKnownMercureSubscriptionsTopicResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/ld+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Subscriptions])
                res.subscriptions = out
        elif http_res.status_code == 401:
            pass

        return res

    def get_well_known_mercure_subscriptions_topic_subscriber_(self, request: operations.GetWellKnownMercureSubscriptionsTopicSubscriberRequest) -> operations.GetWellKnownMercureSubscriptionsTopicSubscriberResponse:
        r"""Active subscription for the given topic and subscriber
        https://mercure.rocks/spec#active-subscriptions - Subscription API
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetWellKnownMercureSubscriptionsTopicSubscriberRequest, base_url, '/.well-known/mercure/subscriptions/{topic}/{subscriber}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWellKnownMercureSubscriptionsTopicSubscriberResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/ld+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Subscriptions])
                res.subscriptions = out
        elif http_res.status_code == 401:
            pass

        return res

    def post_well_known_mercure(self, request: operations.PostWellKnownMercureRequestBody) -> operations.PostWellKnownMercureResponse:
        r"""Publish an update
        https://mercure.rocks/spec#publication - Publishing specification
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/.well-known/mercure'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostWellKnownMercureResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    