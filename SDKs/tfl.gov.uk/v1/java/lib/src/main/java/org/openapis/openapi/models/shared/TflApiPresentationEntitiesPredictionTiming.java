/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class TflApiPresentationEntitiesPredictionTiming {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("countdownServerAdjustment")
    public String countdownServerAdjustment;
    public TflApiPresentationEntitiesPredictionTiming withCountdownServerAdjustment(String countdownServerAdjustment) {
        this.countdownServerAdjustment = countdownServerAdjustment;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("insert")
    public OffsetDateTime insert;
    public TflApiPresentationEntitiesPredictionTiming withInsert(OffsetDateTime insert) {
        this.insert = insert;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("read")
    public OffsetDateTime read;
    public TflApiPresentationEntitiesPredictionTiming withRead(OffsetDateTime read) {
        this.read = read;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("received")
    public OffsetDateTime received;
    public TflApiPresentationEntitiesPredictionTiming withReceived(OffsetDateTime received) {
        this.received = received;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("sent")
    public OffsetDateTime sent;
    public TflApiPresentationEntitiesPredictionTiming withSent(OffsetDateTime sent) {
        this.sent = sent;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("source")
    public OffsetDateTime source;
    public TflApiPresentationEntitiesPredictionTiming withSource(OffsetDateTime source) {
        this.source = source;
        return this;
    }
    
}
