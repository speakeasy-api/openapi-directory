"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ClusterAPI:
    r"""### Introduction
    
    ![Cluster Example](./img/cluster-solution.jpg)
    
    It solves the “capacity clustering problem” by assigning a set of customers to a given number of distinct groups (called clusters).
    The API “clusters” by minimizing the total distance from each individual customer to its designated group median.
    It can also consider minimum and maximum capacity restrictions for each group.
    
    Clustering can be used in many practical applications.
    For example, it can help to plan territories, i.e. territory optimization for field teams with large territories for field workers,
    or to solve large vehicle routing problems (VRP).
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def async_clustering_problem(self, request: shared.ClusterRequest) -> operations.AsyncClusteringProblemResponse:
        r"""Batch Cluster Endpoint
        Prefer the [synchronous endpoint](#operation/solveClusteringProblem) and use this Batch Cluster endpoint for
        long running problems only. The work flow is asynchronous:
        
        - send a POST request towards `https://graphhopper.com/api/1/cluster/calculate?key=<your_key>` and fetch the job_id.
        - poll the solution every 500ms until it gives `status=finished`. Do this with a GET request
          towards `https://graphhopper.com/api/1/cluster/solution/<job_id>?key=<your_key>`.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/cluster/calculate'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AsyncClusteringProblemResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.JobID])
                res.job_id = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BadRequest])
                res.bad_request = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InternalErrorMessage])
                res.internal_error_message = out

        return res

    def get_cluster_solution(self, request: operations.GetClusterSolutionRequest) -> operations.GetClusterSolutionResponse:
        r"""GET Batch Solution Endpoint
        This endpoint returns the solution of the clustering problems submitted to the [Batch Cluster endpoint](#operation/asyncClusteringProblem).
        You can fetch it with the job_id, you have been sent.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetClusterSolutionRequest, base_url, '/cluster/solution/{jobId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetClusterSolutionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ClusterResponse])
                res.cluster_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BadRequest])
                res.bad_request = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetClusterSolution404ApplicationJSON])
                res.get_cluster_solution_404_application_json_object = out
        elif http_res.status_code == 500:
            pass

        return res

    def solve_clustering_problem(self, request: shared.ClusterRequest) -> operations.SolveClusteringProblemResponse:
        r"""POST Cluster Endpoint
        The Cluster endpoint is used with a POST request towards
        `https://graphhopper.com/api/1/cluster?key=<your_key>`. The solution will be provided in the JSON response.
        Please note that for problems that take longer than 10 seconds a bad request error is returned.
        In this case please use the asynchronous [Batch Cluster Endpoint](#operation/asyncClusteringProblem) instead.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/cluster'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SolveClusteringProblemResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ClusterResponse])
                res.cluster_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BadRequest])
                res.bad_request = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InternalErrorMessage])
                res.internal_error_message = out

        return res

    