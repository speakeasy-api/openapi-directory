// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ErcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type ErcerRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// Registration No
	Registration string `json:"Registration"`
}

// ErcerRequestBodyFormatEnum - The format of the certificate in response.
type ErcerRequestBodyFormatEnum string

const (
	ErcerRequestBodyFormatEnumPdf ErcerRequestBodyFormatEnum = "pdf"
)

func (e *ErcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = ErcerRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ErcerRequestBodyFormatEnum: %s", s)
	}
}

// ErcerRequestBody - Request format
type ErcerRequestBody struct {
	CertificateParameters *ErcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format ErcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Ercer504ApplicationJSONErrorEnum string

const (
	Ercer504ApplicationJSONErrorEnumGatewayTimeout Ercer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Ercer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Ercer504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ercer504ApplicationJSONErrorEnum: %s", s)
	}
}

type Ercer504ApplicationJSONErrorDescriptionEnum string

const (
	Ercer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Ercer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Ercer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Ercer504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ercer504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Ercer504ApplicationJSON - Gateway timeout
type Ercer504ApplicationJSON struct {
	Error            *Ercer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ercer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ercer503ApplicationJSONErrorEnum string

const (
	Ercer503ApplicationJSONErrorEnumServiceUnavailable Ercer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Ercer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Ercer503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ercer503ApplicationJSONErrorEnum: %s", s)
	}
}

type Ercer503ApplicationJSONErrorDescriptionEnum string

const (
	Ercer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Ercer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Ercer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Ercer503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ercer503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Ercer503ApplicationJSON - Service unavailable
type Ercer503ApplicationJSON struct {
	Error            *Ercer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ercer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ercer502ApplicationJSONErrorEnum string

const (
	Ercer502ApplicationJSONErrorEnumBadGatewy Ercer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Ercer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Ercer502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ercer502ApplicationJSONErrorEnum: %s", s)
	}
}

type Ercer502ApplicationJSONErrorDescriptionEnum string

const (
	Ercer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Ercer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Ercer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Ercer502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ercer502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Ercer502ApplicationJSON - Bad gateway
type Ercer502ApplicationJSON struct {
	Error            *Ercer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ercer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ercer500ApplicationJSONErrorEnum string

const (
	Ercer500ApplicationJSONErrorEnumInternalServerError Ercer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Ercer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Ercer500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ercer500ApplicationJSONErrorEnum: %s", s)
	}
}

type Ercer500ApplicationJSONErrorDescriptionEnum string

const (
	Ercer500ApplicationJSONErrorDescriptionEnumInternalServerError Ercer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Ercer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Ercer500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ercer500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Ercer500ApplicationJSON - Internal server error
type Ercer500ApplicationJSON struct {
	Error            *Ercer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ercer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ercer404ApplicationJSONErrorEnum string

const (
	Ercer404ApplicationJSONErrorEnumRecordNotFound Ercer404ApplicationJSONErrorEnum = "record_not_found"
	Ercer404ApplicationJSONErrorEnumURLNotFound    Ercer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Ercer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Ercer404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ercer404ApplicationJSONErrorEnum: %s", s)
	}
}

type Ercer404ApplicationJSONErrorDescriptionEnum string

const (
	Ercer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Ercer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Ercer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Ercer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Ercer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Ercer404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ercer404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Ercer404ApplicationJSON - No record found
type Ercer404ApplicationJSON struct {
	Error            *Ercer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ercer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ercer401ApplicationJSONErrorEnum string

const (
	Ercer401ApplicationJSONErrorEnumInvalidAuthentication Ercer401ApplicationJSONErrorEnum = "invalid_authentication"
	Ercer401ApplicationJSONErrorEnumInvalidAuthorization  Ercer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Ercer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Ercer401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ercer401ApplicationJSONErrorEnum: %s", s)
	}
}

type Ercer401ApplicationJSONErrorDescriptionEnum string

const (
	Ercer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Ercer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Ercer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Ercer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Ercer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Ercer401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ercer401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Ercer401ApplicationJSON - Unauthorized access
type Ercer401ApplicationJSON struct {
	Error            *Ercer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ercer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ercer400ApplicationJSONErrorEnum string

const (
	Ercer400ApplicationJSONErrorEnumMissingParameter Ercer400ApplicationJSONErrorEnum = "missing_parameter"
	Ercer400ApplicationJSONErrorEnumInvalidParameter Ercer400ApplicationJSONErrorEnum = "invalid_parameter"
	Ercer400ApplicationJSONErrorEnumInvalidFormat    Ercer400ApplicationJSONErrorEnum = "invalid_format"
	Ercer400ApplicationJSONErrorEnumInvalidTxnid     Ercer400ApplicationJSONErrorEnum = "invalid_txnid"
	Ercer400ApplicationJSONErrorEnumInvalidConsentid Ercer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Ercer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Ercer400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ercer400ApplicationJSONErrorEnum: %s", s)
	}
}

type Ercer400ApplicationJSONErrorDescriptionEnum string

const (
	Ercer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Ercer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Ercer400ApplicationJSONErrorDescriptionEnumBadRequest                              Ercer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Ercer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Ercer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Ercer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Ercer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Ercer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Ercer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Ercer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Ercer400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ercer400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Ercer400ApplicationJSON - Bad request
type Ercer400ApplicationJSON struct {
	Error            *Ercer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ercer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type ErcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Ercer400ApplicationJSONObject *Ercer400ApplicationJSON
	// Unauthorized access
	Ercer401ApplicationJSONObject *Ercer401ApplicationJSON
	// No record found
	Ercer404ApplicationJSONObject *Ercer404ApplicationJSON
	// Internal server error
	Ercer500ApplicationJSONObject *Ercer500ApplicationJSON
	// Bad gateway
	Ercer502ApplicationJSONObject *Ercer502ApplicationJSON
	// Service unavailable
	Ercer503ApplicationJSONObject *Ercer503ApplicationJSON
	// Gateway timeout
	Ercer504ApplicationJSONObject *Ercer504ApplicationJSON
}
