/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { DatasourcePackageIngestStateEnum } from "./datasourcepackageingeststateenum";
import { TimestampForCollection } from "./timestampforcollection";
import { Expose, Transform } from "class-transformer";

/**
 * Details about the data source packages ingested by your behavior graph.
 */
export class DatasourcePackageIngestDetail extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "DatasourcePackageIngestState" })
  datasourcePackageIngestState?: DatasourcePackageIngestStateEnum;

  @SpeakeasyMetadata({ elemType: TimestampForCollection })
  @Expose({ name: "LastIngestStateChange" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, TimestampForCollection> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], TimestampForCollection);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  lastIngestStateChange?: Record<string, TimestampForCollection>;
}
