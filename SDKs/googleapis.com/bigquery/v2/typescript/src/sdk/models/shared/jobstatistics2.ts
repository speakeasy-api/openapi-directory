/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { BiEngineStatistics } from "./bienginestatistics";
import { BigQueryModelTraining } from "./bigquerymodeltraining";
import { DatasetReference } from "./datasetreference";
import { DmlStatistics } from "./dmlstatistics";
import { ExplainQueryStage } from "./explainquerystage";
import { MlStatistics } from "./mlstatistics";
import { QueryParameter } from "./queryparameter";
import { QueryTimelineSample } from "./querytimelinesample";
import { RoutineReference } from "./routinereference";
import { RowAccessPolicyReference } from "./rowaccesspolicyreference";
import { SearchStatistics } from "./searchstatistics";
import { SparkStatistics } from "./sparkstatistics";
import { TableReference } from "./tablereference";
import { TableSchema } from "./tableschema";
import { Expose, Type } from "class-transformer";

export class JobStatistics2ReservationUsage extends SpeakeasyBase {
  /**
   * [Output only] Reservation name or "unreserved" for on-demand resources usage.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * [Output only] Slot-milliseconds the job spent in the given reservation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "slotMs" })
  slotMs?: string;
}

export class JobStatistics2 extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "biEngineStatistics" })
  @Type(() => BiEngineStatistics)
  biEngineStatistics?: BiEngineStatistics;

  /**
   * [Output only] Billing tier for the job.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "billingTier" })
  billingTier?: number;

  /**
   * [Output only] Whether the query result was fetched from the query cache.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cacheHit" })
  cacheHit?: boolean;

  /**
   * [Output only] [Preview] The number of row access policies affected by a DDL statement. Present only for DROP ALL ROW ACCESS POLICIES queries.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ddlAffectedRowAccessPolicyCount" })
  ddlAffectedRowAccessPolicyCount?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ddlDestinationTable" })
  @Type(() => TableReference)
  ddlDestinationTable?: TableReference;

  /**
   * The DDL operation performed, possibly dependent on the pre-existence of the DDL target. Possible values (new values might be added in the future): "CREATE": The query created the DDL target. "SKIP": No-op. Example cases: the query is CREATE TABLE IF NOT EXISTS while the table already exists, or the query is DROP TABLE IF EXISTS while the table does not exist. "REPLACE": The query replaced the DDL target. Example case: the query is CREATE OR REPLACE TABLE, and the table already exists. "DROP": The query deleted the DDL target.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ddlOperationPerformed" })
  ddlOperationPerformed?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ddlTargetDataset" })
  @Type(() => DatasetReference)
  ddlTargetDataset?: DatasetReference;

  @SpeakeasyMetadata()
  @Expose({ name: "ddlTargetRoutine" })
  @Type(() => RoutineReference)
  ddlTargetRoutine?: RoutineReference;

  @SpeakeasyMetadata()
  @Expose({ name: "ddlTargetRowAccessPolicy" })
  @Type(() => RowAccessPolicyReference)
  ddlTargetRowAccessPolicy?: RowAccessPolicyReference;

  @SpeakeasyMetadata()
  @Expose({ name: "ddlTargetTable" })
  @Type(() => TableReference)
  ddlTargetTable?: TableReference;

  @SpeakeasyMetadata()
  @Expose({ name: "dmlStats" })
  @Type(() => DmlStatistics)
  dmlStats?: DmlStatistics;

  /**
   * [Output only] The original estimate of bytes processed for the job.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "estimatedBytesProcessed" })
  estimatedBytesProcessed?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "mlStatistics" })
  @Type(() => MlStatistics)
  mlStatistics?: MlStatistics;

  @SpeakeasyMetadata()
  @Expose({ name: "modelTraining" })
  @Type(() => BigQueryModelTraining)
  modelTraining?: BigQueryModelTraining;

  /**
   * [Output only, Beta] Deprecated; do not use.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "modelTrainingCurrentIteration" })
  modelTrainingCurrentIteration?: number;

  /**
   * [Output only, Beta] Deprecated; do not use.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "modelTrainingExpectedTotalIteration" })
  modelTrainingExpectedTotalIteration?: string;

  /**
   * [Output only] The number of rows affected by a DML statement. Present only for DML statements INSERT, UPDATE or DELETE.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "numDmlAffectedRows" })
  numDmlAffectedRows?: string;

  /**
   * [Output only] Describes execution plan for the query.
   */
  @SpeakeasyMetadata({ elemType: ExplainQueryStage })
  @Expose({ name: "queryPlan" })
  @Type(() => ExplainQueryStage)
  queryPlan?: ExplainQueryStage[];

  /**
   * [Output only] Referenced routines (persistent user-defined functions and stored procedures) for the job.
   */
  @SpeakeasyMetadata({ elemType: RoutineReference })
  @Expose({ name: "referencedRoutines" })
  @Type(() => RoutineReference)
  referencedRoutines?: RoutineReference[];

  /**
   * [Output only] Referenced tables for the job. Queries that reference more than 50 tables will not have a complete list.
   */
  @SpeakeasyMetadata({ elemType: TableReference })
  @Expose({ name: "referencedTables" })
  @Type(() => TableReference)
  referencedTables?: TableReference[];

  /**
   * [Output only] Job resource usage breakdown by reservation.
   */
  @SpeakeasyMetadata({ elemType: JobStatistics2ReservationUsage })
  @Expose({ name: "reservationUsage" })
  @Type(() => JobStatistics2ReservationUsage)
  reservationUsage?: JobStatistics2ReservationUsage[];

  @SpeakeasyMetadata()
  @Expose({ name: "schema" })
  @Type(() => TableSchema)
  schema?: TableSchema;

  @SpeakeasyMetadata()
  @Expose({ name: "searchStatistics" })
  @Type(() => SearchStatistics)
  searchStatistics?: SearchStatistics;

  @SpeakeasyMetadata()
  @Expose({ name: "sparkStatistics" })
  @Type(() => SparkStatistics)
  sparkStatistics?: SparkStatistics;

  /**
   * The type of query statement, if valid. Possible values (new values might be added in the future): "SELECT": SELECT query. "INSERT": INSERT query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "UPDATE": UPDATE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "DELETE": DELETE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "MERGE": MERGE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "ALTER_TABLE": ALTER TABLE query. "ALTER_VIEW": ALTER VIEW query. "ASSERT": ASSERT condition AS 'description'. "CREATE_FUNCTION": CREATE FUNCTION query. "CREATE_MODEL": CREATE [OR REPLACE] MODEL ... AS SELECT ... . "CREATE_PROCEDURE": CREATE PROCEDURE query. "CREATE_TABLE": CREATE [OR REPLACE] TABLE without AS SELECT. "CREATE_TABLE_AS_SELECT": CREATE [OR REPLACE] TABLE ... AS SELECT ... . "CREATE_VIEW": CREATE [OR REPLACE] VIEW ... AS SELECT ... . "DROP_FUNCTION" : DROP FUNCTION query. "DROP_PROCEDURE": DROP PROCEDURE query. "DROP_TABLE": DROP TABLE query. "DROP_VIEW": DROP VIEW query.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "statementType" })
  statementType?: string;

  /**
   * [Output only] [Beta] Describes a timeline of job execution.
   */
  @SpeakeasyMetadata({ elemType: QueryTimelineSample })
  @Expose({ name: "timeline" })
  @Type(() => QueryTimelineSample)
  timeline?: QueryTimelineSample[];

  /**
   * [Output only] Total bytes billed for the job.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalBytesBilled" })
  totalBytesBilled?: string;

  /**
   * [Output only] Total bytes processed for the job.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalBytesProcessed" })
  totalBytesProcessed?: string;

  /**
   * [Output only] For dry-run jobs, totalBytesProcessed is an estimate and this field specifies the accuracy of the estimate. Possible values can be: UNKNOWN: accuracy of the estimate is unknown. PRECISE: estimate is precise. LOWER_BOUND: estimate is lower bound of what the query would cost. UPPER_BOUND: estimate is upper bound of what the query would cost.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalBytesProcessedAccuracy" })
  totalBytesProcessedAccuracy?: string;

  /**
   * [Output only] Total number of partitions processed from all partitioned tables referenced in the job.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalPartitionsProcessed" })
  totalPartitionsProcessed?: string;

  /**
   * [Output only] Slot-milliseconds for the job.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalSlotMs" })
  totalSlotMs?: string;

  /**
   * [Output-only] Total bytes transferred for cross-cloud queries such as Cross Cloud Transfer and CREATE TABLE AS SELECT (CTAS).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transferredBytes" })
  transferredBytes?: string;

  /**
   * Standard SQL only: list of undeclared query parameters detected during a dry run validation.
   */
  @SpeakeasyMetadata({ elemType: QueryParameter })
  @Expose({ name: "undeclaredQueryParameters" })
  @Type(() => QueryParameter)
  undeclaredQueryParameters?: QueryParameter[];
}
