<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Instances 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Adds an access config to an instance's network interface.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesAddAccessConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesAddAccessConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesAddAccessConfigResponse
     */
	public function computeInstancesAddAccessConfig(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesAddAccessConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesAddAccessConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesAddAccessConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{instance}/addAccessConfig', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesAddAccessConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "accessConfig", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesAddAccessConfigRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesAddAccessConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Adds existing resource policies to an instance. You can only add one policy right now which will be applied to this instance for scheduling live migrations.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesAddResourcePoliciesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesAddResourcePoliciesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesAddResourcePoliciesResponse
     */
	public function computeInstancesAddResourcePolicies(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesAddResourcePoliciesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesAddResourcePoliciesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesAddResourcePoliciesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{instance}/addResourcePolicies', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesAddResourcePoliciesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instancesAddResourcePoliciesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesAddResourcePoliciesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesAddResourcePoliciesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves an aggregated list of all of the instances in your project across all regions and zones. The performance of this method degrades when a filter is specified on a project that has a very large number of instances.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesAggregatedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesAggregatedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesAggregatedListResponse
     */
	public function computeInstancesAggregatedList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesAggregatedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesAggregatedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesAggregatedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/aggregated/instances', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesAggregatedListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesAggregatedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesAggregatedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->instanceAggregatedList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InstanceAggregatedList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Attaches an existing Disk resource to an instance. You must first create the disk before you can attach it. It is not possible to create and attach a disk at the same time. For more information, read Adding a persistent disk to your instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesAttachDiskRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesAttachDiskSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesAttachDiskResponse
     */
	public function computeInstancesAttachDisk(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesAttachDiskRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesAttachDiskSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesAttachDiskResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{instance}/attachDisk', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesAttachDiskRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "attachedDisk", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesAttachDiskRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesAttachDiskResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates multiple instances. Count specifies the number of instances to create. For more information, see About bulk creation of VMs.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesBulkInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesBulkInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesBulkInsertResponse
     */
	public function computeInstancesBulkInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesBulkInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesBulkInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesBulkInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/bulkInsert', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesBulkInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "bulkInsertInstanceResource", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesBulkInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesBulkInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified Instance resource. For more information, see Deleting an instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesDeleteResponse
     */
	public function computeInstancesDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{instance}', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes an access config from an instance's network interface.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesDeleteAccessConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesDeleteAccessConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesDeleteAccessConfigResponse
     */
	public function computeInstancesDeleteAccessConfig(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesDeleteAccessConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesDeleteAccessConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesDeleteAccessConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{instance}/deleteAccessConfig', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesDeleteAccessConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesDeleteAccessConfigRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesDeleteAccessConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Detaches a disk from an instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesDetachDiskRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesDetachDiskSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesDetachDiskResponse
     */
	public function computeInstancesDetachDisk(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesDetachDiskRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesDetachDiskSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesDetachDiskResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{instance}/detachDisk', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesDetachDiskRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesDetachDiskRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesDetachDiskResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified Instance resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetResponse
     */
	public function computeInstancesGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{instance}', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->instance = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Instance', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns effective firewalls applied to an interface of the instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetEffectiveFirewallsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetEffectiveFirewallsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetEffectiveFirewallsResponse
     */
	public function computeInstancesGetEffectiveFirewalls(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetEffectiveFirewallsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetEffectiveFirewallsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetEffectiveFirewallsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{instance}/getEffectiveFirewalls', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetEffectiveFirewallsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetEffectiveFirewallsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetEffectiveFirewallsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->instancesGetEffectiveFirewallsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InstancesGetEffectiveFirewallsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified guest attributes entry.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetGuestAttributesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetGuestAttributesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetGuestAttributesResponse
     */
	public function computeInstancesGetGuestAttributes(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetGuestAttributesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetGuestAttributesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetGuestAttributesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{instance}/getGuestAttributes', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetGuestAttributesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetGuestAttributesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetGuestAttributesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->guestAttributes = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GuestAttributes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetIamPolicyResponse
     */
	public function computeInstancesGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{resource}/getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the screenshot from the specified instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetScreenshotRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetScreenshotSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetScreenshotResponse
     */
	public function computeInstancesGetScreenshot(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetScreenshotRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetScreenshotSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetScreenshotResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{instance}/screenshot', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetScreenshotRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetScreenshotRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetScreenshotResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->screenshot = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Screenshot', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the last 1 MB of serial port output from the specified instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetSerialPortOutputRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetSerialPortOutputSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetSerialPortOutputResponse
     */
	public function computeInstancesGetSerialPortOutput(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetSerialPortOutputRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetSerialPortOutputSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetSerialPortOutputResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{instance}/serialPort', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetSerialPortOutputRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetSerialPortOutputRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetSerialPortOutputResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serialPortOutput = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SerialPortOutput', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the Shielded Instance Identity of an instance
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetShieldedInstanceIdentityRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetShieldedInstanceIdentitySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetShieldedInstanceIdentityResponse
     */
	public function computeInstancesGetShieldedInstanceIdentity(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetShieldedInstanceIdentityRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetShieldedInstanceIdentitySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetShieldedInstanceIdentityResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{instance}/getShieldedInstanceIdentity', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetShieldedInstanceIdentityRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetShieldedInstanceIdentityRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetShieldedInstanceIdentityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->shieldedInstanceIdentity = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ShieldedInstanceIdentity', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the Shielded VM Identity of an instance
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetShieldedVmIdentityRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetShieldedVmIdentitySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetShieldedVmIdentityResponse
     */
	public function computeInstancesGetShieldedVmIdentity(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetShieldedVmIdentityRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetShieldedVmIdentitySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetShieldedVmIdentityResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{instance}/getShieldedVmIdentity', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetShieldedVmIdentityRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetShieldedVmIdentityRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesGetShieldedVmIdentityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->shieldedVmIdentity = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ShieldedVmIdentity', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an instance resource in the specified project using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesInsertResponse
     */
	public function computeInstancesInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instance", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the list of instances contained within the specified zone.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesListResponse
     */
	public function computeInstancesList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->instanceList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InstanceList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of resources that refer to the VM instance specified in the request. For example, if the VM instance is part of a managed or unmanaged instance group, the referrers list includes the instance group. For more information, read Viewing referrers to VM instances.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesListReferrersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesListReferrersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesListReferrersResponse
     */
	public function computeInstancesListReferrers(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesListReferrersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesListReferrersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesListReferrersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{instance}/referrers', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesListReferrersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesListReferrersRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesListReferrersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->instanceListReferrers = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InstanceListReferrers', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Perform a manual maintenance on the instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesPerformMaintenanceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesPerformMaintenanceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesPerformMaintenanceResponse
     */
	public function computeInstancesPerformMaintenance(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesPerformMaintenanceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesPerformMaintenanceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesPerformMaintenanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{instance}/performMaintenance', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesPerformMaintenanceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesPerformMaintenanceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesPerformMaintenanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes resource policies from an instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesRemoveResourcePoliciesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesRemoveResourcePoliciesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesRemoveResourcePoliciesResponse
     */
	public function computeInstancesRemoveResourcePolicies(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesRemoveResourcePoliciesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesRemoveResourcePoliciesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesRemoveResourcePoliciesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{instance}/removeResourcePolicies', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesRemoveResourcePoliciesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instancesRemoveResourcePoliciesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesRemoveResourcePoliciesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesRemoveResourcePoliciesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Performs a reset on the instance. This is a hard reset. The VM does not do a graceful shutdown. For more information, see Resetting an instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesResetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesResetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesResetResponse
     */
	public function computeInstancesReset(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesResetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesResetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesResetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{instance}/reset', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesResetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesResetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesResetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Resumes an instance that was suspended using the instances().suspend method.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesResumeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesResumeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesResumeResponse
     */
	public function computeInstancesResume(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesResumeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesResumeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesResumeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{instance}/resume', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesResumeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instancesResumeRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesResumeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesResumeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sends diagnostic interrupt to the instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSendDiagnosticInterruptRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSendDiagnosticInterruptSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSendDiagnosticInterruptResponse
     */
	public function computeInstancesSendDiagnosticInterrupt(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSendDiagnosticInterruptRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSendDiagnosticInterruptSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSendDiagnosticInterruptResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{instance}/sendDiagnosticInterrupt', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSendDiagnosticInterruptRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSendDiagnosticInterruptRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSendDiagnosticInterruptResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Sets deletion protection on the instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetDeletionProtectionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetDeletionProtectionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetDeletionProtectionResponse
     */
	public function computeInstancesSetDeletionProtection(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetDeletionProtectionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetDeletionProtectionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetDeletionProtectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{resource}/setDeletionProtection', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetDeletionProtectionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetDeletionProtectionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetDeletionProtectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the auto-delete flag for a disk attached to an instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetDiskAutoDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetDiskAutoDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetDiskAutoDeleteResponse
     */
	public function computeInstancesSetDiskAutoDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetDiskAutoDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetDiskAutoDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetDiskAutoDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{instance}/setDiskAutoDelete', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetDiskAutoDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetDiskAutoDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetDiskAutoDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetIamPolicyResponse
     */
	public function computeInstancesSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{resource}/setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "zoneSetPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets labels on an instance. To learn more about labels, read the Labeling Resources documentation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetLabelsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetLabelsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetLabelsResponse
     */
	public function computeInstancesSetLabels(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetLabelsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetLabelsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetLabelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{instance}/setLabels', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetLabelsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instancesSetLabelsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetLabelsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetLabelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Changes the number and/or type of accelerator for a stopped instance to the values specified in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetMachineResourcesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetMachineResourcesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetMachineResourcesResponse
     */
	public function computeInstancesSetMachineResources(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetMachineResourcesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetMachineResourcesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetMachineResourcesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{instance}/setMachineResources', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetMachineResourcesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instancesSetMachineResourcesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetMachineResourcesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetMachineResourcesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Changes the machine type for a stopped instance to the machine type specified in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetMachineTypeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetMachineTypeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetMachineTypeResponse
     */
	public function computeInstancesSetMachineType(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetMachineTypeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetMachineTypeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetMachineTypeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{instance}/setMachineType', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetMachineTypeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instancesSetMachineTypeRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetMachineTypeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetMachineTypeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets metadata for the specified instance to the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetMetadataRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetMetadataSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetMetadataResponse
     */
	public function computeInstancesSetMetadata(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetMetadataRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetMetadataSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetMetadataResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{instance}/setMetadata', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetMetadataRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "metadata", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetMetadataRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetMetadataResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Changes the minimum CPU platform that this instance should use. This method can only be called on a stopped instance. For more information, read Specifying a Minimum CPU Platform.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetMinCpuPlatformRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetMinCpuPlatformSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetMinCpuPlatformResponse
     */
	public function computeInstancesSetMinCpuPlatform(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetMinCpuPlatformRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetMinCpuPlatformSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetMinCpuPlatformResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{instance}/setMinCpuPlatform', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetMinCpuPlatformRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instancesSetMinCpuPlatformRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetMinCpuPlatformRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetMinCpuPlatformResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets name of an instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetNameRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetNameSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetNameResponse
     */
	public function computeInstancesSetName(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetNameRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetNameSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{instance}/setName', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instancesSetNameRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetNameRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets an instance's scheduling options. You can only call this method on a stopped instance, that is, a VM instance that is in a `TERMINATED` state. See Instance Life Cycle for more information on the possible instance states. For more information about setting scheduling options for a VM, see Set VM host maintenance policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetSchedulingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetSchedulingSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetSchedulingResponse
     */
	public function computeInstancesSetScheduling(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetSchedulingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetSchedulingSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetSchedulingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{instance}/setScheduling', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetSchedulingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "scheduling", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetSchedulingRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetSchedulingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the Google Cloud Armor security policy for the specified instance. For more information, see Google Cloud Armor Overview
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetSecurityPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetSecurityPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetSecurityPolicyResponse
     */
	public function computeInstancesSetSecurityPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetSecurityPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetSecurityPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetSecurityPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{instance}/setSecurityPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetSecurityPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instancesSetSecurityPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetSecurityPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetSecurityPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the service account on the instance. For more information, read Changing the service account and access scopes for an instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetServiceAccountRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetServiceAccountSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetServiceAccountResponse
     */
	public function computeInstancesSetServiceAccount(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetServiceAccountRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetServiceAccountSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetServiceAccountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{instance}/setServiceAccount', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetServiceAccountRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instancesSetServiceAccountRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetServiceAccountRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetServiceAccountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the Shielded Instance integrity policy for an instance. You can only use this method on a running instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetShieldedInstanceIntegrityPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetShieldedInstanceIntegrityPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetShieldedInstanceIntegrityPolicyResponse
     */
	public function computeInstancesSetShieldedInstanceIntegrityPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetShieldedInstanceIntegrityPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetShieldedInstanceIntegrityPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetShieldedInstanceIntegrityPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{instance}/setShieldedInstanceIntegrityPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetShieldedInstanceIntegrityPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "shieldedInstanceIntegrityPolicy", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetShieldedInstanceIntegrityPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetShieldedInstanceIntegrityPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the Shielded VM integrity policy for a VM instance. You can only use this method on a running VM instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetShieldedVmIntegrityPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetShieldedVmIntegrityPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetShieldedVmIntegrityPolicyResponse
     */
	public function computeInstancesSetShieldedVmIntegrityPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetShieldedVmIntegrityPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetShieldedVmIntegrityPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetShieldedVmIntegrityPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{instance}/setShieldedVmIntegrityPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetShieldedVmIntegrityPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "shieldedVmIntegrityPolicy", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetShieldedVmIntegrityPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetShieldedVmIntegrityPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets network tags for the specified instance to the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetTagsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetTagsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetTagsResponse
     */
	public function computeInstancesSetTags(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetTagsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetTagsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetTagsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{instance}/setTags', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetTagsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "tags", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetTagsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSetTagsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Simulates a host maintenance event on a VM. For more information, see Simulate a host maintenance event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSimulateMaintenanceEventRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSimulateMaintenanceEventSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSimulateMaintenanceEventResponse
     */
	public function computeInstancesSimulateMaintenanceEvent(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSimulateMaintenanceEventRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSimulateMaintenanceEventSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSimulateMaintenanceEventResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{instance}/simulateMaintenanceEvent', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSimulateMaintenanceEventRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSimulateMaintenanceEventRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSimulateMaintenanceEventResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts an instance that was stopped using the instances().stop method. For more information, see Restart an instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesStartRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesStartSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesStartResponse
     */
	public function computeInstancesStart(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesStartRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesStartSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesStartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{instance}/start', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesStartRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesStartRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesStartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts an instance that was stopped using the instances().stop method. For more information, see Restart an instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesStartWithEncryptionKeyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesStartWithEncryptionKeySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesStartWithEncryptionKeyResponse
     */
	public function computeInstancesStartWithEncryptionKey(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesStartWithEncryptionKeyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesStartWithEncryptionKeySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesStartWithEncryptionKeyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{instance}/startWithEncryptionKey', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesStartWithEncryptionKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instancesStartWithEncryptionKeyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesStartWithEncryptionKeyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesStartWithEncryptionKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Stops a running instance, shutting it down cleanly, and allows you to restart the instance at a later time. Stopped instances do not incur VM usage charges while they are stopped. However, resources that the VM is using, such as persistent disks and static IP addresses, will continue to be charged until they are deleted. For more information, see Stopping an instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesStopRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesStopSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesStopResponse
     */
	public function computeInstancesStop(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesStopRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesStopSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesStopResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{instance}/stop', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesStopRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesStopRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesStopResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * This method suspends a running instance, saving its state to persistent storage, and allows you to resume the instance at a later time. Suspended instances have no compute costs (cores or RAM), and incur only storage charges for the saved VM memory and localSSD data. Any charged resources the virtual machine was using, such as persistent disks and static IP addresses, will continue to be charged while the instance is suspended. For more information, see Suspending and resuming an instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSuspendRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSuspendSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSuspendResponse
     */
	public function computeInstancesSuspend(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSuspendRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSuspendSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSuspendResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{instance}/suspend', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSuspendRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSuspendRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesSuspendResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesTestIamPermissionsResponse
     */
	public function computeInstancesTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{resource}/testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestPermissionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an instance only if the necessary resources are available. This method can update only a specific set of instance properties. See Updating a running instance for a list of updatable instance properties.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateResponse
     */
	public function computeInstancesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{instance}', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instance1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the specified access config from an instance's network interface with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateAccessConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateAccessConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateAccessConfigResponse
     */
	public function computeInstancesUpdateAccessConfig(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateAccessConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateAccessConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateAccessConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateAccessConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "accessConfig", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateAccessConfigRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateAccessConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the Display config for a VM instance. You can only use this method on a stopped VM instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateDisplayDeviceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateDisplayDeviceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateDisplayDeviceResponse
     */
	public function computeInstancesUpdateDisplayDevice(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateDisplayDeviceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateDisplayDeviceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateDisplayDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{instance}/updateDisplayDevice', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateDisplayDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "displayDevice", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateDisplayDeviceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateDisplayDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an instance's network interface. This method can only update an interface's alias IP range and attached network. See Modifying alias IP ranges for an existing instance for instructions on changing alias IP ranges. See Migrating a VM between networks for instructions on migrating an interface. This method follows PATCH semantics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateNetworkInterfaceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateNetworkInterfaceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateNetworkInterfaceResponse
     */
	public function computeInstancesUpdateNetworkInterface(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateNetworkInterfaceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateNetworkInterfaceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateNetworkInterfaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{instance}/updateNetworkInterface', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateNetworkInterfaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "networkInterface1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateNetworkInterfaceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateNetworkInterfaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the Shielded Instance config for an instance. You can only use this method on a stopped instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateShieldedInstanceConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateShieldedInstanceConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateShieldedInstanceConfigResponse
     */
	public function computeInstancesUpdateShieldedInstanceConfig(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateShieldedInstanceConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateShieldedInstanceConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateShieldedInstanceConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{instance}/updateShieldedInstanceConfig', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateShieldedInstanceConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "shieldedInstanceConfig", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateShieldedInstanceConfigRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateShieldedInstanceConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the Shielded VM config for a VM instance. You can only use this method on a stopped VM instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateShieldedVmConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateShieldedVmConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateShieldedVmConfigResponse
     */
	public function computeInstancesUpdateShieldedVmConfig(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateShieldedVmConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateShieldedVmConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateShieldedVmConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/instances/{instance}/updateShieldedVmConfig', \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateShieldedVmConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "shieldedVmConfig", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateShieldedVmConfigRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInstancesUpdateShieldedVmConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}