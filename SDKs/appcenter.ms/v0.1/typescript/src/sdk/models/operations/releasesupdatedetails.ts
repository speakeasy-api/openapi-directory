/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class ReleasesUpdateDetailsSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=X-API-Token",
  })
  apiToken: string;
}

/**
 * Contains metadata about the build that produced the release being uploaded
 */
export class ReleasesUpdateDetailsRequestBodyBuild extends SpeakeasyBase {
  /**
   * The branch name of the build producing the release
   */
  @SpeakeasyMetadata()
  @Expose({ name: "branch_name" })
  branchName?: string;

  /**
   * The commit hash of the build producing the release
   */
  @SpeakeasyMetadata()
  @Expose({ name: "commit_hash" })
  commitHash?: string;

  /**
   * The commit message of the build producing the release
   */
  @SpeakeasyMetadata()
  @Expose({ name: "commit_message" })
  commitMessage?: string;
}

/**
 * A request containing information for updating details of a release
 */
export class ReleasesUpdateDetailsRequestBody extends SpeakeasyBase {
  /**
   * Contains metadata about the build that produced the release being uploaded
   */
  @SpeakeasyMetadata()
  @Expose({ name: "build" })
  @Type(() => ReleasesUpdateDetailsRequestBodyBuild)
  build?: ReleasesUpdateDetailsRequestBodyBuild;

  /**
   * Toggle this release to be enable distribute/download or not.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;

  /**
   * Release notes for this release.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "release_notes" })
  releaseNotes?: string;
}

export class ReleasesUpdateDetailsRequest extends SpeakeasyBase {
  /**
   * The release information.
   */
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: ReleasesUpdateDetailsRequestBody;

  /**
   * The name of the application
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=app_name",
  })
  appName: string;

  /**
   * The name of the owner
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner_name",
  })
  ownerName: string;

  /**
   * The ID of the release
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=release_id",
  })
  releaseId: number;
}

export enum ReleasesUpdateDetails404ApplicationJSONCodeEnum {
  BadRequest = "BadRequest",
  Conflict = "Conflict",
  NotAcceptable = "NotAcceptable",
  NotFound = "NotFound",
  InternalServerError = "InternalServerError",
  Unauthorized = "Unauthorized",
  TooManyRequests = "TooManyRequests",
}

/**
 * Release not found
 */
export class ReleasesUpdateDetails404ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: ReleasesUpdateDetails404ApplicationJSONCodeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

export enum ReleasesUpdateDetails400ApplicationJSONCodeEnum {
  BadRequest = "BadRequest",
  Conflict = "Conflict",
  NotAcceptable = "NotAcceptable",
  NotFound = "NotFound",
  InternalServerError = "InternalServerError",
  Unauthorized = "Unauthorized",
  TooManyRequests = "TooManyRequests",
}

export class ReleasesUpdateDetails400ApplicationJSONDestinations extends SpeakeasyBase {
  /**
   * Error Codes:<br>
   *
   * @remarks
   * <b>invalid_store_secrets</b>: While distributing to store, secrets provided for store are not valid.<br>
   * <b>store_release_bad_request</b>: Proper package release details for the store is not provided.<br>
   * <b>store_release_unauthorized</b>: User is not authorized to publish to store due to invalid developer credentials.<br>
   * <b>store_release_forbidden</b>: Publish to store is forbidden due to conflicts/errors in the release version and already existing version in the store.<br>
   * <b>store_release_promotion</b>: Release already distributed, promoting a release is not supported.<br>
   * <b>store_track_deactivated</b>: One or more tracks would be deactivated with this release. This is not supported yet.<br>
   * <b>store_release_not_found</b>: App with the given package name is not found in the store.<br>
   * <b>store_release_not_available</b>: The release is not available.<br>
   * <b>internal_server_error</b>: Failed to distribute to a destination due to an internal server error.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

/**
 * Failure
 */
export class ReleasesUpdateDetails400ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: ReleasesUpdateDetails400ApplicationJSONCodeEnum;

  @SpeakeasyMetadata({
    elemType: ReleasesUpdateDetails400ApplicationJSONDestinations,
  })
  @Expose({ name: "destinations" })
  @Type(() => ReleasesUpdateDetails400ApplicationJSONDestinations)
  destinations?: ReleasesUpdateDetails400ApplicationJSONDestinations[];

  @SpeakeasyMetadata()
  @Expose({ name: "mandatory_update" })
  mandatoryUpdate?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;

  @SpeakeasyMetadata()
  @Expose({ name: "release_notes" })
  releaseNotes?: string;
}

export class ReleasesUpdateDetails200ApplicationJSONDestinations extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

/**
 * Response for updating a release
 */
export class ReleasesUpdateDetails200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: ReleasesUpdateDetails200ApplicationJSONDestinations,
  })
  @Expose({ name: "destinations" })
  @Type(() => ReleasesUpdateDetails200ApplicationJSONDestinations)
  destinations?: ReleasesUpdateDetails200ApplicationJSONDestinations[];

  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "mandatory_update" })
  mandatoryUpdate?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "provisioning_status_url" })
  provisioningStatusUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "release_notes" })
  releaseNotes?: string;
}

export class ReleasesUpdateDetailsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  releasesUpdateDetails200ApplicationJSONObject?: ReleasesUpdateDetails200ApplicationJSON;

  /**
   * Failure
   */
  @SpeakeasyMetadata()
  releasesUpdateDetails400ApplicationJSONObject?: ReleasesUpdateDetails400ApplicationJSON;

  /**
   * Release not found
   */
  @SpeakeasyMetadata()
  releasesUpdateDetails404ApplicationJSONObject?: ReleasesUpdateDetails404ApplicationJSON;
}
