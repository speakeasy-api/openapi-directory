<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - Work with Qualtrics surveys, distributions and response events
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'https://fra1.qualtrics.com/API/v3',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * Create contact in mailing list
     * 
     * Creates a contact in a given mailing list
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateContactInMailinglistRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateContactInMailinglistResponse
     */
	public function createContactInMailinglist(
        \OpenAPI\OpenAPI\Models\Operations\CreateContactInMailinglistRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateContactInMailinglistResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/directories/{DirectoryId}/mailinglists/{MailingListId}/contacts', \OpenAPI\OpenAPI\Models\Operations\CreateContactInMailinglistRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createContactInMailingList", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateContactInMailinglistResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Generate distribution links
     * 
     * Geneates links for individual distribution
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreateDistributionLinks $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GenerateDistributionLinksResponse
     */
	public function generateDistributionLinks(
        \OpenAPI\OpenAPI\Models\Shared\CreateDistributionLinks $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GenerateDistributionLinksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/distributions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GenerateDistributionLinksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get distributions for survey
     * 
     * Gets all distributions for a given survey
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistributionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDistributionsResponse
     */
	public function getDistributions(
        \OpenAPI\OpenAPI\Models\Operations\GetDistributionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDistributionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/distributions');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDistributionsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDistributionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->distributionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DistributionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get event subscriptions
     * 
     * Get event subscriptions
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventSubscriptionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEventSubscriptionsResponse
     */
	public function getEventSubscriptions(
        \OpenAPI\OpenAPI\Models\Operations\GetEventSubscriptionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEventSubscriptionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/eventsubscriptions/{SubscriptionId}', \OpenAPI\OpenAPI\Models\Operations\GetEventSubscriptionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEventSubscriptionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->eventSubscriptionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EventSubscriptionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get survey
     * 
     * Gets a single Qualtrics survey speficied by its ID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSurveyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSurveyResponse
     */
	public function getSurvey(
        \OpenAPI\OpenAPI\Models\Operations\GetSurveyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSurveyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/survey-definitions/{SurveyId}', \OpenAPI\OpenAPI\Models\Operations\GetSurveyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSurveyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->surveyResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else {
        }

        return $response;
    }
	
    /**
     * Retrieve distribution links
     * 
     * Retrieves all the individual links for a given distribution
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrievedistributionlinksRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RetrievedistributionlinksResponse
     */
	public function retrievedistributionlinks(
        \OpenAPI\OpenAPI\Models\Operations\RetrievedistributionlinksRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RetrievedistributionlinksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/distributions/{DistributionId}/links', \OpenAPI\OpenAPI\Models\Operations\RetrievedistributionlinksRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RetrievedistributionlinksRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RetrievedistributionlinksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->retrieveDistributionLinksResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RetrieveDistributionLinksResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove subscription to response event
     * 
     * Remove event subscription
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\SubscribeToEventBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\WebhookDeleteResponse
     */
	public function webhookDelete(
        \OpenAPI\OpenAPI\Models\Shared\SubscribeToEventBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\WebhookDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/eventsubscriptions/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WebhookDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->eventSubscriptionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EventSubscriptionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Triggers when a response is submitted to a qualtrics survey
     * 
     * Subscribe to response event
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\SubscribeToEventBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\WhenAResponseIsReceivedResponse
     */
	public function whenAResponseIsReceived(
        \OpenAPI\OpenAPI\Models\Shared\SubscribeToEventBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\WhenAResponseIsReceivedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/eventsubscriptions/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WhenAResponseIsReceivedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->eventSubscriptionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EventSubscriptionsResponse', 'json');
            }
        }

        return $response;
    }
}