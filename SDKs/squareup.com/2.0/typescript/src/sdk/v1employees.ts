/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class V1Employees {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * CreateEmployee
   *
   * @remarks
   *  Use the CreateEmployee endpoint to add an employee to a Square
   * account. Employees created with the Connect API have an initial status
   * of `INACTIVE`. Inactive employees cannot sign in to Square Point of Sale
   * until they are activated from the Square Dashboard. Employee status
   * cannot be changed with the Connect API.
   *
   * Employee entities cannot be deleted. To disable employee profiles,
   * set the employee's status to <code>INACTIVE</code>
   */
  createEmployee(
    req: shared.V1Employee,
    security: operations.CreateEmployeeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateEmployeeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.V1Employee(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/me/employees";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateEmployeeSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateEmployeeResponse =
        new operations.CreateEmployeeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.v1Employee = utils.objectToClass(
              httpRes?.data,
              shared.V1Employee
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * CreateEmployeeRole
   *
   * @remarks
   * Creates an employee role you can then assign to employees.
   *
   * Square accounts can include any number of roles that can be assigned to
   * employees. These roles define the actions and permissions granted to an
   * employee with that role. For example, an employee with a "Shift Manager"
   * role might be able to issue refunds in Square Point of Sale, whereas an
   * employee with a "Clerk" role might not.
   *
   * Roles are assigned with the [V1UpdateEmployee](https://developer.squareup.com/reference/square_2021-08-18/v1-employees-api/update-employee-role)
   * endpoint. An employee can have only one role at a time.
   *
   * If an employee has no role, they have none of the permissions associated
   * with roles. All employees can accept payments with Square Point of Sale.
   */
  createEmployeeRole(
    req: shared.V1EmployeeRole,
    security: operations.CreateEmployeeRoleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateEmployeeRoleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.V1EmployeeRole(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/me/roles";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateEmployeeRoleSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateEmployeeRoleResponse =
        new operations.CreateEmployeeRoleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.v1EmployeeRole = utils.objectToClass(
              httpRes?.data,
              shared.V1EmployeeRole
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * ListEmployeeRoles
   *
   * @remarks
   * Provides summary information for all of a business's employee roles.
   */
  listEmployeeRoles(
    req: operations.ListEmployeeRolesRequest,
    security: operations.ListEmployeeRolesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ListEmployeeRolesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListEmployeeRolesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/me/roles";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ListEmployeeRolesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListEmployeeRolesResponse =
        new operations.ListEmployeeRolesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.v1EmployeeRoles = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.v1EmployeeRoles = utils.objectToClass(
              httpRes?.data,
              shared.V1EmployeeRole,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * ListEmployees
   *
   * @remarks
   * Provides summary information for all of a business's employees.
   */
  listEmployees(
    req: operations.ListEmployeesRequest,
    security: operations.ListEmployeesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ListEmployeesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListEmployeesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/me/employees";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ListEmployeesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListEmployeesResponse =
        new operations.ListEmployeesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.v1Employees = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.v1Employees = utils.objectToClass(
              httpRes?.data,
              shared.V1Employee,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * RetrieveEmployee
   *
   * @remarks
   * Provides the details for a single employee.
   */
  retrieveEmployee(
    req: operations.RetrieveEmployeeRequest,
    security: operations.RetrieveEmployeeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RetrieveEmployeeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RetrieveEmployeeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/me/employees/{employee_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RetrieveEmployeeSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RetrieveEmployeeResponse =
        new operations.RetrieveEmployeeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.v1Employee = utils.objectToClass(
              httpRes?.data,
              shared.V1Employee
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * RetrieveEmployeeRole
   *
   * @remarks
   * Provides the details for a single employee role.
   */
  retrieveEmployeeRole(
    req: operations.RetrieveEmployeeRoleRequest,
    security: operations.RetrieveEmployeeRoleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RetrieveEmployeeRoleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RetrieveEmployeeRoleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/me/roles/{role_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RetrieveEmployeeRoleSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RetrieveEmployeeRoleResponse =
        new operations.RetrieveEmployeeRoleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.v1EmployeeRole = utils.objectToClass(
              httpRes?.data,
              shared.V1EmployeeRole
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * UpdateEmployee
   */
  updateEmployee(
    req: operations.UpdateEmployeeRequest,
    security: operations.UpdateEmployeeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateEmployeeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateEmployeeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/me/employees/{employee_id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "v1Employee",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdateEmployeeSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateEmployeeResponse =
        new operations.UpdateEmployeeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.v1Employee = utils.objectToClass(
              httpRes?.data,
              shared.V1Employee
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * UpdateEmployeeRole
   *
   * @remarks
   * Modifies the details of an employee role.
   */
  updateEmployeeRole(
    req: operations.UpdateEmployeeRoleRequest,
    security: operations.UpdateEmployeeRoleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateEmployeeRoleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateEmployeeRoleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/me/roles/{role_id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "v1EmployeeRole",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdateEmployeeRoleSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateEmployeeRoleResponse =
        new operations.UpdateEmployeeRoleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.v1EmployeeRole = utils.objectToClass(
              httpRes?.data,
              shared.V1EmployeeRole
            );
          }
          break;
      }

      return res;
    });
  }
}
