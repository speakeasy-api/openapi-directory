"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Recordings:
    r"""Stub mapping record and snapshot functions
    http://wiremock.org/docs/record-playback/ - User documentation
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_admin_recordings_status(self) -> operations.GetAdminRecordingsStatusResponse:
        r"""Get recording status"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/__admin/recordings/status'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAdminRecordingsStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetAdminRecordingsStatus200ApplicationJSON])
                res.get_admin_recordings_status_200_application_json_object = out

        return res

    def post_admin_recordings_snapshot(self, request: operations.PostAdminRecordingsSnapshotRequestBody) -> operations.PostAdminRecordingsSnapshotResponse:
        r"""Take a snapshot recording"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/__admin/recordings/snapshot'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAdminRecordingsSnapshotResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostAdminRecordingsSnapshot200ApplicationJSON])
                res.post_admin_recordings_snapshot_200_application_json_object = out

        return res

    def post_admin_recordings_start(self, request: operations.PostAdminRecordingsStartRequestBody) -> operations.PostAdminRecordingsStartResponse:
        r"""Start recording
        Begin recording stub mappings
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/__admin/recordings/start'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAdminRecordingsStartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_admin_recordings_stop(self) -> operations.PostAdminRecordingsStopResponse:
        r"""Stop recording
        End recording of stub mappings
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/__admin/recordings/stop'
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAdminRecordingsStopResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostAdminRecordingsStop200ApplicationJSON])
                res.post_admin_recordings_stop_200_application_json_object = out

        return res

    