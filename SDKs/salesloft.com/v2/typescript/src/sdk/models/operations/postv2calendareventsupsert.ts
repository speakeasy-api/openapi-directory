/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

export class PostV2CalendarEventsUpsertRequestBody extends SpeakeasyBase {
  /**
   * Should be set to `true` for all day calendar events.
   */
  @SpeakeasyMetadata({ data: "form, name=all_day" })
  allDay?: boolean;

  /**
   *   List of attendees of the calendar event.
   *
   * @remarks
   *   Example:
   *   ```
   *     {
   *       ...
   *       "attendees": [
   *         {
   *           "name": "Alice",
   *           "email": "alice@example.com",
   *           "status": "accepted",
   *           "organizer": true
   *         },
   *         {
   *           "name": "Bob",
   *           "email": "bob@example.com",
   *           "status": "needsAction",
   *           "organizer": false
   *         }
   *       ]
   *     }
   *   ```
   *   `name`: full name of the attendee
   *
   *   `email`: email address of the attendee
   *
   *   `status`: one of the following - needsAction, accepted, tentative, declined
   *
   *   `organizer`: whether the attendee is the organizer of the calendar event
   *
   */
  @SpeakeasyMetadata({ data: "form, name=attendees;json=true" })
  attendees?: Record<string, any>;

  /**
   *   Calendar ID of the calendar event owner.
   *
   * @remarks
   *   For the External Calendar connection use `external_{salesloft_user_guid}` format.
   *   Example: `external_00210d1a-df8a-459f-af75-89b953b618b0`.
   *
   */
  @SpeakeasyMetadata({ data: "form, name=calendar_id" })
  calendarId: string;

  /**
   *   Cancellation time of the calendar event, as a combined date-time value in the ISO 8601 format with a time zone offset.
   *
   * @remarks
   *   Example: `2022-02-14T10:12:59+00:00`.
   *
   */
  @SpeakeasyMetadata({ data: "form, name=canceled_at" })
  canceledAt?: string;

  /**
   * Description of the calendar event
   */
  @SpeakeasyMetadata({ data: "form, name=description" })
  description?: string;

  /**
   *   End time of the calendar event, as a combined date-time value in the ISO 8601 format with a time zone offset.
   *
   * @remarks
   *   Example: `2022-02-14T10:12:59+00:00`.
   *
   */
  @SpeakeasyMetadata({ data: "form, name=end_time;dateTimeFormat=YYYY-MM-DD" })
  endTime: Date;

  /**
   *   icalUID of the calendar event. Unique identifier for a calendar event across calendars.
   *
   * @remarks
   *
   *   Used as an upsert key.
   *
   */
  @SpeakeasyMetadata({ data: "form, name=i_cal_uid" })
  iCalUid: string;

  /**
   *   Id of the calendar event, different for each occurrence in a recurring series.
   *
   * @remarks
   *
   *   Used as an upsert key.
   *
   */
  @SpeakeasyMetadata({ data: "form, name=id" })
  id: string;

  /**
   * Location of the calendar event as free-form text.
   */
  @SpeakeasyMetadata({ data: "form, name=location" })
  location?: string;

  /**
   *   Email address of the organizer
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({ data: "form, name=organizer" })
  organizer?: string;

  /**
   * Should be set to `true` if this is one of recurring series calendar event.
   */
  @SpeakeasyMetadata({ data: "form, name=recurring" })
  recurring?: boolean;

  /**
   *   Start time of the calendar event, as a combined date-time value in the ISO 8601 format with a time zone offset.
   *
   * @remarks
   *   Example: `2022-02-14T10:12:59+00:00`.
   *
   */
  @SpeakeasyMetadata({
    data: "form, name=start_time;dateTimeFormat=YYYY-MM-DD",
  })
  startTime: Date;

  /**
   *   Status of the calendar event. Depending on the status, the calendar event will or will not impact user's availability.
   *
   * @remarks
   *   Possible values: `confirmed`, `tentative`, `cancelled`.
   *   Example: `confirmed`.
   *
   */
  @SpeakeasyMetadata({ data: "form, name=status" })
  status?: string;

  /**
   * Title of the calendar event
   */
  @SpeakeasyMetadata({ data: "form, name=title" })
  title?: string;
}

export class PostV2CalendarEventsUpsertResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
