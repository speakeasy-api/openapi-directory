// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type RtcCapabilityWebhooksEventURLHTTPMethodEnum string

const (
	RtcCapabilityWebhooksEventURLHTTPMethodEnumGet  RtcCapabilityWebhooksEventURLHTTPMethodEnum = "GET"
	RtcCapabilityWebhooksEventURLHTTPMethodEnumPost RtcCapabilityWebhooksEventURLHTTPMethodEnum = "POST"
)

func (e *RtcCapabilityWebhooksEventURLHTTPMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "GET":
		fallthrough
	case "POST":
		*e = RtcCapabilityWebhooksEventURLHTTPMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RtcCapabilityWebhooksEventURLHTTPMethodEnum: %s", s)
	}
}

// RtcCapabilityWebhooksEventURL - Vonage will send RTC events to this URL
type RtcCapabilityWebhooksEventURL struct {
	Address    *string                                      `json:"address,omitempty"`
	HTTPMethod *RtcCapabilityWebhooksEventURLHTTPMethodEnum `json:"http_method,omitempty"`
}

type RtcCapabilityWebhooks struct {
	// Vonage will send RTC events to this URL
	EventURL *RtcCapabilityWebhooksEventURL `json:"event_url,omitempty"`
}

// RtcCapability - RTC / Conversation Service related configuration
type RtcCapability struct {
	LegPersistenceTime *int                   `json:"leg_persistence_time,omitempty"`
	SignedCallbacks    *bool                  `json:"signed_callbacks,omitempty"`
	Webhooks           *RtcCapabilityWebhooks `json:"webhooks,omitempty"`
}
