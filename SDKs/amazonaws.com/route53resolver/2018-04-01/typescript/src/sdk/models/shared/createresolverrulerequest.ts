/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { RuleTypeOptionEnum } from "./ruletypeoptionenum";
import { Tag } from "./tag";
import { TargetAddress } from "./targetaddress";
import { Expose, Type } from "class-transformer";

export class CreateResolverRuleRequest extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "CreatorRequestId" })
  creatorRequestId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "DomainName" })
  domainName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ResolverEndpointId" })
  resolverEndpointId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "RuleType" })
  ruleType: RuleTypeOptionEnum;

  @SpeakeasyMetadata({ elemType: Tag })
  @Expose({ name: "Tags" })
  @Type(() => Tag)
  tags?: Tag[];

  @SpeakeasyMetadata({ elemType: TargetAddress })
  @Expose({ name: "TargetIps" })
  @Type(() => TargetAddress)
  targetIps?: TargetAddress[];
}
