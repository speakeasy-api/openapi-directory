<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Name 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Search for names with metadata changes in a given period
     * 
     * Search for information about geographical names which have changed most recently within a specified time window.  Changes may include status cupdates and metadata corrections.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNamesChangesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNamesChangesResponse
     */
	public function getNamesChanges(
        \OpenAPI\OpenAPI\Models\Operations\GetNamesChangesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNamesChangesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/names/changes');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNamesChangesRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNamesChangesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Search for names affected by recent naming decision
     * 
     * Search for information about geographical names affected by naming 'decisions' made by the BC Geographical Names Office (naming authority) within the last X days.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNamesDecisionsRecentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNamesDecisionsRecentResponse
     */
	public function getNamesDecisionsRecent(
        \OpenAPI\OpenAPI\Models\Operations\GetNamesDecisionsRecentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNamesDecisionsRecentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/names/decisions/recent');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNamesDecisionsRecentRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNamesDecisionsRecentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Search for names affected by naming decisions in a given year
     * 
     * Search for information about geographical names affected by naming 'decisions' made by the BC Geographical Names Office (naming authority) in a given year.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNamesDecisionsYearRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNamesDecisionsYearResponse
     */
	public function getNamesDecisionsYear(
        \OpenAPI\OpenAPI\Models\Operations\GetNamesDecisionsYearRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNamesDecisionsYearResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/names/decisions/year');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNamesDecisionsYearRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNamesDecisionsYearResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Search in a geographic area
     * 
     * Search for information about geographical names that correspond to features within a geographic bounding box.  Various options and filter parameters are available to refine the search.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNamesInsideRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNamesInsideResponse
     */
	public function getNamesInside(
        \OpenAPI\OpenAPI\Models\Operations\GetNamesInsideRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNamesInsideResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/names/inside');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNamesInsideRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNamesInsideResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Search near to a geographic point
     * 
     * Search for information about geographical names that correspond to features within a geographic area defined by a centre point and a radius.  Various options and filter parameters are available to refine the search.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNamesNearRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNamesNearResponse
     */
	public function getNamesNear(
        \OpenAPI\OpenAPI\Models\Operations\GetNamesNearRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNamesNearResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/names/near');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNamesNearRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNamesNearResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Search by name, limit to unofficial names only
     * 
     * Search for information about unofficial geographical names by the text of the name itself.  Various options and filter parameters are available to refine the search.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNamesNotOfficialSearchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNamesNotOfficialSearchResponse
     */
	public function getNamesNotOfficialSearch(
        \OpenAPI\OpenAPI\Models\Operations\GetNamesNotOfficialSearchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNamesNotOfficialSearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/names/notOfficial/search');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNamesNotOfficialSearchRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNamesNotOfficialSearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Search by name, limit to official names only
     * 
     * Search for information about official geographical names by the text of the name itself.  Various options and filter parameters are available to refine the search.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNamesOfficialSearchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNamesOfficialSearchResponse
     */
	public function getNamesOfficialSearch(
        \OpenAPI\OpenAPI\Models\Operations\GetNamesOfficialSearchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNamesOfficialSearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/names/official/search');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNamesOfficialSearchRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNamesOfficialSearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Search by name
     * 
     * Search for information about geographical names by the text of the name itself.  The response will include both official and unofficial names.  Various options and filter parameters are available to refine the search.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNamesSearchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNamesSearchResponse
     */
	public function getNamesSearch(
        \OpenAPI\OpenAPI\Models\Operations\GetNamesSearchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNamesSearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/names/search');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNamesSearchRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNamesSearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Get a name by its nameId
     * 
     * Get information about the geographical name with the specified nameId.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNamesNameIdOutputFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNamesNameIdOutputFormatResponse
     */
	public function getNamesNameIdOutputFormat(
        \OpenAPI\OpenAPI\Models\Operations\GetNamesNameIdOutputFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNamesNameIdOutputFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/names/{nameId}.{outputFormat}', \OpenAPI\OpenAPI\Models\Operations\GetNamesNameIdOutputFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNamesNameIdOutputFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
}