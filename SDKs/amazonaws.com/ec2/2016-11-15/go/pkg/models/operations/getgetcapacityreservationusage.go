// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETGETCapacityReservationUsageActionEnum
type GETGETCapacityReservationUsageActionEnum string

const (
	GETGETCapacityReservationUsageActionEnumGetCapacityReservationUsage GETGETCapacityReservationUsageActionEnum = "GetCapacityReservationUsage"
)

func (e *GETGETCapacityReservationUsageActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "GetCapacityReservationUsage":
		*e = GETGETCapacityReservationUsageActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETGETCapacityReservationUsageActionEnum: %s", s)
	}
}

// GETGETCapacityReservationUsageVersionEnum
type GETGETCapacityReservationUsageVersionEnum string

const (
	GETGETCapacityReservationUsageVersionEnumTwoThousandAndSixteen1115 GETGETCapacityReservationUsageVersionEnum = "2016-11-15"
)

func (e *GETGETCapacityReservationUsageVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETGETCapacityReservationUsageVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETGETCapacityReservationUsageVersionEnum: %s", s)
	}
}

type GETGETCapacityReservationUsageQueryParams struct {
	Action GETGETCapacityReservationUsageActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The ID of the Capacity Reservation.
	CapacityReservationID string `queryParam:"style=form,explode=true,name=CapacityReservationId"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// <p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned <code>nextToken</code> value. This value can be between 5 and 500. If <code>maxResults</code> is given a larger value than 500, you receive an error.</p> <p>Valid range: Minimum value of 1. Maximum value of 1000.</p>
	MaxResults *int64 `queryParam:"style=form,explode=true,name=MaxResults"`
	// The token to use to retrieve the next page of results.
	NextToken *string                                   `queryParam:"style=form,explode=true,name=NextToken"`
	Version   GETGETCapacityReservationUsageVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETGETCapacityReservationUsageHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETGETCapacityReservationUsageRequest struct {
	QueryParams GETGETCapacityReservationUsageQueryParams
	Headers     GETGETCapacityReservationUsageHeaders
}

type GETGETCapacityReservationUsageResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
