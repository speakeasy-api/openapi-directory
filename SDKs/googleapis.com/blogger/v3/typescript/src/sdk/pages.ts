/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Pages {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Deletes a page by blog id and page id.
   */
  bloggerPagesDelete(
    req: operations.BloggerPagesDeleteRequest,
    security: operations.BloggerPagesDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BloggerPagesDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BloggerPagesDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/blogs/{blogId}/pages/{pageId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BloggerPagesDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BloggerPagesDeleteResponse =
        new operations.BloggerPagesDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Gets a page by blog id and page id.
   */
  bloggerPagesGet(
    req: operations.BloggerPagesGetRequest,
    security: operations.BloggerPagesGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BloggerPagesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BloggerPagesGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/blogs/{blogId}/pages/{pageId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BloggerPagesGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BloggerPagesGetResponse =
        new operations.BloggerPagesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.page = utils.objectToClass(httpRes?.data, shared.Page);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Inserts a page.
   */
  bloggerPagesInsert(
    req: operations.BloggerPagesInsertRequest,
    security: operations.BloggerPagesInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BloggerPagesInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BloggerPagesInsertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/blogs/{blogId}/pages",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "page",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BloggerPagesInsertSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BloggerPagesInsertResponse =
        new operations.BloggerPagesInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.page = utils.objectToClass(httpRes?.data, shared.Page);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists pages.
   */
  bloggerPagesList(
    req: operations.BloggerPagesListRequest,
    security: operations.BloggerPagesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BloggerPagesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BloggerPagesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/blogs/{blogId}/pages",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BloggerPagesListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BloggerPagesListResponse =
        new operations.BloggerPagesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pageList = utils.objectToClass(httpRes?.data, shared.PageList);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Patches a page.
   */
  bloggerPagesPatch(
    req: operations.BloggerPagesPatchRequest,
    security: operations.BloggerPagesPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BloggerPagesPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BloggerPagesPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/blogs/{blogId}/pages/{pageId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "page",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BloggerPagesPatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BloggerPagesPatchResponse =
        new operations.BloggerPagesPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.page = utils.objectToClass(httpRes?.data, shared.Page);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Publishes a page.
   */
  bloggerPagesPublish(
    req: operations.BloggerPagesPublishRequest,
    security: operations.BloggerPagesPublishSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BloggerPagesPublishResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BloggerPagesPublishRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/blogs/{blogId}/pages/{pageId}/publish",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BloggerPagesPublishSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BloggerPagesPublishResponse =
        new operations.BloggerPagesPublishResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.page = utils.objectToClass(httpRes?.data, shared.Page);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Reverts a published or scheduled page to draft state.
   */
  bloggerPagesRevert(
    req: operations.BloggerPagesRevertRequest,
    security: operations.BloggerPagesRevertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BloggerPagesRevertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BloggerPagesRevertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/blogs/{blogId}/pages/{pageId}/revert",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BloggerPagesRevertSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BloggerPagesRevertResponse =
        new operations.BloggerPagesRevertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.page = utils.objectToClass(httpRes?.data, shared.Page);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a page by blog id and page id.
   */
  bloggerPagesUpdate(
    req: operations.BloggerPagesUpdateRequest,
    security: operations.BloggerPagesUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BloggerPagesUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BloggerPagesUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/blogs/{blogId}/pages/{pageId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "page",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BloggerPagesUpdateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BloggerPagesUpdateResponse =
        new operations.BloggerPagesUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.page = utils.objectToClass(httpRes?.data, shared.Page);
          }
          break;
      }

      return res;
    });
  }
}
