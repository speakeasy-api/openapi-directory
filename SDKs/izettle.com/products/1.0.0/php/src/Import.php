<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Import 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get status for latest import
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetLatestImportStatusRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetLatestImportStatusSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetLatestImportStatusResponse
     */
	public function getLatestImportStatus(
        \OpenAPI\OpenAPI\Models\Operations\GetLatestImportStatusRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetLatestImportStatusSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetLatestImportStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationUuid}/import/status', \OpenAPI\OpenAPI\Models\Operations\GetLatestImportStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetLatestImportStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->importResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ImportResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get status for an import
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetStatusByUuidRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetStatusByUuidSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetStatusByUuidResponse
     */
	public function getStatusByUuid(
        \OpenAPI\OpenAPI\Models\Operations\GetStatusByUuidRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetStatusByUuidSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetStatusByUuidResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationUuid}/import/status/{importUuid}', \OpenAPI\OpenAPI\Models\Operations\GetStatusByUuidRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetStatusByUuidResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->importResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ImportResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Import library items
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ImportLibraryV2Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ImportLibraryV2Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ImportLibraryV2Response
     */
	public function importLibraryV2(
        \OpenAPI\OpenAPI\Models\Operations\ImportLibraryV2Request $request,
        \OpenAPI\OpenAPI\Models\Operations\ImportLibraryV2Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ImportLibraryV2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationUuid}/import/v2', \OpenAPI\OpenAPI\Models\Operations\ImportLibraryV2Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "bulkImportRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImportLibraryV2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->importResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ImportResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
}