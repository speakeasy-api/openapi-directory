/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * InstanceInput - A server.
 */
public class InstanceInput {
    /**
     * True if you enable hyperthreading for the server, otherwise false. The default value is false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hyperthreadingEnabled")
    public Boolean hyperthreadingEnabled;

    public InstanceInput withHyperthreadingEnabled(Boolean hyperthreadingEnabled) {
        this.hyperthreadingEnabled = hyperthreadingEnabled;
        return this;
    }
    
    /**
     * Labels as key value pairs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;

    public InstanceInput withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * List of logical interfaces for the instance. The number of logical interfaces will be the same as number of hardware bond/nic on the chosen network template. For the non-multivlan configurations (for eg, existing servers) that use existing default network template (bondaa-bondaa), both the Instance.networks field and the Instance.logical_interfaces fields will be filled to ensure backward compatibility. For the others, only Instance.logical_interfaces will be filled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logicalInterfaces")
    public GoogleCloudBaremetalsolutionV2LogicalInterface[] logicalInterfaces;

    public InstanceInput withLogicalInterfaces(GoogleCloudBaremetalsolutionV2LogicalInterface[] logicalInterfaces) {
        this.logicalInterfaces = logicalInterfaces;
        return this;
    }
    
    /**
     * Immutable. List of LUNs associated with this server.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("luns")
    public LunInput[] luns;

    public InstanceInput withLuns(LunInput[] luns) {
        this.luns = luns;
        return this;
    }
    
    /**
     * Immutable. The server type. [Available server types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("machineType")
    public String machineType;

    public InstanceInput withMachineType(String machineType) {
        this.machineType = machineType;
        return this;
    }
    
    /**
     * Immutable. The resource name of this `Instance`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project}/locations/{location}/instances/{instance}`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public InstanceInput withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Instance network template name. For eg, bondaa-bondaa, bondab-nic, etc. Generally, the template name follows the syntax of "bond" or "nic".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("networkTemplate")
    public String networkTemplate;

    public InstanceInput withNetworkTemplate(String networkTemplate) {
        this.networkTemplate = networkTemplate;
        return this;
    }
    
    /**
     * The OS image currently installed on the server.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("osImage")
    public String osImage;

    public InstanceInput withOsImage(String osImage) {
        this.osImage = osImage;
        return this;
    }
    
    /**
     * Immutable. Pod name. Pod is an independent part of infrastructure. Instance can be connected to the assets (networks, volumes) allocated in the same pod only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pod")
    public String pod;

    public InstanceInput withPod(String pod) {
        this.pod = pod;
        return this;
    }
    
    /**
     * Input only. List of Volumes to attach to this Instance on creation. This field won't be populated in Get/List responses.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("volumes")
    public VolumeInput[] volumes;

    public InstanceInput withVolumes(VolumeInput[] volumes) {
        this.volumes = volumes;
        return this;
    }
    
    /**
     * The workload profile for the instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workloadProfile")
    public InstanceWorkloadProfileEnum workloadProfile;

    public InstanceInput withWorkloadProfile(InstanceWorkloadProfileEnum workloadProfile) {
        this.workloadProfile = workloadProfile;
        return this;
    }
    
    public InstanceInput(){}
}
