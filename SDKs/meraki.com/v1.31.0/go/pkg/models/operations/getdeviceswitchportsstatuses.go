// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetDeviceSwitchPortsStatusesPathParams struct {
	Serial string `pathParam:"style=simple,explode=false,name=serial"`
}

type GetDeviceSwitchPortsStatusesQueryParams struct {
	// The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
	T0 *string `queryParam:"style=form,explode=true,name=t0"`
	// The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
	Timespan *float32 `queryParam:"style=form,explode=true,name=timespan"`
}

type GetDeviceSwitchPortsStatusesRequest struct {
	PathParams  GetDeviceSwitchPortsStatusesPathParams
	QueryParams GetDeviceSwitchPortsStatusesQueryParams
}

// GetDeviceSwitchPortsStatuses200ApplicationJSONCdp - The Cisco Discovery Protocol (CDP) information of the connected device.
type GetDeviceSwitchPortsStatuses200ApplicationJSONCdp struct {
	// Contains network addresses of both receiving and sending devices.
	Address *string `json:"address,omitempty"`
	// Identifies the device type, which indicates the functional capabilities of the device.
	Capabilities *string `json:"capabilities,omitempty"`
	// Identifies the device name.
	DeviceID *string `json:"deviceId,omitempty"`
	// The device's management IP.
	ManagementAddress *string `json:"managementAddress,omitempty"`
	// Indicates, per interface, the assumed VLAN for untagged packets on the interface.
	NativeVlan *int64 `json:"nativeVlan,omitempty"`
	// Identifies the hardware platform of the device.
	Platform *string `json:"platform,omitempty"`
	// Identifies the port from which the CDP packet was sent.
	PortID *string `json:"portId,omitempty"`
	// The system name.
	SystemName *string `json:"systemName,omitempty"`
	// Contains the device software release information.
	Version *string `json:"version,omitempty"`
	// Advertises the configured VLAN Trunking Protocl (VTP)-management-domain name of the system.
	VtpManagementDomain *string `json:"vtpManagementDomain,omitempty"`
}

// GetDeviceSwitchPortsStatuses200ApplicationJSONDuplexEnum - The current duplex of a connected port.
type GetDeviceSwitchPortsStatuses200ApplicationJSONDuplexEnum string

const (
	GetDeviceSwitchPortsStatuses200ApplicationJSONDuplexEnumUnknown GetDeviceSwitchPortsStatuses200ApplicationJSONDuplexEnum = ""
	GetDeviceSwitchPortsStatuses200ApplicationJSONDuplexEnumFull    GetDeviceSwitchPortsStatuses200ApplicationJSONDuplexEnum = "full"
	GetDeviceSwitchPortsStatuses200ApplicationJSONDuplexEnumHalf    GetDeviceSwitchPortsStatuses200ApplicationJSONDuplexEnum = "half"
)

func (e *GetDeviceSwitchPortsStatuses200ApplicationJSONDuplexEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		fallthrough
	case "full":
		fallthrough
	case "half":
		*e = GetDeviceSwitchPortsStatuses200ApplicationJSONDuplexEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeviceSwitchPortsStatuses200ApplicationJSONDuplexEnum: %s", s)
	}
}

// GetDeviceSwitchPortsStatuses200ApplicationJSONLldp - The Link Layer Discovery Protocol (LLDP) information of the connected device.
type GetDeviceSwitchPortsStatuses200ApplicationJSONLldp struct {
	// The device's chassis ID.
	ChassisID *string `json:"chassisId,omitempty"`
	// The device's management IP.
	ManagementAddress *string `json:"managementAddress,omitempty"`
	// The device's management VLAN.
	ManagementVlan *int64 `json:"managementVlan,omitempty"`
	// Description of the port from which the LLDP packet was sent.
	PortDescription *string `json:"portDescription,omitempty"`
	// Identifies the port from which the LLDP packet was sent
	PortID *string `json:"portId,omitempty"`
	// The port's VLAN.
	PortVlan *int64 `json:"portVlan,omitempty"`
	// Identifies the device type, which indicates the functional capabilities of the device.
	SystemCapabilities *string `json:"systemCapabilities,omitempty"`
	// The device's system description.
	SystemDescription *string `json:"systemDescription,omitempty"`
	// The device's system name.
	SystemName *string `json:"systemName,omitempty"`
}

// GetDeviceSwitchPortsStatuses200ApplicationJSONSecurePortAuthenticationStatusEnum - The current Secure Port status.
type GetDeviceSwitchPortsStatuses200ApplicationJSONSecurePortAuthenticationStatusEnum string

const (
	GetDeviceSwitchPortsStatuses200ApplicationJSONSecurePortAuthenticationStatusEnumAuthenticationFailure    GetDeviceSwitchPortsStatuses200ApplicationJSONSecurePortAuthenticationStatusEnum = "Authentication failure"
	GetDeviceSwitchPortsStatuses200ApplicationJSONSecurePortAuthenticationStatusEnumAuthenticationInProgress GetDeviceSwitchPortsStatuses200ApplicationJSONSecurePortAuthenticationStatusEnum = "Authentication in progress"
	GetDeviceSwitchPortsStatuses200ApplicationJSONSecurePortAuthenticationStatusEnumAuthenticationSuccessful GetDeviceSwitchPortsStatuses200ApplicationJSONSecurePortAuthenticationStatusEnum = "Authentication successful"
	GetDeviceSwitchPortsStatuses200ApplicationJSONSecurePortAuthenticationStatusEnumAuthenticationTimedOut   GetDeviceSwitchPortsStatuses200ApplicationJSONSecurePortAuthenticationStatusEnum = "Authentication timed out"
	GetDeviceSwitchPortsStatuses200ApplicationJSONSecurePortAuthenticationStatusEnumDisabled                 GetDeviceSwitchPortsStatuses200ApplicationJSONSecurePortAuthenticationStatusEnum = "Disabled"
	GetDeviceSwitchPortsStatuses200ApplicationJSONSecurePortAuthenticationStatusEnumEnabled                  GetDeviceSwitchPortsStatuses200ApplicationJSONSecurePortAuthenticationStatusEnum = "Enabled"
)

func (e *GetDeviceSwitchPortsStatuses200ApplicationJSONSecurePortAuthenticationStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failure":
		fallthrough
	case "Authentication in progress":
		fallthrough
	case "Authentication successful":
		fallthrough
	case "Authentication timed out":
		fallthrough
	case "Disabled":
		fallthrough
	case "Enabled":
		*e = GetDeviceSwitchPortsStatuses200ApplicationJSONSecurePortAuthenticationStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeviceSwitchPortsStatuses200ApplicationJSONSecurePortAuthenticationStatusEnum: %s", s)
	}
}

// GetDeviceSwitchPortsStatuses200ApplicationJSONSecurePortConfigOverridesTypeEnum - The type of the  ('trunk' or 'access').
type GetDeviceSwitchPortsStatuses200ApplicationJSONSecurePortConfigOverridesTypeEnum string

const (
	GetDeviceSwitchPortsStatuses200ApplicationJSONSecurePortConfigOverridesTypeEnumAccess GetDeviceSwitchPortsStatuses200ApplicationJSONSecurePortConfigOverridesTypeEnum = "access"
	GetDeviceSwitchPortsStatuses200ApplicationJSONSecurePortConfigOverridesTypeEnumTrunk  GetDeviceSwitchPortsStatuses200ApplicationJSONSecurePortConfigOverridesTypeEnum = "trunk"
)

func (e *GetDeviceSwitchPortsStatuses200ApplicationJSONSecurePortConfigOverridesTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "access":
		fallthrough
	case "trunk":
		*e = GetDeviceSwitchPortsStatuses200ApplicationJSONSecurePortConfigOverridesTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeviceSwitchPortsStatuses200ApplicationJSONSecurePortConfigOverridesTypeEnum: %s", s)
	}
}

// GetDeviceSwitchPortsStatuses200ApplicationJSONSecurePortConfigOverrides - The configuration overrides applied to this port when Secure Port is active.
type GetDeviceSwitchPortsStatuses200ApplicationJSONSecurePortConfigOverrides struct {
	// The VLANs allowed on the . Only applicable to trunk ports.
	AllowedVlans *string `json:"allowedVlans,omitempty"`
	// The type of the  ('trunk' or 'access').
	Type *GetDeviceSwitchPortsStatuses200ApplicationJSONSecurePortConfigOverridesTypeEnum `json:"type,omitempty"`
	// The VLAN of the . A null value will clear the value set for trunk ports.
	Vlan *int64 `json:"vlan,omitempty"`
	// The voice VLAN of the . Only applicable to access ports.
	VoiceVlan *int64 `json:"voiceVlan,omitempty"`
}

// GetDeviceSwitchPortsStatuses200ApplicationJSONSecurePort - The Secure Port status of the port.
type GetDeviceSwitchPortsStatuses200ApplicationJSONSecurePort struct {
	// Whether Secure Port is currently active for this port.
	Active *bool `json:"active,omitempty"`
	// The current Secure Port status.
	AuthenticationStatus *GetDeviceSwitchPortsStatuses200ApplicationJSONSecurePortAuthenticationStatusEnum `json:"authenticationStatus,omitempty"`
	// The configuration overrides applied to this port when Secure Port is active.
	ConfigOverrides *GetDeviceSwitchPortsStatuses200ApplicationJSONSecurePortConfigOverrides `json:"configOverrides,omitempty"`
	// Whether Secure Port is turned on for this port.
	Enabled *bool `json:"enabled,omitempty"`
}

// GetDeviceSwitchPortsStatuses200ApplicationJSONSpeedEnum - The current data transfer rate which the port is operating at.
type GetDeviceSwitchPortsStatuses200ApplicationJSONSpeedEnum string

const (
	GetDeviceSwitchPortsStatuses200ApplicationJSONSpeedEnumUnknown        GetDeviceSwitchPortsStatuses200ApplicationJSONSpeedEnum = ""
	GetDeviceSwitchPortsStatuses200ApplicationJSONSpeedEnumOneGbps        GetDeviceSwitchPortsStatuses200ApplicationJSONSpeedEnum = "1 Gbps"
	GetDeviceSwitchPortsStatuses200ApplicationJSONSpeedEnumTenGbps        GetDeviceSwitchPortsStatuses200ApplicationJSONSpeedEnum = "10 Gbps"
	GetDeviceSwitchPortsStatuses200ApplicationJSONSpeedEnumTenMbps        GetDeviceSwitchPortsStatuses200ApplicationJSONSpeedEnum = "10 Mbps"
	GetDeviceSwitchPortsStatuses200ApplicationJSONSpeedEnumOneHundredGbps GetDeviceSwitchPortsStatuses200ApplicationJSONSpeedEnum = "100 Gbps"
	GetDeviceSwitchPortsStatuses200ApplicationJSONSpeedEnumOneHundredMbps GetDeviceSwitchPortsStatuses200ApplicationJSONSpeedEnum = "100 Mbps"
	GetDeviceSwitchPortsStatuses200ApplicationJSONSpeedEnumTwo5Gbps       GetDeviceSwitchPortsStatuses200ApplicationJSONSpeedEnum = "2.5 Gbps"
	GetDeviceSwitchPortsStatuses200ApplicationJSONSpeedEnumTwentyGbps     GetDeviceSwitchPortsStatuses200ApplicationJSONSpeedEnum = "20 Gbps"
	GetDeviceSwitchPortsStatuses200ApplicationJSONSpeedEnumFortyGbps      GetDeviceSwitchPortsStatuses200ApplicationJSONSpeedEnum = "40 Gbps"
	GetDeviceSwitchPortsStatuses200ApplicationJSONSpeedEnumFiveGbps       GetDeviceSwitchPortsStatuses200ApplicationJSONSpeedEnum = "5 Gbps"
)

func (e *GetDeviceSwitchPortsStatuses200ApplicationJSONSpeedEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		fallthrough
	case "1 Gbps":
		fallthrough
	case "10 Gbps":
		fallthrough
	case "10 Mbps":
		fallthrough
	case "100 Gbps":
		fallthrough
	case "100 Mbps":
		fallthrough
	case "2.5 Gbps":
		fallthrough
	case "20 Gbps":
		fallthrough
	case "40 Gbps":
		fallthrough
	case "5 Gbps":
		*e = GetDeviceSwitchPortsStatuses200ApplicationJSONSpeedEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeviceSwitchPortsStatuses200ApplicationJSONSpeedEnum: %s", s)
	}
}

// GetDeviceSwitchPortsStatuses200ApplicationJSONStatusEnum - The current connection status of the port.
type GetDeviceSwitchPortsStatuses200ApplicationJSONStatusEnum string

const (
	GetDeviceSwitchPortsStatuses200ApplicationJSONStatusEnumConnected    GetDeviceSwitchPortsStatuses200ApplicationJSONStatusEnum = "Connected"
	GetDeviceSwitchPortsStatuses200ApplicationJSONStatusEnumDisabled     GetDeviceSwitchPortsStatuses200ApplicationJSONStatusEnum = "Disabled"
	GetDeviceSwitchPortsStatuses200ApplicationJSONStatusEnumDisconnected GetDeviceSwitchPortsStatuses200ApplicationJSONStatusEnum = "Disconnected"
)

func (e *GetDeviceSwitchPortsStatuses200ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Connected":
		fallthrough
	case "Disabled":
		fallthrough
	case "Disconnected":
		*e = GetDeviceSwitchPortsStatuses200ApplicationJSONStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeviceSwitchPortsStatuses200ApplicationJSONStatusEnum: %s", s)
	}
}

// GetDeviceSwitchPortsStatuses200ApplicationJSONTrafficInKbps - A breakdown of the average speed of data that has passed through this port during the timespan.
type GetDeviceSwitchPortsStatuses200ApplicationJSONTrafficInKbps struct {
	// The average speed of the data received (in kilobits-per-second).
	Recv *float32 `json:"recv,omitempty"`
	// The average speed of the data sent (in kilobits-per-second).
	Sent *float32 `json:"sent,omitempty"`
	// The average speed of the data sent and received (in kilobits-per-second).
	Total *float32 `json:"total,omitempty"`
}

// GetDeviceSwitchPortsStatuses200ApplicationJSONUsageInKb - A breakdown of how many kilobytes have passed through this port during the timespan.
type GetDeviceSwitchPortsStatuses200ApplicationJSONUsageInKb struct {
	// The amount of data received (in kilobytes).
	Recv *int64 `json:"recv,omitempty"`
	// The amount of data sent (in kilobytes).
	Sent *int64 `json:"sent,omitempty"`
	// The total amount of data sent and received (in kilobytes).
	Total *int64 `json:"total,omitempty"`
}

type GetDeviceSwitchPortsStatuses200ApplicationJSON struct {
	// The Cisco Discovery Protocol (CDP) information of the connected device.
	Cdp *GetDeviceSwitchPortsStatuses200ApplicationJSONCdp `json:"cdp,omitempty"`
	// The number of clients connected through this port.
	ClientCount *int64 `json:"clientCount,omitempty"`
	// The current duplex of a connected port.
	Duplex *GetDeviceSwitchPortsStatuses200ApplicationJSONDuplexEnum `json:"duplex,omitempty"`
	// Whether the port is configured to be enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// All errors present on the port.
	Errors []string `json:"errors,omitempty"`
	// Whether the port is the switch's uplink.
	IsUplink *bool `json:"isUplink,omitempty"`
	// The Link Layer Discovery Protocol (LLDP) information of the connected device.
	Lldp *GetDeviceSwitchPortsStatuses200ApplicationJSONLldp `json:"lldp,omitempty"`
	// The string identifier of this port on the switch. This is commonly just the port number but may contain additional identifying information such as the slot and module-type if the port is located on a port module.
	PortID *string `json:"portId,omitempty"`
	// How much power (in watt-hours) has been delivered by this port during the timespan.
	PowerUsageInWh *float32 `json:"powerUsageInWh,omitempty"`
	// The Secure Port status of the port.
	SecurePort *GetDeviceSwitchPortsStatuses200ApplicationJSONSecurePort `json:"securePort,omitempty"`
	// The current data transfer rate which the port is operating at.
	Speed *GetDeviceSwitchPortsStatuses200ApplicationJSONSpeedEnum `json:"speed,omitempty"`
	// The current connection status of the port.
	Status *GetDeviceSwitchPortsStatuses200ApplicationJSONStatusEnum `json:"status,omitempty"`
	// A breakdown of the average speed of data that has passed through this port during the timespan.
	TrafficInKbps *GetDeviceSwitchPortsStatuses200ApplicationJSONTrafficInKbps `json:"trafficInKbps,omitempty"`
	// A breakdown of how many kilobytes have passed through this port during the timespan.
	UsageInKb *GetDeviceSwitchPortsStatuses200ApplicationJSONUsageInKb `json:"usageInKb,omitempty"`
	// All warnings present on the port.
	Warnings []string `json:"warnings,omitempty"`
}

type GetDeviceSwitchPortsStatusesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	GetDeviceSwitchPortsStatuses200ApplicationJSONObjects []GetDeviceSwitchPortsStatuses200ApplicationJSON
}
