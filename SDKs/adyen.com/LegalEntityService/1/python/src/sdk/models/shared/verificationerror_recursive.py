"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import remediatingaction as shared_remediatingaction
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class VerificationErrorRecursiveCapabilitiesEnum(str, Enum):
    ACCEPT_EXTERNAL_FUNDING = 'acceptExternalFunding'
    ACCEPT_PSP_FUNDING = 'acceptPspFunding'
    ACCEPT_TRANSACTION_IN_RESTRICTED_COUNTRIES = 'acceptTransactionInRestrictedCountries'
    ACCEPT_TRANSACTION_IN_RESTRICTED_COUNTRIES_COMMERCIAL = 'acceptTransactionInRestrictedCountriesCommercial'
    ACCEPT_TRANSACTION_IN_RESTRICTED_COUNTRIES_CONSUMER = 'acceptTransactionInRestrictedCountriesConsumer'
    ACCEPT_TRANSACTION_IN_RESTRICTED_INDUSTRIES = 'acceptTransactionInRestrictedIndustries'
    ACCEPT_TRANSACTION_IN_RESTRICTED_INDUSTRIES_COMMERCIAL = 'acceptTransactionInRestrictedIndustriesCommercial'
    ACCEPT_TRANSACTION_IN_RESTRICTED_INDUSTRIES_CONSUMER = 'acceptTransactionInRestrictedIndustriesConsumer'
    ACQUIRING = 'acquiring'
    ATM_WITHDRAWAL = 'atmWithdrawal'
    ATM_WITHDRAWAL_COMMERCIAL = 'atmWithdrawalCommercial'
    ATM_WITHDRAWAL_CONSUMER = 'atmWithdrawalConsumer'
    ATM_WITHDRAWAL_IN_RESTRICTED_COUNTRIES = 'atmWithdrawalInRestrictedCountries'
    ATM_WITHDRAWAL_IN_RESTRICTED_COUNTRIES_COMMERCIAL = 'atmWithdrawalInRestrictedCountriesCommercial'
    ATM_WITHDRAWAL_IN_RESTRICTED_COUNTRIES_CONSUMER = 'atmWithdrawalInRestrictedCountriesConsumer'
    AUTHORISED_PAYMENT_INSTRUMENT_USER = 'authorisedPaymentInstrumentUser'
    GET_GRANT_OFFERS = 'getGrantOffers'
    ISSUE_BANK_ACCOUNT = 'issueBankAccount'
    ISSUE_CARD = 'issueCard'
    ISSUE_CARD_COMMERCIAL = 'issueCardCommercial'
    ISSUE_CARD_CONSUMER = 'issueCardConsumer'
    LOCAL_ACCEPTANCE = 'localAcceptance'
    PAYOUT = 'payout'
    PAYOUT_TO_TRANSFER_INSTRUMENT = 'payoutToTransferInstrument'
    PROCESSING = 'processing'
    RECEIVE_FROM_BALANCE_ACCOUNT = 'receiveFromBalanceAccount'
    RECEIVE_FROM_PLATFORM_PAYMENTS = 'receiveFromPlatformPayments'
    RECEIVE_FROM_THIRD_PARTY = 'receiveFromThirdParty'
    RECEIVE_FROM_TRANSFER_INSTRUMENT = 'receiveFromTransferInstrument'
    RECEIVE_GRANTS = 'receiveGrants'
    RECEIVE_PAYMENTS = 'receivePayments'
    SEND_TO_BALANCE_ACCOUNT = 'sendToBalanceAccount'
    SEND_TO_THIRD_PARTY = 'sendToThirdParty'
    SEND_TO_TRANSFER_INSTRUMENT = 'sendToTransferInstrument'
    THIRD_PARTY_FUNDING = 'thirdPartyFunding'
    USE_CARD = 'useCard'
    USE_CARD_COMMERCIAL = 'useCardCommercial'
    USE_CARD_CONSUMER = 'useCardConsumer'
    USE_CARD_IN_RESTRICTED_COUNTRIES = 'useCardInRestrictedCountries'
    USE_CARD_IN_RESTRICTED_COUNTRIES_COMMERCIAL = 'useCardInRestrictedCountriesCommercial'
    USE_CARD_IN_RESTRICTED_COUNTRIES_CONSUMER = 'useCardInRestrictedCountriesConsumer'
    USE_CARD_IN_RESTRICTED_INDUSTRIES = 'useCardInRestrictedIndustries'
    USE_CARD_IN_RESTRICTED_INDUSTRIES_COMMERCIAL = 'useCardInRestrictedIndustriesCommercial'
    USE_CARD_IN_RESTRICTED_INDUSTRIES_CONSUMER = 'useCardInRestrictedIndustriesConsumer'
    WITHDRAW_FROM_ATM = 'withdrawFromAtm'
    WITHDRAW_FROM_ATM_COMMERCIAL = 'withdrawFromAtmCommercial'
    WITHDRAW_FROM_ATM_CONSUMER = 'withdrawFromAtmConsumer'
    WITHDRAW_FROM_ATM_IN_RESTRICTED_COUNTRIES = 'withdrawFromAtmInRestrictedCountries'
    WITHDRAW_FROM_ATM_IN_RESTRICTED_COUNTRIES_COMMERCIAL = 'withdrawFromAtmInRestrictedCountriesCommercial'
    WITHDRAW_FROM_ATM_IN_RESTRICTED_COUNTRIES_CONSUMER = 'withdrawFromAtmInRestrictedCountriesConsumer'

class VerificationErrorRecursiveTypeEnum(str, Enum):
    r"""The type of error."""
    DATA_MISSING = 'dataMissing'
    INVALID_INPUT = 'invalidInput'
    PENDING_STATUS = 'pendingStatus'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VerificationErrorRecursive:
    
    capabilities: Optional[list[VerificationErrorRecursiveCapabilitiesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('capabilities'), 'exclude': lambda f: f is None }})
    r"""Contains key-value pairs that specify the actions that the legal entity can do in your platform. The key is a capability required for your integration. For example, **issueCard** for Issuing.The value is an object containing the settings for the capability."""  
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""The general error code."""  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    r"""The general error message."""  
    remediating_actions: Optional[list[shared_remediatingaction.RemediatingAction]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remediatingActions'), 'exclude': lambda f: f is None }})
    r"""An object containing possible solutions to fix a verification error."""  
    type: Optional[VerificationErrorRecursiveTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of error."""  
    