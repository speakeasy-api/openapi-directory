// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UpdateLifecyclePolicyRequestBodyPolicyDetails -  <b>[All policy types]</b> Specifies the configuration of a lifecycle policy.
type UpdateLifecyclePolicyRequestBodyPolicyDetails struct {
	Actions           []shared.Action                     `json:"Actions,omitempty"`
	EventSource       *shared.EventSource                 `json:"EventSource,omitempty"`
	Parameters        *shared.Parameters                  `json:"Parameters,omitempty"`
	PolicyType        *shared.PolicyTypeValuesEnum        `json:"PolicyType,omitempty"`
	ResourceLocations []shared.ResourceLocationValuesEnum `json:"ResourceLocations,omitempty"`
	ResourceTypes     []shared.ResourceTypeValuesEnum     `json:"ResourceTypes,omitempty"`
	Schedules         []shared.Schedule                   `json:"Schedules,omitempty"`
	TargetTags        []shared.Tag                        `json:"TargetTags,omitempty"`
}

// UpdateLifecyclePolicyRequestBodyStateEnum - The desired activation state of the lifecycle policy after creation.
type UpdateLifecyclePolicyRequestBodyStateEnum string

const (
	UpdateLifecyclePolicyRequestBodyStateEnumEnabled  UpdateLifecyclePolicyRequestBodyStateEnum = "ENABLED"
	UpdateLifecyclePolicyRequestBodyStateEnumDisabled UpdateLifecyclePolicyRequestBodyStateEnum = "DISABLED"
)

func (e UpdateLifecyclePolicyRequestBodyStateEnum) ToPointer() *UpdateLifecyclePolicyRequestBodyStateEnum {
	return &e
}

func (e *UpdateLifecyclePolicyRequestBodyStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ENABLED":
		fallthrough
	case "DISABLED":
		*e = UpdateLifecyclePolicyRequestBodyStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateLifecyclePolicyRequestBodyStateEnum: %v", v)
	}
}

type UpdateLifecyclePolicyRequestBody struct {
	// A description of the lifecycle policy.
	Description *string `json:"Description,omitempty"`
	// The Amazon Resource Name (ARN) of the IAM role used to run the operations specified by the lifecycle policy.
	ExecutionRoleArn *string `json:"ExecutionRoleArn,omitempty"`
	//  <b>[All policy types]</b> Specifies the configuration of a lifecycle policy.
	PolicyDetails *UpdateLifecyclePolicyRequestBodyPolicyDetails `json:"PolicyDetails,omitempty"`
	// The desired activation state of the lifecycle policy after creation.
	State *UpdateLifecyclePolicyRequestBodyStateEnum `json:"State,omitempty"`
}

type UpdateLifecyclePolicyRequest struct {
	RequestBody       UpdateLifecyclePolicyRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                          `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                          `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                          `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                          `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                          `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                          `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                          `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// The identifier of the lifecycle policy.
	PolicyID string `pathParam:"style=simple,explode=false,name=policyId"`
}

type UpdateLifecyclePolicyResponse struct {
	ContentType string
	// InternalServerException
	InternalServerException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	StatusCode             int
	RawResponse            *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// Success
	UpdateLifecyclePolicyResponse map[string]interface{}
}
