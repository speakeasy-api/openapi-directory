/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * A payee is a person you wish to transfer money to. In this section you will find API opertions for working with Payees.
 *
 * @remarks
 *
 */
export class Payees {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete Payee by Id
   *
   * @remarks
   * <p>Use v4 instead</p>
   * <p>This API will delete Payee by Id (UUID). Deletion by ID is not allowed if:</p>
   * <p>* Payee ID is not found</p>
   * <p>* If Payee has not been on-boarded</p>
   * <p>* If Payee is in grace period</p>
   * <p>* If Payee has existing payments</p>
   *
   */
  deletePayeeByIdV3(
    req: operations.DeletePayeeByIdV3Request,
    config?: AxiosRequestConfig
  ): Promise<operations.DeletePayeeByIdV3Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeletePayeeByIdV3Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v3/payees/{payeeId}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeletePayeeByIdV3Response =
        new operations.DeletePayeeByIdV3Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 400, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Delete Payee by Id
   *
   * @remarks
   * <p>This API will delete Payee by Id (UUID). Deletion by ID is not allowed if:</p>
   * <p>* Payee ID is not found</p>
   * <p>* If Payee has not been on-boarded</p>
   * <p>* If Payee is in grace period</p>
   * <p>* If Payee has existing payments</p>
   *
   */
  deletePayeeByIdV4(
    req: operations.DeletePayeeByIdV4Request,
    config?: AxiosRequestConfig
  ): Promise<operations.DeletePayeeByIdV4Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeletePayeeByIdV4Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v4/payees/{payeeId}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeletePayeeByIdV4Response =
        new operations.DeletePayeeByIdV4Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 400, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get Payee by Id
   *
   * @remarks
   * <p>Use v4 instead</p>
   * <p>Get Payee by Id</p>
   *
   */
  getPayeeByIdV3(
    req: operations.GetPayeeByIdV3Request,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPayeeByIdV3Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPayeeByIdV3Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v3/payees/{payeeId}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPayeeByIdV3Response =
        new operations.GetPayeeByIdV3Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.payeeDetailResponseV3 = utils.objectToClass(
              httpRes?.data,
              shared.PayeeDetailResponseV3
            );
          }
          break;
        case httpRes?.status == 404:
          break;
      }

      return res;
    });
  }

  /**
   * Get Payee by Id
   *
   * @remarks
   * Get Payee by Id
   */
  getPayeeByIdV4(
    req: operations.GetPayeeByIdV4Request,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPayeeByIdV4Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPayeeByIdV4Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v4/payees/{payeeId}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPayeeByIdV4Response =
        new operations.GetPayeeByIdV4Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.payeeDetailResponseV4 = utils.objectToClass(
              httpRes?.data,
              shared.PayeeDetailResponseV4
            );
          }
          break;
        case httpRes?.status == 404:
          break;
      }

      return res;
    });
  }

  /**
   * List Payee Changes
   *
   * @remarks
   * <p>Use v4 instead</p>
   * <p>Get a paginated response listing payee changes.</p>
   *
   */
  listPayeeChangesV3(
    req: operations.ListPayeeChangesV3Request,
    config?: AxiosRequestConfig
  ): Promise<operations.ListPayeeChangesV3Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListPayeeChangesV3Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v3/payees/deltas";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListPayeeChangesV3Response =
        new operations.ListPayeeChangesV3Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.payeeDeltaResponseV3 = utils.objectToClass(
              httpRes?.data,
              shared.PayeeDeltaResponseV3
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * List Payee Changes
   *
   * @remarks
   * Get a paginated response listing payee changes (updated since a particular time) to a limited set of fields:
   * - dbaName
   * - displayName
   * - email
   * - onboardedStatus
   * - payeeCountry
   * - payeeId
   * - remoteId
   *
   */
  listPayeeChangesV4(
    req: operations.ListPayeeChangesV4Request,
    config?: AxiosRequestConfig
  ): Promise<operations.ListPayeeChangesV4Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListPayeeChangesV4Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v4/payees/deltas";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListPayeeChangesV4Response =
        new operations.ListPayeeChangesV4Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.payeeDeltaResponseV4 = utils.objectToClass(
              httpRes?.data,
              shared.PayeeDeltaResponseV4
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * List Payees
   *
   * @remarks
   * <p>Use v4 instead</p>
   * Get a paginated response listing the payees for a payor.
   *
   */
  listPayeesV3(
    req: operations.ListPayeesV3Request,
    config?: AxiosRequestConfig
  ): Promise<operations.ListPayeesV3Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListPayeesV3Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v3/payees";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListPayeesV3Response =
        new operations.ListPayeesV3Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pagedPayeeResponseV3 = utils.objectToClass(
              httpRes?.data,
              shared.PagedPayeeResponseV3
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse400 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse400
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse401 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse401
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse403 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse403
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse404 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse404
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List Payees
   *
   * @remarks
   * Get a paginated response listing the payees for a payor.
   */
  listPayeesV4(
    req: operations.ListPayeesV4Request,
    config?: AxiosRequestConfig
  ): Promise<operations.ListPayeesV4Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListPayeesV4Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v4/payees";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListPayeesV4Response =
        new operations.ListPayeesV4Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pagedPayeeResponseV4 = utils.objectToClass(
              httpRes?.data,
              shared.PagedPayeeResponseV4
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse400 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse400
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse401 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse401
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse403 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse403
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse404 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse404
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update Payee Details
   *
   * @remarks
   * <p>Use v4 instead</p>
   * <p>Update payee details for the given Payee Id.<p>
   *
   */
  payeeDetailsUpdateV3(
    req: operations.PayeeDetailsUpdateV3Request,
    config?: AxiosRequestConfig
  ): Promise<operations.PayeeDetailsUpdateV3Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PayeeDetailsUpdateV3Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/payees/{payeeId}/payeeDetailsUpdate",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "updatePayeeDetailsRequestV3Input",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PayeeDetailsUpdateV3Response =
        new operations.PayeeDetailsUpdateV3Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse400 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse400
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse401 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse401
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse403 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse403
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse404 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse404
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update Payee Details
   *
   * @remarks
   * <p>Update payee details for the given Payee Id.</p>
   * <p>Payors may only update the payee details if the payee has not yet onboarded</p>
   *
   */
  payeeDetailsUpdateV4(
    req: operations.PayeeDetailsUpdateV4Request,
    config?: AxiosRequestConfig
  ): Promise<operations.PayeeDetailsUpdateV4Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PayeeDetailsUpdateV4Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v4/payees/{payeeId}/payeeDetailsUpdate",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "updatePayeeDetailsRequestV4Input",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PayeeDetailsUpdateV4Response =
        new operations.PayeeDetailsUpdateV4Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse400 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse400
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse401 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse401
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse403 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse403
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse404 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse404
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update Payee Remote Id
   *
   * @remarks
   * <p>Use v4 instead</p>
   * <p>Update the remote Id for the given Payee Id.</p>
   *
   */
  postV3PayeesPayeeIdRemoteIdUpdate(
    req: operations.PostV3PayeesPayeeIdRemoteIdUpdateRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostV3PayeesPayeeIdRemoteIdUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostV3PayeesPayeeIdRemoteIdUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/payees/{payeeId}/remoteIdUpdate",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "updateRemoteIdRequestV3",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostV3PayeesPayeeIdRemoteIdUpdateResponse =
        new operations.PostV3PayeesPayeeIdRemoteIdUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse400 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse400
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse401 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse401
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse403 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse403
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse404 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse404
            );
          }
          break;
        case httpRes?.status == 409:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse409 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse409
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update Payee Remote Id
   *
   * @remarks
   * <p>Update the remote Id for the given Payee Id.</p>
   *
   */
  postV4PayeesPayeeIdRemoteIdUpdate(
    req: operations.PostV4PayeesPayeeIdRemoteIdUpdateRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostV4PayeesPayeeIdRemoteIdUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostV4PayeesPayeeIdRemoteIdUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v4/payees/{payeeId}/remoteIdUpdate",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "updateRemoteIdRequestV4",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostV4PayeesPayeeIdRemoteIdUpdateResponse =
        new operations.PostV4PayeesPayeeIdRemoteIdUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse400 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse400
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse401 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse401
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse403 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse403
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse404 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse404
            );
          }
          break;
        case httpRes?.status == 409:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse409 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse409
            );
          }
          break;
      }

      return res;
    });
  }
}
