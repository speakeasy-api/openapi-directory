/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * HookDelivery - Delivery made by a webhook.
 */
public class HookDelivery {
    /**
     * The type of activity for the event that triggered the delivery.
     */
    @JsonProperty("action")
    public String action;
    public HookDelivery withAction(String action) {
        this.action = action;
        return this;
    }
    
    /**
     * Time when the delivery was delivered.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("delivered_at")
    public OffsetDateTime deliveredAt;
    public HookDelivery withDeliveredAt(OffsetDateTime deliveredAt) {
        this.deliveredAt = deliveredAt;
        return this;
    }
    
    /**
     * Time spent delivering.
     */
    @JsonProperty("duration")
    public Double duration;
    public HookDelivery withDuration(Double duration) {
        this.duration = duration;
        return this;
    }
    
    /**
     * The event that triggered the delivery.
     */
    @JsonProperty("event")
    public String event;
    public HookDelivery withEvent(String event) {
        this.event = event;
        return this;
    }
    
    /**
     * Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
     */
    @JsonProperty("guid")
    public String guid;
    public HookDelivery withGuid(String guid) {
        this.guid = guid;
        return this;
    }
    
    /**
     * Unique identifier of the delivery.
     */
    @JsonProperty("id")
    public Long id;
    public HookDelivery withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * The id of the GitHub App installation associated with this event.
     */
    @JsonProperty("installation_id")
    public Long installationId;
    public HookDelivery withInstallationId(Long installationId) {
        this.installationId = installationId;
        return this;
    }
    
    /**
     * Whether the delivery is a redelivery.
     */
    @JsonProperty("redelivery")
    public Boolean redelivery;
    public HookDelivery withRedelivery(Boolean redelivery) {
        this.redelivery = redelivery;
        return this;
    }
    
    /**
     * The id of the repository associated with this event.
     */
    @JsonProperty("repository_id")
    public Long repositoryId;
    public HookDelivery withRepositoryId(Long repositoryId) {
        this.repositoryId = repositoryId;
        return this;
    }
    
    @JsonProperty("request")
    public HookDeliveryRequest request;
    public HookDelivery withRequest(HookDeliveryRequest request) {
        this.request = request;
        return this;
    }
    
    @JsonProperty("response")
    public HookDeliveryResponse response;
    public HookDelivery withResponse(HookDeliveryResponse response) {
        this.response = response;
        return this;
    }
    
    /**
     * Description of the status of the attempted delivery
     */
    @JsonProperty("status")
    public String status;
    public HookDelivery withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     * Status code received when delivery was made.
     */
    @JsonProperty("status_code")
    public Long statusCode;
    public HookDelivery withStatusCode(Long statusCode) {
        this.statusCode = statusCode;
        return this;
    }
    
    /**
     * The URL target of the delivery.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;
    public HookDelivery withUrl(String url) {
        this.url = url;
        return this;
    }
    
}
