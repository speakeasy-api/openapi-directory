/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class PermissionPermissionDetails {
    /**
     * Additional roles for this user. Only commenter is currently possible, though more may be supported in the future.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additionalRoles")
    public String[] additionalRoles;

    public PermissionPermissionDetails withAdditionalRoles(String[] additionalRoles) {
        this.additionalRoles = additionalRoles;
        return this;
    }
    
    /**
     * Whether this permission is inherited. This field is always populated. This is an output-only field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inherited")
    public Boolean inherited;

    public PermissionPermissionDetails withInherited(Boolean inherited) {
        this.inherited = inherited;
        return this;
    }
    
    /**
     * The ID of the item from which this permission is inherited. This is an output-only field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inheritedFrom")
    public String inheritedFrom;

    public PermissionPermissionDetails withInheritedFrom(String inheritedFrom) {
        this.inheritedFrom = inheritedFrom;
        return this;
    }
    
    /**
     * The permission type for this user. While new values may be added in future, the following are currently possible:  
     * - file 
     * - member
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("permissionType")
    public String permissionType;

    public PermissionPermissionDetails withPermissionType(String permissionType) {
        this.permissionType = permissionType;
        return this;
    }
    
    /**
     * The primary role for this user. While new values may be added in the future, the following are currently possible:  
     * - organizer 
     * - fileOrganizer 
     * - writer 
     * - reader
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("role")
    public String role;

    public PermissionPermissionDetails withRole(String role) {
        this.role = role;
        return this;
    }
    
    public PermissionPermissionDetails(){}
}
