/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * LiveBroadcastSnippet - Basic broadcast information.
 */
public class LiveBroadcastSnippet {
    /**
     * The date and time that the broadcast actually ended. This information is only available once the broadcast's state is complete.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("actualEndTime")
    public OffsetDateTime actualEndTime;
    public LiveBroadcastSnippet withActualEndTime(OffsetDateTime actualEndTime) {
        this.actualEndTime = actualEndTime;
        return this;
    }
    
    /**
     * The date and time that the broadcast actually started. This information is only available once the broadcast's state is live.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("actualStartTime")
    public OffsetDateTime actualStartTime;
    public LiveBroadcastSnippet withActualStartTime(OffsetDateTime actualStartTime) {
        this.actualStartTime = actualStartTime;
        return this;
    }
    
    /**
     * The ID that YouTube uses to uniquely identify the channel that is publishing the broadcast.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("channelId")
    public String channelId;
    public LiveBroadcastSnippet withChannelId(String channelId) {
        this.channelId = channelId;
        return this;
    }
    
    /**
     * The broadcast's description. As with the title, you can set this field by modifying the broadcast resource or by setting the description field of the corresponding video resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public LiveBroadcastSnippet withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Indicates whether this broadcast is the default broadcast. Internal only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isDefaultBroadcast")
    public Boolean isDefaultBroadcast;
    public LiveBroadcastSnippet withIsDefaultBroadcast(Boolean isDefaultBroadcast) {
        this.isDefaultBroadcast = isDefaultBroadcast;
        return this;
    }
    
    /**
     * The id of the live chat for this broadcast.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("liveChatId")
    public String liveChatId;
    public LiveBroadcastSnippet withLiveChatId(String liveChatId) {
        this.liveChatId = liveChatId;
        return this;
    }
    
    /**
     * The date and time that the broadcast was added to YouTube's live broadcast schedule.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("publishedAt")
    public OffsetDateTime publishedAt;
    public LiveBroadcastSnippet withPublishedAt(OffsetDateTime publishedAt) {
        this.publishedAt = publishedAt;
        return this;
    }
    
    /**
     * The date and time that the broadcast is scheduled to end.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("scheduledEndTime")
    public OffsetDateTime scheduledEndTime;
    public LiveBroadcastSnippet withScheduledEndTime(OffsetDateTime scheduledEndTime) {
        this.scheduledEndTime = scheduledEndTime;
        return this;
    }
    
    /**
     * The date and time that the broadcast is scheduled to start.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("scheduledStartTime")
    public OffsetDateTime scheduledStartTime;
    public LiveBroadcastSnippet withScheduledStartTime(OffsetDateTime scheduledStartTime) {
        this.scheduledStartTime = scheduledStartTime;
        return this;
    }
    
    /**
     * Internal representation of thumbnails for a YouTube resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumbnails")
    public ThumbnailDetails thumbnails;
    public LiveBroadcastSnippet withThumbnails(ThumbnailDetails thumbnails) {
        this.thumbnails = thumbnails;
        return this;
    }
    
    /**
     * The broadcast's title. Note that the broadcast represents exactly one YouTube video. You can set this field by modifying the broadcast resource or by setting the title field of the corresponding video resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;
    public LiveBroadcastSnippet withTitle(String title) {
        this.title = title;
        return this;
    }
    
}
