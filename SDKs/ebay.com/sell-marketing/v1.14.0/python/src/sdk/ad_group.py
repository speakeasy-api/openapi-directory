"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class AdGroup:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_ad_group(self, request: operations.CreateAdGroupRequest, security: operations.CreateAdGroupSecurity) -> operations.CreateAdGroupResponse:
        r"""<span class=\\"tablenote\\"><b>Note:</b> This method is only available for select partners who have been approved for the eBay Promoted Listings Advanced (PLA) program. For information about how to request access to this program, refer to <a href=\\"/api-docs/sell/static/marketing/pl-verify-eligibility.html#access-requests \\" target=\\"_blank \\"> Promoted Listings Advanced Access Requests</a> in the Promoted Listings Playbook. To determine if a seller qualifies for PLA, use the <a href=\\"/api-docs/sell/account/resources/advertising_eligibility/methods/getAdvertisingEligibility \\" target=\\"_blank \\">getAdvertisingEligibility</a> method in Account API.</span><br />This method adds an ad group to an existing PLA campaign that uses the Cost Per Click (CPC) funding model.<br /><br />To create an ad group for a campaign, specify the <b>defaultBid</b> for the ad group in the payload of the request. Then specify the campaign to which the ad group should be associated using the <b>campaign_id</b> path parameter.<br /><br />Each campaign can have one or more associated ad groups."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateAdGroupRequest, base_url, '/ad_campaign/{campaign_id}/ad_group', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_ad_group_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateAdGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.create_ad_group_201_application_json_object = out
        elif http_res.status_code in [400, 404, 409, 500]:
            pass

        return res

    def get_ad_group(self, request: operations.GetAdGroupRequest, security: operations.GetAdGroupSecurity) -> operations.GetAdGroupResponse:
        r"""<span class=\\"tablenote\\"><b>Note:</b> This method is only available for select partners who have been approved for the eBay Promoted Listings Advanced (PLA) program. For information about how to request access to this program, refer to <a href=\\"/api-docs/sell/static/marketing/pl-verify-eligibility.html#access-requests \\" target=\\"_blank \\"> Promoted Listings Advanced Access Requests</a> in the Promoted Listings Playbook. To determine if a seller qualifies for PLA, use the <a href=\\"/api-docs/sell/account/resources/advertising_eligibility/methods/getAdvertisingEligibility \\" target=\\"_blank \\">getAdvertisingEligibility</a> method in Account API.</span><br />This method retrieves the details of a specified ad group, such as the ad groupâ€™s default bid and status.<br /><br />In the request, specify the <b>campaign_id</b> and <b>ad_group_id</b> as path parameters.<br /><br />Call <a href=\\"/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\\">getCampaigns</a> to retrieve a list of the current campaign IDs for a seller and call <a href=\\"/api-docs/sell/marketing/resources/adgroup/methods/getAdGroups\\">getAdGroups</a> for the ad group ID of the ad group you wish to retrieve."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAdGroupRequest, base_url, '/ad_campaign/{campaign_id}/ad_group/{ad_group_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAdGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AdGroup])
                res.ad_group = out
        elif http_res.status_code in [400, 404, 409, 500]:
            pass

        return res

    def get_ad_groups(self, request: operations.GetAdGroupsRequest, security: operations.GetAdGroupsSecurity) -> operations.GetAdGroupsResponse:
        r"""<span class=\\"tablenote\\"><b>Note:</b> This method is only available for select partners who have been approved for the eBay Promoted Listings Advanced (PLA) program. For information about how to request access to this program, refer to <a href=\\"/api-docs/sell/static/marketing/pl-verify-eligibility.html#access-requests \\" target=\\"_blank \\"> Promoted Listings Advanced Access Requests</a> in the Promoted Listings Playbook. To determine if a seller qualifies for PLA, use the <a href=\\"/api-docs/sell/account/resources/advertising_eligibility/methods/getAdvertisingEligibility \\" target=\\"_blank \\">getAdvertisingEligibility</a> method in Account API.</span><br />This method retrieves ad groups for the specified campaigns.<br /><br />Each campaign can only have <b>one</b> ad group.<br /><br />In the request, supply the <b>campaign_ids</b> as path parameters.<br /><br />Call <a href=\\"/api-docs/sell/marketing/resources/campaign/methods/getCampaigns\\">getCampaigns</a> to retrieve a list of the current campaign IDs for a seller."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAdGroupsRequest, base_url, '/ad_campaign/{campaign_id}/ad_group', request)
        
        query_params = utils.get_query_params(operations.GetAdGroupsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAdGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AdGroupPagedCollectionResponse])
                res.ad_group_paged_collection_response = out
        elif http_res.status_code in [400, 404, 409, 500]:
            pass

        return res

    def suggest_bids(self, request: operations.SuggestBidsRequest, security: operations.SuggestBidsSecurity) -> operations.SuggestBidsResponse:
        r"""<span class=\\"tablenote\\"><b>Note:</b> This method is only available for select partners who have been approved for the eBay Promoted Listings Advanced (PLA) program. For information about how to request access to this program, refer to <a href=\\"/api-docs/sell/static/marketing/pl-verify-eligibility.html#access-requests \\" target=\\"_blank \\"> Promoted Listings Advanced Access Requests</a> in the Promoted Listings Playbook. To determine if a seller qualifies for PLA, use the <a href=\\"/api-docs/sell/account/resources/advertising_eligibility/methods/getAdvertisingEligibility \\" target=\\"_blank \\">getAdvertisingEligibility</a> method in Account API.</span><br />This method allows sellers to retrieve the suggested bids for input keywords and match type."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SuggestBidsRequest, base_url, '/ad_campaign/{campaign_id}/ad_group/{ad_group_id}/suggest_bids', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "targeted_bid_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SuggestBidsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TargetedBidsPagedCollection])
                res.targeted_bids_paged_collection = out
        elif http_res.status_code in [400, 404, 409, 500]:
            pass

        return res

    def suggest_keywords(self, request: operations.SuggestKeywordsRequest, security: operations.SuggestKeywordsSecurity) -> operations.SuggestKeywordsResponse:
        r"""<span class=\\"tablenote\\"><b>Note:</b> This method is only available for select partners who have been approved for the eBay Promoted Listings Advanced (PLA) program. For information about how to request access to this program, refer to <a href=\\"/api-docs/sell/static/marketing/pl-verify-eligibility.html#access-requests \\" target=\\"_blank \\"> Promoted Listings Advanced Access Requests</a> in the Promoted Listings Playbook. To determine if a seller qualifies for PLA, use the <a href=\\"/api-docs/sell/account/resources/advertising_eligibility/methods/getAdvertisingEligibility \\" target=\\"_blank \\">getAdvertisingEligibility</a> method in Account API.</span><br />This method allows sellers to retrieve a list of keyword ideas to be targeted for Promoted Listings campaigns."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SuggestKeywordsRequest, base_url, '/ad_campaign/{campaign_id}/ad_group/{ad_group_id}/suggest_keywords', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "targeted_keyword_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SuggestKeywordsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TargetedKeywordsPagedCollection])
                res.targeted_keywords_paged_collection = out
        elif http_res.status_code in [400, 404, 409, 500]:
            pass

        return res

    def update_ad_group(self, request: operations.UpdateAdGroupRequest, security: operations.UpdateAdGroupSecurity) -> operations.UpdateAdGroupResponse:
        r"""<span class=\\"tablenote\\"><b>Note:</b> This method is only available for select partners who have been approved for the eBay Promoted Listings Advanced (PLA) program. For information about how to request access to this program, refer to <a href=\\"/api-docs/sell/static/marketing/pl-verify-eligibility.html#access-requests \\" target=\\"_blank \\"> Promoted Listings Advanced Access Requests</a> in the Promoted Listings Playbook. To determine if a seller qualifies for PLA, use the <a href=\\"/api-docs/sell/account/resources/advertising_eligibility/methods/getAdvertisingEligibility \\" target=\\"_blank \\">getAdvertisingEligibility</a> method in Account API.</span><br />This method updates the ad group associated with a campaign.<br /><br />With this method, you can modify the <b>default bid</b> for the ad group, change the state of the ad group, or change the name of the ad group. Pass the <b>ad_group_id</b> you want to update as a URI parameter, and configure the <b>adGroupStatus</b> and <b>defaultBid</b> in the request payload.<br /><br />Call <a href=\\"/api-docs/sell/marketing/resources/adgroup/methods/getAdGroup\\">getAdGroup</a> to retrieve the current default bid and status of the ad group that you would like to update."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateAdGroupRequest, base_url, '/ad_campaign/{campaign_id}/ad_group/{ad_group_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_ad_group_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateAdGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    