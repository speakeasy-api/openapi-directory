/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class UpdateNetworkWirelessSsidRequestBody {
    /**
     * The current setting for Active Directory. Only valid if splashPage is 'Password-protected with Active Directory'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("activeDirectory")
    public UpdateNetworkWirelessSsidRequestBodyActiveDirectory activeDirectory;

    public UpdateNetworkWirelessSsidRequestBody withActiveDirectory(UpdateNetworkWirelessSsidRequestBodyActiveDirectory activeDirectory) {
        this.activeDirectory = activeDirectory;
        return this;
    }
    
    /**
     * Boolean indicating whether or not adult content will be blocked
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("adultContentFilteringEnabled")
    public Boolean adultContentFilteringEnabled;

    public UpdateNetworkWirelessSsidRequestBody withAdultContentFilteringEnabled(Boolean adultContentFilteringEnabled) {
        this.adultContentFilteringEnabled = adultContentFilteringEnabled;
        return this;
    }
    
    /**
     * The list of tags and VLAN IDs used for VLAN tagging. This param is only valid when the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("apTagsAndVlanIds")
    public UpdateNetworkWirelessSsidRequestBodyApTagsAndVlanIds[] apTagsAndVlanIds;

    public UpdateNetworkWirelessSsidRequestBody withApTagsAndVlanIds(UpdateNetworkWirelessSsidRequestBodyApTagsAndVlanIds[] apTagsAndVlanIds) {
        this.apTagsAndVlanIds = apTagsAndVlanIds;
        return this;
    }
    
    /**
     * The association control method for the SSID ('open', 'open-enhanced', 'psk', 'open-with-radius', 'open-with-nac', '8021x-meraki', '8021x-nac', '8021x-radius', '8021x-google', '8021x-localradius', 'ipsk-with-radius' or 'ipsk-without-radius')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authMode")
    public UpdateNetworkWirelessSsidRequestBodyAuthModeEnum authMode;

    public UpdateNetworkWirelessSsidRequestBody withAuthMode(UpdateNetworkWirelessSsidRequestBodyAuthModeEnum authMode) {
        this.authMode = authMode;
        return this;
    }
    
    /**
     * Accepts a list of tags for this SSID. If availableOnAllAps is false, then the SSID will only be broadcast by APs with tags matching any of the tags in this list.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("availabilityTags")
    public String[] availabilityTags;

    public UpdateNetworkWirelessSsidRequestBody withAvailabilityTags(String[] availabilityTags) {
        this.availabilityTags = availabilityTags;
        return this;
    }
    
    /**
     * Boolean indicating whether all APs should broadcast the SSID or if it should be restricted to APs matching any availability tags. Can only be false if the SSID has availability tags.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("availableOnAllAps")
    public Boolean availableOnAllAps;

    public UpdateNetworkWirelessSsidRequestBody withAvailableOnAllAps(Boolean availableOnAllAps) {
        this.availableOnAllAps = availableOnAllAps;
        return this;
    }
    
    /**
     * The client-serving radio frequencies of this SSID in the default indoor RF profile. ('Dual band operation', '5 GHz band only' or 'Dual band operation with Band Steering')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bandSelection")
    public String bandSelection;

    public UpdateNetworkWirelessSsidRequestBody withBandSelection(String bandSelection) {
        this.bandSelection = bandSelection;
        return this;
    }
    
    /**
     * The concentrator to use when the ipAssignmentMode is 'Layer 3 roaming with a concentrator' or 'VPN'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("concentratorNetworkId")
    public String concentratorNetworkId;

    public UpdateNetworkWirelessSsidRequestBody withConcentratorNetworkId(String concentratorNetworkId) {
        this.concentratorNetworkId = concentratorNetworkId;
        return this;
    }
    
    /**
     * The default VLAN ID used for 'all other APs'. This param is only valid when the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultVlanId")
    public Long defaultVlanId;

    public UpdateNetworkWirelessSsidRequestBody withDefaultVlanId(Long defaultVlanId) {
        this.defaultVlanId = defaultVlanId;
        return this;
    }
    
    /**
     * Disassociate clients when 'VPN' concentrator failover occurs in order to trigger clients to re-associate and generate new DHCP requests. This param is only valid if ipAssignmentMode is 'VPN'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disassociateClientsOnVpnFailover")
    public Boolean disassociateClientsOnVpnFailover;

    public UpdateNetworkWirelessSsidRequestBody withDisassociateClientsOnVpnFailover(Boolean disassociateClientsOnVpnFailover) {
        this.disassociateClientsOnVpnFailover = disassociateClientsOnVpnFailover;
        return this;
    }
    
    /**
     * DNS servers rewrite settings
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dnsRewrite")
    public UpdateNetworkWirelessSsidRequestBodyDnsRewrite dnsRewrite;

    public UpdateNetworkWirelessSsidRequestBody withDnsRewrite(UpdateNetworkWirelessSsidRequestBodyDnsRewrite dnsRewrite) {
        this.dnsRewrite = dnsRewrite;
        return this;
    }
    
    /**
     * The current setting for 802.11r
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dot11r")
    public UpdateNetworkWirelessSsidRequestBodyDot11r dot11r;

    public UpdateNetworkWirelessSsidRequestBody withDot11r(UpdateNetworkWirelessSsidRequestBodyDot11r dot11r) {
        this.dot11r = dot11r;
        return this;
    }
    
    /**
     * The current setting for Protected Management Frames (802.11w).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dot11w")
    public UpdateNetworkWirelessSsidRequestBodyDot11w dot11w;

    public UpdateNetworkWirelessSsidRequestBody withDot11w(UpdateNetworkWirelessSsidRequestBodyDot11w dot11w) {
        this.dot11w = dot11w;
        return this;
    }
    
    /**
     * Whether or not the SSID is enabled
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enabled")
    public Boolean enabled;

    public UpdateNetworkWirelessSsidRequestBody withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }
    
    /**
     * The psk encryption mode for the SSID ('wep' or 'wpa'). This param is only valid if the authMode is 'psk'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encryptionMode")
    public UpdateNetworkWirelessSsidRequestBodyEncryptionModeEnum encryptionMode;

    public UpdateNetworkWirelessSsidRequestBody withEncryptionMode(UpdateNetworkWirelessSsidRequestBodyEncryptionModeEnum encryptionMode) {
        this.encryptionMode = encryptionMode;
        return this;
    }
    
    /**
     * Whether or not an SSID is accessible by 'enterprise' administrators ('access disabled' or 'access enabled')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enterpriseAdminAccess")
    public UpdateNetworkWirelessSsidRequestBodyEnterpriseAdminAccessEnum enterpriseAdminAccess;

    public UpdateNetworkWirelessSsidRequestBody withEnterpriseAdminAccess(UpdateNetworkWirelessSsidRequestBodyEnterpriseAdminAccessEnum enterpriseAdminAccess) {
        this.enterpriseAdminAccess = enterpriseAdminAccess;
        return this;
    }
    
    /**
     * Ethernet over GRE settings
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gre")
    public UpdateNetworkWirelessSsidRequestBodyGre gre;

    public UpdateNetworkWirelessSsidRequestBody withGre(UpdateNetworkWirelessSsidRequestBodyGre gre) {
        this.gre = gre;
        return this;
    }
    
    /**
     * The client IP assignment mode ('NAT mode', 'Bridge mode', 'Layer 3 roaming', 'Ethernet over GRE', 'Layer 3 roaming with a concentrator' or 'VPN')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ipAssignmentMode")
    public String ipAssignmentMode;

    public UpdateNetworkWirelessSsidRequestBody withIpAssignmentMode(String ipAssignmentMode) {
        this.ipAssignmentMode = ipAssignmentMode;
        return this;
    }
    
    /**
     * Boolean indicating whether Layer 2 LAN isolation should be enabled or disabled. Only configurable when ipAssignmentMode is 'Bridge mode'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lanIsolationEnabled")
    public Boolean lanIsolationEnabled;

    public UpdateNetworkWirelessSsidRequestBody withLanIsolationEnabled(Boolean lanIsolationEnabled) {
        this.lanIsolationEnabled = lanIsolationEnabled;
        return this;
    }
    
    /**
     * The current setting for LDAP. Only valid if splashPage is 'Password-protected with LDAP'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ldap")
    public UpdateNetworkWirelessSsidRequestBodyLdap ldap;

    public UpdateNetworkWirelessSsidRequestBody withLdap(UpdateNetworkWirelessSsidRequestBodyLdap ldap) {
        this.ldap = ldap;
        return this;
    }
    
    /**
     * The current setting for Local Authentication, a built-in RADIUS server on the access point. Only valid if authMode is '8021x-localradius'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("localRadius")
    public UpdateNetworkWirelessSsidRequestBodyLocalRadius localRadius;

    public UpdateNetworkWirelessSsidRequestBody withLocalRadius(UpdateNetworkWirelessSsidRequestBodyLocalRadius localRadius) {
        this.localRadius = localRadius;
        return this;
    }
    
    /**
     * If true, Mandatory DHCP will enforce that clients connecting to this SSID must use the IP address assigned by the DHCP server. Clients who use a static IP address won't be able to associate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mandatoryDhcpEnabled")
    public Boolean mandatoryDhcpEnabled;

    public UpdateNetworkWirelessSsidRequestBody withMandatoryDhcpEnabled(Boolean mandatoryDhcpEnabled) {
        this.mandatoryDhcpEnabled = mandatoryDhcpEnabled;
        return this;
    }
    
    /**
     * The minimum bitrate in Mbps of this SSID in the default indoor RF profile. ('1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minBitrate")
    public Float minBitrate;

    public UpdateNetworkWirelessSsidRequestBody withMinBitrate(Float minBitrate) {
        this.minBitrate = minBitrate;
        return this;
    }
    
    /**
     * The name of the SSID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public UpdateNetworkWirelessSsidRequestBody withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The OAuth settings of this SSID. Only valid if splashPage is 'Google OAuth'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oauth")
    public UpdateNetworkWirelessSsidRequestBodyOauth oauth;

    public UpdateNetworkWirelessSsidRequestBody withOauth(UpdateNetworkWirelessSsidRequestBodyOauth oauth) {
        this.oauth = oauth;
        return this;
    }
    
    /**
     * The download bandwidth limit in Kbps. (0 represents no limit.)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("perClientBandwidthLimitDown")
    public Long perClientBandwidthLimitDown;

    public UpdateNetworkWirelessSsidRequestBody withPerClientBandwidthLimitDown(Long perClientBandwidthLimitDown) {
        this.perClientBandwidthLimitDown = perClientBandwidthLimitDown;
        return this;
    }
    
    /**
     * The upload bandwidth limit in Kbps. (0 represents no limit.)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("perClientBandwidthLimitUp")
    public Long perClientBandwidthLimitUp;

    public UpdateNetworkWirelessSsidRequestBody withPerClientBandwidthLimitUp(Long perClientBandwidthLimitUp) {
        this.perClientBandwidthLimitUp = perClientBandwidthLimitUp;
        return this;
    }
    
    /**
     * The total download bandwidth limit in Kbps. (0 represents no limit.)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("perSsidBandwidthLimitDown")
    public Long perSsidBandwidthLimitDown;

    public UpdateNetworkWirelessSsidRequestBody withPerSsidBandwidthLimitDown(Long perSsidBandwidthLimitDown) {
        this.perSsidBandwidthLimitDown = perSsidBandwidthLimitDown;
        return this;
    }
    
    /**
     * The total upload bandwidth limit in Kbps. (0 represents no limit.)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("perSsidBandwidthLimitUp")
    public Long perSsidBandwidthLimitUp;

    public UpdateNetworkWirelessSsidRequestBody withPerSsidBandwidthLimitUp(Long perSsidBandwidthLimitUp) {
        this.perSsidBandwidthLimitUp = perSsidBandwidthLimitUp;
        return this;
    }
    
    /**
     * The passkey for the SSID. This param is only valid if the authMode is 'psk'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("psk")
    public String psk;

    public UpdateNetworkWirelessSsidRequestBody withPsk(String psk) {
        this.psk = psk;
        return this;
    }
    
    /**
     * Whether or not RADIUS accounting is enabled. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("radiusAccountingEnabled")
    public Boolean radiusAccountingEnabled;

    public UpdateNetworkWirelessSsidRequestBody withRadiusAccountingEnabled(Boolean radiusAccountingEnabled) {
        this.radiusAccountingEnabled = radiusAccountingEnabled;
        return this;
    }
    
    /**
     * The interval (in seconds) in which accounting information is updated and sent to the RADIUS accounting server.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("radiusAccountingInterimInterval")
    public Long radiusAccountingInterimInterval;

    public UpdateNetworkWirelessSsidRequestBody withRadiusAccountingInterimInterval(Long radiusAccountingInterimInterval) {
        this.radiusAccountingInterimInterval = radiusAccountingInterimInterval;
        return this;
    }
    
    /**
     * The RADIUS accounting 802.1X servers to be used for authentication. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius' and radiusAccountingEnabled is 'true'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("radiusAccountingServers")
    public UpdateNetworkWirelessSsidRequestBodyRadiusAccountingServers[] radiusAccountingServers;

    public UpdateNetworkWirelessSsidRequestBody withRadiusAccountingServers(UpdateNetworkWirelessSsidRequestBodyRadiusAccountingServers[] radiusAccountingServers) {
        this.radiusAccountingServers = radiusAccountingServers;
        return this;
    }
    
    /**
     * Specify the RADIUS attribute used to look up group policies ('Filter-Id', 'Reply-Message', 'Airespace-ACL-Name' or 'Aruba-User-Role'). Access points must receive this attribute in the RADIUS Access-Accept message
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("radiusAttributeForGroupPolicies")
    public UpdateNetworkWirelessSsidRequestBodyRadiusAttributeForGroupPoliciesEnum radiusAttributeForGroupPolicies;

    public UpdateNetworkWirelessSsidRequestBody withRadiusAttributeForGroupPolicies(UpdateNetworkWirelessSsidRequestBodyRadiusAttributeForGroupPoliciesEnum radiusAttributeForGroupPolicies) {
        this.radiusAttributeForGroupPolicies = radiusAttributeForGroupPolicies;
        return this;
    }
    
    /**
     * The template of the NAS identifier to be used for RADIUS authentication (ex. $NODE_MAC$:$VAP_NUM$).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("radiusAuthenticationNasId")
    public String radiusAuthenticationNasId;

    public UpdateNetworkWirelessSsidRequestBody withRadiusAuthenticationNasId(String radiusAuthenticationNasId) {
        this.radiusAuthenticationNasId = radiusAuthenticationNasId;
        return this;
    }
    
    /**
     * The template of the called station identifier to be used for RADIUS (ex. $NODE_MAC$:$VAP_NUM$).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("radiusCalledStationId")
    public String radiusCalledStationId;

    public UpdateNetworkWirelessSsidRequestBody withRadiusCalledStationId(String radiusCalledStationId) {
        this.radiusCalledStationId = radiusCalledStationId;
        return this;
    }
    
    /**
     * If true, Meraki devices will act as a RADIUS Dynamic Authorization Server and will respond to RADIUS Change-of-Authorization and Disconnect messages sent by the RADIUS server.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("radiusCoaEnabled")
    public Boolean radiusCoaEnabled;

    public UpdateNetworkWirelessSsidRequestBody withRadiusCoaEnabled(Boolean radiusCoaEnabled) {
        this.radiusCoaEnabled = radiusCoaEnabled;
        return this;
    }
    
    /**
     * This policy determines how authentication requests should be handled in the event that all of the configured RADIUS servers are unreachable ('Deny access' or 'Allow access')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("radiusFailoverPolicy")
    public UpdateNetworkWirelessSsidRequestBodyRadiusFailoverPolicyEnum radiusFailoverPolicy;

    public UpdateNetworkWirelessSsidRequestBody withRadiusFailoverPolicy(UpdateNetworkWirelessSsidRequestBodyRadiusFailoverPolicyEnum radiusFailoverPolicy) {
        this.radiusFailoverPolicy = radiusFailoverPolicy;
        return this;
    }
    
    /**
     * Whether or not higher priority RADIUS servers should be retried after 60 seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("radiusFallbackEnabled")
    public Boolean radiusFallbackEnabled;

    public UpdateNetworkWirelessSsidRequestBody withRadiusFallbackEnabled(Boolean radiusFallbackEnabled) {
        this.radiusFallbackEnabled = radiusFallbackEnabled;
        return this;
    }
    
    /**
     * Whether or not RADIUS Guest VLAN is enabled. This param is only valid if the authMode is 'open-with-radius' and addressing mode is not set to 'isolated' or 'nat' mode
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("radiusGuestVlanEnabled")
    public Boolean radiusGuestVlanEnabled;

    public UpdateNetworkWirelessSsidRequestBody withRadiusGuestVlanEnabled(Boolean radiusGuestVlanEnabled) {
        this.radiusGuestVlanEnabled = radiusGuestVlanEnabled;
        return this;
    }
    
    /**
     * VLAN ID of the RADIUS Guest VLAN. This param is only valid if the authMode is 'open-with-radius' and addressing mode is not set to 'isolated' or 'nat' mode
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("radiusGuestVlanId")
    public Long radiusGuestVlanId;

    public UpdateNetworkWirelessSsidRequestBody withRadiusGuestVlanId(Long radiusGuestVlanId) {
        this.radiusGuestVlanId = radiusGuestVlanId;
        return this;
    }
    
    /**
     * This policy determines which RADIUS server will be contacted first in an authentication attempt and the ordering of any necessary retry attempts ('Strict priority order' or 'Round robin')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("radiusLoadBalancingPolicy")
    public UpdateNetworkWirelessSsidRequestBodyRadiusLoadBalancingPolicyEnum radiusLoadBalancingPolicy;

    public UpdateNetworkWirelessSsidRequestBody withRadiusLoadBalancingPolicy(UpdateNetworkWirelessSsidRequestBodyRadiusLoadBalancingPolicyEnum radiusLoadBalancingPolicy) {
        this.radiusLoadBalancingPolicy = radiusLoadBalancingPolicy;
        return this;
    }
    
    /**
     * If true, the RADIUS response can override VLAN tag. This is not valid when ipAssignmentMode is 'NAT mode'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("radiusOverride")
    public Boolean radiusOverride;

    public UpdateNetworkWirelessSsidRequestBody withRadiusOverride(Boolean radiusOverride) {
        this.radiusOverride = radiusOverride;
        return this;
    }
    
    /**
     * If true, Meraki devices will proxy RADIUS messages through the Meraki cloud to the configured RADIUS auth and accounting servers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("radiusProxyEnabled")
    public Boolean radiusProxyEnabled;

    public UpdateNetworkWirelessSsidRequestBody withRadiusProxyEnabled(Boolean radiusProxyEnabled) {
        this.radiusProxyEnabled = radiusProxyEnabled;
        return this;
    }
    
    /**
     * The maximum number of transmit attempts after which a RADIUS server is failed over (must be between 1-5).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("radiusServerAttemptsLimit")
    public Long radiusServerAttemptsLimit;

    public UpdateNetworkWirelessSsidRequestBody withRadiusServerAttemptsLimit(Long radiusServerAttemptsLimit) {
        this.radiusServerAttemptsLimit = radiusServerAttemptsLimit;
        return this;
    }
    
    /**
     * The amount of time for which a RADIUS client waits for a reply from the RADIUS server (must be between 1-10 seconds).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("radiusServerTimeout")
    public Long radiusServerTimeout;

    public UpdateNetworkWirelessSsidRequestBody withRadiusServerTimeout(Long radiusServerTimeout) {
        this.radiusServerTimeout = radiusServerTimeout;
        return this;
    }
    
    /**
     * The RADIUS 802.1X servers to be used for authentication. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("radiusServers")
    public UpdateNetworkWirelessSsidRequestBodyRadiusServers[] radiusServers;

    public UpdateNetworkWirelessSsidRequestBody withRadiusServers(UpdateNetworkWirelessSsidRequestBodyRadiusServers[] radiusServers) {
        this.radiusServers = radiusServers;
        return this;
    }
    
    /**
     * If true, Meraki devices will periodically send Access-Request messages to configured RADIUS servers using identity 'meraki_8021x_test' to ensure that the RADIUS servers are reachable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("radiusTestingEnabled")
    public Boolean radiusTestingEnabled;

    public UpdateNetworkWirelessSsidRequestBody withRadiusTestingEnabled(Boolean radiusTestingEnabled) {
        this.radiusTestingEnabled = radiusTestingEnabled;
        return this;
    }
    
    /**
     * The secondary concentrator to use when the ipAssignmentMode is 'VPN'. If configured, the APs will switch to using this concentrator if the primary concentrator is unreachable. This param is optional. ('disabled' represents no secondary concentrator.)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secondaryConcentratorNetworkId")
    public String secondaryConcentratorNetworkId;

    public UpdateNetworkWirelessSsidRequestBody withSecondaryConcentratorNetworkId(String secondaryConcentratorNetworkId) {
        this.secondaryConcentratorNetworkId = secondaryConcentratorNetworkId;
        return this;
    }
    
    /**
     * The SpeedBurst setting for this SSID'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("speedBurst")
    public UpdateNetworkWirelessSsidRequestBodySpeedBurst speedBurst;

    public UpdateNetworkWirelessSsidRequestBody withSpeedBurst(UpdateNetworkWirelessSsidRequestBodySpeedBurst speedBurst) {
        this.speedBurst = speedBurst;
        return this;
    }
    
    /**
     * Array of valid sponsor email domains for sponsored guest splash type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("splashGuestSponsorDomains")
    public String[] splashGuestSponsorDomains;

    public UpdateNetworkWirelessSsidRequestBody withSplashGuestSponsorDomains(String[] splashGuestSponsorDomains) {
        this.splashGuestSponsorDomains = splashGuestSponsorDomains;
        return this;
    }
    
    /**
     * The type of splash page for the SSID ('None', 'Click-through splash page', 'Billing', 'Password-protected with Meraki RADIUS', 'Password-protected with custom RADIUS', 'Password-protected with Active Directory', 'Password-protected with LDAP', 'SMS authentication', 'Systems Manager Sentry', 'Facebook Wi-Fi', 'Google OAuth', 'Sponsored guest', 'Cisco ISE' or 'Google Apps domain'). This attribute is not supported for template children.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("splashPage")
    public UpdateNetworkWirelessSsidRequestBodySplashPageEnum splashPage;

    public UpdateNetworkWirelessSsidRequestBody withSplashPage(UpdateNetworkWirelessSsidRequestBodySplashPageEnum splashPage) {
        this.splashPage = splashPage;
        return this;
    }
    
    /**
     * Whether or not traffic should be directed to use specific VLANs. This param is only valid if the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("useVlanTagging")
    public Boolean useVlanTagging;

    public UpdateNetworkWirelessSsidRequestBody withUseVlanTagging(Boolean useVlanTagging) {
        this.useVlanTagging = useVlanTagging;
        return this;
    }
    
    /**
     * Boolean indicating whether APs should advertise or hide this SSID. APs will only broadcast this SSID if set to true
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("visible")
    public Boolean visible;

    public UpdateNetworkWirelessSsidRequestBody withVisible(Boolean visible) {
        this.visible = visible;
        return this;
    }
    
    /**
     * The VLAN ID used for VLAN tagging. This param is only valid when the ipAssignmentMode is 'Layer 3 roaming with a concentrator' or 'VPN'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vlanId")
    public Long vlanId;

    public UpdateNetworkWirelessSsidRequestBody withVlanId(Long vlanId) {
        this.vlanId = vlanId;
        return this;
    }
    
    /**
     * Allow access to a configurable list of IP ranges, which users may access prior to sign-on.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("walledGardenEnabled")
    public Boolean walledGardenEnabled;

    public UpdateNetworkWirelessSsidRequestBody withWalledGardenEnabled(Boolean walledGardenEnabled) {
        this.walledGardenEnabled = walledGardenEnabled;
        return this;
    }
    
    /**
     * Specify your walled garden by entering an array of addresses, ranges using CIDR notation, domain names, and domain wildcards (e.g. '192.168.1.1/24', '192.168.37.10/32', 'www.yahoo.com', '*.google.com']). Meraki's splash page is automatically included in your walled garden.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("walledGardenRanges")
    public String[] walledGardenRanges;

    public UpdateNetworkWirelessSsidRequestBody withWalledGardenRanges(String[] walledGardenRanges) {
        this.walledGardenRanges = walledGardenRanges;
        return this;
    }
    
    /**
     * The types of WPA encryption. ('WPA1 only', 'WPA1 and WPA2', 'WPA2 only', 'WPA3 Transition Mode', 'WPA3 only' or 'WPA3 192-bit Security')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wpaEncryptionMode")
    public UpdateNetworkWirelessSsidRequestBodyWpaEncryptionModeEnum wpaEncryptionMode;

    public UpdateNetworkWirelessSsidRequestBody withWpaEncryptionMode(UpdateNetworkWirelessSsidRequestBodyWpaEncryptionModeEnum wpaEncryptionMode) {
        this.wpaEncryptionMode = wpaEncryptionMode;
        return this;
    }
    
    public UpdateNetworkWirelessSsidRequestBody(){}
}
