// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type GetSigningBasketSecurity struct {
	BearerAuthOAuth *shared.SchemeBearerAuthOAuth `security:"scheme,type=http,subtype=bearer"`
}

type GetSigningBasketPathParams struct {
	// This identification of the corresponding signing basket object.
	//
	BasketID string `pathParam:"style=simple,explode=false,name=basketId"`
}

type GetSigningBasketHeaders struct {
	// Is contained if and only if the "Signature" element is contained in the header of the request.
	Digest *string `header:"style=simple,explode=false,name=Digest"`
	// The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.
	//
	PSUAccept *string `header:"style=simple,explode=false,name=PSU-Accept"`
	// The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.
	//
	PSUAcceptCharset *string `header:"style=simple,explode=false,name=PSU-Accept-Charset"`
	// The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.
	//
	PSUAcceptEncoding *string `header:"style=simple,explode=false,name=PSU-Accept-Encoding"`
	// The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.
	//
	PSUAcceptLanguage *string `header:"style=simple,explode=false,name=PSU-Accept-Language"`
	// UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available.
	// UUID identifies either a device or a device dependant application installation.
	// In case of an installation identification this ID needs to be unaltered until removal from device.
	//
	PSUDeviceID *string `header:"style=simple,explode=false,name=PSU-Device-ID"`
	// The forwarded Geo Location of the corresponding http request between PSU and TPP if available.
	//
	PSUGeoLocation *string `header:"style=simple,explode=false,name=PSU-Geo-Location"`
	// HTTP method used at the PSU ? TPP interface, if available.
	// Valid values are:
	// * GET
	// * POST
	// * PUT
	// * PATCH
	// * DELETE
	//
	PSUHTTPMethod *shared.PSUHTTPMethodEnum `header:"style=simple,explode=false,name=PSU-Http-Method"`
	// The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.
	//
	PSUIPAddress *string `header:"style=simple,explode=false,name=PSU-IP-Address"`
	// The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.
	//
	PSUIPPort *string `header:"style=simple,explode=false,name=PSU-IP-Port"`
	// The forwarded Agent header field of the HTTP request between PSU and TPP, if available.
	//
	PSUUserAgent *string `header:"style=simple,explode=false,name=PSU-User-Agent"`
	// A signature of the request by the TPP on application level. This might be mandated by ASPSP.
	//
	Signature *string `header:"style=simple,explode=false,name=Signature"`
	// The certificate used for signing the request, in base64 encoding.
	// Must be contained if a signature is contained.
	//
	TPPSignatureCertificate *string `header:"style=simple,explode=false,name=TPP-Signature-Certificate"`
	// ID of the request, unique to the call, as determined by the initiating party.
	XRequestID string `header:"style=simple,explode=false,name=X-Request-ID"`
}

type GetSigningBasketRequest struct {
	PathParams GetSigningBasketPathParams
	Headers    GetSigningBasketHeaders
	Security   GetSigningBasketSecurity
}

type GetSigningBasketResponse struct {
	ContentType string
	// Bad Request
	Error400NGSBS *shared.Error400NGSBS
	// Bad Request
	Error400SBS *shared.Error400SBS
	// Unauthorized
	Error401NGSBS *shared.Error401NGSBS
	// Unauthorized
	Error401SBS *shared.Error401SBS
	// Forbidden
	Error403NGSBS *shared.Error403NGSBS
	// Forbidden
	Error403SBS *shared.Error403SBS
	// Not found
	Error404NGSBS *shared.Error404NGSBS
	// Not found
	Error404SBS *shared.Error404SBS
	// Method Not Allowed
	Error405NGSBS *shared.Error405NGSBS
	// Method Not Allowed
	Error405SBS *shared.Error405SBS
	// Conflict
	Error409NGSBS *shared.Error409NGSBS
	// Conflict
	Error409SBS *shared.Error409SBS
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// OK
	SigningBasketResponse200 *shared.SigningBasketResponse200
}
