// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type S3StorageClassEnum string

const (
	S3StorageClassEnumStandard                S3StorageClassEnum = "STANDARD"
	S3StorageClassEnumStandardIa              S3StorageClassEnum = "STANDARD_IA"
	S3StorageClassEnumOnezoneIa               S3StorageClassEnum = "ONEZONE_IA"
	S3StorageClassEnumIntelligentTiering      S3StorageClassEnum = "INTELLIGENT_TIERING"
	S3StorageClassEnumGlacier                 S3StorageClassEnum = "GLACIER"
	S3StorageClassEnumDeepArchive             S3StorageClassEnum = "DEEP_ARCHIVE"
	S3StorageClassEnumOutposts                S3StorageClassEnum = "OUTPOSTS"
	S3StorageClassEnumGlacierInstantRetrieval S3StorageClassEnum = "GLACIER_INSTANT_RETRIEVAL"
)

func (e S3StorageClassEnum) ToPointer() *S3StorageClassEnum {
	return &e
}

func (e *S3StorageClassEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STANDARD":
		fallthrough
	case "STANDARD_IA":
		fallthrough
	case "ONEZONE_IA":
		fallthrough
	case "INTELLIGENT_TIERING":
		fallthrough
	case "GLACIER":
		fallthrough
	case "DEEP_ARCHIVE":
		fallthrough
	case "OUTPOSTS":
		fallthrough
	case "GLACIER_INSTANT_RETRIEVAL":
		*e = S3StorageClassEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for S3StorageClassEnum: %v", v)
	}
}
