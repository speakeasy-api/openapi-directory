"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import activedirectoryconfiguration as shared_activedirectoryconfiguration
from ..shared import computefarmconfiguration as shared_computefarmconfiguration
from ..shared import createstudiocomponentresponse as shared_createstudiocomponentresponse
from ..shared import licenseserviceconfiguration as shared_licenseserviceconfiguration
from ..shared import scriptparameterkeyvalue as shared_scriptparameterkeyvalue
from ..shared import sharedfilesystemconfiguration as shared_sharedfilesystemconfiguration
from ..shared import studiocomponentinitializationscript as shared_studiocomponentinitializationscript
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateStudioComponentRequestBodyConfiguration:
    r"""The configuration of the studio component, based on component type."""
    
    active_directory_configuration: Optional[shared_activedirectoryconfiguration.ActiveDirectoryConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activeDirectoryConfiguration'), 'exclude': lambda f: f is None }})  
    compute_farm_configuration: Optional[shared_computefarmconfiguration.ComputeFarmConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('computeFarmConfiguration'), 'exclude': lambda f: f is None }})  
    license_service_configuration: Optional[shared_licenseserviceconfiguration.LicenseServiceConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('licenseServiceConfiguration'), 'exclude': lambda f: f is None }})  
    shared_file_system_configuration: Optional[shared_sharedfilesystemconfiguration.SharedFileSystemConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sharedFileSystemConfiguration'), 'exclude': lambda f: f is None }})  
    
class CreateStudioComponentRequestBodySubtypeEnum(str, Enum):
    r"""The specific subtype of a studio component."""
    AWS_MANAGED_MICROSOFT_AD = 'AWS_MANAGED_MICROSOFT_AD'
    AMAZON_FSX_FOR_WINDOWS = 'AMAZON_FSX_FOR_WINDOWS'
    AMAZON_FSX_FOR_LUSTRE = 'AMAZON_FSX_FOR_LUSTRE'
    CUSTOM = 'CUSTOM'

class CreateStudioComponentRequestBodyTypeEnum(str, Enum):
    r"""The type of the studio component."""
    ACTIVE_DIRECTORY = 'ACTIVE_DIRECTORY'
    SHARED_FILE_SYSTEM = 'SHARED_FILE_SYSTEM'
    COMPUTE_FARM = 'COMPUTE_FARM'
    LICENSE_SERVICE = 'LICENSE_SERVICE'
    CUSTOM = 'CUSTOM'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateStudioComponentRequestBody:
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name for the studio component."""  
    type: CreateStudioComponentRequestBodyTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of the studio component."""  
    configuration: Optional[CreateStudioComponentRequestBodyConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('configuration'), 'exclude': lambda f: f is None }})
    r"""The configuration of the studio component, based on component type."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description."""  
    ec2_security_group_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ec2SecurityGroupIds'), 'exclude': lambda f: f is None }})
    r"""The EC2 security groups that control access to the studio component."""  
    initialization_scripts: Optional[list[shared_studiocomponentinitializationscript.StudioComponentInitializationScript]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('initializationScripts'), 'exclude': lambda f: f is None }})
    r"""Initialization scripts for studio components."""  
    runtime_role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('runtimeRoleArn'), 'exclude': lambda f: f is None }})
    r"""An IAM role attached to a Studio Component that gives the studio component access to Amazon Web Services resources at anytime while the instance is running."""  
    script_parameters: Optional[list[shared_scriptparameterkeyvalue.ScriptParameterKeyValue]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scriptParameters'), 'exclude': lambda f: f is None }})
    r"""Parameters for the studio component scripts."""  
    secure_initialization_role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secureInitializationRoleArn'), 'exclude': lambda f: f is None }})
    r"""An IAM role attached to Studio Component when the system initialization script runs which give the studio component access to Amazon Web Services resources when the system initialization script runs."""  
    subtype: Optional[CreateStudioComponentRequestBodySubtypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subtype'), 'exclude': lambda f: f is None }})
    r"""The specific subtype of a studio component."""  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""A collection of labels, in the form of key-value pairs, that apply to this resource."""  
    

@dataclasses.dataclass
class CreateStudioComponentRequest:
    
    request_body: CreateStudioComponentRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    studio_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'studioId', 'style': 'simple', 'explode': False }})
    r"""The studio ID."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_client_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Client-Token', 'style': 'simple', 'explode': False }})
    r"""Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you donâ€™t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency."""  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateStudioComponentResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictException"""  
    create_studio_component_response: Optional[shared_createstudiocomponentresponse.CreateStudioComponentResponse] = dataclasses.field(default=None)
    r"""Success"""  
    internal_server_error_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerErrorException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    service_quota_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceQuotaExceededException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    