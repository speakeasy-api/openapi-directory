<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class PutAdminMappingsStubMappingId200ApplicationJSONResponse
{
    /**
     * Extra request headers to send when proxying to another host.
     * 
     * @var ?array<string, mixed> $additionalProxyRequestHeaders
     */
	#[\JMS\Serializer\Annotation\SerializedName('additionalProxyRequestHeaders')]
    #[\JMS\Serializer\Annotation\Type('array<string, mixed>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $additionalProxyRequestHeaders = null;
    
    /**
     * The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.
     * 
     * @var ?string $base64Body
     */
	#[\JMS\Serializer\Annotation\SerializedName('base64Body')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $base64Body = null;
    
    /**
     * The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
     * 
     * @var ?string $body
     */
	#[\JMS\Serializer\Annotation\SerializedName('body')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $body = null;
    
    /**
     * The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
     * 
     * @var ?string $bodyFileName
     */
	#[\JMS\Serializer\Annotation\SerializedName('bodyFileName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $bodyFileName = null;
    
    /**
     * The delay distribution. Valid property configuration is either median/sigma/type or lower/type/upper.
     * 
     * @var mixed $delayDistribution
     */
	#[\JMS\Serializer\Annotation\SerializedName('delayDistribution')]
    #[\JMS\Serializer\Annotation\Type('mixed')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public mixed $delayDistribution = null;
    
    /**
     * The fault to apply (instead of a full, valid response).
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\PutAdminMappingsStubMappingId200ApplicationJSONResponseFaultEnum $fault
     */
	#[\JMS\Serializer\Annotation\SerializedName('fault')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Operations\PutAdminMappingsStubMappingId200ApplicationJSONResponseFaultEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?PutAdminMappingsStubMappingId200ApplicationJSONResponseFaultEnum $fault = null;
    
    /**
     * Number of milliseconds to delay be before sending the response.
     * 
     * @var ?int $fixedDelayMilliseconds
     */
	#[\JMS\Serializer\Annotation\SerializedName('fixedDelayMilliseconds')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $fixedDelayMilliseconds = null;
    
    /**
     * Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.
     * 
     * @var ?bool $fromConfiguredStub
     */
	#[\JMS\Serializer\Annotation\SerializedName('fromConfiguredStub')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $fromConfiguredStub = null;
    
    /**
     * Map of response headers to send
     * 
     * @var ?array<string, mixed> $headers
     */
	#[\JMS\Serializer\Annotation\SerializedName('headers')]
    #[\JMS\Serializer\Annotation\Type('array<string, mixed>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $headers = null;
    
    /**
     * The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
     * 
     * @var ?array<string, mixed> $jsonBody
     */
	#[\JMS\Serializer\Annotation\SerializedName('jsonBody')]
    #[\JMS\Serializer\Annotation\Type('array<string, mixed>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $jsonBody = null;
    
    /**
     * The base URL of the target to proxy matching requests to.
     * 
     * @var ?string $proxyBaseUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('proxyBaseUrl')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $proxyBaseUrl = null;
    
    /**
     * The HTTP status code to be returned
     * 
     * @var ?int $status
     */
	#[\JMS\Serializer\Annotation\SerializedName('status')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $status = null;
    
    /**
     * The HTTP status message to be returned
     * 
     * @var ?string $statusMessage
     */
	#[\JMS\Serializer\Annotation\SerializedName('statusMessage')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $statusMessage = null;
    
    /**
     * Parameters to apply to response transformers.
     * 
     * @var ?array<string, mixed> $transformerParameters
     */
	#[\JMS\Serializer\Annotation\SerializedName('transformerParameters')]
    #[\JMS\Serializer\Annotation\Type('array<string, mixed>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $transformerParameters = null;
    
    /**
     * List of names of transformers to apply to this response.
     * 
     * @var ?array<string> $transformers
     */
	#[\JMS\Serializer\Annotation\SerializedName('transformers')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $transformers = null;
    
	public function __construct()
	{
		$this->additionalProxyRequestHeaders = null;
		$this->base64Body = null;
		$this->body = null;
		$this->bodyFileName = null;
		$this->delayDistribution = null;
		$this->fault = null;
		$this->fixedDelayMilliseconds = null;
		$this->fromConfiguredStub = null;
		$this->headers = null;
		$this->jsonBody = null;
		$this->proxyBaseUrl = null;
		$this->status = null;
		$this->statusMessage = null;
		$this->transformerParameters = null;
		$this->transformers = null;
	}
}
