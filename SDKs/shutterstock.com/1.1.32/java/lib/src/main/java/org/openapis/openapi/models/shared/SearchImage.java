/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

/**
 * SearchImage - Data required to search for an image
 */
public class SearchImage {
    /**
     * Show images added on the specified date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("added_date")
    public LocalDate addedDate;
    public SearchImage withAddedDate(LocalDate addedDate) {
        this.addedDate = addedDate;
        return this;
    }
    
    /**
     * Show images added before the specified date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("added_date_end")
    public LocalDate addedDateEnd;
    public SearchImage withAddedDateEnd(LocalDate addedDateEnd) {
        this.addedDateEnd = addedDateEnd;
        return this;
    }
    
    /**
     * Show images added on or after the specified date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("added_date_start")
    public LocalDate addedDateStart;
    public SearchImage withAddedDateStart(LocalDate addedDateStart) {
        this.addedDateStart = addedDateStart;
        return this;
    }
    
    /**
     * Show images with the specified aspect ratio, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("aspect_ratio")
    public Double aspectRatio;
    public SearchImage withAspectRatio(Double aspectRatio) {
        this.aspectRatio = aspectRatio;
        return this;
    }
    
    /**
     * Show images with the specified aspect ratio or lower, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("aspect_ratio_max")
    public Double aspectRatioMax;
    public SearchImage withAspectRatioMax(Double aspectRatioMax) {
        this.aspectRatioMax = aspectRatioMax;
        return this;
    }
    
    /**
     * Show images with the specified aspect ratio or higher, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("aspect_ratio_min")
    public Double aspectRatioMin;
    public SearchImage withAspectRatioMin(Double aspectRatioMin) {
        this.aspectRatioMin = aspectRatioMin;
        return this;
    }
    
    /**
     * Show only authentic images
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authentic")
    public Boolean authentic;
    public SearchImage withAuthentic(Boolean authentic) {
        this.authentic = authentic;
        return this;
    }
    
    /**
     * Show images with the specified Shutterstock-defined category; specify a category name or ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("category")
    public String category;
    public SearchImage withCategory(String category) {
        this.category = category;
        return this;
    }
    
    /**
     * Specify either a hexadecimal color in the format '4F21EA' or 'grayscale'; the API returns images that use similar colors
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("color")
    public String color;
    public SearchImage withColor(String color) {
        this.color = color;
        return this;
    }
    
    /**
     * Show images with the specified contributor names or IDs, allows multiple
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contributor")
    public String[] contributor;
    public SearchImage withContributor(String[] contributor) {
        this.contributor = contributor;
        return this;
    }
    
    /**
     * Show images from contributors in one or more specified countries, or start with NOT to exclude a country from the search
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contributor_country")
    public Object contributorCountry;
    public SearchImage withContributorCountry(Object contributorCountry) {
        this.contributorCountry = contributorCountry;
        return this;
    }
    
    /**
     * Fields to display in the response; see the documentation for the fields parameter in the overview section
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fields")
    public String fields;
    public SearchImage withFields(String fields) {
        this.fields = fields;
        return this;
    }
    
    /**
     * (Deprecated; use height_from and height_to instead) Show images with the specified height
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("height")
    public Long height;
    public SearchImage withHeight(Long height) {
        this.height = height;
        return this;
    }
    
    /**
     * Show images with the specified height or larger, in pixels
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("height_from")
    public Long heightFrom;
    public SearchImage withHeightFrom(Long heightFrom) {
        this.heightFrom = heightFrom;
        return this;
    }
    
    /**
     * Show images with the specified height or smaller, in pixels
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("height_to")
    public Long heightTo;
    public SearchImage withHeightTo(Long heightTo) {
        this.heightTo = heightTo;
        return this;
    }
    
    /**
     * Show images of the specified type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image_type")
    public SearchImageImageTypeEnum[] imageType;
    public SearchImage withImageType(SearchImageImageTypeEnum[] imageType) {
        this.imageType = imageType;
        return this;
    }
    
    /**
     * Hide results with potentially unsafe keywords
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("keyword_safe_search")
    public Boolean keywordSafeSearch;
    public SearchImage withKeywordSafeSearch(Boolean keywordSafeSearch) {
        this.keywordSafeSearch = keywordSafeSearch;
        return this;
    }
    
    /**
     * Language code
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("language")
    public LanguageEnum language;
    public SearchImage withLanguage(LanguageEnum language) {
        this.language = language;
        return this;
    }
    
    /**
     * Show only images with the specified license
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("license")
    public SearchImageLicenseEnum[] license;
    public SearchImage withLicense(SearchImageLicenseEnum[] license) {
        this.license = license;
        return this;
    }
    
    /**
     * Show image results with the specified model IDs
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("model")
    public String[] model;
    public SearchImage withModel(String[] model) {
        this.model = model;
        return this;
    }
    
    /**
     * Show image results with horizontal or vertical orientation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orientation")
    public SearchImageOrientationEnum orientation;
    public SearchImage withOrientation(SearchImageOrientationEnum orientation) {
        this.orientation = orientation;
        return this;
    }
    
    /**
     * Page number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("page")
    public Long page;
    public SearchImage withPage(Long page) {
        this.page = page;
        return this;
    }
    
    /**
     * Show images that feature people of the specified age category
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("people_age")
    public SearchImagePeopleAgeEnum peopleAge;
    public SearchImage withPeopleAge(SearchImagePeopleAgeEnum peopleAge) {
        this.peopleAge = peopleAge;
        return this;
    }
    
    /**
     * Show images with people of the specified ethnicities, or start with NOT to show images without those ethnicities
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("people_ethnicity")
    public SearchImagePeopleEthnicityEnum[] peopleEthnicity;
    public SearchImage withPeopleEthnicity(SearchImagePeopleEthnicityEnum[] peopleEthnicity) {
        this.peopleEthnicity = peopleEthnicity;
        return this;
    }
    
    /**
     * Show images with people of the specified gender
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("people_gender")
    public SearchImagePeopleGenderEnum peopleGender;
    public SearchImage withPeopleGender(SearchImagePeopleGenderEnum peopleGender) {
        this.peopleGender = peopleGender;
        return this;
    }
    
    /**
     * Show images of people with a signed model release
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("people_model_released")
    public Boolean peopleModelReleased;
    public SearchImage withPeopleModelReleased(Boolean peopleModelReleased) {
        this.peopleModelReleased = peopleModelReleased;
        return this;
    }
    
    /**
     * Show images with the specified number of people
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("people_number")
    public Long peopleNumber;
    public SearchImage withPeopleNumber(Long peopleNumber) {
        this.peopleNumber = peopleNumber;
        return this;
    }
    
    /**
     * Number of results per page
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("per_page")
    public Long perPage;
    public SearchImage withPerPage(Long perPage) {
        this.perPage = perPage;
        return this;
    }
    
    /**
     * One or more search terms separated by spaces; you can use NOT to filter out images that match a term
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query")
    public String query;
    public SearchImage withQuery(String query) {
        this.query = query;
        return this;
    }
    
    /**
     * Raise or lower search result rankings based on the result's relevance to a specified region; you can provide a country code or an IP address from which the API infers a country
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("region")
    public Object region;
    public SearchImage withRegion(Object region) {
        this.region = region;
        return this;
    }
    
    /**
     * Enable or disable safe search
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("safe")
    public Boolean safe;
    public SearchImage withSafe(Boolean safe) {
        this.safe = safe;
        return this;
    }
    
    /**
     * Sort by
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sort")
    public SearchImageSortEnum sort;
    public SearchImage withSort(SearchImageSortEnum sort) {
        this.sort = sort;
        return this;
    }
    
    /**
     * Spellcheck the search query and return results on suggested spellings
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("spellcheck_query")
    public Boolean spellcheckQuery;
    public SearchImage withSpellcheckQuery(Boolean spellcheckQuery) {
        this.spellcheckQuery = spellcheckQuery;
        return this;
    }
    
    /**
     * Amount of detail to render in the response
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("view")
    public SearchImageViewEnum view;
    public SearchImage withView(SearchImageViewEnum view) {
        this.view = view;
        return this;
    }
    
    /**
     * (Deprecated; use width_from and width_to instead) Show images with the specified width
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("width")
    public Long width;
    public SearchImage withWidth(Long width) {
        this.width = width;
        return this;
    }
    
    /**
     * Show images with the specified width or larger, in pixels
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("width_from")
    public Long widthFrom;
    public SearchImage withWidthFrom(Long widthFrom) {
        this.widthFrom = widthFrom;
        return this;
    }
    
    /**
     * Show images with the specified width or smaller, in pixels
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("width_to")
    public Long widthTo;
    public SearchImage withWidthTo(Long widthTo) {
        this.widthTo = widthTo;
        return this;
    }
    
}
