<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class PutCertificatesIdCertificateResponseCertificate
{
    /**
     * Certificate and chain in PEM format, in order so that each record directly certifies the one preceding
     * 
     * @var string $certificate
     */
	#[\JMS\Serializer\Annotation\SerializedName('certificate')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $certificate;
    
    /**
     * Point in time when the Resource was created (in ISO-8601 format)
     * 
     * @var string $created
     */
	#[\JMS\Serializer\Annotation\SerializedName('created')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $created;
    
    /**
     * Domains and subdomains covered by the Certificate
     * 
     * @var array<string> $domainNames
     */
	#[\JMS\Serializer\Annotation\SerializedName('domain_names')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    public array $domainNames;
    
    /**
     * SHA256 fingerprint of the Certificate
     * 
     * @var string $fingerprint
     */
	#[\JMS\Serializer\Annotation\SerializedName('fingerprint')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $fingerprint;
    
    /**
     * ID of the Resource
     * 
     * @var int $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $id;
    
    /**
     * User-defined labels (key-value pairs)
     * 
     * @var array<string, string> $labels
     */
	#[\JMS\Serializer\Annotation\SerializedName('labels')]
    #[\JMS\Serializer\Annotation\Type('array<string, string>')]
    public array $labels;
    
    /**
     * Name of the Resource. Must be unique per Project.
     * 
     * @var string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $name;
    
    /**
     * Point in time when the Certificate stops being valid (in ISO-8601 format)
     * 
     * @var string $notValidAfter
     */
	#[\JMS\Serializer\Annotation\SerializedName('not_valid_after')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $notValidAfter;
    
    /**
     * Point in time when the Certificate becomes valid (in ISO-8601 format)
     * 
     * @var string $notValidBefore
     */
	#[\JMS\Serializer\Annotation\SerializedName('not_valid_before')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $notValidBefore;
    
    /**
     * Current status of a type `managed` Certificate, always *null* for type `uploaded` Certificates
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\PutCertificatesIdCertificateResponseCertificateStatus $status
     */
	#[\JMS\Serializer\Annotation\SerializedName('status')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Operations\PutCertificatesIdCertificateResponseCertificateStatus')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?PutCertificatesIdCertificateResponseCertificateStatus $status = null;
    
    /**
     * Type of the Certificate
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\PutCertificatesIdCertificateResponseCertificateTypeEnum $type
     */
	#[\JMS\Serializer\Annotation\SerializedName('type')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Operations\PutCertificatesIdCertificateResponseCertificateTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?PutCertificatesIdCertificateResponseCertificateTypeEnum $type = null;
    
    /**
     * Resources currently using the Certificate
     * 
     * @var array<\OpenAPI\OpenAPI\Models\Operations\PutCertificatesIdCertificateResponseCertificateUsedBy> $usedBy
     */
	#[\JMS\Serializer\Annotation\SerializedName('used_by')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Operations\PutCertificatesIdCertificateResponseCertificateUsedBy>')]
    public array $usedBy;
    
	public function __construct()
	{
		$this->certificate = "";
		$this->created = "";
		$this->domainNames = [];
		$this->fingerprint = "";
		$this->id = 0;
		$this->labels = [];
		$this->name = "";
		$this->notValidAfter = "";
		$this->notValidBefore = "";
		$this->status = null;
		$this->type = null;
		$this->usedBy = [];
	}
}
