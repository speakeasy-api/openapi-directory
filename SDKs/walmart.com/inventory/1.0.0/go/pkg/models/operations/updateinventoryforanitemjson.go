// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UpdateInventoryForAnItemApplicationJSONQuantityUnitEnum - The unit of measurement. Example: 'EACH'
type UpdateInventoryForAnItemApplicationJSONQuantityUnitEnum string

const (
	UpdateInventoryForAnItemApplicationJSONQuantityUnitEnumEach UpdateInventoryForAnItemApplicationJSONQuantityUnitEnum = "EACH"
)

func (e *UpdateInventoryForAnItemApplicationJSONQuantityUnitEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EACH":
		*e = UpdateInventoryForAnItemApplicationJSONQuantityUnitEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateInventoryForAnItemApplicationJSONQuantityUnitEnum: %s", s)
	}
}

// UpdateInventoryForAnItemApplicationJSONQuantity - Quantity that has been ordered by the customers but not yet shipped
type UpdateInventoryForAnItemApplicationJSONQuantity struct {
	// Inventory Count
	Amount float64 `json:"amount"`
	// The unit of measurement. Example: 'EACH'
	Unit UpdateInventoryForAnItemApplicationJSONQuantityUnitEnum `json:"unit"`
}

// UpdateInventoryForAnItemApplicationJSON - File fields
type UpdateInventoryForAnItemApplicationJSON struct {
	// Quantity that has been ordered by the customers but not yet shipped
	Quantity UpdateInventoryForAnItemApplicationJSONQuantity `json:"quantity"`
	// A seller-provided Product ID. Response will have decoded value.
	Sku string `json:"sku"`
}

type UpdateInventoryForAnItemJSONRequest struct {
	// File fields
	RequestBody UpdateInventoryForAnItemApplicationJSON `request:"mediaType=application/json"`
	// A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
	WmConsumerChannelType *string `header:"style=simple,explode=false,name=WM_CONSUMER.CHANNEL.TYPE"`
	// A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
	WmQosCorrelationID string `header:"style=simple,explode=false,name=WM_QOS.CORRELATION_ID"`
	// The access token retrieved in the Token API call
	WmSecAccessToken string `header:"style=simple,explode=false,name=WM_SEC.ACCESS_TOKEN"`
	// Walmart Service Name
	WmSvcName string `header:"style=simple,explode=false,name=WM_SVC.NAME"`
	// The shipNode for which the inventory is to be updated.
	ShipNode *string `queryParam:"style=form,explode=true,name=shipNode"`
	// An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item. Special characters in the sku needing encoding are: ':', '/', '?', '#', '[', ']', '@', '!', '$', '&', "'", '(', ')', '*', '+', ',', ';', '=', ‘ ’, '{', '}' as well as '%' itself if it's a part of sku. Make sure to encode space with %20. Other characters don't need to be encoded.
	Sku string `queryParam:"style=form,explode=true,name=sku"`
}

// UpdateInventoryForAnItemJSON200ApplicationXMLQuantityUnitEnum - The unit of measurement. Example: 'EACH'
type UpdateInventoryForAnItemJSON200ApplicationXMLQuantityUnitEnum string

const (
	UpdateInventoryForAnItemJSON200ApplicationXMLQuantityUnitEnumEach UpdateInventoryForAnItemJSON200ApplicationXMLQuantityUnitEnum = "EACH"
)

func (e *UpdateInventoryForAnItemJSON200ApplicationXMLQuantityUnitEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EACH":
		*e = UpdateInventoryForAnItemJSON200ApplicationXMLQuantityUnitEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateInventoryForAnItemJSON200ApplicationXMLQuantityUnitEnum: %s", s)
	}
}

// UpdateInventoryForAnItemJSON200ApplicationXMLQuantity - Quantity that has been ordered by the customers but not yet shipped
type UpdateInventoryForAnItemJSON200ApplicationXMLQuantity struct {
	// Inventory Count
	Amount float64
	// The unit of measurement. Example: 'EACH'
	Unit UpdateInventoryForAnItemJSON200ApplicationXMLQuantityUnitEnum
}

// UpdateInventoryForAnItemJSON200ApplicationXML - Successful Operation
type UpdateInventoryForAnItemJSON200ApplicationXML struct {
	// Quantity that has been ordered by the customers but not yet shipped
	Quantity UpdateInventoryForAnItemJSON200ApplicationXMLQuantity
	// A seller-provided Product ID. Response will have decoded value.
	Sku string
}

// UpdateInventoryForAnItemJSON200ApplicationJSONQuantityUnitEnum - The unit of measurement. Example: 'EACH'
type UpdateInventoryForAnItemJSON200ApplicationJSONQuantityUnitEnum string

const (
	UpdateInventoryForAnItemJSON200ApplicationJSONQuantityUnitEnumEach UpdateInventoryForAnItemJSON200ApplicationJSONQuantityUnitEnum = "EACH"
)

func (e *UpdateInventoryForAnItemJSON200ApplicationJSONQuantityUnitEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EACH":
		*e = UpdateInventoryForAnItemJSON200ApplicationJSONQuantityUnitEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateInventoryForAnItemJSON200ApplicationJSONQuantityUnitEnum: %s", s)
	}
}

// UpdateInventoryForAnItemJSON200ApplicationJSONQuantity - Quantity that has been ordered by the customers but not yet shipped
type UpdateInventoryForAnItemJSON200ApplicationJSONQuantity struct {
	// Inventory Count
	Amount float64 `json:"amount"`
	// The unit of measurement. Example: 'EACH'
	Unit UpdateInventoryForAnItemJSON200ApplicationJSONQuantityUnitEnum `json:"unit"`
}

// UpdateInventoryForAnItemJSON200ApplicationJSON - Successful Operation
type UpdateInventoryForAnItemJSON200ApplicationJSON struct {
	// Quantity that has been ordered by the customers but not yet shipped
	Quantity UpdateInventoryForAnItemJSON200ApplicationJSONQuantity `json:"quantity"`
	// A seller-provided Product ID. Response will have decoded value.
	Sku string `json:"sku"`
}

type UpdateInventoryForAnItemJSONResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful Operation
	UpdateInventoryForAnItemJSON200ApplicationJSONObject *UpdateInventoryForAnItemJSON200ApplicationJSON
}
