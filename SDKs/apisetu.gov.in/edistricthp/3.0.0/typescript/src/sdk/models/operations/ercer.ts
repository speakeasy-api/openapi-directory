/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class ErcerSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=X-APISETU-APIKEY",
  })
  apiKey: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=X-APISETU-CLIENTID",
  })
  clientId: string;
}

export class ErcerRequestBodyCertificateParameters extends SpeakeasyBase {
  /**
   * ApplicationNumber
   */
  @SpeakeasyMetadata()
  @Expose({ name: "UDF1" })
  udf1: string;
}

/**
 * The format of the certificate in response.
 */
export enum ErcerRequestBodyFormatEnum {
  Pdf = "pdf",
}

/**
 * Request format
 */
export class ErcerRequestBody extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "certificateParameters" })
  @Type(() => ErcerRequestBodyCertificateParameters)
  certificateParameters?: ErcerRequestBodyCertificateParameters;

  @SpeakeasyMetadata()
  @Expose({ name: "consentArtifact" })
  @Type(() => shared.ConsentArtifactSchema)
  consentArtifact?: shared.ConsentArtifactSchema;

  /**
   * The format of the certificate in response.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "format" })
  format: ErcerRequestBodyFormatEnum;

  /**
   * A unique transaction id for this request in UUID format. It is used for tracking the request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "txnId" })
  txnId: string;
}

export enum Ercer504ApplicationJSONErrorEnum {
  GatewayTimeout = "gateway_timeout",
}

export enum Ercer504ApplicationJSONErrorDescriptionEnum {
  PublisherServiceDidNotRespondInTime = "Publisher service did not respond in time",
}

/**
 * Gateway timeout
 */
export class Ercer504ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: Ercer504ApplicationJSONErrorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorDescription" })
  errorDescription?: Ercer504ApplicationJSONErrorDescriptionEnum;
}

export enum Ercer503ApplicationJSONErrorEnum {
  ServiceUnavailable = "service_unavailable",
}

export enum Ercer503ApplicationJSONErrorDescriptionEnum {
  PublisherServiceIsTemporarilyUnavailable = "Publisher service is temporarily unavailable",
}

/**
 * Service unavailable
 */
export class Ercer503ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: Ercer503ApplicationJSONErrorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorDescription" })
  errorDescription?: Ercer503ApplicationJSONErrorDescriptionEnum;
}

export enum Ercer502ApplicationJSONErrorEnum {
  BadGatewy = "bad_gatewy",
}

export enum Ercer502ApplicationJSONErrorDescriptionEnum {
  PublisherServiceReturnedAnInvalidResponse = "Publisher service returned an invalid response",
}

/**
 * Bad gateway
 */
export class Ercer502ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: Ercer502ApplicationJSONErrorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorDescription" })
  errorDescription?: Ercer502ApplicationJSONErrorDescriptionEnum;
}

export enum Ercer500ApplicationJSONErrorEnum {
  InternalServerError = "internal_server_error",
}

export enum Ercer500ApplicationJSONErrorDescriptionEnum {
  InternalServerError = "Internal server error",
}

/**
 * Internal server error
 */
export class Ercer500ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: Ercer500ApplicationJSONErrorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorDescription" })
  errorDescription?: Ercer500ApplicationJSONErrorDescriptionEnum;
}

export enum Ercer404ApplicationJSONErrorEnum {
  RecordNotFound = "record_not_found",
  UrlNotFound = "url_not_found",
}

export enum Ercer404ApplicationJSONErrorDescriptionEnum {
  NoRecordFound = "No record found",
  YourAPIUrlOrPathIsIncorrect = "Your API url or path is incorrect",
}

/**
 * No record found
 */
export class Ercer404ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: Ercer404ApplicationJSONErrorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorDescription" })
  errorDescription?: Ercer404ApplicationJSONErrorDescriptionEnum;
}

export enum Ercer401ApplicationJSONErrorEnum {
  InvalidAuthentication = "invalid_authentication",
  InvalidAuthorization = "invalid_authorization",
}

export enum Ercer401ApplicationJSONErrorDescriptionEnum {
  AuthenticationFailed = "Authentication failed",
  YouAreNotAuthorizedToUseThisAPI = "You are not authorized to use this API",
}

/**
 * Unauthorized access
 */
export class Ercer401ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: Ercer401ApplicationJSONErrorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorDescription" })
  errorDescription?: Ercer401ApplicationJSONErrorDescriptionEnum;
}

export enum Ercer400ApplicationJSONErrorEnum {
  MissingParameter = "missing_parameter",
  InvalidParameter = "invalid_parameter",
  InvalidFormat = "invalid_format",
  InvalidTxnid = "invalid_txnid",
  InvalidConsentid = "invalid_consentid",
}

export enum Ercer400ApplicationJSONErrorDescriptionEnum {
  PleaseProvideAllMandatoryParameters = "Please provide all mandatory parameters",
  BadRequest = "Bad request",
  TheFormatParameterIsInvalid = "The format parameter is invalid",
  TheTxnIdParameterMustBeInUUIDFormat = "The txnId parameter must be in UUID format",
  TheConsentIdParameterMustBeInUUIDFormat = "The consentId parameter must be in UUID format",
}

/**
 * Bad request
 */
export class Ercer400ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: Ercer400ApplicationJSONErrorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorDescription" })
  errorDescription?: Ercer400ApplicationJSONErrorDescriptionEnum;
}

export class ErcerResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Bad request
   */
  @SpeakeasyMetadata()
  ercer400ApplicationJSONObject?: Ercer400ApplicationJSON;

  /**
   * Unauthorized access
   */
  @SpeakeasyMetadata()
  ercer401ApplicationJSONObject?: Ercer401ApplicationJSON;

  /**
   * No record found
   */
  @SpeakeasyMetadata()
  ercer404ApplicationJSONObject?: Ercer404ApplicationJSON;

  /**
   * Internal server error
   */
  @SpeakeasyMetadata()
  ercer500ApplicationJSONObject?: Ercer500ApplicationJSON;

  /**
   * Bad gateway
   */
  @SpeakeasyMetadata()
  ercer502ApplicationJSONObject?: Ercer502ApplicationJSON;

  /**
   * Service unavailable
   */
  @SpeakeasyMetadata()
  ercer503ApplicationJSONObject?: Ercer503ApplicationJSON;

  /**
   * Gateway timeout
   */
  @SpeakeasyMetadata()
  ercer504ApplicationJSONObject?: Ercer504ApplicationJSON;
}
