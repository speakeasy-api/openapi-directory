"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import classificationresultstatus as shared_classificationresultstatus
from ..shared import customdataidentifiers as shared_customdataidentifiers
from ..shared import sensitivedataitem as shared_sensitivedataitem
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ClassificationResult:
    r"""Provides the details of a sensitive data finding, including the types, number of occurrences, and locations of the sensitive data that was detected."""
    
    additional_occurrences: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalOccurrences'), 'exclude': lambda f: f is None }})  
    custom_data_identifiers: Optional[shared_customdataidentifiers.CustomDataIdentifiers] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customDataIdentifiers'), 'exclude': lambda f: f is None }})  
    mime_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mimeType'), 'exclude': lambda f: f is None }})  
    sensitive_data: Optional[list[shared_sensitivedataitem.SensitiveDataItem]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sensitiveData'), 'exclude': lambda f: f is None }})  
    size_classified: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sizeClassified'), 'exclude': lambda f: f is None }})  
    status: Optional[shared_classificationresultstatus.ClassificationResultStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    