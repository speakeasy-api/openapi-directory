// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CertificateMapEntryMatcherEnum - A predefined matcher for particular cases, other than SNI selection.
type CertificateMapEntryMatcherEnum string

const (
	CertificateMapEntryMatcherEnumMatcherUnspecified CertificateMapEntryMatcherEnum = "MATCHER_UNSPECIFIED"
	CertificateMapEntryMatcherEnumPrimary            CertificateMapEntryMatcherEnum = "PRIMARY"
)

func (e CertificateMapEntryMatcherEnum) ToPointer() *CertificateMapEntryMatcherEnum {
	return &e
}

func (e *CertificateMapEntryMatcherEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MATCHER_UNSPECIFIED":
		fallthrough
	case "PRIMARY":
		*e = CertificateMapEntryMatcherEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CertificateMapEntryMatcherEnum: %v", v)
	}
}

// CertificateMapEntryStateEnum - Output only. A serving state of this Certificate Map Entry.
type CertificateMapEntryStateEnum string

const (
	CertificateMapEntryStateEnumServingStateUnspecified CertificateMapEntryStateEnum = "SERVING_STATE_UNSPECIFIED"
	CertificateMapEntryStateEnumActive                  CertificateMapEntryStateEnum = "ACTIVE"
	CertificateMapEntryStateEnumPending                 CertificateMapEntryStateEnum = "PENDING"
)

func (e CertificateMapEntryStateEnum) ToPointer() *CertificateMapEntryStateEnum {
	return &e
}

func (e *CertificateMapEntryStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SERVING_STATE_UNSPECIFIED":
		fallthrough
	case "ACTIVE":
		fallthrough
	case "PENDING":
		*e = CertificateMapEntryStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CertificateMapEntryStateEnum: %v", v)
	}
}

// CertificateMapEntry - Defines a certificate map entry.
type CertificateMapEntry struct {
	// A set of Certificates defines for the given `hostname`. There can be defined up to four certificates in each Certificate Map Entry. Each certificate must match pattern `projects/*/locations/*/certificates/*`.
	Certificates []string `json:"certificates,omitempty"`
	// Output only. The creation timestamp of a Certificate Map Entry.
	CreateTime *string `json:"createTime,omitempty"`
	// One or more paragraphs of text description of a certificate map entry.
	Description *string `json:"description,omitempty"`
	// A Hostname (FQDN, e.g. `example.com`) or a wildcard hostname expression (`*.example.com`) for a set of hostnames with common suffix. Used as Server Name Indication (SNI) for selecting a proper certificate.
	Hostname *string `json:"hostname,omitempty"`
	// Set of labels associated with a Certificate Map Entry.
	Labels map[string]string `json:"labels,omitempty"`
	// A predefined matcher for particular cases, other than SNI selection.
	Matcher *CertificateMapEntryMatcherEnum `json:"matcher,omitempty"`
	// A user-defined name of the Certificate Map Entry. Certificate Map Entry names must be unique globally and match pattern `projects/*/locations/*/certificateMaps/*/certificateMapEntries/*`.
	Name *string `json:"name,omitempty"`
	// Output only. A serving state of this Certificate Map Entry.
	State *CertificateMapEntryStateEnum `json:"state,omitempty"`
	// Output only. The update timestamp of a Certificate Map Entry.
	UpdateTime *string `json:"updateTime,omitempty"`
}

// CertificateMapEntryInput - Defines a certificate map entry.
type CertificateMapEntryInput struct {
	// A set of Certificates defines for the given `hostname`. There can be defined up to four certificates in each Certificate Map Entry. Each certificate must match pattern `projects/*/locations/*/certificates/*`.
	Certificates []string `json:"certificates,omitempty"`
	// One or more paragraphs of text description of a certificate map entry.
	Description *string `json:"description,omitempty"`
	// A Hostname (FQDN, e.g. `example.com`) or a wildcard hostname expression (`*.example.com`) for a set of hostnames with common suffix. Used as Server Name Indication (SNI) for selecting a proper certificate.
	Hostname *string `json:"hostname,omitempty"`
	// Set of labels associated with a Certificate Map Entry.
	Labels map[string]string `json:"labels,omitempty"`
	// A predefined matcher for particular cases, other than SNI selection.
	Matcher *CertificateMapEntryMatcherEnum `json:"matcher,omitempty"`
	// A user-defined name of the Certificate Map Entry. Certificate Map Entry names must be unique globally and match pattern `projects/*/locations/*/certificateMaps/*/certificateMapEntries/*`.
	Name *string `json:"name,omitempty"`
}
