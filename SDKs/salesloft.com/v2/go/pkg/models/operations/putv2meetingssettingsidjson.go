// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type PutV2MeetingsSettingsIDJSONRequestBody struct {
	// Allow other team members to schedule on you behalf.
	AllowBookingOnBehalf *bool `form:"name=allow_booking_on_behalf"`
	// Allow team members to insert available time outside your working hours.
	AllowBookingOvertime *bool `form:"name=allow_booking_overtime"`
	// Allow team members to double book events on your calendar.
	AllowEventOverlap *bool `form:"name=allow_event_overlap"`
	// The number of days out the user allows a prospect to schedule a meeting
	AvailabilityLimit *int64 `form:"name=availability_limit"`
	// If Availability Limits have been turned on
	AvailabilityLimitEnabled *bool `form:"name=availability_limit_enabled"`
	// Default buffer duration in minutes set by a user
	BufferTimeDuration *int64 `form:"name=buffer_time_duration"`
	// Calendar type
	CalendarType *string `form:"name=calendar_type"`
	// Default meeting length in minutes set by the user
	DefaultMeetingLength *int64 `form:"name=default_meeting_length"`
	// Default description of the meeting
	Description *string `form:"name=description"`
	// Determines if a user enabled Calendar Sync feature
	EnableCalendarSync *bool `form:"name=enable_calendar_sync"`
	// Determines if location will be filled via third-party service (Zoom, GoToMeeting, etc.)
	EnableDynamicLocation *bool `form:"name=enable_dynamic_location"`
	// Default location of the meeting
	Location *string `form:"name=location"`
	// Determines if the user lost calendar connection
	PrimaryCalendarConnectionFailed *bool `form:"name=primary_calendar_connection_failed"`
	// ID of the primary calendar
	PrimaryCalendarID *string `form:"name=primary_calendar_id"`
	// Display name of the primary calendar
	PrimaryCalendarName *string `form:"name=primary_calendar_name"`
	// Determines if a user enabled reschedule meetings feature
	RescheduleMeetingsEnabled *bool `form:"name=reschedule_meetings_enabled"`
	// Determines if meetings are scheduled with a 15 minute buffer between them
	ScheduleBufferEnabled *bool `form:"name=schedule_buffer_enabled"`
	// The number of hours in advance a user requires someone to a book a meeting with them
	ScheduleDelay *int64 `form:"name=schedule_delay"`
	// Allow team members to see the details of events on your calendar.
	ShareEventDetail *bool `form:"name=share_event_detail"`
	// Time zone for current calendar
	TimeZone *string `form:"name=time_zone"`
	// Times available set by a user that can be used to book meetings
	TimesAvailable map[string]interface{} `form:"name=times_available,json"`
	// Default title of the meeting
	Title *string `form:"name=title"`
}

type PutV2MeetingsSettingsIDJSONRequest struct {
	RequestBody *PutV2MeetingsSettingsIDJSONRequestBody `request:"mediaType=application/x-www-form-urlencoded"`
	// MeetingSetting ID
	ID string `pathParam:"style=simple,explode=false,name=id"`
}

type PutV2MeetingsSettingsIDJSONResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
