"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import card as shared_card
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ScheduleAccountUpdaterRequest:
    
    merchant_account: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantAccount') }})
    r"""Account of the merchant."""  
    reference: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reference') }})
    r"""A reference that merchants can apply for the call."""  
    additional_data: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalData'), 'exclude': lambda f: f is None }})
    r"""This field contains additional data, which may be required for a particular request."""  
    card: Optional[shared_card.Card] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('card'), 'exclude': lambda f: f is None }})  
    selected_recurring_detail_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selectedRecurringDetailReference'), 'exclude': lambda f: f is None }})
    r"""The selected detail recurring reference.
    
    Optional if `card` is provided.
    """  
    shopper_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shopperReference'), 'exclude': lambda f: f is None }})
    r"""The reference of the shopper that owns the recurring contract.
    
    Optional if `card` is provided.
    """  
    