/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * RepresentativeInfoResponse - The result of a representative info lookup query.
 */
public class RepresentativeInfoResponse {
    /**
     * A map of political geographic divisions that contain the requested address, keyed by the unique Open Civic Data identifier for this division.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("divisions")
    public java.util.Map<String, GeographicDivision> divisions;
    public RepresentativeInfoResponse withDivisions(java.util.Map<String, GeographicDivision> divisions) {
        this.divisions = divisions;
        return this;
    }
    
    /**
     * Identifies what kind of resource this is. Value: the fixed string "civicinfo#representativeInfoResponse".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;
    public RepresentativeInfoResponse withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * A simple representation of an address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("normalizedInput")
    public SimpleAddressType normalizedInput;
    public RepresentativeInfoResponse withNormalizedInput(SimpleAddressType normalizedInput) {
        this.normalizedInput = normalizedInput;
        return this;
    }
    
    /**
     * Elected offices referenced by the divisions listed above. Will only be present if includeOffices was true in the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("offices")
    public Office[] offices;
    public RepresentativeInfoResponse withOffices(Office[] offices) {
        this.offices = offices;
        return this;
    }
    
    /**
     * Officials holding the offices listed above. Will only be present if includeOffices was true in the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("officials")
    public Official[] officials;
    public RepresentativeInfoResponse withOfficials(Official[] officials) {
        this.officials = officials;
        return this;
    }
    
}
