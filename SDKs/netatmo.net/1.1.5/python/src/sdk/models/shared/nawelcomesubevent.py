"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import nawelcomesnapshot as shared_nawelcomesnapshot
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class NAWelcomeSubEventTypeEnum(str, Enum):
    r"""Type of the detected object."""
    HUMAN = 'human'
    ANIMAL = 'animal'
    VEHICLE = 'vehicle'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NAWelcomeSubEvent:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Identifier of the sub event"""  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    r"""User facing sub event description"""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offset'), 'exclude': lambda f: f is None }})  
    snapshot: Optional[shared_nawelcomesnapshot.NAWelcomeSnapshot] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('snapshot'), 'exclude': lambda f: f is None }})  
    time: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'exclude': lambda f: f is None }})
    r"""Time of occurence of the sub event"""  
    type: Optional[NAWelcomeSubEventTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of the detected object."""  
    