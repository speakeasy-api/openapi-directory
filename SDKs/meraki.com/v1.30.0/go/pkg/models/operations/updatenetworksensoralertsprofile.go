// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type UpdateNetworkSensorAlertsProfilePathParams struct {
	ID        string `pathParam:"style=simple,explode=false,name=id"`
	NetworkID string `pathParam:"style=simple,explode=false,name=networkId"`
}

// UpdateNetworkSensorAlertsProfileRequestBodyConditionsDirectionEnum - If 'above', an alert will be sent when a sensor reads above the threshold. If 'below', an alert will be sent when a sensor reads below the threshold. Only applicable for temperature and humidity thresholds.
type UpdateNetworkSensorAlertsProfileRequestBodyConditionsDirectionEnum string

const (
	UpdateNetworkSensorAlertsProfileRequestBodyConditionsDirectionEnumAbove UpdateNetworkSensorAlertsProfileRequestBodyConditionsDirectionEnum = "above"
	UpdateNetworkSensorAlertsProfileRequestBodyConditionsDirectionEnumBelow UpdateNetworkSensorAlertsProfileRequestBodyConditionsDirectionEnum = "below"
)

func (e *UpdateNetworkSensorAlertsProfileRequestBodyConditionsDirectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "above":
		fallthrough
	case "below":
		*e = UpdateNetworkSensorAlertsProfileRequestBodyConditionsDirectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkSensorAlertsProfileRequestBodyConditionsDirectionEnum: %s", s)
	}
}

// UpdateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum - Length of time in seconds that the triggering state must persist before an alert is sent. Available options are 0 seconds, 1 minute, 2 minutes, 3 minutes, 4 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, and 1 hour. Default is 0.
type UpdateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum string

const (
	UpdateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnumZero                    UpdateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum = "0"
	UpdateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnumSixty                   UpdateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum = "60"
	UpdateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnumOneHundredAndTwenty     UpdateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum = "120"
	UpdateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnumOneHundredAndEighty     UpdateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum = "180"
	UpdateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnumTwoHundredAndForty      UpdateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum = "240"
	UpdateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnumThreeHundred            UpdateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum = "300"
	UpdateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnumSixHundred              UpdateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum = "600"
	UpdateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnumNineHundred             UpdateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum = "900"
	UpdateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnumOneThousandEightHundred UpdateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum = "1800"
	UpdateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnumThreeThousandSixHundred UpdateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum = "3600"
)

func (e *UpdateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "60":
		fallthrough
	case "120":
		fallthrough
	case "180":
		fallthrough
	case "240":
		fallthrough
	case "300":
		fallthrough
	case "600":
		fallthrough
	case "900":
		fallthrough
	case "1800":
		fallthrough
	case "3600":
		*e = UpdateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum: %s", s)
	}
}

// UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdDoor - Door open threshold. 'open' must be provided and set to true.
type UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdDoor struct {
	// Alerting threshold for a door open event. Must be set to true.
	Open bool `json:"open"`
}

// UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum - Alerting threshold as a qualitative humidity level.
type UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum string

const (
	UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnumFair       UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum = "fair"
	UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnumGood       UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum = "good"
	UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnumInadequate UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum = "inadequate"
	UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnumPoor       UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum = "poor"
)

func (e *UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "fair":
		fallthrough
	case "good":
		fallthrough
	case "inadequate":
		fallthrough
	case "poor":
		*e = UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum: %s", s)
	}
}

// UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidity - Humidity threshold. One of 'relativePercentage' or 'quality' must be provided.
type UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidity struct {
	// Alerting threshold as a qualitative humidity level.
	Quality *UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum `json:"quality,omitempty"`
	// Alerting threshold in %RH.
	RelativePercentage *int64 `json:"relativePercentage,omitempty"`
}

// UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum - Alerting threshold as a qualitative indoor air quality level.
type UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum string

const (
	UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnumFair       UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum = "fair"
	UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnumGood       UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum = "good"
	UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnumInadequate UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum = "inadequate"
	UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnumPoor       UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum = "poor"
)

func (e *UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "fair":
		fallthrough
	case "good":
		fallthrough
	case "inadequate":
		fallthrough
	case "poor":
		*e = UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum: %s", s)
	}
}

// UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQuality - Indoor air quality score threshold. One of 'score' or 'quality' must be provided.
type UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQuality struct {
	// Alerting threshold as a qualitative indoor air quality level.
	Quality *UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum `json:"quality,omitempty"`
	// Alerting threshold as indoor air quality score.
	Score *int64 `json:"score,omitempty"`
}

// UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum - Alerting threshold as a qualitative ambient noise level.
type UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum string

const (
	UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnumFair       UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum = "fair"
	UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnumGood       UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum = "good"
	UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnumInadequate UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum = "inadequate"
	UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnumPoor       UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum = "poor"
)

func (e *UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "fair":
		fallthrough
	case "good":
		fallthrough
	case "inadequate":
		fallthrough
	case "poor":
		*e = UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum: %s", s)
	}
}

// UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbient - Ambient noise threshold. One of 'level' or 'quality' must be provided.
type UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbient struct {
	// Alerting threshold as adjusted decibels.
	Level *int64 `json:"level,omitempty"`
	// Alerting threshold as a qualitative ambient noise level.
	Quality *UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum `json:"quality,omitempty"`
}

// UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoise - Noise threshold. 'ambient' must be provided.
type UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoise struct {
	// Ambient noise threshold. One of 'level' or 'quality' must be provided.
	Ambient UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbient `json:"ambient"`
}

// UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum - Alerting threshold as a qualitative PM2.5 level.
type UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum string

const (
	UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnumFair       UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum = "fair"
	UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnumGood       UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum = "good"
	UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnumInadequate UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum = "inadequate"
	UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnumPoor       UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum = "poor"
)

func (e *UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "fair":
		fallthrough
	case "good":
		fallthrough
	case "inadequate":
		fallthrough
	case "poor":
		*e = UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum: %s", s)
	}
}

// UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25 - PM2.5 concentration threshold. One of 'concentration' or 'quality' must be provided.
type UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25 struct {
	// Alerting threshold as PM2.5 parts per million.
	Concentration *int64 `json:"concentration,omitempty"`
	// Alerting threshold as a qualitative PM2.5 level.
	Quality *UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum `json:"quality,omitempty"`
}

// UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum - Alerting threshold as a qualitative temperature level.
type UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum string

const (
	UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnumFair       UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum = "fair"
	UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnumGood       UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum = "good"
	UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnumInadequate UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum = "inadequate"
	UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnumPoor       UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum = "poor"
)

func (e *UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "fair":
		fallthrough
	case "good":
		fallthrough
	case "inadequate":
		fallthrough
	case "poor":
		*e = UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum: %s", s)
	}
}

// UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperature - Temperature threshold. One of 'celsius', 'fahrenheit', or 'quality' must be provided.
type UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperature struct {
	// Alerting threshold in degrees Celsius.
	Celsius *float32 `json:"celsius,omitempty"`
	// Alerting threshold in degrees Fahrenheit.
	Fahrenheit *float32 `json:"fahrenheit,omitempty"`
	// Alerting threshold as a qualitative temperature level.
	Quality *UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum `json:"quality,omitempty"`
}

// UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum - Alerting threshold as a qualitative TVOC level.
type UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum string

const (
	UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnumFair       UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum = "fair"
	UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnumGood       UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum = "good"
	UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnumInadequate UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum = "inadequate"
	UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnumPoor       UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum = "poor"
)

func (e *UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "fair":
		fallthrough
	case "good":
		fallthrough
	case "inadequate":
		fallthrough
	case "poor":
		*e = UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum: %s", s)
	}
}

// UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvoc - TVOC concentration threshold. One of 'concentration' or 'quality' must be provided.
type UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvoc struct {
	// Alerting threshold as TVOC micrograms per cubic meter.
	Concentration *int64 `json:"concentration,omitempty"`
	// Alerting threshold as a qualitative TVOC level.
	Quality *UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum `json:"quality,omitempty"`
}

// UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdWater - Water detection threshold. 'present' must be provided and set to true.
type UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdWater struct {
	// Alerting threshold for a water detection event. Must be set to true.
	Present bool `json:"present"`
}

// UpdateNetworkSensorAlertsProfileRequestBodyConditionsThreshold - Threshold for sensor readings that will cause an alert to be sent. This object should contain a single property key matching the condition's 'metric' value.
type UpdateNetworkSensorAlertsProfileRequestBodyConditionsThreshold struct {
	// Door open threshold. 'open' must be provided and set to true.
	Door *UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdDoor `json:"door,omitempty"`
	// Humidity threshold. One of 'relativePercentage' or 'quality' must be provided.
	Humidity *UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidity `json:"humidity,omitempty"`
	// Indoor air quality score threshold. One of 'score' or 'quality' must be provided.
	IndoorAirQuality *UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQuality `json:"indoorAirQuality,omitempty"`
	// Noise threshold. 'ambient' must be provided.
	Noise *UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoise `json:"noise,omitempty"`
	// PM2.5 concentration threshold. One of 'concentration' or 'quality' must be provided.
	Pm25 *UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25 `json:"pm25,omitempty"`
	// Temperature threshold. One of 'celsius', 'fahrenheit', or 'quality' must be provided.
	Temperature *UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperature `json:"temperature,omitempty"`
	// TVOC concentration threshold. One of 'concentration' or 'quality' must be provided.
	Tvoc *UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvoc `json:"tvoc,omitempty"`
	// Water detection threshold. 'present' must be provided and set to true.
	Water *UpdateNetworkSensorAlertsProfileRequestBodyConditionsThresholdWater `json:"water,omitempty"`
}

type UpdateNetworkSensorAlertsProfileRequestBodyConditions struct {
	// If 'above', an alert will be sent when a sensor reads above the threshold. If 'below', an alert will be sent when a sensor reads below the threshold. Only applicable for temperature and humidity thresholds.
	Direction *UpdateNetworkSensorAlertsProfileRequestBodyConditionsDirectionEnum `json:"direction,omitempty"`
	// Length of time in seconds that the triggering state must persist before an alert is sent. Available options are 0 seconds, 1 minute, 2 minutes, 3 minutes, 4 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, and 1 hour. Default is 0.
	Duration *UpdateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum `json:"duration,omitempty"`
	// The type of sensor metric that will be monitored for changes. Available metrics are door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water.
	Metric string `json:"metric"`
	// Threshold for sensor readings that will cause an alert to be sent. This object should contain a single property key matching the condition's 'metric' value.
	Threshold UpdateNetworkSensorAlertsProfileRequestBodyConditionsThreshold `json:"threshold"`
}

// UpdateNetworkSensorAlertsProfileRequestBodyRecipients - List of recipients that will recieve the alert.
type UpdateNetworkSensorAlertsProfileRequestBodyRecipients struct {
	// A list of emails that will receive information about the alert.
	Emails []string `json:"emails,omitempty"`
	// A list of webhook endpoint IDs that will receive information about the alert.
	HTTPServerIds []string `json:"httpServerIds,omitempty"`
	// A list of SMS numbers that will receive information about the alert.
	SmsNumbers []string `json:"smsNumbers,omitempty"`
}

// UpdateNetworkSensorAlertsProfileRequestBodySchedule - The sensor schedule to use with the alert profile.
type UpdateNetworkSensorAlertsProfileRequestBodySchedule struct {
	// ID of the sensor schedule to use with the alert profile. If not defined, the alert profile will be active at all times.
	ID *string `json:"id,omitempty"`
}

type UpdateNetworkSensorAlertsProfileRequestBody struct {
	// List of conditions that will cause the profile to send an alert.
	Conditions []UpdateNetworkSensorAlertsProfileRequestBodyConditions `json:"conditions,omitempty"`
	// Name of the sensor alert profile.
	Name *string `json:"name,omitempty"`
	// List of recipients that will recieve the alert.
	Recipients *UpdateNetworkSensorAlertsProfileRequestBodyRecipients `json:"recipients,omitempty"`
	// The sensor schedule to use with the alert profile.
	Schedule *UpdateNetworkSensorAlertsProfileRequestBodySchedule `json:"schedule,omitempty"`
	// List of device serials assigned to this sensor alert profile.
	Serials []string `json:"serials,omitempty"`
}

type UpdateNetworkSensorAlertsProfileRequest struct {
	PathParams UpdateNetworkSensorAlertsProfilePathParams
	Request    *UpdateNetworkSensorAlertsProfileRequestBody `request:"mediaType=application/json"`
}

// UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum - If 'above', an alert will be sent when a sensor reads above the threshold. If 'below', an alert will be sent when a sensor reads below the threshold. Only applicable for temperature and humidity thresholds.
type UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum string

const (
	UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnumAbove UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum = "above"
	UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnumBelow UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum = "below"
)

func (e *UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "above":
		fallthrough
	case "below":
		*e = UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum: %s", s)
	}
}

// UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum - Length of time in seconds that the triggering state must persist before an alert is sent. Available options are 0 seconds, 1 minute, 2 minutes, 3 minutes, 4 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, and 1 hour. Default is 0.
type UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum string

const (
	UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnumZero                    UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum = "0"
	UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnumSixty                   UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum = "60"
	UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnumOneHundredAndTwenty     UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum = "120"
	UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnumOneHundredAndEighty     UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum = "180"
	UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnumTwoHundredAndForty      UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum = "240"
	UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnumThreeHundred            UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum = "300"
	UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnumSixHundred              UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum = "600"
	UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnumNineHundred             UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum = "900"
	UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnumOneThousandEightHundred UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum = "1800"
	UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnumThreeThousandSixHundred UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum = "3600"
)

func (e *UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "60":
		fallthrough
	case "120":
		fallthrough
	case "180":
		fallthrough
	case "240":
		fallthrough
	case "300":
		fallthrough
	case "600":
		fallthrough
	case "900":
		fallthrough
	case "1800":
		fallthrough
	case "3600":
		*e = UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum: %s", s)
	}
}

// UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor - Door open threshold. 'open' must be provided and set to true.
type UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor struct {
	// Alerting threshold for a door open event. Must be set to true.
	Open bool `json:"open"`
}

// UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum - Alerting threshold as a qualitative humidity level.
type UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum string

const (
	UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnumFair       UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum = "fair"
	UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnumGood       UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum = "good"
	UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnumInadequate UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum = "inadequate"
	UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnumPoor       UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum = "poor"
)

func (e *UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "fair":
		fallthrough
	case "good":
		fallthrough
	case "inadequate":
		fallthrough
	case "poor":
		*e = UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum: %s", s)
	}
}

// UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity - Humidity threshold. One of 'relativePercentage' or 'quality' must be provided.
type UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity struct {
	// Alerting threshold as a qualitative humidity level.
	Quality *UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum `json:"quality,omitempty"`
	// Alerting threshold in %RH.
	RelativePercentage *int64 `json:"relativePercentage,omitempty"`
}

// UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum - Alerting threshold as a qualitative indoor air quality level.
type UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum string

const (
	UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnumFair       UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum = "fair"
	UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnumGood       UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum = "good"
	UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnumInadequate UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum = "inadequate"
	UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnumPoor       UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum = "poor"
)

func (e *UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "fair":
		fallthrough
	case "good":
		fallthrough
	case "inadequate":
		fallthrough
	case "poor":
		*e = UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum: %s", s)
	}
}

// UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality - Indoor air quality score threshold. One of 'score' or 'quality' must be provided.
type UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality struct {
	// Alerting threshold as a qualitative indoor air quality level.
	Quality *UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum `json:"quality,omitempty"`
	// Alerting threshold as indoor air quality score.
	Score *int64 `json:"score,omitempty"`
}

// UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum - Alerting threshold as a qualitative ambient noise level.
type UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum string

const (
	UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnumFair       UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum = "fair"
	UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnumGood       UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum = "good"
	UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnumInadequate UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum = "inadequate"
	UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnumPoor       UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum = "poor"
)

func (e *UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "fair":
		fallthrough
	case "good":
		fallthrough
	case "inadequate":
		fallthrough
	case "poor":
		*e = UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum: %s", s)
	}
}

// UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient - Ambient noise threshold. One of 'level' or 'quality' must be provided.
type UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient struct {
	// Alerting threshold as adjusted decibels.
	Level *int64 `json:"level,omitempty"`
	// Alerting threshold as a qualitative ambient noise level.
	Quality *UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum `json:"quality,omitempty"`
}

// UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise - Noise threshold. 'ambient' must be provided.
type UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise struct {
	// Ambient noise threshold. One of 'level' or 'quality' must be provided.
	Ambient UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient `json:"ambient"`
}

// UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum - Alerting threshold as a qualitative PM2.5 level.
type UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum string

const (
	UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnumFair       UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum = "fair"
	UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnumGood       UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum = "good"
	UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnumInadequate UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum = "inadequate"
	UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnumPoor       UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum = "poor"
)

func (e *UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "fair":
		fallthrough
	case "good":
		fallthrough
	case "inadequate":
		fallthrough
	case "poor":
		*e = UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum: %s", s)
	}
}

// UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25 - PM2.5 concentration threshold. One of 'concentration' or 'quality' must be provided.
type UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25 struct {
	// Alerting threshold as PM2.5 parts per million.
	Concentration *int64 `json:"concentration,omitempty"`
	// Alerting threshold as a qualitative PM2.5 level.
	Quality *UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum `json:"quality,omitempty"`
}

// UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum - Alerting threshold as a qualitative temperature level.
type UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum string

const (
	UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnumFair       UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum = "fair"
	UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnumGood       UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum = "good"
	UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnumInadequate UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum = "inadequate"
	UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnumPoor       UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum = "poor"
)

func (e *UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "fair":
		fallthrough
	case "good":
		fallthrough
	case "inadequate":
		fallthrough
	case "poor":
		*e = UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum: %s", s)
	}
}

// UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature - Temperature threshold. One of 'celsius', 'fahrenheit', or 'quality' must be provided.
type UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature struct {
	// Alerting threshold in degrees Celsius.
	Celsius *float32 `json:"celsius,omitempty"`
	// Alerting threshold in degrees Fahrenheit.
	Fahrenheit *float32 `json:"fahrenheit,omitempty"`
	// Alerting threshold as a qualitative temperature level.
	Quality *UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum `json:"quality,omitempty"`
}

// UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum - Alerting threshold as a qualitative TVOC level.
type UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum string

const (
	UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnumFair       UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum = "fair"
	UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnumGood       UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum = "good"
	UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnumInadequate UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum = "inadequate"
	UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnumPoor       UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum = "poor"
)

func (e *UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "fair":
		fallthrough
	case "good":
		fallthrough
	case "inadequate":
		fallthrough
	case "poor":
		*e = UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum: %s", s)
	}
}

// UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc - TVOC concentration threshold. One of 'concentration' or 'quality' must be provided.
type UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc struct {
	// Alerting threshold as TVOC micrograms per cubic meter.
	Concentration *int64 `json:"concentration,omitempty"`
	// Alerting threshold as a qualitative TVOC level.
	Quality *UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum `json:"quality,omitempty"`
}

// UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater - Water detection threshold. 'present' must be provided and set to true.
type UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater struct {
	// Alerting threshold for a water detection event. Must be set to true.
	Present bool `json:"present"`
}

// UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold - Threshold for sensor readings that will cause an alert to be sent. This object should contain a single property key matching the condition's 'metric' value.
type UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold struct {
	// Door open threshold. 'open' must be provided and set to true.
	Door *UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor `json:"door,omitempty"`
	// Humidity threshold. One of 'relativePercentage' or 'quality' must be provided.
	Humidity *UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity `json:"humidity,omitempty"`
	// Indoor air quality score threshold. One of 'score' or 'quality' must be provided.
	IndoorAirQuality *UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality `json:"indoorAirQuality,omitempty"`
	// Noise threshold. 'ambient' must be provided.
	Noise *UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise `json:"noise,omitempty"`
	// PM2.5 concentration threshold. One of 'concentration' or 'quality' must be provided.
	Pm25 *UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25 `json:"pm25,omitempty"`
	// Temperature threshold. One of 'celsius', 'fahrenheit', or 'quality' must be provided.
	Temperature *UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature `json:"temperature,omitempty"`
	// TVOC concentration threshold. One of 'concentration' or 'quality' must be provided.
	Tvoc *UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc `json:"tvoc,omitempty"`
	// Water detection threshold. 'present' must be provided and set to true.
	Water *UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater `json:"water,omitempty"`
}

type UpdateNetworkSensorAlertsProfile200ApplicationJSONConditions struct {
	// If 'above', an alert will be sent when a sensor reads above the threshold. If 'below', an alert will be sent when a sensor reads below the threshold. Only applicable for temperature and humidity thresholds.
	Direction *UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum `json:"direction,omitempty"`
	// Length of time in seconds that the triggering state must persist before an alert is sent. Available options are 0 seconds, 1 minute, 2 minutes, 3 minutes, 4 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, and 1 hour. Default is 0.
	Duration *UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum `json:"duration,omitempty"`
	// The type of sensor metric that will be monitored for changes. Available metrics are door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water.
	Metric string `json:"metric"`
	// Threshold for sensor readings that will cause an alert to be sent. This object should contain a single property key matching the condition's 'metric' value.
	Threshold UpdateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold `json:"threshold"`
}

// UpdateNetworkSensorAlertsProfile200ApplicationJSONRecipients - List of recipients that will recieve the alert.
type UpdateNetworkSensorAlertsProfile200ApplicationJSONRecipients struct {
	// A list of emails that will receive information about the alert.
	Emails []string `json:"emails,omitempty"`
	// A list of webhook endpoint IDs that will receive information about the alert.
	HTTPServerIds []string `json:"httpServerIds,omitempty"`
	// A list of SMS numbers that will receive information about the alert.
	SmsNumbers []string `json:"smsNumbers,omitempty"`
}

// UpdateNetworkSensorAlertsProfile200ApplicationJSONSchedule - The sensor schedule to use with the alert profile.
type UpdateNetworkSensorAlertsProfile200ApplicationJSONSchedule struct {
	// ID of the sensor schedule to use with the alert profile. If not defined, the alert profile will be active at all times.
	ID *string `json:"id,omitempty"`
	// Name of the sensor schedule to use with the alert profile.
	Name *string `json:"name,omitempty"`
}

// UpdateNetworkSensorAlertsProfile200ApplicationJSON - Successful operation
type UpdateNetworkSensorAlertsProfile200ApplicationJSON struct {
	// List of conditions that will cause the profile to send an alert.
	Conditions []UpdateNetworkSensorAlertsProfile200ApplicationJSONConditions `json:"conditions"`
	// Name of the sensor alert profile.
	Name *string `json:"name,omitempty"`
	// ID of the sensor alert profile.
	ProfileID *string `json:"profileId,omitempty"`
	// List of recipients that will recieve the alert.
	Recipients *UpdateNetworkSensorAlertsProfile200ApplicationJSONRecipients `json:"recipients,omitempty"`
	// The sensor schedule to use with the alert profile.
	Schedule *UpdateNetworkSensorAlertsProfile200ApplicationJSONSchedule `json:"schedule,omitempty"`
	// List of device serials assigned to this sensor alert profile.
	Serials []string `json:"serials,omitempty"`
}

type UpdateNetworkSensorAlertsProfileResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateNetworkSensorAlertsProfile200ApplicationJSONObject *UpdateNetworkSensorAlertsProfile200ApplicationJSON
}
