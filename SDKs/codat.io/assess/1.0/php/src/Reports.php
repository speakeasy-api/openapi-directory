<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Reports 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Enhanced Balance Sheet Accounts
     * 
     * The Enhanced Balance Sheet Accounts endpoint returns a list of categorized accounts that appear on a company’s Balance Sheet along with a balance per financial statement date.
     * 
     * Codat suggests a category for each account automatically, but you can [change it](/docs/assess-categorizing-accounts-ecommerce-lending) to a more suitable one.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountsForEnhancedBalanceSheetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAccountsForEnhancedBalanceSheetResponse
     */
	public function getAccountsForEnhancedBalanceSheet(
        \OpenAPI\OpenAPI\Models\Operations\GetAccountsForEnhancedBalanceSheetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAccountsForEnhancedBalanceSheetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/companies/{companyId}/reports/enhancedBalanceSheet/accounts', \OpenAPI\OpenAPI\Models\Operations\GetAccountsForEnhancedBalanceSheetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAccountsForEnhancedBalanceSheetRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAccountsForEnhancedBalanceSheetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enhancedReport = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EnhancedReport', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Enhanced Profit and Loss Accounts
     * 
     * The Enhanced Profit and Loss Accounts endpoint returns a list of categorized accounts that appear on a company’s Profit and Loss. It also includes a balance per the financial statement date.
     * 
     * Codat suggests a category for each account automatically, but you can [change it](/docs/assess-categorizing-accounts-ecommerce-lending) to a more suitable one.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountsForEnhancedProfitAndLossRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAccountsForEnhancedProfitAndLossResponse
     */
	public function getAccountsForEnhancedProfitAndLoss(
        \OpenAPI\OpenAPI\Models\Operations\GetAccountsForEnhancedProfitAndLossRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAccountsForEnhancedProfitAndLossResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/companies/{companyId}/reports/enhancedProfitAndLoss/accounts', \OpenAPI\OpenAPI\Models\Operations\GetAccountsForEnhancedProfitAndLossRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAccountsForEnhancedProfitAndLossRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAccountsForEnhancedProfitAndLossResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enhancedReport = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EnhancedReport', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the customer retention metrics for a specific company.
     * 
     * Gets the customer retention metrics for a specific company connection, over one or more periods of time.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCommerceCustomerRetentionMetricsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCommerceCustomerRetentionMetricsResponse
     */
	public function getCommerceCustomerRetentionMetrics(
        \OpenAPI\OpenAPI\Models\Operations\GetCommerceCustomerRetentionMetricsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCommerceCustomerRetentionMetricsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data/companies/{companyId}/connections/{connectionId}/assess/commerceMetrics/customerRetention', \OpenAPI\OpenAPI\Models\Operations\GetCommerceCustomerRetentionMetricsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCommerceCustomerRetentionMetricsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCommerceCustomerRetentionMetricsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->report = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Report', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the lifetime value metric for a specific company.
     * 
     * Gets the lifetime value metric for a specific company connection, over one or more periods of time.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCommerceLifetimeValueMetricsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCommerceLifetimeValueMetricsResponse
     */
	public function getCommerceLifetimeValueMetrics(
        \OpenAPI\OpenAPI\Models\Operations\GetCommerceLifetimeValueMetricsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCommerceLifetimeValueMetricsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data/companies/{companyId}/connections/{connectionId}/assess/commerceMetrics/lifetimeValue', \OpenAPI\OpenAPI\Models\Operations\GetCommerceLifetimeValueMetricsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCommerceLifetimeValueMetricsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCommerceLifetimeValueMetricsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->report = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Report', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get order information for a specific company
     * 
     * Gets the order information for a specific company connection, over one or more periods of time.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCommerceOrdersMetricsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCommerceOrdersMetricsResponse
     */
	public function getCommerceOrdersMetrics(
        \OpenAPI\OpenAPI\Models\Operations\GetCommerceOrdersMetricsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCommerceOrdersMetricsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data/companies/{companyId}/connections/{connectionId}/assess/commerceMetrics/orders', \OpenAPI\OpenAPI\Models\Operations\GetCommerceOrdersMetricsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCommerceOrdersMetricsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCommerceOrdersMetricsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->report = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Report', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the refunds information for a specific company
     * 
     * Gets the refunds information for a specific company connection, over one or more periods of time.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCommerceRefundsMetricsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCommerceRefundsMetricsResponse
     */
	public function getCommerceRefundsMetrics(
        \OpenAPI\OpenAPI\Models\Operations\GetCommerceRefundsMetricsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCommerceRefundsMetricsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data/companies/{companyId}/connections/{connectionId}/assess/commerceMetrics/refunds', \OpenAPI\OpenAPI\Models\Operations\GetCommerceRefundsMetricsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCommerceRefundsMetricsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCommerceRefundsMetricsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->report = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Report', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Commerce Revenue Metrics
     * 
     * Get the revenue and revenue growth for a specific company connection, over one or more periods of time.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCommerceRevenueMetricsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCommerceRevenueMetricsResponse
     */
	public function getCommerceRevenueMetrics(
        \OpenAPI\OpenAPI\Models\Operations\GetCommerceRevenueMetricsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCommerceRevenueMetricsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data/companies/{companyId}/connections/{connectionId}/assess/commerceMetrics/revenue', \OpenAPI\OpenAPI\Models\Operations\GetCommerceRevenueMetricsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCommerceRevenueMetricsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCommerceRevenueMetricsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->report = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Report', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Enhanced Balance Sheet
     * 
     * Gets a fully categorized balance sheet statement for a given company, over one or more period(s).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEnhancedBalanceSheetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEnhancedBalanceSheetResponse
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function getEnhancedBalanceSheet(
        \OpenAPI\OpenAPI\Models\Operations\GetEnhancedBalanceSheetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEnhancedBalanceSheetResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data/companies/{companyId}/connections/{connectionId}/assess/enhancedBalanceSheet', \OpenAPI\OpenAPI\Models\Operations\GetEnhancedBalanceSheetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetEnhancedBalanceSheetRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEnhancedBalanceSheetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->report = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Report', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get enhanced cash flow report
     * 
     * The Enhanced Cash Flow Transactions endpoint provides a fully categorized list of banking transactions for a company. Accounts and transaction data are obtained from the company's banking data sources.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEnhancedCashFlowTransactionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEnhancedCashFlowTransactionsResponse
     */
	public function getEnhancedCashFlowTransactions(
        \OpenAPI\OpenAPI\Models\Operations\GetEnhancedCashFlowTransactionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEnhancedCashFlowTransactionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/companies/{companyId}/reports/enhancedCashFlow/transactions', \OpenAPI\OpenAPI\Models\Operations\GetEnhancedCashFlowTransactionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetEnhancedCashFlowTransactionsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEnhancedCashFlowTransactionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enhancedCashFlowTransactions = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EnhancedCashFlowTransactions', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List financial metrics
     * 
     * Gets all the available financial metrics for a given company, over one or more periods.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEnhancedFinancialMetricsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEnhancedFinancialMetricsResponse
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function getEnhancedFinancialMetrics(
        \OpenAPI\OpenAPI\Models\Operations\GetEnhancedFinancialMetricsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEnhancedFinancialMetricsResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data/companies/{companyId}/connections/{connectionId}/assess/financialMetrics', \OpenAPI\OpenAPI\Models\Operations\GetEnhancedFinancialMetricsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetEnhancedFinancialMetricsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEnhancedFinancialMetricsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->financialMetrics = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FinancialMetrics', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Enhanced Invoices Report
     * 
     * Gets a list of invoices linked to the corresponding banking transaction
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEnhancedInvoicesReportRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEnhancedInvoicesReportResponse
     */
	public function getEnhancedInvoicesReport(
        \OpenAPI\OpenAPI\Models\Operations\GetEnhancedInvoicesReportRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEnhancedInvoicesReportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/companies/{companyId}/reports/enhancedInvoices', \OpenAPI\OpenAPI\Models\Operations\GetEnhancedInvoicesReportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetEnhancedInvoicesReportRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEnhancedInvoicesReportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->enhancedInvoicesReport = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EnhancedInvoicesReport', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Enhanced Profit and Loss
     * 
     * Gets a fully categorized profit and loss statement for a given company, over one or more period(s).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEnhancedProfitAndLossRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEnhancedProfitAndLossResponse
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function getEnhancedProfitAndLoss(
        \OpenAPI\OpenAPI\Models\Operations\GetEnhancedProfitAndLossRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEnhancedProfitAndLossResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data/companies/{companyId}/connections/{connectionId}/assess/enhancedProfitAndLoss', \OpenAPI\OpenAPI\Models\Operations\GetEnhancedProfitAndLossRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetEnhancedProfitAndLossRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEnhancedProfitAndLossResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->report = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Report', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get key metrics for subscription revenue
     * 
     * Gets key metrics for subscription revenue.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRecurringRevenueMetricsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRecurringRevenueMetricsResponse
     */
	public function getRecurringRevenueMetrics(
        \OpenAPI\OpenAPI\Models\Operations\GetRecurringRevenueMetricsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRecurringRevenueMetricsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data/companies/{companyId}/connections/{connectionId}/assess/subscriptions/mrr', \OpenAPI\OpenAPI\Models\Operations\GetRecurringRevenueMetricsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRecurringRevenueMetricsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->report = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Report', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Request production of key subscription revenue metrics
     * 
     * Request production of key subscription revenue metrics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RequestRecurringRevenueMetricsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestRecurringRevenueMetricsResponse
     */
	public function requestRecurringRevenueMetrics(
        \OpenAPI\OpenAPI\Models\Operations\RequestRecurringRevenueMetricsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestRecurringRevenueMetricsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data/companies/{companyId}/connections/{connectionId}/assess/subscriptions/process', \OpenAPI\OpenAPI\Models\Operations\RequestRecurringRevenueMetricsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestRecurringRevenueMetricsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->report = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Report', 'json');
            }
        }

        return $response;
    }
}