"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import evaluationresult as shared_evaluationresult
from ..shared import groundtruthmanifest as shared_groundtruthmanifest
from ..shared import outputconfig as shared_outputconfig
from ..shared import projectversionstatus_enum as shared_projectversionstatus_enum
from ..shared import testingdataresult as shared_testingdataresult
from ..shared import trainingdataresult as shared_trainingdataresult
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProjectVersionDescription:
    r"""A description of a version of an Amazon Rekognition Custom Labels model."""
    
    billable_training_time_in_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BillableTrainingTimeInSeconds'), 'exclude': lambda f: f is None }})  
    creation_timestamp: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationTimestamp'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    evaluation_result: Optional[shared_evaluationresult.EvaluationResult] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EvaluationResult'), 'exclude': lambda f: f is None }})  
    kms_key_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KmsKeyId'), 'exclude': lambda f: f is None }})  
    manifest_summary: Optional[shared_groundtruthmanifest.GroundTruthManifest] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ManifestSummary'), 'exclude': lambda f: f is None }})  
    max_inference_units: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxInferenceUnits'), 'exclude': lambda f: f is None }})  
    min_inference_units: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MinInferenceUnits'), 'exclude': lambda f: f is None }})  
    output_config: Optional[shared_outputconfig.OutputConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OutputConfig'), 'exclude': lambda f: f is None }})  
    project_version_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProjectVersionArn'), 'exclude': lambda f: f is None }})  
    source_project_version_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SourceProjectVersionArn'), 'exclude': lambda f: f is None }})  
    status: Optional[shared_projectversionstatus_enum.ProjectVersionStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})  
    status_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StatusMessage'), 'exclude': lambda f: f is None }})  
    testing_data_result: Optional[shared_testingdataresult.TestingDataResult] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TestingDataResult'), 'exclude': lambda f: f is None }})  
    training_data_result: Optional[shared_trainingdataresult.TrainingDataResult] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TrainingDataResult'), 'exclude': lambda f: f is None }})  
    training_end_timestamp: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TrainingEndTimestamp'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    