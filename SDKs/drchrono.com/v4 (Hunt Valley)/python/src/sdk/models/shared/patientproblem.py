"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PatientProblemIcdVersionEnum(str, Enum):
    r"""Either `9` or `10`. If omitted in writing, default to 10."""
    NINE = '9'
    TEN = '10'

class PatientProblemStatusEnum(str, Enum):
    r"""Either `active`, `inactive` or `resolved`. If omitted in writing, default to `active`"""
    ACTIVE = 'active'
    INACTIVE = 'inactive'
    RESOLVED = 'resolved'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientProblem:
    r"""Created"""
    
    doctor: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('doctor') }})  
    patient: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('patient') }})  
    date_changed: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_changed'), 'exclude': lambda f: f is None }})  
    date_diagnosis: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_diagnosis'), 'exclude': lambda f: f is None }})  
    date_onset: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_onset'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    icd_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('icd_code'), 'exclude': lambda f: f is None }})
    r"""ICD9 or ICD10 code for the problem"""  
    icd_version: Optional[PatientProblemIcdVersionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('icd_version'), 'exclude': lambda f: f is None }})
    r"""Either `9` or `10`. If omitted in writing, default to 10."""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    info_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('info_url'), 'exclude': lambda f: f is None }})
    r"""External URL with more information about the problem, intended for patient education"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the problem"""  
    notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notes'), 'exclude': lambda f: f is None }})
    r"""Any additional notes by the provider"""  
    snomed_ct_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('snomed_ct_code'), 'exclude': lambda f: f is None }})
    r"""SnoMED code for the problem"""  
    status: Optional[PatientProblemStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Either `active`, `inactive` or `resolved`. If omitted in writing, default to `active`"""  
    