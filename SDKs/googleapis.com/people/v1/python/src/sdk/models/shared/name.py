"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import fieldmetadata as shared_fieldmetadata
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Name:
    r"""A person's name. If the name is a mononym, the family name is empty."""
    
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Output only. The display name formatted according to the locale specified by the viewer's account or the `Accept-Language` HTTP header."""  
    display_name_last_first: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayNameLastFirst'), 'exclude': lambda f: f is None }})
    r"""Output only. The display name with the last name first formatted according to the locale specified by the viewer's account or the `Accept-Language` HTTP header."""  
    family_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('familyName'), 'exclude': lambda f: f is None }})
    r"""The family name."""  
    given_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('givenName'), 'exclude': lambda f: f is None }})
    r"""The given name."""  
    honorific_prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('honorificPrefix'), 'exclude': lambda f: f is None }})
    r"""The honorific prefixes, such as `Mrs.` or `Dr.`"""  
    honorific_suffix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('honorificSuffix'), 'exclude': lambda f: f is None }})
    r"""The honorific suffixes, such as `Jr.`"""  
    metadata: Optional[shared_fieldmetadata.FieldMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata'), 'exclude': lambda f: f is None }})
    r"""Metadata about a field."""  
    middle_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('middleName'), 'exclude': lambda f: f is None }})
    r"""The middle name(s)."""  
    phonetic_family_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phoneticFamilyName'), 'exclude': lambda f: f is None }})
    r"""The family name spelled as it sounds."""  
    phonetic_full_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phoneticFullName'), 'exclude': lambda f: f is None }})
    r"""The full name spelled as it sounds."""  
    phonetic_given_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phoneticGivenName'), 'exclude': lambda f: f is None }})
    r"""The given name spelled as it sounds."""  
    phonetic_honorific_prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phoneticHonorificPrefix'), 'exclude': lambda f: f is None }})
    r"""The honorific prefixes spelled as they sound."""  
    phonetic_honorific_suffix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phoneticHonorificSuffix'), 'exclude': lambda f: f is None }})
    r"""The honorific suffixes spelled as they sound."""  
    phonetic_middle_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phoneticMiddleName'), 'exclude': lambda f: f is None }})
    r"""The middle name(s) spelled as they sound."""  
    unstructured_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unstructuredName'), 'exclude': lambda f: f is None }})
    r"""The free form name value."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NameInput:
    r"""A person's name. If the name is a mononym, the family name is empty."""
    
    family_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('familyName'), 'exclude': lambda f: f is None }})
    r"""The family name."""  
    given_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('givenName'), 'exclude': lambda f: f is None }})
    r"""The given name."""  
    honorific_prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('honorificPrefix'), 'exclude': lambda f: f is None }})
    r"""The honorific prefixes, such as `Mrs.` or `Dr.`"""  
    honorific_suffix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('honorificSuffix'), 'exclude': lambda f: f is None }})
    r"""The honorific suffixes, such as `Jr.`"""  
    metadata: Optional[shared_fieldmetadata.FieldMetadataInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata'), 'exclude': lambda f: f is None }})
    r"""Metadata about a field."""  
    middle_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('middleName'), 'exclude': lambda f: f is None }})
    r"""The middle name(s)."""  
    phonetic_family_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phoneticFamilyName'), 'exclude': lambda f: f is None }})
    r"""The family name spelled as it sounds."""  
    phonetic_full_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phoneticFullName'), 'exclude': lambda f: f is None }})
    r"""The full name spelled as it sounds."""  
    phonetic_given_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phoneticGivenName'), 'exclude': lambda f: f is None }})
    r"""The given name spelled as it sounds."""  
    phonetic_honorific_prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phoneticHonorificPrefix'), 'exclude': lambda f: f is None }})
    r"""The honorific prefixes spelled as they sound."""  
    phonetic_honorific_suffix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phoneticHonorificSuffix'), 'exclude': lambda f: f is None }})
    r"""The honorific suffixes spelled as they sound."""  
    phonetic_middle_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phoneticMiddleName'), 'exclude': lambda f: f is None }})
    r"""The middle name(s) spelled as they sound."""  
    unstructured_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unstructuredName'), 'exclude': lambda f: f is None }})
    r"""The free form name value."""  
    