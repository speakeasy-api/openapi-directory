// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CertificateRenewRootTypeEnum - Root Type. Depending on certificate expiration date, SHA_1 not be allowed. Will default to SHA_2 if expiration date exceeds sha1 allowed date
type CertificateRenewRootTypeEnum string

const (
	CertificateRenewRootTypeEnumGodaddySha1   CertificateRenewRootTypeEnum = "GODADDY_SHA_1"
	CertificateRenewRootTypeEnumGodaddySha2   CertificateRenewRootTypeEnum = "GODADDY_SHA_2"
	CertificateRenewRootTypeEnumStarfieldSha1 CertificateRenewRootTypeEnum = "STARFIELD_SHA_1"
	CertificateRenewRootTypeEnumStarfieldSha2 CertificateRenewRootTypeEnum = "STARFIELD_SHA_2"
)

func (e CertificateRenewRootTypeEnum) ToPointer() *CertificateRenewRootTypeEnum {
	return &e
}

func (e *CertificateRenewRootTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GODADDY_SHA_1":
		fallthrough
	case "GODADDY_SHA_2":
		fallthrough
	case "STARFIELD_SHA_1":
		fallthrough
	case "STARFIELD_SHA_2":
		*e = CertificateRenewRootTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CertificateRenewRootTypeEnum: %v", v)
	}
}

// CertificateRenew - The renew request info
type CertificateRenew struct {
	// Required if client would like to receive stateful actions via callback during certificate lifecyle
	CallbackURL *string `json:"callbackUrl,omitempty"`
	// The common name of certificate to be secured
	CommonName *string `json:"commonName,omitempty"`
	// Certificate Signing Request.
	Csr *string `json:"csr,omitempty"`
	// Number of years for certificate validity period, if different from previous certificate
	Period *int64 `json:"period,omitempty"`
	// Root Type. Depending on certificate expiration date, SHA_1 not be allowed. Will default to SHA_2 if expiration date exceeds sha1 allowed date
	RootType *CertificateRenewRootTypeEnum `json:"rootType,omitempty"`
	// Only used for UCC products. An array of subject alternative names to include in certificate. Not including a subject alternative name that was in the previous certificate will remove it from the renewed certificate.
	SubjectAlternativeNames []string `json:"subjectAlternativeNames,omitempty"`
}
