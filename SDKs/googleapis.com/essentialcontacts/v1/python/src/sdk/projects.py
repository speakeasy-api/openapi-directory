"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def essentialcontacts_projects_contacts_compute(self, request: operations.EssentialcontactsProjectsContactsComputeRequest, security: operations.EssentialcontactsProjectsContactsComputeSecurity) -> operations.EssentialcontactsProjectsContactsComputeResponse:
        r"""Lists all contacts for the resource that are subscribed to the specified notification categories, including contacts inherited from any parent resources."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.EssentialcontactsProjectsContactsComputeRequest, base_url, '/v1/{parent}/contacts:compute', request)
        
        query_params = utils.get_query_params(operations.EssentialcontactsProjectsContactsComputeRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EssentialcontactsProjectsContactsComputeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudEssentialcontactsV1ComputeContactsResponse])
                res.google_cloud_essentialcontacts_v1_compute_contacts_response = out

        return res

    def essentialcontacts_projects_contacts_create(self, request: operations.EssentialcontactsProjectsContactsCreateRequest, security: operations.EssentialcontactsProjectsContactsCreateSecurity) -> operations.EssentialcontactsProjectsContactsCreateResponse:
        r"""Adds a new contact for a resource."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.EssentialcontactsProjectsContactsCreateRequest, base_url, '/v1/{parent}/contacts', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_essentialcontacts_v1_contact_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.EssentialcontactsProjectsContactsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EssentialcontactsProjectsContactsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudEssentialcontactsV1Contact])
                res.google_cloud_essentialcontacts_v1_contact = out

        return res

    def essentialcontacts_projects_contacts_delete(self, request: operations.EssentialcontactsProjectsContactsDeleteRequest, security: operations.EssentialcontactsProjectsContactsDeleteSecurity) -> operations.EssentialcontactsProjectsContactsDeleteResponse:
        r"""Deletes a contact."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.EssentialcontactsProjectsContactsDeleteRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.EssentialcontactsProjectsContactsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EssentialcontactsProjectsContactsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.google_protobuf_empty = out

        return res

    def essentialcontacts_projects_contacts_get(self, request: operations.EssentialcontactsProjectsContactsGetRequest, security: operations.EssentialcontactsProjectsContactsGetSecurity) -> operations.EssentialcontactsProjectsContactsGetResponse:
        r"""Gets a single contact."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.EssentialcontactsProjectsContactsGetRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.EssentialcontactsProjectsContactsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EssentialcontactsProjectsContactsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudEssentialcontactsV1Contact])
                res.google_cloud_essentialcontacts_v1_contact = out

        return res

    def essentialcontacts_projects_contacts_list(self, request: operations.EssentialcontactsProjectsContactsListRequest, security: operations.EssentialcontactsProjectsContactsListSecurity) -> operations.EssentialcontactsProjectsContactsListResponse:
        r"""Lists the contacts that have been set on a resource."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.EssentialcontactsProjectsContactsListRequest, base_url, '/v1/{parent}/contacts', request)
        
        query_params = utils.get_query_params(operations.EssentialcontactsProjectsContactsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EssentialcontactsProjectsContactsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudEssentialcontactsV1ListContactsResponse])
                res.google_cloud_essentialcontacts_v1_list_contacts_response = out

        return res

    def essentialcontacts_projects_contacts_patch(self, request: operations.EssentialcontactsProjectsContactsPatchRequest, security: operations.EssentialcontactsProjectsContactsPatchSecurity) -> operations.EssentialcontactsProjectsContactsPatchResponse:
        r"""Updates a contact. Note: A contact's email address cannot be changed."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.EssentialcontactsProjectsContactsPatchRequest, base_url, '/v1/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_essentialcontacts_v1_contact_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.EssentialcontactsProjectsContactsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EssentialcontactsProjectsContactsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudEssentialcontactsV1Contact])
                res.google_cloud_essentialcontacts_v1_contact = out

        return res

    def essentialcontacts_projects_contacts_send_test_message(self, request: operations.EssentialcontactsProjectsContactsSendTestMessageRequest, security: operations.EssentialcontactsProjectsContactsSendTestMessageSecurity) -> operations.EssentialcontactsProjectsContactsSendTestMessageResponse:
        r"""Allows a contact admin to send a test message to contact to verify that it has been configured correctly."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.EssentialcontactsProjectsContactsSendTestMessageRequest, base_url, '/v1/{resource}/contacts:sendTestMessage', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_essentialcontacts_v1_send_test_message_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.EssentialcontactsProjectsContactsSendTestMessageRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EssentialcontactsProjectsContactsSendTestMessageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.google_protobuf_empty = out

        return res

    