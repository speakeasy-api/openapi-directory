<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Itv 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Activates the discount for a user. Only Stripe platform is currently supported.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ActivateSaveOfferRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ActivateSaveOfferSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ActivateSaveOfferResponse
     */
	public function activateSaveOffer(
        \OpenAPI\OpenAPI\Models\Operations\ActivateSaveOfferRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ActivateSaveOfferSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ActivateSaveOfferResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/itv/save-offer');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "string");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ActivateSaveOfferRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ActivateSaveOfferResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 406) {
        }

        return $response;
    }
	
    /**
     * Change payment card details.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChangeCardDetailsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ChangeCardDetailsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ChangeCardDetailsResponse
     */
	public function changeCardDetails(
        \OpenAPI\OpenAPI\Models\Operations\ChangeCardDetailsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ChangeCardDetailsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ChangeCardDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/itv/cards/{platform}', \OpenAPI\OpenAPI\Models\Operations\ChangeCardDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "itvChangeCardDetailsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ChangeCardDetailsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChangeCardDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Change email address related to account/profile.
     * 
     * The expected token scope is Settings.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChangeEmailRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ChangeEmailSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ChangeEmailResponse
     */
	public function changeEmail(
        \OpenAPI\OpenAPI\Models\Operations\ChangeEmailRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ChangeEmailSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ChangeEmailResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/itv/changeemail');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "itvChangeEmailRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ChangeEmailRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChangeEmailResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Change marketing preferences related to account/profile.
     * 
     * The expected token scope is Settings.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChangeMarketingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ChangeMarketingSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ChangeMarketingResponse
     */
	public function changeMarketing(
        \OpenAPI\OpenAPI\Models\Operations\ChangeMarketingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ChangeMarketingSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ChangeMarketingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/itv/changemarketing');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "itvChangeMarketingRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ChangeMarketingRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChangeMarketingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Check whether the user has been previously entitled.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CheckPreviousEntitlementsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CheckPreviousEntitlementsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CheckPreviousEntitlementsResponse
     */
	public function checkPreviousEntitlements(
        \OpenAPI\OpenAPI\Models\Operations\CheckPreviousEntitlementsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CheckPreviousEntitlementsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CheckPreviousEntitlementsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/itv/had/entitlements');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CheckPreviousEntitlementsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CheckPreviousEntitlementsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->itvHadEntitlement = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ItvHadEntitlement', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Validates the coupon/voucher for specified payment platform.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CheckVoucherRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CheckVoucherSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CheckVoucherResponse
     */
	public function checkVoucher(
        \OpenAPI\OpenAPI\Models\Operations\CheckVoucherRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CheckVoucherSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CheckVoucherResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/itv/voucher/{platform}', \OpenAPI\OpenAPI\Models\Operations\CheckVoucherRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "itvVoucherRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CheckVoucherRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CheckVoucherResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->itvVoucher = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ItvVoucher', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Confirms purchase and returns the details of purchased subscription for specified payment platform.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConfirmPurchaseRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ConfirmPurchaseSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ConfirmPurchaseResponse
     */
	public function confirmPurchase(
        \OpenAPI\OpenAPI\Models\Operations\ConfirmPurchaseRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ConfirmPurchaseSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ConfirmPurchaseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/itv/purchase/{platform}', \OpenAPI\OpenAPI\Models\Operations\ConfirmPurchaseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "itvPurchaseRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConfirmPurchaseRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConfirmPurchaseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->itvPurchase = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ItvPurchase', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Confirms purchase and returns the details of purchased subscription for specified payment platform.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConfirmPurchaseStrongRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ConfirmPurchaseStrongSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ConfirmPurchaseStrongResponse
     */
	public function confirmPurchaseStrong(
        \OpenAPI\OpenAPI\Models\Operations\ConfirmPurchaseStrongRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ConfirmPurchaseStrongSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ConfirmPurchaseStrongResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/itv/purchase/{platform}/strong', \OpenAPI\OpenAPI\Models\Operations\ConfirmPurchaseStrongRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "itvPurchaseStrongRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConfirmPurchaseStrongRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConfirmPurchaseStrongResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->itvPurchaseStrongResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ItvPurchaseStrongResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Confirms purchase and returns the details of purchased subscription for specified payment platform.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConfirmPurchaseWithOfferRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ConfirmPurchaseWithOfferSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ConfirmPurchaseWithOfferResponse
     */
	public function confirmPurchaseWithOffer(
        \OpenAPI\OpenAPI\Models\Operations\ConfirmPurchaseWithOfferRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ConfirmPurchaseWithOfferSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ConfirmPurchaseWithOfferResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/itv/purchase/{platform}/withoffer', \OpenAPI\OpenAPI\Models\Operations\ConfirmPurchaseWithOfferRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "itvPurchaseWithOfferRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConfirmPurchaseWithOfferRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConfirmPurchaseWithOfferResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->itvPurchaseWithOfferResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ItvPurchaseWithOfferResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete account in compliance with GDPR.
     * 
     * The expected token scope is Settings.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAccountRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAccountSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteAccountResponse
     */
	public function deleteAccount(
        \OpenAPI\OpenAPI\Models\Operations\DeleteAccountRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteAccountSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteAccountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/itv/deleteaccount');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "itvDeleteAccountRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteAccountRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteAccountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Cancel a plan subscription.
     * 
     * A cancelled subscription will continue to be valid until the subscription
     * expiry date or next renewal date.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteItvPurchasePlatformRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteItvPurchasePlatformSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteItvPurchasePlatformResponse
     */
	public function deleteItvPurchasePlatform(
        \OpenAPI\OpenAPI\Models\Operations\DeleteItvPurchasePlatformRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteItvPurchasePlatformSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteItvPurchasePlatformResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/itv/purchase/{platform}', \OpenAPI\OpenAPI\Models\Operations\DeleteItvPurchasePlatformRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "itvCancelSubscriptionRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteItvPurchasePlatformRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteItvPurchasePlatformResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sends request to execute specified transaction.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ExecuteTransactionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ExecuteTransactionResponse
     */
	public function executeTransaction(
        \OpenAPI\OpenAPI\Models\Operations\ExecuteTransactionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ExecuteTransactionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/itv/roku/transaction/{transactionid}', \OpenAPI\OpenAPI\Models\Operations\ExecuteTransactionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "itvRokuTransactionRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ExecuteTransactionRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExecuteTransactionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Provides authorization with parental control pin.
     * 
     * Returns an array containing account token with Playback scope.
     * 
     * Requires access token with Catalog scope.
     * 
     * Pin must be a 4-digit string
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountTokenWithPinRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountTokenWithPinSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAccountTokenWithPinResponse
     */
	public function getAccountTokenWithPin(
        \OpenAPI\OpenAPI\Models\Operations\GetAccountTokenWithPinRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAccountTokenWithPinSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAccountTokenWithPinResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/itv/pinauthorization');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "itvPinAuthRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAccountTokenWithPinRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAccountTokenWithPinResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accessTokens = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\AccessToken>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the list of billing records for specified payment platform.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBillingHistoryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBillingHistorySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBillingHistoryResponse
     */
	public function getBillingHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetBillingHistoryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetBillingHistorySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetBillingHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/itv/billinghistory/{platform}', \OpenAPI\OpenAPI\Models\Operations\GetBillingHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "itvBillingHistoryRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetBillingHistoryRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBillingHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->itvBillingHistory = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ItvBillingHistory', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get payment card details.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCardDetailsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCardDetailsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCardDetailsResponse
     */
	public function getCardDetails(
        \OpenAPI\OpenAPI\Models\Operations\GetCardDetailsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetCardDetailsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCardDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/itv/cards/{platform}', \OpenAPI\OpenAPI\Models\Operations\GetCardDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "itvGetCardDetailsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCardDetailsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCardDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->itvCardDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ItvCardDetails', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns current entitlement.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCurrentEntitlementRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCurrentEntitlementSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCurrentEntitlementResponse
     */
	public function getCurrentEntitlement(
        \OpenAPI\OpenAPI\Models\Operations\GetCurrentEntitlementRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetCurrentEntitlementSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCurrentEntitlementResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/itv/entitlements/current');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCurrentEntitlementRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCurrentEntitlementResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->itvEntitlementCurrent = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ItvEntitlementCurrent', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the details of current subscription for specified payment platform.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCurrentSubscriptionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCurrentSubscriptionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCurrentSubscriptionResponse
     */
	public function getCurrentSubscription(
        \OpenAPI\OpenAPI\Models\Operations\GetCurrentSubscriptionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetCurrentSubscriptionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCurrentSubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/itv/purchase/{platform}', \OpenAPI\OpenAPI\Models\Operations\GetCurrentSubscriptionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCurrentSubscriptionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCurrentSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->itvCurrentSubscription = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ItvCurrentSubscription', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the state of subscription for any payment platform.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEntitlementsHistoryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEntitlementsHistorySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEntitlementsHistoryResponse
     */
	public function getEntitlementsHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetEntitlementsHistoryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEntitlementsHistorySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEntitlementsHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/itv/entitlements/history');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetEntitlementsHistoryRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEntitlementsHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->itvEntitlementsHistory = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ItvEntitlementsHistory', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets info whether or not a feature is enabled or disabled using a feature flag. Feature flags are set as a custom field within PM. It also supports custom feature flag data if needed. Such data can be return as well.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFeatureFlagRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFeatureFlagResponse
     */
	public function getFeatureFlag(
        \OpenAPI\OpenAPI\Models\Operations\GetFeatureFlagRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFeatureFlagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/itv/featureFlag/{feature}', \OpenAPI\OpenAPI\Models\Operations\GetFeatureFlagRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetFeatureFlagRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFeatureFlagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->itvFeatureFlag = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ItvFeatureFlag', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns full price renewal state and reason for specific user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFullPriceRenewalRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFullPriceRenewalSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFullPriceRenewalResponse
     */
	public function getFullPriceRenewal(
        \OpenAPI\OpenAPI\Models\Operations\GetFullPriceRenewalRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetFullPriceRenewalSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFullPriceRenewalResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/itv/subscription/fullpricerenewal');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetFullPriceRenewalRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFullPriceRenewalResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->itvSubscriptionFullPriceRenewal = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ItvSubscriptionFullPriceRenewal', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the ITV profile token.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetItvProfileTokenRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetItvProfileTokenSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetItvProfileTokenResponse
     */
	public function getItvProfileToken(
        \OpenAPI\OpenAPI\Models\Operations\GetItvProfileTokenRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetItvProfileTokenSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetItvProfileTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/itv/profiletoken');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "itvProfileTokenRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetItvProfileTokenRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetItvProfileTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->itvProfileToken = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ItvProfileToken', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns public preview for Samsung based on the page '/samsung-preview' configured in PresentationManager.
     * There is a hard limit of max 40 items to be returned. It splits evenly items count into the page rows, remaining items are added into the first row.
     * 
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPublicPreviewResponse
     */
	public function getPublicPreview(
    ): \OpenAPI\OpenAPI\Models\Operations\GetPublicPreviewResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/samsung-preview');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPublicPreviewResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->samsungPreview = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SamsungPreview', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the list of recommended items under the active profile.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRecommendedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRecommendedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRecommendedListResponse
     */
	public function getRecommendedList(
        \OpenAPI\OpenAPI\Models\Operations\GetRecommendedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetRecommendedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRecommendedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/itv/profile/recommendation/list');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRecommendedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRecommendedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->itemList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ItemList', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Checks the provided coupon id for a user. Only Stripe platform is currently supported.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSaveOfferRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSaveOfferSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSaveOfferResponse
     */
	public function getSaveOffer(
        \OpenAPI\OpenAPI\Models\Operations\GetSaveOfferRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetSaveOfferSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSaveOfferResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/itv/save-offer');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSaveOfferRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSaveOfferResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->itvGetDiscountResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ItvGetDiscountResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the state of subscription for any payment platform.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionStateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionStateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionStateResponse
     */
	public function getSubscriptionState(
        \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionStateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionStateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionStateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/itv/subscriptionstate');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSubscriptionStateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionStateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->itvSubscriptionState = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ItvSubscriptionState', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns status of latest payment intent.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionStatusRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionStatusSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionStatusResponse
     */
	public function getSubscriptionStatus(
        \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionStatusRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionStatusSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/itv/subscription/status/{platform}', \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSubscriptionStatusRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->itvSubscriptionStatusResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ItvSubscriptionStatusResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns an upcoming invoice
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUpcomingInvoiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUpcomingInvoiceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUpcomingInvoiceResponse
     */
	public function getUpcomingInvoice(
        \OpenAPI\OpenAPI\Models\Operations\GetUpcomingInvoiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetUpcomingInvoiceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUpcomingInvoiceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/itv/upcominginvoice');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUpcomingInvoiceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUpcomingInvoiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->itvGetDiscountResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ItvGetDiscountResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Checks the provided coupon id for a user. Only Stripe platform is currently supported.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVoucherByIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVoucherByIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVoucherByIdResponse
     */
	public function getVoucherById(
        \OpenAPI\OpenAPI\Models\Operations\GetVoucherByIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetVoucherByIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVoucherByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/itv/voucher/{planId}/{voucherId}', \OpenAPI\OpenAPI\Models\Operations\GetVoucherByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetVoucherByIdRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVoucherByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->itvVoucher = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ItvVoucher', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Redirects to corresponding Axis Item details page.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetItvItemsummaryExternalIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetItvItemsummaryExternalIdResponse
     */
	public function getItvItemsummaryExternalId(
        \OpenAPI\OpenAPI\Models\Operations\GetItvItemsummaryExternalIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetItvItemsummaryExternalIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/itv/itemsummary/{externalId}', \OpenAPI\OpenAPI\Models\Operations\GetItvItemsummaryExternalIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetItvItemsummaryExternalIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 302) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getItvItemsummaryExternalId302ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the plans available for specified payment platform.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetItvPlansPlatformRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetItvPlansPlatformSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetItvPlansPlatformResponse
     */
	public function getItvPlansPlatform(
        \OpenAPI\OpenAPI\Models\Operations\GetItvPlansPlatformRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetItvPlansPlatformSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetItvPlansPlatformResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/itv/plans/{platform}', \OpenAPI\OpenAPI\Models\Operations\GetItvPlansPlatformRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetItvPlansPlatformRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetItvPlansPlatformResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->itvPlans = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ItvPlans', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the ITV profile object.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetItvProfileRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetItvProfileSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetItvProfileResponse
     */
	public function getItvProfile(
        \OpenAPI\OpenAPI\Models\Operations\GetItvProfileRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetItvProfileSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetItvProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/itv/profile');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetItvProfileRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetItvProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getItvProfile200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets available Roku plans.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetItvRokuPlansRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetItvRokuPlansResponse
     */
	public function getItvRokuPlans(
        \OpenAPI\OpenAPI\Models\Operations\GetItvRokuPlansRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetItvRokuPlansResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/itv/roku/plans');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetItvRokuPlansRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetItvRokuPlansResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rokuPlans = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RokuPlans', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the list of recommended items under the active profile.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GooglePaySubscriptionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GooglePaySubscriptionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GooglePaySubscriptionResponse
     */
	public function googlePaySubscription(
        \OpenAPI\OpenAPI\Models\Operations\GooglePaySubscriptionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GooglePaySubscriptionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GooglePaySubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/itv/googlepay/subscription');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "itvGooglePaySubscriptionRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GooglePaySubscriptionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GooglePaySubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 415 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Resubscription for a user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ResubscribeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ResubscribeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ResubscribeResponse
     */
	public function resubscribe(
        \OpenAPI\OpenAPI\Models\Operations\ResubscribeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ResubscribeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ResubscribeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/itv/resubscribe/{platform}', \OpenAPI\OpenAPI\Models\Operations\ResubscribeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ResubscribeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ResubscribeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resubscribe200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 406 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Change payment method details.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatePaymentIntentStrongRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatePaymentIntentStrongSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdatePaymentIntentStrongResponse
     */
	public function updatePaymentIntentStrong(
        \OpenAPI\OpenAPI\Models\Operations\UpdatePaymentIntentStrongRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdatePaymentIntentStrongSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdatePaymentIntentStrongResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/itv/updateIntent/strong/{platform}', \OpenAPI\OpenAPI\Models\Operations\UpdatePaymentIntentStrongRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "itvUpdateIntentStrongRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\UpdatePaymentIntentStrongRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdatePaymentIntentStrongResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->itvUpdateIntentStrongResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ItvUpdateIntentStrongResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Change payment method details.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatePaymentMethodStrongRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatePaymentMethodStrongSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdatePaymentMethodStrongResponse
     */
	public function updatePaymentMethodStrong(
        \OpenAPI\OpenAPI\Models\Operations\UpdatePaymentMethodStrongRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdatePaymentMethodStrongSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdatePaymentMethodStrongResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/itv/updatePayment/strong/{platform}', \OpenAPI\OpenAPI\Models\Operations\UpdatePaymentMethodStrongRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "itvUpdatePaymentStrongRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\UpdatePaymentMethodStrongRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdatePaymentMethodStrongResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update ITV profile.
     * 
     * The expected token scope is Settings.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateProfileRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateProfileSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateProfileResponse
     */
	public function updateProfile(
        \OpenAPI\OpenAPI\Models\Operations\UpdateProfileRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateProfileSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/itv/profile');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "itvUpdateProfileRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\UpdateProfileRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Upgrades the plan for the current user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpgradePlanRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpgradePlanSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpgradePlanResponse
     */
	public function upgradePlan(
        \OpenAPI\OpenAPI\Models\Operations\UpgradePlanRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpgradePlanSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpgradePlanResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/itv/plan/{platform}', \OpenAPI\OpenAPI\Models\Operations\UpgradePlanRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "itvUpgradePlanRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\UpgradePlanRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpgradePlanResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
}