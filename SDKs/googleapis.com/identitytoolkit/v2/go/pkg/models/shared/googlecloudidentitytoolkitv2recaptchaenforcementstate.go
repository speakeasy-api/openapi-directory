// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GoogleCloudIdentitytoolkitV2RecaptchaEnforcementStateEnforcementStateEnum - The reCAPTCHA enforcement state for the provider.
type GoogleCloudIdentitytoolkitV2RecaptchaEnforcementStateEnforcementStateEnum string

const (
	GoogleCloudIdentitytoolkitV2RecaptchaEnforcementStateEnforcementStateEnumEnforcementStateUnspecified GoogleCloudIdentitytoolkitV2RecaptchaEnforcementStateEnforcementStateEnum = "ENFORCEMENT_STATE_UNSPECIFIED"
	GoogleCloudIdentitytoolkitV2RecaptchaEnforcementStateEnforcementStateEnumOff                         GoogleCloudIdentitytoolkitV2RecaptchaEnforcementStateEnforcementStateEnum = "OFF"
	GoogleCloudIdentitytoolkitV2RecaptchaEnforcementStateEnforcementStateEnumAudit                       GoogleCloudIdentitytoolkitV2RecaptchaEnforcementStateEnforcementStateEnum = "AUDIT"
	GoogleCloudIdentitytoolkitV2RecaptchaEnforcementStateEnforcementStateEnumEnforce                     GoogleCloudIdentitytoolkitV2RecaptchaEnforcementStateEnforcementStateEnum = "ENFORCE"
)

func (e GoogleCloudIdentitytoolkitV2RecaptchaEnforcementStateEnforcementStateEnum) ToPointer() *GoogleCloudIdentitytoolkitV2RecaptchaEnforcementStateEnforcementStateEnum {
	return &e
}

func (e *GoogleCloudIdentitytoolkitV2RecaptchaEnforcementStateEnforcementStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ENFORCEMENT_STATE_UNSPECIFIED":
		fallthrough
	case "OFF":
		fallthrough
	case "AUDIT":
		fallthrough
	case "ENFORCE":
		*e = GoogleCloudIdentitytoolkitV2RecaptchaEnforcementStateEnforcementStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleCloudIdentitytoolkitV2RecaptchaEnforcementStateEnforcementStateEnum: %v", v)
	}
}

// GoogleCloudIdentitytoolkitV2RecaptchaEnforcementStateProviderEnum - The provider that has reCAPTCHA protection.
type GoogleCloudIdentitytoolkitV2RecaptchaEnforcementStateProviderEnum string

const (
	GoogleCloudIdentitytoolkitV2RecaptchaEnforcementStateProviderEnumRecaptchaProviderUnspecified GoogleCloudIdentitytoolkitV2RecaptchaEnforcementStateProviderEnum = "RECAPTCHA_PROVIDER_UNSPECIFIED"
	GoogleCloudIdentitytoolkitV2RecaptchaEnforcementStateProviderEnumEmailPasswordProvider        GoogleCloudIdentitytoolkitV2RecaptchaEnforcementStateProviderEnum = "EMAIL_PASSWORD_PROVIDER"
)

func (e GoogleCloudIdentitytoolkitV2RecaptchaEnforcementStateProviderEnum) ToPointer() *GoogleCloudIdentitytoolkitV2RecaptchaEnforcementStateProviderEnum {
	return &e
}

func (e *GoogleCloudIdentitytoolkitV2RecaptchaEnforcementStateProviderEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RECAPTCHA_PROVIDER_UNSPECIFIED":
		fallthrough
	case "EMAIL_PASSWORD_PROVIDER":
		*e = GoogleCloudIdentitytoolkitV2RecaptchaEnforcementStateProviderEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleCloudIdentitytoolkitV2RecaptchaEnforcementStateProviderEnum: %v", v)
	}
}

// GoogleCloudIdentitytoolkitV2RecaptchaEnforcementState - Enforcement states for reCAPTCHA protection.
type GoogleCloudIdentitytoolkitV2RecaptchaEnforcementState struct {
	// The reCAPTCHA enforcement state for the provider.
	EnforcementState *GoogleCloudIdentitytoolkitV2RecaptchaEnforcementStateEnforcementStateEnum `json:"enforcementState,omitempty"`
	// The provider that has reCAPTCHA protection.
	Provider *GoogleCloudIdentitytoolkitV2RecaptchaEnforcementStateProviderEnum `json:"provider,omitempty"`
}
