<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class CustomerCategories 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete an existing CustomerCategory.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerCategoriesIdJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerCategoriesIdJsonResponse
     */
	public function deleteCustomerCategoriesIdJson(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerCategoriesIdJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerCategoriesIdJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/customer_categories/{id}.json', \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerCategoriesIdJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteCustomerCategoriesIdJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerCategoriesIdJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->deleteCustomerCategoriesIdJSON200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notFound = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NotFound', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete Customers from an existing CustomerCategory.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerCategoriesIdCustomersJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerCategoriesIdCustomersJsonResponse
     */
	public function deleteCustomerCategoriesIdCustomersJson(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerCategoriesIdCustomersJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerCategoriesIdCustomersJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/customer_categories/{id}/customers.json', \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerCategoriesIdCustomersJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "customersToCustomerCategory", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteCustomerCategoriesIdCustomersJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerCategoriesIdCustomersJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->deleteCustomerCategoriesIdCustomersJSON200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notFound = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NotFound', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve all Customer Categories.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCustomerCategoriesJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCustomerCategoriesJsonResponse
     */
	public function getCustomerCategoriesJson(
        \OpenAPI\OpenAPI\Models\Operations\GetCustomerCategoriesJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCustomerCategoriesJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/customer_categories.json');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCustomerCategoriesJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCustomerCategoriesJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customerCategories = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\CustomerCategory>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a single CustomerCategory.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCustomerCategoriesIdJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCustomerCategoriesIdJsonResponse
     */
	public function getCustomerCategoriesIdJson(
        \OpenAPI\OpenAPI\Models\Operations\GetCustomerCategoriesIdJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCustomerCategoriesIdJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/customer_categories/{id}.json', \OpenAPI\OpenAPI\Models\Operations\GetCustomerCategoriesIdJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCustomerCategoriesIdJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCustomerCategoriesIdJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customerCategory = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomerCategory', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notFound = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NotFound', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the customers in a CustomerCategory.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCustomerCategoriesIdCustomersJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCustomerCategoriesIdCustomersJsonResponse
     */
	public function getCustomerCategoriesIdCustomersJson(
        \OpenAPI\OpenAPI\Models\Operations\GetCustomerCategoriesIdCustomersJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCustomerCategoriesIdCustomersJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/customer_categories/{id}/customers.json', \OpenAPI\OpenAPI\Models\Operations\GetCustomerCategoriesIdCustomersJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCustomerCategoriesIdCustomersJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCustomerCategoriesIdCustomersJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Customer>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notFound = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NotFound', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new CustomerCategory.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostCustomerCategoriesJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostCustomerCategoriesJsonResponse
     */
	public function postCustomerCategoriesJson(
        \OpenAPI\OpenAPI\Models\Operations\PostCustomerCategoriesJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostCustomerCategoriesJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/customer_categories.json');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "customerCategoryEdit", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostCustomerCategoriesJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostCustomerCategoriesJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customerCategory = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomerCategory', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notFound = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NotFound', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Adds Customers to a CustomerCategory.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostCustomerCategoriesIdCustomersJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostCustomerCategoriesIdCustomersJsonResponse
     */
	public function postCustomerCategoriesIdCustomersJson(
        \OpenAPI\OpenAPI\Models\Operations\PostCustomerCategoriesIdCustomersJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostCustomerCategoriesIdCustomersJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/customer_categories/{id}/customers.json', \OpenAPI\OpenAPI\Models\Operations\PostCustomerCategoriesIdCustomersJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "customersToCustomerCategory", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostCustomerCategoriesIdCustomersJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostCustomerCategoriesIdCustomersJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Customer>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notFound = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NotFound', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a CustomerCategory.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutCustomerCategoriesIdJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutCustomerCategoriesIdJsonResponse
     */
	public function putCustomerCategoriesIdJson(
        \OpenAPI\OpenAPI\Models\Operations\PutCustomerCategoriesIdJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutCustomerCategoriesIdJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/customer_categories/{id}.json', \OpenAPI\OpenAPI\Models\Operations\PutCustomerCategoriesIdJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "customerCategoryEdit", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PutCustomerCategoriesIdJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutCustomerCategoriesIdJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customerCategory = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomerCategory', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notFound = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NotFound', 'json');
            }
        }

        return $response;
    }
}