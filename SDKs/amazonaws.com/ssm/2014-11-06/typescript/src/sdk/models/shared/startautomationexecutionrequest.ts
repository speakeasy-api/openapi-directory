/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AlarmConfiguration } from "./alarmconfiguration";
import { ExecutionModeEnum } from "./executionmodeenum";
import { Tag } from "./tag";
import { Target } from "./target";
import { TargetLocation } from "./targetlocation";
import { Expose, Type } from "class-transformer";

export class StartAutomationExecutionRequest extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "AlarmConfiguration" })
  @Type(() => AlarmConfiguration)
  alarmConfiguration?: AlarmConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "ClientToken" })
  clientToken?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "DocumentName" })
  documentName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "DocumentVersion" })
  documentVersion?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "MaxConcurrency" })
  maxConcurrency?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "MaxErrors" })
  maxErrors?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Mode" })
  mode?: ExecutionModeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "Parameters" })
  parameters?: Record<string, string[]>;

  @SpeakeasyMetadata({ elemType: Tag })
  @Expose({ name: "Tags" })
  @Type(() => Tag)
  tags?: Tag[];

  @SpeakeasyMetadata({ elemType: TargetLocation })
  @Expose({ name: "TargetLocations" })
  @Type(() => TargetLocation)
  targetLocations?: TargetLocation[];

  @SpeakeasyMetadata()
  @Expose({ name: "TargetMaps" })
  targetMaps?: Record<string, string[]>[];

  @SpeakeasyMetadata()
  @Expose({ name: "TargetParameterName" })
  targetParameterName?: string;

  @SpeakeasyMetadata({ elemType: Target })
  @Expose({ name: "Targets" })
  @Type(() => Target)
  targets?: Target[];
}
