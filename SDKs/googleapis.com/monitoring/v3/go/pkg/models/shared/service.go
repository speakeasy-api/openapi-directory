// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// Service - A Service is a discrete, autonomous, and network-accessible unit, designed to solve an individual concern (Wikipedia (https://en.wikipedia.org/wiki/Service-orientation)). In Cloud Monitoring, a Service acts as the root resource under which operational aspects of the service are accessible.
type Service struct {
	// App Engine service. Learn more at https://cloud.google.com/appengine.
	AppEngine *AppEngine `json:"appEngine,omitempty"`
	// A well-known service type, defined by its service type and service labels. Documentation and examples here (https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-w-basic-sli).
	BasicService *BasicService `json:"basicService,omitempty"`
	// Cloud Endpoints service. Learn more at https://cloud.google.com/endpoints.
	CloudEndpoints *CloudEndpoints `json:"cloudEndpoints,omitempty"`
	// Cloud Run service. Learn more at https://cloud.google.com/run.
	CloudRun *CloudRun `json:"cloudRun,omitempty"`
	// Istio service scoped to a single Kubernetes cluster. Learn more at https://istio.io. Clusters running OSS Istio will have their services ingested as this type.
	ClusterIstio *ClusterIstio `json:"clusterIstio,omitempty"`
	// Use a custom service to designate a service that you want to monitor when none of the other service types (like App Engine, Cloud Run, or a GKE type) matches your intended service.
	Custom map[string]interface{} `json:"custom,omitempty"`
	// Name used for UI elements listing this Service.
	DisplayName *string `json:"displayName,omitempty"`
	// GKE Namespace. The field names correspond to the resource metadata labels on monitored resources that fall under a namespace (for example, k8s_container or k8s_pod).
	GkeNamespace *GkeNamespace `json:"gkeNamespace,omitempty"`
	// GKE Service. The "service" here represents a Kubernetes service object (https://kubernetes.io/docs/concepts/services-networking/service). The field names correspond to the resource labels on k8s_service monitored resources (https://cloud.google.com/monitoring/api/resources#tag_k8s_service).
	GkeService *GkeService `json:"gkeService,omitempty"`
	// A GKE Workload (Deployment, StatefulSet, etc). The field names correspond to the metadata labels on monitored resources that fall under a workload (for example, k8s_container or k8s_pod).
	GkeWorkload *GkeWorkload `json:"gkeWorkload,omitempty"`
	// Canonical service scoped to an Istio mesh. Anthos clusters running ASM >= 1.6.8 will have their services ingested as this type.
	IstioCanonicalService *IstioCanonicalService `json:"istioCanonicalService,omitempty"`
	// Istio service scoped to an Istio mesh. Anthos clusters running ASM < 1.6.8 will have their services ingested as this type.
	MeshIstio *MeshIstio `json:"meshIstio,omitempty"`
	// Resource name for this Service. The format is: projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]
	Name *string `json:"name,omitempty"`
	// Configuration for how to query telemetry on a Service.
	Telemetry *Telemetry `json:"telemetry,omitempty"`
	// Labels which have been used to annotate the service. Label keys must start with a letter. Label keys and values may contain lowercase letters, numbers, underscores, and dashes. Label keys and values have a maximum length of 63 characters, and must be less than 128 bytes in size. Up to 64 label entries may be stored. For labels which do not have a semantic value, the empty string may be supplied for the label value.
	UserLabels map[string]string `json:"userLabels,omitempty"`
}

// ServiceInput - A Service is a discrete, autonomous, and network-accessible unit, designed to solve an individual concern (Wikipedia (https://en.wikipedia.org/wiki/Service-orientation)). In Cloud Monitoring, a Service acts as the root resource under which operational aspects of the service are accessible.
type ServiceInput struct {
	// App Engine service. Learn more at https://cloud.google.com/appengine.
	AppEngine *AppEngine `json:"appEngine,omitempty"`
	// A well-known service type, defined by its service type and service labels. Documentation and examples here (https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-w-basic-sli).
	BasicService *BasicService `json:"basicService,omitempty"`
	// Cloud Endpoints service. Learn more at https://cloud.google.com/endpoints.
	CloudEndpoints *CloudEndpoints `json:"cloudEndpoints,omitempty"`
	// Cloud Run service. Learn more at https://cloud.google.com/run.
	CloudRun *CloudRun `json:"cloudRun,omitempty"`
	// Istio service scoped to a single Kubernetes cluster. Learn more at https://istio.io. Clusters running OSS Istio will have their services ingested as this type.
	ClusterIstio *ClusterIstio `json:"clusterIstio,omitempty"`
	// Use a custom service to designate a service that you want to monitor when none of the other service types (like App Engine, Cloud Run, or a GKE type) matches your intended service.
	Custom map[string]interface{} `json:"custom,omitempty"`
	// Name used for UI elements listing this Service.
	DisplayName *string `json:"displayName,omitempty"`
	// GKE Namespace. The field names correspond to the resource metadata labels on monitored resources that fall under a namespace (for example, k8s_container or k8s_pod).
	GkeNamespace *GkeNamespaceInput `json:"gkeNamespace,omitempty"`
	// GKE Service. The "service" here represents a Kubernetes service object (https://kubernetes.io/docs/concepts/services-networking/service). The field names correspond to the resource labels on k8s_service monitored resources (https://cloud.google.com/monitoring/api/resources#tag_k8s_service).
	GkeService *GkeServiceInput `json:"gkeService,omitempty"`
	// A GKE Workload (Deployment, StatefulSet, etc). The field names correspond to the metadata labels on monitored resources that fall under a workload (for example, k8s_container or k8s_pod).
	GkeWorkload *GkeWorkloadInput `json:"gkeWorkload,omitempty"`
	// Canonical service scoped to an Istio mesh. Anthos clusters running ASM >= 1.6.8 will have their services ingested as this type.
	IstioCanonicalService *IstioCanonicalService `json:"istioCanonicalService,omitempty"`
	// Istio service scoped to an Istio mesh. Anthos clusters running ASM < 1.6.8 will have their services ingested as this type.
	MeshIstio *MeshIstio `json:"meshIstio,omitempty"`
	// Resource name for this Service. The format is: projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]
	Name *string `json:"name,omitempty"`
	// Configuration for how to query telemetry on a Service.
	Telemetry *Telemetry `json:"telemetry,omitempty"`
	// Labels which have been used to annotate the service. Label keys must start with a letter. Label keys and values may contain lowercase letters, numbers, underscores, and dashes. Label keys and values have a maximum length of 63 characters, and must be less than 128 bytes in size. Up to 64 label entries may be stored. For labels which do not have a semantic value, the empty string may be supplied for the label value.
	UserLabels map[string]string `json:"userLabels,omitempty"`
}
