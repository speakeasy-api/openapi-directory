/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class GiftCardActivities {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * CreateGiftCardActivity
   *
   * @remarks
   * Creates a gift card activity. For more information, see
   * [GiftCardActivity](https://developer.squareup.com/docs/gift-cards/using-gift-cards-api#giftcardactivity) and
   * [Using activated gift cards](https://developer.squareup.com/docs/gift-cards/using-gift-cards-api#using-activated-gift-cards).
   */
  createGiftCardActivity(
    req: shared.CreateGiftCardActivityRequest,
    security: operations.CreateGiftCardActivitySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateGiftCardActivityResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.CreateGiftCardActivityRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v2/gift-cards/activities";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateGiftCardActivitySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateGiftCardActivityResponse =
        new operations.CreateGiftCardActivityResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createGiftCardActivityResponse = utils.objectToClass(
              httpRes?.data,
              shared.CreateGiftCardActivityResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * ListGiftCardActivities
   *
   * @remarks
   * Lists gift card activities. By default, you get gift card activities for all
   * gift cards in the seller's account. You can optionally specify query parameters to
   * filter the list. For example, you can get a list of gift card activities for a gift card,
   * for all gift cards in a specific region, or for activities within a time window.
   */
  listGiftCardActivities(
    req: operations.ListGiftCardActivitiesRequest,
    security: operations.ListGiftCardActivitiesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ListGiftCardActivitiesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListGiftCardActivitiesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v2/gift-cards/activities";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ListGiftCardActivitiesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListGiftCardActivitiesResponse =
        new operations.ListGiftCardActivitiesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listGiftCardActivitiesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListGiftCardActivitiesResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
