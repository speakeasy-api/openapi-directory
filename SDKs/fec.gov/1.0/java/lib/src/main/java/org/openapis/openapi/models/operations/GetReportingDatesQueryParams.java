/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import java.time.LocalDate;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GetReportingDatesQueryParams {
    /**
     * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=api_key")
    public String apiKey;
    public GetReportingDatesQueryParams withApiKey(String apiKey) {
        this.apiKey = apiKey;
        return this;
    }
    
    /**
     * The maximum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD)
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=max_create_date")
    public LocalDate maxCreateDate;
    public GetReportingDatesQueryParams withMaxCreateDate(LocalDate maxCreateDate) {
        this.maxCreateDate = maxCreateDate;
        return this;
    }
    
    /**
     * The maximum date the report is due.(MM/DD/YYYY or YYYY-MM-DD)
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=max_due_date")
    public LocalDate maxDueDate;
    public GetReportingDatesQueryParams withMaxDueDate(LocalDate maxDueDate) {
        this.maxDueDate = maxDueDate;
        return this;
    }
    
    /**
     * The maximum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD)
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=max_update_date")
    public LocalDate maxUpdateDate;
    public GetReportingDatesQueryParams withMaxUpdateDate(LocalDate maxUpdateDate) {
        this.maxUpdateDate = maxUpdateDate;
        return this;
    }
    
    /**
     * The minimum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD)
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=min_create_date")
    public LocalDate minCreateDate;
    public GetReportingDatesQueryParams withMinCreateDate(LocalDate minCreateDate) {
        this.minCreateDate = minCreateDate;
        return this;
    }
    
    /**
     * The minimum date the report is due.(MM/DD/YYYY or YYYY-MM-DD)
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=min_due_date")
    public LocalDate minDueDate;
    public GetReportingDatesQueryParams withMinDueDate(LocalDate minDueDate) {
        this.minDueDate = minDueDate;
        return this;
    }
    
    /**
     * The minimum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD)
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=min_update_date")
    public LocalDate minUpdateDate;
    public GetReportingDatesQueryParams withMinUpdateDate(LocalDate minUpdateDate) {
        this.minUpdateDate = minUpdateDate;
        return this;
    }
    
    /**
     * For paginating through results, starting at page 1
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    public Integer page;
    public GetReportingDatesQueryParams withPage(Integer page) {
        this.page = page;
        return this;
    }
    
    /**
     * The number of results returned per page. Defaults to 20.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=per_page")
    public Integer perPage;
    public GetReportingDatesQueryParams withPerPage(Integer perPage) {
        this.perPage = perPage;
        return this;
    }
    
    /**
     * Name of report where the underlying data comes from:
     *     - 10D Pre-Election
     *     - 10G Pre-General
     *     - 10P Pre-Primary
     *     - 10R Pre-Run-Off
     *     - 10S Pre-Special
     *     - 12C Pre-Convention
     *     - 12G Pre-General
     *     - 12P Pre-Primary
     *     - 12R Pre-Run-Off
     *     - 12S Pre-Special
     *     - 30D Post-Election
     *     - 30G Post-General
     *     - 30P Post-Primary
     *     - 30R Post-Run-Off
     *     - 30S Post-Special
     *     - 60D Post-Convention
     *     - M1  January Monthly
     *     - M10 October Monthly
     *     - M11 November Monthly
     *     - M12 December Monthly
     *     - M2  February Monthly
     *     - M3  March Monthly
     *     - M4  April Monthly
     *     - M5  May Monthly
     *     - M6  June Monthly
     *     - M7  July Monthly
     *     - M8  August Monthly
     *     - M9  September Monthly
     *     - MY  Mid-Year Report
     *     - Q1  April Quarterly
     *     - Q2  July Quarterly
     *     - Q3  October Quarterly
     *     - TER Termination Report
     *     - YE  Year-End
     *     - ADJ COMP ADJUST AMEND
     *     - CA  COMPREHENSIVE AMEND
     *     - 90S Post Inaugural Supplement
     *     - 90D Post Inaugural
     *     - 48  48 Hour Notification
     *     - 24  24 Hour Notification
     *     - M7S July Monthly/Semi-Annual
     *     - MSA Monthly Semi-Annual (MY)
     *     - MYS Monthly Year End/Semi-Annual
     *     - Q2S July Quarterly/Semi-Annual
     *     - QSA Quarterly Semi-Annual (MY)
     *     - QYS Quarterly Year End/Semi-Annual
     *     - QYE Quarterly Semi-Annual (YE)
     *     - QMS Quarterly Mid-Year/ Semi-Annual
     *     - MSY Monthly Semi-Annual (YE)
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=report_type")
    public String[] reportType;
    public GetReportingDatesQueryParams withReportType(String[] reportType) {
        this.reportType = reportType;
        return this;
    }
    
    /**
     * Forms with coverage date - 
     *     year from the coverage ending date.
     * Forms without coverage date - 
     *     year from the receipt date.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=report_year")
    public Integer[] reportYear;
    public GetReportingDatesQueryParams withReportYear(Integer[] reportYear) {
        this.reportYear = reportYear;
        return this;
    }
    
    /**
     * Provide a field to sort by. Use `-` for descending order.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort")
    public String sort;
    public GetReportingDatesQueryParams withSort(String sort) {
        this.sort = sort;
        return this;
    }
    
    /**
     * Hide null values on sorted column(s).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort_hide_null")
    public Boolean sortHideNull;
    public GetReportingDatesQueryParams withSortHideNull(Boolean sortHideNull) {
        this.sortHideNull = sortHideNull;
        return this;
    }
    
    /**
     * Toggle that filters out all rows having sort column that is non-null
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort_null_only")
    public Boolean sortNullOnly;
    public GetReportingDatesQueryParams withSortNullOnly(Boolean sortNullOnly) {
        this.sortNullOnly = sortNullOnly;
        return this;
    }
    
    /**
     * Toggle that sorts null values last
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort_nulls_last")
    public Boolean sortNullsLast;
    public GetReportingDatesQueryParams withSortNullsLast(Boolean sortNullsLast) {
        this.sortNullsLast = sortNullsLast;
        return this;
    }
    
}
