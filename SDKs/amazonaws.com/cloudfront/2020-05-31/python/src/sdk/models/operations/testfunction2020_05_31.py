"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class TestFunction20200531RequestBodyStageEnum(str, Enum):
    r"""The stage of the function that you are testing, either <code>DEVELOPMENT</code> or <code>LIVE</code>."""
    DEVELOPMENT = 'DEVELOPMENT'
    LIVE = 'LIVE'


@dataclasses.dataclass
class TestFunction20200531RequestBody:
    
    event_object: str = dataclasses.field()
    r"""The event object to test the function with. For more information about the structure of the event object, see <a href=\\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/managing-functions.html#test-function\\">Testing functions</a> in the <i>Amazon CloudFront Developer Guide</i>."""  
    stage: Optional[TestFunction20200531RequestBodyStageEnum] = dataclasses.field(default=None)
    r"""The stage of the function that you are testing, either <code>DEVELOPMENT</code> or <code>LIVE</code>."""  
    

@dataclasses.dataclass
class TestFunction20200531Request:
    
    if_match: str = dataclasses.field(metadata={'header': { 'field_name': 'If-Match', 'style': 'simple', 'explode': False }})
    r"""The current version (<code>ETag</code> value) of the function that you are testing, which you can get using <code>DescribeFunction</code>."""  
    name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'Name', 'style': 'simple', 'explode': False }})
    r"""The name of the function that you are testing."""  
    request_body: bytes = dataclasses.field(metadata={'request': { 'media_type': 'text/xml' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class TestFunction20200531Response:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    