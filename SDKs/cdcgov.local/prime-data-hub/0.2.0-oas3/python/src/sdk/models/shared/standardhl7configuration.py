"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class StandardHl7ConfigurationPhoneNumberFormattingEnum(str, Enum):
    r"""How to format phone numbers (XTN fields)"""
    STANDARD = 'STANDARD'
    ONLY_DIGITS_IN_COMPONENT_ONE = 'ONLY_DIGITS_IN_COMPONENT_ONE'
    AREA_LOCAL_IN_COMPONENT_ONE = 'AREA_LOCAL_IN_COMPONENT_ONE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StandardHl7Configuration:
    r"""A standard HL7 configuration"""
    
    include_aoe: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('includeAOE') }})
    r"""Include the AOE"""  
    transport: Any = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transport') }})  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The discrimenator"""  
    use_batch_headers: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('useBatchHeaders') }})
    r"""Use BHS and FHS header"""  
    convert_timestamp_to_date_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('convertTimestampToDateTime'), 'exclude': lambda f: f is None }})
    r"""A comma delimited list of HL7 fields to convert to the yyyMMddHHmmss format"""  
    default_aoe_to_unknown: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultAoeToUnknown'), 'exclude': lambda f: f is None }})
    r"""Default the AOE result to UNK"""  
    name_format: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nameFormat'), 'exclude': lambda f: f is None }})
    r"""The format to use for the file name generated by the translation"""  
    phone_number_formatting: Optional[StandardHl7ConfigurationPhoneNumberFormattingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phoneNumberFormatting'), 'exclude': lambda f: f is None }})
    r"""How to format phone numbers (XTN fields)"""  
    receiving_application_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('receivingApplicationName'), 'exclude': lambda f: f is None }})
    r"""The receiving application name (needed for HL7 formats)"""  
    receiving_application_oid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('receivingApplicationOID'), 'exclude': lambda f: f is None }})
    r"""The receiving application OID"""  
    receiving_facility_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('receivingFacilityName'), 'exclude': lambda f: f is None }})
    r"""The receiving facility name"""  
    receiving_facility_oid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('receivingFacilityOID'), 'exclude': lambda f: f is None }})
    r"""The receiving facility name"""  
    receiving_organization: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('receivingOrganization'), 'exclude': lambda f: f is None }})
    r"""The name of the receiving organization in the message"""  
    reporting_facility_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reportingFacilityId'), 'exclude': lambda f: f is None }})
    r"""The reporting facility id (if different from CDC PRIME's OID)"""  
    reporting_facility_id_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reportingFacilityIdType'), 'exclude': lambda f: f is None }})
    r"""The reporting facility id type (if different from OID)"""  
    reporting_facility_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reportingFacilityName'), 'exclude': lambda f: f is None }})
    r"""The reporting facility name (if different from CDC PRIME)"""  
    suppress_aoe: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suppressAoe'), 'exclude': lambda f: f is None }})
    r"""Suppress the AOE OBX results"""  
    suppress_hl7_fields: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suppressHl7Fields'), 'exclude': lambda f: f is None }})
    r"""A comma delimited list of HL7 fields to suppress"""  
    suppress_qst_for_aoe: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suppressQstForAoe'), 'exclude': lambda f: f is None }})
    r"""Suppress QST component is AOE OBX segments"""  
    truncate_hd_namespace_ids: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('truncateHDNamespaceIds'), 'exclude': lambda f: f is None }})
    r"""Truncate the HD fields to HD_TRUNCATION_LIMIT"""  
    use_blank_instead_of_unknown: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('useBlankInsteadOfUnknown'), 'exclude': lambda f: f is None }})
    r"""A comma delimited list of element names that should use blank instead of unknown"""  
    use_pid14_for_patient_email: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('usePid14ForPatientEmail'), 'exclude': lambda f: f is None }})
    r"""Use the PID-14 field for patient email instead of the standard PID-13 field"""  
    use_test_processing_mode: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('useTestProcessingMode'), 'exclude': lambda f: f is None }})
    r"""Set a test process mode flag"""  
    