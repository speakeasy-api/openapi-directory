/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ImageProperties - The properties of an image.
 */
public class ImageProperties {
    /**
     * The clockwise rotation angle of the image, in radians.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("angle")
    public Float angle;
    public ImageProperties withAngle(Float angle) {
        this.angle = angle;
        return this;
    }
    
    /**
     * The brightness effect of the image. The value should be in the interval [-1.0, 1.0], where 0 means no effect.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("brightness")
    public Float brightness;
    public ImageProperties withBrightness(Float brightness) {
        this.brightness = brightness;
        return this;
    }
    
    /**
     * A URI to the image with a default lifetime of 30 minutes. This URI is tagged with the account of the requester. Anyone with the URI effectively accesses the image as the original requester. Access to the image may be lost if the document's sharing settings change.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contentUri")
    public String contentUri;
    public ImageProperties withContentUri(String contentUri) {
        this.contentUri = contentUri;
        return this;
    }
    
    /**
     * The contrast effect of the image. The value should be in the interval [-1.0, 1.0], where 0 means no effect.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contrast")
    public Float contrast;
    public ImageProperties withContrast(Float contrast) {
        this.contrast = contrast;
        return this;
    }
    
    /**
     * The crop properties of an image. The crop rectangle is represented using fractional offsets from the original content's 4 edges. - If the offset is in the interval (0, 1), the corresponding edge of crop rectangle is positioned inside of the image's original bounding rectangle. - If the offset is negative or greater than 1, the corresponding edge of crop rectangle is positioned outside of the image's original bounding rectangle. - If all offsets and rotation angle are 0, the image is not cropped.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cropProperties")
    public CropProperties cropProperties;
    public ImageProperties withCropProperties(CropProperties cropProperties) {
        this.cropProperties = cropProperties;
        return this;
    }
    
    /**
     * The source URI is the URI used to insert the image. The source URI can be empty.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceUri")
    public String sourceUri;
    public ImageProperties withSourceUri(String sourceUri) {
        this.sourceUri = sourceUri;
        return this;
    }
    
    /**
     * The transparency effect of the image. The value should be in the interval [0.0, 1.0], where 0 means no effect and 1 means transparent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transparency")
    public Float transparency;
    public ImageProperties withTransparency(Float transparency) {
        this.transparency = transparency;
        return this;
    }
    
}
