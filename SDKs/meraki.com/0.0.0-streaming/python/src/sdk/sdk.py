"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .action_batches import ActionBatches
from .admins import Admins
from .alert_settings import AlertSettings
from .api_usage import APIUsage
from .bluetooth_clients import BluetoothClients
from .bluetooth_settings import BluetoothSettings
from .camera_quality_retention_profiles import CameraQualityRetentionProfiles
from .cameras import Cameras
from .change_log import ChangeLog
from .clients import Clients
from .config_templates import ConfigTemplates
from .content_filtering_categories import ContentFilteringCategories
from .content_filtering_rules import ContentFilteringRules
from .devices import Devices
from .events import Events
from .firewalled_services import FirewalledServices
from .floor_plans import FloorPlans
from .intrusion_settings import IntrusionSettings
from .licenses import Licenses
from .link_aggregations import LinkAggregations
from .malware_settings import MalwareSettings
from .meraki_auth_users import MerakiAuthUsers
from .mg_lan_settings import MGLANSettings
from .mg_port_forwarding_rules import MGPortForwardingRules
from .monitored_media_servers import MonitoredMediaServers
from .mr_l3_firewall import MRL3Firewall
from .mv_sense import MVSense
from .mx_1_1_nat_rules import MX11NATRules
from .mx_1_many_nat_rules import MX1ManyNATRules
from .mx_cellular_firewall import MXCellularFirewall
from .mx_l3_inbound_firewall import MXL3InboundFirewall
from .mx_l3_outbound_firewall import MXL3OutboundFirewall
from .mx_l7_application_categories import MXL7ApplicationCategories
from .mx_l7_firewall import MXL7Firewall
from .mx_port_forwarding_rules import MXPortForwardingRules
from .mx_static_routes import MXStaticRoutes
from .mx_vlan_ports import MXVLANPorts
from .mx_vpn_firewall import MXVPNFirewall
from .mx_warm_spare_settings import MXWarmSpareSettings
from .named_tag_scope import NamedTagScope
from .networks import Networks
from .openapi_spec import OpenAPISpec
from .organizations import Organizations
from .pii import Pii
from .radio_settings import RadioSettings
from .saml_roles import SAMLRoles
from .security_events import SecurityEvents
from .sm import Sm
from .snmp_settings import SNMPSettings
from .splash_login_attempts import SplashLoginAttempts
from .splash_settings import SplashSettings
from .ssids import SSIDs
from .switch_access_policies import SwitchAccessPolicies
from .switch_port_schedules import SwitchPortSchedules
from .switch_ports import SwitchPorts
from .switch_profiles import SwitchProfiles
from .switch_settings import SwitchSettings
from .switch_stacks import SwitchStacks
from .syslog_servers import SyslogServers
from .traffic_shaping_uplink_settings import TrafficShapingUplinkSettings
from .vlans import VLANs
from .wireless_health import WirelessHealth
from .wireless_settings import WirelessSettings
from sdk.models import shared

SERVERS = [
    "https://api.meraki.com/api/v0",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.
    
    > Date: 05 March, 2023
    >
    > [Recent Updates](https://meraki.io/whats-new/)
    
    ---
    
    [API Documentation](https://meraki.io/api)
    
    [Community Support](https://meraki.io/community)
    
    [Meraki Homepage](https://www.meraki.com)
    """
    api_usage: APIUsage
    action_batches: ActionBatches
    admins: Admins
    alert_settings: AlertSettings
    bluetooth_clients: BluetoothClients
    bluetooth_settings: BluetoothSettings
    camera_quality_retention_profiles: CameraQualityRetentionProfiles
    cameras: Cameras
    change_log: ChangeLog
    clients: Clients
    config_templates: ConfigTemplates
    content_filtering_categories: ContentFilteringCategories
    content_filtering_rules: ContentFilteringRules
    devices: Devices
    events: Events
    firewalled_services: FirewalledServices
    floor_plans: FloorPlans
    intrusion_settings: IntrusionSettings
    licenses: Licenses
    link_aggregations: LinkAggregations
    mg_lan_settings: MGLANSettings
    mg_port_forwarding_rules: MGPortForwardingRules
    mr_l3_firewall: MRL3Firewall
    mv_sense: MVSense
    mx_1_1_nat_rules: MX11NATRules
    mx_1_many_nat_rules: MX1ManyNATRules
    mx_l3_inbound_firewall: MXL3InboundFirewall
    mx_l3_outbound_firewall: MXL3OutboundFirewall
    mx_l7_application_categories: MXL7ApplicationCategories
    mx_l7_firewall: MXL7Firewall
    mx_vlan_ports: MXVLANPorts
    mx_vpn_firewall: MXVPNFirewall
    mx_cellular_firewall: MXCellularFirewall
    mx_port_forwarding_rules: MXPortForwardingRules
    mx_static_routes: MXStaticRoutes
    mx_warm_spare_settings: MXWarmSpareSettings
    malware_settings: MalwareSettings
    meraki_auth_users: MerakiAuthUsers
    monitored_media_servers: MonitoredMediaServers
    named_tag_scope: NamedTagScope
    networks: Networks
    open_api_spec: OpenAPISpec
    organizations: Organizations
    pii: Pii
    radio_settings: RadioSettings
    saml_roles: SAMLRoles
    sm: Sm
    snmp_settings: SNMPSettings
    ssi_ds: SSIDs
    security_events: SecurityEvents
    splash_login_attempts: SplashLoginAttempts
    splash_settings: SplashSettings
    switch_access_policies: SwitchAccessPolicies
    switch_port_schedules: SwitchPortSchedules
    switch_ports: SwitchPorts
    switch_profiles: SwitchProfiles
    switch_settings: SwitchSettings
    switch_stacks: SwitchStacks
    syslog_servers: SyslogServers
    traffic_shaping_uplink_settings: TrafficShapingUplinkSettings
    vla_ns: VLANs
    wireless_health: WirelessHealth
    wireless_settings: WirelessSettings

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 security: shared.Security = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = utils.configure_security_client(self._client, security)
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.api_usage = APIUsage(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.action_batches = ActionBatches(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.admins = Admins(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.alert_settings = AlertSettings(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.bluetooth_clients = BluetoothClients(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.bluetooth_settings = BluetoothSettings(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.camera_quality_retention_profiles = CameraQualityRetentionProfiles(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.cameras = Cameras(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.change_log = ChangeLog(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.clients = Clients(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.config_templates = ConfigTemplates(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.content_filtering_categories = ContentFilteringCategories(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.content_filtering_rules = ContentFilteringRules(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.devices = Devices(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.events = Events(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.firewalled_services = FirewalledServices(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.floor_plans = FloorPlans(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.intrusion_settings = IntrusionSettings(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.licenses = Licenses(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.link_aggregations = LinkAggregations(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.mg_lan_settings = MGLANSettings(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.mg_port_forwarding_rules = MGPortForwardingRules(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.mr_l3_firewall = MRL3Firewall(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.mv_sense = MVSense(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.mx_1_1_nat_rules = MX11NATRules(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.mx_1_many_nat_rules = MX1ManyNATRules(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.mx_l3_inbound_firewall = MXL3InboundFirewall(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.mx_l3_outbound_firewall = MXL3OutboundFirewall(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.mx_l7_application_categories = MXL7ApplicationCategories(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.mx_l7_firewall = MXL7Firewall(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.mx_vlan_ports = MXVLANPorts(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.mx_vpn_firewall = MXVPNFirewall(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.mx_cellular_firewall = MXCellularFirewall(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.mx_port_forwarding_rules = MXPortForwardingRules(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.mx_static_routes = MXStaticRoutes(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.mx_warm_spare_settings = MXWarmSpareSettings(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.malware_settings = MalwareSettings(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.meraki_auth_users = MerakiAuthUsers(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.monitored_media_servers = MonitoredMediaServers(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.named_tag_scope = NamedTagScope(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.networks = Networks(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.open_api_spec = OpenAPISpec(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.organizations = Organizations(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.pii = Pii(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.radio_settings = RadioSettings(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.saml_roles = SAMLRoles(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.sm = Sm(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.snmp_settings = SNMPSettings(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.ssi_ds = SSIDs(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.security_events = SecurityEvents(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.splash_login_attempts = SplashLoginAttempts(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.splash_settings = SplashSettings(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.switch_access_policies = SwitchAccessPolicies(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.switch_port_schedules = SwitchPortSchedules(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.switch_ports = SwitchPorts(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.switch_profiles = SwitchProfiles(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.switch_settings = SwitchSettings(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.switch_stacks = SwitchStacks(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.syslog_servers = SyslogServers(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.traffic_shaping_uplink_settings = TrafficShapingUplinkSettings(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.vla_ns = VLANs(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.wireless_health = WirelessHealth(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.wireless_settings = WirelessSettings(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    