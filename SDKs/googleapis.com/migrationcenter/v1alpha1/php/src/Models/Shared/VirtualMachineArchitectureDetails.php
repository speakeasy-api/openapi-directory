<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * VirtualMachineArchitectureDetails - Details of the VM architecture.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class VirtualMachineArchitectureDetails
{
    /**
     * Details about the BIOS.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\BiosDetails $bios
     */
	#[\JMS\Serializer\Annotation\SerializedName('bios')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\BiosDetails')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?BiosDetails $bios = null;
    
    /**
     * CPU architecture, e.g., "x64-based PC", "x86_64", "i686" etc.
     * 
     * @var ?string $cpuArchitecture
     */
	#[\JMS\Serializer\Annotation\SerializedName('cpuArchitecture')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $cpuArchitecture = null;
    
    /**
     * CPU manufacturer, e.g., "Intel", "AMD".
     * 
     * @var ?string $cpuManufacturer
     */
	#[\JMS\Serializer\Annotation\SerializedName('cpuManufacturer')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $cpuManufacturer = null;
    
    /**
     * CPU name, e.g., "Intel Xeon E5-2690", "AMD EPYC 7571" etc.
     * 
     * @var ?string $cpuName
     */
	#[\JMS\Serializer\Annotation\SerializedName('cpuName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $cpuName = null;
    
    /**
     * Number of processor sockets allocated to the machine.
     * 
     * @var ?int $cpuSocketCount
     */
	#[\JMS\Serializer\Annotation\SerializedName('cpuSocketCount')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $cpuSocketCount = null;
    
    /**
     * Number of CPU threads allocated to the machine.
     * 
     * @var ?int $cpuThreadCount
     */
	#[\JMS\Serializer\Annotation\SerializedName('cpuThreadCount')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $cpuThreadCount = null;
    
    /**
     * Firmware (BIOS/efi).
     * 
     * @var ?string $firmware
     */
	#[\JMS\Serializer\Annotation\SerializedName('firmware')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $firmware = null;
    
    /**
     * CPU hyperthreading support.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\VirtualMachineArchitectureDetailsHyperthreadingEnum $hyperthreading
     */
	#[\JMS\Serializer\Annotation\SerializedName('hyperthreading')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\VirtualMachineArchitectureDetailsHyperthreadingEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?VirtualMachineArchitectureDetailsHyperthreadingEnum $hyperthreading = null;
    
    /**
     * Hardware vendor.
     * 
     * @var ?string $vendor
     */
	#[\JMS\Serializer\Annotation\SerializedName('vendor')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $vendor = null;
    
	public function __construct()
	{
		$this->bios = null;
		$this->cpuArchitecture = null;
		$this->cpuManufacturer = null;
		$this->cpuName = null;
		$this->cpuSocketCount = null;
		$this->cpuThreadCount = null;
		$this->firmware = null;
		$this->hyperthreading = null;
		$this->vendor = null;
	}
}
