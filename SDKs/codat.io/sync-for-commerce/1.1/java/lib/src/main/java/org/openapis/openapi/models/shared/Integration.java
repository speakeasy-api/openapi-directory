/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Integration - An integration that Codat supports
 */
public class Integration {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataProvidedBy")
    public String dataProvidedBy;

    public Integration withDataProvidedBy(String dataProvidedBy) {
        this.dataProvidedBy = dataProvidedBy;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datatypeFeatures")
    public DataTypeFeature[] datatypeFeatures;

    public Integration withDatatypeFeatures(DataTypeFeature[] datatypeFeatures) {
        this.datatypeFeatures = datatypeFeatures;
        return this;
    }
    
    /**
     * Whether this integration is enabled for your customers to use
     */
    @JsonProperty("enabled")
    public Boolean enabled;

    public Integration withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }
    
    /**
     * A Codat ID representing the integration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("integrationId")
    public String integrationId;

    public Integration withIntegrationId(String integrationId) {
        this.integrationId = integrationId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isBeta")
    public Boolean isBeta;

    public Integration withIsBeta(Boolean isBeta) {
        this.isBeta = isBeta;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isOfflineConnector")
    public Boolean isOfflineConnector;

    public Integration withIsOfflineConnector(Boolean isOfflineConnector) {
        this.isOfflineConnector = isOfflineConnector;
        return this;
    }
    
    /**
     * A unique 4-letter key to represent a platform in each integration. View [accounting](https://docs.codat.io/integrations/accounting/accounting-platform-keys), [banking](https://docs.codat.io/integrations/banking/banking-platform-keys), and [commerce](https://docs.codat.io/integrations/commerce/commerce-platform-keys) platform keys. 
     */
    @JsonProperty("key")
    public String key;

    public Integration withKey(String key) {
        this.key = key;
        return this;
    }
    
    @JsonProperty("logoUrl")
    public String logoUrl;

    public Integration withLogoUrl(String logoUrl) {
        this.logoUrl = logoUrl;
        return this;
    }
    
    @JsonProperty("name")
    public String name;

    public Integration withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * A source-specific ID used to distinguish between different sources originating from the same data connection. In general, a data connection is a single data source. However, for TrueLayer, `sourceId` is associated with a specific bank and has a many-to-one relationship with the `integrationId`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceId")
    public String sourceId;

    public Integration withSourceId(String sourceId) {
        this.sourceId = sourceId;
        return this;
    }
    
    /**
     * The type of platform of the connection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceType")
    public SourceTypeEnum sourceType;

    public Integration withSourceType(SourceTypeEnum sourceType) {
        this.sourceType = sourceType;
        return this;
    }
    
    public Integration(@JsonProperty("enabled") Boolean enabled, @JsonProperty("key") String key, @JsonProperty("logoUrl") String logoUrl, @JsonProperty("name") String name) {
        this.enabled = enabled;
        this.key = key;
        this.logoUrl = logoUrl;
        this.name = name;
  }
}
