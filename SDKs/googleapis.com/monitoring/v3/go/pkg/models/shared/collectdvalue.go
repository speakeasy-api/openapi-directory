// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CollectdValueDataSourceTypeEnum - The type of measurement.
type CollectdValueDataSourceTypeEnum string

const (
	CollectdValueDataSourceTypeEnumUnspecifiedDataSourceType CollectdValueDataSourceTypeEnum = "UNSPECIFIED_DATA_SOURCE_TYPE"
	CollectdValueDataSourceTypeEnumGauge                     CollectdValueDataSourceTypeEnum = "GAUGE"
	CollectdValueDataSourceTypeEnumCounter                   CollectdValueDataSourceTypeEnum = "COUNTER"
	CollectdValueDataSourceTypeEnumDerive                    CollectdValueDataSourceTypeEnum = "DERIVE"
	CollectdValueDataSourceTypeEnumAbsolute                  CollectdValueDataSourceTypeEnum = "ABSOLUTE"
)

func (e CollectdValueDataSourceTypeEnum) ToPointer() *CollectdValueDataSourceTypeEnum {
	return &e
}

func (e *CollectdValueDataSourceTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNSPECIFIED_DATA_SOURCE_TYPE":
		fallthrough
	case "GAUGE":
		fallthrough
	case "COUNTER":
		fallthrough
	case "DERIVE":
		fallthrough
	case "ABSOLUTE":
		*e = CollectdValueDataSourceTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CollectdValueDataSourceTypeEnum: %v", v)
	}
}

// CollectdValue - A single data point from a collectd-based plugin.
type CollectdValue struct {
	// The data source for the collectd value. For example, there are two data sources for network measurements: "rx" and "tx".
	DataSourceName *string `json:"dataSourceName,omitempty"`
	// The type of measurement.
	DataSourceType *CollectdValueDataSourceTypeEnum `json:"dataSourceType,omitempty"`
	// A single strongly-typed value.
	Value *TypedValue `json:"value,omitempty"`
}
