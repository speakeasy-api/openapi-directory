// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetContentTypeEnum - Content Type
type GetContentTypeEnum string

const (
	GetContentTypeEnumApplicationJSON GetContentTypeEnum = "application/json"
	GetContentTypeEnumTextHTML        GetContentTypeEnum = "text/html"
	GetContentTypeEnumTextXML         GetContentTypeEnum = "text/xml"
	GetContentTypeEnumApplicationXML  GetContentTypeEnum = "application/xml"
)

func (e GetContentTypeEnum) ToPointer() *GetContentTypeEnum {
	return &e
}

func (e *GetContentTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "application/json":
		fallthrough
	case "text/html":
		fallthrough
	case "text/xml":
		fallthrough
	case "application/xml":
		*e = GetContentTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContentTypeEnum: %v", v)
	}
}

// GetHypermediaEnum - Disable Hypermedia
type GetHypermediaEnum string

const (
	GetHypermediaEnumYes GetHypermediaEnum = "yes"
	GetHypermediaEnumNo  GetHypermediaEnum = "no"
)

func (e GetHypermediaEnum) ToPointer() *GetHypermediaEnum {
	return &e
}

func (e *GetHypermediaEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "yes":
		fallthrough
	case "no":
		*e = GetHypermediaEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetHypermediaEnum: %v", v)
	}
}

type GetRequest struct {
	// Content Type
	ContentType *GetContentTypeEnum `queryParam:"style=form,explode=true,name=content-type"`
	// Disable Hypermedia
	Hypermedia *GetHypermediaEnum `queryParam:"style=form,explode=true,name=hypermedia"`
}

type Get200ApplicationJSONStatusEnum string

const (
	Get200ApplicationJSONStatusEnumOk Get200ApplicationJSONStatusEnum = "OK"
)

func (e Get200ApplicationJSONStatusEnum) ToPointer() *Get200ApplicationJSONStatusEnum {
	return &e
}

func (e *Get200ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OK":
		*e = Get200ApplicationJSONStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Get200ApplicationJSONStatusEnum: %v", v)
	}
}

// Get200ApplicationJSON - Return Status OK and/or resource list
type Get200ApplicationJSON struct {
	Status *Get200ApplicationJSONStatusEnum `json:"status,omitempty"`
}

type GetResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Return Status OK and/or resource list
	Get200ApplicationJSONObject *Get200ApplicationJSON
}
