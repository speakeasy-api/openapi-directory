// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// AppPkgInfo - 'The data type AppPkgInfo represents the parameters for an application package resource'
type AppPkgInfo struct {
	// Links to resources related to this resource.
	Links AppPkgInfoLinks `json:"_links"`
	// Additional information of application package artifacts that are not application software images. Type is TBD
	AdditionalArtifacts interface{} `json:"additionalArtifacts,omitempty"`
	// Identifier of this MEC application descriptor. This attribute shall be globally unique.
	AppDID string `json:"appDId"`
	// Identifies the version of the application descriptor.
	AppDVersion string `json:"appDVersion"`
	// Name to identify the MEC application.
	AppName string `json:"appName"`
	// Provider of the application and of the AppD.
	AppProvider *string `json:"appProvider,omitempty"`
	// Software version of the application. This is updated when there is any change to the software in the onboarded application package.
	AppSoftwareVersion string   `json:"appSoftwareVersion"`
	Checksum           Checksum `json:"checksum"`
	// Identifier of the onboarded application package.
	ID string `json:"id"`
	// Onboarding state of application package
	OnboardingState OnboardingStateEnum `json:"onboardingState"`
	// Operational state of the onboarded application package: Ã¢â‚¬Â¢ENABLED: the application package can be used for instantiation of new application instances. Ã¢â‚¬Â¢DISABLED: the application package cannot be used for further application instantiation requests.
	OperationalState AppPkgOperationalStateEnum `json:"operationalState"`
	// Information of application software image in application package. Type is TBD
	SoftwareImages interface{} `json:"softwareImages"`
	// Usage state of the onboarded instance of the application package
	UsageState UsageStateEnum `json:"usageState"`
	// 'This data type represents a list of key-value pairs. The order of the pairs in the list is not significant. In JSON, a set of key-value pairs is represented as an object. It shall comply with the provisions defined in clause 4 of IETF RFC 8259'
	UserDefinedData map[string]interface{} `json:"userDefinedData,omitempty"`
}
