// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type SubscriptionsAPISaveRequestBodyType string

const (
	SubscriptionsAPISaveRequestBodyTypeSubscriptionCreateModify SubscriptionsAPISaveRequestBodyType = "SubscriptionCreateModify"
)

type SubscriptionsAPISaveRequestBody struct {
	SubscriptionCreateModify *shared.SubscriptionCreateModify

	Type SubscriptionsAPISaveRequestBodyType
}

func CreateSubscriptionsAPISaveRequestBodySubscriptionCreateModify(subscriptionCreateModify shared.SubscriptionCreateModify) SubscriptionsAPISaveRequestBody {
	typ := SubscriptionsAPISaveRequestBodyTypeSubscriptionCreateModify

	return SubscriptionsAPISaveRequestBody{
		SubscriptionCreateModify: &subscriptionCreateModify,
		Type:                     typ,
	}
}

func (u *SubscriptionsAPISaveRequestBody) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	subscriptionCreateModify := new(shared.SubscriptionCreateModify)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&subscriptionCreateModify); err == nil {
		u.SubscriptionCreateModify = subscriptionCreateModify
		u.Type = SubscriptionsAPISaveRequestBodyTypeSubscriptionCreateModify
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SubscriptionsAPISaveRequestBody) MarshalJSON() ([]byte, error) {
	if u.SubscriptionCreateModify != nil {
		return json.Marshal(u.SubscriptionCreateModify)
	}

	return nil, nil
}

type SubscriptionsAPISaveRequest struct {
	Request SubscriptionsAPISaveRequestBody `request:"mediaType=application/json"`
}

type SubscriptionsAPISave201ApplicationJSONType string

const (
	SubscriptionsAPISave201ApplicationJSONTypeKeyView SubscriptionsAPISave201ApplicationJSONType = "KeyView"
)

type SubscriptionsAPISave201ApplicationJSON struct {
	KeyView *shared.KeyView

	Type SubscriptionsAPISave201ApplicationJSONType
}

func CreateSubscriptionsAPISave201ApplicationJSONKeyView(keyView shared.KeyView) SubscriptionsAPISave201ApplicationJSON {
	typ := SubscriptionsAPISave201ApplicationJSONTypeKeyView

	return SubscriptionsAPISave201ApplicationJSON{
		KeyView: &keyView,
		Type:    typ,
	}
}

func (u *SubscriptionsAPISave201ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	keyView := new(shared.KeyView)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&keyView); err == nil {
		u.KeyView = keyView
		u.Type = SubscriptionsAPISave201ApplicationJSONTypeKeyView
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SubscriptionsAPISave201ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.KeyView != nil {
		return json.Marshal(u.KeyView)
	}

	return nil, nil
}

type SubscriptionsAPISaveResponse struct {
	ContentType                                 string
	StatusCode                                  int
	RawResponse                                 *http.Response
	SubscriptionsAPISave201ApplicationJSONOneOf *SubscriptionsAPISave201ApplicationJSON
}
