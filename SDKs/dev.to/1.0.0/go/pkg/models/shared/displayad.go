// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DisplayAdDisplayToEnum - Potentially limits visitors to whom the ad is visible
type DisplayAdDisplayToEnum string

const (
	DisplayAdDisplayToEnumAll       DisplayAdDisplayToEnum = "all"
	DisplayAdDisplayToEnumLoggedIn  DisplayAdDisplayToEnum = "logged_in"
	DisplayAdDisplayToEnumLoggedOut DisplayAdDisplayToEnum = "logged_out"
)

func (e DisplayAdDisplayToEnum) ToPointer() *DisplayAdDisplayToEnum {
	return &e
}

func (e *DisplayAdDisplayToEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "logged_in":
		fallthrough
	case "logged_out":
		*e = DisplayAdDisplayToEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DisplayAdDisplayToEnum: %v", v)
	}
}

// DisplayAdPlacementAreaEnum - Identifies which area of site layout the ad can appear in
type DisplayAdPlacementAreaEnum string

const (
	DisplayAdPlacementAreaEnumSidebarLeft  DisplayAdPlacementAreaEnum = "sidebar_left"
	DisplayAdPlacementAreaEnumSidebarLeft2 DisplayAdPlacementAreaEnum = "sidebar_left_2"
	DisplayAdPlacementAreaEnumSidebarRight DisplayAdPlacementAreaEnum = "sidebar_right"
	DisplayAdPlacementAreaEnumFeedFirst    DisplayAdPlacementAreaEnum = "feed_first"
	DisplayAdPlacementAreaEnumFeedSecond   DisplayAdPlacementAreaEnum = "feed_second"
	DisplayAdPlacementAreaEnumFeedThird    DisplayAdPlacementAreaEnum = "feed_third"
	DisplayAdPlacementAreaEnumPostSidebar  DisplayAdPlacementAreaEnum = "post_sidebar"
	DisplayAdPlacementAreaEnumPostComments DisplayAdPlacementAreaEnum = "post_comments"
)

func (e DisplayAdPlacementAreaEnum) ToPointer() *DisplayAdPlacementAreaEnum {
	return &e
}

func (e *DisplayAdPlacementAreaEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sidebar_left":
		fallthrough
	case "sidebar_left_2":
		fallthrough
	case "sidebar_right":
		fallthrough
	case "feed_first":
		fallthrough
	case "feed_second":
		fallthrough
	case "feed_third":
		fallthrough
	case "post_sidebar":
		fallthrough
	case "post_comments":
		*e = DisplayAdPlacementAreaEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DisplayAdPlacementAreaEnum: %v", v)
	}
}

// DisplayAdTypeOfEnum - Types of the billboards:
// in_house (created by admins),
// community (created by an entity, appears on entity's content),
// external ( created by an entity, or a non-entity, can appear everywhere)
type DisplayAdTypeOfEnum string

const (
	DisplayAdTypeOfEnumInHouse   DisplayAdTypeOfEnum = "in_house"
	DisplayAdTypeOfEnumCommunity DisplayAdTypeOfEnum = "community"
	DisplayAdTypeOfEnumExternal  DisplayAdTypeOfEnum = "external"
)

func (e DisplayAdTypeOfEnum) ToPointer() *DisplayAdTypeOfEnum {
	return &e
}

func (e *DisplayAdTypeOfEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "in_house":
		fallthrough
	case "community":
		fallthrough
	case "external":
		*e = DisplayAdTypeOfEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DisplayAdTypeOfEnum: %v", v)
	}
}

// DisplayAd - A Display Ad, aka Billboard, aka Widget
type DisplayAd struct {
	// Ad must be both published and approved to be in rotation
	Approved *bool `json:"approved,omitempty"`
	// Articles this ad should *not* appear on (blank means no articles are disallowed, and this ad can appear next to any/all articles). Comma-separated list of integer Article IDs
	ArticleExcludeIds *string `json:"article_exclude_ids,omitempty"`
	// The text (in markdown) of the ad (required)
	BodyMarkdown string `json:"body_markdown"`
	// Identifies the user who created the ad.
	CreatorID *int64 `json:"creator_id,omitempty"`
	// Potentially limits visitors to whom the ad is visible
	DisplayTo *DisplayAdDisplayToEnum `json:"display_to,omitempty"`
	// The ID of the Display Ad
	ID *int64 `json:"id,omitempty"`
	// For internal use, helps distinguish ads from one another
	Name string `json:"name"`
	// Identifies the organization to which the ad belongs
	OrganizationID *int64 `json:"organization_id,omitempty"`
	// Identifies which area of site layout the ad can appear in
	PlacementArea DisplayAdPlacementAreaEnum `json:"placement_area"`
	// Ad must be both published and approved to be in rotation
	Published *bool `json:"published,omitempty"`
	// Tags on which this ad can be displayed (blank is all/any tags)
	TagList *string `json:"tag_list,omitempty"`
	// Types of the billboards:
	// in_house (created by admins),
	// community (created by an entity, appears on entity's content),
	// external ( created by an entity, or a non-entity, can appear everywhere)
	//
	TypeOf *DisplayAdTypeOfEnum `json:"type_of,omitempty"`
}
