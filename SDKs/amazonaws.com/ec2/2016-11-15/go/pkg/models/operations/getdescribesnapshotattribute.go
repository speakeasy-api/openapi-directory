// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDescribeSnapshotAttributeActionEnum
type GETDescribeSnapshotAttributeActionEnum string

const (
	GETDescribeSnapshotAttributeActionEnumDescribeSnapshotAttribute GETDescribeSnapshotAttributeActionEnum = "DescribeSnapshotAttribute"
)

func (e *GETDescribeSnapshotAttributeActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DescribeSnapshotAttribute":
		*e = GETDescribeSnapshotAttributeActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeSnapshotAttributeActionEnum: %s", s)
	}
}

// GETDescribeSnapshotAttributeAttributeEnum - The snapshot attribute you would like to view.
type GETDescribeSnapshotAttributeAttributeEnum string

const (
	GETDescribeSnapshotAttributeAttributeEnumProductCodes           GETDescribeSnapshotAttributeAttributeEnum = "productCodes"
	GETDescribeSnapshotAttributeAttributeEnumCreateVolumePermission GETDescribeSnapshotAttributeAttributeEnum = "createVolumePermission"
)

func (e *GETDescribeSnapshotAttributeAttributeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "productCodes":
		fallthrough
	case "createVolumePermission":
		*e = GETDescribeSnapshotAttributeAttributeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeSnapshotAttributeAttributeEnum: %s", s)
	}
}

// GETDescribeSnapshotAttributeVersionEnum
type GETDescribeSnapshotAttributeVersionEnum string

const (
	GETDescribeSnapshotAttributeVersionEnumTwoThousandAndSixteen1115 GETDescribeSnapshotAttributeVersionEnum = "2016-11-15"
)

func (e *GETDescribeSnapshotAttributeVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETDescribeSnapshotAttributeVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeSnapshotAttributeVersionEnum: %s", s)
	}
}

type GETDescribeSnapshotAttributeQueryParams struct {
	Action GETDescribeSnapshotAttributeActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The snapshot attribute you would like to view.
	Attribute GETDescribeSnapshotAttributeAttributeEnum `queryParam:"style=form,explode=true,name=Attribute"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The ID of the EBS snapshot.
	SnapshotID string                                  `queryParam:"style=form,explode=true,name=SnapshotId"`
	Version    GETDescribeSnapshotAttributeVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETDescribeSnapshotAttributeHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDescribeSnapshotAttributeRequest struct {
	QueryParams GETDescribeSnapshotAttributeQueryParams
	Headers     GETDescribeSnapshotAttributeHeaders
}

type GETDescribeSnapshotAttributeResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
