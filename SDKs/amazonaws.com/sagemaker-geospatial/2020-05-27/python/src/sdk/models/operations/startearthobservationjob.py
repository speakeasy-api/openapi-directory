"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import bandmathconfiginput as shared_bandmathconfiginput
from ..shared import cloudremovalconfiginput as shared_cloudremovalconfiginput
from ..shared import eojdatasourceconfiginput as shared_eojdatasourceconfiginput
from ..shared import geomosaicconfiginput as shared_geomosaicconfiginput
from ..shared import rasterdatacollectionqueryinput as shared_rasterdatacollectionqueryinput
from ..shared import resamplingconfiginput as shared_resamplingconfiginput
from ..shared import stackconfiginput as shared_stackconfiginput
from ..shared import startearthobservationjoboutput as shared_startearthobservationjoboutput
from ..shared import temporalstatisticsconfiginput as shared_temporalstatisticsconfiginput
from ..shared import zonalstatisticsconfiginput as shared_zonalstatisticsconfiginput
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StartEarthObservationJobRequestBodyInputConfig:
    r"""Input configuration information."""
    
    data_source_config: Optional[shared_eojdatasourceconfiginput.EojDataSourceConfigInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DataSourceConfig'), 'exclude': lambda f: f is None }})  
    previous_earth_observation_job_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PreviousEarthObservationJobArn'), 'exclude': lambda f: f is None }})  
    raster_data_collection_query: Optional[shared_rasterdatacollectionqueryinput.RasterDataCollectionQueryInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RasterDataCollectionQuery'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StartEarthObservationJobRequestBodyJobConfig:
    r"""The input structure for the JobConfig in an EarthObservationJob."""
    
    band_math_config: Optional[shared_bandmathconfiginput.BandMathConfigInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BandMathConfig'), 'exclude': lambda f: f is None }})  
    cloud_masking_config: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CloudMaskingConfig'), 'exclude': lambda f: f is None }})  
    cloud_removal_config: Optional[shared_cloudremovalconfiginput.CloudRemovalConfigInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CloudRemovalConfig'), 'exclude': lambda f: f is None }})  
    geo_mosaic_config: Optional[shared_geomosaicconfiginput.GeoMosaicConfigInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GeoMosaicConfig'), 'exclude': lambda f: f is None }})  
    land_cover_segmentation_config: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LandCoverSegmentationConfig'), 'exclude': lambda f: f is None }})  
    resampling_config: Optional[shared_resamplingconfiginput.ResamplingConfigInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResamplingConfig'), 'exclude': lambda f: f is None }})  
    stack_config: Optional[shared_stackconfiginput.StackConfigInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StackConfig'), 'exclude': lambda f: f is None }})  
    temporal_statistics_config: Optional[shared_temporalstatisticsconfiginput.TemporalStatisticsConfigInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TemporalStatisticsConfig'), 'exclude': lambda f: f is None }})  
    zonal_statistics_config: Optional[shared_zonalstatisticsconfiginput.ZonalStatisticsConfigInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ZonalStatisticsConfig'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StartEarthObservationJobRequestBody:
    
    input_config: StartEarthObservationJobRequestBodyInputConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InputConfig') }})
    r"""Input configuration information."""  
    job_config: StartEarthObservationJobRequestBodyJobConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JobConfig') }})
    r"""The input structure for the JobConfig in an EarthObservationJob."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})
    r"""The name of the Earth Observation job."""  
    client_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClientToken'), 'exclude': lambda f: f is None }})
    r"""A unique token that guarantees that the call to this API is idempotent."""  
    execution_role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExecutionRoleArn'), 'exclude': lambda f: f is None }})
    r"""The Amazon Resource Name (ARN) of the IAM role that you specified for the job."""  
    kms_key_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KmsKeyId'), 'exclude': lambda f: f is None }})
    r"""The Amazon Key Management Service (KMS) key ID for server-side encryption."""  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})
    r"""Each tag consists of a key and a value."""  
    

@dataclasses.dataclass
class StartEarthObservationJobRequest:
    
    request_body: StartEarthObservationJobRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class StartEarthObservationJobResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictException"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    service_quota_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceQuotaExceededException"""  
    start_earth_observation_job_output: Optional[shared_startearthobservationjoboutput.StartEarthObservationJobOutput] = dataclasses.field(default=None)
    r"""Success"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    