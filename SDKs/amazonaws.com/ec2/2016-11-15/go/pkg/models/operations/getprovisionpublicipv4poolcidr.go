// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETProvisionPublicIpv4PoolCidrActionEnum
type GETProvisionPublicIpv4PoolCidrActionEnum string

const (
	GETProvisionPublicIpv4PoolCidrActionEnumProvisionPublicIpv4PoolCidr GETProvisionPublicIpv4PoolCidrActionEnum = "ProvisionPublicIpv4PoolCidr"
)

func (e *GETProvisionPublicIpv4PoolCidrActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ProvisionPublicIpv4PoolCidr":
		*e = GETProvisionPublicIpv4PoolCidrActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETProvisionPublicIpv4PoolCidrActionEnum: %s", s)
	}
}

// GETProvisionPublicIpv4PoolCidrVersionEnum
type GETProvisionPublicIpv4PoolCidrVersionEnum string

const (
	GETProvisionPublicIpv4PoolCidrVersionEnumTwoThousandAndSixteen1115 GETProvisionPublicIpv4PoolCidrVersionEnum = "2016-11-15"
)

func (e *GETProvisionPublicIpv4PoolCidrVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETProvisionPublicIpv4PoolCidrVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETProvisionPublicIpv4PoolCidrVersionEnum: %s", s)
	}
}

type GETProvisionPublicIpv4PoolCidrRequest struct {
	Action GETProvisionPublicIpv4PoolCidrActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The ID of the IPAM pool you would like to use to allocate this CIDR.
	IpamPoolID string `queryParam:"style=form,explode=true,name=IpamPoolId"`
	// The netmask length of the CIDR you would like to allocate to the public IPv4 pool.
	NetmaskLength int64 `queryParam:"style=form,explode=true,name=NetmaskLength"`
	// The ID of the public IPv4 pool you would like to use for this CIDR.
	PoolID            string                                    `queryParam:"style=form,explode=true,name=PoolId"`
	Version           GETProvisionPublicIpv4PoolCidrVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETProvisionPublicIpv4PoolCidrResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
