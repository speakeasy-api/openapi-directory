/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * QueryOperator - The definition of a operator that can be used in a Search/Suggest request.
 */
public class QueryOperator {
    /**
     * Display name of the operator
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;

    public QueryOperator withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * Potential list of values for the opeatror field. This field is only filled when we can safely enumerate all the possible values of this operator.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enumValues")
    public String[] enumValues;

    public QueryOperator withEnumValues(String[] enumValues) {
        this.enumValues = enumValues;
        return this;
    }
    
    /**
     * Indicates the operator name that can be used to isolate the property using the greater-than operator.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("greaterThanOperatorName")
    public String greaterThanOperatorName;

    public QueryOperator withGreaterThanOperatorName(String greaterThanOperatorName) {
        this.greaterThanOperatorName = greaterThanOperatorName;
        return this;
    }
    
    /**
     * Can this operator be used to get facets.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isFacetable")
    public Boolean isFacetable;

    public QueryOperator withIsFacetable(Boolean isFacetable) {
        this.isFacetable = isFacetable;
        return this;
    }
    
    /**
     * Indicates if multiple values can be set for this property.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isRepeatable")
    public Boolean isRepeatable;

    public QueryOperator withIsRepeatable(Boolean isRepeatable) {
        this.isRepeatable = isRepeatable;
        return this;
    }
    
    /**
     * Will the property associated with this facet be returned as part of search results.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isReturnable")
    public Boolean isReturnable;

    public QueryOperator withIsReturnable(Boolean isReturnable) {
        this.isReturnable = isReturnable;
        return this;
    }
    
    /**
     * Can this operator be used to sort results.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isSortable")
    public Boolean isSortable;

    public QueryOperator withIsSortable(Boolean isSortable) {
        this.isSortable = isSortable;
        return this;
    }
    
    /**
     * Can get suggestions for this field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isSuggestable")
    public Boolean isSuggestable;

    public QueryOperator withIsSuggestable(Boolean isSuggestable) {
        this.isSuggestable = isSuggestable;
        return this;
    }
    
    /**
     * Indicates the operator name that can be used to isolate the property using the less-than operator.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lessThanOperatorName")
    public String lessThanOperatorName;

    public QueryOperator withLessThanOperatorName(String lessThanOperatorName) {
        this.lessThanOperatorName = lessThanOperatorName;
        return this;
    }
    
    /**
     * The name of the object corresponding to the operator. This field is only filled for schema-specific operators, and is unset for common operators.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("objectType")
    public String objectType;

    public QueryOperator withObjectType(String objectType) {
        this.objectType = objectType;
        return this;
    }
    
    /**
     * The name of the operator.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("operatorName")
    public String operatorName;

    public QueryOperator withOperatorName(String operatorName) {
        this.operatorName = operatorName;
        return this;
    }
    
    /**
     * The type of the operator.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public QueryOperatorTypeEnum type;

    public QueryOperator withType(QueryOperatorTypeEnum type) {
        this.type = type;
        return this;
    }
    
    public QueryOperator(){}
}
