/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Creates a new API key. NOTE: Key is a global resource; hence the only supported value for location is `global`.
   */
  apikeysProjectsLocationsKeysCreate(
    req: operations.ApikeysProjectsLocationsKeysCreateRequest,
    security: operations.ApikeysProjectsLocationsKeysCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ApikeysProjectsLocationsKeysCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ApikeysProjectsLocationsKeysCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2/{parent}/keys", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "v2KeyInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ApikeysProjectsLocationsKeysCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ApikeysProjectsLocationsKeysCreateResponse =
        new operations.ApikeysProjectsLocationsKeysCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes an API key. Deleted key can be retrieved within 30 days of deletion. Afterward, key will be purged from the project. NOTE: Key is a global resource; hence the only supported value for location is `global`.
   */
  apikeysProjectsLocationsKeysDelete(
    req: operations.ApikeysProjectsLocationsKeysDeleteRequest,
    security: operations.ApikeysProjectsLocationsKeysDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ApikeysProjectsLocationsKeysDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ApikeysProjectsLocationsKeysDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ApikeysProjectsLocationsKeysDeleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ApikeysProjectsLocationsKeysDeleteResponse =
        new operations.ApikeysProjectsLocationsKeysDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the metadata for an API key. The key string of the API key isn't included in the response. NOTE: Key is a global resource; hence the only supported value for location is `global`.
   */
  apikeysProjectsLocationsKeysGet(
    req: operations.ApikeysProjectsLocationsKeysGetRequest,
    security: operations.ApikeysProjectsLocationsKeysGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ApikeysProjectsLocationsKeysGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ApikeysProjectsLocationsKeysGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ApikeysProjectsLocationsKeysGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ApikeysProjectsLocationsKeysGetResponse =
        new operations.ApikeysProjectsLocationsKeysGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.v2Key = utils.objectToClass(httpRes?.data, shared.V2Key);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the key string for an API key. NOTE: Key is a global resource; hence the only supported value for location is `global`.
   */
  apikeysProjectsLocationsKeysGetKeyString(
    req: operations.ApikeysProjectsLocationsKeysGetKeyStringRequest,
    security: operations.ApikeysProjectsLocationsKeysGetKeyStringSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ApikeysProjectsLocationsKeysGetKeyStringResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ApikeysProjectsLocationsKeysGetKeyStringRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2/{name}/keyString", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ApikeysProjectsLocationsKeysGetKeyStringSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ApikeysProjectsLocationsKeysGetKeyStringResponse =
        new operations.ApikeysProjectsLocationsKeysGetKeyStringResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.v2GetKeyStringResponse = utils.objectToClass(
              httpRes?.data,
              shared.V2GetKeyStringResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists the API keys owned by a project. The key string of the API key isn't included in the response. NOTE: Key is a global resource; hence the only supported value for location is `global`.
   */
  apikeysProjectsLocationsKeysList(
    req: operations.ApikeysProjectsLocationsKeysListRequest,
    security: operations.ApikeysProjectsLocationsKeysListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ApikeysProjectsLocationsKeysListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ApikeysProjectsLocationsKeysListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2/{parent}/keys", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ApikeysProjectsLocationsKeysListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ApikeysProjectsLocationsKeysListResponse =
        new operations.ApikeysProjectsLocationsKeysListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.v2ListKeysResponse = utils.objectToClass(
              httpRes?.data,
              shared.V2ListKeysResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Patches the modifiable fields of an API key. The key string of the API key isn't included in the response. NOTE: Key is a global resource; hence the only supported value for location is `global`.
   */
  apikeysProjectsLocationsKeysPatch(
    req: operations.ApikeysProjectsLocationsKeysPatchRequest,
    security: operations.ApikeysProjectsLocationsKeysPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ApikeysProjectsLocationsKeysPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ApikeysProjectsLocationsKeysPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "v2KeyInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ApikeysProjectsLocationsKeysPatchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ApikeysProjectsLocationsKeysPatchResponse =
        new operations.ApikeysProjectsLocationsKeysPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Undeletes an API key which was deleted within 30 days. NOTE: Key is a global resource; hence the only supported value for location is `global`.
   */
  apikeysProjectsLocationsKeysUndelete(
    req: operations.ApikeysProjectsLocationsKeysUndeleteRequest,
    security: operations.ApikeysProjectsLocationsKeysUndeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ApikeysProjectsLocationsKeysUndeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ApikeysProjectsLocationsKeysUndeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2/{name}:undelete", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ApikeysProjectsLocationsKeysUndeleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ApikeysProjectsLocationsKeysUndeleteResponse =
        new operations.ApikeysProjectsLocationsKeysUndeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }
}
