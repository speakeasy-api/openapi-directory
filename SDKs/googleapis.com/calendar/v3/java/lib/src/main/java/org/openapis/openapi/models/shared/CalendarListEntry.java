/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CalendarListEntry - Successful response
 */
public class CalendarListEntry {
    /**
     * The effective access role that the authenticated user has on the calendar. Read-only. Possible values are:  
     * - "freeBusyReader" - Provides read access to free/busy information. 
     * - "reader" - Provides read access to the calendar. Private events will appear to users with reader access, but event details will be hidden. 
     * - "writer" - Provides read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible. 
     * - "owner" - Provides ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessRole")
    public String accessRole;

    public CalendarListEntry withAccessRole(String accessRole) {
        this.accessRole = accessRole;
        return this;
    }
    
    /**
     * The main color of the calendar in the hexadecimal format "#0088aa". This property supersedes the index-based colorId property. To set or change this property, you need to specify colorRgbFormat=true in the parameters of the insert, update and patch methods. Optional.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("backgroundColor")
    public String backgroundColor;

    public CalendarListEntry withBackgroundColor(String backgroundColor) {
        this.backgroundColor = backgroundColor;
        return this;
    }
    
    /**
     * The color of the calendar. This is an ID referring to an entry in the calendar section of the colors definition (see the colors endpoint). This property is superseded by the backgroundColor and foregroundColor properties and can be ignored when using these properties. Optional.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("colorId")
    public String colorId;

    public CalendarListEntry withColorId(String colorId) {
        this.colorId = colorId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("conferenceProperties")
    public ConferenceProperties conferenceProperties;

    public CalendarListEntry withConferenceProperties(ConferenceProperties conferenceProperties) {
        this.conferenceProperties = conferenceProperties;
        return this;
    }
    
    /**
     * The default reminders that the authenticated user has for this calendar.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultReminders")
    public EventReminder[] defaultReminders;

    public CalendarListEntry withDefaultReminders(EventReminder[] defaultReminders) {
        this.defaultReminders = defaultReminders;
        return this;
    }
    
    /**
     * Whether this calendar list entry has been deleted from the calendar list. Read-only. Optional. The default is False.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleted")
    public Boolean deleted;

    public CalendarListEntry withDeleted(Boolean deleted) {
        this.deleted = deleted;
        return this;
    }
    
    /**
     * Description of the calendar. Optional. Read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public CalendarListEntry withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * ETag of the resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("etag")
    public String etag;

    public CalendarListEntry withEtag(String etag) {
        this.etag = etag;
        return this;
    }
    
    /**
     * The foreground color of the calendar in the hexadecimal format "#ffffff". This property supersedes the index-based colorId property. To set or change this property, you need to specify colorRgbFormat=true in the parameters of the insert, update and patch methods. Optional.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("foregroundColor")
    public String foregroundColor;

    public CalendarListEntry withForegroundColor(String foregroundColor) {
        this.foregroundColor = foregroundColor;
        return this;
    }
    
    /**
     * Whether the calendar has been hidden from the list. Optional. The attribute is only returned when the calendar is hidden, in which case the value is true.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hidden")
    public Boolean hidden;

    public CalendarListEntry withHidden(Boolean hidden) {
        this.hidden = hidden;
        return this;
    }
    
    /**
     * Identifier of the calendar.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public CalendarListEntry withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Type of the resource ("calendar#calendarListEntry").
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;

    public CalendarListEntry withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * Geographic location of the calendar as free-form text. Optional. Read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    public String location;

    public CalendarListEntry withLocation(String location) {
        this.location = location;
        return this;
    }
    
    /**
     * The notifications that the authenticated user is receiving for this calendar.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notificationSettings")
    public CalendarListEntryNotificationSettings notificationSettings;

    public CalendarListEntry withNotificationSettings(CalendarListEntryNotificationSettings notificationSettings) {
        this.notificationSettings = notificationSettings;
        return this;
    }
    
    /**
     * Whether the calendar is the primary calendar of the authenticated user. Read-only. Optional. The default is False.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primary")
    public Boolean primary;

    public CalendarListEntry withPrimary(Boolean primary) {
        this.primary = primary;
        return this;
    }
    
    /**
     * Whether the calendar content shows up in the calendar UI. Optional. The default is False.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selected")
    public Boolean selected;

    public CalendarListEntry withSelected(Boolean selected) {
        this.selected = selected;
        return this;
    }
    
    /**
     * Title of the calendar. Read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("summary")
    public String summary;

    public CalendarListEntry withSummary(String summary) {
        this.summary = summary;
        return this;
    }
    
    /**
     * The summary that the authenticated user has set for this calendar. Optional.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("summaryOverride")
    public String summaryOverride;

    public CalendarListEntry withSummaryOverride(String summaryOverride) {
        this.summaryOverride = summaryOverride;
        return this;
    }
    
    /**
     * The time zone of the calendar. Optional. Read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeZone")
    public String timeZone;

    public CalendarListEntry withTimeZone(String timeZone) {
        this.timeZone = timeZone;
        return this;
    }
    
    public CalendarListEntry(){}
}
