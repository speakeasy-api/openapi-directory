"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import conversations_v1_service_service_role as shared_conversations_v1_service_service_role
from ..shared import service_role_enum_role_type_enum as shared_service_role_enum_role_type_enum
from typing import Optional

CREATE_SERVICE_ROLE_SERVERS = [
	"https://conversations.twilio.com",
]


@dataclasses.dataclass
class CreateServiceRoleSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    

@dataclasses.dataclass
class CreateServiceRoleCreateServiceRoleRequest:
    
    friendly_name: str = dataclasses.field(metadata={'form': { 'field_name': 'FriendlyName' }})
    r"""A descriptive string that you create to describe the new resource. It can be up to 64 characters long."""  
    permission: list[str] = dataclasses.field(metadata={'form': { 'field_name': 'Permission' }})
    r"""A permission that you grant to the new role. Only one permission can be granted per parameter. To assign more than one permission, repeat this parameter for each permission value. The values for this parameter depend on the role's `type`."""  
    type: shared_service_role_enum_role_type_enum.ServiceRoleEnumRoleTypeEnum = dataclasses.field(metadata={'form': { 'field_name': 'Type' }})  
    

@dataclasses.dataclass
class CreateServiceRoleRequest:
    
    chat_service_sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'ChatServiceSid', 'style': 'simple', 'explode': False }})
    r"""The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) to create the Role resource under."""  
    request_body: Optional[CreateServiceRoleCreateServiceRoleRequest] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/x-www-form-urlencoded' }})  
    

@dataclasses.dataclass
class CreateServiceRoleResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    conversations_v1_service_service_role: Optional[shared_conversations_v1_service_service_role.ConversationsV1ServiceServiceRole] = dataclasses.field(default=None)
    r"""Created"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    