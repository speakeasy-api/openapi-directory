/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Gateway - Gateway represents the configuration for a proxy, typically a load balancer. It captures the ip:port over which the services are exposed by the proxy, along with any policy configurations. Routes have reference to to Gateways to dictate how requests should be routed by this Gateway.
 */
public class Gateway {
    /**
     * Output only. The timestamp when the resource was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;
    public Gateway withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * Optional. A free-text description of the resource. Max length 1024 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public Gateway withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Optional. Set of label tags associated with the Gateway resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;
    public Gateway withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Required. Name of the Gateway resource. It matches pattern `projects/* /locations/* /gateways/`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Gateway withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Required. One or more port numbers (1-65535), on which the Gateway will receive traffic. The proxy binds to the specified ports. Gateways of type 'SECURE_WEB_GATEWAY' are limited to 1 port. Gateways of type 'OPEN_MESH' listen on 0.0.0.0 and support multiple ports.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ports")
    public Integer[] ports;
    public Gateway withPorts(Integer[] ports) {
        this.ports = ports;
        return this;
    }
    
    /**
     * Optional. Scope determines how configuration across multiple Gateway instances are merged. The configuration for multiple Gateway instances with the same scope will be merged as presented as a single coniguration to the proxy/load balancer. Max length 64 characters. Scope should start with a letter and can only have letters, numbers, hyphens.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scope")
    public String scope;
    public Gateway withScope(String scope) {
        this.scope = scope;
        return this;
    }
    
    /**
     * Output only. Server-defined URL of this resource
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selfLink")
    public String selfLink;
    public Gateway withSelfLink(String selfLink) {
        this.selfLink = selfLink;
        return this;
    }
    
    /**
     * Optional. A fully-qualified ServerTLSPolicy URL reference. Specifies how TLS traffic is terminated. If empty, TLS termination is disabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serverTlsPolicy")
    public String serverTlsPolicy;
    public Gateway withServerTlsPolicy(String serverTlsPolicy) {
        this.serverTlsPolicy = serverTlsPolicy;
        return this;
    }
    
    /**
     * Immutable. The type of the customer managed gateway. This field is required. If unspecified, an error is returned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public GatewayTypeEnum type;
    public Gateway withType(GatewayTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * Output only. The timestamp when the resource was updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    public String updateTime;
    public Gateway withUpdateTime(String updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
}
