"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class ClassificationInclusion:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_classification_inclusions(self, request: operations.GetClassificationInclusionsRequest, security: operations.GetClassificationInclusionsSecurity) -> operations.GetClassificationInclusionsResponse:
        r"""Get ClassificationInclusion records
        Classification Inclusions connect classifications with entities like series, episodes, or campaigns, amongst others.
        
        In order to retrieve a set of classification inclusions, at least one of the following filter parameters must
        be provided. Failing to do so renders a `400 Bad Request` response.
        
        - `ids[]`
        - `classified_id` and `classified_type`
        - `classified_id` and `classification_type`
        - `classification_id` and `classified_type`
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/classification_inclusions'
        
        query_params = utils.get_query_params(operations.GetClassificationInclusionsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetClassificationInclusionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.api+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetClassificationInclusions200ApplicationVndAPIPlusJSON])
                res.get_classification_inclusions_200_application_vnd_api_plus_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/vnd.api+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetClassificationInclusions400ApplicationVndAPIPlusJSON])
                res.get_classification_inclusions_400_application_vnd_api_plus_json_object = out
        elif http_res.status_code in [401, 403, 406]:
            pass
        elif http_res.status_code == 429:
            res.headers = http_res.headers
            

        return res

    def get_classification_inclusions_id_(self, request: operations.GetClassificationInclusionsIDRequest, security: operations.GetClassificationInclusionsIDSecurity) -> operations.GetClassificationInclusionsIDResponse:
        r"""Get a specific classification inclusion"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetClassificationInclusionsIDRequest, base_url, '/classification_inclusions/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetClassificationInclusionsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.api+json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetClassificationInclusionsID200ApplicationVndAPIPlusJSON])
                res.get_classification_inclusions_id_200_application_vnd_api_plus_json_object = out
        elif http_res.status_code in [401, 403, 404, 406]:
            pass
        elif http_res.status_code == 429:
            res.headers = http_res.headers
            

        return res

    