// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type ResetPasswordRequest struct {
	ResetPasswordWithTokenRequest shared.ResetPasswordWithTokenRequest `request:"mediaType=application/json"`
	// Password reset token
	Token string `pathParam:"style=simple,explode=false,name=token"`
}

type ResetPassword400ApplicationJSONType string

const (
	ResetPassword400ApplicationJSONTypeErrorResponse                   ResetPassword400ApplicationJSONType = "ErrorResponse"
	ResetPassword400ApplicationJSONTypePasswordPolicyViolationResponse ResetPassword400ApplicationJSONType = "PasswordPolicyViolationResponse"
)

type ResetPassword400ApplicationJSON struct {
	ErrorResponse                   *shared.ErrorResponse
	PasswordPolicyViolationResponse *shared.PasswordPolicyViolationResponse

	Type ResetPassword400ApplicationJSONType
}

func CreateResetPassword400ApplicationJSONErrorResponse(errorResponse shared.ErrorResponse) ResetPassword400ApplicationJSON {
	typ := ResetPassword400ApplicationJSONTypeErrorResponse

	return ResetPassword400ApplicationJSON{
		ErrorResponse: &errorResponse,
		Type:          typ,
	}
}

func CreateResetPassword400ApplicationJSONPasswordPolicyViolationResponse(passwordPolicyViolationResponse shared.PasswordPolicyViolationResponse) ResetPassword400ApplicationJSON {
	typ := ResetPassword400ApplicationJSONTypePasswordPolicyViolationResponse

	return ResetPassword400ApplicationJSON{
		PasswordPolicyViolationResponse: &passwordPolicyViolationResponse,
		Type:                            typ,
	}
}

func (u *ResetPassword400ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	errorResponse := new(shared.ErrorResponse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&errorResponse); err == nil {
		u.ErrorResponse = errorResponse
		u.Type = ResetPassword400ApplicationJSONTypeErrorResponse
		return nil
	}

	passwordPolicyViolationResponse := new(shared.PasswordPolicyViolationResponse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&passwordPolicyViolationResponse); err == nil {
		u.PasswordPolicyViolationResponse = passwordPolicyViolationResponse
		u.Type = ResetPassword400ApplicationJSONTypePasswordPolicyViolationResponse
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ResetPassword400ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.ErrorResponse != nil {
		return json.Marshal(u.ErrorResponse)
	}

	if u.PasswordPolicyViolationResponse != nil {
		return json.Marshal(u.PasswordPolicyViolationResponse)
	}

	return nil, nil
}

type ResetPasswordResponse struct {
	ContentType string
	// Not Found
	ErrorResponse *shared.ErrorResponse
	StatusCode    int
	RawResponse   *http.Response
	// Bad Request
	ResetPassword400ApplicationJSONOneOf *ResetPassword400ApplicationJSON
}
