"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import awssecuritygroup as shared_awssecuritygroup
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class AwsVMDetailsArchitectureEnum(str, Enum):
    r"""The CPU architecture."""
    VM_ARCHITECTURE_UNSPECIFIED = 'VM_ARCHITECTURE_UNSPECIFIED'
    I386 = 'I386'
    X86_64 = 'X86_64'
    ARM64 = 'ARM64'
    X86_64_MAC = 'X86_64_MAC'

class AwsVMDetailsBootOptionEnum(str, Enum):
    r"""The VM Boot Option."""
    BOOT_OPTION_UNSPECIFIED = 'BOOT_OPTION_UNSPECIFIED'
    EFI = 'EFI'
    BIOS = 'BIOS'

class AwsVMDetailsPowerStateEnum(str, Enum):
    r"""Output only. The power state of the VM at the moment list was taken."""
    POWER_STATE_UNSPECIFIED = 'POWER_STATE_UNSPECIFIED'
    ON = 'ON'
    OFF = 'OFF'
    SUSPENDED = 'SUSPENDED'
    PENDING = 'PENDING'

class AwsVMDetailsVirtualizationTypeEnum(str, Enum):
    r"""The virtualization type."""
    VM_VIRTUALIZATION_TYPE_UNSPECIFIED = 'VM_VIRTUALIZATION_TYPE_UNSPECIFIED'
    HVM = 'HVM'
    PARAVIRTUAL = 'PARAVIRTUAL'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AwsVMDetails:
    r"""AwsVmDetails describes a VM in AWS."""
    
    architecture: Optional[AwsVMDetailsArchitectureEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('architecture'), 'exclude': lambda f: f is None }})
    r"""The CPU architecture."""  
    boot_option: Optional[AwsVMDetailsBootOptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bootOption'), 'exclude': lambda f: f is None }})
    r"""The VM Boot Option."""  
    committed_storage_mb: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('committedStorageMb'), 'exclude': lambda f: f is None }})
    r"""The total size of the storage allocated to the VM in MB."""  
    cpu_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cpuCount'), 'exclude': lambda f: f is None }})
    r"""The number of cpus the VM has."""  
    disk_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('diskCount'), 'exclude': lambda f: f is None }})
    r"""The number of disks the VM has."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""The display name of the VM. Note that this value is not necessarily unique."""  
    instance_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instanceType'), 'exclude': lambda f: f is None }})
    r"""The instance type of the VM."""  
    memory_mb: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memoryMb'), 'exclude': lambda f: f is None }})
    r"""The memory size of the VM in MB."""  
    os_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('osDescription'), 'exclude': lambda f: f is None }})
    r"""The VM's OS."""  
    power_state: Optional[AwsVMDetailsPowerStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('powerState'), 'exclude': lambda f: f is None }})
    r"""Output only. The power state of the VM at the moment list was taken."""  
    security_groups: Optional[list[shared_awssecuritygroup.AwsSecurityGroup]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('securityGroups'), 'exclude': lambda f: f is None }})
    r"""The security groups the VM belongs to."""  
    source_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceDescription'), 'exclude': lambda f: f is None }})
    r"""The descriptive name of the AWS's source this VM is connected to."""  
    source_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceId'), 'exclude': lambda f: f is None }})
    r"""The id of the AWS's source this VM is connected to."""  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""The tags of the VM."""  
    virtualization_type: Optional[AwsVMDetailsVirtualizationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('virtualizationType'), 'exclude': lambda f: f is None }})
    r"""The virtualization type."""  
    vm_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vmId'), 'exclude': lambda f: f is None }})
    r"""The VM ID in AWS."""  
    vpc_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vpcId'), 'exclude': lambda f: f is None }})
    r"""The VPC ID the VM belongs to."""  
    zone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zone'), 'exclude': lambda f: f is None }})
    r"""The AWS zone of the VM."""  
    