<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Metals 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get historical benchmark prices for requested metals
     * 
     * Historical OHLC data for the specified period and interval size
     * 
     * The combination of the interval parameter and start and end dates can result in results
     * being truncated to conform to result size limits. See comments on interval parameter for details on valid interval values.
     * 
     * The historicalfx flag is used to determine whether to apply today's fx rates to a historical period, or to apply the historical rates from that same time frame.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MetalsBenchmarkHistoryGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MetalsBenchmarkHistoryGETResponse
     */
	public function metalsBenchmarkHistoryGET(
        \OpenAPI\OpenAPI\Models\Operations\MetalsBenchmarkHistoryGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MetalsBenchmarkHistoryGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/Metals/benchmark/history');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MetalsBenchmarkHistoryGETRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MetalsBenchmarkHistoryGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->intervalCollectionResponses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\IntervalCollectionResponse>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Get latest Benchmark prices for requested metals
     * 
     * Benchmark price information
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MetalsBenchmarkSummaryGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MetalsBenchmarkSummaryGETResponse
     */
	public function metalsBenchmarkSummaryGET(
        \OpenAPI\OpenAPI\Models\Operations\MetalsBenchmarkSummaryGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MetalsBenchmarkSummaryGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/Metals/benchmark/summary');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MetalsBenchmarkSummaryGETRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MetalsBenchmarkSummaryGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->summaryResponses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\SummaryResponse>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Get list of symbols supported by the benchmark endpoints
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MetalsBenchmarkSupportedMetalsGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MetalsBenchmarkSupportedMetalsGETResponse
     */
	public function metalsBenchmarkSupportedMetalsGET(
        \OpenAPI\OpenAPI\Models\Operations\MetalsBenchmarkSupportedMetalsGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MetalsBenchmarkSupportedMetalsGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/Metals/benchmark/supported');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MetalsBenchmarkSupportedMetalsGETRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MetalsBenchmarkSupportedMetalsGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->metalsBenchmarkSupportedMetalsGET200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Get Historical Annual Performance for requested metals
     * 
     * Annual Historical Performance information
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MetalsSpotAnnualHistoricalPerformanceGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MetalsSpotAnnualHistoricalPerformanceGETResponse
     */
	public function metalsSpotAnnualHistoricalPerformanceGET(
        \OpenAPI\OpenAPI\Models\Operations\MetalsSpotAnnualHistoricalPerformanceGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MetalsSpotAnnualHistoricalPerformanceGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/Metals/spot/performance/annual');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MetalsSpotAnnualHistoricalPerformanceGETRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MetalsSpotAnnualHistoricalPerformanceGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->intervalCollectionResponses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\IntervalCollectionResponse>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Get Historical Performance for requested metals
     * 
     * Historical Performance information
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MetalsSpotHistoricalPerformanceGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MetalsSpotHistoricalPerformanceGETResponse
     */
	public function metalsSpotHistoricalPerformanceGET(
        \OpenAPI\OpenAPI\Models\Operations\MetalsSpotHistoricalPerformanceGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MetalsSpotHistoricalPerformanceGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/Metals/spot/performance');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MetalsSpotHistoricalPerformanceGETRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MetalsSpotHistoricalPerformanceGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->intervalCollectionResponses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\IntervalCollectionResponse>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Get historical Spot prices for requested metals
     * 
     * Historical OHLC data for the specified period and interval size
     * 
     * The combination of the interval parameter and start and end dates can result in results
     * being truncated to conform to result size limits. See comments on interval parameter for details on valid interval values.
     * 
     * The historicalfx flag is used to determine whether to apply today's fx rates to a historical period, or to apply the historical rates from that same time frame.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MetalsSpotHistoryGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MetalsSpotHistoryGETResponse
     */
	public function metalsSpotHistoryGET(
        \OpenAPI\OpenAPI\Models\Operations\MetalsSpotHistoryGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MetalsSpotHistoryGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/Metals/spot/history');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MetalsSpotHistoryGETRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MetalsSpotHistoryGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->intervalCollectionResponses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\IntervalCollectionResponse>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Get historical Spot Ratio prices for requested metals
     * 
     * Historical data for the specified period and interval size
     * 
     * The combination of the interval parameter and start and end dates can result in results
     * being truncated to conform to result size limits. See comments on interval parameter for details on valid interval values.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MetalsSpotRatioHistoryGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MetalsSpotRatioHistoryGETResponse
     */
	public function metalsSpotRatioHistoryGET(
        \OpenAPI\OpenAPI\Models\Operations\MetalsSpotRatioHistoryGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MetalsSpotRatioHistoryGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/Metals/spot/ratio/history');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MetalsSpotRatioHistoryGETRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MetalsSpotRatioHistoryGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->intervalCollectionResponses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\IntervalCollectionResponse>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Get latest Spot Summary for requested metal ratios
     * 
     * Ratios between prices of two metals
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MetalsSpotRatioSummaryGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MetalsSpotRatioSummaryGETResponse
     */
	public function metalsSpotRatioSummaryGET(
        \OpenAPI\OpenAPI\Models\Operations\MetalsSpotRatioSummaryGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MetalsSpotRatioSummaryGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/Metals/spot/ratio/summary');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MetalsSpotRatioSummaryGETRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MetalsSpotRatioSummaryGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->summaryResponses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\SummaryResponse>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Get latest Spot Summary for requested metals
     * 
     * Current and daily summary information combined into a single quote
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MetalsSpotSummaryGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MetalsSpotSummaryGETResponse
     */
	public function metalsSpotSummaryGET(
        \OpenAPI\OpenAPI\Models\Operations\MetalsSpotSummaryGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MetalsSpotSummaryGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/Metals/spot/summary');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MetalsSpotSummaryGETRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MetalsSpotSummaryGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->summaryResponses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\SummaryResponse>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Get list of symbols supported by the spot endpoints
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MetalsSpotSupportedMetalsGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MetalsSpotSupportedMetalsGETResponse
     */
	public function metalsSpotSupportedMetalsGET(
        \OpenAPI\OpenAPI\Models\Operations\MetalsSpotSupportedMetalsGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MetalsSpotSupportedMetalsGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/Metals/spot/supported');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MetalsSpotSupportedMetalsGETRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MetalsSpotSupportedMetalsGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->metalsSpotSupportedMetalsGET200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Get list of currencies supported by metals endpoints for currency conversion
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MetalsSupportedCurrenciesMetalsGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MetalsSupportedCurrenciesMetalsGETResponse
     */
	public function metalsSupportedCurrenciesMetalsGET(
        \OpenAPI\OpenAPI\Models\Operations\MetalsSupportedCurrenciesMetalsGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MetalsSupportedCurrenciesMetalsGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/Metals/supported/currency');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MetalsSupportedCurrenciesMetalsGETRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MetalsSupportedCurrenciesMetalsGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->metalsSupportedCurrenciesMetalsGET200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
}