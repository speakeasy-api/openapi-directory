<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Jobs 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a job and returns it.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsCreateResponse
     */
	public function youtubereportingJobsCreate(
        \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/jobs');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "job", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->job = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Job', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsDeleteResponse
     */
	public function youtubereportingJobsDelete(
        \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/jobs/{jobId}', \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsGetResponse
     */
	public function youtubereportingJobsGet(
        \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/jobs/{jobId}', \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->job = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Job', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists jobs.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsListResponse
     */
	public function youtubereportingJobsList(
        \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/jobs');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listJobsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListJobsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the metadata of a specific report.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsReportsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsReportsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsReportsGetResponse
     */
	public function youtubereportingJobsReportsGet(
        \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsReportsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsReportsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsReportsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/jobs/{jobId}/reports/{reportId}', \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsReportsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsReportsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsReportsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->report = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Report', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists reports created by a specific job. Returns NOT_FOUND if the job does not exist.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsReportsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsReportsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsReportsListResponse
     */
	public function youtubereportingJobsReportsList(
        \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsReportsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsReportsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsReportsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/jobs/{jobId}/reports', \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsReportsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsReportsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\YoutubereportingJobsReportsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listReportsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListReportsResponse', 'json');
            }
        }

        return $response;
    }
}