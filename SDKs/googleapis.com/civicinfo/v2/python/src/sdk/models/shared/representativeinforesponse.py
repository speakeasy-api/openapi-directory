"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import geographicdivision as shared_geographicdivision
from ..shared import office as shared_office
from ..shared import official as shared_official
from ..shared import simpleaddresstype as shared_simpleaddresstype
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RepresentativeInfoResponse:
    r"""The result of a representative info lookup query."""
    
    divisions: Optional[dict[str, shared_geographicdivision.GeographicDivision]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('divisions'), 'exclude': lambda f: f is None }})
    r"""A map of political geographic divisions that contain the requested address, keyed by the unique Open Civic Data identifier for this division."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Identifies what kind of resource this is. Value: the fixed string \\"civicinfo#representativeInfoResponse\\"."""  
    normalized_input: Optional[shared_simpleaddresstype.SimpleAddressType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('normalizedInput'), 'exclude': lambda f: f is None }})
    r"""A simple representation of an address."""  
    offices: Optional[list[shared_office.Office]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offices'), 'exclude': lambda f: f is None }})
    r"""Elected offices referenced by the divisions listed above. Will only be present if includeOffices was true in the request."""  
    officials: Optional[list[shared_official.Official]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('officials'), 'exclude': lambda f: f is None }})
    r"""Officials holding the offices listed above. Will only be present if includeOffices was true in the request."""  
    