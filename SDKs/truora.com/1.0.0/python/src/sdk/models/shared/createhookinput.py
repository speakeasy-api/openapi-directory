"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from enum import Enum
from typing import Optional

class CreateHookInputEventTypeEnum(str, Enum):
    r"""The entity events the client wants to subscribe"""
    ALL = 'all'
    CHECK = 'check'
    CONTINUOUS_CHECK = 'continuous_check'

class CreateHookInputStatusEnum(str, Enum):
    r"""indicates whether the hook is active or not. enabled by default"""
    ENABLED = 'enabled'
    DISABLED = 'disabled'

class CreateHookInputSubscriberLanguageEnum(str, Enum):
    r"""Language for the notification to be sent"""
    AF = 'af'
    AR = 'ar'
    CA = 'ca'
    CS = 'cs'
    DA = 'da'
    DE = 'de'
    EL = 'el'
    EN = 'en'
    ES = 'es'
    FI = 'fi'
    FR = 'fr'
    HE = 'he'
    HI = 'hi'
    HR = 'hr'
    HU = 'hu'
    ID = 'id'
    IT = 'it'
    JA = 'ja'
    KO = 'ko'
    MS = 'ms'
    NB = 'nb'
    NL = 'nl'
    PL = 'pl'
    PT = 'pt'
    PR_BR = 'pr-BR'
    RO = 'ro'
    RU = 'ru'
    SV = 'sv'
    TH = 'th'
    TL = 'tl'
    TR = 'tr'
    VI = 'vi'
    ZH = 'zh'
    ZH_CN = 'zh-CN'
    ZH_HK = 'zh-HK'

class CreateHookInputSubscriberTypeEnum(str, Enum):
    r"""A platform with an endpoint ready to process the information"""
    WEB = 'web'
    EMAIL = 'email'


@dataclasses.dataclass
class CreateHookInput:
    r"""Creates a hook related to previous created check."""
    
    event_type: CreateHookInputEventTypeEnum = dataclasses.field(metadata={'form': { 'field_name': 'event_type' }})
    r"""The entity events the client wants to subscribe"""  
    subscriber_type: CreateHookInputSubscriberTypeEnum = dataclasses.field(metadata={'form': { 'field_name': 'subscriber_type' }})
    r"""A platform with an endpoint ready to process the information"""  
    actions: Optional[list[str]] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'actions' }})
    r"""Actions you want to be notified. Possible inputs are created, started, and finished or any combination of those three"""  
    status: Optional[CreateHookInputStatusEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'status' }})
    r"""indicates whether the hook is active or not. enabled by default"""  
    subscriber_address: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'subscriber_address' }})
    r"""Email address where the notification is to be sent. Required if subscriber_type was set to email"""  
    subscriber_language: Optional[CreateHookInputSubscriberLanguageEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'subscriber_language' }})
    r"""Language for the notification to be sent"""  
    subscriber_name: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'subscriber_name' }})
    r"""Name of the person to be notified"""  
    subscriber_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'subscriber_url' }})
    r"""URL where the notification is to be sent. Required only if subscriber_type is set to web"""  
    