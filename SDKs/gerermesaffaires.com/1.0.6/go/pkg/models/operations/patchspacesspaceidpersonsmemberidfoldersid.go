// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PatchSpacesSpaceIDPersonsMemberIDFoldersIDPathParams struct {
	// Id of the folder
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// memberId of the person
	MemberID string `pathParam:"style=simple,explode=false,name=memberId"`
	// Id of the space
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

type PatchSpacesSpaceIDPersonsMemberIDFoldersIDRequestBodyLevelEnum string

const (
	PatchSpacesSpaceIDPersonsMemberIDFoldersIDRequestBodyLevelEnumConfidential PatchSpacesSpaceIDPersonsMemberIDFoldersIDRequestBodyLevelEnum = "confidential"
	PatchSpacesSpaceIDPersonsMemberIDFoldersIDRequestBodyLevelEnumRegular      PatchSpacesSpaceIDPersonsMemberIDFoldersIDRequestBodyLevelEnum = "regular"
	PatchSpacesSpaceIDPersonsMemberIDFoldersIDRequestBodyLevelEnumPublic       PatchSpacesSpaceIDPersonsMemberIDFoldersIDRequestBodyLevelEnum = "public"
)

func (e *PatchSpacesSpaceIDPersonsMemberIDFoldersIDRequestBodyLevelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "confidential":
		fallthrough
	case "regular":
		fallthrough
	case "public":
		*e = PatchSpacesSpaceIDPersonsMemberIDFoldersIDRequestBodyLevelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchSpacesSpaceIDPersonsMemberIDFoldersIDRequestBodyLevelEnum: %s", s)
	}
}

type PatchSpacesSpaceIDPersonsMemberIDFoldersIDRequestBodyRightEnum string

const (
	PatchSpacesSpaceIDPersonsMemberIDFoldersIDRequestBodyRightEnumWrite PatchSpacesSpaceIDPersonsMemberIDFoldersIDRequestBodyRightEnum = "write"
	PatchSpacesSpaceIDPersonsMemberIDFoldersIDRequestBodyRightEnumRead  PatchSpacesSpaceIDPersonsMemberIDFoldersIDRequestBodyRightEnum = "read"
	PatchSpacesSpaceIDPersonsMemberIDFoldersIDRequestBodyRightEnumNone  PatchSpacesSpaceIDPersonsMemberIDFoldersIDRequestBodyRightEnum = "none"
)

func (e *PatchSpacesSpaceIDPersonsMemberIDFoldersIDRequestBodyRightEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "write":
		fallthrough
	case "read":
		fallthrough
	case "none":
		*e = PatchSpacesSpaceIDPersonsMemberIDFoldersIDRequestBodyRightEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchSpacesSpaceIDPersonsMemberIDFoldersIDRequestBodyRightEnum: %s", s)
	}
}

// PatchSpacesSpaceIDPersonsMemberIDFoldersIDRequestBody - Access to modify
type PatchSpacesSpaceIDPersonsMemberIDFoldersIDRequestBody struct {
	About    *string                                                         `json:"About,omitempty"`
	Home     *bool                                                           `json:"Home,omitempty"`
	Keywords []string                                                        `json:"Keywords,omitempty"`
	Level    *PatchSpacesSpaceIDPersonsMemberIDFoldersIDRequestBodyLevelEnum `json:"Level,omitempty"`
	Right    *PatchSpacesSpaceIDPersonsMemberIDFoldersIDRequestBodyRightEnum `json:"Right,omitempty"`
}

type PatchSpacesSpaceIDPersonsMemberIDFoldersIDRequest struct {
	PathParams PatchSpacesSpaceIDPersonsMemberIDFoldersIDPathParams
	// Access to modify
	Request PatchSpacesSpaceIDPersonsMemberIDFoldersIDRequestBody `request:"mediaType=application/json"`
}

type PatchSpacesSpaceIDPersonsMemberIDFoldersIDResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
