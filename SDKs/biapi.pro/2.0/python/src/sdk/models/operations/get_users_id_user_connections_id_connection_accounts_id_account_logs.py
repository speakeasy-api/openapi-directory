"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import accountlog as shared_accountlog
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetUsersIDUserConnectionsIDConnectionAccountsIDAccountLogsRequest:
    
    id_account: int = dataclasses.field(metadata={'path_param': { 'field_name': 'id_account', 'style': 'simple', 'explode': False }})  
    id_connection: int = dataclasses.field(metadata={'path_param': { 'field_name': 'id_connection', 'style': 'simple', 'explode': False }})  
    id_user: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id_user', 'style': 'simple', 'explode': False }})
    r"""Hint: you can use 'me' or 'all'"""  
    expand: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'expand', 'style': 'form', 'explode': True }})  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""limit number of results"""  
    max_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max_date', 'style': 'form', 'explode': True }})
    r"""maximum (inclusive) date"""  
    min_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'min_date', 'style': 'form', 'explode': True }})
    r"""minimal (inclusive) date"""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""offset of first result"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetUsersIDUserConnectionsIDConnectionAccountsIDAccountLogs200ApplicationJSON:
    r"""accountlogs"""
    
    accountlogs: list[shared_accountlog.AccountLog] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountlogs') }})  
    total: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total'), 'exclude': lambda f: f is None }})
    r"""total number of results"""  
    

@dataclasses.dataclass
class GetUsersIDUserConnectionsIDConnectionAccountsIDAccountLogsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_users_id_user_connections_id_connection_accounts_id_account_logs_200_application_json_object: Optional[GetUsersIDUserConnectionsIDConnectionAccountsIDAccountLogs200ApplicationJSON] = dataclasses.field(default=None)
    r"""accountlogs"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    