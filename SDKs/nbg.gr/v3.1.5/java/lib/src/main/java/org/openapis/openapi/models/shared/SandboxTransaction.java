/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * SandboxTransaction - Transaction information
 */
public class SandboxTransaction {
    /**
     * Balance
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountingBalance")
    public Double accountingBalance;

    public SandboxTransaction withAccountingBalance(Double accountingBalance) {
        this.accountingBalance = accountingBalance;
        return this;
    }
    
    /**
     * Amount
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    public Double amount;

    public SandboxTransaction withAmount(Double amount) {
        this.amount = amount;
        return this;
    }
    
    /**
     * Booking date time
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("bookingDateTime")
    public OffsetDateTime bookingDateTime;

    public SandboxTransaction withBookingDateTime(OffsetDateTime bookingDateTime) {
        this.bookingDateTime = bookingDateTime;
        return this;
    }
    
    /**
     * Credit / Debit indicator
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creditDebit")
    public String creditDebit;

    public SandboxTransaction withCreditDebit(String creditDebit) {
        this.creditDebit = creditDebit;
        return this;
    }
    
    /**
     * Currency (EUR, USD ...)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    public String currency;

    public SandboxTransaction withCurrency(String currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * Description
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public SandboxTransaction withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Transaction reference
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference")
    public String reference;

    public SandboxTransaction withReference(String reference) {
        this.reference = reference;
        return this;
    }
    
    /**
     * Related account
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("relatedAccount")
    public String relatedAccount;

    public SandboxTransaction withRelatedAccount(String relatedAccount) {
        this.relatedAccount = relatedAccount;
        return this;
    }
    
    /**
     * Related account
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("relatedName")
    public String relatedName;

    public SandboxTransaction withRelatedName(String relatedName) {
        this.relatedName = relatedName;
        return this;
    }
    
    /**
     * Transaction code
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transactionCode")
    public String transactionCode;

    public SandboxTransaction withTransactionCode(String transactionCode) {
        this.transactionCode = transactionCode;
        return this;
    }
    
    /**
     * Valeur
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("valueDateTime")
    public OffsetDateTime valueDateTime;

    public SandboxTransaction withValueDateTime(OffsetDateTime valueDateTime) {
        this.valueDateTime = valueDateTime;
        return this;
    }
    
    public SandboxTransaction(){}
}
