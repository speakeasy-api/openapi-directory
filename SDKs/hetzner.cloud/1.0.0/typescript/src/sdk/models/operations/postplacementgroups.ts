/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Define the Placement Group Type.
 */
export enum PostPlacementGroupsCreatePlacementGroupRequestTypeEnum {
  Spread = "spread",
}

export class PostPlacementGroupsCreatePlacementGroupRequest extends SpeakeasyBase {
  /**
   * User-defined labels (key-value pairs)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels?: Record<string, any>;

  /**
   * Name of the PlacementGroup
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Define the Placement Group Type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: PostPlacementGroupsCreatePlacementGroupRequestTypeEnum;
}

/**
 * Error message for the Action if error occurred, otherwise null
 */
export class PostPlacementGroupsCreatePlacementGroupResponseNullableActionError extends SpeakeasyBase {
  /**
   * Fixed machine readable code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: string;

  /**
   * Humanized error message
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

export class PostPlacementGroupsCreatePlacementGroupResponseNullableActionResources extends SpeakeasyBase {
  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Type of resource referenced
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;
}

/**
 * Status of the Action
 */
export enum PostPlacementGroupsCreatePlacementGroupResponseNullableActionStatusEnum {
  Success = "success",
  Running = "running",
  Error = "error",
}

export class PostPlacementGroupsCreatePlacementGroupResponseNullableAction extends SpeakeasyBase {
  /**
   * Command executed in the Action
   */
  @SpeakeasyMetadata()
  @Expose({ name: "command" })
  command: string;

  /**
   * Error message for the Action if error occurred, otherwise null
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  @Type(
    () => PostPlacementGroupsCreatePlacementGroupResponseNullableActionError
  )
  error: PostPlacementGroupsCreatePlacementGroupResponseNullableActionError;

  /**
   * Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "finished" })
  finished: string;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Progress of Action in percent
   */
  @SpeakeasyMetadata()
  @Expose({ name: "progress" })
  progress: number;

  /**
   * Resources the Action relates to
   */
  @SpeakeasyMetadata({
    elemType:
      PostPlacementGroupsCreatePlacementGroupResponseNullableActionResources,
  })
  @Expose({ name: "resources" })
  @Type(
    () => PostPlacementGroupsCreatePlacementGroupResponseNullableActionResources
  )
  resources: PostPlacementGroupsCreatePlacementGroupResponseNullableActionResources[];

  /**
   * Point in time when the Action was started (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "started" })
  started: string;

  /**
   * Status of the Action
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: PostPlacementGroupsCreatePlacementGroupResponseNullableActionStatusEnum;
}

/**
 * Type of the Placement Group
 */
export enum PostPlacementGroupsCreatePlacementGroupResponsePlacementGroupTypeEnum {
  Spread = "spread",
}

export class PostPlacementGroupsCreatePlacementGroupResponsePlacementGroup extends SpeakeasyBase {
  /**
   * Point in time when the Resource was created (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  created: string;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * User-defined labels (key-value pairs)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels: Record<string, string>;

  /**
   * Name of the Resource. Must be unique per Project.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Array of IDs of Servers that are part of this Placement Group
   */
  @SpeakeasyMetadata()
  @Expose({ name: "servers" })
  servers: number[];

  /**
   * Type of the Placement Group
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: PostPlacementGroupsCreatePlacementGroupResponsePlacementGroupTypeEnum;
}

/**
 * The `PlacementGroup` key contains the PlacementGroup that was just created.
 */
export class PostPlacementGroupsCreatePlacementGroupResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "action" })
  @Type(() => PostPlacementGroupsCreatePlacementGroupResponseNullableAction)
  action?: PostPlacementGroupsCreatePlacementGroupResponseNullableAction;

  @SpeakeasyMetadata()
  @Expose({ name: "placement_group" })
  @Type(() => PostPlacementGroupsCreatePlacementGroupResponsePlacementGroup)
  placementGroup: PostPlacementGroupsCreatePlacementGroupResponsePlacementGroup;
}

export class PostPlacementGroupsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * The `PlacementGroup` key contains the PlacementGroup that was just created.
   */
  @SpeakeasyMetadata()
  createPlacementGroupResponse?: PostPlacementGroupsCreatePlacementGroupResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
