/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CreditMemoTaxItemFromInvoiceTaxItemType } from "./creditmemotaxitemfrominvoicetaxitemtype";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Container for the finance information related to the credit memo item.
 *
 * @remarks
 *
 */
export class CreditMemoItemFromInvoiceItemTypeFinanceInformation extends SpeakeasyBase {
  /**
   * The accounting code for the deferred revenue, such as Monthly Recurring Liability.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deferredRevenueAccountingCode" })
  deferredRevenueAccountingCode?: string;

  /**
   * The accounting code that maps to an on account in your accounting system.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "onAccountAccountingCode" })
  onAccountAccountingCode?: string;

  /**
   * The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recognizedRevenueAccountingCode" })
  recognizedRevenueAccountingCode?: string;

  /**
   * The name of the revenue recognition rule governing the revenue schedule.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "revenueRecognitionRuleName" })
  revenueRecognitionRuleName?: string;
}

/**
 * The tax mode of the credit memo item, indicating whether the amount of the credit memo item includes tax.
 *
 * @remarks
 *
 * **Note**: You can set this field to `TaxInclusive` only if the `taxAutoCalculation` field is set to `true`.
 *
 * If you set `taxMode` to `TaxInclusive`, you cannot input tax amounts for credit memo items. The corresponding invoice item must use the same tax engine as the credit memo item to calculate tax amounts.
 *
 */
export enum CreditMemoItemFromInvoiceItemTypeTaxModeEnum {
  TaxExclusive = "TaxExclusive",
  TaxInclusive = "TaxInclusive",
}

/**
 * Container for custom fields of a Credit Memo Item object.
 *
 * @remarks
 *
 */
export class CreditMemoItemFromInvoiceItemType extends SpeakeasyBase {
  /**
   * The amount of the credit memo item.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  /**
   * Comments about the credit memo item.
   *
   * @remarks
   *
   * **Note**: This field is not available if you set the `zuora-version` request header to `257.0` or later.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "comment" })
  comment?: string;

  /**
   * The description of the credit memo item.
   *
   * @remarks
   *
   * **Note**: This field is only available if you set the `zuora-version` request header to `257.0` or later.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Container for the finance information related to the credit memo item.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "financeInformation" })
  @Type(() => CreditMemoItemFromInvoiceItemTypeFinanceInformation)
  financeInformation?: CreditMemoItemFromInvoiceItemTypeFinanceInformation;

  /**
   * The ID of the invoice item.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "invoiceItemId" })
  invoiceItemId?: string;

  /**
   * The number of units for the credit memo item.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "quantity" })
  quantity?: number;

  /**
   * The service end date of the credit memo item.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "serviceEndDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  serviceEndDate?: Date;

  /**
   * The service start date of the credit memo item.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "serviceStartDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  serviceStartDate?: Date;

  /**
   * The name of the charge associated with the invoice.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "skuName" })
  skuName: string;

  /**
   * Container for taxation items.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({ elemType: CreditMemoTaxItemFromInvoiceTaxItemType })
  @Expose({ name: "taxItems" })
  @Type(() => CreditMemoTaxItemFromInvoiceTaxItemType)
  taxItems?: CreditMemoTaxItemFromInvoiceTaxItemType[];

  /**
   * The tax mode of the credit memo item, indicating whether the amount of the credit memo item includes tax.
   *
   * @remarks
   *
   * **Note**: You can set this field to `TaxInclusive` only if the `taxAutoCalculation` field is set to `true`.
   *
   * If you set `taxMode` to `TaxInclusive`, you cannot input tax amounts for credit memo items. The corresponding invoice item must use the same tax engine as the credit memo item to calculate tax amounts.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "taxMode" })
  taxMode?: CreditMemoItemFromInvoiceItemTypeTaxModeEnum;

  /**
   * The definable unit that you measure when determining charges.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "unitOfMeasure" })
  unitOfMeasure?: string;
}
