<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Customers 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates multiple print servers.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersBatchCreatePrintServersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersBatchCreatePrintServersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersBatchCreatePrintServersResponse
     */
	public function adminCustomersChromePrintServersBatchCreatePrintServers(
        \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersBatchCreatePrintServersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersBatchCreatePrintServersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersBatchCreatePrintServersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/{parent}/chrome/printServers:batchCreatePrintServers', \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersBatchCreatePrintServersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "batchCreatePrintServersRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersBatchCreatePrintServersRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersBatchCreatePrintServersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchCreatePrintServersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchCreatePrintServersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes multiple print servers.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersBatchDeletePrintServersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersBatchDeletePrintServersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersBatchDeletePrintServersResponse
     */
	public function adminCustomersChromePrintServersBatchDeletePrintServers(
        \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersBatchDeletePrintServersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersBatchDeletePrintServersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersBatchDeletePrintServersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/{parent}/chrome/printServers:batchDeletePrintServers', \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersBatchDeletePrintServersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "batchDeletePrintServersRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersBatchDeletePrintServersRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersBatchDeletePrintServersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchDeletePrintServersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchDeletePrintServersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a print server.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersCreateResponse
     */
	public function adminCustomersChromePrintServersCreate(
        \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/{parent}/chrome/printServers', \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "printServerInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->printServer = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PrintServer', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a print server.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersDeleteResponse
     */
	public function adminCustomersChromePrintServersDelete(
        \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a print server's configuration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersGetResponse
     */
	public function adminCustomersChromePrintServersGet(
        \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->printServer = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PrintServer', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists print server configurations.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersListResponse
     */
	public function adminCustomersChromePrintServersList(
        \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/{parent}/chrome/printServers', \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listPrintServersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListPrintServersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a print server's configuration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersPatchResponse
     */
	public function adminCustomersChromePrintServersPatch(
        \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "printServerInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintServersPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->printServer = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PrintServer', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates printers under given Organization Unit.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersBatchCreatePrintersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersBatchCreatePrintersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersBatchCreatePrintersResponse
     */
	public function adminCustomersChromePrintersBatchCreatePrinters(
        \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersBatchCreatePrintersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersBatchCreatePrintersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersBatchCreatePrintersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/{parent}/chrome/printers:batchCreatePrinters', \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersBatchCreatePrintersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "batchCreatePrintersRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersBatchCreatePrintersRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersBatchCreatePrintersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchCreatePrintersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchCreatePrintersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes printers in batch.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersBatchDeletePrintersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersBatchDeletePrintersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersBatchDeletePrintersResponse
     */
	public function adminCustomersChromePrintersBatchDeletePrinters(
        \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersBatchDeletePrintersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersBatchDeletePrintersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersBatchDeletePrintersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/{parent}/chrome/printers:batchDeletePrinters', \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersBatchDeletePrintersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "batchDeletePrintersRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersBatchDeletePrintersRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersBatchDeletePrintersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchDeletePrintersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchDeletePrintersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a printer under given Organization Unit.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersCreateResponse
     */
	public function adminCustomersChromePrintersCreate(
        \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/{parent}/chrome/printers', \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "printerInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->printer = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Printer', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List printers configs.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersListResponse
     */
	public function adminCustomersChromePrintersList(
        \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/{parent}/chrome/printers', \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listPrintersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListPrintersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the supported printer models.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersListPrinterModelsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersListPrinterModelsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersListPrinterModelsResponse
     */
	public function adminCustomersChromePrintersListPrinterModels(
        \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersListPrinterModelsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersListPrinterModelsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersListPrinterModelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/{parent}/chrome/printers:listPrinterModels', \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersListPrinterModelsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersListPrinterModelsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdminCustomersChromePrintersListPrinterModelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listPrinterModelsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListPrinterModelsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a customer.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryCustomersGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryCustomersGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryCustomersGetResponse
     */
	public function directoryCustomersGet(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryCustomersGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryCustomersGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryCustomersGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/customers/{customerKey}', \OpenAPI\OpenAPI\Models\Operations\DirectoryCustomersGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryCustomersGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryCustomersGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customer = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Customer', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches a customer.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryCustomersPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryCustomersPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryCustomersPatchResponse
     */
	public function directoryCustomersPatch(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryCustomersPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryCustomersPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryCustomersPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/customers/{customerKey}', \OpenAPI\OpenAPI\Models\Operations\DirectoryCustomersPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "customer", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryCustomersPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryCustomersPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customer = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Customer', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a customer.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryCustomersUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryCustomersUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryCustomersUpdateResponse
     */
	public function directoryCustomersUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryCustomersUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryCustomersUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryCustomersUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/customers/{customerKey}', \OpenAPI\OpenAPI\Models\Operations\DirectoryCustomersUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "customer", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryCustomersUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryCustomersUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customer = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Customer', 'json');
            }
        }

        return $response;
    }
}