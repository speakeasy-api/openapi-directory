// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetSaveOntologyTagFormatEnum
type GetSaveOntologyTagFormatEnum string

const (
	GetSaveOntologyTagFormatEnumJSON GetSaveOntologyTagFormatEnum = "json"
	GetSaveOntologyTagFormatEnumXML  GetSaveOntologyTagFormatEnum = "xml"
	GetSaveOntologyTagFormatEnumHTML GetSaveOntologyTagFormatEnum = "html"
	GetSaveOntologyTagFormatEnumDump GetSaveOntologyTagFormatEnum = "dump"
	GetSaveOntologyTagFormatEnumJpg  GetSaveOntologyTagFormatEnum = "jpg"
	GetSaveOntologyTagFormatEnumPdf  GetSaveOntologyTagFormatEnum = "pdf"
)

func (e *GetSaveOntologyTagFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "json":
		fallthrough
	case "xml":
		fallthrough
	case "html":
		fallthrough
	case "dump":
		fallthrough
	case "jpg":
		fallthrough
	case "pdf":
		*e = GetSaveOntologyTagFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSaveOntologyTagFormatEnum: %s", s)
	}
}

type GetSaveOntologyTagRequest struct {
	// The authentication key
	Auth   string                        `queryParam:"style=form,explode=true,name=auth"`
	Format *GetSaveOntologyTagFormatEnum `queryParam:"style=form,explode=true,name=format"`
	// The pathway identifier
	PwID string `queryParam:"style=form,explode=true,name=pwId"`
	// The ontology term to apply
	Term string `queryParam:"style=form,explode=true,name=term"`
	// The identifier of the term in the ontology
	TermID string `queryParam:"style=form,explode=true,name=termId"`
	// The username
	User string `queryParam:"style=form,explode=true,name=user"`
}

type GetSaveOntologyTagResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
