// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ComponentClsEnum - Defines component class/type
type ComponentClsEnum string

const (
	ComponentClsEnumLabelComponent     ComponentClsEnum = "labelComponent"
	ComponentClsEnumNumberComponent    ComponentClsEnum = "numberComponent"
	ComponentClsEnumTextComponent      ComponentClsEnum = "textComponent"
	ComponentClsEnumImageComponent     ComponentClsEnum = "imageComponent"
	ComponentClsEnumDateComponent      ComponentClsEnum = "dateComponent"
	ComponentClsEnumHlineComponent     ComponentClsEnum = "hlineComponent"
	ComponentClsEnumVlineComponent     ComponentClsEnum = "vlineComponent"
	ComponentClsEnumTableComponent     ComponentClsEnum = "tableComponent"
	ComponentClsEnumCompositeComponent ComponentClsEnum = "compositeComponent"
	ComponentClsEnumBarcodeComponent   ComponentClsEnum = "barcodeComponent"
	ComponentClsEnumQrcodeComponent    ComponentClsEnum = "qrcodeComponent"
	ComponentClsEnumChartComponent     ComponentClsEnum = "chartComponent"
	ComponentClsEnumRectangleComponent ComponentClsEnum = "rectangleComponent"
	ComponentClsEnumHeaderComponent    ComponentClsEnum = "headerComponent"
	ComponentClsEnumFooterComponent    ComponentClsEnum = "footerComponent"
	ComponentClsEnumCheckboxComponent  ComponentClsEnum = "checkboxComponent"
	ComponentClsEnumRadioComponent     ComponentClsEnum = "radioComponent"
)

func (e *ComponentClsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "labelComponent":
		fallthrough
	case "numberComponent":
		fallthrough
	case "textComponent":
		fallthrough
	case "imageComponent":
		fallthrough
	case "dateComponent":
		fallthrough
	case "hlineComponent":
		fallthrough
	case "vlineComponent":
		fallthrough
	case "tableComponent":
		fallthrough
	case "compositeComponent":
		fallthrough
	case "barcodeComponent":
		fallthrough
	case "qrcodeComponent":
		fallthrough
	case "chartComponent":
		fallthrough
	case "rectangleComponent":
		fallthrough
	case "headerComponent":
		fallthrough
	case "footerComponent":
		fallthrough
	case "checkboxComponent":
		fallthrough
	case "radioComponent":
		*e = ComponentClsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ComponentClsEnum: %s", s)
	}
}

// Component - Template component definition
type Component struct {
	// Defines component class/type
	Cls *ComponentClsEnum `json:"cls,omitempty"`
	// Defines data field for Table and Container components which are used to iterate over list of items
	DataIndex *string `json:"dataIndex,omitempty"`
	// Height in units
	Height *float64 `json:"height,omitempty"`
	// Component id
	ID *string `json:"id,omitempty"`
	// Position from the page left in units
	Left *float64 `json:"left,omitempty"`
	// Position from the page top in units
	Top *float64 `json:"top,omitempty"`
	// Component value
	Value *string `json:"value,omitempty"`
	// Width in units
	Width *float64 `json:"width,omitempty"`
	// Defines the rendering order on page. Components with smaller zindex are rendered before
	Zindex *int64 `json:"zindex,omitempty"`
}
