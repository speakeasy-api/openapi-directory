// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// NodeStatusEnumEnum - Node status.
type NodeStatusEnumEnum string

const (
	NodeStatusEnumEnumUnknown        NodeStatusEnumEnum = "UNKNOWN"
	NodeStatusEnumEnumOk             NodeStatusEnumEnum = "OK"
	NodeStatusEnumEnumBad            NodeStatusEnumEnum = "BAD"
	NodeStatusEnumEnumPreMaintenance NodeStatusEnumEnum = "PRE_MAINTENANCE"
	NodeStatusEnumEnumMaintenance    NodeStatusEnumEnum = "MAINTENANCE"
	NodeStatusEnumEnumBootstrapping  NodeStatusEnumEnum = "BOOTSTRAPPING"
	NodeStatusEnumEnumUpgrade        NodeStatusEnumEnum = "UPGRADE"
	NodeStatusEnumEnumRemoved        NodeStatusEnumEnum = "REMOVED"
)

func (e NodeStatusEnumEnum) ToPointer() *NodeStatusEnumEnum {
	return &e
}

func (e *NodeStatusEnumEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "OK":
		fallthrough
	case "BAD":
		fallthrough
	case "PRE_MAINTENANCE":
		fallthrough
	case "MAINTENANCE":
		fallthrough
	case "BOOTSTRAPPING":
		fallthrough
	case "UPGRADE":
		fallthrough
	case "REMOVED":
		*e = NodeStatusEnumEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NodeStatusEnumEnum: %v", v)
	}
}
