<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - PDF Blocks is a secure, reliable, and fast API to work with PDF documents. Actions include: Merge PDF documents, add or remove passwords, add watermarks, remove, extract, reverse, and rotate pages, and more.
 * 
 * https://www.pdfblocks.com/docs/api/v1 - Documentation and examples
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 * @see https://www.pdfblocks.com/docs/api/v1
 */
class SDK
{
	public const SERVERS = [
        /** Global endpoint (default). */
		'https://api.pdfblocks.com',
        /** European-only endpoint. */
		'https://eu.api.pdfblocks.com',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	private ?Models\Shared\Security $_security;
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client	 
	 * @param Models\Shared\Security|null $security
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, ?Models\Shared\Security $security, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($security !== null) {
			$this->_security = $security;
			$this->_securityClient = Utils\Utils::configureSecurityClient($this->_defaultClient, $this->_security);
		}
		
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * Add an image watermark to a PDF
     * 
     * Add an image watermark to each page of a PDF document.
     * https://www.pdfblocks.com/docs/api/v1/add-watermark-image - Documentation and examples
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddImageWatermarkV1RequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AddImageWatermarkV1Response
     * @see https://www.pdfblocks.com/docs/api/v1/add-watermark-image
     */
	public function addImageWatermarkV1(
        \OpenAPI\OpenAPI\Models\Operations\AddImageWatermarkV1RequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AddImageWatermarkV1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/add_watermark/image');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddImageWatermarkV1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/pdf')) {
                $response->addImageWatermarkV1200ApplicationPdfBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else if (($httpResponse->getStatusCode() >= 400 && $httpResponse->getStatusCode() < 500)) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->addImageWatermarkV14XXApplicationProblemPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AddImageWatermarkV14XXApplicationProblemPlusJson', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a password to a PDF
     * 
     * Protect a PDF document with a password. Encrypt the PDF document to prevent unauthorized access.
     * https://www.pdfblocks.com/docs/api/v1/add-password - Documentation and examples
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddPasswordV1RequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AddPasswordV1Response
     * @see https://www.pdfblocks.com/docs/api/v1/add-password
     */
	public function addPasswordV1(
        \OpenAPI\OpenAPI\Models\Operations\AddPasswordV1RequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AddPasswordV1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/add_password');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddPasswordV1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/pdf')) {
                $response->addPasswordV1200ApplicationPdfBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else if (($httpResponse->getStatusCode() >= 400 && $httpResponse->getStatusCode() < 500)) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->addPasswordV14XXApplicationProblemPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AddPasswordV14XXApplicationProblemPlusJson', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add restrictions to a PDF
     * 
     * Add restrictions to prevent copying, printing, and modifying a PDF document.
     * https://www.pdfblocks.com/docs/api/v1/add-restrictions - Documentation and examples
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddRestrictionsV1RequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AddRestrictionsV1Response
     * @see https://www.pdfblocks.com/docs/api/v1/add-restrictions
     */
	public function addRestrictionsV1(
        \OpenAPI\OpenAPI\Models\Operations\AddRestrictionsV1RequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AddRestrictionsV1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/add_restrictions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddRestrictionsV1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/pdf')) {
                $response->addRestrictionsV1200ApplicationPdfBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else if (($httpResponse->getStatusCode() >= 400 && $httpResponse->getStatusCode() < 500)) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->addRestrictionsV14XXApplicationProblemPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AddRestrictionsV14XXApplicationProblemPlusJson', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a text watermark to a PDF
     * 
     * Add a text watermark to each page of a PDF document. Choose from several watermark templates.
     * https://www.pdfblocks.com/docs/api/v1/add-watermark-text - Documentation and examples
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddTextWatermarkV1RequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AddTextWatermarkV1Response
     * @see https://www.pdfblocks.com/docs/api/v1/add-watermark-text
     */
	public function addTextWatermarkV1(
        \OpenAPI\OpenAPI\Models\Operations\AddTextWatermarkV1RequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AddTextWatermarkV1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/add_watermark/text');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddTextWatermarkV1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/pdf')) {
                $response->addTextWatermarkV1200ApplicationPdfBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else if (($httpResponse->getStatusCode() >= 400 && $httpResponse->getStatusCode() < 500)) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->addTextWatermarkV14XXApplicationProblemPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AddTextWatermarkV14XXApplicationProblemPlusJson', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Extract pages from a PDF
     * 
     * Extract one or more pages from a PDF document.
     * https://www.pdfblocks.com/docs/api/v1/extract-pages - Documentation and examples
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ExtractPagesV1RequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ExtractPagesV1Response
     * @see https://www.pdfblocks.com/docs/api/v1/extract-pages
     */
	public function extractPagesV1(
        \OpenAPI\OpenAPI\Models\Operations\ExtractPagesV1RequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ExtractPagesV1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/extract_pages');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExtractPagesV1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/pdf')) {
                $response->extractPagesV1200ApplicationPdfBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else if (($httpResponse->getStatusCode() >= 400 && $httpResponse->getStatusCode() < 500)) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->extractPagesV14XXApplicationProblemPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ExtractPagesV14XXApplicationProblemPlusJson', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Merge PDF documents
     * 
     * Combine multiple PDF documents into a single PDF document.
     * https://www.pdfblocks.com/docs/api/v1/merge-documents - Documentation and examples
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MergeDocumentsV1RequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MergeDocumentsV1Response
     * @see https://www.pdfblocks.com/docs/api/v1/merge-documents
     */
	public function mergeDocumentsV1(
        \OpenAPI\OpenAPI\Models\Operations\MergeDocumentsV1RequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MergeDocumentsV1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/merge_documents');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MergeDocumentsV1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/pdf')) {
                $response->mergeDocumentsV1200ApplicationPdfBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else if (($httpResponse->getStatusCode() >= 400 && $httpResponse->getStatusCode() < 500)) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->mergeDocumentsV14XXApplicationProblemPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\MergeDocumentsV14XXApplicationProblemPlusJson', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove pages from a PDF
     * 
     * Remove one or more pages from a PDF document.
     * https://www.pdfblocks.com/docs/api/v1/remove-pages - Documentation and examples
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemovePagesV1RequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RemovePagesV1Response
     * @see https://www.pdfblocks.com/docs/api/v1/remove-pages
     */
	public function removePagesV1(
        \OpenAPI\OpenAPI\Models\Operations\RemovePagesV1RequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RemovePagesV1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/remove_pages');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemovePagesV1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/pdf')) {
                $response->removePagesV1200ApplicationPdfBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else if (($httpResponse->getStatusCode() >= 400 && $httpResponse->getStatusCode() < 500)) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->removePagesV14XXApplicationProblemPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RemovePagesV14XXApplicationProblemPlusJson', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove the password from a PDF
     * 
     * Remove the password from an encrypted PDF document. The PDF document will no longer require a password to open.
     * https://www.pdfblocks.com/docs/api/v1/remove-password - Documentation and examples
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemovePasswordV1RequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RemovePasswordV1Response
     * @see https://www.pdfblocks.com/docs/api/v1/remove-password
     */
	public function removePasswordV1(
        \OpenAPI\OpenAPI\Models\Operations\RemovePasswordV1RequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RemovePasswordV1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/remove_password');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemovePasswordV1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/pdf')) {
                $response->removePasswordV1200ApplicationPdfBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else if (($httpResponse->getStatusCode() >= 400 && $httpResponse->getStatusCode() < 500)) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->removePasswordV14XXApplicationProblemPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RemovePasswordV14XXApplicationProblemPlusJson', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove the restrictions from a PDF
     * 
     * Remove all the restrictions from a PDF document.
     * https://www.pdfblocks.com/docs/api/v1/remove-restrictions - Documentation and examples
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveRestrictionsV1RequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RemoveRestrictionsV1Response
     * @see https://www.pdfblocks.com/docs/api/v1/remove-restrictions
     */
	public function removeRestrictionsV1(
        \OpenAPI\OpenAPI\Models\Operations\RemoveRestrictionsV1RequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RemoveRestrictionsV1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/remove_restrictions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemoveRestrictionsV1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/pdf')) {
                $response->removeRestrictionsV1200ApplicationPdfBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else if (($httpResponse->getStatusCode() >= 400 && $httpResponse->getStatusCode() < 500)) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->removeRestrictionsV14XXApplicationProblemPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RemoveRestrictionsV14XXApplicationProblemPlusJson', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove the signatures from a PDF
     * 
     * Remove the cryptographic signatures and timestamps from a PDF document.
     * https://www.pdfblocks.com/docs/api/v1/remove-signatures - Documentation and examples
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveSignaturesV1RequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RemoveSignaturesV1Response
     * @see https://www.pdfblocks.com/docs/api/v1/remove-signatures
     */
	public function removeSignaturesV1(
        \OpenAPI\OpenAPI\Models\Operations\RemoveSignaturesV1RequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RemoveSignaturesV1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/remove_signatures');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemoveSignaturesV1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/pdf')) {
                $response->removeSignaturesV1200ApplicationPdfBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else if (($httpResponse->getStatusCode() >= 400 && $httpResponse->getStatusCode() < 500)) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->removeSignaturesV14XXApplicationProblemPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RemoveSignaturesV14XXApplicationProblemPlusJson', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Reverse the pages of a PDF
     * 
     * Reverse the order of the pages of a PDF document.
     * https://www.pdfblocks.com/docs/api/v1/reverse-pages - Documentation and examples
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReversePagesV1RequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReversePagesV1Response
     * @see https://www.pdfblocks.com/docs/api/v1/reverse-pages
     */
	public function reversePagesV1(
        \OpenAPI\OpenAPI\Models\Operations\ReversePagesV1RequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReversePagesV1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/reverse_pages');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReversePagesV1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/pdf')) {
                $response->reversePagesV1200ApplicationPdfBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else if (($httpResponse->getStatusCode() >= 400 && $httpResponse->getStatusCode() < 500)) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reversePagesV14XXApplicationProblemPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReversePagesV14XXApplicationProblemPlusJson', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Rotate pages in a PDF
     * 
     * Rotate one or more pages in a PDF document.
     * https://www.pdfblocks.com/docs/api/v1/rotate-pages - Documentation and examples
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RotatePagesV1RequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RotatePagesV1Response
     * @see https://www.pdfblocks.com/docs/api/v1/rotate-pages
     */
	public function rotatePagesV1(
        \OpenAPI\OpenAPI\Models\Operations\RotatePagesV1RequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RotatePagesV1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/rotate_pages');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RotatePagesV1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/pdf')) {
                $response->rotatePagesV1200ApplicationPdfBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else if (($httpResponse->getStatusCode() >= 400 && $httpResponse->getStatusCode() < 500)) {
            if (Utils\Utils::matchContentType($contentType, 'application/problem+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rotatePagesV14XXApplicationProblemPlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RotatePagesV14XXApplicationProblemPlusJson', 'json');
            }
        }

        return $response;
    }
}