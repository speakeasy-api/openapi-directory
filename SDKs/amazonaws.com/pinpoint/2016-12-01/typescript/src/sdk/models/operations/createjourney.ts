/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Specifies the configuration and other settings for a journey.
 */
export class CreateJourneyRequestBodyWriteJourneyRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: shared.Activity })
  @Expose({ name: "Activities" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, shared.Activity> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], shared.Activity);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  activities?: Record<string, shared.Activity>;

  @SpeakeasyMetadata()
  @Expose({ name: "ClosedDays" })
  @Type(() => shared.ClosedDays)
  closedDays?: shared.ClosedDays;

  @SpeakeasyMetadata()
  @Expose({ name: "CreationDate" })
  creationDate?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "JourneyChannelSettings" })
  @Type(() => shared.JourneyChannelSettings)
  journeyChannelSettings?: shared.JourneyChannelSettings;

  @SpeakeasyMetadata()
  @Expose({ name: "LastModifiedDate" })
  lastModifiedDate?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Limits" })
  @Type(() => shared.JourneyLimits)
  limits?: shared.JourneyLimits;

  @SpeakeasyMetadata()
  @Expose({ name: "LocalTime" })
  localTime?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "OpenHours" })
  @Type(() => shared.OpenHours)
  openHours?: shared.OpenHours;

  @SpeakeasyMetadata()
  @Expose({ name: "QuietTime" })
  @Type(() => shared.QuietTime)
  quietTime?: shared.QuietTime;

  @SpeakeasyMetadata()
  @Expose({ name: "RefreshFrequency" })
  refreshFrequency?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "RefreshOnSegmentUpdate" })
  refreshOnSegmentUpdate?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "Schedule" })
  @Type(() => shared.JourneySchedule)
  schedule?: shared.JourneySchedule;

  @SpeakeasyMetadata()
  @Expose({ name: "SendingSchedule" })
  sendingSchedule?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "StartActivity" })
  startActivity?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "StartCondition" })
  @Type(() => shared.StartCondition)
  startCondition?: shared.StartCondition;

  @SpeakeasyMetadata()
  @Expose({ name: "State" })
  state?: shared.StateEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "WaitForQuietTime" })
  waitForQuietTime?: boolean;
}

export class CreateJourneyRequestBody extends SpeakeasyBase {
  /**
   * Specifies the configuration and other settings for a journey.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "WriteJourneyRequest" })
  @Type(() => CreateJourneyRequestBodyWriteJourneyRequest)
  writeJourneyRequest: CreateJourneyRequestBodyWriteJourneyRequest;
}

export class CreateJourneyRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateJourneyRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=application-id",
  })
  applicationId: string;
}

export class CreateJourneyResponse extends SpeakeasyBase {
  /**
   * BadRequestException
   */
  @SpeakeasyMetadata()
  badRequestException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createJourneyResponse?: shared.CreateJourneyResponse;

  /**
   * ForbiddenException
   */
  @SpeakeasyMetadata()
  forbiddenException?: any;

  /**
   * InternalServerErrorException
   */
  @SpeakeasyMetadata()
  internalServerErrorException?: any;

  /**
   * MethodNotAllowedException
   */
  @SpeakeasyMetadata()
  methodNotAllowedException?: any;

  /**
   * NotFoundException
   */
  @SpeakeasyMetadata()
  notFoundException?: any;

  /**
   * PayloadTooLargeException
   */
  @SpeakeasyMetadata()
  payloadTooLargeException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * TooManyRequestsException
   */
  @SpeakeasyMetadata()
  tooManyRequestsException?: any;
}
