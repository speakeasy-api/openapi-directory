"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import slashcommandmetadata as shared_slashcommandmetadata
from ..shared import usermentionmetadata as shared_usermentionmetadata
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class AnnotationTypeEnum(str, Enum):
    r"""The type of this annotation."""
    ANNOTATION_TYPE_UNSPECIFIED = 'ANNOTATION_TYPE_UNSPECIFIED'
    USER_MENTION = 'USER_MENTION'
    SLASH_COMMAND = 'SLASH_COMMAND'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Annotation:
    r"""Annotations associated with the plain-text body of the message. Example plain-text message body: ``` Hello @FooBot how are you!\\" ``` The corresponding annotations metadata: ``` \\"annotations\\":[{ \\"type\\":\\"USER_MENTION\\", \\"startIndex\\":6, \\"length\\":7, \\"userMention\\": { \\"user\\": { \\"name\\":\\"users/{user}\\", \\"displayName\\":\\"FooBot\\", \\"avatarUrl\\":\\"https://goo.gl/aeDtrS\\", \\"type\\":\\"BOT\\" }, \\"type\\":\\"MENTION\\" } }] ```"""
    
    length: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('length'), 'exclude': lambda f: f is None }})
    r"""Length of the substring in the plain-text message body this annotation corresponds to."""  
    slash_command: Optional[shared_slashcommandmetadata.SlashCommandMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slashCommand'), 'exclude': lambda f: f is None }})
    r"""Annotation metadata for slash commands (/)."""  
    start_index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startIndex'), 'exclude': lambda f: f is None }})
    r"""Start index (0-based, inclusive) in the plain-text message body this annotation corresponds to."""  
    type: Optional[AnnotationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of this annotation."""  
    user_mention: Optional[shared_usermentionmetadata.UserMentionMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userMention'), 'exclude': lambda f: f is None }})
    r"""Annotation metadata for user mentions (@)."""  
    