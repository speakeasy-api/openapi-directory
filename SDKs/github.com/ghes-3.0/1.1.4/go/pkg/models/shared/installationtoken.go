// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type InstallationTokenRepositorySelectionEnum string

const (
	InstallationTokenRepositorySelectionEnumAll      InstallationTokenRepositorySelectionEnum = "all"
	InstallationTokenRepositorySelectionEnumSelected InstallationTokenRepositorySelectionEnum = "selected"
)

func (e InstallationTokenRepositorySelectionEnum) ToPointer() *InstallationTokenRepositorySelectionEnum {
	return &e
}

func (e *InstallationTokenRepositorySelectionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "selected":
		*e = InstallationTokenRepositorySelectionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InstallationTokenRepositorySelectionEnum: %v", v)
	}
}

// InstallationToken - Authentication token for a GitHub App installed on a user or org.
type InstallationToken struct {
	ExpiresAt              string `json:"expires_at"`
	HasMultipleSingleFiles *bool  `json:"has_multiple_single_files,omitempty"`
	// The permissions granted to the user-to-server access token.
	Permissions         *AppPermissions                           `json:"permissions,omitempty"`
	Repositories        []Repository                              `json:"repositories,omitempty"`
	RepositorySelection *InstallationTokenRepositorySelectionEnum `json:"repository_selection,omitempty"`
	SingleFile          *string                                   `json:"single_file,omitempty"`
	SingleFilePaths     []string                                  `json:"single_file_paths,omitempty"`
	Token               string                                    `json:"token"`
}
