"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Chargers:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def control_charger_charging(self, request: operations.ControlChargerChargingRequest, security: operations.ControlChargerChargingSecurity) -> operations.ControlChargerChargingResponse:
        r"""Control Charging
        Instruct the charger to start or stop charging
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ControlChargerChargingRequest, base_url, '/chargers/{chargerId}/charging', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ControlChargerChargingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_charger(self, request: operations.GetChargerRequest, security: operations.GetChargerSecurity) -> operations.GetChargerResponse:
        r"""Get Charger"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetChargerRequest, base_url, '/chargers/{chargerId}', request)
        
        query_params = utils.get_query_params(operations.GetChargerRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetChargerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetCharger200ApplicationJSON])
                res.get_charger_200_application_json_object = out

        return res

    def get_chargers(self, request: operations.GetChargersRequest, security: operations.GetChargersSecurity) -> operations.GetChargersResponse:
        r"""List Chargers"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/chargers'
        
        query_params = utils.get_query_params(operations.GetChargersRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetChargersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Onechargers1Percent7BchargerIDPercent7DGetResponses200ContentApplication1jsonSchema]])
                res.onechargers_1_percent_7_bcharger_id_percent_7_d_get_responses_200_content_application_1json_schemas = out

        return res

    