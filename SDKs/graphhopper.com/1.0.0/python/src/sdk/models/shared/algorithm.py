"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class AlgorithmObjectiveEnum(str, Enum):
    TRANSPORT_TIME = 'transport_time'
    COMPLETION_TIME = 'completion_time'

class AlgorithmProblemTypeEnum(str, Enum):
    MIN = 'min'
    MIN_MAX = 'min-max'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Algorithm:
    r"""Use `objectives` instead."""
    
    objective: Optional[AlgorithmObjectiveEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('objective'), 'exclude': lambda f: f is None }})  
    problem_type: Optional[AlgorithmProblemTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('problem_type'), 'exclude': lambda f: f is None }})  
    