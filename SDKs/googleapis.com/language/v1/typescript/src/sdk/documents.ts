/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Documents {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Finds named entities (currently proper names and common nouns) in the text along with entity types, salience, mentions for each entity, and other properties.
   */
  languageDocumentsAnalyzeEntities(
    req: operations.LanguageDocumentsAnalyzeEntitiesRequest,
    security: operations.LanguageDocumentsAnalyzeEntitiesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.LanguageDocumentsAnalyzeEntitiesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LanguageDocumentsAnalyzeEntitiesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v1/documents:analyzeEntities";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "analyzeEntitiesRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.LanguageDocumentsAnalyzeEntitiesSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LanguageDocumentsAnalyzeEntitiesResponse =
        new operations.LanguageDocumentsAnalyzeEntitiesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.analyzeEntitiesResponse = utils.objectToClass(
              httpRes?.data,
              shared.AnalyzeEntitiesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Finds entities, similar to AnalyzeEntities in the text and analyzes sentiment associated with each entity and its mentions.
   */
  languageDocumentsAnalyzeEntitySentiment(
    req: operations.LanguageDocumentsAnalyzeEntitySentimentRequest,
    security: operations.LanguageDocumentsAnalyzeEntitySentimentSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.LanguageDocumentsAnalyzeEntitySentimentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LanguageDocumentsAnalyzeEntitySentimentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v1/documents:analyzeEntitySentiment";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "analyzeEntitySentimentRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.LanguageDocumentsAnalyzeEntitySentimentSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LanguageDocumentsAnalyzeEntitySentimentResponse =
        new operations.LanguageDocumentsAnalyzeEntitySentimentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.analyzeEntitySentimentResponse = utils.objectToClass(
              httpRes?.data,
              shared.AnalyzeEntitySentimentResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Analyzes the sentiment of the provided text.
   */
  languageDocumentsAnalyzeSentiment(
    req: operations.LanguageDocumentsAnalyzeSentimentRequest,
    security: operations.LanguageDocumentsAnalyzeSentimentSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.LanguageDocumentsAnalyzeSentimentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LanguageDocumentsAnalyzeSentimentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v1/documents:analyzeSentiment";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "analyzeSentimentRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.LanguageDocumentsAnalyzeSentimentSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LanguageDocumentsAnalyzeSentimentResponse =
        new operations.LanguageDocumentsAnalyzeSentimentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.analyzeSentimentResponse = utils.objectToClass(
              httpRes?.data,
              shared.AnalyzeSentimentResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Analyzes the syntax of the text and provides sentence boundaries and tokenization along with part of speech tags, dependency trees, and other properties.
   */
  languageDocumentsAnalyzeSyntax(
    req: operations.LanguageDocumentsAnalyzeSyntaxRequest,
    security: operations.LanguageDocumentsAnalyzeSyntaxSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.LanguageDocumentsAnalyzeSyntaxResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LanguageDocumentsAnalyzeSyntaxRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v1/documents:analyzeSyntax";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "analyzeSyntaxRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.LanguageDocumentsAnalyzeSyntaxSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LanguageDocumentsAnalyzeSyntaxResponse =
        new operations.LanguageDocumentsAnalyzeSyntaxResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.analyzeSyntaxResponse = utils.objectToClass(
              httpRes?.data,
              shared.AnalyzeSyntaxResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * A convenience method that provides all the features that analyzeSentiment, analyzeEntities, and analyzeSyntax provide in one call.
   */
  languageDocumentsAnnotateText(
    req: operations.LanguageDocumentsAnnotateTextRequest,
    security: operations.LanguageDocumentsAnnotateTextSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.LanguageDocumentsAnnotateTextResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LanguageDocumentsAnnotateTextRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v1/documents:annotateText";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "annotateTextRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.LanguageDocumentsAnnotateTextSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LanguageDocumentsAnnotateTextResponse =
        new operations.LanguageDocumentsAnnotateTextResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.annotateTextResponse = utils.objectToClass(
              httpRes?.data,
              shared.AnnotateTextResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Classifies a document into categories.
   */
  languageDocumentsClassifyText(
    req: operations.LanguageDocumentsClassifyTextRequest,
    security: operations.LanguageDocumentsClassifyTextSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.LanguageDocumentsClassifyTextResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LanguageDocumentsClassifyTextRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v1/documents:classifyText";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "classifyTextRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.LanguageDocumentsClassifyTextSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LanguageDocumentsClassifyTextResponse =
        new operations.LanguageDocumentsClassifyTextResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.classifyTextResponse = utils.objectToClass(
              httpRes?.data,
              shared.ClassifyTextResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
