/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * DataSourceTable - A data source table, which allows the user to import a static table of data from the DataSource into Sheets. This is also known as "Extract" in the Sheets editor.
 */
public class DataSourceTable {
    /**
     * The type to select columns for the data source table. Defaults to SELECTED.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("columnSelectionType")
    public DataSourceTableColumnSelectionTypeEnum columnSelectionType;
    public DataSourceTable withColumnSelectionType(DataSourceTableColumnSelectionTypeEnum columnSelectionType) {
        this.columnSelectionType = columnSelectionType;
        return this;
    }
    
    /**
     * Columns selected for the data source table. The column_selection_type must be SELECTED.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("columns")
    public DataSourceColumnReference[] columns;
    public DataSourceTable withColumns(DataSourceColumnReference[] columns) {
        this.columns = columns;
        return this;
    }
    
    /**
     * The data execution status. A data execution is created to sync a data source object with the latest data from a DataSource. It is usually scheduled to run at background, you can check its state to tell if an execution completes There are several scenarios where a data execution is triggered to run: * Adding a data source creates an associated data source sheet as well as a data execution to sync the data from the data source to the sheet. * Updating a data source creates a data execution to refresh the associated data source sheet similarly. * You can send refresh request to explicitly refresh one or multiple data source objects.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataExecutionStatus")
    public DataExecutionStatus dataExecutionStatus;
    public DataSourceTable withDataExecutionStatus(DataExecutionStatus dataExecutionStatus) {
        this.dataExecutionStatus = dataExecutionStatus;
        return this;
    }
    
    /**
     * The ID of the data source the data source table is associated with.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataSourceId")
    public String dataSourceId;
    public DataSourceTable withDataSourceId(String dataSourceId) {
        this.dataSourceId = dataSourceId;
        return this;
    }
    
    /**
     * Filter specifications in the data source table.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filterSpecs")
    public FilterSpec[] filterSpecs;
    public DataSourceTable withFilterSpecs(FilterSpec[] filterSpecs) {
        this.filterSpecs = filterSpecs;
        return this;
    }
    
    /**
     * The limit of rows to return. If not set, a default limit is applied. Please refer to the Sheets editor for the default and max limit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rowLimit")
    public Integer rowLimit;
    public DataSourceTable withRowLimit(Integer rowLimit) {
        this.rowLimit = rowLimit;
        return this;
    }
    
    /**
     * Sort specifications in the data source table. The result of the data source table is sorted based on the sort specifications in order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sortSpecs")
    public SortSpec[] sortSpecs;
    public DataSourceTable withSortSpecs(SortSpec[] sortSpecs) {
        this.sortSpecs = sortSpecs;
        return this;
    }
    
}
