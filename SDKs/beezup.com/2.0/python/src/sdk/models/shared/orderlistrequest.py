"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import datesearchtype_enum as shared_datesearchtype_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OrderListRequest:
    
    begin_period_utc_date: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beginPeriodUtcDate'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The begin period you want to make the search. \ 
    The period MUST not be greater than 62 days.
    The begin period MUST be lower than the end period.
    """  
    end_period_utc_date: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endPeriodUtcDate'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The end period of you search. \ 
    The period MUST not be greater than 62 days. \
    The end period MUST be greater than the begin period.
    The end period MUST be lower to the current date.
    """  
    page_number: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pageNumber') }})
    r"""Indicates the page number"""  
    page_size: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pageSize') }})
    r"""Indicate the order count per page"""  
    account_ids: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountIds'), 'exclude': lambda f: f is None }})
    r"""Account Id list"""  
    beez_up_order_statuses: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beezUPOrderStatuses'), 'exclude': lambda f: f is None }})  
    date_search_type: Optional[shared_datesearchtype_enum.DateSearchTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateSearchType'), 'exclude': lambda f: f is None }})
    r"""Indicates on which date you want to make the filter"""  
    invoice_availability_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invoiceAvailabilityType'), 'exclude': lambda f: f is None }})
    r"""Indicates on which invoice availability to filter"""  
    marketplace_business_codes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marketplaceBusinessCodes'), 'exclude': lambda f: f is None }})  
    marketplace_order_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marketplaceOrderIds'), 'exclude': lambda f: f is None }})  
    marketplace_technical_codes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marketplaceTechnicalCodes'), 'exclude': lambda f: f is None }})  
    order_buyer_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Buyer_Name'), 'exclude': lambda f: f is None }})
    r"""Buyer full name"""  
    order_merchant_order_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_MerchantOrderIds'), 'exclude': lambda f: f is None }})
    r"""Merchant order id list"""  
    order_merchant_info_synchronization_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orderMerchantInfoSynchronizationStatus'), 'exclude': lambda f: f is None }})
    r"""Indicates on which order merchant info synchronization status to filter"""  
    store_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('storeIds'), 'exclude': lambda f: f is None }})
    r"""Store Id list"""  
    