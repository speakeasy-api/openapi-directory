<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class PayoutSettingsMerchantLevel 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete a payout setting
     * 
     * Deletes the payout setting identified in the path.
     * 
     * Use this endpoint if your integration requires it, such as Adyen for Platforms Manage. Your Adyen contact will set up your access.
     * 
     * To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * 
     * * Management API—Payout account settings read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteMerchantsMerchantIdPayoutSettingsPayoutSettingsIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteMerchantsMerchantIdPayoutSettingsPayoutSettingsIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteMerchantsMerchantIdPayoutSettingsPayoutSettingsIdResponse
     */
	public function deleteMerchantsMerchantIdPayoutSettingsPayoutSettingsId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteMerchantsMerchantIdPayoutSettingsPayoutSettingsIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteMerchantsMerchantIdPayoutSettingsPayoutSettingsIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteMerchantsMerchantIdPayoutSettingsPayoutSettingsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/merchants/{merchantId}/payoutSettings/{payoutSettingsId}', \OpenAPI\OpenAPI\Models\Operations\DeleteMerchantsMerchantIdPayoutSettingsPayoutSettingsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteMerchantsMerchantIdPayoutSettingsPayoutSettingsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of payout settings
     * 
     * Returns the list of payout settings for the merchant account identified in the path.
     * 
     * Use this endpoint if your integration requires it, such as Adyen for Platforms Manage. Your Adyen contact will set up your access.
     * 
     * To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—Payout account settings read
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdPayoutSettingsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdPayoutSettingsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdPayoutSettingsResponse
     */
	public function getMerchantsMerchantIdPayoutSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdPayoutSettingsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdPayoutSettingsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdPayoutSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/merchants/{merchantId}/payoutSettings', \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdPayoutSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdPayoutSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->payoutSettingsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PayoutSettingsResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a payout setting
     * 
     * Returns the payout setting identified in the path.
     * 
     * Use this endpoint if your integration requires it, such as Adyen for Platforms Manage. Your Adyen contact will set up your access.
     * 
     * To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—Payout account settings read
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdPayoutSettingsPayoutSettingsIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdPayoutSettingsPayoutSettingsIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdPayoutSettingsPayoutSettingsIdResponse
     */
	public function getMerchantsMerchantIdPayoutSettingsPayoutSettingsId(
        \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdPayoutSettingsPayoutSettingsIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdPayoutSettingsPayoutSettingsIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdPayoutSettingsPayoutSettingsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/merchants/{merchantId}/payoutSettings/{payoutSettingsId}', \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdPayoutSettingsPayoutSettingsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdPayoutSettingsPayoutSettingsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->payoutSettings = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PayoutSettings', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a payout setting
     * 
     * Updates the payout setting identified in the path. You can enable or disable the payout setting.
     * 
     * Use this endpoint if your integration requires it, such as Adyen for Platforms Manage. Your Adyen contact will set up your access.
     * 
     * To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * 
     * * Management API—Payout account settings read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchMerchantsMerchantIdPayoutSettingsPayoutSettingsIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchMerchantsMerchantIdPayoutSettingsPayoutSettingsIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchMerchantsMerchantIdPayoutSettingsPayoutSettingsIdResponse
     */
	public function patchMerchantsMerchantIdPayoutSettingsPayoutSettingsId(
        \OpenAPI\OpenAPI\Models\Operations\PatchMerchantsMerchantIdPayoutSettingsPayoutSettingsIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatchMerchantsMerchantIdPayoutSettingsPayoutSettingsIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchMerchantsMerchantIdPayoutSettingsPayoutSettingsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/merchants/{merchantId}/payoutSettings/{payoutSettingsId}', \OpenAPI\OpenAPI\Models\Operations\PatchMerchantsMerchantIdPayoutSettingsPayoutSettingsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updatePayoutSettingsRequest", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchMerchantsMerchantIdPayoutSettingsPayoutSettingsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->payoutSettings = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PayoutSettings', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a payout setting
     * 
     * Sends a request to add a payout setting for the merchant account specified in the path. A payout setting links the merchant account to the [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments) that contains the details of the payout bank account. Adyen verifies the bank account before allowing and enabling the payout setting.
     * 
     * If you're accepting payments in multiple currencies, you may add multiple payout settings for the merchant account.
     * 
     * Use this endpoint if your integration requires it, such as Adyen for Platforms Manage. Your Adyen contact will set up your access.
     * 
     * To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * 
     * * Management API—Payout account settings read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdPayoutSettingsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdPayoutSettingsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdPayoutSettingsResponse
     */
	public function postMerchantsMerchantIdPayoutSettings(
        \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdPayoutSettingsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdPayoutSettingsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdPayoutSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/merchants/{merchantId}/payoutSettings', \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdPayoutSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "payoutSettingsRequest", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdPayoutSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->payoutSettings = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PayoutSettings', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
}