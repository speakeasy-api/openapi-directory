// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// NodePoolAutoscalingLocationPolicyEnum - Location policy used when scaling up a nodepool.
type NodePoolAutoscalingLocationPolicyEnum string

const (
	NodePoolAutoscalingLocationPolicyEnumLocationPolicyUnspecified NodePoolAutoscalingLocationPolicyEnum = "LOCATION_POLICY_UNSPECIFIED"
	NodePoolAutoscalingLocationPolicyEnumBalanced                  NodePoolAutoscalingLocationPolicyEnum = "BALANCED"
	NodePoolAutoscalingLocationPolicyEnumAny                       NodePoolAutoscalingLocationPolicyEnum = "ANY"
)

func (e NodePoolAutoscalingLocationPolicyEnum) ToPointer() *NodePoolAutoscalingLocationPolicyEnum {
	return &e
}

func (e *NodePoolAutoscalingLocationPolicyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LOCATION_POLICY_UNSPECIFIED":
		fallthrough
	case "BALANCED":
		fallthrough
	case "ANY":
		*e = NodePoolAutoscalingLocationPolicyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NodePoolAutoscalingLocationPolicyEnum: %v", v)
	}
}

// NodePoolAutoscaling - NodePoolAutoscaling contains information required by cluster autoscaler to adjust the size of the node pool to the current cluster usage.
type NodePoolAutoscaling struct {
	// Can this node pool be deleted automatically.
	Autoprovisioned *bool `json:"autoprovisioned,omitempty"`
	// Is autoscaling enabled for this node pool.
	Enabled *bool `json:"enabled,omitempty"`
	// Location policy used when scaling up a nodepool.
	LocationPolicy *NodePoolAutoscalingLocationPolicyEnum `json:"locationPolicy,omitempty"`
	// Maximum number of nodes for one location in the NodePool. Must be >= min_node_count. There has to be enough quota to scale up the cluster.
	MaxNodeCount *int `json:"maxNodeCount,omitempty"`
	// Minimum number of nodes for one location in the NodePool. Must be >= 1 and <= max_node_count.
	MinNodeCount *int `json:"minNodeCount,omitempty"`
	// Maximum number of nodes in the node pool. Must be greater than total_min_node_count. There has to be enough quota to scale up the cluster. The total_*_node_count fields are mutually exclusive with the *_node_count fields.
	TotalMaxNodeCount *int `json:"totalMaxNodeCount,omitempty"`
	// Minimum number of nodes in the node pool. Must be greater than 1 less than total_max_node_count. The total_*_node_count fields are mutually exclusive with the *_node_count fields.
	TotalMinNodeCount *int `json:"totalMinNodeCount,omitempty"`
}
