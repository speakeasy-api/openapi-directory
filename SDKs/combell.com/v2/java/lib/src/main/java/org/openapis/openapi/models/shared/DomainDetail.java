/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * DomainDetail - Success
 */
public class DomainDetail {
    /**
     * Indication if the domain renew state can be changed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("can_toggle_renew")
    public Boolean canToggleRenew;

    public DomainDetail withCanToggleRenew(Boolean canToggleRenew) {
        this.canToggleRenew = canToggleRenew;
        return this;
    }
    
    /**
     * The domain name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domain_name")
    public String domainName;

    public DomainDetail withDomainName(String domainName) {
        this.domainName = domainName;
        return this;
    }
    
    /**
     * Expiration date of the domain
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("expiration_date")
    public OffsetDateTime expirationDate;

    public DomainDetail withExpirationDate(OffsetDateTime expirationDate) {
        this.expirationDate = expirationDate;
        return this;
    }
    
    /**
     * Nameservers of the domain
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name_servers")
    public NameServer[] nameServers;

    public DomainDetail withNameServers(NameServer[] nameServers) {
        this.nameServers = nameServers;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registrant")
    public Registrant registrant;

    public DomainDetail withRegistrant(Registrant registrant) {
        this.registrant = registrant;
        return this;
    }
    
    /**
     * Indication of renewal.&lt;br /&gt;
     * No value indicates that the renewal state could not be determined at the moment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("will_renew")
    public Boolean willRenew;

    public DomainDetail withWillRenew(Boolean willRenew) {
        this.willRenew = willRenew;
        return this;
    }
    
    public DomainDetail(){}
}
