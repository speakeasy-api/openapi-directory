"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import batchdatacaptureconfig as shared_batchdatacaptureconfig
from ..shared import batchstrategy_enum as shared_batchstrategy_enum
from ..shared import dataprocessing as shared_dataprocessing
from ..shared import experimentconfig as shared_experimentconfig
from ..shared import modelclientconfig as shared_modelclientconfig
from ..shared import tag as shared_tag
from ..shared import transforminput as shared_transforminput
from ..shared import transformoutput as shared_transformoutput
from ..shared import transformresources as shared_transformresources
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateTransformJobRequest:
    
    model_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelName') }})  
    transform_input: shared_transforminput.TransformInput = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TransformInput') }})  
    transform_job_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TransformJobName') }})  
    transform_output: shared_transformoutput.TransformOutput = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TransformOutput') }})  
    transform_resources: shared_transformresources.TransformResources = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TransformResources') }})  
    batch_strategy: Optional[shared_batchstrategy_enum.BatchStrategyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BatchStrategy'), 'exclude': lambda f: f is None }})  
    data_capture_config: Optional[shared_batchdatacaptureconfig.BatchDataCaptureConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DataCaptureConfig'), 'exclude': lambda f: f is None }})  
    data_processing: Optional[shared_dataprocessing.DataProcessing] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DataProcessing'), 'exclude': lambda f: f is None }})  
    environment: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Environment'), 'exclude': lambda f: f is None }})  
    experiment_config: Optional[shared_experimentconfig.ExperimentConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExperimentConfig'), 'exclude': lambda f: f is None }})
    r"""<p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:</p> <ul> <li> <p> <a>CreateProcessingJob</a> </p> </li> <li> <p> <a>CreateTrainingJob</a> </p> </li> <li> <p> <a>CreateTransformJob</a> </p> </li> </ul>"""  
    max_concurrent_transforms: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxConcurrentTransforms'), 'exclude': lambda f: f is None }})  
    max_payload_in_mb: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxPayloadInMB'), 'exclude': lambda f: f is None }})  
    model_client_config: Optional[shared_modelclientconfig.ModelClientConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelClientConfig'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    