/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * ScoreDetails - A summary of the score details
 */
public class ScoreDetails {
    /**
     * Arranger of the score
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("arranger")
    public String arranger;

    public ScoreDetails withArranger(String arranger) {
        this.arranger = arranger;
        return this;
    }
    
    /**
     * The list of the collaborators of the score
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collaborators")
    public ResourceCollaborator[] collaborators;

    public ScoreDetails withCollaborators(ResourceCollaborator[] collaborators) {
        this.collaborators = collaborators;
        return this;
    }
    
    /**
     * The List of parent collections, which includes all the collections this score is included. Please note that you might not have access to all of them.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collections")
    public String[] collections;

    public ScoreDetails withCollections(String[] collections) {
        this.collections = collections;
        return this;
    }
    
    /**
     * A computed version of the total, unique, weekly and monthly number of
     * comments added on the documents (this doesn't include inline comments).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("comments")
    public ScoreCommentsCounts comments;

    public ScoreDetails withComments(ScoreCommentsCounts comments) {
        this.comments = comments;
        return this;
    }
    
    /**
     * Composer of the score
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("composer")
    public String composer;

    public ScoreDetails withComposer(String composer) {
        this.composer = composer;
        return this;
    }
    
    /**
     * The date when the score was created
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("creationDate")
    public OffsetDateTime creationDate;

    public ScoreDetails withCreationDate(OffsetDateTime creationDate) {
        this.creationDate = creationDate;
        return this;
    }
    
    /**
     * The type of creation (an orginal, an arrangement)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creationType")
    public ScoreCreationTypeEnum creationType;

    public ScoreDetails withCreationType(ScoreCreationTypeEnum creationType) {
        this.creationType = creationType;
        return this;
    }
    
    /**
     * Description of the creation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public ScoreDetails withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * In seconds, an approximative duration of the score
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("durationTime")
    public Double durationTime;

    public ScoreDetails withDurationTime(Double durationTime) {
        this.durationTime = durationTime;
        return this;
    }
    
    /**
     * If the user uses Google Drive and the score exists on Google Drive, this field will contain the unique identifier of the Flat score on Google Drive. You can access the document using the url: `https://drive.google.com/open?id={googleDriveFileId}`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("googleDriveFileId")
    public String googleDriveFileId;

    public ScoreDetails withGoogleDriveFileId(String googleDriveFileId) {
        this.googleDriveFileId = googleDriveFileId;
        return this;
    }
    
    /**
     * The url where the score can be viewed in a web browser
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("htmlUrl")
    public String htmlUrl;

    public ScoreDetails withHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
        return this;
    }
    
    /**
     * The unique identifier of the score
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public ScoreDetails withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * An array of the instrument identifiers used in the last version of the score. This is mainly used to display a list of the instruments in the Flat's UI or instruments icons. The format of the strings is `{instrument-group}.{instrument-id}`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instruments")
    public String[] instruments;

    public ScoreDetails withInstruments(String[] instruments) {
        this.instruments = instruments;
        return this;
    }
    
    /**
     * License of the creation. Read more about the Creative Commons licenses on https://creativecommons.org/licenses/
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("license")
    public ScoreLicenseEnum license;

    public ScoreDetails withLicense(ScoreLicenseEnum license) {
        this.license = license;
        return this;
    }
    
    /**
     * Additional license text written on the exported/printed score
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("licenseText")
    public String licenseText;

    public ScoreDetails withLicenseText(String licenseText) {
        this.licenseText = licenseText;
        return this;
    }
    
    /**
     * A computed version of the weekly, monthly and total of number of likes
     * for a score
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("likes")
    public ScoreLikesCounts likes;

    public ScoreDetails withLikes(ScoreLikesCounts likes) {
        this.likes = likes;
        return this;
    }
    
    /**
     * Lyricist of the score
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lyricist")
    public String lyricist;

    public ScoreDetails withLyricist(String lyricist) {
        this.lyricist = lyricist;
        return this;
    }
    
    /**
     * The main tempo of the score (in QPM)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mainTempoQpm")
    public Double mainTempoQpm;

    public ScoreDetails withMainTempoQpm(Double mainTempoQpm) {
        this.mainTempoQpm = mainTempoQpm;
        return this;
    }
    
    /**
     * The date of the last revision of the score
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("modificationDate")
    public OffsetDateTime modificationDate;

    public ScoreDetails withModificationDate(OffsetDateTime modificationDate) {
        this.modificationDate = modificationDate;
        return this;
    }
    
    /**
     * The number of measures in the score
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numberMeasures")
    public Long numberMeasures;

    public ScoreDetails withNumberMeasures(Long numberMeasures) {
        this.numberMeasures = numberMeasures;
        return this;
    }
    
    /**
     * If the score has been created in an organization, the identifier of this organization. This property is especially used with the score privacy `organizationPublic`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organization")
    public String organization;

    public ScoreDetails withOrganization(String organization) {
        this.organization = organization;
        return this;
    }
    
    /**
     * If the score has been forked, the unique identifier of the parent score.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentScore")
    public String parentScore;

    public ScoreDetails withParentScore(String parentScore) {
        this.parentScore = parentScore;
        return this;
    }
    
    /**
     * A computed version of the total, weekly, and monthly number of plays of
     * the score
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("plays")
    public ScorePlaysCounts plays;

    public ScoreDetails withPlays(ScorePlaysCounts plays) {
        this.plays = plays;
        return this;
    }
    
    /**
     * The score main privacy mode.
     * 
     * - `public`: The score is public on the Internet. This one can be accessible at the url `https://flat.io/score/{score}` and can be modified and administred by specified collaborators users.
     * - `private`: The score is private and can be only accessed, modified and administred by specified collaborators users.
     * - `privateLink`: The score is private but can be accessed using a private link `htmlUrl` or the private key in the property `sharingKey`.
     * - `organizationPublic`: _Available only with [Flat for Education](https://flat.io/edu)._ The score is public in the organization: users of the same organization can access to this one. The score can be modified and administred by specified collaborators users.
     * 
     * The score can also be individually shared to a set of users or groups using the different collaborators API methods.
     * 
     * When a file is synchronized from an external source (e.g. Google Drive) and the sharing options are changed on the source, Flat will chose the best privacy mode for the file.
     * 
     * When using a [Flat for Education](https://flat.io/edu) account, some of the modes may not be available if disabled by an administrator of the organization (e.g. by default the `public` mode is not available).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("privacy")
    public ScorePrivacyEnum privacy;

    public ScoreDetails withPrivacy(ScorePrivacyEnum privacy) {
        this.privacy = privacy;
        return this;
    }
    
    /**
     * The date when the score was published on Flat
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("publicationDate")
    public OffsetDateTime publicationDate;

    public ScoreDetails withPublicationDate(OffsetDateTime publicationDate) {
        this.publicationDate = publicationDate;
        return this;
    }
    
    /**
     * The rights of the current user on a score or collection
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rights")
    public ResourceRights rights;

    public ScoreDetails withRights(ResourceRights rights) {
        this.rights = rights;
        return this;
    }
    
    /**
     * An array of the audio samples identifiers used the different score parts.
     * The format of the strings is `{instrument-group}.{sample-id}`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("samples")
    public String[] samples;

    public ScoreDetails withSamples(String[] samples) {
        this.samples = samples;
        return this;
    }
    
    /**
     * The private sharing key of the score (available when the `privacy` mode is set to `privateLink`)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sharingKey")
    public String sharingKey;

    public ScoreDetails withSharingKey(String sharingKey) {
        this.sharingKey = sharingKey;
        return this;
    }
    
    /**
     * Subtitle of the score
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subtitle")
    public String subtitle;

    public ScoreDetails withSubtitle(String subtitle) {
        this.subtitle = subtitle;
        return this;
    }
    
    /**
     * Tags describing the score
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public String[] tags;

    public ScoreDetails withTags(String[] tags) {
        this.tags = tags;
        return this;
    }
    
    /**
     * The title of the score
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;

    public ScoreDetails withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * Public User details summary
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user")
    public UserPublicSummary user;

    public ScoreDetails withUser(UserPublicSummary user) {
        this.user = user;
        return this;
    }
    
    /**
     * A computed version of the total, weekly, and monthly number of views of
     * the score
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("views")
    public ScoreViewsCounts views;

    public ScoreDetails withViews(ScoreViewsCounts views) {
        this.views = views;
        return this;
    }
    
    public ScoreDetails(){}
}
