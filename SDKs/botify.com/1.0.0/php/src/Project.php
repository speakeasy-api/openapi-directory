<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Project 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * List all analyses for a project
     * 
     * List all analyses for a project
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProjectAnalysesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProjectAnalysesResponse
     */
	public function getProjectAnalyses(
        \OpenAPI\OpenAPI\Models\Operations\GetProjectAnalysesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProjectAnalysesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/analyses/{username}/{project_slug}', \OpenAPI\OpenAPI\Models\Operations\GetProjectAnalysesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetProjectAnalysesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProjectAnalysesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getProjectAnalyses200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetProjectAnalyses200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultPayload = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DefaultPayload', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Project Query aggregator
     * 
     * Project Query aggregator. It accepts multiple queries that will be executed on all completed analyses in the project
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProjectUrlsAggsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProjectUrlsAggsResponse
     */
	public function getProjectUrlsAggs(
        \OpenAPI\OpenAPI\Models\Operations\GetProjectUrlsAggsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProjectUrlsAggsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{username}/{project_slug}/urls/aggs', \OpenAPI\OpenAPI\Models\Operations\GetProjectUrlsAggsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetProjectUrlsAggsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProjectUrlsAggsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->default = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultPayload = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DefaultPayload', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a specific saved filter's name, ID and filter value
     * 
     * Retrieves a specific saved filter's name, ID and filter value
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSavedFilterRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSavedFilterResponse
     */
	public function getSavedFilter(
        \OpenAPI\OpenAPI\Models\Operations\GetSavedFilterRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSavedFilterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{username}/{project_slug}/filters/{identifier}', \OpenAPI\OpenAPI\Models\Operations\GetSavedFilterRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSavedFilterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectSavedFilter = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProjectSavedFilter', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultPayload = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DefaultPayload', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all the project's saved filters (each filter's name, ID and filter value)
     * 
     * List all the project's saved filters (each filter's name, ID and filter value)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSavedFiltersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSavedFiltersResponse
     */
	public function getSavedFilters(
        \OpenAPI\OpenAPI\Models\Operations\GetSavedFiltersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSavedFiltersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{username}/{project_slug}/filters', \OpenAPI\OpenAPI\Models\Operations\GetSavedFiltersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSavedFiltersRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSavedFiltersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSavedFilters200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetSavedFilters200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultPayload = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DefaultPayload', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Match and replace parts of a URL based on rules passed in POST data
     * 
     * Match and replace parts of a URL based on rules passed in POST data.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestUrlRewritingRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TestUrlRewritingRulesResponse
     */
	public function testUrlRewritingRules(
        \OpenAPI\OpenAPI\Models\Operations\TestUrlRewritingRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TestUrlRewritingRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{username}/{project_slug}/features/url_rewriting/rules_validator', \OpenAPI\OpenAPI\Models\Operations\TestUrlRewritingRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestUrlRewritingRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->urlRewritingRulesSerializer = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\URLRewritingRulesSerializer', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->defaultPayload = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DefaultPayload', 'json');
            }
        }

        return $response;
    }
}