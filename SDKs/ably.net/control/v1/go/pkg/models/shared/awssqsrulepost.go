// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type AwsSqsRulePostRuleTypeEnum string

const (
	AwsSqsRulePostRuleTypeEnumAwsSqs AwsSqsRulePostRuleTypeEnum = "aws/sqs"
)

func (e AwsSqsRulePostRuleTypeEnum) ToPointer() *AwsSqsRulePostRuleTypeEnum {
	return &e
}

func (e *AwsSqsRulePostRuleTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "aws/sqs":
		*e = AwsSqsRulePostRuleTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AwsSqsRulePostRuleTypeEnum: %v", v)
	}
}

type AwsSqsRulePostTargetAuthenticationType string

const (
	AwsSqsRulePostTargetAuthenticationTypeAssumeRole  AwsSqsRulePostTargetAuthenticationType = "assumeRole"
	AwsSqsRulePostTargetAuthenticationTypeCredentials AwsSqsRulePostTargetAuthenticationType = "credentials"
)

type AwsSqsRulePostTargetAuthentication struct {
	AwsAccessKeys *AwsAccessKeys
	AwsAssumeRole *AwsAssumeRole

	Type AwsSqsRulePostTargetAuthenticationType
}

func CreateAwsSqsRulePostTargetAuthenticationAssumeRole(assumeRole AwsAssumeRole) AwsSqsRulePostTargetAuthentication {
	typ := AwsSqsRulePostTargetAuthenticationTypeAssumeRole
	typStr := AwsAssumeRoleAuthenticationModeEnum(typ)
	assumeRole.AuthenticationMode = &typStr

	return AwsSqsRulePostTargetAuthentication{
		AwsAssumeRole: &assumeRole,
		Type:          typ,
	}
}

func CreateAwsSqsRulePostTargetAuthenticationCredentials(credentials AwsAccessKeys) AwsSqsRulePostTargetAuthentication {
	typ := AwsSqsRulePostTargetAuthenticationTypeCredentials
	typStr := AwsAccessKeysAuthenticationModeEnum(typ)
	credentials.AuthenticationMode = &typStr

	return AwsSqsRulePostTargetAuthentication{
		AwsAccessKeys: &credentials,
		Type:          typ,
	}
}

func (u *AwsSqsRulePostTargetAuthentication) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	type discriminator struct {
		AuthenticationMode string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.AuthenticationMode {
	case "assumeRole":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		awsAssumeRole := new(AwsAssumeRole)
		if err := d.Decode(&awsAssumeRole); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.AwsAssumeRole = awsAssumeRole
		u.Type = AwsSqsRulePostTargetAuthenticationTypeAssumeRole
		return nil
	case "credentials":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		awsAccessKeys := new(AwsAccessKeys)
		if err := d.Decode(&awsAccessKeys); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.AwsAccessKeys = awsAccessKeys
		u.Type = AwsSqsRulePostTargetAuthenticationTypeCredentials
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u AwsSqsRulePostTargetAuthentication) MarshalJSON() ([]byte, error) {
	if u.AwsAccessKeys != nil {
		return json.Marshal(u.AwsAccessKeys)
	}

	if u.AwsAssumeRole != nil {
		return json.Marshal(u.AwsAssumeRole)
	}

	return nil, nil
}

type AwsSqsRulePostTarget struct {
	Authentication AwsSqsRulePostTargetAuthentication `json:"authentication"`
	AwsAccountID   string                             `json:"awsAccountId"`
	Enveloped      *bool                              `json:"enveloped,omitempty"`
	Format         *string                            `json:"format,omitempty"`
	QueueName      string                             `json:"queueName"`
	Region         string                             `json:"region"`
}

type AwsSqsRulePost struct {
	RequestMode string                     `json:"requestMode"`
	RuleType    AwsSqsRulePostRuleTypeEnum `json:"ruleType"`
	Source      RuleSource                 `json:"source"`
	Status      *string                    `json:"status,omitempty"`
	Target      AwsSqsRulePostTarget       `json:"target"`
}
