// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ItemCountByStatusStatusCodeEnum - Status of the items.
type ItemCountByStatusStatusCodeEnum string

const (
	ItemCountByStatusStatusCodeEnumCodeUnspecified ItemCountByStatusStatusCodeEnum = "CODE_UNSPECIFIED"
	ItemCountByStatusStatusCodeEnumError           ItemCountByStatusStatusCodeEnum = "ERROR"
	ItemCountByStatusStatusCodeEnumModified        ItemCountByStatusStatusCodeEnum = "MODIFIED"
	ItemCountByStatusStatusCodeEnumNewItem         ItemCountByStatusStatusCodeEnum = "NEW_ITEM"
	ItemCountByStatusStatusCodeEnumAccepted        ItemCountByStatusStatusCodeEnum = "ACCEPTED"
)

func (e *ItemCountByStatusStatusCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CODE_UNSPECIFIED":
		fallthrough
	case "ERROR":
		fallthrough
	case "MODIFIED":
		fallthrough
	case "NEW_ITEM":
		fallthrough
	case "ACCEPTED":
		*e = ItemCountByStatusStatusCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ItemCountByStatusStatusCodeEnum: %s", s)
	}
}

type ItemCountByStatus struct {
	// Number of items matching the status code.
	Count *string `json:"count,omitempty"`
	// Number of items matching the status code for which billing is done. This excludes virtual container items from the total count. This count would not be applicable for items with ERROR or NEW_ITEM status code.
	IndexedItemsCount *string `json:"indexedItemsCount,omitempty"`
	// Status of the items.
	StatusCode *ItemCountByStatusStatusCodeEnum `json:"statusCode,omitempty"`
}
