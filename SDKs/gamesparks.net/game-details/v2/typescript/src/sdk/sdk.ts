/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Analytics } from "./analytics";
import { BillingDetails } from "./billingdetails";
import { Credentials } from "./credentials";
import { Experiments } from "./experiments";
import { GamesAdmin } from "./gamesadmin";
import { Manage } from "./manage";
import { Notifications } from "./notifications";
import { PushNotificationTest } from "./pushnotificationtest";
import { Region } from "./region";
import { Scripts } from "./scripts";
import { SegmentQueryFilters } from "./segmentqueryfilters";
import { Snapshots } from "./snapshots";
import { TestHarness } from "./testharness";
import axios, { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["//config2.gamesparks.net"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * The API to manage the GameSparks game details
 */
export class SDK {
  /**
   * Analytics Restv 2 Controller
   */
  public analytics: Analytics;
  /**
   * Billing Details Rest V 2 Controller
   */
  public billingDetails: BillingDetails;
  /**
   * Game Credentials Rest V 2 Controller
   */
  public credentials: Credentials;
  /**
   * Experiment Rest Controller
   */
  public experiments: Experiments;
  /**
   * Games Admin Restv 2 Controller
   */
  public gamesAdmin: GamesAdmin;
  /**
   * Manage Restv 2 Controller
   */
  public manage: Manage;
  /**
   * Log Summary Restv 2 Controller
   */
  public notifications: Notifications;
  /**
   * Push Notification Test Controller
   */
  public pushNotificationTest: PushNotificationTest;
  /**
   * Region Restv 2 Controller
   */
  public region: Region;
  /**
   * Scripts Restv 2 Controller
   */
  public scripts: Scripts;
  /**
   * Segment Query Filter Restv 2 Controller
   */
  public segmentQueryFilters: SegmentQueryFilters;
  public snapshots: Snapshots;
  /**
   * Test Harness Restv 2 Controller
   */
  public testHarness: TestHarness;

  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    this._securityClient = this._defaultClient;

    this.analytics = new Analytics(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.billingDetails = new BillingDetails(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.credentials = new Credentials(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.experiments = new Experiments(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.gamesAdmin = new GamesAdmin(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.manage = new Manage(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.notifications = new Notifications(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.pushNotificationTest = new PushNotificationTest(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.region = new Region(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.scripts = new Scripts(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.segmentQueryFilters = new SegmentQueryFilters(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.snapshots = new Snapshots(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.testHarness = new TestHarness(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );
  }
}
