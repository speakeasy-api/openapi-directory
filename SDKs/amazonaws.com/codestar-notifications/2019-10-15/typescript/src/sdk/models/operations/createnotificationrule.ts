/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The level of detail to include in the notifications for this resource. <code>BASIC</code> will include only the contents of the event as it would appear in Amazon CloudWatch. <code>FULL</code> will include any supplemental information provided by AWS CodeStar Notifications and/or the service for the resource for which the notification is created.
 */
export enum CreateNotificationRuleRequestBodyDetailTypeEnum {
  Basic = "BASIC",
  Full = "FULL",
}

/**
 * The status of the notification rule. The default value is <code>ENABLED</code>. If the status is set to <code>DISABLED</code>, notifications aren't sent for the notification rule.
 */
export enum CreateNotificationRuleRequestBodyStatusEnum {
  Enabled = "ENABLED",
  Disabled = "DISABLED",
}

export class CreateNotificationRuleRequestBody extends SpeakeasyBase {
  /**
   * <p>A unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request with the same parameters is received and a token is included, the request returns information about the initial request that used that token.</p> <note> <p>The Amazon Web Services SDKs prepopulate client request tokens. If you are using an Amazon Web Services SDK, an idempotency token is created for you.</p> </note>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ClientRequestToken" })
  clientRequestToken?: string;

  /**
   * The level of detail to include in the notifications for this resource. <code>BASIC</code> will include only the contents of the event as it would appear in Amazon CloudWatch. <code>FULL</code> will include any supplemental information provided by AWS CodeStar Notifications and/or the service for the resource for which the notification is created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DetailType" })
  detailType: CreateNotificationRuleRequestBodyDetailTypeEnum;

  /**
   * A list of event types associated with this notification rule. For a list of allowed events, see <a>EventTypeSummary</a>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "EventTypeIds" })
  eventTypeIds: string[];

  /**
   * The name for the notification rule. Notification rule names must be unique in your Amazon Web Services account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name: string;

  /**
   * The Amazon Resource Name (ARN) of the resource to associate with the notification rule. Supported resources include pipelines in CodePipeline, repositories in CodeCommit, and build projects in CodeBuild.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Resource" })
  resource: string;

  /**
   * The status of the notification rule. The default value is <code>ENABLED</code>. If the status is set to <code>DISABLED</code>, notifications aren't sent for the notification rule.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Status" })
  status?: CreateNotificationRuleRequestBodyStatusEnum;

  /**
   * A list of tags to apply to this notification rule. Key names cannot start with "<code>aws</code>".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Tags" })
  tags?: Record<string, string>;

  /**
   * A list of Amazon Resource Names (ARNs) of Amazon Simple Notification Service topics and Chatbot clients to associate with the notification rule.
   */
  @SpeakeasyMetadata({ elemType: shared.Target })
  @Expose({ name: "Targets" })
  @Type(() => shared.Target)
  targets: shared.Target[];
}

export class CreateNotificationRuleRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateNotificationRuleRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateNotificationRuleResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConcurrentModificationException
   */
  @SpeakeasyMetadata()
  concurrentModificationException?: any;

  /**
   * ConfigurationException
   */
  @SpeakeasyMetadata()
  configurationException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createNotificationRuleResult?: shared.CreateNotificationRuleResult;

  /**
   * LimitExceededException
   */
  @SpeakeasyMetadata()
  limitExceededException?: any;

  /**
   * ResourceAlreadyExistsException
   */
  @SpeakeasyMetadata()
  resourceAlreadyExistsException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
