// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// UsersIsPreHahedEnum - If you want to provide hashed password set this propertie to `true` otherwise we will hash the plain password and store the hash
type UsersIsPreHahedEnum string

const (
	UsersIsPreHahedEnumFalse UsersIsPreHahedEnum = "false"
	UsersIsPreHahedEnumTrue  UsersIsPreHahedEnum = "true"
)

func (e *UsersIsPreHahedEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "false":
		fallthrough
	case "true":
		*e = UsersIsPreHahedEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsersIsPreHahedEnum: %s", s)
	}
}

type Users struct {
	// If you want to provide hashed password set this propertie to `true` otherwise we will hash the plain password and store the hash
	IsPreHahed *UsersIsPreHahedEnum `json:"isPreHahed,omitempty"`
	// this password will be hashed for you if the `isPreHashed` is set on false
	Password *string `json:"password,omitempty"`
	// Defined user's permissions
	Role     []string `json:"role,omitempty"`
	Username *string  `json:"username,omitempty"`
}
