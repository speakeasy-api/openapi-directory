"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import imageentity as shared_imageentity
from ..shared import sessionentity as shared_sessionentity
from ..shared import userentity as shared_userentity
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional

class SiteEntityBundleActivityNotificationsEnum(str, Enum):
    r"""Do Bundle owners receive activity notifications?"""
    NEVER = 'never'
    ALWAYS = 'always'
    PER_BUNDLE_SETTING = 'per_bundle_setting'

class SiteEntityBundleRegistrationNotificationsEnum(str, Enum):
    r"""Do Bundle owners receive registration notification?"""
    NEVER = 'never'
    ALWAYS = 'always'
    PER_BUNDLE_SETTING = 'per_bundle_setting'

class SiteEntityBundleUploadReceiptNotificationsEnum(str, Enum):
    r"""Do Bundle uploaders receive upload confirmation notifications?"""
    NEVER = 'never'
    ALWAYS = 'always'
    PER_BUNDLE_SETTING = 'per_bundle_setting'

class SiteEntityDomainLetsencryptChainEnum(str, Enum):
    r"""Letsencrypt chain to use when registering SSL Certificate for domain."""
    DEFAULT = 'default'
    ISRG_ROOT_X1 = 'isrg_root_x1'
    DST_ROOT_CA_X3 = 'dst_root_ca_x3'

class SiteEntityOfficeIntegrationTypeEnum(str, Enum):
    r"""Office integration application used to edit and view the MS Office documents"""
    ONLY_OFFICE = 'only_office'
    OFFICE_365 = 'office_365'
    DISABLED = 'disabled'

class SiteEntityRequire2faUserTypeEnum(str, Enum):
    r"""What type of user is required to use two-factor authentication (when require_2fa is set to `true` for this site)?"""
    ALL = 'all'
    FOLDER_AND_SITE_ADMINS = 'folder_and_site_admins'
    SITE_ADMINS = 'site_admins'

class SiteEntitySftpHostKeyTypeEnum(str, Enum):
    r"""Sftp Host Key Type"""
    DEFAULT = 'default'
    EXAVAULT = 'exavault'
    CUSTOM = 'custom'

class SiteEntityWelcomeScreenEnum(str, Enum):
    r"""Does the welcome screen appear?"""
    ENABLED = 'enabled'
    HIDDEN = 'hidden'
    DISABLED = 'disabled'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SiteEntity:
    r"""Show site settings"""
    
    active_sftp_host_key_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active_sftp_host_key_id'), 'exclude': lambda f: f is None }})
    r"""Id of the currently selected custom SFTP Host Key"""  
    admin_user_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('admin_user_id'), 'exclude': lambda f: f is None }})
    r"""User ID for the main site administrator"""  
    allow_bundle_names: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_bundle_names'), 'exclude': lambda f: f is None }})
    r"""Are manual Bundle names allowed?"""  
    allowed_2fa_method_bypass_for_ftp_sftp_dav: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowed_2fa_method_bypass_for_ftp_sftp_dav'), 'exclude': lambda f: f is None }})
    r"""Are users allowed to configure their two factor authentication to be bypassed for FTP/SFTP/WebDAV?"""  
    allowed_2fa_method_sms: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowed_2fa_method_sms'), 'exclude': lambda f: f is None }})
    r"""Is SMS two factor authentication allowed?"""  
    allowed_2fa_method_totp: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowed_2fa_method_totp'), 'exclude': lambda f: f is None }})
    r"""Is TOTP two factor authentication allowed?"""  
    allowed_2fa_method_u2f: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowed_2fa_method_u2f'), 'exclude': lambda f: f is None }})
    r"""Is U2F two factor authentication allowed?"""  
    allowed_2fa_method_webauthn: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowed_2fa_method_webauthn'), 'exclude': lambda f: f is None }})
    r"""Is WebAuthn two factor authentication allowed?"""  
    allowed_2fa_method_yubi: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowed_2fa_method_yubi'), 'exclude': lambda f: f is None }})
    r"""Is yubikey two factor authentication allowed?"""  
    allowed_countries: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowed_countries'), 'exclude': lambda f: f is None }})
    r"""Comma seperated list of allowed Country codes"""  
    allowed_ips: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowed_ips'), 'exclude': lambda f: f is None }})
    r"""List of allowed IP addresses"""  
    ask_about_overwrites: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ask_about_overwrites'), 'exclude': lambda f: f is None }})
    r"""If false, rename conflicting files instead of asking for overwrite confirmation.  Only applies to web interface."""  
    bundle_activity_notifications: Optional[SiteEntityBundleActivityNotificationsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bundle_activity_notifications'), 'exclude': lambda f: f is None }})
    r"""Do Bundle owners receive activity notifications?"""  
    bundle_expiration: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bundle_expiration'), 'exclude': lambda f: f is None }})
    r"""Site-wide Bundle expiration in days"""  
    bundle_password_required: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bundle_password_required'), 'exclude': lambda f: f is None }})
    r"""Do Bundles require password protection?"""  
    bundle_registration_notifications: Optional[SiteEntityBundleRegistrationNotificationsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bundle_registration_notifications'), 'exclude': lambda f: f is None }})
    r"""Do Bundle owners receive registration notification?"""  
    bundle_require_share_recipient: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bundle_require_share_recipient'), 'exclude': lambda f: f is None }})
    r"""Do Bundles require recipients for sharing?"""  
    bundle_upload_receipt_notifications: Optional[SiteEntityBundleUploadReceiptNotificationsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bundle_upload_receipt_notifications'), 'exclude': lambda f: f is None }})
    r"""Do Bundle uploaders receive upload confirmation notifications?"""  
    bundle_watermark_attachment: Optional[shared_imageentity.ImageEntity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bundle_watermark_attachment'), 'exclude': lambda f: f is None }})  
    bundle_watermark_value: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bundle_watermark_value'), 'exclude': lambda f: f is None }})
    r"""Preview watermark settings applied to all bundle items. Uses the same keys as Behavior.value"""  
    color2_left: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('color2_left'), 'exclude': lambda f: f is None }})
    r"""Page link and button color"""  
    color2_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('color2_link'), 'exclude': lambda f: f is None }})
    r"""Top bar link color"""  
    color2_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('color2_text'), 'exclude': lambda f: f is None }})
    r"""Page link and button color"""  
    color2_top: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('color2_top'), 'exclude': lambda f: f is None }})
    r"""Top bar background color"""  
    color2_top_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('color2_top_text'), 'exclude': lambda f: f is None }})
    r"""Top bar text color"""  
    contact_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contact_name'), 'exclude': lambda f: f is None }})
    r"""Site main contact name"""  
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Time this site was created"""  
    currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency'), 'exclude': lambda f: f is None }})
    r"""Preferred currency"""  
    custom_namespace: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_namespace'), 'exclude': lambda f: f is None }})
    r"""Is this site using a custom namespace for users?"""  
    days_to_retain_backups: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('days_to_retain_backups'), 'exclude': lambda f: f is None }})
    r"""Number of days to keep deleted files"""  
    default_time_zone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('default_time_zone'), 'exclude': lambda f: f is None }})
    r"""Site default time zone"""  
    desktop_app: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('desktop_app'), 'exclude': lambda f: f is None }})
    r"""Is the desktop app enabled?"""  
    desktop_app_session_ip_pinning: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('desktop_app_session_ip_pinning'), 'exclude': lambda f: f is None }})
    r"""Is desktop app session IP pinning enabled?"""  
    desktop_app_session_lifetime: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('desktop_app_session_lifetime'), 'exclude': lambda f: f is None }})
    r"""Desktop app session lifetime (in hours)"""  
    disable_files_certificate_generation: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disable_files_certificate_generation'), 'exclude': lambda f: f is None }})
    r"""If set, Files.com will not set the CAA records required to generate future SSL certificates for this domain."""  
    disable_notifications: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disable_notifications'), 'exclude': lambda f: f is None }})
    r"""Are notifications disabled?"""  
    disable_password_reset: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disable_password_reset'), 'exclude': lambda f: f is None }})
    r"""Is password reset disabled?"""  
    disable_users_from_inactivity_period_days: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disable_users_from_inactivity_period_days'), 'exclude': lambda f: f is None }})
    r"""If greater than zero, users will unable to login if they do not show activity within this number of days."""  
    disallowed_countries: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disallowed_countries'), 'exclude': lambda f: f is None }})
    r"""Comma seperated list of disallowed Country codes"""  
    domain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domain'), 'exclude': lambda f: f is None }})
    r"""Custom domain"""  
    domain_hsts_header: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domain_hsts_header'), 'exclude': lambda f: f is None }})
    r"""Send HSTS (HTTP Strict Transport Security) header when visitors access the site via a custom domain?"""  
    domain_letsencrypt_chain: Optional[SiteEntityDomainLetsencryptChainEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domain_letsencrypt_chain'), 'exclude': lambda f: f is None }})
    r"""Letsencrypt chain to use when registering SSL Certificate for domain."""  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""Main email for this site"""  
    folder_permissions_groups_only: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('folder_permissions_groups_only'), 'exclude': lambda f: f is None }})
    r"""If true, permissions for this site must be bound to a group (not a user). Otherwise, permissions must be bound to a user."""  
    ftp_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ftp_enabled'), 'exclude': lambda f: f is None }})
    r"""Is FTP enabled?"""  
    hipaa: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hipaa'), 'exclude': lambda f: f is None }})
    r"""Is there a signed HIPAA BAA between Files.com and this site?"""  
    icon128: Optional[shared_imageentity.ImageEntity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('icon128'), 'exclude': lambda f: f is None }})  
    icon16: Optional[shared_imageentity.ImageEntity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('icon16'), 'exclude': lambda f: f is None }})  
    icon32: Optional[shared_imageentity.ImageEntity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('icon32'), 'exclude': lambda f: f is None }})  
    icon48: Optional[shared_imageentity.ImageEntity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('icon48'), 'exclude': lambda f: f is None }})  
    immutable_files_set_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('immutable_files_set_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Can files be modified?"""  
    include_password_in_welcome_email: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('include_password_in_welcome_email'), 'exclude': lambda f: f is None }})
    r"""Include password in emails to new users?"""  
    language: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('language'), 'exclude': lambda f: f is None }})
    r"""Site default language"""  
    ldap_base_dn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ldap_base_dn'), 'exclude': lambda f: f is None }})
    r"""Base DN for looking up users in LDAP server"""  
    ldap_domain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ldap_domain'), 'exclude': lambda f: f is None }})
    r"""Domain name that will be appended to usernames"""  
    ldap_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ldap_enabled'), 'exclude': lambda f: f is None }})
    r"""Main LDAP setting: is LDAP enabled?"""  
    ldap_group_action: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ldap_group_action'), 'exclude': lambda f: f is None }})
    r"""Should we sync groups from LDAP server?"""  
    ldap_group_exclusion: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ldap_group_exclusion'), 'exclude': lambda f: f is None }})
    r"""Comma or newline separated list of group names (with optional wildcards) to exclude when syncing."""  
    ldap_group_inclusion: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ldap_group_inclusion'), 'exclude': lambda f: f is None }})
    r"""Comma or newline separated list of group names (with optional wildcards) to include when syncing."""  
    ldap_host: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ldap_host'), 'exclude': lambda f: f is None }})
    r"""LDAP host"""  
    ldap_host_2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ldap_host_2'), 'exclude': lambda f: f is None }})
    r"""LDAP backup host"""  
    ldap_host_3: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ldap_host_3'), 'exclude': lambda f: f is None }})
    r"""LDAP backup host"""  
    ldap_port: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ldap_port'), 'exclude': lambda f: f is None }})
    r"""LDAP port"""  
    ldap_secure: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ldap_secure'), 'exclude': lambda f: f is None }})
    r"""Use secure LDAP?"""  
    ldap_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ldap_type'), 'exclude': lambda f: f is None }})
    r"""LDAP type"""  
    ldap_user_action: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ldap_user_action'), 'exclude': lambda f: f is None }})
    r"""Should we sync users from LDAP server?"""  
    ldap_user_include_groups: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ldap_user_include_groups'), 'exclude': lambda f: f is None }})
    r"""Comma or newline separated list of group names (with optional wildcards) - if provided, only users in these groups will be added or synced."""  
    ldap_username: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ldap_username'), 'exclude': lambda f: f is None }})
    r"""Username for signing in to LDAP server."""  
    ldap_username_field: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ldap_username_field'), 'exclude': lambda f: f is None }})
    r"""LDAP username field"""  
    login_help_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('login_help_text'), 'exclude': lambda f: f is None }})
    r"""Login help text"""  
    logo: Optional[shared_imageentity.ImageEntity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logo'), 'exclude': lambda f: f is None }})  
    max_prior_passwords: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_prior_passwords'), 'exclude': lambda f: f is None }})
    r"""Number of prior passwords to disallow"""  
    mobile_app: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mobile_app'), 'exclude': lambda f: f is None }})
    r"""Is the mobile app enabled?"""  
    mobile_app_session_ip_pinning: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mobile_app_session_ip_pinning'), 'exclude': lambda f: f is None }})
    r"""Is mobile app session IP pinning enabled?"""  
    mobile_app_session_lifetime: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mobile_app_session_lifetime'), 'exclude': lambda f: f is None }})
    r"""Mobile app session lifetime (in hours)"""  
    motd_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('motd_text'), 'exclude': lambda f: f is None }})
    r"""A message to show users when they connect via FTP or SFTP."""  
    motd_use_for_ftp: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('motd_use_for_ftp'), 'exclude': lambda f: f is None }})
    r"""Show message to users connecting via FTP"""  
    motd_use_for_sftp: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('motd_use_for_sftp'), 'exclude': lambda f: f is None }})
    r"""Show message to users connecting via SFTP"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Site name"""  
    next_billing_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_billing_amount'), 'exclude': lambda f: f is None }})
    r"""Next billing amount"""  
    next_billing_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_billing_date'), 'exclude': lambda f: f is None }})
    r"""Next billing date"""  
    non_sso_groups_allowed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('non_sso_groups_allowed'), 'exclude': lambda f: f is None }})
    r"""If true, groups can be manually created / modified / deleted by Site Admins. Otherwise, groups can only be managed via your SSO provider."""  
    non_sso_users_allowed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('non_sso_users_allowed'), 'exclude': lambda f: f is None }})
    r"""If true, users can be manually created / modified / deleted by Site Admins. Otherwise, users can only be managed via your SSO provider."""  
    office_integration_available: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('office_integration_available'), 'exclude': lambda f: f is None }})
    r"""Allow users to use Office for the web?"""  
    office_integration_type: Optional[SiteEntityOfficeIntegrationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('office_integration_type'), 'exclude': lambda f: f is None }})
    r"""Office integration application used to edit and view the MS Office documents"""  
    oncehub_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('oncehub_link'), 'exclude': lambda f: f is None }})
    r"""Link to scheduling a meeting with our Sales team"""  
    opt_out_global: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('opt_out_global'), 'exclude': lambda f: f is None }})
    r"""Use servers in the USA only?"""  
    overage_notified_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('overage_notified_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Last time the site was notified about an overage"""  
    overage_notify: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('overage_notify'), 'exclude': lambda f: f is None }})
    r"""Notify site email of overages?"""  
    overdue: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('overdue'), 'exclude': lambda f: f is None }})
    r"""Is this site's billing overdue?"""  
    password_min_length: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password_min_length'), 'exclude': lambda f: f is None }})
    r"""Shortest password length for users"""  
    password_require_letter: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password_require_letter'), 'exclude': lambda f: f is None }})
    r"""Require a letter in passwords?"""  
    password_require_mixed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password_require_mixed'), 'exclude': lambda f: f is None }})
    r"""Require lower and upper case letters in passwords?"""  
    password_require_number: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password_require_number'), 'exclude': lambda f: f is None }})
    r"""Require a number in passwords?"""  
    password_require_special: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password_require_special'), 'exclude': lambda f: f is None }})
    r"""Require special characters in password?"""  
    password_require_unbreached: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password_require_unbreached'), 'exclude': lambda f: f is None }})
    r"""Require passwords that have not been previously breached? (see https://haveibeenpwned.com/)"""  
    password_requirements_apply_to_bundles: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password_requirements_apply_to_bundles'), 'exclude': lambda f: f is None }})
    r"""Require bundles' passwords, and passwords for other items (inboxes, public shares, etc.) to conform to the same requirements as users' passwords?"""  
    password_validity_days: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password_validity_days'), 'exclude': lambda f: f is None }})
    r"""Number of days password is valid"""  
    phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phone'), 'exclude': lambda f: f is None }})
    r"""Site phone number"""  
    pin_all_remote_servers_to_site_region: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pin_all_remote_servers_to_site_region'), 'exclude': lambda f: f is None }})
    r"""If true, we will ensure that all internal communications with any remote server are made through the primary region of the site. This setting overrides individual remote server settings."""  
    reply_to_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reply_to_email'), 'exclude': lambda f: f is None }})
    r"""Reply-to email for this site"""  
    require_2fa: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('require_2fa'), 'exclude': lambda f: f is None }})
    r"""Require two-factor authentication for all users?"""  
    require_2fa_stop_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('require_2fa_stop_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""If set, requirement for two-factor authentication has been scheduled to end on this date-time."""  
    require_2fa_user_type: Optional[SiteEntityRequire2faUserTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('require_2fa_user_type'), 'exclude': lambda f: f is None }})
    r"""What type of user is required to use two-factor authentication (when require_2fa is set to `true` for this site)?"""  
    session: Optional[shared_sessionentity.SessionEntity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('session'), 'exclude': lambda f: f is None }})
    r"""Create user session (log in)"""  
    session_expiry: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('session_expiry'), 'exclude': lambda f: f is None }})
    r"""Session expiry in hours"""  
    session_expiry_minutes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('session_expiry_minutes'), 'exclude': lambda f: f is None }})
    r"""Session expiry in minutes"""  
    session_pinned_by_ip: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('session_pinned_by_ip'), 'exclude': lambda f: f is None }})
    r"""Are sessions locked to the same IP? (i.e. do users need to log in again if they change IPs?)"""  
    sftp_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sftp_enabled'), 'exclude': lambda f: f is None }})
    r"""Is SFTP enabled?"""  
    sftp_host_key_type: Optional[SiteEntitySftpHostKeyTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sftp_host_key_type'), 'exclude': lambda f: f is None }})
    r"""Sftp Host Key Type"""  
    sftp_insecure_ciphers: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sftp_insecure_ciphers'), 'exclude': lambda f: f is None }})
    r"""Are Insecure Ciphers allowed for SFTP?  Note:  Settting TLS Disabled -> True will always allow insecure ciphers for SFTP as well.  Enabling this is insecure."""  
    sftp_user_root_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sftp_user_root_enabled'), 'exclude': lambda f: f is None }})
    r"""Use user FTP roots also for SFTP?"""  
    sharing_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sharing_enabled'), 'exclude': lambda f: f is None }})
    r"""Allow bundle creation"""  
    show_request_access_link: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('show_request_access_link'), 'exclude': lambda f: f is None }})
    r"""Show request access link for users without access?  Currently unused."""  
    site_footer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('site_footer'), 'exclude': lambda f: f is None }})
    r"""Custom site footer text"""  
    site_header: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('site_header'), 'exclude': lambda f: f is None }})
    r"""Custom site header text"""  
    smtp_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('smtp_address'), 'exclude': lambda f: f is None }})
    r"""SMTP server hostname or IP"""  
    smtp_authentication: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('smtp_authentication'), 'exclude': lambda f: f is None }})
    r"""SMTP server authentication type"""  
    smtp_from: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('smtp_from'), 'exclude': lambda f: f is None }})
    r"""From address to use when mailing through custom SMTP"""  
    smtp_port: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('smtp_port'), 'exclude': lambda f: f is None }})
    r"""SMTP server port"""  
    smtp_username: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('smtp_username'), 'exclude': lambda f: f is None }})
    r"""SMTP server username"""  
    ssl_required: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ssl_required'), 'exclude': lambda f: f is None }})
    r"""Is SSL required?  Disabling this is insecure."""  
    subdomain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subdomain'), 'exclude': lambda f: f is None }})
    r"""Site subdomain"""  
    switch_to_plan_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('switch_to_plan_date'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""If switching plans, when does the new plan take effect?"""  
    tls_disabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tls_disabled'), 'exclude': lambda f: f is None }})
    r"""Are Insecure TLS and SFTP Ciphers allowed?  Enabling this is insecure."""  
    trial_days_left: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trial_days_left'), 'exclude': lambda f: f is None }})
    r"""Number of days left in trial"""  
    trial_until: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trial_until'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""When does this Site trial expire?"""  
    updated_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Last time this Site was updated"""  
    uploads_via_email_authentication: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uploads_via_email_authentication'), 'exclude': lambda f: f is None }})
    r"""Do incoming emails in the Inboxes require checking for SPF/DKIM/DMARC?"""  
    use_provided_modified_at: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('use_provided_modified_at'), 'exclude': lambda f: f is None }})
    r"""Allow uploaders to set `provided_modified_at` for uploaded files?"""  
    user: Optional[shared_userentity.UserEntity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user'), 'exclude': lambda f: f is None }})
    r"""Create User"""  
    user_lockout: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_lockout'), 'exclude': lambda f: f is None }})
    r"""Will users be locked out after incorrect login attempts?"""  
    user_lockout_lock_period: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_lockout_lock_period'), 'exclude': lambda f: f is None }})
    r"""How many hours to lock user out for failed password?"""  
    user_lockout_tries: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_lockout_tries'), 'exclude': lambda f: f is None }})
    r"""Number of login tries within `user_lockout_within` hours before users are locked out"""  
    user_lockout_within: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_lockout_within'), 'exclude': lambda f: f is None }})
    r"""Number of hours for user lockout window"""  
    user_requests_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_requests_enabled'), 'exclude': lambda f: f is None }})
    r"""Enable User Requests feature"""  
    user_requests_notify_admins: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_requests_notify_admins'), 'exclude': lambda f: f is None }})
    r"""Send email to site admins when a user request is received?"""  
    welcome_custom_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('welcome_custom_text'), 'exclude': lambda f: f is None }})
    r"""Custom text send in user welcome email"""  
    welcome_email_cc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('welcome_email_cc'), 'exclude': lambda f: f is None }})
    r"""Include this email in welcome emails if enabled"""  
    welcome_email_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('welcome_email_enabled'), 'exclude': lambda f: f is None }})
    r"""Will the welcome email be sent to new users?"""  
    welcome_email_subject: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('welcome_email_subject'), 'exclude': lambda f: f is None }})
    r"""Include this email subject in welcome emails if enabled"""  
    welcome_screen: Optional[SiteEntityWelcomeScreenEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('welcome_screen'), 'exclude': lambda f: f is None }})
    r"""Does the welcome screen appear?"""  
    windows_mode_ftp: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('windows_mode_ftp'), 'exclude': lambda f: f is None }})
    r"""Does FTP user Windows emulation mode?"""  
    