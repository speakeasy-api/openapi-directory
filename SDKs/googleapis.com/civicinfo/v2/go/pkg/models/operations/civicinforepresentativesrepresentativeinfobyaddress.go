// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CivicinfoRepresentativesRepresentativeInfoByAddressLevelsEnum string

const (
	CivicinfoRepresentativesRepresentativeInfoByAddressLevelsEnumInternational       CivicinfoRepresentativesRepresentativeInfoByAddressLevelsEnum = "international"
	CivicinfoRepresentativesRepresentativeInfoByAddressLevelsEnumCountry             CivicinfoRepresentativesRepresentativeInfoByAddressLevelsEnum = "country"
	CivicinfoRepresentativesRepresentativeInfoByAddressLevelsEnumAdministrativeArea1 CivicinfoRepresentativesRepresentativeInfoByAddressLevelsEnum = "administrativeArea1"
	CivicinfoRepresentativesRepresentativeInfoByAddressLevelsEnumRegional            CivicinfoRepresentativesRepresentativeInfoByAddressLevelsEnum = "regional"
	CivicinfoRepresentativesRepresentativeInfoByAddressLevelsEnumAdministrativeArea2 CivicinfoRepresentativesRepresentativeInfoByAddressLevelsEnum = "administrativeArea2"
	CivicinfoRepresentativesRepresentativeInfoByAddressLevelsEnumLocality            CivicinfoRepresentativesRepresentativeInfoByAddressLevelsEnum = "locality"
	CivicinfoRepresentativesRepresentativeInfoByAddressLevelsEnumSubLocality1        CivicinfoRepresentativesRepresentativeInfoByAddressLevelsEnum = "subLocality1"
	CivicinfoRepresentativesRepresentativeInfoByAddressLevelsEnumSubLocality2        CivicinfoRepresentativesRepresentativeInfoByAddressLevelsEnum = "subLocality2"
	CivicinfoRepresentativesRepresentativeInfoByAddressLevelsEnumSpecial             CivicinfoRepresentativesRepresentativeInfoByAddressLevelsEnum = "special"
)

func (e CivicinfoRepresentativesRepresentativeInfoByAddressLevelsEnum) ToPointer() *CivicinfoRepresentativesRepresentativeInfoByAddressLevelsEnum {
	return &e
}

func (e *CivicinfoRepresentativesRepresentativeInfoByAddressLevelsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "international":
		fallthrough
	case "country":
		fallthrough
	case "administrativeArea1":
		fallthrough
	case "regional":
		fallthrough
	case "administrativeArea2":
		fallthrough
	case "locality":
		fallthrough
	case "subLocality1":
		fallthrough
	case "subLocality2":
		fallthrough
	case "special":
		*e = CivicinfoRepresentativesRepresentativeInfoByAddressLevelsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CivicinfoRepresentativesRepresentativeInfoByAddressLevelsEnum: %v", v)
	}
}

type CivicinfoRepresentativesRepresentativeInfoByAddressRolesEnum string

const (
	CivicinfoRepresentativesRepresentativeInfoByAddressRolesEnumHeadOfState            CivicinfoRepresentativesRepresentativeInfoByAddressRolesEnum = "headOfState"
	CivicinfoRepresentativesRepresentativeInfoByAddressRolesEnumHeadOfGovernment       CivicinfoRepresentativesRepresentativeInfoByAddressRolesEnum = "headOfGovernment"
	CivicinfoRepresentativesRepresentativeInfoByAddressRolesEnumDeputyHeadOfGovernment CivicinfoRepresentativesRepresentativeInfoByAddressRolesEnum = "deputyHeadOfGovernment"
	CivicinfoRepresentativesRepresentativeInfoByAddressRolesEnumGovernmentOfficer      CivicinfoRepresentativesRepresentativeInfoByAddressRolesEnum = "governmentOfficer"
	CivicinfoRepresentativesRepresentativeInfoByAddressRolesEnumExecutiveCouncil       CivicinfoRepresentativesRepresentativeInfoByAddressRolesEnum = "executiveCouncil"
	CivicinfoRepresentativesRepresentativeInfoByAddressRolesEnumLegislatorUpperBody    CivicinfoRepresentativesRepresentativeInfoByAddressRolesEnum = "legislatorUpperBody"
	CivicinfoRepresentativesRepresentativeInfoByAddressRolesEnumLegislatorLowerBody    CivicinfoRepresentativesRepresentativeInfoByAddressRolesEnum = "legislatorLowerBody"
	CivicinfoRepresentativesRepresentativeInfoByAddressRolesEnumHighestCourtJudge      CivicinfoRepresentativesRepresentativeInfoByAddressRolesEnum = "highestCourtJudge"
	CivicinfoRepresentativesRepresentativeInfoByAddressRolesEnumJudge                  CivicinfoRepresentativesRepresentativeInfoByAddressRolesEnum = "judge"
	CivicinfoRepresentativesRepresentativeInfoByAddressRolesEnumSchoolBoard            CivicinfoRepresentativesRepresentativeInfoByAddressRolesEnum = "schoolBoard"
	CivicinfoRepresentativesRepresentativeInfoByAddressRolesEnumSpecialPurposeOfficer  CivicinfoRepresentativesRepresentativeInfoByAddressRolesEnum = "specialPurposeOfficer"
	CivicinfoRepresentativesRepresentativeInfoByAddressRolesEnumOtherRole              CivicinfoRepresentativesRepresentativeInfoByAddressRolesEnum = "otherRole"
)

func (e CivicinfoRepresentativesRepresentativeInfoByAddressRolesEnum) ToPointer() *CivicinfoRepresentativesRepresentativeInfoByAddressRolesEnum {
	return &e
}

func (e *CivicinfoRepresentativesRepresentativeInfoByAddressRolesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "headOfState":
		fallthrough
	case "headOfGovernment":
		fallthrough
	case "deputyHeadOfGovernment":
		fallthrough
	case "governmentOfficer":
		fallthrough
	case "executiveCouncil":
		fallthrough
	case "legislatorUpperBody":
		fallthrough
	case "legislatorLowerBody":
		fallthrough
	case "highestCourtJudge":
		fallthrough
	case "judge":
		fallthrough
	case "schoolBoard":
		fallthrough
	case "specialPurposeOfficer":
		fallthrough
	case "otherRole":
		*e = CivicinfoRepresentativesRepresentativeInfoByAddressRolesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CivicinfoRepresentativesRepresentativeInfoByAddressRolesEnum: %v", v)
	}
}

type CivicinfoRepresentativesRepresentativeInfoByAddressRequest struct {
	// V1 error format.
	DollarXgafv *shared.XgafvEnum `queryParam:"style=form,explode=true,name=$.xgafv"`
	// OAuth access token.
	AccessToken *string `queryParam:"style=form,explode=true,name=access_token"`
	// The address to look up. May only be specified if the field ocdId is not given in the URL
	Address *string `queryParam:"style=form,explode=true,name=address"`
	// Data format for response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// JSONP
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// Whether to return information about offices and officials. If false, only the top-level district information will be returned.
	IncludeOffices *bool `queryParam:"style=form,explode=true,name=includeOffices"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// A list of office levels to filter by. Only offices that serve at least one of these levels will be returned. Divisions that don't contain a matching office will not be returned.
	Levels []CivicinfoRepresentativesRepresentativeInfoByAddressLevelsEnum `queryParam:"style=form,explode=true,name=levels"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// A list of office roles to filter by. Only offices fulfilling one of these roles will be returned. Divisions that don't contain a matching office will not be returned.
	Roles []CivicinfoRepresentativesRepresentativeInfoByAddressRolesEnum `queryParam:"style=form,explode=true,name=roles"`
	// Legacy upload protocol for media (e.g. "media", "multipart").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Upload protocol for media (e.g. "raw", "multipart").
	UploadProtocol *string `queryParam:"style=form,explode=true,name=upload_protocol"`
}

type CivicinfoRepresentativesRepresentativeInfoByAddressResponse struct {
	ContentType string
	// Successful response
	RepresentativeInfoResponse *shared.RepresentativeInfoResponse
	StatusCode                 int
	RawResponse                *http.Response
}
