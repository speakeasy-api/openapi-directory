"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import app_permissions as shared_app_permissions
from ..shared import nullable_simple_user as shared_nullable_simple_user
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional

class InstallationRepositorySelectionEnum(str, Enum):
    r"""Describe whether all repositories have been selected or there's a selection involved"""
    ALL = 'all'
    SELECTED = 'selected'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Installation:
    r"""Installation"""
    
    access_tokens_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('access_tokens_url') }})  
    account: Any = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account') }})  
    app_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('app_id') }})  
    app_slug: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('app_slug') }})  
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    events: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('events') }})  
    html_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('html_url') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The ID of the installation."""  
    permissions: shared_app_permissions.AppPermissions = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permissions') }})
    r"""The permissions granted to the user-to-server access token."""  
    repositories_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repositories_url') }})  
    repository_selection: InstallationRepositorySelectionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repository_selection') }})
    r"""Describe whether all repositories have been selected or there's a selection involved"""  
    single_file_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('single_file_name') }})  
    suspended_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suspended_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    suspended_by: shared_nullable_simple_user.NullableSimpleUser = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suspended_by') }})
    r"""A GitHub user."""  
    target_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('target_id') }})
    r"""The ID of the user or organization this token is being scoped to."""  
    target_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('target_type') }})  
    updated_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    contact_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contact_email'), 'exclude': lambda f: f is None }})  
    has_multiple_single_files: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_multiple_single_files'), 'exclude': lambda f: f is None }})  
    single_file_paths: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('single_file_paths'), 'exclude': lambda f: f is None }})  
    