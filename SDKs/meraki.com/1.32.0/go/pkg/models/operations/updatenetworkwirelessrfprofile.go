// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UpdateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type UpdateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnum string

const (
	UpdateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnumTwo4ghz UpdateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnum = "2.4ghz"
	UpdateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnumFiveghz UpdateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnum = "5ghz"
	UpdateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnumDual    UpdateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnum = "dual"
)

func (e UpdateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnum) ToPointer() *UpdateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnum {
	return &e
}

func (e *UpdateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = UpdateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnum: %v", v)
	}
}

// UpdateNetworkWirelessRfProfileRequestBodyApBandSettings - Settings that will be enabled if selectionType is set to 'ap'.
type UpdateNetworkWirelessRfProfileRequestBodyApBandSettings struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *UpdateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
}

// UpdateNetworkWirelessRfProfileRequestBodyBandSelectionTypeEnum - Band selection can be set to either 'ssid' or 'ap'.
type UpdateNetworkWirelessRfProfileRequestBodyBandSelectionTypeEnum string

const (
	UpdateNetworkWirelessRfProfileRequestBodyBandSelectionTypeEnumAp   UpdateNetworkWirelessRfProfileRequestBodyBandSelectionTypeEnum = "ap"
	UpdateNetworkWirelessRfProfileRequestBodyBandSelectionTypeEnumSsid UpdateNetworkWirelessRfProfileRequestBodyBandSelectionTypeEnum = "ssid"
)

func (e UpdateNetworkWirelessRfProfileRequestBodyBandSelectionTypeEnum) ToPointer() *UpdateNetworkWirelessRfProfileRequestBodyBandSelectionTypeEnum {
	return &e
}

func (e *UpdateNetworkWirelessRfProfileRequestBodyBandSelectionTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ap":
		fallthrough
	case "ssid":
		*e = UpdateNetworkWirelessRfProfileRequestBodyBandSelectionTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessRfProfileRequestBodyBandSelectionTypeEnum: %v", v)
	}
}

// UpdateNetworkWirelessRfProfileRequestBodyFiveGhzSettings - Settings related to 5Ghz band
type UpdateNetworkWirelessRfProfileRequestBodyFiveGhzSettings struct {
	// Sets channel width (MHz) for 5Ghz band. Can be one of 'auto', '20', '40' or '80'.
	ChannelWidth *string `json:"channelWidth,omitempty"`
	// Sets max power (dBm) of 5Ghz band. Can be integer between 2 and 30.
	MaxPower *int64 `json:"maxPower,omitempty"`
	// Sets min bitrate (Mbps) of 5Ghz band. Can be one of '6', '9', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *int64 `json:"minBitrate,omitempty"`
	// Sets min power (dBm) of 5Ghz band. Can be integer between 2 and 30.
	MinPower *int64 `json:"minPower,omitempty"`
	// The RX-SOP level controls the sensitivity of the radio. It is strongly recommended to use RX-SOP only after consulting a wireless expert. RX-SOP can be configured in the range of -65 to -95 (dBm). A value of null will reset this to the default.
	Rxsop *int64 `json:"rxsop,omitempty"`
	// Sets valid auto channels for 5Ghz band. Can be one of '36', '40', '44', '48', '52', '56', '60', '64', '100', '104', '108', '112', '116', '120', '124', '128', '132', '136', '140', '144', '149', '153', '157', '161' or '165'.
	ValidAutoChannels []int64 `json:"validAutoChannels,omitempty"`
}

// UpdateNetworkWirelessRfProfileRequestBodyMinBitrateTypeEnum - Minimum bitrate can be set to either 'band' or 'ssid'.
type UpdateNetworkWirelessRfProfileRequestBodyMinBitrateTypeEnum string

const (
	UpdateNetworkWirelessRfProfileRequestBodyMinBitrateTypeEnumBand UpdateNetworkWirelessRfProfileRequestBodyMinBitrateTypeEnum = "band"
	UpdateNetworkWirelessRfProfileRequestBodyMinBitrateTypeEnumSsid UpdateNetworkWirelessRfProfileRequestBodyMinBitrateTypeEnum = "ssid"
)

func (e UpdateNetworkWirelessRfProfileRequestBodyMinBitrateTypeEnum) ToPointer() *UpdateNetworkWirelessRfProfileRequestBodyMinBitrateTypeEnum {
	return &e
}

func (e *UpdateNetworkWirelessRfProfileRequestBodyMinBitrateTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "band":
		fallthrough
	case "ssid":
		*e = UpdateNetworkWirelessRfProfileRequestBodyMinBitrateTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessRfProfileRequestBodyMinBitrateTypeEnum: %v", v)
	}
}

// UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings0BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings0BandOperationModeEnum string

const (
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings0BandOperationModeEnumTwo4ghz UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings0BandOperationModeEnum = "2.4ghz"
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings0BandOperationModeEnumFiveghz UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings0BandOperationModeEnum = "5ghz"
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings0BandOperationModeEnumDual    UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings0BandOperationModeEnum = "dual"
)

func (e UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings0BandOperationModeEnum) ToPointer() *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings0BandOperationModeEnum {
	return &e
}

func (e *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings0BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings0BandOperationModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings0BandOperationModeEnum: %v", v)
	}
}

// UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings0 - Settings for SSID 0
type UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings0 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings0BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *float32 `json:"minBitrate,omitempty"`
}

// UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings1BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings1BandOperationModeEnum string

const (
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings1BandOperationModeEnumTwo4ghz UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings1BandOperationModeEnum = "2.4ghz"
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings1BandOperationModeEnumFiveghz UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings1BandOperationModeEnum = "5ghz"
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings1BandOperationModeEnumDual    UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings1BandOperationModeEnum = "dual"
)

func (e UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings1BandOperationModeEnum) ToPointer() *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings1BandOperationModeEnum {
	return &e
}

func (e *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings1BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings1BandOperationModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings1BandOperationModeEnum: %v", v)
	}
}

// UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings1 - Settings for SSID 1
type UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings1 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings1BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *float32 `json:"minBitrate,omitempty"`
}

// UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings10BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings10BandOperationModeEnum string

const (
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings10BandOperationModeEnumTwo4ghz UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings10BandOperationModeEnum = "2.4ghz"
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings10BandOperationModeEnumFiveghz UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings10BandOperationModeEnum = "5ghz"
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings10BandOperationModeEnumDual    UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings10BandOperationModeEnum = "dual"
)

func (e UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings10BandOperationModeEnum) ToPointer() *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings10BandOperationModeEnum {
	return &e
}

func (e *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings10BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings10BandOperationModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings10BandOperationModeEnum: %v", v)
	}
}

// UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings10 - Settings for SSID 10
type UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings10 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings10BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *float32 `json:"minBitrate,omitempty"`
}

// UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings11BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings11BandOperationModeEnum string

const (
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings11BandOperationModeEnumTwo4ghz UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings11BandOperationModeEnum = "2.4ghz"
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings11BandOperationModeEnumFiveghz UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings11BandOperationModeEnum = "5ghz"
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings11BandOperationModeEnumDual    UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings11BandOperationModeEnum = "dual"
)

func (e UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings11BandOperationModeEnum) ToPointer() *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings11BandOperationModeEnum {
	return &e
}

func (e *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings11BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings11BandOperationModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings11BandOperationModeEnum: %v", v)
	}
}

// UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings11 - Settings for SSID 11
type UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings11 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings11BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *float32 `json:"minBitrate,omitempty"`
}

// UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings12BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings12BandOperationModeEnum string

const (
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings12BandOperationModeEnumTwo4ghz UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings12BandOperationModeEnum = "2.4ghz"
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings12BandOperationModeEnumFiveghz UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings12BandOperationModeEnum = "5ghz"
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings12BandOperationModeEnumDual    UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings12BandOperationModeEnum = "dual"
)

func (e UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings12BandOperationModeEnum) ToPointer() *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings12BandOperationModeEnum {
	return &e
}

func (e *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings12BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings12BandOperationModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings12BandOperationModeEnum: %v", v)
	}
}

// UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings12 - Settings for SSID 12
type UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings12 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings12BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *float32 `json:"minBitrate,omitempty"`
}

// UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings13BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings13BandOperationModeEnum string

const (
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings13BandOperationModeEnumTwo4ghz UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings13BandOperationModeEnum = "2.4ghz"
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings13BandOperationModeEnumFiveghz UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings13BandOperationModeEnum = "5ghz"
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings13BandOperationModeEnumDual    UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings13BandOperationModeEnum = "dual"
)

func (e UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings13BandOperationModeEnum) ToPointer() *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings13BandOperationModeEnum {
	return &e
}

func (e *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings13BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings13BandOperationModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings13BandOperationModeEnum: %v", v)
	}
}

// UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings13 - Settings for SSID 13
type UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings13 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings13BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *float32 `json:"minBitrate,omitempty"`
}

// UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings14BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings14BandOperationModeEnum string

const (
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings14BandOperationModeEnumTwo4ghz UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings14BandOperationModeEnum = "2.4ghz"
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings14BandOperationModeEnumFiveghz UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings14BandOperationModeEnum = "5ghz"
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings14BandOperationModeEnumDual    UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings14BandOperationModeEnum = "dual"
)

func (e UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings14BandOperationModeEnum) ToPointer() *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings14BandOperationModeEnum {
	return &e
}

func (e *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings14BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings14BandOperationModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings14BandOperationModeEnum: %v", v)
	}
}

// UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings14 - Settings for SSID 14
type UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings14 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings14BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *float32 `json:"minBitrate,omitempty"`
}

// UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings2BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings2BandOperationModeEnum string

const (
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings2BandOperationModeEnumTwo4ghz UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings2BandOperationModeEnum = "2.4ghz"
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings2BandOperationModeEnumFiveghz UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings2BandOperationModeEnum = "5ghz"
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings2BandOperationModeEnumDual    UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings2BandOperationModeEnum = "dual"
)

func (e UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings2BandOperationModeEnum) ToPointer() *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings2BandOperationModeEnum {
	return &e
}

func (e *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings2BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings2BandOperationModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings2BandOperationModeEnum: %v", v)
	}
}

// UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings2 - Settings for SSID 2
type UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings2 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings2BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *float32 `json:"minBitrate,omitempty"`
}

// UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings3BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings3BandOperationModeEnum string

const (
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings3BandOperationModeEnumTwo4ghz UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings3BandOperationModeEnum = "2.4ghz"
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings3BandOperationModeEnumFiveghz UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings3BandOperationModeEnum = "5ghz"
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings3BandOperationModeEnumDual    UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings3BandOperationModeEnum = "dual"
)

func (e UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings3BandOperationModeEnum) ToPointer() *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings3BandOperationModeEnum {
	return &e
}

func (e *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings3BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings3BandOperationModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings3BandOperationModeEnum: %v", v)
	}
}

// UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings3 - Settings for SSID 3
type UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings3 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings3BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *float32 `json:"minBitrate,omitempty"`
}

// UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings4BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings4BandOperationModeEnum string

const (
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings4BandOperationModeEnumTwo4ghz UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings4BandOperationModeEnum = "2.4ghz"
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings4BandOperationModeEnumFiveghz UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings4BandOperationModeEnum = "5ghz"
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings4BandOperationModeEnumDual    UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings4BandOperationModeEnum = "dual"
)

func (e UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings4BandOperationModeEnum) ToPointer() *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings4BandOperationModeEnum {
	return &e
}

func (e *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings4BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings4BandOperationModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings4BandOperationModeEnum: %v", v)
	}
}

// UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings4 - Settings for SSID 4
type UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings4 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings4BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *float32 `json:"minBitrate,omitempty"`
}

// UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings5BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings5BandOperationModeEnum string

const (
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings5BandOperationModeEnumTwo4ghz UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings5BandOperationModeEnum = "2.4ghz"
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings5BandOperationModeEnumFiveghz UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings5BandOperationModeEnum = "5ghz"
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings5BandOperationModeEnumDual    UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings5BandOperationModeEnum = "dual"
)

func (e UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings5BandOperationModeEnum) ToPointer() *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings5BandOperationModeEnum {
	return &e
}

func (e *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings5BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings5BandOperationModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings5BandOperationModeEnum: %v", v)
	}
}

// UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings5 - Settings for SSID 5
type UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings5 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings5BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *float32 `json:"minBitrate,omitempty"`
}

// UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings6BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings6BandOperationModeEnum string

const (
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings6BandOperationModeEnumTwo4ghz UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings6BandOperationModeEnum = "2.4ghz"
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings6BandOperationModeEnumFiveghz UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings6BandOperationModeEnum = "5ghz"
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings6BandOperationModeEnumDual    UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings6BandOperationModeEnum = "dual"
)

func (e UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings6BandOperationModeEnum) ToPointer() *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings6BandOperationModeEnum {
	return &e
}

func (e *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings6BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings6BandOperationModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings6BandOperationModeEnum: %v", v)
	}
}

// UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings6 - Settings for SSID 6
type UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings6 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings6BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *float32 `json:"minBitrate,omitempty"`
}

// UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings7BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings7BandOperationModeEnum string

const (
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings7BandOperationModeEnumTwo4ghz UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings7BandOperationModeEnum = "2.4ghz"
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings7BandOperationModeEnumFiveghz UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings7BandOperationModeEnum = "5ghz"
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings7BandOperationModeEnumDual    UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings7BandOperationModeEnum = "dual"
)

func (e UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings7BandOperationModeEnum) ToPointer() *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings7BandOperationModeEnum {
	return &e
}

func (e *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings7BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings7BandOperationModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings7BandOperationModeEnum: %v", v)
	}
}

// UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings7 - Settings for SSID 7
type UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings7 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings7BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *float32 `json:"minBitrate,omitempty"`
}

// UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings8BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings8BandOperationModeEnum string

const (
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings8BandOperationModeEnumTwo4ghz UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings8BandOperationModeEnum = "2.4ghz"
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings8BandOperationModeEnumFiveghz UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings8BandOperationModeEnum = "5ghz"
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings8BandOperationModeEnumDual    UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings8BandOperationModeEnum = "dual"
)

func (e UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings8BandOperationModeEnum) ToPointer() *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings8BandOperationModeEnum {
	return &e
}

func (e *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings8BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings8BandOperationModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings8BandOperationModeEnum: %v", v)
	}
}

// UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings8 - Settings for SSID 8
type UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings8 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings8BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *float32 `json:"minBitrate,omitempty"`
}

// UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings9BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings9BandOperationModeEnum string

const (
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings9BandOperationModeEnumTwo4ghz UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings9BandOperationModeEnum = "2.4ghz"
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings9BandOperationModeEnumFiveghz UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings9BandOperationModeEnum = "5ghz"
	UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings9BandOperationModeEnumDual    UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings9BandOperationModeEnum = "dual"
)

func (e UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings9BandOperationModeEnum) ToPointer() *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings9BandOperationModeEnum {
	return &e
}

func (e *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings9BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings9BandOperationModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings9BandOperationModeEnum: %v", v)
	}
}

// UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings9 - Settings for SSID 9
type UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings9 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings9BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *float32 `json:"minBitrate,omitempty"`
}

// UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings - Per-SSID radio settings by number.
type UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings struct {
	// Settings for SSID 0
	Zero *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings0 `json:"0,omitempty"`
	// Settings for SSID 1
	One *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings1 `json:"1,omitempty"`
	// Settings for SSID 10
	Ten *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings10 `json:"10,omitempty"`
	// Settings for SSID 11
	Eleven *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings11 `json:"11,omitempty"`
	// Settings for SSID 12
	Twelve *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings12 `json:"12,omitempty"`
	// Settings for SSID 13
	Thirteen *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings13 `json:"13,omitempty"`
	// Settings for SSID 14
	Fourteen *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings14 `json:"14,omitempty"`
	// Settings for SSID 2
	Two *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings2 `json:"2,omitempty"`
	// Settings for SSID 3
	Three *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings3 `json:"3,omitempty"`
	// Settings for SSID 4
	Four *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings4 `json:"4,omitempty"`
	// Settings for SSID 5
	Five *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings5 `json:"5,omitempty"`
	// Settings for SSID 6
	Six *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings6 `json:"6,omitempty"`
	// Settings for SSID 7
	Seven *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings7 `json:"7,omitempty"`
	// Settings for SSID 8
	Eight *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings8 `json:"8,omitempty"`
	// Settings for SSID 9
	Nine *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings9 `json:"9,omitempty"`
}

// UpdateNetworkWirelessRfProfileRequestBodyTransmission - Settings related to radio transmission.
type UpdateNetworkWirelessRfProfileRequestBodyTransmission struct {
	// Toggle for radio transmission. When false, radios will not transmit at all.
	Enabled *bool `json:"enabled,omitempty"`
}

// UpdateNetworkWirelessRfProfileRequestBodyTwoFourGhzSettings - Settings related to 2.4Ghz band
type UpdateNetworkWirelessRfProfileRequestBodyTwoFourGhzSettings struct {
	// Determines whether ax radio on 2.4Ghz band is on or off. Can be either true or false. If false, we highly recommend disabling band steering.
	AxEnabled *bool `json:"axEnabled,omitempty"`
	// Sets max power (dBm) of 2.4Ghz band. Can be integer between 2 and 30.
	MaxPower *int64 `json:"maxPower,omitempty"`
	// Sets min bitrate (Mbps) of 2.4Ghz band. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *float32 `json:"minBitrate,omitempty"`
	// Sets min power (dBm) of 2.4Ghz band. Can be integer between 2 and 30.
	MinPower *int64 `json:"minPower,omitempty"`
	// The RX-SOP level controls the sensitivity of the radio. It is strongly recommended to use RX-SOP only after consulting a wireless expert. RX-SOP can be configured in the range of -65 to -95 (dBm). A value of null will reset this to the default.
	Rxsop *int64 `json:"rxsop,omitempty"`
	// Sets valid auto channels for 2.4Ghz band. Can be one of '1', '6' or '11'.
	ValidAutoChannels []int64 `json:"validAutoChannels,omitempty"`
}

type UpdateNetworkWirelessRfProfileRequestBody struct {
	// Settings that will be enabled if selectionType is set to 'ap'.
	ApBandSettings *UpdateNetworkWirelessRfProfileRequestBodyApBandSettings `json:"apBandSettings,omitempty"`
	// Band selection can be set to either 'ssid' or 'ap'.
	BandSelectionType *UpdateNetworkWirelessRfProfileRequestBodyBandSelectionTypeEnum `json:"bandSelectionType,omitempty"`
	// Steers client to best available access point. Can be either true or false.
	ClientBalancingEnabled *bool `json:"clientBalancingEnabled,omitempty"`
	// Settings related to 5Ghz band
	FiveGhzSettings *UpdateNetworkWirelessRfProfileRequestBodyFiveGhzSettings `json:"fiveGhzSettings,omitempty"`
	// Minimum bitrate can be set to either 'band' or 'ssid'.
	MinBitrateType *UpdateNetworkWirelessRfProfileRequestBodyMinBitrateTypeEnum `json:"minBitrateType,omitempty"`
	// The name of the new profile. Must be unique.
	Name *string `json:"name,omitempty"`
	// Per-SSID radio settings by number.
	PerSsidSettings *UpdateNetworkWirelessRfProfileRequestBodyPerSsidSettings `json:"perSsidSettings,omitempty"`
	// Settings related to radio transmission.
	Transmission *UpdateNetworkWirelessRfProfileRequestBodyTransmission `json:"transmission,omitempty"`
	// Settings related to 2.4Ghz band
	TwoFourGhzSettings *UpdateNetworkWirelessRfProfileRequestBodyTwoFourGhzSettings `json:"twoFourGhzSettings,omitempty"`
}

type UpdateNetworkWirelessRfProfileRequest struct {
	RequestBody *UpdateNetworkWirelessRfProfileRequestBody `request:"mediaType=application/json"`
	NetworkID   string                                     `pathParam:"style=simple,explode=false,name=networkId"`
	RfProfileID string                                     `pathParam:"style=simple,explode=false,name=rfProfileId"`
}

// UpdateNetworkWirelessRfProfile200ApplicationJSONApBandSettings - Settings that will be enabled if selectionType is set to 'ap'.
type UpdateNetworkWirelessRfProfile200ApplicationJSONApBandSettings struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'. Defaults to dual.
	BandOperationMode *string `json:"bandOperationMode,omitempty"`
	// Steers client to most open band. Can be either true or false. Defaults to true.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
}

// UpdateNetworkWirelessRfProfile200ApplicationJSONFiveGhzSettings - Settings related to 5Ghz band
type UpdateNetworkWirelessRfProfile200ApplicationJSONFiveGhzSettings struct {
	// Sets channel width (MHz) for 5Ghz band. Can be one of 'auto', '20', '40' or '80'. Defaults to auto.
	ChannelWidth *string `json:"channelWidth,omitempty"`
	// Sets max power (dBm) of 5Ghz band. Can be integer between 2 and 30. Defaults to 30.
	MaxPower *int64 `json:"maxPower,omitempty"`
	// Sets min bitrate (Mbps) of 5Ghz band. Can be one of '6', '9', '12', '18', '24', '36', '48' or '54'. Defaults to 12.
	MinBitrate *int64 `json:"minBitrate,omitempty"`
	// Sets min power (dBm) of 5Ghz band. Can be integer between 2 and 30. Defaults to 8.
	MinPower *int64 `json:"minPower,omitempty"`
	// The RX-SOP level controls the sensitivity of the radio. It is strongly recommended to use RX-SOP only after consulting a wireless expert. RX-SOP can be configured in the range of -65 to -95 (dBm). A value of null will reset this to the default.
	Rxsop *int64 `json:"rxsop,omitempty"`
	// Sets valid auto channels for 5Ghz band. Can be one of '36', '40', '44', '48', '52', '56', '60', '64', '100', '104', '108', '112', '116', '120', '124', '128', '132', '136', '140', '144', '149', '153', '157', '161' or '165'.Defaults to [36, 40, 44, 48, 52, 56, 60, 64, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 144, 149, 153, 157, 161, 165].
	ValidAutoChannels []int64 `json:"validAutoChannels,omitempty"`
}

// UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings0BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings0BandOperationModeEnum string

const (
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings0BandOperationModeEnumTwo4ghz UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings0BandOperationModeEnum = "2.4ghz"
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings0BandOperationModeEnumFiveghz UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings0BandOperationModeEnum = "5ghz"
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings0BandOperationModeEnumDual    UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings0BandOperationModeEnum = "dual"
)

func (e UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings0BandOperationModeEnum) ToPointer() *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings0BandOperationModeEnum {
	return &e
}

func (e *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings0BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings0BandOperationModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings0BandOperationModeEnum: %v", v)
	}
}

// UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings0 - Settings for SSID 0
type UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings0 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings0BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *int64 `json:"minBitrate,omitempty"`
	// Name of SSID
	Name *string `json:"name,omitempty"`
}

// UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings1BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings1BandOperationModeEnum string

const (
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings1BandOperationModeEnumTwo4ghz UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings1BandOperationModeEnum = "2.4ghz"
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings1BandOperationModeEnumFiveghz UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings1BandOperationModeEnum = "5ghz"
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings1BandOperationModeEnumDual    UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings1BandOperationModeEnum = "dual"
)

func (e UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings1BandOperationModeEnum) ToPointer() *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings1BandOperationModeEnum {
	return &e
}

func (e *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings1BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings1BandOperationModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings1BandOperationModeEnum: %v", v)
	}
}

// UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings1 - Settings for SSID 1
type UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings1 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings1BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *int64 `json:"minBitrate,omitempty"`
	// Name of SSID
	Name *string `json:"name,omitempty"`
}

// UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings10BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings10BandOperationModeEnum string

const (
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings10BandOperationModeEnumTwo4ghz UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings10BandOperationModeEnum = "2.4ghz"
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings10BandOperationModeEnumFiveghz UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings10BandOperationModeEnum = "5ghz"
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings10BandOperationModeEnumDual    UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings10BandOperationModeEnum = "dual"
)

func (e UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings10BandOperationModeEnum) ToPointer() *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings10BandOperationModeEnum {
	return &e
}

func (e *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings10BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings10BandOperationModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings10BandOperationModeEnum: %v", v)
	}
}

// UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings10 - Settings for SSID 10
type UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings10 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings10BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *int64 `json:"minBitrate,omitempty"`
	// Name of SSID
	Name *string `json:"name,omitempty"`
}

// UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings11BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings11BandOperationModeEnum string

const (
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings11BandOperationModeEnumTwo4ghz UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings11BandOperationModeEnum = "2.4ghz"
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings11BandOperationModeEnumFiveghz UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings11BandOperationModeEnum = "5ghz"
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings11BandOperationModeEnumDual    UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings11BandOperationModeEnum = "dual"
)

func (e UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings11BandOperationModeEnum) ToPointer() *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings11BandOperationModeEnum {
	return &e
}

func (e *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings11BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings11BandOperationModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings11BandOperationModeEnum: %v", v)
	}
}

// UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings11 - Settings for SSID 11
type UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings11 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings11BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *int64 `json:"minBitrate,omitempty"`
	// Name of SSID
	Name *string `json:"name,omitempty"`
}

// UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings12BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings12BandOperationModeEnum string

const (
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings12BandOperationModeEnumTwo4ghz UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings12BandOperationModeEnum = "2.4ghz"
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings12BandOperationModeEnumFiveghz UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings12BandOperationModeEnum = "5ghz"
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings12BandOperationModeEnumDual    UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings12BandOperationModeEnum = "dual"
)

func (e UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings12BandOperationModeEnum) ToPointer() *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings12BandOperationModeEnum {
	return &e
}

func (e *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings12BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings12BandOperationModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings12BandOperationModeEnum: %v", v)
	}
}

// UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings12 - Settings for SSID 12
type UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings12 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings12BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *int64 `json:"minBitrate,omitempty"`
	// Name of SSID
	Name *string `json:"name,omitempty"`
}

// UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings13BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings13BandOperationModeEnum string

const (
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings13BandOperationModeEnumTwo4ghz UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings13BandOperationModeEnum = "2.4ghz"
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings13BandOperationModeEnumFiveghz UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings13BandOperationModeEnum = "5ghz"
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings13BandOperationModeEnumDual    UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings13BandOperationModeEnum = "dual"
)

func (e UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings13BandOperationModeEnum) ToPointer() *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings13BandOperationModeEnum {
	return &e
}

func (e *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings13BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings13BandOperationModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings13BandOperationModeEnum: %v", v)
	}
}

// UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings13 - Settings for SSID 13
type UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings13 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings13BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *int64 `json:"minBitrate,omitempty"`
	// Name of SSID
	Name *string `json:"name,omitempty"`
}

// UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings14BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings14BandOperationModeEnum string

const (
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings14BandOperationModeEnumTwo4ghz UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings14BandOperationModeEnum = "2.4ghz"
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings14BandOperationModeEnumFiveghz UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings14BandOperationModeEnum = "5ghz"
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings14BandOperationModeEnumDual    UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings14BandOperationModeEnum = "dual"
)

func (e UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings14BandOperationModeEnum) ToPointer() *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings14BandOperationModeEnum {
	return &e
}

func (e *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings14BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings14BandOperationModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings14BandOperationModeEnum: %v", v)
	}
}

// UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings14 - Settings for SSID 14
type UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings14 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings14BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *int64 `json:"minBitrate,omitempty"`
	// Name of SSID
	Name *string `json:"name,omitempty"`
}

// UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings2BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings2BandOperationModeEnum string

const (
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings2BandOperationModeEnumTwo4ghz UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings2BandOperationModeEnum = "2.4ghz"
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings2BandOperationModeEnumFiveghz UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings2BandOperationModeEnum = "5ghz"
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings2BandOperationModeEnumDual    UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings2BandOperationModeEnum = "dual"
)

func (e UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings2BandOperationModeEnum) ToPointer() *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings2BandOperationModeEnum {
	return &e
}

func (e *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings2BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings2BandOperationModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings2BandOperationModeEnum: %v", v)
	}
}

// UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings2 - Settings for SSID 2
type UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings2 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings2BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *int64 `json:"minBitrate,omitempty"`
	// Name of SSID
	Name *string `json:"name,omitempty"`
}

// UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings3BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings3BandOperationModeEnum string

const (
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings3BandOperationModeEnumTwo4ghz UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings3BandOperationModeEnum = "2.4ghz"
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings3BandOperationModeEnumFiveghz UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings3BandOperationModeEnum = "5ghz"
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings3BandOperationModeEnumDual    UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings3BandOperationModeEnum = "dual"
)

func (e UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings3BandOperationModeEnum) ToPointer() *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings3BandOperationModeEnum {
	return &e
}

func (e *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings3BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings3BandOperationModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings3BandOperationModeEnum: %v", v)
	}
}

// UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings3 - Settings for SSID 3
type UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings3 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings3BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *int64 `json:"minBitrate,omitempty"`
	// Name of SSID
	Name *string `json:"name,omitempty"`
}

// UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings4BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings4BandOperationModeEnum string

const (
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings4BandOperationModeEnumTwo4ghz UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings4BandOperationModeEnum = "2.4ghz"
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings4BandOperationModeEnumFiveghz UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings4BandOperationModeEnum = "5ghz"
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings4BandOperationModeEnumDual    UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings4BandOperationModeEnum = "dual"
)

func (e UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings4BandOperationModeEnum) ToPointer() *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings4BandOperationModeEnum {
	return &e
}

func (e *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings4BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings4BandOperationModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings4BandOperationModeEnum: %v", v)
	}
}

// UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings4 - Settings for SSID 4
type UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings4 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings4BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *int64 `json:"minBitrate,omitempty"`
	// Name of SSID
	Name *string `json:"name,omitempty"`
}

// UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings5BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings5BandOperationModeEnum string

const (
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings5BandOperationModeEnumTwo4ghz UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings5BandOperationModeEnum = "2.4ghz"
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings5BandOperationModeEnumFiveghz UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings5BandOperationModeEnum = "5ghz"
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings5BandOperationModeEnumDual    UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings5BandOperationModeEnum = "dual"
)

func (e UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings5BandOperationModeEnum) ToPointer() *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings5BandOperationModeEnum {
	return &e
}

func (e *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings5BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings5BandOperationModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings5BandOperationModeEnum: %v", v)
	}
}

// UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings5 - Settings for SSID 5
type UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings5 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings5BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *int64 `json:"minBitrate,omitempty"`
	// Name of SSID
	Name *string `json:"name,omitempty"`
}

// UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings6BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings6BandOperationModeEnum string

const (
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings6BandOperationModeEnumTwo4ghz UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings6BandOperationModeEnum = "2.4ghz"
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings6BandOperationModeEnumFiveghz UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings6BandOperationModeEnum = "5ghz"
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings6BandOperationModeEnumDual    UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings6BandOperationModeEnum = "dual"
)

func (e UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings6BandOperationModeEnum) ToPointer() *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings6BandOperationModeEnum {
	return &e
}

func (e *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings6BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings6BandOperationModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings6BandOperationModeEnum: %v", v)
	}
}

// UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings6 - Settings for SSID 6
type UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings6 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings6BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *int64 `json:"minBitrate,omitempty"`
	// Name of SSID
	Name *string `json:"name,omitempty"`
}

// UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings7BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings7BandOperationModeEnum string

const (
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings7BandOperationModeEnumTwo4ghz UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings7BandOperationModeEnum = "2.4ghz"
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings7BandOperationModeEnumFiveghz UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings7BandOperationModeEnum = "5ghz"
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings7BandOperationModeEnumDual    UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings7BandOperationModeEnum = "dual"
)

func (e UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings7BandOperationModeEnum) ToPointer() *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings7BandOperationModeEnum {
	return &e
}

func (e *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings7BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings7BandOperationModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings7BandOperationModeEnum: %v", v)
	}
}

// UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings7 - Settings for SSID 7
type UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings7 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings7BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *int64 `json:"minBitrate,omitempty"`
	// Name of SSID
	Name *string `json:"name,omitempty"`
}

// UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings8BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings8BandOperationModeEnum string

const (
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings8BandOperationModeEnumTwo4ghz UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings8BandOperationModeEnum = "2.4ghz"
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings8BandOperationModeEnumFiveghz UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings8BandOperationModeEnum = "5ghz"
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings8BandOperationModeEnumDual    UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings8BandOperationModeEnum = "dual"
)

func (e UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings8BandOperationModeEnum) ToPointer() *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings8BandOperationModeEnum {
	return &e
}

func (e *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings8BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings8BandOperationModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings8BandOperationModeEnum: %v", v)
	}
}

// UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings8 - Settings for SSID 8
type UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings8 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings8BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *int64 `json:"minBitrate,omitempty"`
	// Name of SSID
	Name *string `json:"name,omitempty"`
}

// UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings9BandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings9BandOperationModeEnum string

const (
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings9BandOperationModeEnumTwo4ghz UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings9BandOperationModeEnum = "2.4ghz"
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings9BandOperationModeEnumFiveghz UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings9BandOperationModeEnum = "5ghz"
	UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings9BandOperationModeEnumDual    UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings9BandOperationModeEnum = "dual"
)

func (e UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings9BandOperationModeEnum) ToPointer() *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings9BandOperationModeEnum {
	return &e
}

func (e *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings9BandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings9BandOperationModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings9BandOperationModeEnum: %v", v)
	}
}

// UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings9 - Settings for SSID 9
type UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings9 struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings9BandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *int64 `json:"minBitrate,omitempty"`
	// Name of SSID
	Name *string `json:"name,omitempty"`
}

// UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings - Per-SSID radio settings by number.
type UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings struct {
	// Settings for SSID 0
	Zero *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings0 `json:"0,omitempty"`
	// Settings for SSID 1
	One *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings1 `json:"1,omitempty"`
	// Settings for SSID 10
	Ten *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings10 `json:"10,omitempty"`
	// Settings for SSID 11
	Eleven *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings11 `json:"11,omitempty"`
	// Settings for SSID 12
	Twelve *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings12 `json:"12,omitempty"`
	// Settings for SSID 13
	Thirteen *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings13 `json:"13,omitempty"`
	// Settings for SSID 14
	Fourteen *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings14 `json:"14,omitempty"`
	// Settings for SSID 2
	Two *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings2 `json:"2,omitempty"`
	// Settings for SSID 3
	Three *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings3 `json:"3,omitempty"`
	// Settings for SSID 4
	Four *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings4 `json:"4,omitempty"`
	// Settings for SSID 5
	Five *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings5 `json:"5,omitempty"`
	// Settings for SSID 6
	Six *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings6 `json:"6,omitempty"`
	// Settings for SSID 7
	Seven *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings7 `json:"7,omitempty"`
	// Settings for SSID 8
	Eight *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings8 `json:"8,omitempty"`
	// Settings for SSID 9
	Nine *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings9 `json:"9,omitempty"`
}

// UpdateNetworkWirelessRfProfile200ApplicationJSONTransmission - Settings related to radio transmission.
type UpdateNetworkWirelessRfProfile200ApplicationJSONTransmission struct {
	// Toggle for radio transmission. When false, radios will not transmit at all.
	Enabled *bool `json:"enabled,omitempty"`
}

// UpdateNetworkWirelessRfProfile200ApplicationJSONTwoFourGhzSettings - Settings related to 2.4Ghz band
type UpdateNetworkWirelessRfProfile200ApplicationJSONTwoFourGhzSettings struct {
	// Determines whether ax radio on 2.4Ghz band is on or off. Can be either true or false. If false, we highly recommend disabling band steering. Defaults to true.
	AxEnabled *bool `json:"axEnabled,omitempty"`
	// Sets max power (dBm) of 2.4Ghz band. Can be integer between 2 and 30. Defaults to 30.
	MaxPower *int64 `json:"maxPower,omitempty"`
	// Sets min bitrate (Mbps) of 2.4Ghz band. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'. Defaults to 11.
	MinBitrate *float32 `json:"minBitrate,omitempty"`
	// Sets min power (dBm) of 2.4Ghz band. Can be integer between 2 and 30. Defaults to 5.
	MinPower *int64 `json:"minPower,omitempty"`
	// The RX-SOP level controls the sensitivity of the radio. It is strongly recommended to use RX-SOP only after consulting a wireless expert. RX-SOP can be configured in the range of -65 to -95 (dBm). A value of null will reset this to the default.
	Rxsop *int64 `json:"rxsop,omitempty"`
	// Sets valid auto channels for 2.4Ghz band. Can be one of '1', '6' or '11'. Defaults to [1, 6, 11].
	ValidAutoChannels []int64 `json:"validAutoChannels,omitempty"`
}

// UpdateNetworkWirelessRfProfile200ApplicationJSON - Successful operation
type UpdateNetworkWirelessRfProfile200ApplicationJSON struct {
	// Settings that will be enabled if selectionType is set to 'ap'.
	ApBandSettings *UpdateNetworkWirelessRfProfile200ApplicationJSONApBandSettings `json:"apBandSettings,omitempty"`
	// Band selection can be set to either 'ssid' or 'ap'. This param is required on creation.
	BandSelectionType *string `json:"bandSelectionType,omitempty"`
	// Steers client to best available access point. Can be either true or false. Defaults to true.
	ClientBalancingEnabled *bool `json:"clientBalancingEnabled,omitempty"`
	// Settings related to 5Ghz band
	FiveGhzSettings *UpdateNetworkWirelessRfProfile200ApplicationJSONFiveGhzSettings `json:"fiveGhzSettings,omitempty"`
	// The name of the new profile. Must be unique.
	ID *string `json:"id,omitempty"`
	// Minimum bitrate can be set to either 'band' or 'ssid'. Defaults to band.
	MinBitrateType *string `json:"minBitrateType,omitempty"`
	// The name of the new profile. Must be unique. This param is required on creation.
	Name *string `json:"name,omitempty"`
	// The network ID of the RF Profile
	NetworkID *string `json:"networkId,omitempty"`
	// Per-SSID radio settings by number.
	PerSsidSettings *UpdateNetworkWirelessRfProfile200ApplicationJSONPerSsidSettings `json:"perSsidSettings,omitempty"`
	// Settings related to radio transmission.
	Transmission *UpdateNetworkWirelessRfProfile200ApplicationJSONTransmission `json:"transmission,omitempty"`
	// Settings related to 2.4Ghz band
	TwoFourGhzSettings *UpdateNetworkWirelessRfProfile200ApplicationJSONTwoFourGhzSettings `json:"twoFourGhzSettings,omitempty"`
}

type UpdateNetworkWirelessRfProfileResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateNetworkWirelessRfProfile200ApplicationJSONObject *UpdateNetworkWirelessRfProfile200ApplicationJSON
}
