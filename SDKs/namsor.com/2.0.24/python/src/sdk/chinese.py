"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Chinese:
    r"""CHINESE special features"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def chinese_name_candidates(self, request: operations.ChineseNameCandidatesRequest, security: operations.ChineseNameCandidatesSecurity) -> operations.ChineseNameCandidatesResponse:
        r"""Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ChineseNameCandidatesRequest, base_url, '/api2/json/chineseNameCandidates/{chineseSurnameLatin}/{chineseGivenNameLatin}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChineseNameCandidatesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NameMatchCandidatesOut])
                res.name_match_candidates_out = out
        elif http_res.status_code in [401, 403]:
            pass

        return res

    def chinese_name_candidates_batch(self, request: shared.BatchFirstLastNameIn, security: operations.ChineseNameCandidatesBatchSecurity) -> operations.ChineseNameCandidatesBatchResponse:
        r"""Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname), ex. Wang Xiaoming"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api2/json/chineseNameCandidatesBatch'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChineseNameCandidatesBatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchNameMatchCandidatesOut])
                res.batch_name_match_candidates_out = out
        elif http_res.status_code in [400, 401, 403]:
            pass

        return res

    def chinese_name_candidates_gender_batch(self, request: shared.BatchFirstLastNameGenderIn, security: operations.ChineseNameCandidatesGenderBatchSecurity) -> operations.ChineseNameCandidatesGenderBatchResponse:
        r"""Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname) ex. Wang Xiaoming."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api2/json/chineseNameCandidatesGenderBatch'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChineseNameCandidatesGenderBatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchNameMatchCandidatesOut])
                res.batch_name_match_candidates_out = out
        elif http_res.status_code in [400, 401, 403]:
            pass

        return res

    def chinese_name_gender_candidates(self, request: operations.ChineseNameGenderCandidatesRequest, security: operations.ChineseNameGenderCandidatesSecurity) -> operations.ChineseNameGenderCandidatesResponse:
        r"""Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming - having a known gender ('male' or 'female')"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ChineseNameGenderCandidatesRequest, base_url, '/api2/json/chineseNameGenderCandidates/{chineseSurnameLatin}/{chineseGivenNameLatin}/{knownGender}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChineseNameGenderCandidatesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NameMatchCandidatesOut])
                res.name_match_candidates_out = out
        elif http_res.status_code in [401, 403]:
            pass

        return res

    def chinese_name_match(self, request: operations.ChineseNameMatchRequest, security: operations.ChineseNameMatchSecurity) -> operations.ChineseNameMatchResponse:
        r"""Return a score for matching Chinese name ex. 王晓明 with a romanized name ex. Wang Xiaoming"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ChineseNameMatchRequest, base_url, '/api2/json/chineseNameMatch/{chineseSurnameLatin}/{chineseGivenNameLatin}/{chineseName}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChineseNameMatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NameMatchedOut])
                res.name_matched_out = out
        elif http_res.status_code in [401, 403]:
            pass

        return res

    def chinese_name_match_batch(self, request: shared.BatchMatchPersonalFirstLastNameIn, security: operations.ChineseNameMatchBatchSecurity) -> operations.ChineseNameMatchBatchResponse:
        r"""Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname), ex. Wang Xiaoming"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api2/json/chineseNameMatchBatch'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChineseNameMatchBatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchNameMatchedOut])
                res.batch_name_matched_out = out
        elif http_res.status_code in [400, 401, 403]:
            pass

        return res

    def gender_chinese_name(self, request: operations.GenderChineseNameRequest, security: operations.GenderChineseNameSecurity) -> operations.GenderChineseNameResponse:
        r"""Infer the likely gender of a Chinese full name ex. 王晓明"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GenderChineseNameRequest, base_url, '/api2/json/genderChineseName/{chineseName}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GenderChineseNameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PersonalNameGenderedOut])
                res.personal_name_gendered_out = out
        elif http_res.status_code in [401, 403]:
            pass

        return res

    def gender_chinese_name_batch(self, request: shared.BatchPersonalNameIn, security: operations.GenderChineseNameBatchSecurity) -> operations.GenderChineseNameBatchResponse:
        r"""Infer the likely gender of up to 100 full names ex. 王晓明"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api2/json/genderChineseNameBatch'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GenderChineseNameBatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchPersonalNameGenderedOut])
                res.batch_personal_name_gendered_out = out
        elif http_res.status_code in [400, 401, 403]:
            pass

        return res

    def gender_chinese_name_pinyin(self, request: operations.GenderChineseNamePinyinRequest, security: operations.GenderChineseNamePinyinSecurity) -> operations.GenderChineseNamePinyinResponse:
        r"""Infer the likely gender of a Chinese name in LATIN (Pinyin)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GenderChineseNamePinyinRequest, base_url, '/api2/json/genderChineseNamePinyin/{chineseSurnameLatin}/{chineseGivenNameLatin}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GenderChineseNamePinyinResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FirstLastNameGenderedOut])
                res.first_last_name_gendered_out = out
        elif http_res.status_code in [401, 403]:
            pass

        return res

    def gender_chinese_name_pinyin_batch(self, request: shared.BatchFirstLastNameIn, security: operations.GenderChineseNamePinyinBatchSecurity) -> operations.GenderChineseNamePinyinBatchResponse:
        r"""Infer the likely gender of up to 100 Chinese names in LATIN (Pinyin)."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api2/json/genderChineseNamePinyinBatch'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GenderChineseNamePinyinBatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchFirstLastNameGenderedOut])
                res.batch_first_last_name_gendered_out = out
        elif http_res.status_code in [400, 401, 403]:
            pass

        return res

    def parse_chinese_name(self, request: operations.ParseChineseNameRequest, security: operations.ParseChineseNameSecurity) -> operations.ParseChineseNameResponse:
        r"""Infer the likely first/last name structure of a name, ex. 王晓明 -> 王(surname) 晓明(given name)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ParseChineseNameRequest, base_url, '/api2/json/parseChineseName/{chineseName}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ParseChineseNameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PersonalNameParsedOut])
                res.personal_name_parsed_out = out
        elif http_res.status_code in [401, 403]:
            pass

        return res

    def parse_chinese_name_batch(self, request: shared.BatchPersonalNameIn, security: operations.ParseChineseNameBatchSecurity) -> operations.ParseChineseNameBatchResponse:
        r"""Infer the likely first/last name structure of a name, ex. 王晓明 -> 王(surname) 晓明(given name)."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api2/json/parseChineseNameBatch'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ParseChineseNameBatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchPersonalNameParsedOut])
                res.batch_personal_name_parsed_out = out
        elif http_res.status_code in [400, 401, 403]:
            pass

        return res

    def pinyin_chinese_name(self, request: operations.PinyinChineseNameRequest, security: operations.PinyinChineseNameSecurity) -> operations.PinyinChineseNameResponse:
        r"""Romanize the Chinese name to Pinyin, ex. 王晓明 -> Wang (surname) Xiaoming (given name)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PinyinChineseNameRequest, base_url, '/api2/json/pinyinChineseName/{chineseName}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PinyinChineseNameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PersonalNameParsedOut])
                res.personal_name_parsed_out = out
        elif http_res.status_code in [401, 403]:
            pass

        return res

    def pinyin_chinese_name_batch(self, request: shared.BatchPersonalNameIn, security: operations.PinyinChineseNameBatchSecurity) -> operations.PinyinChineseNameBatchResponse:
        r"""Romanize a list of Chinese name to Pinyin, ex. 王晓明 -> Wang (surname) Xiaoming (given name)."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api2/json/pinyinChineseNameBatch'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PinyinChineseNameBatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchPersonalNameParsedOut])
                res.batch_personal_name_parsed_out = out
        elif http_res.status_code in [400, 401, 403]:
            pass

        return res

    