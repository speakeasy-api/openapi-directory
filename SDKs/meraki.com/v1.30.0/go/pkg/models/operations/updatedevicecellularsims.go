// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type UpdateDeviceCellularSimsPathParams struct {
	Serial string `pathParam:"style=simple,explode=false,name=serial"`
}

// UpdateDeviceCellularSimsRequestBodySimFailover - SIM Failover settings.
type UpdateDeviceCellularSimsRequestBodySimFailover struct {
	// Failover to secondary SIM (optional)
	Enabled *bool `json:"enabled,omitempty"`
}

// UpdateDeviceCellularSimsRequestBodySimsApnsAuthenticationTypeEnum - APN auth type.
type UpdateDeviceCellularSimsRequestBodySimsApnsAuthenticationTypeEnum string

const (
	UpdateDeviceCellularSimsRequestBodySimsApnsAuthenticationTypeEnumChap UpdateDeviceCellularSimsRequestBodySimsApnsAuthenticationTypeEnum = "chap"
	UpdateDeviceCellularSimsRequestBodySimsApnsAuthenticationTypeEnumNone UpdateDeviceCellularSimsRequestBodySimsApnsAuthenticationTypeEnum = "none"
	UpdateDeviceCellularSimsRequestBodySimsApnsAuthenticationTypeEnumPap  UpdateDeviceCellularSimsRequestBodySimsApnsAuthenticationTypeEnum = "pap"
)

func (e *UpdateDeviceCellularSimsRequestBodySimsApnsAuthenticationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "chap":
		fallthrough
	case "none":
		fallthrough
	case "pap":
		*e = UpdateDeviceCellularSimsRequestBodySimsApnsAuthenticationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDeviceCellularSimsRequestBodySimsApnsAuthenticationTypeEnum: %s", s)
	}
}

// UpdateDeviceCellularSimsRequestBodySimsApnsAuthentication - APN authentication configurations.
type UpdateDeviceCellularSimsRequestBodySimsApnsAuthentication struct {
	// APN password, if type is set (if APN password is not supplied, the password is left unchanged).
	Password *string `json:"password,omitempty"`
	// APN auth type.
	Type *UpdateDeviceCellularSimsRequestBodySimsApnsAuthenticationTypeEnum `json:"type,omitempty"`
	// APN username, if type is set.
	Username *string `json:"username,omitempty"`
}

type UpdateDeviceCellularSimsRequestBodySimsApns struct {
	// IP versions to support (permitted values include 'ipv4', 'ipv6').
	AllowedIPTypes []string `json:"allowedIpTypes"`
	// APN authentication configurations.
	Authentication *UpdateDeviceCellularSimsRequestBodySimsApnsAuthentication `json:"authentication,omitempty"`
	// APN name.
	Name string `json:"name"`
}

// UpdateDeviceCellularSimsRequestBodySimsSlotEnum - SIM slot being configured. Must be 'sim1' on single-sim devices.
type UpdateDeviceCellularSimsRequestBodySimsSlotEnum string

const (
	UpdateDeviceCellularSimsRequestBodySimsSlotEnumSim1 UpdateDeviceCellularSimsRequestBodySimsSlotEnum = "sim1"
	UpdateDeviceCellularSimsRequestBodySimsSlotEnumSim2 UpdateDeviceCellularSimsRequestBodySimsSlotEnum = "sim2"
)

func (e *UpdateDeviceCellularSimsRequestBodySimsSlotEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "sim1":
		fallthrough
	case "sim2":
		*e = UpdateDeviceCellularSimsRequestBodySimsSlotEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDeviceCellularSimsRequestBodySimsSlotEnum: %s", s)
	}
}

type UpdateDeviceCellularSimsRequestBodySims struct {
	// APN configurations. If empty, the default APN will be used.
	Apns []UpdateDeviceCellularSimsRequestBodySimsApns `json:"apns,omitempty"`
	// If true, this SIM is used for boot. Must be true on single-sim devices.
	IsPrimary *bool `json:"isPrimary,omitempty"`
	// SIM slot being configured. Must be 'sim1' on single-sim devices.
	Slot *UpdateDeviceCellularSimsRequestBodySimsSlotEnum `json:"slot,omitempty"`
}

type UpdateDeviceCellularSimsRequestBody struct {
	// SIM Failover settings.
	SimFailover *UpdateDeviceCellularSimsRequestBodySimFailover `json:"simFailover,omitempty"`
	// List of SIMs. If a SIM was previously configured and not specified in this request, it will remain unchanged.
	Sims []UpdateDeviceCellularSimsRequestBodySims `json:"sims,omitempty"`
}

type UpdateDeviceCellularSimsRequest struct {
	PathParams UpdateDeviceCellularSimsPathParams
	Request    *UpdateDeviceCellularSimsRequestBody `request:"mediaType=application/json"`
}

type UpdateDeviceCellularSimsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateDeviceCellularSims200ApplicationJSONObject map[string]interface{}
}
