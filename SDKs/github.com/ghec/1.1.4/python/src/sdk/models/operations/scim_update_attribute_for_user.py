"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import basic_error as shared_basic_error
from ..shared import scim_error as shared_scim_error
from ..shared import scim_user as shared_scim_user
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class ScimUpdateAttributeForUserRequestBodyOperationsOpEnum(str, Enum):
    ADD = 'add'
    REMOVE = 'remove'
    REPLACE = 'replace'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ScimUpdateAttributeForUserRequestBodyOperationsValue2:
    
    primary: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary'), 'exclude': lambda f: f is None }})  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ScimUpdateAttributeForUserRequestBodyOperationsValue1:
    
    active: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active'), 'exclude': lambda f: f is None }})  
    external_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('externalId'), 'exclude': lambda f: f is None }})  
    family_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('familyName'), 'exclude': lambda f: f is None }})  
    given_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('givenName'), 'exclude': lambda f: f is None }})  
    user_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userName'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ScimUpdateAttributeForUserRequestBodyOperations:
    
    op: ScimUpdateAttributeForUserRequestBodyOperationsOpEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('op') }})  
    path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path'), 'exclude': lambda f: f is None }})  
    value: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ScimUpdateAttributeForUserRequestBody:
    
    operations: list[ScimUpdateAttributeForUserRequestBodyOperations] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Operations') }})
    r"""Set of operations to be performed"""  
    schemas: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schemas'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class ScimUpdateAttributeForUserRequest:
    
    org: str = dataclasses.field(metadata={'path_param': { 'field_name': 'org', 'style': 'simple', 'explode': False }})
    r"""The organization name. The name is not case sensitive."""  
    request_body: ScimUpdateAttributeForUserRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    scim_user_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'scim_user_id', 'style': 'simple', 'explode': False }})
    r"""The unique identifier of the SCIM user."""  
    

@dataclasses.dataclass
class ScimUpdateAttributeForUserResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    basic_error: Optional[shared_basic_error.BasicError] = dataclasses.field(default=None)
    r"""Response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    scim_error: Optional[shared_scim_error.ScimError] = dataclasses.field(default=None)
    r"""Bad request"""  
    scim_user: Optional[shared_scim_user.ScimUser] = dataclasses.field(default=None)
    r"""Response"""  
    