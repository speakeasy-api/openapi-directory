<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class AssetsCovarianceMatrix 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Covariance Matrix
     * 
     * Compute the covariance matrix of assets from either:  
     * * The asset correlation matrix and their volatilities (i.e., standard deviations)
     * * The asset correlation matrix and their variances
     * * The asset returns
     * 
     * References
     * * [Wikipedia, Covariance Matrix](https://en.wikipedia.org/wiki/Covariance_matrix)
     * 
     * 
     * @param mixed $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAssetsCovarianceMatrixResponse
     */
	public function postAssetsCovarianceMatrix(
        mixed $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostAssetsCovarianceMatrixResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/assets/covariance/matrix');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAssetsCovarianceMatrixResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postAssetsCovarianceMatrix200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostAssetsCovarianceMatrix200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Covariance Matrix Effective Rank
     * 
     * Compute the effective rank of an asset covariance matrix.
     * 
     * References
     * * [Olivier Roy and Martin Vetterli, The effective rank: A measure of effective dimensionality, 15th European Signal Processing Conference, 2007](https://ieeexplore.ieee.org/document/7098875)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostAssetsCovarianceMatrixEffectiveRankRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAssetsCovarianceMatrixEffectiveRankResponse
     */
	public function postAssetsCovarianceMatrixEffectiveRank(
        \OpenAPI\OpenAPI\Models\Operations\PostAssetsCovarianceMatrixEffectiveRankRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostAssetsCovarianceMatrixEffectiveRankResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/assets/covariance/matrix/effective-rank');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAssetsCovarianceMatrixEffectiveRankResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postAssetsCovarianceMatrixEffectiveRank200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostAssetsCovarianceMatrixEffectiveRank200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Exponentially Weighted Covariance Matrix
     * 
     * Compute an exponentially weighted covariance matrix of assets returns.
     * 
     * References
     * * [RiskMetrics Group. Longerstaey, J. (1996). RiskMetrics technical document, Technical Report fourth edition](https://www.msci.com/documents/10199/5915b101-4206-4ba0-aee2-3449d5c7e95a)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostAssetsCovarianceMatrixExponentiallyWeightedRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAssetsCovarianceMatrixExponentiallyWeightedResponse
     */
	public function postAssetsCovarianceMatrixExponentiallyWeighted(
        \OpenAPI\OpenAPI\Models\Operations\PostAssetsCovarianceMatrixExponentiallyWeightedRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostAssetsCovarianceMatrixExponentiallyWeightedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/assets/covariance/matrix/exponentially-weighted');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAssetsCovarianceMatrixExponentiallyWeightedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postAssetsCovarianceMatrixExponentiallyWeighted200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostAssetsCovarianceMatrixExponentiallyWeighted200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Covariance Matrix Validation
     * 
     * Validate whether a matrix is a covariance matrix.
     * 
     * References
     * * [Wikipedia, Covariance Matrix](https://en.wikipedia.org/wiki/Covariance_matrix)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostAssetsCovarianceMatrixValidationRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAssetsCovarianceMatrixValidationResponse
     */
	public function postAssetsCovarianceMatrixValidation(
        \OpenAPI\OpenAPI\Models\Operations\PostAssetsCovarianceMatrixValidationRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostAssetsCovarianceMatrixValidationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/assets/covariance/matrix/validation');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAssetsCovarianceMatrixValidationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postAssetsCovarianceMatrixValidation200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostAssetsCovarianceMatrixValidation200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}