"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PatientAutoAccidentInsuranceAutoAccidentClaimRepStateEnum(str, Enum):
    AL = 'AL'
    AK = 'AK'
    AS = 'AS'
    AZ = 'AZ'
    AR = 'AR'
    AA = 'AA'
    AE = 'AE'
    AP = 'AP'
    CA = 'CA'
    CO = 'CO'
    CT = 'CT'
    DE = 'DE'
    DC = 'DC'
    FL = 'FL'
    GA = 'GA'
    GU = 'GU'
    HI = 'HI'
    ID = 'ID'
    IL = 'IL'
    IN = 'IN'
    IA = 'IA'
    KS = 'KS'
    KY = 'KY'
    LA = 'LA'
    ME = 'ME'
    MD = 'MD'
    MA = 'MA'
    MI = 'MI'
    MN = 'MN'
    MS = 'MS'
    MO = 'MO'
    MT = 'MT'
    NE = 'NE'
    NV = 'NV'
    NH = 'NH'
    NJ = 'NJ'
    NM = 'NM'
    NY = 'NY'
    NC = 'NC'
    ND = 'ND'
    MP = 'MP'
    OH = 'OH'
    OK = 'OK'
    OR = 'OR'
    PA = 'PA'
    PR = 'PR'
    RI = 'RI'
    SC = 'SC'
    SD = 'SD'
    TN = 'TN'
    TX = 'TX'
    UT = 'UT'
    VT = 'VT'
    VI = 'VI'
    VA = 'VA'
    WA = 'WA'
    WV = 'WV'
    WI = 'WI'
    WY = 'WY'

class PatientAutoAccidentInsuranceAutoAccidentPatientRelationshipToSubscriberEnum(str, Enum):
    UNKNOWN = ''
    ONE = '01'
    FOUR = '04'
    FIVE = '05'
    SEVEN = '07'
    TEN = '10'
    FIFTEEN = '15'
    SEVENTEEN = '17'
    NINETEEN = '19'
    TWENTY = '20'
    TWENTY_ONE = '21'
    TWENTY_TWO = '22'
    TWENTY_THREE = '23'
    TWENTY_FOUR = '24'
    TWENTY_NINE = '29'
    THIRTY_TWO = '32'
    THIRTY_THREE = '33'
    THIRTY_SIX = '36'
    THIRTY_NINE = '39'
    FORTY = '40'
    FORTY_ONE = '41'
    FORTY_THREE = '43'
    FIFTY_THREE = '53'
    SEVENTY_SIX = '76'
    G8 = 'G8'

class PatientAutoAccidentInsuranceAutoAccidentPayerStateEnum(str, Enum):
    AL = 'AL'
    AK = 'AK'
    AS = 'AS'
    AZ = 'AZ'
    AR = 'AR'
    AA = 'AA'
    AE = 'AE'
    AP = 'AP'
    CA = 'CA'
    CO = 'CO'
    CT = 'CT'
    DE = 'DE'
    DC = 'DC'
    FL = 'FL'
    GA = 'GA'
    GU = 'GU'
    HI = 'HI'
    ID = 'ID'
    IL = 'IL'
    IN = 'IN'
    IA = 'IA'
    KS = 'KS'
    KY = 'KY'
    LA = 'LA'
    ME = 'ME'
    MD = 'MD'
    MA = 'MA'
    MI = 'MI'
    MN = 'MN'
    MS = 'MS'
    MO = 'MO'
    MT = 'MT'
    NE = 'NE'
    NV = 'NV'
    NH = 'NH'
    NJ = 'NJ'
    NM = 'NM'
    NY = 'NY'
    NC = 'NC'
    ND = 'ND'
    MP = 'MP'
    OH = 'OH'
    OK = 'OK'
    OR = 'OR'
    PA = 'PA'
    PR = 'PR'
    RI = 'RI'
    SC = 'SC'
    SD = 'SD'
    TN = 'TN'
    TX = 'TX'
    UT = 'UT'
    VT = 'VT'
    VI = 'VI'
    VA = 'VA'
    WA = 'WA'
    WV = 'WV'
    WI = 'WI'
    WY = 'WY'

class PatientAutoAccidentInsuranceAutoAccidentSignificantInjuryEnum(str, Enum):
    YES = 'YES'
    NO = 'NO'
    N_A = 'N\\A'

class PatientAutoAccidentInsuranceAutoAccidentStateOfOccurrenceEnum(str, Enum):
    AL = 'AL'
    AK = 'AK'
    AS = 'AS'
    AZ = 'AZ'
    AR = 'AR'
    AA = 'AA'
    AE = 'AE'
    AP = 'AP'
    CA = 'CA'
    CO = 'CO'
    CT = 'CT'
    DE = 'DE'
    DC = 'DC'
    FL = 'FL'
    GA = 'GA'
    GU = 'GU'
    HI = 'HI'
    ID = 'ID'
    IL = 'IL'
    IN = 'IN'
    IA = 'IA'
    KS = 'KS'
    KY = 'KY'
    LA = 'LA'
    ME = 'ME'
    MD = 'MD'
    MA = 'MA'
    MI = 'MI'
    MN = 'MN'
    MS = 'MS'
    MO = 'MO'
    MT = 'MT'
    NE = 'NE'
    NV = 'NV'
    NH = 'NH'
    NJ = 'NJ'
    NM = 'NM'
    NY = 'NY'
    NC = 'NC'
    ND = 'ND'
    MP = 'MP'
    OH = 'OH'
    OK = 'OK'
    OR = 'OR'
    PA = 'PA'
    PR = 'PR'
    RI = 'RI'
    SC = 'SC'
    SD = 'SD'
    TN = 'TN'
    TX = 'TX'
    UT = 'UT'
    VT = 'VT'
    VI = 'VI'
    VA = 'VA'
    WA = 'WA'
    WV = 'WV'
    WI = 'WI'
    WY = 'WY'

class PatientAutoAccidentInsuranceAutoAccidentSubscriberStateEnum(str, Enum):
    AL = 'AL'
    AK = 'AK'
    AS = 'AS'
    AZ = 'AZ'
    AR = 'AR'
    AA = 'AA'
    AE = 'AE'
    AP = 'AP'
    CA = 'CA'
    CO = 'CO'
    CT = 'CT'
    DE = 'DE'
    DC = 'DC'
    FL = 'FL'
    GA = 'GA'
    GU = 'GU'
    HI = 'HI'
    ID = 'ID'
    IL = 'IL'
    IN = 'IN'
    IA = 'IA'
    KS = 'KS'
    KY = 'KY'
    LA = 'LA'
    ME = 'ME'
    MD = 'MD'
    MA = 'MA'
    MI = 'MI'
    MN = 'MN'
    MS = 'MS'
    MO = 'MO'
    MT = 'MT'
    NE = 'NE'
    NV = 'NV'
    NH = 'NH'
    NJ = 'NJ'
    NM = 'NM'
    NY = 'NY'
    NC = 'NC'
    ND = 'ND'
    MP = 'MP'
    OH = 'OH'
    OK = 'OK'
    OR = 'OR'
    PA = 'PA'
    PR = 'PR'
    RI = 'RI'
    SC = 'SC'
    SD = 'SD'
    TN = 'TN'
    TX = 'TX'
    UT = 'UT'
    VT = 'VT'
    VI = 'VI'
    VA = 'VA'
    WA = 'WA'
    WV = 'WV'
    WI = 'WI'
    WY = 'WY'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientAutoAccidentInsurance:
    
    auto_accident_case_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_accident_case_number'), 'exclude': lambda f: f is None }})  
    auto_accident_claim_rep_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_accident_claim_rep_address'), 'exclude': lambda f: f is None }})  
    auto_accident_claim_rep_city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_accident_claim_rep_city'), 'exclude': lambda f: f is None }})  
    auto_accident_claim_rep_is_insurer: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_accident_claim_rep_is_insurer'), 'exclude': lambda f: f is None }})
    r"""Is the insurer's claim representative the insurer?"""  
    auto_accident_claim_rep_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_accident_claim_rep_name'), 'exclude': lambda f: f is None }})  
    auto_accident_claim_rep_state: Optional[PatientAutoAccidentInsuranceAutoAccidentClaimRepStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_accident_claim_rep_state'), 'exclude': lambda f: f is None }})  
    auto_accident_claim_rep_zip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_accident_claim_rep_zip'), 'exclude': lambda f: f is None }})  
    auto_accident_company: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_accident_company'), 'exclude': lambda f: f is None }})  
    auto_accident_date_of_accident: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_accident_date_of_accident'), 'exclude': lambda f: f is None }})  
    auto_accident_disabled_from_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_accident_disabled_from_date'), 'exclude': lambda f: f is None }})
    r"""Patient was disabled (unable to work) from"""  
    auto_accident_disabled_to_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_accident_disabled_to_date'), 'exclude': lambda f: f is None }})
    r"""Patient was disabled (unable to work) to"""  
    auto_accident_had_similar_condition: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_accident_had_similar_condition'), 'exclude': lambda f: f is None }})
    r"""Has the patient had same or similar condition?"""  
    auto_accident_is_subscriber_the_patient: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_accident_is_subscriber_the_patient'), 'exclude': lambda f: f is None }})
    r"""True if the insurance policy is under patient's own name."""  
    auto_accident_notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_accident_notes'), 'exclude': lambda f: f is None }})  
    auto_accident_patient_relationship_to_subscriber: Optional[PatientAutoAccidentInsuranceAutoAccidentPatientRelationshipToSubscriberEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_accident_patient_relationship_to_subscriber'), 'exclude': lambda f: f is None }})  
    auto_accident_payer_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_accident_payer_address'), 'exclude': lambda f: f is None }})  
    auto_accident_payer_city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_accident_payer_city'), 'exclude': lambda f: f is None }})  
    auto_accident_payer_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_accident_payer_id'), 'exclude': lambda f: f is None }})
    r"""Auto Accident Payer ID"""  
    auto_accident_payer_state: Optional[PatientAutoAccidentInsuranceAutoAccidentPayerStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_accident_payer_state'), 'exclude': lambda f: f is None }})  
    auto_accident_payer_zip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_accident_payer_zip'), 'exclude': lambda f: f is None }})  
    auto_accident_policy_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_accident_policy_number'), 'exclude': lambda f: f is None }})  
    auto_accident_return_to_work_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_accident_return_to_work_date'), 'exclude': lambda f: f is None }})
    r"""If still disabled, patient should be able to return to work on"""  
    auto_accident_significant_injury: Optional[PatientAutoAccidentInsuranceAutoAccidentSignificantInjuryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_accident_significant_injury'), 'exclude': lambda f: f is None }})  
    auto_accident_significant_injury_notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_accident_significant_injury_notes'), 'exclude': lambda f: f is None }})  
    auto_accident_similar_condition_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_accident_similar_condition_date'), 'exclude': lambda f: f is None }})
    r"""Date of same or similar condition"""  
    auto_accident_similar_condition_notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_accident_similar_condition_notes'), 'exclude': lambda f: f is None }})  
    auto_accident_state_of_occurrence: Optional[PatientAutoAccidentInsuranceAutoAccidentStateOfOccurrenceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_accident_state_of_occurrence'), 'exclude': lambda f: f is None }})  
    auto_accident_still_under_care: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_accident_still_under_care'), 'exclude': lambda f: f is None }})
    r"""Is patient still under your care for this condition?"""  
    auto_accident_subscriber_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_accident_subscriber_address'), 'exclude': lambda f: f is None }})  
    auto_accident_subscriber_city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_accident_subscriber_city'), 'exclude': lambda f: f is None }})  
    auto_accident_subscriber_date_of_birth: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_accident_subscriber_date_of_birth'), 'exclude': lambda f: f is None }})  
    auto_accident_subscriber_first_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_accident_subscriber_first_name'), 'exclude': lambda f: f is None }})  
    auto_accident_subscriber_last_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_accident_subscriber_last_name'), 'exclude': lambda f: f is None }})  
    auto_accident_subscriber_middle_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_accident_subscriber_middle_name'), 'exclude': lambda f: f is None }})  
    auto_accident_subscriber_phone_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_accident_subscriber_phone_number'), 'exclude': lambda f: f is None }})  
    auto_accident_subscriber_social_security: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_accident_subscriber_social_security'), 'exclude': lambda f: f is None }})  
    auto_accident_subscriber_state: Optional[PatientAutoAccidentInsuranceAutoAccidentSubscriberStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_accident_subscriber_state'), 'exclude': lambda f: f is None }})  
    auto_accident_subscriber_suffix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_accident_subscriber_suffix'), 'exclude': lambda f: f is None }})  
    auto_accident_subscriber_zip_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_accident_subscriber_zip_code'), 'exclude': lambda f: f is None }})  
    auto_accident_treatment_duration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_accident_treatment_duration'), 'exclude': lambda f: f is None }})  
    auto_accident_will_require_therapy: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_accident_will_require_therapy'), 'exclude': lambda f: f is None }})
    r"""Will the patient require rehabilitation and/or occupational therapy as a result of the injuries sustained in this accident?"""  
    auto_accident_will_require_therapy_rec: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_accident_will_require_therapy_rec'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientCustomPatientFieldValue:
    r"""Custom demographic values the patient has"""
    
    field_type: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('field_type'), 'exclude': lambda f: f is None }})
    r"""ID of the `/api/custom_demographics` object"""  
    updated_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'exclude': lambda f: f is None }})  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})  
    
class PatientEthnicityEnum(str, Enum):
    r"""One of `\\"blank\\"`, `\\"hispanic\\"`, `\\"not_hispanic\\"` or `\\"declined\\"`"""
    BLANK = 'blank'
    HISPANIC = 'hispanic'
    NOT_HISPANIC = 'not_hispanic'
    DECLINED = 'declined'

class PatientGenderEnum(str, Enum):
    r"""One of `\\"Male\\"`, `\\"Female\\"`, or `\\"Other\\"`"""
    UNKNOWN = ''
    MALE = 'Male'
    FEMALE = 'Female'
    OTHER = 'Other'
    UNK = 'UNK'
    ASKU = 'ASKU'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientPatientFlagType:
    r"""Array of patien flag type objects"""
    
    archived: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('archived'), 'exclude': lambda f: f is None }})  
    color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('color'), 'exclude': lambda f: f is None }})  
    created_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'exclude': lambda f: f is None }})  
    doctor: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('doctor'), 'exclude': lambda f: f is None }})
    r"""ID of doctor who owns the flag"""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    priority: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priority'), 'exclude': lambda f: f is None }})  
    updated_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientPatientFlag:
    r"""Array of patient flag objects"""
    
    archived: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('archived'), 'exclude': lambda f: f is None }})  
    created_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'exclude': lambda f: f is None }})  
    flag_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flag_text'), 'exclude': lambda f: f is None }})
    r"""Description of the patient flag"""  
    flag_type: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flag_type'), 'exclude': lambda f: f is None }})
    r"""ID of the associated `/api/patient_flag_types` object"""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    updated_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'exclude': lambda f: f is None }})  
    
class PatientPatientPaymentProfileEnum(str, Enum):
    r"""One of `\\"\\"`, `\\"Cash\\"`, `\\"Insurance\\"`, `\\"Insurance Out of Network\\"`, `\\"Auto Accident\\"` or `\\"Worker's Comp\\"`.<br>**Note:** Patient must already have either `primary_insurance` or `secondary_insurance` or new `primary_insurance` or `secondary_insurance` is passed in request if `Insurance`, `Auto Accident` or `Worker's Comp` payment profiles are chosen."""
    UNKNOWN = ''
    CASH = 'Cash'
    INSURANCE = 'Insurance'
    INSURANCE_OUT_OF_NETWORK = 'Insurance Out of Network'
    AUTO_ACCIDENT = 'Auto Accident'
    WORKER_S_COMP = 'Worker\'s Comp'

class PatientPatientStatusEnum(str, Enum):
    r"""One of `\\"A\\"` (active), `\\"I\\"` (inactive), `\\"D\\"` (inactive-deceased)"""
    A = 'A'
    I = 'I'
    D = 'D'

class PatientPreferredLanguageEnum(str, Enum):
    r"""Use ISO 639 alpha-3 codes"""
    BLANK = 'blank'
    ENG = 'eng'
    ZHO = 'zho'
    FRA = 'fra'
    ITA = 'ita'
    JPN = 'jpn'
    POR = 'por'
    RUS = 'rus'
    SPA = 'spa'
    OTHER = 'other'
    UNKNOWN = 'unknown'
    DECLINED = 'declined'

class PatientPrimaryInsuranceInsurancePlanTypeEnum(str, Enum):
    UNKNOWN = ''
    AM = 'AM'
    BL = 'BL'
    CH = 'CH'
    CI = 'CI'
    SEVENTEEN = '17'
    DS = 'DS'
    FOURTEEN = '14'
    FI = 'FI'
    HM = 'HM'
    SIXTEEN = '16'
    FIFTEEN = '15'
    LM = 'LM'
    MC = 'MC'
    MA = 'MA'
    MB = 'MB'
    ZZ = 'ZZ'
    OF = 'OF'
    ELEVEN = '11'
    THIRTEEN = '13'
    TWELVE = '12'
    TV = 'TV'
    VA = 'VA'
    WC = 'WC'

class PatientPrimaryInsurancePatientRelationshipToSubscriberEnum(str, Enum):
    r"""HCFA/1500 individual relationship code"""
    UNKNOWN = ''
    ONE = '01'
    FOUR = '04'
    FIVE = '05'
    SEVEN = '07'
    TEN = '10'
    FIFTEEN = '15'
    SEVENTEEN = '17'
    NINETEEN = '19'
    TWENTY = '20'
    TWENTY_ONE = '21'
    TWENTY_TWO = '22'
    TWENTY_THREE = '23'
    TWENTY_FOUR = '24'
    TWENTY_NINE = '29'
    THIRTY_TWO = '32'
    THIRTY_THREE = '33'
    THIRTY_SIX = '36'
    THIRTY_NINE = '39'
    FORTY = '40'
    FORTY_ONE = '41'
    FORTY_THREE = '43'
    FIFTY_THREE = '53'
    SEVENTY_SIX = '76'
    G8 = 'G8'

class PatientPrimaryInsuranceSubscriberCountryEnum(str, Enum):
    r"""Two-letter country code"""
    UNKNOWN = ''
    AF = 'AF'
    AX = 'AX'
    AL = 'AL'
    DZ = 'DZ'
    AS = 'AS'
    AD = 'AD'
    AO = 'AO'
    AI = 'AI'
    AQ = 'AQ'
    AG = 'AG'
    AR = 'AR'
    AM = 'AM'
    AW = 'AW'
    AU = 'AU'
    AT = 'AT'
    AZ = 'AZ'
    BS = 'BS'
    BH = 'BH'
    BD = 'BD'
    BB = 'BB'
    BY = 'BY'
    BE = 'BE'
    BZ = 'BZ'
    BJ = 'BJ'
    BM = 'BM'
    BT = 'BT'
    BO = 'BO'
    BQ = 'BQ'
    BA = 'BA'
    BW = 'BW'
    BV = 'BV'
    BR = 'BR'
    IO = 'IO'
    BN = 'BN'
    BG = 'BG'
    BF = 'BF'
    BI = 'BI'
    KH = 'KH'
    CM = 'CM'
    CA = 'CA'
    CV = 'CV'
    KY = 'KY'
    CF = 'CF'
    TD = 'TD'
    CL = 'CL'
    CN = 'CN'
    CX = 'CX'
    CC = 'CC'
    CO = 'CO'
    KM = 'KM'
    CG = 'CG'
    CD = 'CD'
    CK = 'CK'
    CR = 'CR'
    CI = 'CI'
    HR = 'HR'
    CU = 'CU'
    CW = 'CW'
    CY = 'CY'
    CZ = 'CZ'
    CYM = 'CYM'
    DK = 'DK'
    DJ = 'DJ'
    DM = 'DM'
    DO = 'DO'
    EC = 'EC'
    EG = 'EG'
    SV = 'SV'
    GQ = 'GQ'
    ER = 'ER'
    EE = 'EE'
    ET = 'ET'
    FK = 'FK'
    FO = 'FO'
    FJ = 'FJ'
    FI = 'FI'
    FR = 'FR'
    GF = 'GF'
    PF = 'PF'
    TF = 'TF'
    GA = 'GA'
    GM = 'GM'
    GE = 'GE'
    DE = 'DE'
    GH = 'GH'
    GI = 'GI'
    GR = 'GR'
    GL = 'GL'
    GD = 'GD'
    GP = 'GP'
    GU = 'GU'
    GT = 'GT'
    GG = 'GG'
    GN = 'GN'
    GW = 'GW'
    GY = 'GY'
    HT = 'HT'
    HM = 'HM'
    VA = 'VA'
    HN = 'HN'
    HK = 'HK'
    HU = 'HU'
    IS = 'IS'
    IN = 'IN'
    ID = 'ID'
    IR = 'IR'
    IQ = 'IQ'
    IE = 'IE'
    IM = 'IM'
    IL = 'IL'
    IT = 'IT'
    JM = 'JM'
    JP = 'JP'
    JE = 'JE'
    JO = 'JO'
    KZ = 'KZ'
    KE = 'KE'
    KI = 'KI'
    KP = 'KP'
    KR = 'KR'
    XK = 'XK'
    KW = 'KW'
    KG = 'KG'
    LA = 'LA'
    LV = 'LV'
    LB = 'LB'
    LS = 'LS'
    LR = 'LR'
    LY = 'LY'
    LI = 'LI'
    LT = 'LT'
    LU = 'LU'
    MO = 'MO'
    MK = 'MK'
    MG = 'MG'
    MW = 'MW'
    MY = 'MY'
    MV = 'MV'
    ML = 'ML'
    MT = 'MT'
    MH = 'MH'
    MQ = 'MQ'
    MR = 'MR'
    MU = 'MU'
    YT = 'YT'
    MX = 'MX'
    FM = 'FM'
    MD = 'MD'
    MC = 'MC'
    MN = 'MN'
    ME = 'ME'
    MS = 'MS'
    MA = 'MA'
    MZ = 'MZ'
    MM = 'MM'
    NA = 'NA'
    NR = 'NR'
    NP = 'NP'
    NL = 'NL'
    NC = 'NC'
    NZ = 'NZ'
    NI = 'NI'
    NE = 'NE'
    NG = 'NG'
    NU = 'NU'
    NF = 'NF'
    MP = 'MP'
    NO = 'NO'
    OM = 'OM'
    PK = 'PK'
    PW = 'PW'
    PS = 'PS'
    PA = 'PA'
    PG = 'PG'
    PY = 'PY'
    PE = 'PE'
    PH = 'PH'
    PN = 'PN'
    PL = 'PL'
    PT = 'PT'
    PR = 'PR'
    QA = 'QA'
    RE = 'RE'
    RO = 'RO'
    RU = 'RU'
    RW = 'RW'
    BL = 'BL'
    SH = 'SH'
    KN = 'KN'
    LC = 'LC'
    MF = 'MF'
    PM = 'PM'
    VC = 'VC'
    WS = 'WS'
    SM = 'SM'
    ST = 'ST'
    SA = 'SA'
    SN = 'SN'
    RS = 'RS'
    SC = 'SC'
    SL = 'SL'
    SG = 'SG'
    SX = 'SX'
    SK = 'SK'
    SI = 'SI'
    SB = 'SB'
    SO = 'SO'
    ZA = 'ZA'
    GS = 'GS'
    SS = 'SS'
    ES = 'ES'
    LK = 'LK'
    SD = 'SD'
    SR = 'SR'
    SJ = 'SJ'
    SZ = 'SZ'
    SE = 'SE'
    CH = 'CH'
    SY = 'SY'
    TW = 'TW'
    TJ = 'TJ'
    TZ = 'TZ'
    TH = 'TH'
    TL = 'TL'
    TG = 'TG'
    TK = 'TK'
    TO = 'TO'
    TT = 'TT'
    TN = 'TN'
    TR = 'TR'
    TM = 'TM'
    TC = 'TC'
    TV = 'TV'
    UG = 'UG'
    UA = 'UA'
    AE = 'AE'
    GB = 'GB'
    US = 'US'
    UM = 'UM'
    UY = 'UY'
    UZ = 'UZ'
    VU = 'VU'
    VE = 'VE'
    VN = 'VN'
    VG = 'VG'
    VI = 'VI'
    WF = 'WF'
    EH = 'EH'
    YE = 'YE'
    ZM = 'ZM'
    ZW = 'ZW'

class PatientPrimaryInsuranceSubscriberGenderEnum(str, Enum):
    r"""One of `\\"Male\\"` or `\\"Female\\"`"""
    UNKNOWN = ''
    MALE = 'Male'
    FEMALE = 'Female'
    OTHER = 'Other'
    UNK = 'UNK'
    ASKU = 'ASKU'

class PatientPrimaryInsuranceSubscriberStateEnum(str, Enum):
    r"""Two-letter state code"""
    AL = 'AL'
    AK = 'AK'
    AS = 'AS'
    AZ = 'AZ'
    AR = 'AR'
    AA = 'AA'
    AE = 'AE'
    AP = 'AP'
    CA = 'CA'
    CO = 'CO'
    CT = 'CT'
    DE = 'DE'
    DC = 'DC'
    FL = 'FL'
    GA = 'GA'
    GU = 'GU'
    HI = 'HI'
    ID = 'ID'
    IL = 'IL'
    IN = 'IN'
    IA = 'IA'
    KS = 'KS'
    KY = 'KY'
    LA = 'LA'
    ME = 'ME'
    MD = 'MD'
    MA = 'MA'
    MI = 'MI'
    MN = 'MN'
    MS = 'MS'
    MO = 'MO'
    MT = 'MT'
    NE = 'NE'
    NV = 'NV'
    NH = 'NH'
    NJ = 'NJ'
    NM = 'NM'
    NY = 'NY'
    NC = 'NC'
    ND = 'ND'
    MP = 'MP'
    OH = 'OH'
    OK = 'OK'
    OR = 'OR'
    PA = 'PA'
    PR = 'PR'
    RI = 'RI'
    SC = 'SC'
    SD = 'SD'
    TN = 'TN'
    TX = 'TX'
    UT = 'UT'
    VT = 'VT'
    VI = 'VI'
    VA = 'VA'
    WA = 'WA'
    WV = 'WV'
    WI = 'WI'
    WY = 'WY'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientPrimaryInsurance:
    r"""**Warning:** Changing insurance information may make past appointments unbillable. Insurance data is also **unvalidated**; you should use the [`/api/insurances`](#apiinsurances) endpoint to find the appropriate insurance payer."""
    
    insurance_claim_office_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insurance_claim_office_number'), 'exclude': lambda f: f is None }})
    r"""Insurance office phone number"""  
    insurance_company: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insurance_company'), 'exclude': lambda f: f is None }})  
    insurance_group_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insurance_group_name'), 'exclude': lambda f: f is None }})  
    insurance_group_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insurance_group_number'), 'exclude': lambda f: f is None }})  
    insurance_id_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insurance_id_number'), 'exclude': lambda f: f is None }})  
    insurance_payer_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insurance_payer_id'), 'exclude': lambda f: f is None }})  
    insurance_plan_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insurance_plan_name'), 'exclude': lambda f: f is None }})
    r"""Name of insurance plan."""  
    insurance_plan_type: Optional[PatientPrimaryInsuranceInsurancePlanTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insurance_plan_type'), 'exclude': lambda f: f is None }})  
    is_subscriber_the_patient: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_subscriber_the_patient'), 'exclude': lambda f: f is None }})
    r"""True if the insurance policy is under patient's own name. Defaults to true"""  
    patient_relationship_to_subscriber: Optional[PatientPrimaryInsurancePatientRelationshipToSubscriberEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('patient_relationship_to_subscriber'), 'exclude': lambda f: f is None }})
    r"""HCFA/1500 individual relationship code"""  
    photo_back: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('photo_back'), 'exclude': lambda f: f is None }})
    r"""Photo of back of insurance card"""  
    photo_front: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('photo_front'), 'exclude': lambda f: f is None }})
    r"""Photo of front of insurance card"""  
    subscriber_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriber_address'), 'exclude': lambda f: f is None }})  
    subscriber_city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriber_city'), 'exclude': lambda f: f is None }})  
    subscriber_country: Optional[PatientPrimaryInsuranceSubscriberCountryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriber_country'), 'exclude': lambda f: f is None }})
    r"""Two-letter country code"""  
    subscriber_date_of_birth: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriber_date_of_birth'), 'exclude': lambda f: f is None }})  
    subscriber_first_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriber_first_name'), 'exclude': lambda f: f is None }})  
    subscriber_gender: Optional[PatientPrimaryInsuranceSubscriberGenderEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriber_gender'), 'exclude': lambda f: f is None }})
    r"""One of `\\"Male\\"` or `\\"Female\\"`"""  
    subscriber_last_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriber_last_name'), 'exclude': lambda f: f is None }})  
    subscriber_middle_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriber_middle_name'), 'exclude': lambda f: f is None }})  
    subscriber_social_security: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriber_social_security'), 'exclude': lambda f: f is None }})  
    subscriber_state: Optional[PatientPrimaryInsuranceSubscriberStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriber_state'), 'exclude': lambda f: f is None }})
    r"""Two-letter state code"""  
    subscriber_suffix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriber_suffix'), 'exclude': lambda f: f is None }})
    r"""E.g. `\\"II\\"` or `\\"III\\"`"""  
    subscriber_zip_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriber_zip_code'), 'exclude': lambda f: f is None }})  
    
class PatientRaceEnum(str, Enum):
    r"""One of `\\"blank\\"`, `\\"indian\\"`, `\\"asian\\"`, `\\"black\\"`, `\\"hawaiian\\"`, `\\"white\\"` or `\\"declined\\"`"""
    BLANK = 'blank'
    INDIAN = 'indian'
    ASIAN = 'asian'
    BLACK = 'black'
    HAWAIIAN = 'hawaiian'
    WHITE = 'white'
    OTHER = 'other'
    DECLINED = 'declined'

class PatientPatientProviderQualifierEnum(str, Enum):
    r"""Can be one of following, `''`, `'0B'`(State License #), `'1G'`(Provider UPIN #), `'G2'`(Provider Commercial #)"""
    UNKNOWN = ''
    ZERO_B = '0B'
    ONE_G = '1G'
    G2 = 'G2'

class PatientPatientSpecialtyEnum(str, Enum):
    r"""Can be one of following, `''`, `'Acupuncture'`, `'Advanced Practice Midwife'`, `'Aesthetic Medicine'`, `'Aesthetician'`, `'Allergist/Immunologist'`, `'Anesthesiologist'`, `'Cardiac Electrophysiologist'`, `'Cardiologist'`, `'Cardiothoracic Surgeon'`, `'Child/Adolescent Psychiatry'`, `'Chiropractor'`, `'Clinical Social Worker'`, `'Colorectal Surgeon'`, `'Correactology'`, `'Cosmetic Medicine'`, `'Counselor Mental Health'`, `'Counselor Professional'`, `'Counselor'`, `'Dentist'`, `'Diabetology'`, `'Dermatologist'`, `'Diagnostic Medical Sonographer'`, `'Dietitian, Registered'`, `'Ear-Nose-Throat Specialist (ENT)'`, `'Emergency Medicine Physician'`, `'Endocrinologist'`, `'Endodontist'`, `'Epidemiologist'`, `'Family Practitioner'`, `'Gastroenterologist'`, `'General Practice'`, `'General Surgeon'`, `'Geneticist'`, `'Geriatrician'`, `'Gerontologist'`, `'Gynecologist (no OB)'`, `'Gynegologic Oncologist'`, `'Hand Surgeon'`, `'Hematologist'`, `'Home Care'`, `'Hospice'`, `'Hospitalist'`, `'Infectious Disease Specialist'`, `'Integrative and Functional Medicine'`, `'Integrative Medicine'`, `'Internist'`, `'Interventional Radiology'`, `'Laboratory Medicine Specialist'`, `'Laser Surgery'`, `'Massage Therapist'`, `'Naturopathic Physician'`, `'Neonatologist'`, `'Nephrologist'`, `'Neurologist'`, `'Neuropsychology'`, `'Neurosurgeon'`, `'Not Actively Practicing'`, `'Nuclear Medicine Specialist'`, `'Nurse Practitioner'`, `'Nursing'`, `'Nutritionist'`, `'Obstetrician/Gynecologist'`, `'Occupational Medicine'`, `'Occupational Therapist'`, `'Oncologist'`, `'Ophthalmologist'`, `'Optometrist'`, `'Oral Surgeon'`, `'Orofacial Pain'`, `'Orthodontist'`, `'Orthopedic Surgeon'`, `'Orthotist'`, `'Other'`, `'Pain Management Specialist'`, `'Pathologist'`, `'Pediatric Dentist'`, `'Pediatric Gastroenterology'`, `'Pediatric Surgeon'`, `'Pediatrician'`, `'Perinatologist'`, `'Periodontist'`, `'Physical Medicine and Rehab Specialist'`, `'Physical Therapist'`, `'Physician Assistant'`, `'Plastic Surgeon'`, `'Podiatrist'`, `'Preventive-Aging Medicine'`, `'Preventive Medicine/Occupational-Environmental Medicine'`, `'Primary Care Physician'`, `'Prosthetist'`, `'Prosthodontist'`, `'Psychiatrist'`, `'Psychologist'`, `'Public Health Professional'`, `'Pulmonologist'`, `'Radiation Oncologist'`, `'Radiologist'`, `'Registered Nurse'`, `'Religious Nonmedical Practitioner'`, `'Reproductive Endocrinologist'`, `'Reproductive Medicine'`, `'Rheumatologist'`, `'Sleep Medicine'`, `'Speech-Language Pathologist'`, `'Sports Medicine Specialist'`, `'Urologist'`, `'Urgent Care'`, `'Vascular Surgeon'`"""
    UNKNOWN = ''
    ACUPUNCTURE = 'Acupuncture'
    ADVANCED_PRACTICE_MIDWIFE = 'Advanced Practice Midwife'
    AESTHETIC_MEDICINE = 'Aesthetic Medicine'
    AESTHETICIAN = 'Aesthetician'
    ALLERGIST_IMMUNOLOGIST = 'Allergist/Immunologist'
    ANESTHESIOLOGIST = 'Anesthesiologist'
    CARDIAC_ELECTROPHYSIOLOGIST = 'Cardiac Electrophysiologist'
    CARDIOLOGIST = 'Cardiologist'
    CARDIOTHORACIC_SURGEON = 'Cardiothoracic Surgeon'
    CHILD_ADOLESCENT_PSYCHIATRY = 'Child/Adolescent Psychiatry'
    CHIROPRACTOR = 'Chiropractor'
    CLINICAL_SOCIAL_WORKER = 'Clinical Social Worker'
    COLORECTAL_SURGEON = 'Colorectal Surgeon'
    CORREACTOLOGY = 'Correactology'
    COSMETIC_MEDICINE = 'Cosmetic Medicine'
    COUNSELOR_MENTAL_HEALTH = 'Counselor Mental Health'
    COUNSELOR_PROFESSIONAL = 'Counselor Professional'
    COUNSELOR = 'Counselor'
    DENTIST = 'Dentist'
    DIABETOLOGY = 'Diabetology'
    DERMATOLOGIST = 'Dermatologist'
    DIAGNOSTIC_MEDICAL_SONOGRAPHER = 'Diagnostic Medical Sonographer'
    DIETITIAN_REGISTERED = 'Dietitian, Registered'
    EAR_NOSE_THROAT_SPECIALIST_ENT_ = 'Ear-Nose-Throat Specialist (ENT)'
    EMERGENCY_MEDICINE_PHYSICIAN = 'Emergency Medicine Physician'
    ENDOCRINOLOGIST = 'Endocrinologist'
    ENDODONTIST = 'Endodontist'
    EPIDEMIOLOGIST = 'Epidemiologist'
    FAMILY_PRACTITIONER = 'Family Practitioner'
    GASTROENTEROLOGIST = 'Gastroenterologist'
    GENERAL_PRACTICE = 'General Practice'
    GENERAL_SURGEON = 'General Surgeon'
    GENETICIST = 'Geneticist'
    GERIATRICIAN = 'Geriatrician'
    GERONTOLOGIST = 'Gerontologist'
    GYNECOLOGIST_NO_OB_ = 'Gynecologist (no OB)'
    GYNEGOLOGIC_ONCOLOGIST = 'Gynegologic Oncologist'
    HAND_SURGEON = 'Hand Surgeon'
    HEMATOLOGIST = 'Hematologist'
    HOME_CARE = 'Home Care'
    HOSPICE = 'Hospice'
    HOSPITALIST = 'Hospitalist'
    INFECTIOUS_DISEASE_SPECIALIST = 'Infectious Disease Specialist'
    INTEGRATIVE_AND_FUNCTIONAL_MEDICINE = 'Integrative and Functional Medicine'
    INTEGRATIVE_MEDICINE = 'Integrative Medicine'
    INTERNIST = 'Internist'
    INTERVENTIONAL_RADIOLOGY = 'Interventional Radiology'
    LABORATORY_MEDICINE_SPECIALIST = 'Laboratory Medicine Specialist'
    LASER_SURGERY = 'Laser Surgery'
    MASSAGE_THERAPIST = 'Massage Therapist'
    NATUROPATHIC_PHYSICIAN = 'Naturopathic Physician'
    NEONATOLOGIST = 'Neonatologist'
    NEPHROLOGIST = 'Nephrologist'
    NEUROLOGIST = 'Neurologist'
    NEUROPSYCHOLOGY = 'Neuropsychology'
    NEUROSURGEON = 'Neurosurgeon'
    NOT_ACTIVELY_PRACTICING = 'Not Actively Practicing'
    NUCLEAR_MEDICINE_SPECIALIST = 'Nuclear Medicine Specialist'
    NURSE_PRACTITIONER = 'Nurse Practitioner'
    NURSING = 'Nursing'
    NUTRITIONIST = 'Nutritionist'
    OBSTETRICIAN_GYNECOLOGIST = 'Obstetrician/Gynecologist'
    OCCUPATIONAL_MEDICINE = 'Occupational Medicine'
    OCCUPATIONAL_THERAPIST = 'Occupational Therapist'
    ONCOLOGIST = 'Oncologist'
    OPHTHALMOLOGIST = 'Ophthalmologist'
    OPTOMETRIST = 'Optometrist'
    ORAL_SURGEON = 'Oral Surgeon'
    OROFACIAL_PAIN = 'Orofacial Pain'
    ORTHODONTIST = 'Orthodontist'
    ORTHOPEDIC_SURGEON = 'Orthopedic Surgeon'
    ORTHOTIST = 'Orthotist'
    OTHER = 'Other'
    PAIN_MANAGEMENT_SPECIALIST = 'Pain Management Specialist'
    PATHOLOGIST = 'Pathologist'
    PEDIATRIC_DENTIST = 'Pediatric Dentist'
    PEDIATRIC_GASTROENTEROLOGY = 'Pediatric Gastroenterology'
    PEDIATRIC_SURGEON = 'Pediatric Surgeon'
    PEDIATRICIAN = 'Pediatrician'
    PERINATOLOGIST = 'Perinatologist'
    PERIODONTIST = 'Periodontist'
    PHYSICAL_MEDICINE_AND_REHAB_SPECIALIST = 'Physical Medicine and Rehab Specialist'
    PHYSICAL_THERAPIST = 'Physical Therapist'
    PHYSICIAN_ASSISTANT = 'Physician Assistant'
    PLASTIC_SURGEON = 'Plastic Surgeon'
    PODIATRIST = 'Podiatrist'
    PREVENTIVE_AGING_MEDICINE = 'Preventive-Aging Medicine'
    PREVENTIVE_MEDICINE_OCCUPATIONAL_ENVIRONMENTAL_MEDICINE = 'Preventive Medicine/Occupational-Environmental Medicine'
    PRIMARY_CARE_PHYSICIAN = 'Primary Care Physician'
    PROSTHETIST = 'Prosthetist'
    PROSTHODONTIST = 'Prosthodontist'
    PSYCHIATRIST = 'Psychiatrist'
    PSYCHOLOGIST = 'Psychologist'
    PUBLIC_HEALTH_PROFESSIONAL = 'Public Health Professional'
    PULMONOLOGIST = 'Pulmonologist'
    RADIATION_ONCOLOGIST = 'Radiation Oncologist'
    RADIOLOGIST = 'Radiologist'
    REGISTERED_NURSE = 'Registered Nurse'
    RELIGIOUS_NONMEDICAL_PRACTITIONER = 'Religious Nonmedical Practitioner'
    REPRODUCTIVE_ENDOCRINOLOGIST = 'Reproductive Endocrinologist'
    REPRODUCTIVE_MEDICINE = 'Reproductive Medicine'
    RHEUMATOLOGIST = 'Rheumatologist'
    SLEEP_MEDICINE = 'Sleep Medicine'
    SPEECH_LANGUAGE_PATHOLOGIST = 'Speech-Language Pathologist'
    SPORTS_MEDICINE_SPECIALIST = 'Sports Medicine Specialist'
    UROLOGIST = 'Urologist'
    URGENT_CARE = 'Urgent Care'
    VASCULAR_SURGEON = 'Vascular Surgeon'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientPatient:
    
    address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})  
    fax: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fax'), 'exclude': lambda f: f is None }})
    r"""Should follow format \\"xxx-xx-xxxx\\" """  
    first_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_name'), 'exclude': lambda f: f is None }})  
    last_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_name'), 'exclude': lambda f: f is None }})  
    middle_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('middle_name'), 'exclude': lambda f: f is None }})  
    npi: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('npi'), 'exclude': lambda f: f is None }})  
    phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phone'), 'exclude': lambda f: f is None }})
    r"""Should follow format \\"xxx-xx-xxxx\\" """  
    provider_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provider_number'), 'exclude': lambda f: f is None }})  
    provider_qualifier: Optional[PatientPatientProviderQualifierEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provider_qualifier'), 'exclude': lambda f: f is None }})
    r"""Can be one of following, `''`, `'0B'`(State License #), `'1G'`(Provider UPIN #), `'G2'`(Provider Commercial #)"""  
    specialty: Optional[PatientPatientSpecialtyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('specialty'), 'exclude': lambda f: f is None }})
    r"""Can be one of following, `''`, `'Acupuncture'`, `'Advanced Practice Midwife'`, `'Aesthetic Medicine'`, `'Aesthetician'`, `'Allergist/Immunologist'`, `'Anesthesiologist'`, `'Cardiac Electrophysiologist'`, `'Cardiologist'`, `'Cardiothoracic Surgeon'`, `'Child/Adolescent Psychiatry'`, `'Chiropractor'`, `'Clinical Social Worker'`, `'Colorectal Surgeon'`, `'Correactology'`, `'Cosmetic Medicine'`, `'Counselor Mental Health'`, `'Counselor Professional'`, `'Counselor'`, `'Dentist'`, `'Diabetology'`, `'Dermatologist'`, `'Diagnostic Medical Sonographer'`, `'Dietitian, Registered'`, `'Ear-Nose-Throat Specialist (ENT)'`, `'Emergency Medicine Physician'`, `'Endocrinologist'`, `'Endodontist'`, `'Epidemiologist'`, `'Family Practitioner'`, `'Gastroenterologist'`, `'General Practice'`, `'General Surgeon'`, `'Geneticist'`, `'Geriatrician'`, `'Gerontologist'`, `'Gynecologist (no OB)'`, `'Gynegologic Oncologist'`, `'Hand Surgeon'`, `'Hematologist'`, `'Home Care'`, `'Hospice'`, `'Hospitalist'`, `'Infectious Disease Specialist'`, `'Integrative and Functional Medicine'`, `'Integrative Medicine'`, `'Internist'`, `'Interventional Radiology'`, `'Laboratory Medicine Specialist'`, `'Laser Surgery'`, `'Massage Therapist'`, `'Naturopathic Physician'`, `'Neonatologist'`, `'Nephrologist'`, `'Neurologist'`, `'Neuropsychology'`, `'Neurosurgeon'`, `'Not Actively Practicing'`, `'Nuclear Medicine Specialist'`, `'Nurse Practitioner'`, `'Nursing'`, `'Nutritionist'`, `'Obstetrician/Gynecologist'`, `'Occupational Medicine'`, `'Occupational Therapist'`, `'Oncologist'`, `'Ophthalmologist'`, `'Optometrist'`, `'Oral Surgeon'`, `'Orofacial Pain'`, `'Orthodontist'`, `'Orthopedic Surgeon'`, `'Orthotist'`, `'Other'`, `'Pain Management Specialist'`, `'Pathologist'`, `'Pediatric Dentist'`, `'Pediatric Gastroenterology'`, `'Pediatric Surgeon'`, `'Pediatrician'`, `'Perinatologist'`, `'Periodontist'`, `'Physical Medicine and Rehab Specialist'`, `'Physical Therapist'`, `'Physician Assistant'`, `'Plastic Surgeon'`, `'Podiatrist'`, `'Preventive-Aging Medicine'`, `'Preventive Medicine/Occupational-Environmental Medicine'`, `'Primary Care Physician'`, `'Prosthetist'`, `'Prosthodontist'`, `'Psychiatrist'`, `'Psychologist'`, `'Public Health Professional'`, `'Pulmonologist'`, `'Radiation Oncologist'`, `'Radiologist'`, `'Registered Nurse'`, `'Religious Nonmedical Practitioner'`, `'Reproductive Endocrinologist'`, `'Reproductive Medicine'`, `'Rheumatologist'`, `'Sleep Medicine'`, `'Speech-Language Pathologist'`, `'Sports Medicine Specialist'`, `'Urologist'`, `'Urgent Care'`, `'Vascular Surgeon'`"""  
    suffix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suffix'), 'exclude': lambda f: f is None }})  
    
class PatientSecondaryInsuranceInsurancePlanTypeEnum(str, Enum):
    UNKNOWN = ''
    AM = 'AM'
    BL = 'BL'
    CH = 'CH'
    CI = 'CI'
    SEVENTEEN = '17'
    DS = 'DS'
    FOURTEEN = '14'
    FI = 'FI'
    HM = 'HM'
    SIXTEEN = '16'
    FIFTEEN = '15'
    LM = 'LM'
    MC = 'MC'
    MA = 'MA'
    MB = 'MB'
    ZZ = 'ZZ'
    OF = 'OF'
    ELEVEN = '11'
    THIRTEEN = '13'
    TWELVE = '12'
    TV = 'TV'
    VA = 'VA'
    WC = 'WC'

class PatientSecondaryInsurancePatientRelationshipToSubscriberEnum(str, Enum):
    r"""HCFA/1500 individual relationship code"""
    UNKNOWN = ''
    ONE = '01'
    FOUR = '04'
    FIVE = '05'
    SEVEN = '07'
    TEN = '10'
    FIFTEEN = '15'
    SEVENTEEN = '17'
    NINETEEN = '19'
    TWENTY = '20'
    TWENTY_ONE = '21'
    TWENTY_TWO = '22'
    TWENTY_THREE = '23'
    TWENTY_FOUR = '24'
    TWENTY_NINE = '29'
    THIRTY_TWO = '32'
    THIRTY_THREE = '33'
    THIRTY_SIX = '36'
    THIRTY_NINE = '39'
    FORTY = '40'
    FORTY_ONE = '41'
    FORTY_THREE = '43'
    FIFTY_THREE = '53'
    SEVENTY_SIX = '76'
    G8 = 'G8'

class PatientSecondaryInsuranceSubscriberCountryEnum(str, Enum):
    r"""Two-letter country code"""
    UNKNOWN = ''
    AF = 'AF'
    AX = 'AX'
    AL = 'AL'
    DZ = 'DZ'
    AS = 'AS'
    AD = 'AD'
    AO = 'AO'
    AI = 'AI'
    AQ = 'AQ'
    AG = 'AG'
    AR = 'AR'
    AM = 'AM'
    AW = 'AW'
    AU = 'AU'
    AT = 'AT'
    AZ = 'AZ'
    BS = 'BS'
    BH = 'BH'
    BD = 'BD'
    BB = 'BB'
    BY = 'BY'
    BE = 'BE'
    BZ = 'BZ'
    BJ = 'BJ'
    BM = 'BM'
    BT = 'BT'
    BO = 'BO'
    BQ = 'BQ'
    BA = 'BA'
    BW = 'BW'
    BV = 'BV'
    BR = 'BR'
    IO = 'IO'
    BN = 'BN'
    BG = 'BG'
    BF = 'BF'
    BI = 'BI'
    KH = 'KH'
    CM = 'CM'
    CA = 'CA'
    CV = 'CV'
    KY = 'KY'
    CF = 'CF'
    TD = 'TD'
    CL = 'CL'
    CN = 'CN'
    CX = 'CX'
    CC = 'CC'
    CO = 'CO'
    KM = 'KM'
    CG = 'CG'
    CD = 'CD'
    CK = 'CK'
    CR = 'CR'
    CI = 'CI'
    HR = 'HR'
    CU = 'CU'
    CW = 'CW'
    CY = 'CY'
    CZ = 'CZ'
    CYM = 'CYM'
    DK = 'DK'
    DJ = 'DJ'
    DM = 'DM'
    DO = 'DO'
    EC = 'EC'
    EG = 'EG'
    SV = 'SV'
    GQ = 'GQ'
    ER = 'ER'
    EE = 'EE'
    ET = 'ET'
    FK = 'FK'
    FO = 'FO'
    FJ = 'FJ'
    FI = 'FI'
    FR = 'FR'
    GF = 'GF'
    PF = 'PF'
    TF = 'TF'
    GA = 'GA'
    GM = 'GM'
    GE = 'GE'
    DE = 'DE'
    GH = 'GH'
    GI = 'GI'
    GR = 'GR'
    GL = 'GL'
    GD = 'GD'
    GP = 'GP'
    GU = 'GU'
    GT = 'GT'
    GG = 'GG'
    GN = 'GN'
    GW = 'GW'
    GY = 'GY'
    HT = 'HT'
    HM = 'HM'
    VA = 'VA'
    HN = 'HN'
    HK = 'HK'
    HU = 'HU'
    IS = 'IS'
    IN = 'IN'
    ID = 'ID'
    IR = 'IR'
    IQ = 'IQ'
    IE = 'IE'
    IM = 'IM'
    IL = 'IL'
    IT = 'IT'
    JM = 'JM'
    JP = 'JP'
    JE = 'JE'
    JO = 'JO'
    KZ = 'KZ'
    KE = 'KE'
    KI = 'KI'
    KP = 'KP'
    KR = 'KR'
    XK = 'XK'
    KW = 'KW'
    KG = 'KG'
    LA = 'LA'
    LV = 'LV'
    LB = 'LB'
    LS = 'LS'
    LR = 'LR'
    LY = 'LY'
    LI = 'LI'
    LT = 'LT'
    LU = 'LU'
    MO = 'MO'
    MK = 'MK'
    MG = 'MG'
    MW = 'MW'
    MY = 'MY'
    MV = 'MV'
    ML = 'ML'
    MT = 'MT'
    MH = 'MH'
    MQ = 'MQ'
    MR = 'MR'
    MU = 'MU'
    YT = 'YT'
    MX = 'MX'
    FM = 'FM'
    MD = 'MD'
    MC = 'MC'
    MN = 'MN'
    ME = 'ME'
    MS = 'MS'
    MA = 'MA'
    MZ = 'MZ'
    MM = 'MM'
    NA = 'NA'
    NR = 'NR'
    NP = 'NP'
    NL = 'NL'
    NC = 'NC'
    NZ = 'NZ'
    NI = 'NI'
    NE = 'NE'
    NG = 'NG'
    NU = 'NU'
    NF = 'NF'
    MP = 'MP'
    NO = 'NO'
    OM = 'OM'
    PK = 'PK'
    PW = 'PW'
    PS = 'PS'
    PA = 'PA'
    PG = 'PG'
    PY = 'PY'
    PE = 'PE'
    PH = 'PH'
    PN = 'PN'
    PL = 'PL'
    PT = 'PT'
    PR = 'PR'
    QA = 'QA'
    RE = 'RE'
    RO = 'RO'
    RU = 'RU'
    RW = 'RW'
    BL = 'BL'
    SH = 'SH'
    KN = 'KN'
    LC = 'LC'
    MF = 'MF'
    PM = 'PM'
    VC = 'VC'
    WS = 'WS'
    SM = 'SM'
    ST = 'ST'
    SA = 'SA'
    SN = 'SN'
    RS = 'RS'
    SC = 'SC'
    SL = 'SL'
    SG = 'SG'
    SX = 'SX'
    SK = 'SK'
    SI = 'SI'
    SB = 'SB'
    SO = 'SO'
    ZA = 'ZA'
    GS = 'GS'
    SS = 'SS'
    ES = 'ES'
    LK = 'LK'
    SD = 'SD'
    SR = 'SR'
    SJ = 'SJ'
    SZ = 'SZ'
    SE = 'SE'
    CH = 'CH'
    SY = 'SY'
    TW = 'TW'
    TJ = 'TJ'
    TZ = 'TZ'
    TH = 'TH'
    TL = 'TL'
    TG = 'TG'
    TK = 'TK'
    TO = 'TO'
    TT = 'TT'
    TN = 'TN'
    TR = 'TR'
    TM = 'TM'
    TC = 'TC'
    TV = 'TV'
    UG = 'UG'
    UA = 'UA'
    AE = 'AE'
    GB = 'GB'
    US = 'US'
    UM = 'UM'
    UY = 'UY'
    UZ = 'UZ'
    VU = 'VU'
    VE = 'VE'
    VN = 'VN'
    VG = 'VG'
    VI = 'VI'
    WF = 'WF'
    EH = 'EH'
    YE = 'YE'
    ZM = 'ZM'
    ZW = 'ZW'

class PatientSecondaryInsuranceSubscriberGenderEnum(str, Enum):
    r"""One of `\\"Male\\"` or `\\"Female\\"`"""
    UNKNOWN = ''
    MALE = 'Male'
    FEMALE = 'Female'
    OTHER = 'Other'
    UNK = 'UNK'
    ASKU = 'ASKU'

class PatientSecondaryInsuranceSubscriberStateEnum(str, Enum):
    r"""Two-letter state code"""
    AL = 'AL'
    AK = 'AK'
    AS = 'AS'
    AZ = 'AZ'
    AR = 'AR'
    AA = 'AA'
    AE = 'AE'
    AP = 'AP'
    CA = 'CA'
    CO = 'CO'
    CT = 'CT'
    DE = 'DE'
    DC = 'DC'
    FL = 'FL'
    GA = 'GA'
    GU = 'GU'
    HI = 'HI'
    ID = 'ID'
    IL = 'IL'
    IN = 'IN'
    IA = 'IA'
    KS = 'KS'
    KY = 'KY'
    LA = 'LA'
    ME = 'ME'
    MD = 'MD'
    MA = 'MA'
    MI = 'MI'
    MN = 'MN'
    MS = 'MS'
    MO = 'MO'
    MT = 'MT'
    NE = 'NE'
    NV = 'NV'
    NH = 'NH'
    NJ = 'NJ'
    NM = 'NM'
    NY = 'NY'
    NC = 'NC'
    ND = 'ND'
    MP = 'MP'
    OH = 'OH'
    OK = 'OK'
    OR = 'OR'
    PA = 'PA'
    PR = 'PR'
    RI = 'RI'
    SC = 'SC'
    SD = 'SD'
    TN = 'TN'
    TX = 'TX'
    UT = 'UT'
    VT = 'VT'
    VI = 'VI'
    VA = 'VA'
    WA = 'WA'
    WV = 'WV'
    WI = 'WI'
    WY = 'WY'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientSecondaryInsurance:
    r"""**Warning:** Changing insurance information may make past appointments unbillable. Insurance data is also **unvalidated**; you should use the [`/api/insurances`](#apiinsurances) endpoint to find the appropriate insurance payer."""
    
    insurance_claim_office_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insurance_claim_office_number'), 'exclude': lambda f: f is None }})
    r"""Insurance office phone number"""  
    insurance_company: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insurance_company'), 'exclude': lambda f: f is None }})  
    insurance_group_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insurance_group_name'), 'exclude': lambda f: f is None }})  
    insurance_group_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insurance_group_number'), 'exclude': lambda f: f is None }})  
    insurance_id_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insurance_id_number'), 'exclude': lambda f: f is None }})  
    insurance_payer_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insurance_payer_id'), 'exclude': lambda f: f is None }})  
    insurance_plan_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insurance_plan_name'), 'exclude': lambda f: f is None }})
    r"""Name of insurance plan."""  
    insurance_plan_type: Optional[PatientSecondaryInsuranceInsurancePlanTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insurance_plan_type'), 'exclude': lambda f: f is None }})  
    is_subscriber_the_patient: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_subscriber_the_patient'), 'exclude': lambda f: f is None }})
    r"""True if the insurance policy is under patient's own name. Defaults to true"""  
    patient_relationship_to_subscriber: Optional[PatientSecondaryInsurancePatientRelationshipToSubscriberEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('patient_relationship_to_subscriber'), 'exclude': lambda f: f is None }})
    r"""HCFA/1500 individual relationship code"""  
    photo_back: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('photo_back'), 'exclude': lambda f: f is None }})
    r"""Photo of back of insurance card"""  
    photo_front: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('photo_front'), 'exclude': lambda f: f is None }})
    r"""Photo of front of insurance card"""  
    subscriber_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriber_address'), 'exclude': lambda f: f is None }})  
    subscriber_city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriber_city'), 'exclude': lambda f: f is None }})  
    subscriber_country: Optional[PatientSecondaryInsuranceSubscriberCountryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriber_country'), 'exclude': lambda f: f is None }})
    r"""Two-letter country code"""  
    subscriber_date_of_birth: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriber_date_of_birth'), 'exclude': lambda f: f is None }})  
    subscriber_first_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriber_first_name'), 'exclude': lambda f: f is None }})  
    subscriber_gender: Optional[PatientSecondaryInsuranceSubscriberGenderEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriber_gender'), 'exclude': lambda f: f is None }})
    r"""One of `\\"Male\\"` or `\\"Female\\"`"""  
    subscriber_last_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriber_last_name'), 'exclude': lambda f: f is None }})  
    subscriber_middle_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriber_middle_name'), 'exclude': lambda f: f is None }})  
    subscriber_social_security: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriber_social_security'), 'exclude': lambda f: f is None }})  
    subscriber_state: Optional[PatientSecondaryInsuranceSubscriberStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriber_state'), 'exclude': lambda f: f is None }})
    r"""Two-letter state code"""  
    subscriber_suffix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriber_suffix'), 'exclude': lambda f: f is None }})
    r"""E.g. `\\"II\\"` or `\\"III\\"`"""  
    subscriber_zip_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriber_zip_code'), 'exclude': lambda f: f is None }})  
    
class PatientTertiaryInsuranceInsurancePlanTypeEnum(str, Enum):
    UNKNOWN = ''
    AM = 'AM'
    BL = 'BL'
    CH = 'CH'
    CI = 'CI'
    SEVENTEEN = '17'
    DS = 'DS'
    FOURTEEN = '14'
    FI = 'FI'
    HM = 'HM'
    SIXTEEN = '16'
    FIFTEEN = '15'
    LM = 'LM'
    MC = 'MC'
    MA = 'MA'
    MB = 'MB'
    ZZ = 'ZZ'
    OF = 'OF'
    ELEVEN = '11'
    THIRTEEN = '13'
    TWELVE = '12'
    TV = 'TV'
    VA = 'VA'
    WC = 'WC'

class PatientTertiaryInsurancePatientRelationshipToSubscriberEnum(str, Enum):
    r"""HCFA/1500 individual relationship code"""
    UNKNOWN = ''
    ONE = '01'
    FOUR = '04'
    FIVE = '05'
    SEVEN = '07'
    TEN = '10'
    FIFTEEN = '15'
    SEVENTEEN = '17'
    NINETEEN = '19'
    TWENTY = '20'
    TWENTY_ONE = '21'
    TWENTY_TWO = '22'
    TWENTY_THREE = '23'
    TWENTY_FOUR = '24'
    TWENTY_NINE = '29'
    THIRTY_TWO = '32'
    THIRTY_THREE = '33'
    THIRTY_SIX = '36'
    THIRTY_NINE = '39'
    FORTY = '40'
    FORTY_ONE = '41'
    FORTY_THREE = '43'
    FIFTY_THREE = '53'
    SEVENTY_SIX = '76'
    G8 = 'G8'

class PatientTertiaryInsuranceSubscriberCountryEnum(str, Enum):
    r"""Two-letter country code"""
    UNKNOWN = ''
    AF = 'AF'
    AX = 'AX'
    AL = 'AL'
    DZ = 'DZ'
    AS = 'AS'
    AD = 'AD'
    AO = 'AO'
    AI = 'AI'
    AQ = 'AQ'
    AG = 'AG'
    AR = 'AR'
    AM = 'AM'
    AW = 'AW'
    AU = 'AU'
    AT = 'AT'
    AZ = 'AZ'
    BS = 'BS'
    BH = 'BH'
    BD = 'BD'
    BB = 'BB'
    BY = 'BY'
    BE = 'BE'
    BZ = 'BZ'
    BJ = 'BJ'
    BM = 'BM'
    BT = 'BT'
    BO = 'BO'
    BQ = 'BQ'
    BA = 'BA'
    BW = 'BW'
    BV = 'BV'
    BR = 'BR'
    IO = 'IO'
    BN = 'BN'
    BG = 'BG'
    BF = 'BF'
    BI = 'BI'
    KH = 'KH'
    CM = 'CM'
    CA = 'CA'
    CV = 'CV'
    KY = 'KY'
    CF = 'CF'
    TD = 'TD'
    CL = 'CL'
    CN = 'CN'
    CX = 'CX'
    CC = 'CC'
    CO = 'CO'
    KM = 'KM'
    CG = 'CG'
    CD = 'CD'
    CK = 'CK'
    CR = 'CR'
    CI = 'CI'
    HR = 'HR'
    CU = 'CU'
    CW = 'CW'
    CY = 'CY'
    CZ = 'CZ'
    CYM = 'CYM'
    DK = 'DK'
    DJ = 'DJ'
    DM = 'DM'
    DO = 'DO'
    EC = 'EC'
    EG = 'EG'
    SV = 'SV'
    GQ = 'GQ'
    ER = 'ER'
    EE = 'EE'
    ET = 'ET'
    FK = 'FK'
    FO = 'FO'
    FJ = 'FJ'
    FI = 'FI'
    FR = 'FR'
    GF = 'GF'
    PF = 'PF'
    TF = 'TF'
    GA = 'GA'
    GM = 'GM'
    GE = 'GE'
    DE = 'DE'
    GH = 'GH'
    GI = 'GI'
    GR = 'GR'
    GL = 'GL'
    GD = 'GD'
    GP = 'GP'
    GU = 'GU'
    GT = 'GT'
    GG = 'GG'
    GN = 'GN'
    GW = 'GW'
    GY = 'GY'
    HT = 'HT'
    HM = 'HM'
    VA = 'VA'
    HN = 'HN'
    HK = 'HK'
    HU = 'HU'
    IS = 'IS'
    IN = 'IN'
    ID = 'ID'
    IR = 'IR'
    IQ = 'IQ'
    IE = 'IE'
    IM = 'IM'
    IL = 'IL'
    IT = 'IT'
    JM = 'JM'
    JP = 'JP'
    JE = 'JE'
    JO = 'JO'
    KZ = 'KZ'
    KE = 'KE'
    KI = 'KI'
    KP = 'KP'
    KR = 'KR'
    XK = 'XK'
    KW = 'KW'
    KG = 'KG'
    LA = 'LA'
    LV = 'LV'
    LB = 'LB'
    LS = 'LS'
    LR = 'LR'
    LY = 'LY'
    LI = 'LI'
    LT = 'LT'
    LU = 'LU'
    MO = 'MO'
    MK = 'MK'
    MG = 'MG'
    MW = 'MW'
    MY = 'MY'
    MV = 'MV'
    ML = 'ML'
    MT = 'MT'
    MH = 'MH'
    MQ = 'MQ'
    MR = 'MR'
    MU = 'MU'
    YT = 'YT'
    MX = 'MX'
    FM = 'FM'
    MD = 'MD'
    MC = 'MC'
    MN = 'MN'
    ME = 'ME'
    MS = 'MS'
    MA = 'MA'
    MZ = 'MZ'
    MM = 'MM'
    NA = 'NA'
    NR = 'NR'
    NP = 'NP'
    NL = 'NL'
    NC = 'NC'
    NZ = 'NZ'
    NI = 'NI'
    NE = 'NE'
    NG = 'NG'
    NU = 'NU'
    NF = 'NF'
    MP = 'MP'
    NO = 'NO'
    OM = 'OM'
    PK = 'PK'
    PW = 'PW'
    PS = 'PS'
    PA = 'PA'
    PG = 'PG'
    PY = 'PY'
    PE = 'PE'
    PH = 'PH'
    PN = 'PN'
    PL = 'PL'
    PT = 'PT'
    PR = 'PR'
    QA = 'QA'
    RE = 'RE'
    RO = 'RO'
    RU = 'RU'
    RW = 'RW'
    BL = 'BL'
    SH = 'SH'
    KN = 'KN'
    LC = 'LC'
    MF = 'MF'
    PM = 'PM'
    VC = 'VC'
    WS = 'WS'
    SM = 'SM'
    ST = 'ST'
    SA = 'SA'
    SN = 'SN'
    RS = 'RS'
    SC = 'SC'
    SL = 'SL'
    SG = 'SG'
    SX = 'SX'
    SK = 'SK'
    SI = 'SI'
    SB = 'SB'
    SO = 'SO'
    ZA = 'ZA'
    GS = 'GS'
    SS = 'SS'
    ES = 'ES'
    LK = 'LK'
    SD = 'SD'
    SR = 'SR'
    SJ = 'SJ'
    SZ = 'SZ'
    SE = 'SE'
    CH = 'CH'
    SY = 'SY'
    TW = 'TW'
    TJ = 'TJ'
    TZ = 'TZ'
    TH = 'TH'
    TL = 'TL'
    TG = 'TG'
    TK = 'TK'
    TO = 'TO'
    TT = 'TT'
    TN = 'TN'
    TR = 'TR'
    TM = 'TM'
    TC = 'TC'
    TV = 'TV'
    UG = 'UG'
    UA = 'UA'
    AE = 'AE'
    GB = 'GB'
    US = 'US'
    UM = 'UM'
    UY = 'UY'
    UZ = 'UZ'
    VU = 'VU'
    VE = 'VE'
    VN = 'VN'
    VG = 'VG'
    VI = 'VI'
    WF = 'WF'
    EH = 'EH'
    YE = 'YE'
    ZM = 'ZM'
    ZW = 'ZW'

class PatientTertiaryInsuranceSubscriberGenderEnum(str, Enum):
    r"""One of `\\"Male\\"` or `\\"Female\\"`"""
    UNKNOWN = ''
    MALE = 'Male'
    FEMALE = 'Female'
    OTHER = 'Other'
    UNK = 'UNK'
    ASKU = 'ASKU'

class PatientTertiaryInsuranceSubscriberStateEnum(str, Enum):
    r"""Two-letter state code"""
    AL = 'AL'
    AK = 'AK'
    AS = 'AS'
    AZ = 'AZ'
    AR = 'AR'
    AA = 'AA'
    AE = 'AE'
    AP = 'AP'
    CA = 'CA'
    CO = 'CO'
    CT = 'CT'
    DE = 'DE'
    DC = 'DC'
    FL = 'FL'
    GA = 'GA'
    GU = 'GU'
    HI = 'HI'
    ID = 'ID'
    IL = 'IL'
    IN = 'IN'
    IA = 'IA'
    KS = 'KS'
    KY = 'KY'
    LA = 'LA'
    ME = 'ME'
    MD = 'MD'
    MA = 'MA'
    MI = 'MI'
    MN = 'MN'
    MS = 'MS'
    MO = 'MO'
    MT = 'MT'
    NE = 'NE'
    NV = 'NV'
    NH = 'NH'
    NJ = 'NJ'
    NM = 'NM'
    NY = 'NY'
    NC = 'NC'
    ND = 'ND'
    MP = 'MP'
    OH = 'OH'
    OK = 'OK'
    OR = 'OR'
    PA = 'PA'
    PR = 'PR'
    RI = 'RI'
    SC = 'SC'
    SD = 'SD'
    TN = 'TN'
    TX = 'TX'
    UT = 'UT'
    VT = 'VT'
    VI = 'VI'
    VA = 'VA'
    WA = 'WA'
    WV = 'WV'
    WI = 'WI'
    WY = 'WY'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientTertiaryInsurance:
    r"""**Warning:** Changing insurance information may make past appointments unbillable. Insurance data is also **unvalidated**; you should use the [`/api/insurances`](#apiinsurances) endpoint to find the appropriate insurance payer."""
    
    insurance_claim_office_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insurance_claim_office_number'), 'exclude': lambda f: f is None }})
    r"""Insurance office phone number"""  
    insurance_company: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insurance_company'), 'exclude': lambda f: f is None }})  
    insurance_group_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insurance_group_name'), 'exclude': lambda f: f is None }})  
    insurance_group_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insurance_group_number'), 'exclude': lambda f: f is None }})  
    insurance_id_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insurance_id_number'), 'exclude': lambda f: f is None }})  
    insurance_payer_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insurance_payer_id'), 'exclude': lambda f: f is None }})  
    insurance_plan_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insurance_plan_name'), 'exclude': lambda f: f is None }})
    r"""Name of insurance plan."""  
    insurance_plan_type: Optional[PatientTertiaryInsuranceInsurancePlanTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insurance_plan_type'), 'exclude': lambda f: f is None }})  
    is_subscriber_the_patient: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_subscriber_the_patient'), 'exclude': lambda f: f is None }})
    r"""True if the insurance policy is under patient's own name. Defaults to true"""  
    patient_relationship_to_subscriber: Optional[PatientTertiaryInsurancePatientRelationshipToSubscriberEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('patient_relationship_to_subscriber'), 'exclude': lambda f: f is None }})
    r"""HCFA/1500 individual relationship code"""  
    photo_back: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('photo_back'), 'exclude': lambda f: f is None }})
    r"""Photo of back of insurance card"""  
    photo_front: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('photo_front'), 'exclude': lambda f: f is None }})
    r"""Photo of front of insurance card"""  
    subscriber_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriber_address'), 'exclude': lambda f: f is None }})  
    subscriber_city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriber_city'), 'exclude': lambda f: f is None }})  
    subscriber_country: Optional[PatientTertiaryInsuranceSubscriberCountryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriber_country'), 'exclude': lambda f: f is None }})
    r"""Two-letter country code"""  
    subscriber_date_of_birth: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriber_date_of_birth'), 'exclude': lambda f: f is None }})  
    subscriber_first_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriber_first_name'), 'exclude': lambda f: f is None }})  
    subscriber_gender: Optional[PatientTertiaryInsuranceSubscriberGenderEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriber_gender'), 'exclude': lambda f: f is None }})
    r"""One of `\\"Male\\"` or `\\"Female\\"`"""  
    subscriber_last_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriber_last_name'), 'exclude': lambda f: f is None }})  
    subscriber_middle_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriber_middle_name'), 'exclude': lambda f: f is None }})  
    subscriber_social_security: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriber_social_security'), 'exclude': lambda f: f is None }})  
    subscriber_state: Optional[PatientTertiaryInsuranceSubscriberStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriber_state'), 'exclude': lambda f: f is None }})
    r"""Two-letter state code"""  
    subscriber_suffix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriber_suffix'), 'exclude': lambda f: f is None }})
    r"""E.g. `\\"II\\"` or `\\"III\\"`"""  
    subscriber_zip_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriber_zip_code'), 'exclude': lambda f: f is None }})  
    
class PatientWorkerCompInsuranceWorkersCompPayerStateEnum(str, Enum):
    AL = 'AL'
    AK = 'AK'
    AS = 'AS'
    AZ = 'AZ'
    AR = 'AR'
    AA = 'AA'
    AE = 'AE'
    AP = 'AP'
    CA = 'CA'
    CO = 'CO'
    CT = 'CT'
    DE = 'DE'
    DC = 'DC'
    FL = 'FL'
    GA = 'GA'
    GU = 'GU'
    HI = 'HI'
    ID = 'ID'
    IL = 'IL'
    IN = 'IN'
    IA = 'IA'
    KS = 'KS'
    KY = 'KY'
    LA = 'LA'
    ME = 'ME'
    MD = 'MD'
    MA = 'MA'
    MI = 'MI'
    MN = 'MN'
    MS = 'MS'
    MO = 'MO'
    MT = 'MT'
    NE = 'NE'
    NV = 'NV'
    NH = 'NH'
    NJ = 'NJ'
    NM = 'NM'
    NY = 'NY'
    NC = 'NC'
    ND = 'ND'
    MP = 'MP'
    OH = 'OH'
    OK = 'OK'
    OR = 'OR'
    PA = 'PA'
    PR = 'PR'
    RI = 'RI'
    SC = 'SC'
    SD = 'SD'
    TN = 'TN'
    TX = 'TX'
    UT = 'UT'
    VT = 'VT'
    VI = 'VI'
    VA = 'VA'
    WA = 'WA'
    WV = 'WV'
    WI = 'WI'
    WY = 'WY'

class PatientWorkerCompInsuranceWorkersCompStateOfOccurrenceEnum(str, Enum):
    AL = 'AL'
    AK = 'AK'
    AS = 'AS'
    AZ = 'AZ'
    AR = 'AR'
    AA = 'AA'
    AE = 'AE'
    AP = 'AP'
    CA = 'CA'
    CO = 'CO'
    CT = 'CT'
    DE = 'DE'
    DC = 'DC'
    FL = 'FL'
    GA = 'GA'
    GU = 'GU'
    HI = 'HI'
    ID = 'ID'
    IL = 'IL'
    IN = 'IN'
    IA = 'IA'
    KS = 'KS'
    KY = 'KY'
    LA = 'LA'
    ME = 'ME'
    MD = 'MD'
    MA = 'MA'
    MI = 'MI'
    MN = 'MN'
    MS = 'MS'
    MO = 'MO'
    MT = 'MT'
    NE = 'NE'
    NV = 'NV'
    NH = 'NH'
    NJ = 'NJ'
    NM = 'NM'
    NY = 'NY'
    NC = 'NC'
    ND = 'ND'
    MP = 'MP'
    OH = 'OH'
    OK = 'OK'
    OR = 'OR'
    PA = 'PA'
    PR = 'PR'
    RI = 'RI'
    SC = 'SC'
    SD = 'SD'
    TN = 'TN'
    TX = 'TX'
    UT = 'UT'
    VT = 'VT'
    VI = 'VI'
    VA = 'VA'
    WA = 'WA'
    WV = 'WV'
    WI = 'WI'
    WY = 'WY'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientWorkerCompInsurance:
    
    property_and_casualty_agency_claim_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('property_and_casualty_agency_claim_number'), 'exclude': lambda f: f is None }})  
    workers_comp_carrier_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workers_comp_carrier_code'), 'exclude': lambda f: f is None }})  
    workers_comp_case_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workers_comp_case_number'), 'exclude': lambda f: f is None }})  
    workers_comp_company: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workers_comp_company'), 'exclude': lambda f: f is None }})  
    workers_comp_date_of_accident: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workers_comp_date_of_accident'), 'exclude': lambda f: f is None }})  
    workers_comp_group_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workers_comp_group_name'), 'exclude': lambda f: f is None }})  
    workers_comp_group_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workers_comp_group_number'), 'exclude': lambda f: f is None }})  
    workers_comp_notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workers_comp_notes'), 'exclude': lambda f: f is None }})  
    workers_comp_payer_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workers_comp_payer_address'), 'exclude': lambda f: f is None }})  
    workers_comp_payer_city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workers_comp_payer_city'), 'exclude': lambda f: f is None }})  
    workers_comp_payer_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workers_comp_payer_id'), 'exclude': lambda f: f is None }})  
    workers_comp_payer_state: Optional[PatientWorkerCompInsuranceWorkersCompPayerStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workers_comp_payer_state'), 'exclude': lambda f: f is None }})  
    workers_comp_payer_zip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workers_comp_payer_zip'), 'exclude': lambda f: f is None }})  
    workers_comp_state_of_occurrence: Optional[PatientWorkerCompInsuranceWorkersCompStateOfOccurrenceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workers_comp_state_of_occurrence'), 'exclude': lambda f: f is None }})  
    workers_comp_wcb: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workers_comp_wcb'), 'exclude': lambda f: f is None }})  
    workers_comp_wcb_rating_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workers_comp_wcb_rating_code'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Patient:
    r"""Created"""
    
    doctor: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('doctor') }})  
    gender: PatientGenderEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gender') }})
    r"""One of `\\"Male\\"`, `\\"Female\\"`, or `\\"Other\\"`"""  
    address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})  
    auto_accident_insurance: Optional[PatientAutoAccidentInsurance] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_accident_insurance'), 'exclude': lambda f: f is None }})  
    cell_phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cell_phone'), 'exclude': lambda f: f is None }})  
    chart_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chart_id'), 'exclude': lambda f: f is None }})
    r"""Automatically set using first & last name if absent"""  
    city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city'), 'exclude': lambda f: f is None }})  
    copay: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('copay'), 'exclude': lambda f: f is None }})  
    custom_demographics: Optional[list[PatientCustomPatientFieldValue]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_demographics'), 'exclude': lambda f: f is None }})  
    date_of_birth: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_of_birth'), 'exclude': lambda f: f is None }})  
    date_of_first_appointment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_of_first_appointment'), 'exclude': lambda f: f is None }})
    r"""Date of first patient visit."""  
    date_of_last_appointment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_of_last_appointment'), 'exclude': lambda f: f is None }})
    r"""Date of previous patient visit"""  
    default_pharmacy: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('default_pharmacy'), 'exclude': lambda f: f is None }})
    r"""ncpdp id of patient's default pharmacy"""  
    disable_sms_messages: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disable_sms_messages'), 'exclude': lambda f: f is None }})
    r"""If True, suppress SMS/Txt messages to this patient even if we have a cell phone # for them."""  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})  
    emergency_contact_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emergency_contact_name'), 'exclude': lambda f: f is None }})  
    emergency_contact_phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emergency_contact_phone'), 'exclude': lambda f: f is None }})  
    emergency_contact_relation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emergency_contact_relation'), 'exclude': lambda f: f is None }})  
    employer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('employer'), 'exclude': lambda f: f is None }})  
    employer_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('employer_address'), 'exclude': lambda f: f is None }})  
    employer_city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('employer_city'), 'exclude': lambda f: f is None }})  
    employer_state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('employer_state'), 'exclude': lambda f: f is None }})
    r"""Two-letter abbreviation"""  
    employer_zip_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('employer_zip_code'), 'exclude': lambda f: f is None }})  
    ethnicity: Optional[PatientEthnicityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ethnicity'), 'exclude': lambda f: f is None }})
    r"""One of `\\"blank\\"`, `\\"hispanic\\"`, `\\"not_hispanic\\"` or `\\"declined\\"`"""  
    first_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_name'), 'exclude': lambda f: f is None }})  
    home_phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('home_phone'), 'exclude': lambda f: f is None }})  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    last_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_name'), 'exclude': lambda f: f is None }})  
    middle_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('middle_name'), 'exclude': lambda f: f is None }})  
    nick_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nick_name'), 'exclude': lambda f: f is None }})
    r"""Common name for patient, should be used instead of first name if supplied."""  
    office_phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('office_phone'), 'exclude': lambda f: f is None }})  
    offices: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offices'), 'exclude': lambda f: f is None }})
    r"""IDs of every office this patient has been to"""  
    patient_flags: Optional[list[PatientPatientFlagType]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('patient_flags'), 'exclude': lambda f: f is None }})
    r"""Possible patient flag type that can be attached to the patient"""  
    patient_flags_attached: Optional[list[PatientPatientFlag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('patient_flags_attached'), 'exclude': lambda f: f is None }})
    r"""Patient flags attached to the patient"""  
    patient_payment_profile: Optional[PatientPatientPaymentProfileEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('patient_payment_profile'), 'exclude': lambda f: f is None }})
    r"""One of `\\"\\"`, `\\"Cash\\"`, `\\"Insurance\\"`, `\\"Insurance Out of Network\\"`, `\\"Auto Accident\\"` or `\\"Worker's Comp\\"`.<br>**Note:** Patient must already have either `primary_insurance` or `secondary_insurance` or new `primary_insurance` or `secondary_insurance` is passed in request if `Insurance`, `Auto Accident` or `Worker's Comp` payment profiles are chosen."""  
    patient_photo: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('patient_photo'), 'exclude': lambda f: f is None }})  
    patient_photo_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('patient_photo_date'), 'exclude': lambda f: f is None }})
    r"""Cannot be passed without `patient_photo`"""  
    patient_status: Optional[PatientPatientStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('patient_status'), 'exclude': lambda f: f is None }})
    r"""One of `\\"A\\"` (active), `\\"I\\"` (inactive), `\\"D\\"` (inactive-deceased)"""  
    preferred_language: Optional[PatientPreferredLanguageEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preferred_language'), 'exclude': lambda f: f is None }})
    r"""Use ISO 639 alpha-3 codes"""  
    primary_care_physician: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary_care_physician'), 'exclude': lambda f: f is None }})
    r"""Referring doctor for this patient"""  
    primary_insurance: Optional[PatientPrimaryInsurance] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary_insurance'), 'exclude': lambda f: f is None }})
    r"""**Warning:** Changing insurance information may make past appointments unbillable. Insurance data is also **unvalidated**; you should use the [`/api/insurances`](#apiinsurances) endpoint to find the appropriate insurance payer."""  
    race: Optional[PatientRaceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('race'), 'exclude': lambda f: f is None }})
    r"""One of `\\"blank\\"`, `\\"indian\\"`, `\\"asian\\"`, `\\"black\\"`, `\\"hawaiian\\"`, `\\"white\\"` or `\\"declined\\"`"""  
    referring_doctor: Optional[PatientPatient] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('referring_doctor'), 'exclude': lambda f: f is None }})  
    referring_source: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('referring_source'), 'exclude': lambda f: f is None }})
    r"""Referring source."""  
    responsible_party_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('responsible_party_email'), 'exclude': lambda f: f is None }})  
    responsible_party_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('responsible_party_name'), 'exclude': lambda f: f is None }})  
    responsible_party_phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('responsible_party_phone'), 'exclude': lambda f: f is None }})  
    responsible_party_relation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('responsible_party_relation'), 'exclude': lambda f: f is None }})  
    secondary_insurance: Optional[PatientSecondaryInsurance] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secondary_insurance'), 'exclude': lambda f: f is None }})
    r"""**Warning:** Changing insurance information may make past appointments unbillable. Insurance data is also **unvalidated**; you should use the [`/api/insurances`](#apiinsurances) endpoint to find the appropriate insurance payer."""  
    social_security_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('social_security_number'), 'exclude': lambda f: f is None }})  
    state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Two-letter abbreviation"""  
    tertiary_insurance: Optional[PatientTertiaryInsurance] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tertiary_insurance'), 'exclude': lambda f: f is None }})
    r"""**Warning:** Changing insurance information may make past appointments unbillable. Insurance data is also **unvalidated**; you should use the [`/api/insurances`](#apiinsurances) endpoint to find the appropriate insurance payer."""  
    updated_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'exclude': lambda f: f is None }})  
    workers_comp_insurance: Optional[PatientWorkerCompInsurance] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workers_comp_insurance'), 'exclude': lambda f: f is None }})  
    zip_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zip_code'), 'exclude': lambda f: f is None }})  
    