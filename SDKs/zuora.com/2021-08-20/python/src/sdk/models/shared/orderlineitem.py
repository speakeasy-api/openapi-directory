"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import ordercontactretrieveorderlineitem as shared_ordercontactretrieveorderlineitem
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional

class OrderLineItemItemStateEnum(str, Enum):
    r"""The state of the Order Line Item. See [Order Line Item states, Order states, and state transitions](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AB_Order_Line_Item_States_and_Order_States) for more information."""
    EXECUTING = 'Executing'
    SENT_TO_BILLING = 'SentToBilling'
    COMPLETE = 'Complete'
    CANCELLED = 'Cancelled'

class OrderLineItemItemTypeEnum(str, Enum):
    r"""The type of the Order Line Item."""
    PRODUCT = 'Product'
    FEE = 'Fee'
    SERVICES = 'Services'

class OrderLineItemTaxModeEnum(str, Enum):
    r"""The tax mode for the Order Line Item."""
    TAX_INCLUSIVE = 'TaxInclusive'
    TAX_EXCLUSIVE = 'TaxExclusive'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OrderLineItem:
    
    accounting_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountingCode'), 'exclude': lambda f: f is None }})
    r"""The accountingCode for the Order Line Item."""  
    amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount'), 'exclude': lambda f: f is None }})
    r"""The calculated gross amount for the Order Line Item."""  
    amount_per_unit: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amountPerUnit'), 'exclude': lambda f: f is None }})
    r"""The actual charged amount per unit for the Order Line Item."""  
    bill_target_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billTargetDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The target date for the Order Line Item to be picked up by bill run for billing."""  
    custom_fields: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customFields'), 'exclude': lambda f: f is None }})
    r"""Container for custom fields of an Order Line Item object."""  
    deferred_revenue_accounting_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deferredRevenueAccountingCode'), 'exclude': lambda f: f is None }})
    r"""The deferred revenue accounting code for the Order Line Item."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of the Order Line Item."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The sytem generated Id for the Order Line Item."""  
    item_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemName'), 'exclude': lambda f: f is None }})
    r"""The name of the Order Line Item."""  
    item_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemNumber'), 'exclude': lambda f: f is None }})
    r"""The number for the Order Line Item."""  
    item_state: Optional[OrderLineItemItemStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemState'), 'exclude': lambda f: f is None }})
    r"""The state of the Order Line Item. See [Order Line Item states, Order states, and state transitions](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AB_Order_Line_Item_States_and_Order_States) for more information."""  
    item_type: Optional[OrderLineItemItemTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemType'), 'exclude': lambda f: f is None }})
    r"""The type of the Order Line Item."""  
    list_price_per_unit: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listPricePerUnit'), 'exclude': lambda f: f is None }})
    r"""The list price per unit for the Order Line Item."""  
    product_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productCode'), 'exclude': lambda f: f is None }})
    r"""The product code for the Order Line Item."""  
    product_rate_plan_charge_id: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productRatePlanChargeId'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Id of a Product Rate Plan Charge. Only one-time charges are supported."""  
    purchase_order_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('purchaseOrderNumber'), 'exclude': lambda f: f is None }})
    r"""Used by customers to specify the Purchase Order Number provided by the buyer."""  
    quantity: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity'), 'exclude': lambda f: f is None }})
    r"""The quantity of units, such as the number of authors in a hosted wiki service."""  
    recognized_revenue_accounting_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recognizedRevenueAccountingCode'), 'exclude': lambda f: f is None }})
    r"""The recognized revenue accounting code for the Order Line Item."""  
    revenue_recognition_rule: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revenueRecognitionRule'), 'exclude': lambda f: f is None }})
    r"""The Revenue Recognition rule for the Order Line Item."""  
    sold_to: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('soldTo'), 'exclude': lambda f: f is None }})
    r"""The Id of an existing account which is set as the sold-to contact of the Order Line Item (OLI)."""  
    sold_to_data: Optional[shared_ordercontactretrieveorderlineitem.OrderContactRetrieveOrderLineItem] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('soldToData'), 'exclude': lambda f: f is None }})
    r"""A new account created as the sold-to contact of the Order Line Item (OLI)."""  
    tax_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxCode'), 'exclude': lambda f: f is None }})
    r"""The tax code for the Order Line Item."""  
    tax_mode: Optional[OrderLineItemTaxModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxMode'), 'exclude': lambda f: f is None }})
    r"""The tax mode for the Order Line Item."""  
    transaction_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transactionDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The transaction date of the Order Line Item."""  
    uom: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UOM'), 'exclude': lambda f: f is None }})
    r"""Specifies the units to measure usage."""  
    