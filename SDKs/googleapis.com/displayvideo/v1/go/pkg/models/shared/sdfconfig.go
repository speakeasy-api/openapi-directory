// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SdfConfigVersionEnum - Required. The version of SDF being used.
type SdfConfigVersionEnum string

const (
	SdfConfigVersionEnumSdfVersionUnspecified SdfConfigVersionEnum = "SDF_VERSION_UNSPECIFIED"
	SdfConfigVersionEnumSdfVersion31          SdfConfigVersionEnum = "SDF_VERSION_3_1"
	SdfConfigVersionEnumSdfVersion4           SdfConfigVersionEnum = "SDF_VERSION_4"
	SdfConfigVersionEnumSdfVersion41          SdfConfigVersionEnum = "SDF_VERSION_4_1"
	SdfConfigVersionEnumSdfVersion42          SdfConfigVersionEnum = "SDF_VERSION_4_2"
	SdfConfigVersionEnumSdfVersion5           SdfConfigVersionEnum = "SDF_VERSION_5"
	SdfConfigVersionEnumSdfVersion51          SdfConfigVersionEnum = "SDF_VERSION_5_1"
	SdfConfigVersionEnumSdfVersion52          SdfConfigVersionEnum = "SDF_VERSION_5_2"
	SdfConfigVersionEnumSdfVersion53          SdfConfigVersionEnum = "SDF_VERSION_5_3"
	SdfConfigVersionEnumSdfVersion54          SdfConfigVersionEnum = "SDF_VERSION_5_4"
	SdfConfigVersionEnumSdfVersion55          SdfConfigVersionEnum = "SDF_VERSION_5_5"
)

func (e SdfConfigVersionEnum) ToPointer() *SdfConfigVersionEnum {
	return &e
}

func (e *SdfConfigVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SDF_VERSION_UNSPECIFIED":
		fallthrough
	case "SDF_VERSION_3_1":
		fallthrough
	case "SDF_VERSION_4":
		fallthrough
	case "SDF_VERSION_4_1":
		fallthrough
	case "SDF_VERSION_4_2":
		fallthrough
	case "SDF_VERSION_5":
		fallthrough
	case "SDF_VERSION_5_1":
		fallthrough
	case "SDF_VERSION_5_2":
		fallthrough
	case "SDF_VERSION_5_3":
		fallthrough
	case "SDF_VERSION_5_4":
		fallthrough
	case "SDF_VERSION_5_5":
		*e = SdfConfigVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SdfConfigVersionEnum: %v", v)
	}
}

// SdfConfig - Structured Data File (SDF) related settings.
type SdfConfig struct {
	// An administrator email address to which the SDF processing status reports will be sent.
	AdminEmail *string `json:"adminEmail,omitempty"`
	// Required. The version of SDF being used.
	Version *SdfConfigVersionEnum `json:"version,omitempty"`
}
