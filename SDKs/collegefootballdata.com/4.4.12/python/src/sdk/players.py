"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Players:
    r"""Player information and data"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_player_season_stats(self, request: operations.GetPlayerSeasonStatsRequest) -> operations.GetPlayerSeasonStatsResponse:
        r"""Player stats by season
        Season player stats
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/stats/player/season'
        
        query_params = utils.get_query_params(operations.GetPlayerSeasonStatsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPlayerSeasonStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PlayerSeasonStat]])
                res.player_season_stats = out
        elif http_res.status_code == 400:
            pass

        return res

    def get_player_usage(self, request: operations.GetPlayerUsageRequest) -> operations.GetPlayerUsageResponse:
        r"""Player usage metrics broken down by season
        Player usage metrics by season
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/player/usage'
        
        query_params = utils.get_query_params(operations.GetPlayerUsageRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPlayerUsageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PlayerUsage]])
                res.player_usages = out
        elif http_res.status_code == 400:
            pass

        return res

    def get_returning_production(self, request: operations.GetReturningProductionRequest) -> operations.GetReturningProductionResponse:
        r"""Team returning production metrics
        Returning production metrics
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/player/returning'
        
        query_params = utils.get_query_params(operations.GetReturningProductionRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetReturningProductionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ReturningProduction]])
                res.returning_productions = out
        elif http_res.status_code == 400:
            pass

        return res

    def get_transfer_portal(self, request: operations.GetTransferPortalRequest) -> operations.GetTransferPortalResponse:
        r"""Transfer portal by season
        Transfer portal by season
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/player/portal'
        
        query_params = utils.get_query_params(operations.GetTransferPortalRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTransferPortalResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PortalPlayer]])
                res.portal_players = out
        elif http_res.status_code == 400:
            pass

        return res

    def player_search(self, request: operations.PlayerSearchRequest) -> operations.PlayerSearchResponse:
        r"""Search for player information
        Search for players
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/player/search'
        
        query_params = utils.get_query_params(operations.PlayerSearchRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PlayerSearchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PlayerSearchResult]])
                res.player_search_results = out
        elif http_res.status_code == 400:
            pass

        return res

    