// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// MessageNewJobStateEnum - The new job state.
type MessageNewJobStateEnum string

const (
	MessageNewJobStateEnumStateUnspecified   MessageNewJobStateEnum = "STATE_UNSPECIFIED"
	MessageNewJobStateEnumQueued             MessageNewJobStateEnum = "QUEUED"
	MessageNewJobStateEnumScheduled          MessageNewJobStateEnum = "SCHEDULED"
	MessageNewJobStateEnumRunning            MessageNewJobStateEnum = "RUNNING"
	MessageNewJobStateEnumSucceeded          MessageNewJobStateEnum = "SUCCEEDED"
	MessageNewJobStateEnumFailed             MessageNewJobStateEnum = "FAILED"
	MessageNewJobStateEnumDeletionInProgress MessageNewJobStateEnum = "DELETION_IN_PROGRESS"
)

func (e *MessageNewJobStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "QUEUED":
		fallthrough
	case "SCHEDULED":
		fallthrough
	case "RUNNING":
		fallthrough
	case "SUCCEEDED":
		fallthrough
	case "FAILED":
		fallthrough
	case "DELETION_IN_PROGRESS":
		*e = MessageNewJobStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MessageNewJobStateEnum: %s", s)
	}
}

// MessageNewTaskStateEnum - The new task state.
type MessageNewTaskStateEnum string

const (
	MessageNewTaskStateEnumStateUnspecified MessageNewTaskStateEnum = "STATE_UNSPECIFIED"
	MessageNewTaskStateEnumPending          MessageNewTaskStateEnum = "PENDING"
	MessageNewTaskStateEnumAssigned         MessageNewTaskStateEnum = "ASSIGNED"
	MessageNewTaskStateEnumRunning          MessageNewTaskStateEnum = "RUNNING"
	MessageNewTaskStateEnumFailed           MessageNewTaskStateEnum = "FAILED"
	MessageNewTaskStateEnumSucceeded        MessageNewTaskStateEnum = "SUCCEEDED"
)

func (e *MessageNewTaskStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "PENDING":
		fallthrough
	case "ASSIGNED":
		fallthrough
	case "RUNNING":
		fallthrough
	case "FAILED":
		fallthrough
	case "SUCCEEDED":
		*e = MessageNewTaskStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MessageNewTaskStateEnum: %s", s)
	}
}

// MessageTypeEnum - The message type.
type MessageTypeEnum string

const (
	MessageTypeEnumTypeUnspecified  MessageTypeEnum = "TYPE_UNSPECIFIED"
	MessageTypeEnumJobStateChanged  MessageTypeEnum = "JOB_STATE_CHANGED"
	MessageTypeEnumTaskStateChanged MessageTypeEnum = "TASK_STATE_CHANGED"
)

func (e *MessageTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TYPE_UNSPECIFIED":
		fallthrough
	case "JOB_STATE_CHANGED":
		fallthrough
	case "TASK_STATE_CHANGED":
		*e = MessageTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MessageTypeEnum: %s", s)
	}
}

// Message - Message details. Describe the attribute that a message should have. Without specified message attributes, no message will be sent by default.
type Message struct {
	// The new job state.
	NewJobState *MessageNewJobStateEnum `json:"newJobState,omitempty"`
	// The new task state.
	NewTaskState *MessageNewTaskStateEnum `json:"newTaskState,omitempty"`
	// The message type.
	Type *MessageTypeEnum `json:"type,omitempty"`
}
