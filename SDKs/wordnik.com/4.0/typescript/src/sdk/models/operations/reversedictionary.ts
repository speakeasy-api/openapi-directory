/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

/**
 * Exclude these comma-delimited source dictionaries
 */
export enum ReverseDictionaryExcludeSourceDictionariesEnum {
  Ahd5 = "ahd-5",
  Century = "century",
  Cmu = "cmu",
  Macmillan = "macmillan",
  Wiktionary = "wiktionary",
  Webster = "webster",
  Wordnet = "wordnet",
}

/**
 * Only include these comma-delimited source dictionaries
 */
export enum ReverseDictionaryIncludeSourceDictionariesEnum {
  Ahd5 = "ahd-5",
  Century = "century",
  Cmu = "cmu",
  Macmillan = "macmillan",
  Wiktionary = "wiktionary",
  Webster = "webster",
  Wordnet = "wordnet",
}

/**
 * Return a closed set of XML tags in response
 */
export enum ReverseDictionaryIncludeTagsEnum {
  False = "false",
  True = "true",
}

/**
 * Attribute to sort by
 */
export enum ReverseDictionarySortByEnum {
  Alpha = "alpha",
  Count = "count",
}

/**
 * Sort direction
 */
export enum ReverseDictionarySortOrderEnum {
  Asc = "asc",
  Desc = "desc",
}

export class ReverseDictionaryRequest extends SpeakeasyBase {
  /**
   * Exclude these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=excludePartOfSpeech",
  })
  excludePartOfSpeech?: string;

  /**
   * Exclude these comma-delimited source dictionaries
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=excludeSourceDictionaries",
  })
  excludeSourceDictionaries?: ReverseDictionaryExcludeSourceDictionariesEnum;

  /**
   * Expand terms
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=expandTerms",
  })
  expandTerms?: string;

  /**
   * Restricts words and finds closest sense
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=findSenseForWord",
  })
  findSenseForWord?: string;

  /**
   * Only include these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=includePartOfSpeech",
  })
  includePartOfSpeech?: string;

  /**
   * Only include these comma-delimited source dictionaries
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=includeSourceDictionaries",
  })
  includeSourceDictionaries?: ReverseDictionaryIncludeSourceDictionariesEnum;

  /**
   * Return a closed set of XML tags in response
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=includeTags",
  })
  includeTags?: ReverseDictionaryIncludeTagsEnum;

  /**
   * Maximum number of results to return
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=limit" })
  limit?: number;

  /**
   * Maximum corpus frequency for terms
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=maxCorpusCount",
  })
  maxCorpusCount?: number;

  /**
   * Maximum word length
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=maxLength",
  })
  maxLength?: number;

  /**
   * Minimum corpus frequency for terms
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=minCorpusCount",
  })
  minCorpusCount?: number;

  /**
   * Minimum word length
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=minLength",
  })
  minLength?: number;

  /**
   * Search term
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=query" })
  query: string;

  /**
   * Results to skip
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=skip" })
  skip?: string;

  /**
   * Attribute to sort by
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sortBy",
  })
  sortBy?: ReverseDictionarySortByEnum;

  /**
   * Sort direction
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sortOrder",
  })
  sortOrder?: ReverseDictionarySortOrderEnum;
}

export class ReverseDictionaryResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
