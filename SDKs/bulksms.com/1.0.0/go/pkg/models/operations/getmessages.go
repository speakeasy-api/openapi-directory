// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetMessagesSecurity struct {
	Password string `security:"scheme,type=http,subtype=basic,name=password"`
	Username string `security:"scheme,type=http,subtype=basic,name=username"`
}

// GetMessagesSortOrderEnum - The default value is DESCENDING
//
// If the `sortOrder` is DESCENDING, the newest messages be first in the result.  ASCENDING places the oldest messages on top of the response.
type GetMessagesSortOrderEnum string

const (
	GetMessagesSortOrderEnumAscending GetMessagesSortOrderEnum = "ASCENDING"
)

func (e GetMessagesSortOrderEnum) ToPointer() *GetMessagesSortOrderEnum {
	return &e
}

func (e *GetMessagesSortOrderEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASCENDING":
		*e = GetMessagesSortOrderEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetMessagesSortOrderEnum: %v", v)
	}
}

type GetMessagesRequest struct {
	// See the message filtering for more information.
	Filter *string `queryParam:"style=form,explode=true,name=filter"`
	// The maximum number of messages that are returned.  The default is 1000.
	// The value of `limit` is not a guarantee that a specific number of messages will be in the response, even if there are more messages available.  Consider the case where you have 150 messages and you specify `limit=50`.  It is possible that only 49 messages will be returned.  The  way to make sure that there are no more messages is to submit a new call using the `id` filter field with the `<` operator (described below).
	Limit *float64 `queryParam:"style=form,explode=true,name=limit"`
	// The default value is DESCENDING
	//
	// If the `sortOrder` is DESCENDING, the newest messages be first in the result.  ASCENDING places the oldest messages on top of the response.
	//
	SortOrder *GetMessagesSortOrderEnum `queryParam:"style=form,explode=true,name=sortOrder"`
}

type GetMessagesResponse struct {
	ContentType string
	// Bad Request. The content or structure of your submission, or a parameter, was found to be invalid.
	Error *shared.Error
	// Contains the requested array of messages
	Messages    []shared.Message
	StatusCode  int
	RawResponse *http.Response
}
