"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class UpdatePayoutScheduleRequestActionEnum(str, Enum):
    r"""Direction on how to handle any payouts that have already been scheduled.
    Permitted values:
    * `CLOSE` will close the existing batch of payouts.
    * `UPDATE` will reschedule the existing batch to the new schedule.
    * `NOTHING` (**default**) will allow the payout to proceed.
    """
    CLOSE = 'CLOSE'
    NOTHING = 'NOTHING'
    UPDATE = 'UPDATE'

class UpdatePayoutScheduleRequestScheduleEnum(str, Enum):
    r"""The payout schedule to which the account is to be updated.
    Permitted values: `DAILY`, `DAILY_US`, `DAILY_EU`, `DAILY_AU`, `DAILY_SG`, `WEEKLY`, `WEEKLY_ON_TUE_FRI_MIDNIGHT`, `BIWEEKLY_ON_1ST_AND_15TH_AT_MIDNIGHT`, `MONTHLY`, `HOLD`.
    `HOLD` will prevent scheduled payouts from happening but will still allow manual payouts to occur.
    """
    BIWEEKLY_ON_1_ST_AND_15_TH_AT_MIDNIGHT = 'BIWEEKLY_ON_1ST_AND_15TH_AT_MIDNIGHT'
    DAILY = 'DAILY'
    DAILY_AU = 'DAILY_AU'
    DAILY_EU = 'DAILY_EU'
    DAILY_SG = 'DAILY_SG'
    DAILY_US = 'DAILY_US'
    HOLD = 'HOLD'
    MONTHLY = 'MONTHLY'
    WEEKLY = 'WEEKLY'
    WEEKLY_ON_TUE_FRI_MIDNIGHT = 'WEEKLY_ON_TUE_FRI_MIDNIGHT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdatePayoutScheduleRequest:
    
    schedule: UpdatePayoutScheduleRequestScheduleEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schedule') }})
    r"""The payout schedule to which the account is to be updated.
    Permitted values: `DAILY`, `DAILY_US`, `DAILY_EU`, `DAILY_AU`, `DAILY_SG`, `WEEKLY`, `WEEKLY_ON_TUE_FRI_MIDNIGHT`, `BIWEEKLY_ON_1ST_AND_15TH_AT_MIDNIGHT`, `MONTHLY`, `HOLD`.
    `HOLD` will prevent scheduled payouts from happening but will still allow manual payouts to occur.
    """  
    action: Optional[UpdatePayoutScheduleRequestActionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action'), 'exclude': lambda f: f is None }})
    r"""Direction on how to handle any payouts that have already been scheduled.
    Permitted values:
    * `CLOSE` will close the existing batch of payouts.
    * `UPDATE` will reschedule the existing batch to the new schedule.
    * `NOTHING` (**default**) will allow the payout to proceed.
    """  
    reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reason'), 'exclude': lambda f: f is None }})
    r"""The reason for the payout schedule update.
    > This field is required when the `schedule` parameter is set to `HOLD`.
    """  
    