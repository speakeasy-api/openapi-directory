// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type UpdateTemplateRequest struct {
	// Template configuration as JSON string
	TemplateDefinitionNew shared.TemplateDefinitionNew `request:"mediaType=application/json"`
	// Template unique identifier
	TemplateID int64 `queryParam:"style=form,explode=true,name=templateId"`
}

// UpdateTemplate500ApplicationJSON - Internal Server Error
type UpdateTemplate500ApplicationJSON struct {
	// Error description
	Error *string `json:"error,omitempty"`
	// HTTP Error code
	Status *int64 `json:"status,omitempty"`
}

// UpdateTemplate422ApplicationJSONErrorEnum - Error description
type UpdateTemplate422ApplicationJSONErrorEnum string

const (
	UpdateTemplate422ApplicationJSONErrorEnumUnableToParseJSONPleaseCheckFormatting               UpdateTemplate422ApplicationJSONErrorEnum = "Unable to parse JSON, please check formatting"
	UpdateTemplate422ApplicationJSONErrorEnumRequiredParameterMissing                             UpdateTemplate422ApplicationJSONErrorEnum = "Required parameter missing"
	UpdateTemplate422ApplicationJSONErrorEnumRequiredParameterMissingTemplateDefinitionNotDefined UpdateTemplate422ApplicationJSONErrorEnum = "Required parameter missing: template definition not defined"
	UpdateTemplate422ApplicationJSONErrorEnumRequiredParameterMissingTemplateNotDefined           UpdateTemplate422ApplicationJSONErrorEnum = "Required parameter missing: template not defined"
)

func (e UpdateTemplate422ApplicationJSONErrorEnum) ToPointer() *UpdateTemplate422ApplicationJSONErrorEnum {
	return &e
}

func (e *UpdateTemplate422ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Unable to parse JSON, please check formatting":
		fallthrough
	case "Required parameter missing":
		fallthrough
	case "Required parameter missing: template definition not defined":
		fallthrough
	case "Required parameter missing: template not defined":
		*e = UpdateTemplate422ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateTemplate422ApplicationJSONErrorEnum: %v", v)
	}
}

// UpdateTemplate422ApplicationJSON - Unprocessable Entity
type UpdateTemplate422ApplicationJSON struct {
	// Error description
	Error *UpdateTemplate422ApplicationJSONErrorEnum `json:"error,omitempty"`
	// HTTP Error code
	Status *int64 `json:"status,omitempty"`
}

// UpdateTemplate404ApplicationJSONErrorEnum - Error description
type UpdateTemplate404ApplicationJSONErrorEnum string

const (
	UpdateTemplate404ApplicationJSONErrorEnumEntityNotFound                               UpdateTemplate404ApplicationJSONErrorEnum = "Entity not found"
	UpdateTemplate404ApplicationJSONErrorEnumResourceNotFound                             UpdateTemplate404ApplicationJSONErrorEnum = "Resource not found"
	UpdateTemplate404ApplicationJSONErrorEnumNoneOfTheTemplatesIsAvailableForTheWorkspace UpdateTemplate404ApplicationJSONErrorEnum = "None of the templates is available for the workspace."
)

func (e UpdateTemplate404ApplicationJSONErrorEnum) ToPointer() *UpdateTemplate404ApplicationJSONErrorEnum {
	return &e
}

func (e *UpdateTemplate404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Entity not found":
		fallthrough
	case "Resource not found":
		fallthrough
	case "None of the templates is available for the workspace.":
		*e = UpdateTemplate404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateTemplate404ApplicationJSONErrorEnum: %v", v)
	}
}

// UpdateTemplate404ApplicationJSON - Not Found
type UpdateTemplate404ApplicationJSON struct {
	// Error description
	Error *UpdateTemplate404ApplicationJSONErrorEnum `json:"error,omitempty"`
	// HTTP Error code
	Status *int64 `json:"status,omitempty"`
}

// UpdateTemplate403ApplicationJSONErrorEnum - Error description
type UpdateTemplate403ApplicationJSONErrorEnum string

const (
	UpdateTemplate403ApplicationJSONErrorEnumYourAccountHasExceededTheMonthlyDocumentGenerationLimit UpdateTemplate403ApplicationJSONErrorEnum = "Your account has exceeded the monthly document generation limit."
)

func (e UpdateTemplate403ApplicationJSONErrorEnum) ToPointer() *UpdateTemplate403ApplicationJSONErrorEnum {
	return &e
}

func (e *UpdateTemplate403ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Your account has exceeded the monthly document generation limit.":
		*e = UpdateTemplate403ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateTemplate403ApplicationJSONErrorEnum: %v", v)
	}
}

// UpdateTemplate403ApplicationJSON - Forbidden
type UpdateTemplate403ApplicationJSON struct {
	// Error description
	Error *UpdateTemplate403ApplicationJSONErrorEnum `json:"error,omitempty"`
	// HTTP Error code
	Status *int64 `json:"status,omitempty"`
}

// UpdateTemplate401ApplicationJSONErrorEnum - Error description
type UpdateTemplate401ApplicationJSONErrorEnum string

const (
	UpdateTemplate401ApplicationJSONErrorEnumAuthenticationFailedRequestExpired                        UpdateTemplate401ApplicationJSONErrorEnum = "Authentication failed: request expired"
	UpdateTemplate401ApplicationJSONErrorEnumAuthenticationFailedSignatureOrSecretMissing              UpdateTemplate401ApplicationJSONErrorEnum = "Authentication failed: signature or secret missing"
	UpdateTemplate401ApplicationJSONErrorEnumAuthenticationFailedWorkspaceMissing                      UpdateTemplate401ApplicationJSONErrorEnum = "Authentication failed: workspace missing"
	UpdateTemplate401ApplicationJSONErrorEnumAuthenticationFailedKeyMissing                            UpdateTemplate401ApplicationJSONErrorEnum = "Authentication failed: key missing"
	UpdateTemplate401ApplicationJSONErrorEnumAuthenticationFailedPropertyIssIssuerMissingInJwt         UpdateTemplate401ApplicationJSONErrorEnum = "Authentication failed: property 'iss' (issuer) missing in JWT"
	UpdateTemplate401ApplicationJSONErrorEnumAuthenticationFailedPropertySubSubjectMissingInJwt        UpdateTemplate401ApplicationJSONErrorEnum = "Authentication failed: property 'sub' (subject) missing in JWT"
	UpdateTemplate401ApplicationJSONErrorEnumAuthenticationFailedPropertyExpExpirationTimeMissingInJwt UpdateTemplate401ApplicationJSONErrorEnum = "Authentication failed: property 'exp' (expiration time) missing in JWT"
	UpdateTemplate401ApplicationJSONErrorEnumAuthenticationFailedInvalidIssIssuer                      UpdateTemplate401ApplicationJSONErrorEnum = "Authentication failed: invalid 'iss' (issuer)"
	UpdateTemplate401ApplicationJSONErrorEnumAuthenticationFailedIncorrectSignature                    UpdateTemplate401ApplicationJSONErrorEnum = "Authentication failed: incorrect signature"
	UpdateTemplate401ApplicationJSONErrorEnumAuthenticationFailed                                      UpdateTemplate401ApplicationJSONErrorEnum = "Authentication failed"
)

func (e UpdateTemplate401ApplicationJSONErrorEnum) ToPointer() *UpdateTemplate401ApplicationJSONErrorEnum {
	return &e
}

func (e *UpdateTemplate401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed: request expired":
		fallthrough
	case "Authentication failed: signature or secret missing":
		fallthrough
	case "Authentication failed: workspace missing":
		fallthrough
	case "Authentication failed: key missing":
		fallthrough
	case "Authentication failed: property 'iss' (issuer) missing in JWT":
		fallthrough
	case "Authentication failed: property 'sub' (subject) missing in JWT":
		fallthrough
	case "Authentication failed: property 'exp' (expiration time) missing in JWT":
		fallthrough
	case "Authentication failed: invalid 'iss' (issuer)":
		fallthrough
	case "Authentication failed: incorrect signature":
		fallthrough
	case "Authentication failed":
		*e = UpdateTemplate401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateTemplate401ApplicationJSONErrorEnum: %v", v)
	}
}

// UpdateTemplate401ApplicationJSON - Unauthorized
type UpdateTemplate401ApplicationJSON struct {
	// Error description
	Error *UpdateTemplate401ApplicationJSONErrorEnum `json:"error,omitempty"`
	// HTTP Error code
	Status *int64 `json:"status,omitempty"`
}

// UpdateTemplate200ApplicationJSON - Template configuration as JSON object
type UpdateTemplate200ApplicationJSON struct {
	Response *shared.TemplateDefinition `json:"response,omitempty"`
}

type UpdateTemplateResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Template configuration as JSON object
	UpdateTemplate200ApplicationJSONObject *UpdateTemplate200ApplicationJSON
	// Unauthorized
	UpdateTemplate401ApplicationJSONObject *UpdateTemplate401ApplicationJSON
	// Forbidden
	UpdateTemplate403ApplicationJSONObject *UpdateTemplate403ApplicationJSON
	// Not Found
	UpdateTemplate404ApplicationJSONObject *UpdateTemplate404ApplicationJSON
	// Unprocessable Entity
	UpdateTemplate422ApplicationJSONObject *UpdateTemplate422ApplicationJSON
	// Internal Server Error
	UpdateTemplate500ApplicationJSONObject *UpdateTemplate500ApplicationJSON
}
