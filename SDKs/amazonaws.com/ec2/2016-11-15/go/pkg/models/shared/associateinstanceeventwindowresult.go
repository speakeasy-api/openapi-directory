// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AssociateInstanceEventWindowResultInstanceEventWindowAssociationTargetTags - Describes a tag.
type AssociateInstanceEventWindowResultInstanceEventWindowAssociationTargetTags struct {
	Key   *string
	Value *string
}

// AssociateInstanceEventWindowResultInstanceEventWindowAssociationTarget - One or more targets associated with the event window.
type AssociateInstanceEventWindowResultInstanceEventWindowAssociationTarget struct {
	DedicatedHostIds []string
	InstanceIds      []string
	Tags             []AssociateInstanceEventWindowResultInstanceEventWindowAssociationTargetTags
}

// AssociateInstanceEventWindowResultInstanceEventWindowStateEnum - The current state of the event window.
type AssociateInstanceEventWindowResultInstanceEventWindowStateEnum string

const (
	AssociateInstanceEventWindowResultInstanceEventWindowStateEnumCreating AssociateInstanceEventWindowResultInstanceEventWindowStateEnum = "creating"
	AssociateInstanceEventWindowResultInstanceEventWindowStateEnumDeleting AssociateInstanceEventWindowResultInstanceEventWindowStateEnum = "deleting"
	AssociateInstanceEventWindowResultInstanceEventWindowStateEnumActive   AssociateInstanceEventWindowResultInstanceEventWindowStateEnum = "active"
	AssociateInstanceEventWindowResultInstanceEventWindowStateEnumDeleted  AssociateInstanceEventWindowResultInstanceEventWindowStateEnum = "deleted"
)

func (e AssociateInstanceEventWindowResultInstanceEventWindowStateEnum) ToPointer() *AssociateInstanceEventWindowResultInstanceEventWindowStateEnum {
	return &e
}

func (e *AssociateInstanceEventWindowResultInstanceEventWindowStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "creating":
		fallthrough
	case "deleting":
		fallthrough
	case "active":
		fallthrough
	case "deleted":
		*e = AssociateInstanceEventWindowResultInstanceEventWindowStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AssociateInstanceEventWindowResultInstanceEventWindowStateEnum: %v", v)
	}
}

// AssociateInstanceEventWindowResultInstanceEventWindowTags - Describes a tag.
type AssociateInstanceEventWindowResultInstanceEventWindowTags struct {
	Key   *string
	Value *string
}

// AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnum - The day on which the time range ends.
type AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnum string

const (
	AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnumSunday    AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnum = "sunday"
	AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnumMonday    AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnum = "monday"
	AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnumTuesday   AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnum = "tuesday"
	AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnumWednesday AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnum = "wednesday"
	AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnumThursday  AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnum = "thursday"
	AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnumFriday    AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnum = "friday"
	AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnumSaturday  AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnum = "saturday"
)

func (e AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnum) ToPointer() *AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnum {
	return &e
}

func (e *AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sunday":
		fallthrough
	case "monday":
		fallthrough
	case "tuesday":
		fallthrough
	case "wednesday":
		fallthrough
	case "thursday":
		fallthrough
	case "friday":
		fallthrough
	case "saturday":
		*e = AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnum: %v", v)
	}
}

// AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnum - The day on which the time range begins.
type AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnum string

const (
	AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnumSunday    AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnum = "sunday"
	AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnumMonday    AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnum = "monday"
	AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnumTuesday   AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnum = "tuesday"
	AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnumWednesday AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnum = "wednesday"
	AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnumThursday  AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnum = "thursday"
	AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnumFriday    AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnum = "friday"
	AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnumSaturday  AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnum = "saturday"
)

func (e AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnum) ToPointer() *AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnum {
	return &e
}

func (e *AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sunday":
		fallthrough
	case "monday":
		fallthrough
	case "tuesday":
		fallthrough
	case "wednesday":
		fallthrough
	case "thursday":
		fallthrough
	case "friday":
		fallthrough
	case "saturday":
		*e = AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnum: %v", v)
	}
}

// AssociateInstanceEventWindowResultInstanceEventWindowTimeRanges - The start day and time and the end day and time of the time range, in UTC.
type AssociateInstanceEventWindowResultInstanceEventWindowTimeRanges struct {
	EndHour      *int64
	EndWeekDay   *AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnum
	StartHour    *int64
	StartWeekDay *AssociateInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnum
}

// AssociateInstanceEventWindowResultInstanceEventWindow - Information about the event window.
type AssociateInstanceEventWindowResultInstanceEventWindow struct {
	AssociationTarget     *AssociateInstanceEventWindowResultInstanceEventWindowAssociationTarget
	CronExpression        *string
	InstanceEventWindowID *string
	Name                  *string
	State                 *AssociateInstanceEventWindowResultInstanceEventWindowStateEnum
	Tags                  []AssociateInstanceEventWindowResultInstanceEventWindowTags
	TimeRanges            []AssociateInstanceEventWindowResultInstanceEventWindowTimeRanges
}

// AssociateInstanceEventWindowResult - Success
type AssociateInstanceEventWindowResult struct {
	InstanceEventWindow *AssociateInstanceEventWindowResultInstanceEventWindow
}
