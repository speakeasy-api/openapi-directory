// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// BatchUpdatePartitionXAmzTargetEnum
type BatchUpdatePartitionXAmzTargetEnum string

const (
	BatchUpdatePartitionXAmzTargetEnumAwsGlueBatchUpdatePartition BatchUpdatePartitionXAmzTargetEnum = "AWSGlue.BatchUpdatePartition"
)

func (e *BatchUpdatePartitionXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AWSGlue.BatchUpdatePartition":
		*e = BatchUpdatePartitionXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchUpdatePartitionXAmzTargetEnum: %s", s)
	}
}

type BatchUpdatePartitionHeaders struct {
	XAmzAlgorithm     *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        BatchUpdatePartitionXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type BatchUpdatePartitionRequest struct {
	Headers BatchUpdatePartitionHeaders
	Request shared.BatchUpdatePartitionRequest `request:"mediaType=application/json"`
}

type BatchUpdatePartitionResponse struct {
	// Success
	BatchUpdatePartitionResponse *shared.BatchUpdatePartitionResponse
	ContentType                  string
	// EntityNotFoundException
	EntityNotFoundException interface{}
	// GlueEncryptionException
	GlueEncryptionException interface{}
	// InternalServiceException
	InternalServiceException interface{}
	// InvalidInputException
	InvalidInputException interface{}
	// OperationTimeoutException
	OperationTimeoutException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
