"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class OnDemandRegions:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_vod_region(self, request: operations.AddVodRegionRequest, security: operations.AddVodRegionSecurity) -> operations.AddVodRegionResponse:
        r"""Add a specific region to an On Demand page"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddVodRegionRequest, base_url, '/ondemand/pages/{ondemand_id}/regions/{country}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddVodRegionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.ondemand.region+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OnDemandRegion])
                res.on_demand_region = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.ondemand.region+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def delete_vod_region(self, request: operations.DeleteVodRegionRequest, security: operations.DeleteVodRegionSecurity) -> operations.DeleteVodRegionResponse:
        r"""Remove a specific region from an On Demand page"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteVodRegionRequest, base_url, '/ondemand/pages/{ondemand_id}/regions/{country}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteVodRegionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.ondemand.region+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def delete_vod_regions(self, request: operations.DeleteVodRegionsRequest, security: operations.DeleteVodRegionsSecurity) -> operations.DeleteVodRegionsResponse:
        r"""Remove a list of regions from an On Demand page"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteVodRegionsRequest, base_url, '/ondemand/pages/{ondemand_id}/regions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteVodRegionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.ondemand.region+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.OnDemandRegion]])
                res.on_demand_regions = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.ondemand.region+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def get_region(self, request: operations.GetRegionRequest) -> operations.GetRegionResponse:
        r"""Get a specific On Demand region"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRegionRequest, base_url, '/ondemand/regions/{country}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRegionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.ondemand.region+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OnDemandRegion])
                res.on_demand_region = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.ondemand.region+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def get_regions(self) -> operations.GetRegionsResponse:
        r"""Get all the On Demand regions"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/ondemand/regions'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRegionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.ondemand.region+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.OnDemandRegion]])
                res.on_demand_regions = out

        return res

    def get_vod_region(self, request: operations.GetVodRegionRequest) -> operations.GetVodRegionResponse:
        r"""Get a specific region of an On Demand page
        Checks whether an On Demand page belongs to a region.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetVodRegionRequest, base_url, '/ondemand/pages/{ondemand_id}/regions/{country}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetVodRegionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.ondemand.region+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OnDemandRegion])
                res.on_demand_region = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.ondemand.region+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def get_vod_regions(self, request: operations.GetVodRegionsRequest) -> operations.GetVodRegionsResponse:
        r"""Get all the regions of an On Demand page"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetVodRegionsRequest, base_url, '/ondemand/pages/{ondemand_id}/regions', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetVodRegionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.ondemand.region+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.OnDemandRegion]])
                res.on_demand_regions = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.ondemand.region+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def set_vod_regions(self, request: operations.SetVodRegionsRequest, security: operations.SetVodRegionsSecurity) -> operations.SetVodRegionsResponse:
        r"""Add a list of regions to an On Demand page"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SetVodRegionsRequest, base_url, '/ondemand/pages/{ondemand_id}/regions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SetVodRegionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.ondemand.region+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OnDemandRegion])
                res.on_demand_region = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.ondemand.region+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    