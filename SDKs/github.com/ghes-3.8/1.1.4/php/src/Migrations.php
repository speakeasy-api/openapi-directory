<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Migrations 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete an organization migration archive
     * 
     * Deletes a previous migration archive. Migration archives are automatically deleted after seven days.
     * https://docs.github.com/enterprise-server@3.8/rest/migrations/orgs#delete-an-organization-migration-archive - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationsDeleteArchiveForOrgRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MigrationsDeleteArchiveForOrgResponse
     * @see https://docs.github.com/enterprise-server@3.8/rest/migrations/orgs#delete-an-organization-migration-archive
     */
	public function migrationsDeleteArchiveForOrg(
        \OpenAPI\OpenAPI\Models\Operations\MigrationsDeleteArchiveForOrgRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MigrationsDeleteArchiveForOrgResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orgs/{org}/migrations/{migration_id}/archive', \OpenAPI\OpenAPI\Models\Operations\MigrationsDeleteArchiveForOrgRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MigrationsDeleteArchiveForOrgResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Download an organization migration archive
     * 
     * Fetches the URL to a migration archive.
     * https://docs.github.com/enterprise-server@3.8/rest/migrations/orgs#download-an-organization-migration-archive - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationsDownloadArchiveForOrgRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MigrationsDownloadArchiveForOrgResponse
     * @see https://docs.github.com/enterprise-server@3.8/rest/migrations/orgs#download-an-organization-migration-archive
     */
	public function migrationsDownloadArchiveForOrg(
        \OpenAPI\OpenAPI\Models\Operations\MigrationsDownloadArchiveForOrgRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MigrationsDownloadArchiveForOrgResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orgs/{org}/migrations/{migration_id}/archive', \OpenAPI\OpenAPI\Models\Operations\MigrationsDownloadArchiveForOrgRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MigrationsDownloadArchiveForOrgResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 302) {
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Download a user migration archive
     * 
     * Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:
     * 
     * *   attachments
     * *   bases
     * *   commit\_comments
     * *   issue\_comments
     * *   issue\_events
     * *   issues
     * *   milestones
     * *   organizations
     * *   projects
     * *   protected\_branches
     * *   pull\_request\_reviews
     * *   pull\_requests
     * *   releases
     * *   repositories
     * *   review\_comments
     * *   schema
     * *   users
     * 
     * The archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.
     * https://docs.github.com/enterprise-server@3.8/rest/migrations/users#download-a-user-migration-archive - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationsGetArchiveForAuthenticatedUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MigrationsGetArchiveForAuthenticatedUserResponse
     * @see https://docs.github.com/enterprise-server@3.8/rest/migrations/users#download-a-user-migration-archive
     */
	public function migrationsGetArchiveForAuthenticatedUser(
        \OpenAPI\OpenAPI\Models\Operations\MigrationsGetArchiveForAuthenticatedUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MigrationsGetArchiveForAuthenticatedUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/migrations/{migration_id}/archive', \OpenAPI\OpenAPI\Models\Operations\MigrationsGetArchiveForAuthenticatedUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MigrationsGetArchiveForAuthenticatedUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 302 or $httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get an organization migration status
     * 
     * Fetches the status of a migration.
     * 
     * The `state` of a migration can be one of the following values:
     * 
     * *   `pending`, which means the migration hasn't started yet.
     * *   `exporting`, which means the migration is in progress.
     * *   `exported`, which means the migration finished successfully.
     * *   `failed`, which means the migration failed.
     * https://docs.github.com/enterprise-server@3.8/rest/migrations/orgs#get-an-organization-migration-status - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationsGetStatusForOrgRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MigrationsGetStatusForOrgResponse
     * @see https://docs.github.com/enterprise-server@3.8/rest/migrations/orgs#get-an-organization-migration-status
     */
	public function migrationsGetStatusForOrg(
        \OpenAPI\OpenAPI\Models\Operations\MigrationsGetStatusForOrgRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MigrationsGetStatusForOrgResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orgs/{org}/migrations/{migration_id}', \OpenAPI\OpenAPI\Models\Operations\MigrationsGetStatusForOrgRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MigrationsGetStatusForOrgRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MigrationsGetStatusForOrgResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->migration = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Migration', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List user migrations
     * 
     * Lists all migrations a user has started.
     * https://docs.github.com/enterprise-server@3.8/rest/migrations/users#list-user-migrations - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationsListForAuthenticatedUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MigrationsListForAuthenticatedUserResponse
     * @see https://docs.github.com/enterprise-server@3.8/rest/migrations/users#list-user-migrations
     */
	public function migrationsListForAuthenticatedUser(
        \OpenAPI\OpenAPI\Models\Operations\MigrationsListForAuthenticatedUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MigrationsListForAuthenticatedUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/migrations');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MigrationsListForAuthenticatedUserRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MigrationsListForAuthenticatedUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->migrations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Migration>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List organization migrations
     * 
     * Lists the most recent migrations, including both exports (which can be started through the REST API) and imports (which cannot be started using the REST API).
     * 
     * A list of `repositories` is only returned for export migrations.
     * https://docs.github.com/enterprise-server@3.8/rest/migrations/orgs#list-organization-migrations - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationsListForOrgRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MigrationsListForOrgResponse
     * @see https://docs.github.com/enterprise-server@3.8/rest/migrations/orgs#list-organization-migrations
     */
	public function migrationsListForOrg(
        \OpenAPI\OpenAPI\Models\Operations\MigrationsListForOrgRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MigrationsListForOrgResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orgs/{org}/migrations', \OpenAPI\OpenAPI\Models\Operations\MigrationsListForOrgRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MigrationsListForOrgRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MigrationsListForOrgResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->migrations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Migration>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List repositories for a user migration
     * 
     * Lists all the repositories for this user migration.
     * https://docs.github.com/enterprise-server@3.8/rest/migrations/users#list-repositories-for-a-user-migration - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationsListReposForAuthenticatedUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MigrationsListReposForAuthenticatedUserResponse
     * @see https://docs.github.com/enterprise-server@3.8/rest/migrations/users#list-repositories-for-a-user-migration
     */
	public function migrationsListReposForAuthenticatedUser(
        \OpenAPI\OpenAPI\Models\Operations\MigrationsListReposForAuthenticatedUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MigrationsListReposForAuthenticatedUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/migrations/{migration_id}/repositories', \OpenAPI\OpenAPI\Models\Operations\MigrationsListReposForAuthenticatedUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MigrationsListReposForAuthenticatedUserRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MigrationsListReposForAuthenticatedUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->minimalRepositories = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\MinimalRepository>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List repositories in an organization migration
     * 
     * List all the repositories for this organization migration.
     * https://docs.github.com/enterprise-server@3.8/rest/migrations/orgs#list-repositories-in-an-organization-migration - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationsListReposForOrgRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MigrationsListReposForOrgResponse
     * @see https://docs.github.com/enterprise-server@3.8/rest/migrations/orgs#list-repositories-in-an-organization-migration
     */
	public function migrationsListReposForOrg(
        \OpenAPI\OpenAPI\Models\Operations\MigrationsListReposForOrgRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MigrationsListReposForOrgResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orgs/{org}/migrations/{migration_id}/repositories', \OpenAPI\OpenAPI\Models\Operations\MigrationsListReposForOrgRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MigrationsListReposForOrgRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MigrationsListReposForOrgResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->minimalRepositories = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\MinimalRepository>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Start a user migration
     * 
     * Initiates the generation of a user migration archive.
     * https://docs.github.com/enterprise-server@3.8/rest/migrations/users#start-a-user-migration - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationsStartForAuthenticatedUserRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MigrationsStartForAuthenticatedUserResponse
     * @see https://docs.github.com/enterprise-server@3.8/rest/migrations/users#start-a-user-migration
     */
	public function migrationsStartForAuthenticatedUser(
        \OpenAPI\OpenAPI\Models\Operations\MigrationsStartForAuthenticatedUserRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MigrationsStartForAuthenticatedUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/migrations');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MigrationsStartForAuthenticatedUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->migration = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Migration', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Start an organization migration
     * 
     * Initiates the generation of a migration archive.
     * https://docs.github.com/enterprise-server@3.8/rest/migrations/orgs#start-an-organization-migration - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationsStartForOrgRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MigrationsStartForOrgResponse
     * @see https://docs.github.com/enterprise-server@3.8/rest/migrations/orgs#start-an-organization-migration
     */
	public function migrationsStartForOrg(
        \OpenAPI\OpenAPI\Models\Operations\MigrationsStartForOrgRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MigrationsStartForOrgResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orgs/{org}/migrations', \OpenAPI\OpenAPI\Models\Operations\MigrationsStartForOrgRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MigrationsStartForOrgResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->migration = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Migration', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Unlock an organization repository
     * 
     * Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/enterprise-server@3.8/rest/repos/repos#delete-a-repository) when the migration is complete and you no longer need the source data.
     * https://docs.github.com/enterprise-server@3.8/rest/migrations/orgs#unlock-an-organization-repository - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MigrationsUnlockRepoForOrgRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MigrationsUnlockRepoForOrgResponse
     * @see https://docs.github.com/enterprise-server@3.8/rest/migrations/orgs#unlock-an-organization-repository
     */
	public function migrationsUnlockRepoForOrg(
        \OpenAPI\OpenAPI\Models\Operations\MigrationsUnlockRepoForOrgRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MigrationsUnlockRepoForOrgResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock', \OpenAPI\OpenAPI\Models\Operations\MigrationsUnlockRepoForOrgRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MigrationsUnlockRepoForOrgResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
}