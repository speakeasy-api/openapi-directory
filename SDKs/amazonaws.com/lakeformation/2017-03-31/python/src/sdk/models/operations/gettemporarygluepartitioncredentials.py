"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import gettemporarygluepartitioncredentialsresponse as shared_gettemporarygluepartitioncredentialsresponse
from ..shared import permission_enum as shared_permission_enum
from ..shared import permissiontype_enum as shared_permissiontype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTemporaryGluePartitionCredentialsRequestBodyAuditContext:
    r"""A structure used to include auditing information on the privileged API."""
    
    additional_audit_context: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AdditionalAuditContext'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTemporaryGluePartitionCredentialsRequestBodyPartition:
    r"""Contains a list of values defining partitions."""
    
    values: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Values'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTemporaryGluePartitionCredentialsRequestBody:
    
    partition: GetTemporaryGluePartitionCredentialsRequestBodyPartition = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Partition') }})
    r"""Contains a list of values defining partitions."""  
    supported_permission_types: list[shared_permissiontype_enum.PermissionTypeEnum] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SupportedPermissionTypes') }})
    r"""A list of supported permission types for the partition. Valid values are <code>COLUMN_PERMISSION</code> and <code>CELL_FILTER_PERMISSION</code>."""  
    table_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TableArn') }})
    r"""The ARN of the partitions' table."""  
    audit_context: Optional[GetTemporaryGluePartitionCredentialsRequestBodyAuditContext] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AuditContext'), 'exclude': lambda f: f is None }})
    r"""A structure used to include auditing information on the privileged API."""  
    duration_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DurationSeconds'), 'exclude': lambda f: f is None }})
    r"""The time period, between 900 and 21,600 seconds, for the timeout of the temporary credentials."""  
    permissions: Optional[list[shared_permission_enum.PermissionEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Permissions'), 'exclude': lambda f: f is None }})
    r"""Filters the request based on the user having been granted a list of specified permissions on the requested resource(s)."""  
    

@dataclasses.dataclass
class GetTemporaryGluePartitionCredentialsRequest:
    
    request_body: GetTemporaryGluePartitionCredentialsRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GetTemporaryGluePartitionCredentialsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    entity_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""EntityNotFoundException"""  
    get_temporary_glue_partition_credentials_response: Optional[shared_gettemporarygluepartitioncredentialsresponse.GetTemporaryGluePartitionCredentialsResponse] = dataclasses.field(default=None)
    r"""Success"""  
    internal_service_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServiceException"""  
    invalid_input_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidInputException"""  
    operation_timeout_exception: Optional[Any] = dataclasses.field(default=None)
    r"""OperationTimeoutException"""  
    permission_type_mismatch_exception: Optional[Any] = dataclasses.field(default=None)
    r"""PermissionTypeMismatchException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    