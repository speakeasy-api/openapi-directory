// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

var ProductSearchFilteredandOrderedServerList = []string{
	"http://example.com/.{environment}.com.br",
}

type ProductSearchFilteredandOrderedRequest struct {
	// HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
	Accept string `header:"style=simple,explode=false,name=Accept"`
	// Describes the type of the content being sent.
	ContentType string `header:"style=simple,explode=false,name=Content-Type"`
	// Sorting method. It can be by Price (`O=OrderByPriceDESC` or `O=OrderByPriceASC`), by Top Selling Products (`O=OrderByTopSaleDESC`), by Best Reviews (`O=OrderByReviewRateDESC`), by Name (`O=OrderByNameASC` or `O=OrderByNameDESC`), by Release Date (`O=OrderByReleaseDateDESC`), by Best Discounts (`O=OrderByBestDiscountDESC`), by Score (`O=OrderByScoreDESC`)
	O *string `queryParam:"style=form,explode=true,name=O"`
	// Starter page range. These parameters allow the API to be paginated. Take into account that the initial and final pages cannot have a separation superior to 50 pages. Thus, it will be displayed 50 items per page.
	From *string `queryParam:"style=form,explode=true,name=_from"`
	// Finisher page range. These parameters allow the API to be paginated. Take into account that the initial and final pages cannot have a separation superior to 50 pages. Thus, it will be displayed 50 items per page.
	To *string `queryParam:"style=form,explode=true,name=_to"`
	// General filter. It can be by category (`fq=C:/{a}/{b}`), by specification (`fq=specificationFilter_{a}:{b}`),  by price range (`fq=P:[{a} TO {b}]`), by collection (`fq=productClusterIds:{{productClusterId}}`), by product ID (`fq=productId:{{productId}}`),  by SKU ID (`fq=skuId:{{skuId}}`), by Reference ID (`fq=alternateIds_RefId:{{referenceId}}`), by EAN13 (`fq=alternateIds_Ean:{{ean13}}`), by availability at a specific sales channel (`fq=isAvailablePerSalesChannel_{{sc}}:{{bool}}`), by available at a specific seller (`fq=sellerId:{{sellerId}}`)
	Fq *string `queryParam:"style=form,explode=true,name=fq"`
	// Filter by full text. The form is`ft={searchWord}`
	Ft *string `queryParam:"style=form,explode=true,name=ft"`
}

type ProductSearchFilteredandOrdered200ApplicationJSONItemsImages struct {
	// Image ID.
	ImageID string `json:"imageId"`
	// Image label.
	ImageLabel string `json:"imageLabel"`
	// Date and time of the last update of the image.
	ImageLastModified string `json:"imageLastModified"`
	// Image tag.
	ImageTag string `json:"imageTag"`
	// Image text.
	ImageText string `json:"imageText"`
	// Image URL.
	ImageURL string `json:"imageUrl"`
}

type ProductSearchFilteredandOrdered200ApplicationJSONItemsKitItems struct {
	// Amount of the SKU component in the kit.
	Amount int64 `json:"amount"`
	// SKU kit component ID.
	ItemID string `json:"itemId"`
}

type ProductSearchFilteredandOrdered200ApplicationJSONItemsReferenceID struct {
	// Reference Code.
	Key string `json:"Key"`
	// Unique reference code used internally for organizational purposes.
	Value string `json:"Value"`
}

type ProductSearchFilteredandOrdered200ApplicationJSONItemsSellersCommertialOfferDeliverySLASamples struct {
	// Delivery SLA per types.
	DeliverySLAPerTypes []interface{} `json:"DeliverySlaPerTypes"`
	// Region.
	Region string `json:"Region"`
}

// ProductSearchFilteredandOrdered200ApplicationJSONItemsSellersCommertialOfferDeliverySLASamplesPerRegion0 - Delivery SLA ID.
type ProductSearchFilteredandOrdered200ApplicationJSONItemsSellersCommertialOfferDeliverySLASamplesPerRegion0 struct {
	// Delivery SLA per types.
	DeliverySLAPerTypes []interface{} `json:"DeliverySlaPerTypes"`
	// Region.
	Region string `json:"Region"`
}

// ProductSearchFilteredandOrdered200ApplicationJSONItemsSellersCommertialOfferDeliverySLASamplesPerRegion - Delivery SLA samples per region.
type ProductSearchFilteredandOrdered200ApplicationJSONItemsSellersCommertialOfferDeliverySLASamplesPerRegion struct {
	// Delivery SLA ID.
	Zero *ProductSearchFilteredandOrdered200ApplicationJSONItemsSellersCommertialOfferDeliverySLASamplesPerRegion0 `json:"0,omitempty"`
}

type ProductSearchFilteredandOrdered200ApplicationJSONItemsSellersCommertialOfferInstallments struct {
	// Interest rate of the installment.
	InterestRate float64 `json:"InterestRate"`
	// Name of the installment.
	Name string `json:"Name"`
	// Number of the installment.
	NumberOfInstallments int64 `json:"NumberOfInstallments"`
	// Payment system group name of the installment.
	PaymentSystemGroupName string `json:"PaymentSystemGroupName"`
	// Payment system name of the installment.
	PaymentSystemName string `json:"PaymentSystemName"`
	// Total value plus interest rate of the installment.
	TotalValuePlusInterestRate float64 `json:"TotalValuePlusInterestRate"`
	// Value of the installment.
	Value float64 `json:"Value"`
}

type ProductSearchFilteredandOrdered200ApplicationJSONItemsSellersCommertialOfferPaymentOptionsInstallmentOptionsInstallmentsSellerMerchantInstallments struct {
	// Count.
	Count int64 `json:"count"`
	// Has interest rate.
	HasInterestRate bool `json:"hasInterestRate"`
	// ID.
	ID string `json:"id"`
	// Interest rate.
	InterestRate int64 `json:"interestRate"`
	// Total.
	Total int64 `json:"total"`
	// Value.
	Value int64 `json:"value"`
}

type ProductSearchFilteredandOrdered200ApplicationJSONItemsSellersCommertialOfferPaymentOptionsInstallmentOptionsInstallments struct {
	// Count.
	Count int64 `json:"count"`
	// Has interest rate.
	HasInterestRate bool `json:"hasInterestRate"`
	// Interest rate.
	InterestRate int64 `json:"interestRate"`
	// Seller merchant installments.
	SellerMerchantInstallments []ProductSearchFilteredandOrdered200ApplicationJSONItemsSellersCommertialOfferPaymentOptionsInstallmentOptionsInstallmentsSellerMerchantInstallments `json:"sellerMerchantInstallments"`
	// Total.
	Total int64 `json:"total"`
	// Value.
	Value int64 `json:"value"`
}

type ProductSearchFilteredandOrdered200ApplicationJSONItemsSellersCommertialOfferPaymentOptionsInstallmentOptions struct {
	// Bin.
	Bin string `json:"bin"`
	// Installments.
	Installments []ProductSearchFilteredandOrdered200ApplicationJSONItemsSellersCommertialOfferPaymentOptionsInstallmentOptionsInstallments `json:"installments"`
	// Payment group name.
	PaymentGroupName string `json:"paymentGroupName"`
	// Payment name.
	PaymentName string `json:"paymentName"`
	// Payment system.
	PaymentSystem string `json:"paymentSystem"`
	// Value.
	Value int64 `json:"value"`
}

type ProductSearchFilteredandOrdered200ApplicationJSONItemsSellersCommertialOfferPaymentOptionsPaymentSystems struct {
	// Available payments.
	AvailablePayments string `json:"availablePayments"`
	// Description.
	Description string `json:"description"`
	// Due date.
	DueDate string `json:"dueDate"`
	// Group name.
	GroupName string `json:"groupName"`
	// ID.
	ID int64 `json:"id"`
	// If is custom or not.
	IsCustom bool `json:"isCustom"`
	// Name.
	Name string `json:"name"`
	// If requires authentication.
	RequiresAuthentication bool `json:"requiresAuthentication"`
	// If requires document or not.
	RequiresDocument bool `json:"requiresDocument"`
	// String ID.
	StringID string `json:"stringId"`
	// Template.
	Template string `json:"template"`
	// Validator.
	Validator string `json:"validator"`
}

// ProductSearchFilteredandOrdered200ApplicationJSONItemsSellersCommertialOfferPaymentOptions - Payment options.
type ProductSearchFilteredandOrdered200ApplicationJSONItemsSellersCommertialOfferPaymentOptions struct {
	// Available accounts.
	AvailableAccounts []interface{} `json:"availableAccounts"`
	// Available tokens.
	AvailableTokens []interface{} `json:"availableTokens"`
	// GiftCardMessages.
	GiftCardMessages []interface{} `json:"giftCardMessages"`
	// GiftCards.
	GiftCards []interface{} `json:"giftCards"`
	// installment options.
	InstallmentOptions []ProductSearchFilteredandOrdered200ApplicationJSONItemsSellersCommertialOfferPaymentOptionsInstallmentOptions `json:"installmentOptions"`
	// Payment systems.
	PaymentSystems []ProductSearchFilteredandOrdered200ApplicationJSONItemsSellersCommertialOfferPaymentOptionsPaymentSystems `json:"paymentSystems"`
	// Payments.
	Payments []interface{} `json:"payments"`
}

// ProductSearchFilteredandOrdered200ApplicationJSONItemsSellersCommertialOffer - AKA Commertial Condition.
type ProductSearchFilteredandOrdered200ApplicationJSONItemsSellersCommertialOffer struct {
	// Use the `IsAvailable` field instead.
	AvailableQuantity int64 `json:"AvailableQuantity"`
	// Array of other products that can be bought together with the product in question.
	BuyTogether []interface{} `json:"BuyTogether"`
	// Cache version used to call checkout.
	CacheVersionUsedToCallCheckout string `json:"CacheVersionUsedToCallCheckout"`
	// Delivery SLA samples.
	DeliverySLASamples []ProductSearchFilteredandOrdered200ApplicationJSONItemsSellersCommertialOfferDeliverySLASamples `json:"DeliverySlaSamples"`
	// Delivery SLA samples per region.
	DeliverySLASamplesPerRegion ProductSearchFilteredandOrdered200ApplicationJSONItemsSellersCommertialOfferDeliverySLASamplesPerRegion `json:"DeliverySlaSamplesPerRegion"`
	// Discount hightlight.
	DiscountHighLight []interface{} `json:"DiscountHighLight"`
	// Get info error message.
	GetInfoErrorMessage string `json:"GetInfoErrorMessage"`
	// Array of SKU gifts IDs.
	GiftSkuIds []interface{} `json:"GiftSkuIds"`
	// Installments options.
	Installments []ProductSearchFilteredandOrdered200ApplicationJSONItemsSellersCommertialOfferInstallments `json:"Installments"`
	// If the product is available or not.
	IsAvailable bool `json:"IsAvailable"`
	// Item metadata attachment.
	ItemMetadataAttachment []interface{} `json:"ItemMetadataAttachment"`
	// List price of the product.
	ListPrice float64 `json:"ListPrice"`
	// Payment options.
	PaymentOptions ProductSearchFilteredandOrdered200ApplicationJSONItemsSellersCommertialOfferPaymentOptions `json:"PaymentOptions"`
	// Price of the product.
	Price float64 `json:"Price"`
	// Price of the product valid until a certain date.
	PriceValidUntil string `json:"PriceValidUntil"`
	// Price of the product without discount.
	PriceWithoutDiscount float64 `json:"PriceWithoutDiscount"`
	// Reward value of the product.
	RewardValue float64 `json:"RewardValue"`
	// Trade policy which the product is contained.
	SaleChannel int64 `json:"SaleChannel"`
	// Tax of the product.
	Tax float64 `json:"Tax"`
	// Teasers.
	Teasers []interface{} `json:"Teasers"`
}

type ProductSearchFilteredandOrdered200ApplicationJSONItemsSellers struct {
	// URL to add the product to the cart.
	AddToCartLink string `json:"addToCartLink"`
	// AKA Commertial Condition.
	CommertialOffer ProductSearchFilteredandOrdered200ApplicationJSONItemsSellersCommertialOffer `json:"commertialOffer"`
	// If the seller is default or not.
	SellerDefault bool `json:"sellerDefault"`
	// SKU seller ID.
	SellerID string `json:"sellerId"`
	// SKU seller name.
	SellerName string `json:"sellerName"`
}

type ProductSearchFilteredandOrdered200ApplicationJSONItems struct {
	// Videos.
	Videos []interface{} `json:"Videos"`
	// SKU complement name.
	ComplementName string `json:"complementName"`
	// SKU unique identification code (barcode), accepts up to 13 numerical characters.
	Ean string `json:"ean"`
	// Estimated date arrival.
	EstimatedDateArrival string `json:"estimatedDateArrival"`
	// Array of information about the SKU image.
	Images []ProductSearchFilteredandOrdered200ApplicationJSONItemsImages `json:"images"`
	// If the SKU is part of a kit.
	IsKit bool `json:"isKit"`
	// SKU ID.
	ItemID string `json:"itemId"`
	// Array with information of SKUs components from a Kit.
	KitItems []ProductSearchFilteredandOrdered200ApplicationJSONItemsKitItems `json:"kitItems"`
	// Used only in cases when you need to convert the unit of measure for sale. In common cases, use 'un'.
	MeasurementUnit string `json:"measurementUnit"`
	// Modal Type.
	ModalType string `json:"modalType"`
	// SKU name.
	Name string `json:"name"`
	// SKU complete name.
	NameComplete string `json:"nameComplete"`
	// Reference code ID.
	ReferenceID []ProductSearchFilteredandOrdered200ApplicationJSONItemsReferenceID `json:"referenceId"`
	// Array of SKU sellers.
	Sellers []ProductSearchFilteredandOrdered200ApplicationJSONItemsSellers `json:"sellers"`
	// numerical unit that multiplies the selected quantity of the product when it is inserted in the cart.
	UnitMultiplier float64 `json:"unitMultiplier"`
}

type ProductSearchFilteredandOrdered200ApplicationJSON struct {
	// Array of the product's specifications.
	AllSpecifications []string `json:"allSpecifications"`
	// Array of the product's specifications groups.
	AllSpecificationsGroups []string `json:"allSpecificationsGroups"`
	// Brand name.
	Brand string `json:"brand"`
	// Product brand ID.
	BrandID int64 `json:"brandId"`
	// Product's brand image URL.
	BrandImageURL string `json:"brandImageUrl"`
	// Array of the product's categories URLs.
	Categories []interface{} `json:"categories"`
	// Array of the product's categories IDs.
	CategoriesIds []interface{} `json:"categoriesIds"`
	// Product category ID.
	CategoryID string `json:"categoryId"`
	// Cluster highlight ID and name.
	ClusterHighlights map[string]interface{} `json:"clusterHighlights"`
	// Description of the main information related to the product. A simple and easy to understand summary for the customer.
	Description string `json:"description"`
	// Array containing the product SKU general information.
	Items []ProductSearchFilteredandOrdered200ApplicationJSONItems `json:"items"`
	// Product URL.
	Link string `json:"link"`
	// Product URL.
	LinkText string `json:"linkText"`
	// Brief description of the category. It's recommended that you don't exceed 150 characters so that the search engines can display it correctly in the results page.
	MetaTagDescription string `json:"metaTagDescription"`
	// Product clusters' IDs and names.
	ProductClusters map[string]interface{} `json:"productClusters"`
	// Product unique identifier.
	ProductID string `json:"productId"`
	// Product name.
	ProductName string `json:"productName"`
	// Product reference.
	ProductReference string `json:"productReference"`
	// Product reference ID.
	ProductReferenceCode int64 `json:"productReferenceCode"`
	// Text that is in the browser tab and corresponds to the title of the product page. This field is important for SEO.
	ProductTitle string `json:"productTitle"`
	// Product release date.
	ReleaseDate string `json:"releaseDate"`
	// Searchable clusters IDs and names
	SearchableClusters map[string]interface{} `json:"searchableClusters"`
}

type ProductSearchFilteredandOrderedResponse struct {
	ContentType string
	// OK
	ProductSearchFilteredandOrdered200ApplicationJSONObjects []ProductSearchFilteredandOrdered200ApplicationJSON
	StatusCode                                               int
	RawResponse                                              *http.Response
}
