// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ProvisionByoipCidrXAmzTargetEnum
type ProvisionByoipCidrXAmzTargetEnum string

const (
	ProvisionByoipCidrXAmzTargetEnumGlobalAcceleratorV20180706ProvisionByoipCidr ProvisionByoipCidrXAmzTargetEnum = "GlobalAccelerator_V20180706.ProvisionByoipCidr"
)

func (e *ProvisionByoipCidrXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "GlobalAccelerator_V20180706.ProvisionByoipCidr":
		*e = ProvisionByoipCidrXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ProvisionByoipCidrXAmzTargetEnum: %s", s)
	}
}

type ProvisionByoipCidrRequest struct {
	ProvisionByoipCidrRequest shared.ProvisionByoipCidrRequest `request:"mediaType=application/json"`
	XAmzAlgorithm             *string                          `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256         *string                          `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential            *string                          `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                  *string                          `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken         *string                          `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature             *string                          `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders         *string                          `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                ProvisionByoipCidrXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ProvisionByoipCidrResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// IncorrectCidrStateException
	IncorrectCidrStateException interface{}
	// InternalServiceErrorException
	InternalServiceErrorException interface{}
	// InvalidArgumentException
	InvalidArgumentException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// Success
	ProvisionByoipCidrResponse *shared.ProvisionByoipCidrResponse
	StatusCode                 int
	RawResponse                *http.Response
}
