/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AnalyticsGlobal } from "./analyticsglobal";
import { AnalyticsOptimisations } from "./analyticsoptimisations";
import { AnalyticsReports } from "./analyticsreports";
import { AnalyticsRules } from "./analyticsrules";
import { AnalyticsStatistics } from "./analyticsstatistics";
import { AnalyticsTracking } from "./analyticstracking";
import { CatalogsAuto } from "./catalogsauto";
import { CatalogsCatalog } from "./catalogscatalog";
import { CatalogsGlobal } from "./catalogsglobal";
import { CatalogsImportationCatalogInfo } from "./catalogsimportationcataloginfo";
import { CatalogsImportationProcess } from "./catalogsimportationprocess";
import { ChannelCatalogsCategories } from "./channelcatalogscategories";
import { ChannelCatalogsColumnMappings } from "./channelcatalogscolumnmappings";
import { ChannelCatalogsExclusionFilters } from "./channelcatalogsexclusionfilters";
import { ChannelCatalogsExportations } from "./channelcatalogsexportations";
import { ChannelCatalogsGlobal } from "./channelcatalogsglobal";
import { ChannelCatalogsLegacyTrackingGlobal } from "./channelcatalogslegacytrackingglobal";
import { ChannelCatalogsProducts } from "./channelcatalogsproducts";
import { ChannelCatalogsProductsOptimisation } from "./channelcatalogsproductsoptimisation";
import { ChannelCatalogsProductsOverrides } from "./channelcatalogsproductsoverrides";
import { ChannelCatalogsSettings } from "./channelcatalogssettings";
import { ChannelsChannelsGlobal } from "./channelschannelsglobal";
import { CustomerAccount } from "./customeraccount";
import { CustomerAlerts } from "./customeralerts";
import { CustomerContracts } from "./customercontracts";
import { CustomerFriends } from "./customerfriends";
import { CustomerGlobal } from "./customerglobal";
import { CustomerInvoices } from "./customerinvoices";
import { CustomerRights } from "./customerrights";
import { CustomerSecurity } from "./customersecurity";
import { CustomerShares } from "./customershares";
import { CustomerStores } from "./customerstores";
import { MarketplacesChannelCatalogsGlobal } from "./marketplaceschannelcatalogsglobal";
import { MarketplacesChannelCatalogsPublications } from "./marketplaceschannelcatalogspublications";
import { MarketplacesChannelCatalogsSettings } from "./marketplaceschannelcatalogssettings";
import { MarketplacesOrdersAutoTransitions } from "./marketplacesordersautotransitions";
import { MarketplacesOrdersBatches } from "./marketplacesordersbatches";
import { MarketplacesOrdersExports } from "./marketplacesordersexports";
import { MarketplacesOrdersGlobal } from "./marketplacesordersglobal";
import { MarketplacesOrdersList } from "./marketplacesorderslist";
import { MarketplacesOrdersOrder } from "./marketplacesordersorder";
import { MarketplacesOrdersSubscriptionsSubscriptions } from "./marketplacesorderssubscriptionssubscriptions";
import { MarketplacesOrdersV3Batches } from "./marketplacesordersv3batches";
import { MarketplacesOrdersV3Global } from "./marketplacesordersv3global";
import { MarketplacesOrdersV3List } from "./marketplacesordersv3list";
import { MarketplacesOrdersV3Order } from "./marketplacesordersv3order";
import { OMInvoiceAPIGeneration } from "./ominvoiceapigeneration";
import { OMInvoiceAPISettings } from "./ominvoiceapisettings";
import { PublicChannelsPublicChannels } from "./publicchannelspublicchannels";
import { PublicListOfValuesLOV } from "./publiclistofvalueslov";
import { PublicSecuritySecurity } from "./publicsecuritysecurity";
import { UserListOfValuesLOV } from "./userlistofvalueslov";
import axios, { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["https://api.beezup.com"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * # The REST API of BeezUP system
 *
 * @remarks
 * ## Overview
 * The REST APIs provide programmatic access to read and write BeezUP data.
 * Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !
 *
 * The main features are:
 * - Register and manage your account
 * - Create and manage and share your stores with your friends/co-workers.
 * - Import your product catalog and schedule the auto importation
 * - Search the channels your want to use
 * - Configure your channels for your catalogs to export your product information:
 *     - cost and general settings
 *     - category and columns mappings
 *     - your will be able to create and manage your custom column
 *     - put in place exlusion filters based on simple conditions on your product data
 *     - override product values
 *     - get product vision for a channel catalog scope
 * - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product.
 * - Automatize your optimisation by using rules!
 * - And of course... Manage your orders harvested from all your marketplaces:
 *     - Synchronize your orders in an uniformized way
 *     - Get the available actions and update the order status
 * - ...and more!
 *
 * ## Authentication credentials
 * The public API with the base path ** /v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials.
 * We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).
 *
 * The user API with the base path ** /v2/user** requires a token which is available on this page:
 * https://go.beezup.com/Account/MyAccount
 *
 * ## Things to keep in mind
 * ### API Rate Limits
 * - The BeezUP REST API is limited to 100 calls/minute.
 *
 * ### Media type
 * The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.
 *
 * ### Required content type
 * The required and default encoding for the request and responses is UTF8.
 *
 * ### Required date time format
 * All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.
 *
 * ### Base URL
 * The Base URL of the BeezUP API Order Management REST API conforms to the following template.
 *
 * https://api.beezup.com
 *
 * All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.
 *
 * You can test our API on https://api-docs.beezup.com/swagger-ui\\
 * You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
 *
 * @see {@link https://api-docs.beezup.com/} - Find the documentation for BeezUP's API here
 */
export class SDK {
  public analyticsGlobal: AnalyticsGlobal;
  public analyticsOptimisations: AnalyticsOptimisations;
  public analyticsReports: AnalyticsReports;
  public analyticsRules: AnalyticsRules;
  public analyticsStatistics: AnalyticsStatistics;
  public analyticsTracking: AnalyticsTracking;
  public catalogsAuto: CatalogsAuto;
  public catalogsCatalog: CatalogsCatalog;
  public catalogsGlobal: CatalogsGlobal;
  public catalogsImportationCatalogInfo: CatalogsImportationCatalogInfo;
  public catalogsImportationProcess: CatalogsImportationProcess;
  public channelCatalogsCategories: ChannelCatalogsCategories;
  public channelCatalogsColumnMappings: ChannelCatalogsColumnMappings;
  public channelCatalogsExclusionFilters: ChannelCatalogsExclusionFilters;
  public channelCatalogsExportations: ChannelCatalogsExportations;
  public channelCatalogsGlobal: ChannelCatalogsGlobal;
  public channelCatalogsLegacyTrackingGlobal: ChannelCatalogsLegacyTrackingGlobal;
  public channelCatalogsProducts: ChannelCatalogsProducts;
  public channelCatalogsProductsOptimisation: ChannelCatalogsProductsOptimisation;
  public channelCatalogsProductsOverrides: ChannelCatalogsProductsOverrides;
  public channelCatalogsSettings: ChannelCatalogsSettings;
  public channelsChannelsGlobal: ChannelsChannelsGlobal;
  public customerAccount: CustomerAccount;
  public customerAlerts: CustomerAlerts;
  public customerContracts: CustomerContracts;
  public customerFriends: CustomerFriends;
  public customerGlobal: CustomerGlobal;
  public customerInvoices: CustomerInvoices;
  public customerRights: CustomerRights;
  public customerSecurity: CustomerSecurity;
  public customerShares: CustomerShares;
  public customerStores: CustomerStores;
  public marketplacesChannelCatalogsGlobal: MarketplacesChannelCatalogsGlobal;
  public marketplacesChannelCatalogsPublications: MarketplacesChannelCatalogsPublications;
  public marketplacesChannelCatalogsSettings: MarketplacesChannelCatalogsSettings;
  public marketplacesOrdersAutoTransitions: MarketplacesOrdersAutoTransitions;
  public marketplacesOrdersBatches: MarketplacesOrdersBatches;
  public marketplacesOrdersExports: MarketplacesOrdersExports;
  public marketplacesOrdersGlobal: MarketplacesOrdersGlobal;
  public marketplacesOrdersList: MarketplacesOrdersList;
  public marketplacesOrdersOrder: MarketplacesOrdersOrder;
  public marketplacesOrdersSubscriptionsSubscriptions: MarketplacesOrdersSubscriptionsSubscriptions;
  public marketplacesOrdersV3Batches: MarketplacesOrdersV3Batches;
  public marketplacesOrdersV3Global: MarketplacesOrdersV3Global;
  public marketplacesOrdersV3List: MarketplacesOrdersV3List;
  public marketplacesOrdersV3Order: MarketplacesOrdersV3Order;
  public omInvoiceAPIGeneration: OMInvoiceAPIGeneration;
  public omInvoiceAPISettings: OMInvoiceAPISettings;
  public publicChannelsPublicChannels: PublicChannelsPublicChannels;
  public publicListOfValuesLOV: PublicListOfValuesLOV;
  public publicSecuritySecurity: PublicSecuritySecurity;
  public userListOfValuesLOV: UserListOfValuesLOV;

  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    this._securityClient = this._defaultClient;

    this.analyticsGlobal = new AnalyticsGlobal(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.analyticsOptimisations = new AnalyticsOptimisations(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.analyticsReports = new AnalyticsReports(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.analyticsRules = new AnalyticsRules(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.analyticsStatistics = new AnalyticsStatistics(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.analyticsTracking = new AnalyticsTracking(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.catalogsAuto = new CatalogsAuto(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.catalogsCatalog = new CatalogsCatalog(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.catalogsGlobal = new CatalogsGlobal(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.catalogsImportationCatalogInfo = new CatalogsImportationCatalogInfo(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.catalogsImportationProcess = new CatalogsImportationProcess(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.channelCatalogsCategories = new ChannelCatalogsCategories(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.channelCatalogsColumnMappings = new ChannelCatalogsColumnMappings(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.channelCatalogsExclusionFilters = new ChannelCatalogsExclusionFilters(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.channelCatalogsExportations = new ChannelCatalogsExportations(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.channelCatalogsGlobal = new ChannelCatalogsGlobal(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.channelCatalogsLegacyTrackingGlobal =
      new ChannelCatalogsLegacyTrackingGlobal(
        this._defaultClient,
        this._securityClient,
        this._serverURL,
        this._language,
        this._sdkVersion,
        this._genVersion
      );

    this.channelCatalogsProducts = new ChannelCatalogsProducts(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.channelCatalogsProductsOptimisation =
      new ChannelCatalogsProductsOptimisation(
        this._defaultClient,
        this._securityClient,
        this._serverURL,
        this._language,
        this._sdkVersion,
        this._genVersion
      );

    this.channelCatalogsProductsOverrides =
      new ChannelCatalogsProductsOverrides(
        this._defaultClient,
        this._securityClient,
        this._serverURL,
        this._language,
        this._sdkVersion,
        this._genVersion
      );

    this.channelCatalogsSettings = new ChannelCatalogsSettings(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.channelsChannelsGlobal = new ChannelsChannelsGlobal(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.customerAccount = new CustomerAccount(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.customerAlerts = new CustomerAlerts(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.customerContracts = new CustomerContracts(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.customerFriends = new CustomerFriends(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.customerGlobal = new CustomerGlobal(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.customerInvoices = new CustomerInvoices(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.customerRights = new CustomerRights(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.customerSecurity = new CustomerSecurity(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.customerShares = new CustomerShares(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.customerStores = new CustomerStores(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.marketplacesChannelCatalogsGlobal =
      new MarketplacesChannelCatalogsGlobal(
        this._defaultClient,
        this._securityClient,
        this._serverURL,
        this._language,
        this._sdkVersion,
        this._genVersion
      );

    this.marketplacesChannelCatalogsPublications =
      new MarketplacesChannelCatalogsPublications(
        this._defaultClient,
        this._securityClient,
        this._serverURL,
        this._language,
        this._sdkVersion,
        this._genVersion
      );

    this.marketplacesChannelCatalogsSettings =
      new MarketplacesChannelCatalogsSettings(
        this._defaultClient,
        this._securityClient,
        this._serverURL,
        this._language,
        this._sdkVersion,
        this._genVersion
      );

    this.marketplacesOrdersAutoTransitions =
      new MarketplacesOrdersAutoTransitions(
        this._defaultClient,
        this._securityClient,
        this._serverURL,
        this._language,
        this._sdkVersion,
        this._genVersion
      );

    this.marketplacesOrdersBatches = new MarketplacesOrdersBatches(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.marketplacesOrdersExports = new MarketplacesOrdersExports(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.marketplacesOrdersGlobal = new MarketplacesOrdersGlobal(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.marketplacesOrdersList = new MarketplacesOrdersList(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.marketplacesOrdersOrder = new MarketplacesOrdersOrder(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.marketplacesOrdersSubscriptionsSubscriptions =
      new MarketplacesOrdersSubscriptionsSubscriptions(
        this._defaultClient,
        this._securityClient,
        this._serverURL,
        this._language,
        this._sdkVersion,
        this._genVersion
      );

    this.marketplacesOrdersV3Batches = new MarketplacesOrdersV3Batches(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.marketplacesOrdersV3Global = new MarketplacesOrdersV3Global(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.marketplacesOrdersV3List = new MarketplacesOrdersV3List(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.marketplacesOrdersV3Order = new MarketplacesOrdersV3Order(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.omInvoiceAPIGeneration = new OMInvoiceAPIGeneration(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.omInvoiceAPISettings = new OMInvoiceAPISettings(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.publicChannelsPublicChannels = new PublicChannelsPublicChannels(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.publicListOfValuesLOV = new PublicListOfValuesLOV(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.publicSecuritySecurity = new PublicSecuritySecurity(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.userListOfValuesLOV = new UserListOfValuesLOV(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );
  }
}
