/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Collections {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * All Collections
   *
   * @remarks
   * The `/collections` endpoint returns a list of all [collections](https://www.getpostman.com/docs/collections) that are accessible by you. The list includes your own collections and the collections that you have subscribed to.
   *
   * The response contains an array of collection information containing the `name`, `id`, `owner` and `uid` of each collection.
   *
   * > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
   */
  allCollections(
    config?: AxiosRequestConfig
  ): Promise<operations.AllCollectionsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/collections";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AllCollectionsResponse =
        new operations.AllCollectionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.allCollections200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.AllCollections200ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a Fork
   *
   * @remarks
   * This endpoint allows you to create a fork from an existing collection.
   *
   * On successful creation of the collection, the response returns the collection `name`, `id`, `uid` along with `fork` information.
   *
   * You can also specify the context of a workspace to fork a collection in by passing the `workspace` as a query param.
   *
   * > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
   */
  createAFork(
    req: operations.CreateAForkRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateAForkResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateAForkRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/collections/fork/{collection_uid}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateAForkResponse =
        new operations.CreateAForkResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Create Collection
   *
   * @remarks
   * This endpoint allows you to create collections using the Postman Collection v2 format. For more information about the v2 schema, check the format [here](https://schema.getpostman.com/json/collection/v2.0.0/docs/index.html).
   *
   * On successful creation of the collection, the response returns the collection `name`, `id` and the `uid`.
   *
   * You can also specify the context of a workspace to create a collection in directly by passing the `workspace` as a query param.
   *
   * > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
   */
  createCollection(
    req: operations.CreateCollectionRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateCollectionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateCollectionRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/collections";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateCollectionResponse =
        new operations.CreateCollectionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createCollection200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateCollection200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createCollection400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateCollection400ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete Collection
   *
   * @remarks
   * This endpoint allows you to delete an existing collection.
   *
   * On successful deletion of the collection, the response returns the `id` and `uid`.
   *
   * > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
   */
  deleteCollection(
    req: operations.DeleteCollectionRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteCollectionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteCollectionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/collections/{collection_uid}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteCollectionResponse =
        new operations.DeleteCollectionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteCollection200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.DeleteCollection200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteCollection404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.DeleteCollection404ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Merge a Fork
   *
   * @remarks
   * This endpoint allows you to merge a forked collection back to its destination collection.
   *
   * On successful creation of the collection, the response returns the collection `name`, `id` and `uid`.
   *
   * You need to specify the fork UID (as `source`) and destination collection UID (as `destination`) in the request body.
   *
   * Optionally, you can also specify the merge strategy as either `deleteSource` or `updateSourceWithDestination`. Following is an explanation of the merge strategies
   *
   * | Merge Strategy | Behaviour |
   * | --- | --- |
   * | deleteSource | Forked collection is deleted after merging |
   * | updateSourceWithDestination | Forked collection is up to date with changes in destination collection |
   *
   * If the collections cannot be merged (due to conflicts), appropriate error messages will be returned.
   *
   *
   * > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
   */
  mergeAFork(
    req: operations.MergeAForkRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.MergeAForkResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MergeAForkRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/collections/merge";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MergeAForkResponse =
        new operations.MergeAForkResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Single Collection
   *
   * @remarks
   * Access the contents of a collection that is accessible to you using its unique id (`uid`).
   *
   * > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
   */
  singleCollection(
    req: operations.SingleCollectionRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SingleCollectionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SingleCollectionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/collections/{collection_uid}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SingleCollectionResponse =
        new operations.SingleCollectionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.singleCollection200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.SingleCollection200ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update Collection
   *
   * @remarks
   * This endpoint allows you to update an existing collection using the Postman Collection v2 format. For more information about the v2 schema, check the format [here](https://schema.getpostman.com/json/collection/v2.0.0/docs/index.html).
   *
   * On successful updation of the collection, the response returns the collection `name`, `id` and `uid`.
   *
   * > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
   *
   * Note: Please be careful when trying to update the collection, as the existing collection will be replaced by the request body.
   */
  updateCollection(
    req: operations.UpdateCollectionRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateCollectionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateCollectionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/collections/{collection_uid}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateCollectionResponse =
        new operations.UpdateCollectionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateCollection200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UpdateCollection200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateCollection400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UpdateCollection400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateCollection403ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UpdateCollection403ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateCollection404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UpdateCollection404ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }
}
