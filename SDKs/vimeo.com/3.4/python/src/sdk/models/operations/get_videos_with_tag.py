"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import legacy_error as shared_legacy_error
from ..shared import video as shared_video
from enum import Enum
from typing import Optional

class GetVideosWithTagDirectionEnum(str, Enum):
    r"""The sort direction of the results."""
    ASC = 'asc'
    DESC = 'desc'

class GetVideosWithTagSortEnum(str, Enum):
    r"""The way to sort the results."""
    CREATED_TIME = 'created_time'
    DURATION = 'duration'
    NAME = 'name'


@dataclasses.dataclass
class GetVideosWithTagRequest:
    
    word: str = dataclasses.field(metadata={'path_param': { 'field_name': 'word', 'style': 'simple', 'explode': False }})
    r"""The tag word."""  
    direction: Optional[GetVideosWithTagDirectionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'direction', 'style': 'form', 'explode': True }})
    r"""The sort direction of the results."""  
    page: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""The page number of the results to show."""  
    per_page: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""The number of items to show on each page of results, up to a maximum of 100."""  
    sort: Optional[GetVideosWithTagSortEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""The way to sort the results."""  
    

@dataclasses.dataclass
class GetVideosWithTagResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    legacy_error: Optional[shared_legacy_error.LegacyError] = dataclasses.field(default=None)
    r"""No such tag exists."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    videos: Optional[list[shared_video.Video]] = dataclasses.field(default=None)
    r"""The videos were returned."""  
    