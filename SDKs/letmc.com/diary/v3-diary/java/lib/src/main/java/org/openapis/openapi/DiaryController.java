/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class DiaryController {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public DiaryController(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Submit appointment feedback
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DiaryControllerAddFeedbackFormResponse diaryControllerAddFeedbackForm(org.openapis.openapi.models.operations.DiaryControllerAddFeedbackFormRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DiaryControllerAddFeedbackFormRequest.class, baseUrl, "/v3/diary/{shortName}/appointment/feedback", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "feedbackSubmissionModel", "form");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DiaryControllerAddFeedbackFormResponse res = new org.openapis.openapi.models.operations.DiaryControllerAddFeedbackFormResponse(contentType, httpRes.statusCode()) {{
            diaryControllerAddFeedbackForm200ApplicationJSONString = null;
            diaryControllerAddFeedbackForm200ApplicationXMLString = null;
            diaryControllerAddFeedbackForm200TextJSONString = null;
            diaryControllerAddFeedbackForm200TextXMLString = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerAddFeedbackForm200ApplicationJSONString = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerAddFeedbackForm200ApplicationXMLString = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerAddFeedbackForm200TextJSONString = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerAddFeedbackForm200TextXMLString = out;
            }
        }

        return res;
    }

    /**
     * Submit appointment feedback
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DiaryControllerAddFeedbackJsonResponse diaryControllerAddFeedbackJson(org.openapis.openapi.models.operations.DiaryControllerAddFeedbackJsonRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DiaryControllerAddFeedbackJsonRequest.class, baseUrl, "/v3/diary/{shortName}/appointment/feedback", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "feedbackSubmissionModel", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DiaryControllerAddFeedbackJsonResponse res = new org.openapis.openapi.models.operations.DiaryControllerAddFeedbackJsonResponse(contentType, httpRes.statusCode()) {{
            diaryControllerAddFeedbackJSON200ApplicationJSONString = null;
            diaryControllerAddFeedbackJson200ApplicationXMLString = null;
            diaryControllerAddFeedbackJSON200TextJSONString = null;
            diaryControllerAddFeedbackJson200TextXMLString = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerAddFeedbackJSON200ApplicationJSONString = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerAddFeedbackJson200ApplicationXMLString = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerAddFeedbackJSON200TextJSONString = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerAddFeedbackJson200TextXMLString = out;
            }
        }

        return res;
    }

    /**
     * Submit appointment feedback
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DiaryControllerAddFeedbackRawResponse diaryControllerAddFeedbackRaw(org.openapis.openapi.models.operations.DiaryControllerAddFeedbackRawRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DiaryControllerAddFeedbackRawRequest.class, baseUrl, "/v3/diary/{shortName}/appointment/feedback", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "raw");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DiaryControllerAddFeedbackRawResponse res = new org.openapis.openapi.models.operations.DiaryControllerAddFeedbackRawResponse(contentType, httpRes.statusCode()) {{
            diaryControllerAddFeedbackRaw200ApplicationJSONString = null;
            diaryControllerAddFeedbackRaw200ApplicationXMLString = null;
            diaryControllerAddFeedbackRaw200TextJSONString = null;
            diaryControllerAddFeedbackRaw200TextXMLString = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerAddFeedbackRaw200ApplicationJSONString = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerAddFeedbackRaw200ApplicationXMLString = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerAddFeedbackRaw200TextJSONString = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerAddFeedbackRaw200TextXMLString = out;
            }
        }

        return res;
    }

    /**
     * Cancel an existing appointment using its unique identifier
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DiaryControllerCancelAppointmentResponse diaryControllerCancelAppointment(org.openapis.openapi.models.operations.DiaryControllerCancelAppointmentRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DiaryControllerCancelAppointmentRequest.class, baseUrl, "/v3/diary/{shortName}/appointment/{appointmentID}/cancel", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DiaryControllerCancelAppointmentResponse res = new org.openapis.openapi.models.operations.DiaryControllerCancelAppointmentResponse(contentType, httpRes.statusCode()) {{
            diaryControllerCancelAppointment200ApplicationJSONString = null;
            diaryControllerCancelAppointment200ApplicationXMLString = null;
            diaryControllerCancelAppointment200TextJSONString = null;
            diaryControllerCancelAppointment200TextXMLString = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerCancelAppointment200ApplicationJSONString = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerCancelAppointment200ApplicationXMLString = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerCancelAppointment200TextJSONString = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerCancelAppointment200TextXMLString = out;
            }
        }

        return res;
    }

    /**
     * Delete an existing appointment using its unique identifier
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DiaryControllerDeleteAppointmentResponse diaryControllerDeleteAppointment(org.openapis.openapi.models.operations.DiaryControllerDeleteAppointmentRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DiaryControllerDeleteAppointmentRequest.class, baseUrl, "/v3/diary/{shortName}/appointment", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DiaryControllerDeleteAppointmentRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DiaryControllerDeleteAppointmentResponse res = new org.openapis.openapi.models.operations.DiaryControllerDeleteAppointmentResponse(contentType, httpRes.statusCode()) {{
            diaryControllerDeleteAppointment200ApplicationJSONString = null;
            diaryControllerDeleteAppointment200ApplicationXMLString = null;
            diaryControllerDeleteAppointment200TextJSONString = null;
            diaryControllerDeleteAppointment200TextXMLString = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerDeleteAppointment200ApplicationJSONString = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerDeleteAppointment200ApplicationXMLString = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerDeleteAppointment200TextJSONString = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerDeleteAppointment200TextXMLString = out;
            }
        }

        return res;
    }

    /**
     * Get a list of all available allocations for a date + 7 days for a specified appointment type
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DiaryControllerGetAllocationsResponse diaryControllerGetAllocations(org.openapis.openapi.models.operations.DiaryControllerGetAllocationsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DiaryControllerGetAllocationsRequest.class, baseUrl, "/v3/diary/{shortName}/allocations", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DiaryControllerGetAllocationsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DiaryControllerGetAllocationsResponse res = new org.openapis.openapi.models.operations.DiaryControllerGetAllocationsResponse(contentType, httpRes.statusCode()) {{
            diaryBookingModels = null;
            diaryBookingModels = null;
            body = null;
            body = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.DiaryBookingModel[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.DiaryBookingModel[].class);
                res.diaryBookingModels = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.DiaryBookingModel[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.DiaryBookingModel[].class);
                res.diaryBookingModels = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Get an appointment by ID
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DiaryControllerGetAppointmentResponse diaryControllerGetAppointment(org.openapis.openapi.models.operations.DiaryControllerGetAppointmentRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DiaryControllerGetAppointmentRequest.class, baseUrl, "/v3/diary/{shortName}/appointment", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DiaryControllerGetAppointmentRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DiaryControllerGetAppointmentResponse res = new org.openapis.openapi.models.operations.DiaryControllerGetAppointmentResponse(contentType, httpRes.statusCode()) {{
            diaryAppointmentModel = null;
            diaryAppointmentModel = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.DiaryAppointmentModel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.DiaryAppointmentModel.class);
                res.diaryAppointmentModel = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.DiaryAppointmentModel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.DiaryAppointmentModel.class);
                res.diaryAppointmentModel = out;
            }
        }

        return res;
    }

    /**
     * A collection of all diary appointment types
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DiaryControllerGetAppointmentTypesResponse diaryControllerGetAppointmentTypes(org.openapis.openapi.models.operations.DiaryControllerGetAppointmentTypesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DiaryControllerGetAppointmentTypesRequest.class, baseUrl, "/v3/diary/{shortName}/appointmenttypes", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DiaryControllerGetAppointmentTypesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DiaryControllerGetAppointmentTypesResponse res = new org.openapis.openapi.models.operations.DiaryControllerGetAppointmentTypesResponse(contentType, httpRes.statusCode()) {{
            diaryAppointmentTypeModelResults = null;
            diaryAppointmentTypeModelResults = null;
            body = null;
            body = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.DiaryAppointmentTypeModelResults out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.DiaryAppointmentTypeModelResults.class);
                res.diaryAppointmentTypeModelResults = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.DiaryAppointmentTypeModelResults out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.DiaryAppointmentTypeModelResults.class);
                res.diaryAppointmentTypeModelResults = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * A collection of diary appointments linked to a company filtered between specific dates and by appointment type
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DiaryControllerGetAppointmentsBetweenDatesResponse diaryControllerGetAppointmentsBetweenDates(org.openapis.openapi.models.operations.DiaryControllerGetAppointmentsBetweenDatesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DiaryControllerGetAppointmentsBetweenDatesRequest.class, baseUrl, "/v3/diary/{shortName}/appointmentsbetweendates", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DiaryControllerGetAppointmentsBetweenDatesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DiaryControllerGetAppointmentsBetweenDatesResponse res = new org.openapis.openapi.models.operations.DiaryControllerGetAppointmentsBetweenDatesResponse(contentType, httpRes.statusCode()) {{
            diaryAppointmentModelResults = null;
            diaryAppointmentModelResults = null;
            body = null;
            body = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.DiaryAppointmentModelResults out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.DiaryAppointmentModelResults.class);
                res.diaryAppointmentModelResults = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.DiaryAppointmentModelResults out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.DiaryAppointmentModelResults.class);
                res.diaryAppointmentModelResults = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Retrieves all recurring appointments:-
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DiaryControllerGetRecurringAppointmentsResponse diaryControllerGetRecurringAppointments(org.openapis.openapi.models.operations.DiaryControllerGetRecurringAppointmentsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DiaryControllerGetRecurringAppointmentsRequest.class, baseUrl, "/v3/diary/{shortName}/recurringappointment", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DiaryControllerGetRecurringAppointmentsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DiaryControllerGetRecurringAppointmentsResponse res = new org.openapis.openapi.models.operations.DiaryControllerGetRecurringAppointmentsResponse(contentType, httpRes.statusCode()) {{
            diaryAppointmentModelResults = null;
            diaryAppointmentModelResults = null;
            body = null;
            body = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.DiaryAppointmentModelResults out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.DiaryAppointmentModelResults.class);
                res.diaryAppointmentModelResults = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.DiaryAppointmentModelResults out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.DiaryAppointmentModelResults.class);
                res.diaryAppointmentModelResults = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Post an appointment into a valid diary allocation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DiaryControllerPostAppointmentFormResponse diaryControllerPostAppointmentForm(org.openapis.openapi.models.operations.DiaryControllerPostAppointmentFormRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DiaryControllerPostAppointmentFormRequest.class, baseUrl, "/v3/diary/{shortName}/appointment", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "diaryAppointmentDetails", "form");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DiaryControllerPostAppointmentFormRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DiaryControllerPostAppointmentFormResponse res = new org.openapis.openapi.models.operations.DiaryControllerPostAppointmentFormResponse(contentType, httpRes.statusCode()) {{
            diaryControllerPostAppointmentForm200ApplicationJSONString = null;
            diaryControllerPostAppointmentForm200ApplicationXMLString = null;
            diaryControllerPostAppointmentForm200TextJSONString = null;
            diaryControllerPostAppointmentForm200TextXMLString = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerPostAppointmentForm200ApplicationJSONString = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerPostAppointmentForm200ApplicationXMLString = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerPostAppointmentForm200TextJSONString = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerPostAppointmentForm200TextXMLString = out;
            }
        }

        return res;
    }

    /**
     * Post an appointment into a valid diary allocation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DiaryControllerPostAppointmentJsonResponse diaryControllerPostAppointmentJson(org.openapis.openapi.models.operations.DiaryControllerPostAppointmentJsonRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DiaryControllerPostAppointmentJsonRequest.class, baseUrl, "/v3/diary/{shortName}/appointment", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "diaryAppointmentDetails", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DiaryControllerPostAppointmentJsonRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DiaryControllerPostAppointmentJsonResponse res = new org.openapis.openapi.models.operations.DiaryControllerPostAppointmentJsonResponse(contentType, httpRes.statusCode()) {{
            diaryControllerPostAppointmentJSON200ApplicationJSONString = null;
            diaryControllerPostAppointmentJson200ApplicationXMLString = null;
            diaryControllerPostAppointmentJSON200TextJSONString = null;
            diaryControllerPostAppointmentJson200TextXMLString = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerPostAppointmentJSON200ApplicationJSONString = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerPostAppointmentJson200ApplicationXMLString = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerPostAppointmentJSON200TextJSONString = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerPostAppointmentJson200TextXMLString = out;
            }
        }

        return res;
    }

    /**
     * Post an appointment into a valid diary allocation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DiaryControllerPostAppointmentRawResponse diaryControllerPostAppointmentRaw(org.openapis.openapi.models.operations.DiaryControllerPostAppointmentRawRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DiaryControllerPostAppointmentRawRequest.class, baseUrl, "/v3/diary/{shortName}/appointment", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "raw");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DiaryControllerPostAppointmentRawRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DiaryControllerPostAppointmentRawResponse res = new org.openapis.openapi.models.operations.DiaryControllerPostAppointmentRawResponse(contentType, httpRes.statusCode()) {{
            diaryControllerPostAppointmentRaw200ApplicationJSONString = null;
            diaryControllerPostAppointmentRaw200ApplicationXMLString = null;
            diaryControllerPostAppointmentRaw200TextJSONString = null;
            diaryControllerPostAppointmentRaw200TextXMLString = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerPostAppointmentRaw200ApplicationJSONString = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerPostAppointmentRaw200ApplicationXMLString = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerPostAppointmentRaw200TextJSONString = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerPostAppointmentRaw200TextXMLString = out;
            }
        }

        return res;
    }

    /**
     * Update an existing appointment using its unique identifier
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DiaryControllerPutAppointmentFormResponse diaryControllerPutAppointmentForm(org.openapis.openapi.models.operations.DiaryControllerPutAppointmentFormRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DiaryControllerPutAppointmentFormRequest.class, baseUrl, "/v3/diary/{shortName}/appointment", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "diaryAppointmentDetails", "form");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DiaryControllerPutAppointmentFormRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DiaryControllerPutAppointmentFormResponse res = new org.openapis.openapi.models.operations.DiaryControllerPutAppointmentFormResponse(contentType, httpRes.statusCode()) {{
            diaryControllerPutAppointmentForm200ApplicationJSONString = null;
            diaryControllerPutAppointmentForm200ApplicationXMLString = null;
            diaryControllerPutAppointmentForm200TextJSONString = null;
            diaryControllerPutAppointmentForm200TextXMLString = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerPutAppointmentForm200ApplicationJSONString = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerPutAppointmentForm200ApplicationXMLString = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerPutAppointmentForm200TextJSONString = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerPutAppointmentForm200TextXMLString = out;
            }
        }

        return res;
    }

    /**
     * Update an existing appointment using its unique identifier
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DiaryControllerPutAppointmentJsonResponse diaryControllerPutAppointmentJson(org.openapis.openapi.models.operations.DiaryControllerPutAppointmentJsonRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DiaryControllerPutAppointmentJsonRequest.class, baseUrl, "/v3/diary/{shortName}/appointment", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "diaryAppointmentDetails", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DiaryControllerPutAppointmentJsonRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DiaryControllerPutAppointmentJsonResponse res = new org.openapis.openapi.models.operations.DiaryControllerPutAppointmentJsonResponse(contentType, httpRes.statusCode()) {{
            diaryControllerPutAppointmentJSON200ApplicationJSONString = null;
            diaryControllerPutAppointmentJson200ApplicationXMLString = null;
            diaryControllerPutAppointmentJSON200TextJSONString = null;
            diaryControllerPutAppointmentJson200TextXMLString = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerPutAppointmentJSON200ApplicationJSONString = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerPutAppointmentJson200ApplicationXMLString = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerPutAppointmentJSON200TextJSONString = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerPutAppointmentJson200TextXMLString = out;
            }
        }

        return res;
    }

    /**
     * Update an existing appointment using its unique identifier
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DiaryControllerPutAppointmentRawResponse diaryControllerPutAppointmentRaw(org.openapis.openapi.models.operations.DiaryControllerPutAppointmentRawRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DiaryControllerPutAppointmentRawRequest.class, baseUrl, "/v3/diary/{shortName}/appointment", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "raw");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DiaryControllerPutAppointmentRawRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DiaryControllerPutAppointmentRawResponse res = new org.openapis.openapi.models.operations.DiaryControllerPutAppointmentRawResponse(contentType, httpRes.statusCode()) {{
            diaryControllerPutAppointmentRaw200ApplicationJSONString = null;
            diaryControllerPutAppointmentRaw200ApplicationXMLString = null;
            diaryControllerPutAppointmentRaw200TextJSONString = null;
            diaryControllerPutAppointmentRaw200TextXMLString = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerPutAppointmentRaw200ApplicationJSONString = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerPutAppointmentRaw200ApplicationXMLString = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerPutAppointmentRaw200TextJSONString = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.diaryControllerPutAppointmentRaw200TextXMLString = out;
            }
        }

        return res;
    }

    /**
     * Match Guest Parameters with existing applicants
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DiaryControllerSearchGuestResponse diaryControllerSearchGuest(org.openapis.openapi.models.operations.DiaryControllerSearchGuestRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DiaryControllerSearchGuestRequest.class, baseUrl, "/v3/diary/{shortname}/{branchID}/guest/search", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DiaryControllerSearchGuestRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DiaryControllerSearchGuestResponse res = new org.openapis.openapi.models.operations.DiaryControllerSearchGuestResponse(contentType, httpRes.statusCode()) {{
            guestDiaryParametersResultsModel = null;
            guestDiaryParametersResultsModel = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GuestDiaryParametersResultsModel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GuestDiaryParametersResultsModel.class);
                res.guestDiaryParametersResultsModel = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GuestDiaryParametersResultsModel out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GuestDiaryParametersResultsModel.class);
                res.guestDiaryParametersResultsModel = out;
            }
        }

        return res;
    }
}