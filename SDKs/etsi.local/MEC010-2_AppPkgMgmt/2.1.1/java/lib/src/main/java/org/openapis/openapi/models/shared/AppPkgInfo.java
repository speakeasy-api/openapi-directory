/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * AppPkgInfo - 'The data type AppPkgInfo represents the parameters for an application package resource'
 */
public class AppPkgInfo {
    /**
     * Links to resources related to this resource.
     */
    @JsonProperty("_links")
    public AppPkgInfoLinks links;

    public AppPkgInfo withLinks(AppPkgInfoLinks links) {
        this.links = links;
        return this;
    }
    
    /**
     * Additional information of application package artifacts that are not application software images. Type is TBD
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additionalArtifacts")
    public Object additionalArtifacts;

    public AppPkgInfo withAdditionalArtifacts(Object additionalArtifacts) {
        this.additionalArtifacts = additionalArtifacts;
        return this;
    }
    
    /**
     * Identifier of this MEC application descriptor. This attribute shall be globally unique.
     */
    @JsonProperty("appDId")
    public String appDId;

    public AppPkgInfo withAppDId(String appDId) {
        this.appDId = appDId;
        return this;
    }
    
    /**
     * Identifies the version of the application descriptor.
     */
    @JsonProperty("appDVersion")
    public String appDVersion;

    public AppPkgInfo withAppDVersion(String appDVersion) {
        this.appDVersion = appDVersion;
        return this;
    }
    
    /**
     * Name to identify the MEC application.
     */
    @JsonProperty("appName")
    public String appName;

    public AppPkgInfo withAppName(String appName) {
        this.appName = appName;
        return this;
    }
    
    /**
     * Provider of the application and of the AppD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("appProvider")
    public String appProvider;

    public AppPkgInfo withAppProvider(String appProvider) {
        this.appProvider = appProvider;
        return this;
    }
    
    /**
     * Software version of the application. This is updated when there is any change to the software in the onboarded application package.
     */
    @JsonProperty("appSoftwareVersion")
    public String appSoftwareVersion;

    public AppPkgInfo withAppSoftwareVersion(String appSoftwareVersion) {
        this.appSoftwareVersion = appSoftwareVersion;
        return this;
    }
    
    @JsonProperty("checksum")
    public Checksum checksum;

    public AppPkgInfo withChecksum(Checksum checksum) {
        this.checksum = checksum;
        return this;
    }
    
    /**
     * Identifier of the onboarded application package.
     */
    @JsonProperty("id")
    public String id;

    public AppPkgInfo withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Onboarding state of application package
     */
    @JsonProperty("onboardingState")
    public OnboardingStateEnum onboardingState;

    public AppPkgInfo withOnboardingState(OnboardingStateEnum onboardingState) {
        this.onboardingState = onboardingState;
        return this;
    }
    
    /**
     * Operational state of the onboarded application package: \u00c3\u00a2\u00e2\u201a\u00ac\u00c2\u00a2ENABLED: the application package can be used for instantiation of new application instances. \u00c3\u00a2\u00e2\u201a\u00ac\u00c2\u00a2DISABLED: the application package cannot be used for further application instantiation requests.
     */
    @JsonProperty("operationalState")
    public AppPkgOperationalStateEnum operationalState;

    public AppPkgInfo withOperationalState(AppPkgOperationalStateEnum operationalState) {
        this.operationalState = operationalState;
        return this;
    }
    
    /**
     * Information of application software image in application package. Type is TBD
     */
    @JsonProperty("softwareImages")
    public Object softwareImages;

    public AppPkgInfo withSoftwareImages(Object softwareImages) {
        this.softwareImages = softwareImages;
        return this;
    }
    
    /**
     * Usage state of the onboarded instance of the application package
     */
    @JsonProperty("usageState")
    public UsageStateEnum usageState;

    public AppPkgInfo withUsageState(UsageStateEnum usageState) {
        this.usageState = usageState;
        return this;
    }
    
    /**
     * 'This data type represents a list of key-value pairs. The order of the pairs in the list is not significant. In JSON, a set of key-value pairs is represented as an object. It shall comply with the provisions defined in clause 4 of IETF RFC 8259'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userDefinedData")
    public java.util.Map<String, Object> userDefinedData;

    public AppPkgInfo withUserDefinedData(java.util.Map<String, Object> userDefinedData) {
        this.userDefinedData = userDefinedData;
        return this;
    }
    
    public AppPkgInfo(@JsonProperty("_links") AppPkgInfoLinks links, @JsonProperty("appDId") String appDId, @JsonProperty("appDVersion") String appDVersion, @JsonProperty("appName") String appName, @JsonProperty("appSoftwareVersion") String appSoftwareVersion, @JsonProperty("checksum") Checksum checksum, @JsonProperty("id") String id, @JsonProperty("onboardingState") OnboardingStateEnum onboardingState, @JsonProperty("operationalState") AppPkgOperationalStateEnum operationalState, @JsonProperty("softwareImages") Object softwareImages, @JsonProperty("usageState") UsageStateEnum usageState) {
        this.links = links;
        this.appDId = appDId;
        this.appDVersion = appDVersion;
        this.appName = appName;
        this.appSoftwareVersion = appSoftwareVersion;
        this.checksum = checksum;
        this.id = id;
        this.onboardingState = onboardingState;
        this.operationalState = operationalState;
        this.softwareImages = softwareImages;
        this.usageState = usageState;
  }
}
