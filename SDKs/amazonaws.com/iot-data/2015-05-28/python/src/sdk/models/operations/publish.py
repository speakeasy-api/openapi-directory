"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PublishRequestBody:
    
    payload: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payload'), 'exclude': lambda f: f is None }})
    r"""<p>The message body. MQTT accepts text, binary, and empty (null) message payloads.</p> <p>Publishing an empty (null) payload with <b>retain</b> = <code>true</code> deletes the retained message identified by <b>topic</b> from Amazon Web Services IoT Core.</p>"""  
    
class PublishXAmzMqtt5PayloadFormatIndicatorEnum(str, Enum):
    r"""An <code>Enum</code> string value that indicates whether the payload is formatted as UTF-8. <code>payloadFormatIndicator</code> is an HTTP header value in the API."""
    UNSPECIFIED_BYTES = 'UNSPECIFIED_BYTES'
    UTF8_DATA = 'UTF8_DATA'


@dataclasses.dataclass
class PublishRequest:
    
    request_body: PublishRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    topic: str = dataclasses.field(metadata={'path_param': { 'field_name': 'topic', 'style': 'simple', 'explode': False }})
    r"""The name of the MQTT topic."""  
    content_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'contentType', 'style': 'form', 'explode': True }})
    r"""A UTF-8 encoded string that describes the content of the publishing message."""  
    message_expiry: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'messageExpiry', 'style': 'form', 'explode': True }})
    r"""A user-defined integer value that represents the message expiry interval in seconds. If absent, the message doesn't expire. For more information about the limits of <code>messageExpiry</code>, see <a href=\\"https://docs.aws.amazon.com/general/latest/gr/iot-core.html#message-broker-limits\\">Amazon Web Services IoT Core message broker and protocol limits and quotas </a> from the Amazon Web Services Reference Guide."""  
    qos: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'qos', 'style': 'form', 'explode': True }})
    r"""The Quality of Service (QoS) level. The default QoS level is 0."""  
    response_topic: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'responseTopic', 'style': 'form', 'explode': True }})
    r"""A UTF-8 encoded string that's used as the topic name for a response message. The response topic is used to describe the topic which the receiver should publish to as part of the request-response flow. The topic must not contain wildcard characters."""  
    retain: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'retain', 'style': 'form', 'explode': True }})
    r"""<p>A Boolean value that determines whether to set the RETAIN flag when the message is published.</p> <p>Setting the RETAIN flag causes the message to be retained and sent to new subscribers to the topic.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default value: <code>false</code> </p>"""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_mqtt5_correlation_data: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'x-amz-mqtt5-correlation-data', 'style': 'simple', 'explode': False }})
    r"""The base64-encoded binary data used by the sender of the request message to identify which request the response message is for when it's received. <code>correlationData</code> is an HTTP header value in the API."""  
    x_amz_mqtt5_payload_format_indicator: Optional[PublishXAmzMqtt5PayloadFormatIndicatorEnum] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'x-amz-mqtt5-payload-format-indicator', 'style': 'simple', 'explode': False }})
    r"""An <code>Enum</code> string value that indicates whether the payload is formatted as UTF-8. <code>payloadFormatIndicator</code> is an HTTP header value in the API."""  
    x_amz_mqtt5_user_properties: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'x-amz-mqtt5-user-properties', 'style': 'simple', 'explode': False }})
    r"""<p>A JSON string that contains an array of JSON objects. If you donâ€™t use Amazon Web Services SDK or CLI, you must encode the JSON string to base64 format before adding it to the HTTP header. <code>userProperties</code> is an HTTP header value in the API.</p> <p>The following example <code>userProperties</code> parameter is a JSON string which represents two User Properties. Note that it needs to be base64-encoded:</p> <p> <code>[{\\"deviceName\\": \\"alpha\\"}, {\\"deviceCnt\\": \\"45\\"}]</code> </p>"""  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class PublishResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    internal_failure_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalFailureException"""  
    invalid_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRequestException"""  
    method_not_allowed_exception: Optional[Any] = dataclasses.field(default=None)
    r"""MethodNotAllowedException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    unauthorized_exception: Optional[Any] = dataclasses.field(default=None)
    r"""UnauthorizedException"""  
    