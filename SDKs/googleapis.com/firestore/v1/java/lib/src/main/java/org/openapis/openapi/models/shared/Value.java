/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Value - A message that can hold any of the supported value types.
 */
public class Value {
    /**
     * An array value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("arrayValue")
    public ArrayValue arrayValue;

    public Value withArrayValue(ArrayValue arrayValue) {
        this.arrayValue = arrayValue;
        return this;
    }
    
    /**
     * A boolean value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("booleanValue")
    public Boolean booleanValue;

    public Value withBooleanValue(Boolean booleanValue) {
        this.booleanValue = booleanValue;
        return this;
    }
    
    /**
     * A bytes value. Must not exceed 1 MiB - 89 bytes. Only the first 1,500 bytes are considered by queries.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bytesValue")
    public String bytesValue;

    public Value withBytesValue(String bytesValue) {
        this.bytesValue = bytesValue;
        return this;
    }
    
    /**
     * A double value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("doubleValue")
    public Double doubleValue;

    public Value withDoubleValue(Double doubleValue) {
        this.doubleValue = doubleValue;
        return this;
    }
    
    /**
     * An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("geoPointValue")
    public LatLng geoPointValue;

    public Value withGeoPointValue(LatLng geoPointValue) {
        this.geoPointValue = geoPointValue;
        return this;
    }
    
    /**
     * An integer value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("integerValue")
    public String integerValue;

    public Value withIntegerValue(String integerValue) {
        this.integerValue = integerValue;
        return this;
    }
    
    /**
     * A map value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mapValue")
    public MapValue mapValue;

    public Value withMapValue(MapValue mapValue) {
        this.mapValue = mapValue;
        return this;
    }
    
    /**
     * A null value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nullValue")
    public ValueNullValueEnum nullValue;

    public Value withNullValue(ValueNullValueEnum nullValue) {
        this.nullValue = nullValue;
        return this;
    }
    
    /**
     * A reference to a document. For example: `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("referenceValue")
    public String referenceValue;

    public Value withReferenceValue(String referenceValue) {
        this.referenceValue = referenceValue;
        return this;
    }
    
    /**
     * A string value. The string, represented as UTF-8, must not exceed 1 MiB - 89 bytes. Only the first 1,500 bytes of the UTF-8 representation are considered by queries.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stringValue")
    public String stringValue;

    public Value withStringValue(String stringValue) {
        this.stringValue = stringValue;
        return this;
    }
    
    /**
     * A timestamp value. Precise only to microseconds. When stored, any additional precision is rounded down.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timestampValue")
    public String timestampValue;

    public Value withTimestampValue(String timestampValue) {
        this.timestampValue = timestampValue;
        return this;
    }
    
    public Value(){}
}
