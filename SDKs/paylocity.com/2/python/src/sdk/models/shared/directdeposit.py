"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DirectDepositAdditionalDirectDeposit:
    r"""The additional direct deposit model"""
    
    account_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountNumber'), 'exclude': lambda f: f is None }})
    r"""Account number, entered without special characters and spaces. <br  />Max length: 17<br />"""  
    account_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountType'), 'exclude': lambda f: f is None }})
    r"""Account type. Valid values are *C* (Checking), *S* (Saving), *P* (Pay Card). <br   />Max length: 1<br />"""  
    amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount'), 'exclude': lambda f: f is None }})
    r"""Amount value to be deposited to the account.<br  />Decimal (12,2)<br />"""  
    amount_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amountType'), 'exclude': lambda f: f is None }})
    r"""Amount type to indicate the context of the amount. Common values are *F* (FLAT), *F-* (Net Minus), *P* (Percent). <br  /> Max length: 5<br />"""  
    block_special: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blockSpecial'), 'exclude': lambda f: f is None }})
    r"""Indicates if direct deposit should be blocked when special check types such as Bonus are processed.<br />"""  
    is_skip_pre_note: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isSkipPreNote'), 'exclude': lambda f: f is None }})
    r"""Indicates if account will not pre-note.<br />"""  
    name_on_account: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nameOnAccount'), 'exclude': lambda f: f is None }})
    r"""Name on the bank account. Defaults to employee's name. <br  />Max length: 30<br />"""  
    pre_note_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preNoteDate'), 'exclude': lambda f: f is None }})
    r"""Date to end the pre-note of the account. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.<br />"""  
    routing_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('routingNumber'), 'exclude': lambda f: f is None }})
    r"""ABA Transit Routing Number, entered without dashes or spaces. <br  />Max length: 9<br />"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DirectDepositMainDirectDeposit:
    r"""The main Direct Deposit account."""
    
    account_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountNumber'), 'exclude': lambda f: f is None }})
    r"""Account number, entered without special characters and spaces. <br  />Max length: 17"""  
    account_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountType'), 'exclude': lambda f: f is None }})
    r"""Account type. Valid values are *C* (Checking), *S* (Saving), *P* (Pay Card). <br   />Max length: 1"""  
    block_special: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blockSpecial'), 'exclude': lambda f: f is None }})
    r"""Indicates if direct deposit should be blocked when special check types such as Bonus are processed.<br />"""  
    is_skip_pre_note: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isSkipPreNote'), 'exclude': lambda f: f is None }})
    r"""Indicates if account will not pre-note."""  
    name_on_account: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nameOnAccount'), 'exclude': lambda f: f is None }})
    r"""Name on the bank account. Defaults to employee's name. <br  />Max length: 30<br />"""  
    pre_note_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preNoteDate'), 'exclude': lambda f: f is None }})
    r"""Date to end the pre-note of the account. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*."""  
    routing_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('routingNumber'), 'exclude': lambda f: f is None }})
    r"""ABA Transit Routing Number, entered without dashes or spaces. <br  />Max length: 9"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DirectDeposit:
    r"""The Direct Deposit model"""
    
    additional_direct_deposit: Optional[list[DirectDepositAdditionalDirectDeposit]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalDirectDeposit'), 'exclude': lambda f: f is None }})
    r"""Additional Direct Deposits that are not the main Direct Deposit."""  
    main_direct_deposit: Optional[DirectDepositMainDirectDeposit] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mainDirectDeposit'), 'exclude': lambda f: f is None }})
    r"""The main Direct Deposit account."""  
    