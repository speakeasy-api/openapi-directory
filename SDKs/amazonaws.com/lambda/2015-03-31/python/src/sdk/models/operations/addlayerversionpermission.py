"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import addlayerversionpermissionresponse as shared_addlayerversionpermissionresponse
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddLayerVersionPermissionRequestBody:
    
    action: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Action') }})
    r"""The API action that grants access to the layer. For example, <code>lambda:GetLayerVersion</code>."""  
    principal: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Principal') }})
    r"""An account ID, or <code>*</code> to grant layer usage permission to all accounts in an organization, or all Amazon Web Services accounts (if <code>organizationId</code> is not specified). For the last case, make sure that you really do want all Amazon Web Services accounts to have usage permission to this layer."""  
    statement_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StatementId') }})
    r"""An identifier that distinguishes the policy from others on the same layer version."""  
    organization_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OrganizationId'), 'exclude': lambda f: f is None }})
    r"""With the principal set to <code>*</code>, grant permission to all accounts in the specified organization."""  
    

@dataclasses.dataclass
class AddLayerVersionPermissionRequest:
    
    layer_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'LayerName', 'style': 'simple', 'explode': False }})
    r"""The name or Amazon Resource Name (ARN) of the layer."""  
    request_body: AddLayerVersionPermissionRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    version_number: int = dataclasses.field(metadata={'path_param': { 'field_name': 'VersionNumber', 'style': 'simple', 'explode': False }})
    r"""The version number."""  
    revision_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'RevisionId', 'style': 'form', 'explode': True }})
    r"""Only update the policy if the revision ID matches the ID specified. Use this option to avoid modifying a policy that has changed since you last read it."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class AddLayerVersionPermissionResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    add_layer_version_permission_response: Optional[shared_addlayerversionpermissionresponse.AddLayerVersionPermissionResponse] = dataclasses.field(default=None)
    r"""Success"""  
    invalid_parameter_value_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidParameterValueException"""  
    policy_length_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""PolicyLengthExceededException"""  
    precondition_failed_exception: Optional[Any] = dataclasses.field(default=None)
    r"""PreconditionFailedException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceConflictException"""  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    service_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceException"""  
    too_many_requests_exception: Optional[Any] = dataclasses.field(default=None)
    r"""TooManyRequestsException"""  
    