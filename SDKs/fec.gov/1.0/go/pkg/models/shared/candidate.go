// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"openapi/pkg/types"
	"time"
)

type CandidatePrincipalCommittees struct {
	// Affiliated committee or connected organization
	//
	AffiliatedCommitteeName *string `json:"affiliated_committee_name,omitempty"`
	// A unique identifier assigned to each candidate registered with the FEC.
	// If a person runs for several offices, that person will have separate candidate IDs for each office.
	//
	CandidateIds []string `json:"candidate_ids,omitempty"`
	// A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
	//
	CommitteeID string `json:"committee_id"`
	// The one-letter type code of the organization:
	//         - C communication cost
	//         - D delegate
	//         - E electioneering communication
	//         - H House
	//         - I independent expenditure filer (not a committee)
	//         - N PAC - nonqualified
	//         - O independent expenditure-only (super PACs)
	//         - P presidential
	//         - Q PAC - qualified
	//         - S Senate
	//         - U single candidate independent expenditure
	//         - V PAC with non-contribution account, nonqualified
	//         - W PAC with non-contribution account, qualified
	//         - X party, nonqualified
	//         - Y party, qualified
	//         - Z national party non-federal account
	//
	CommitteeType *string `json:"committee_type,omitempty"`
	// The one-letter type code of the organization:
	//         - C communication cost
	//         - D delegate
	//         - E electioneering communication
	//         - H House
	//         - I independent expenditure filer (not a committee)
	//         - N PAC - nonqualified
	//         - O independent expenditure-only (super PACs)
	//         - P presidential
	//         - Q PAC - qualified
	//         - S Senate
	//         - U single candidate independent expenditure
	//         - V PAC with non-contribution account, nonqualified
	//         - W PAC with non-contribution account, qualified
	//         - X party, nonqualified
	//         - Y party, qualified
	//         - Z national party non-federal account
	//
	CommitteeTypeFull *string `json:"committee_type_full,omitempty"`
	// A two year election cycle that the committee was active- (after original registration
	// date but before expiration date in Form 1s) The cycle begins with
	// an odd year and is named for its ending, even year.
	//
	Cycles []int `json:"cycles,omitempty"`
	// The one-letter designation code of the organization:
	//          - A authorized by a candidate
	//          - J joint fundraising committee
	//          - P principal campaign committee of a candidate
	//          - U unauthorized
	//          - B lobbyist/registrant PAC
	//          - D leadership PAC
	//
	Designation *string `json:"designation,omitempty"`
	// The one-letter designation code of the organization:
	//          - A authorized by a candidate
	//          - J joint fundraising committee
	//          - P principal campaign committee of a candidate
	//          - U unauthorized
	//          - B lobbyist/registrant PAC
	//          - D leadership PAC
	//
	DesignationFull *string `json:"designation_full,omitempty"`
	// The one-letter
	//     code of the filing frequency:
	//          - A Administratively terminated
	//          - D Debt
	//          - M Monthly filer
	//          - Q Quarterly filer
	//          - T Terminated
	//          - W Waived
	//
	FilingFrequency *string `json:"filing_frequency,omitempty"`
	// The day the FEC received the committee's first Form 1
	FirstF1Date *types.Date `json:"first_f1_date,omitempty"`
	// The day the FEC received the committee's first filing. This is usually a Form 1 committee registration.
	FirstFileDate *types.Date `json:"first_file_date,omitempty"`
	// The day the FEC received the committee's most recent Form 1
	LastF1Date *types.Date `json:"last_f1_date,omitempty"`
	// The day the FEC received the committee's most recent filing
	LastFileDate *types.Date `json:"last_file_date,omitempty"`
	// The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
	Name *string `json:"name,omitempty"`
	// The one-letter code for the kind for organization:
	//         - C corporation
	//         - L labor organization
	//         - M membership organization
	//         - T trade association
	//         - V cooperative
	//         - W corporation without capital stock
	//
	OrganizationType *string `json:"organization_type,omitempty"`
	// The one-letter code for the kind for organization:
	//         - C corporation
	//         - L labor organization
	//         - M membership organization
	//         - T trade association
	//         - V cooperative
	//         - W corporation without capital stock
	//
	OrganizationTypeFull *string `json:"organization_type_full,omitempty"`
	// Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
	Party *string `json:"party,omitempty"`
	// Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
	PartyFull *string `json:"party_full,omitempty"`
	// State of the committee's address as filed on the Form 1
	//
	State *string `json:"state,omitempty"`
	// Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
	TreasurerName *string `json:"treasurer_name,omitempty"`
}

type Candidate struct {
	// Last year a candidate was active. This field is specific to the candidate_id so if the same person runs for another office, there may be a different record for them.
	ActiveThrough *int `json:"active_through,omitempty"`
	// A unique identifier assigned to each candidate registered with the FEC.
	// If a person runs for several offices, that person will have separate candidate IDs for each office.
	//
	CandidateID *string `json:"candidate_id,omitempty"`
	//  Candidates who are actively seeking office. If no value is specified, all candidates
	// are returned. When True is specified, only active candidates are returned. When False is
	// specified, only inactive candidates are returned.
	//
	CandidateInactive *bool `json:"candidate_inactive,omitempty"`
	// One-letter code explaining if the candidate is:
	//         - C present candidate
	//         - F future candidate
	//         - N not yet a candidate
	//         - P prior candidate
	//
	CandidateStatus *string `json:"candidate_status,omitempty"`
	// Two-year election cycle in which a candidate runs for office.
	// Calculated from Form 2. The cycle begins with
	// an odd year and is named for its ending, even year. This cycle follows
	// the traditional house election cycle and subdivides the presidential
	// and Senate elections into comparable two-year blocks. To retrieve data for
	// the entire four years of a presidential term or six years of a senatorial term,
	// you will need the `election_full` flag.
	//
	Cycles []int `json:"cycles,omitempty"`
	// Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
	District *string `json:"district,omitempty"`
	// One-letter code explaining if the candidate is:
	//         - C present candidate
	//         - F future candidate
	//         - N not yet a candidate
	//         - P prior candidate
	//
	DistrictNumber *int `json:"district_number,omitempty"`
	// Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
	ElectionDistricts []string `json:"election_districts,omitempty"`
	// Years in which a candidate ran for office.
	ElectionYears    []int `json:"election_years,omitempty"`
	FederalFundsFlag *bool `json:"federal_funds_flag,omitempty"`
	// The day the FEC received the candidate's first filing. This is a F2 candidate registration.
	FirstFileDate  *types.Date `json:"first_file_date,omitempty"`
	HasRaisedFunds *bool       `json:"has_raised_funds,omitempty"`
	// inactive years
	InactiveElectionYears []int `json:"inactive_election_years,omitempty"`
	// One-letter code ('I', 'C', 'O') explaining if the candidate is an incumbent, a challenger, or if the seat is open.
	IncumbentChallenge *string `json:"incumbent_challenge,omitempty"`
	// Explains if the candidate is an incumbent, a challenger, or if the seat is open.
	IncumbentChallengeFull *string `json:"incumbent_challenge_full,omitempty"`
	// The day the FEC received the candidate's most recent Form 2
	LastF2Date *types.Date `json:"last_f2_date,omitempty"`
	// The day the FEC received the candidate's most recent filing
	LastFileDate *types.Date `json:"last_file_date,omitempty"`
	// Date the information was loaded into the FEC systems. This can be affected by reseting systems and other factors, refer to receipt_date for the day that the FEC received the paper or electronic document. Keep in mind that paper filings take more time to process and there can be a lag between load_date and receipt_date. This field can be helpful to identify paper records that have been processed recently.
	LoadDate *time.Time `json:"load_date,omitempty"`
	// Name of candidate running for office
	Name *string `json:"name,omitempty"`
	// Federal office candidate runs for: H, S or P
	Office *string `json:"office,omitempty"`
	// Federal office candidate runs for: House, Senate or presidential
	OfficeFull *string `json:"office_full,omitempty"`
	// Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
	Party *string `json:"party,omitempty"`
	// Party affiliated with a candidate or committee
	PartyFull           *string                        `json:"party_full,omitempty"`
	PrincipalCommittees []CandidatePrincipalCommittees `json:"principal_committees,omitempty"`
	// US state or territory where a candidate runs for office
	State *string `json:"state,omitempty"`
}
