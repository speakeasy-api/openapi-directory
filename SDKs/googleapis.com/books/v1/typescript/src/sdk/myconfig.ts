/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Myconfig {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Gets the current settings for the user.
   */
  booksMyconfigGetUserSettings(
    req: operations.BooksMyconfigGetUserSettingsRequest,
    security: operations.BooksMyconfigGetUserSettingsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BooksMyconfigGetUserSettingsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BooksMyconfigGetUserSettingsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/books/v1/myconfig/getUserSettings";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BooksMyconfigGetUserSettingsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BooksMyconfigGetUserSettingsResponse =
        new operations.BooksMyconfigGetUserSettingsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.usersettings = utils.objectToClass(
              httpRes?.data,
              shared.Usersettings
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Release downloaded content access restriction.
   */
  booksMyconfigReleaseDownloadAccess(
    req: operations.BooksMyconfigReleaseDownloadAccessRequest,
    security: operations.BooksMyconfigReleaseDownloadAccessSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BooksMyconfigReleaseDownloadAccessResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BooksMyconfigReleaseDownloadAccessRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/books/v1/myconfig/releaseDownloadAccess";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BooksMyconfigReleaseDownloadAccessSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BooksMyconfigReleaseDownloadAccessResponse =
        new operations.BooksMyconfigReleaseDownloadAccessResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.downloadAccesses = utils.objectToClass(
              httpRes?.data,
              shared.DownloadAccesses
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Request concurrent and download access restrictions.
   */
  booksMyconfigRequestAccess(
    req: operations.BooksMyconfigRequestAccessRequest,
    security: operations.BooksMyconfigRequestAccessSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BooksMyconfigRequestAccessResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BooksMyconfigRequestAccessRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/books/v1/myconfig/requestAccess";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BooksMyconfigRequestAccessSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BooksMyconfigRequestAccessResponse =
        new operations.BooksMyconfigRequestAccessResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.requestAccessData = utils.objectToClass(
              httpRes?.data,
              shared.RequestAccessData
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Request downloaded content access for specified volumes on the My eBooks shelf.
   */
  booksMyconfigSyncVolumeLicenses(
    req: operations.BooksMyconfigSyncVolumeLicensesRequest,
    security: operations.BooksMyconfigSyncVolumeLicensesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BooksMyconfigSyncVolumeLicensesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BooksMyconfigSyncVolumeLicensesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/books/v1/myconfig/syncVolumeLicenses";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BooksMyconfigSyncVolumeLicensesSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BooksMyconfigSyncVolumeLicensesResponse =
        new operations.BooksMyconfigSyncVolumeLicensesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.volumes = utils.objectToClass(httpRes?.data, shared.Volumes);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Sets the settings for the user. If a sub-object is specified, it will overwrite the existing sub-object stored in the server. Unspecified sub-objects will retain the existing value.
   */
  booksMyconfigUpdateUserSettings(
    req: operations.BooksMyconfigUpdateUserSettingsRequest,
    security: operations.BooksMyconfigUpdateUserSettingsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BooksMyconfigUpdateUserSettingsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BooksMyconfigUpdateUserSettingsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/books/v1/myconfig/updateUserSettings";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "usersettings",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BooksMyconfigUpdateUserSettingsSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BooksMyconfigUpdateUserSettingsResponse =
        new operations.BooksMyconfigUpdateUserSettingsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.usersettings = utils.objectToClass(
              httpRes?.data,
              shared.Usersettings
            );
          }
          break;
      }

      return res;
    });
  }
}
