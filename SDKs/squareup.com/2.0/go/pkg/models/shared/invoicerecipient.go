// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// InvoiceRecipient - Provides customer data that Square uses to deliver an invoice.
type InvoiceRecipient struct {
	// Represents a postal address in a country. The address format is based
	// on an [open-source library from Google](https://github.com/google/libaddressinput). For more information,
	// see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata).
	// This format has dedicated fields for four address components: postal code,
	// locality (city), administrative district (state, prefecture, or province), and
	// sublocality (town or village). These components have dedicated fields in the
	// `Address` object because software sometimes behaves differently based on them.
	// For example, sales tax software may charge different amounts of sales tax
	// based on the postal code, and some software is only available in
	// certain states due to compliance reasons.
	//
	// For the remaining address components, the `Address` type provides the
	// `address_line_1` and `address_line_2` fields for free-form data entry.
	// These fields are free-form because the remaining address components have
	// too many variations around the world and typical software does not parse
	// these components. These fields enable users to enter anything they want.
	//
	// Note that, in the current implementation, all other `Address` type fields are blank.
	// These include `address_line_3`, `sublocality_2`, `sublocality_3`,
	// `administrative_district_level_2`, `administrative_district_level_3`,
	// `first_name`, `last_name`, and `organization`.
	//
	// When it comes to localization, the seller's language preferences
	// (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences))
	// are ignored for addresses. Even though Square products (such as Square Point of Sale
	// and the Seller Dashboard) mostly use a seller's language preference in
	// communication, when it comes to addresses, they will use English for a US address,
	// Japanese for an address in Japan, and so on.
	Address *Address `json:"address,omitempty"`
	// The name of the recipient's company.
	CompanyName *string `json:"company_name,omitempty"`
	// The ID of the customer. This is the customer profile ID that
	// you provide when creating a draft invoice.
	CustomerID *string `json:"customer_id,omitempty"`
	// The recipient's email address.
	EmailAddress *string `json:"email_address,omitempty"`
	// The recipient's family (that is, last) name.
	FamilyName *string `json:"family_name,omitempty"`
	// The recipient's given (that is, first) name.
	GivenName *string `json:"given_name,omitempty"`
	// The recipient's phone number.
	PhoneNumber *string `json:"phone_number,omitempty"`
}
