/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

/**
 * ProxyCreatePayment - Container for custom fields of a Payment object.
 * 
 */
public class ProxyCreatePayment {
    /**
     * The unique account ID for the customer that the payment is for.
     * 
     */
    @JsonProperty("AccountId")
    public String accountId;
    public ProxyCreatePayment withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     * The accounting code for the payment. Accounting codes group transactions that contain similar accounting attributes.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AccountingCode")
    public String accountingCode;
    public ProxyCreatePayment withAccountingCode(String accountingCode) {
        this.accountingCode = accountingCode;
        return this;
    }
    
    /**
     * The amount of the payment.
     * 
     * If Invoice Settlement is enabled, this field is required.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Amount")
    public Double amount;
    public ProxyCreatePayment withAmount(Double amount) {
        this.amount = amount;
        return this;
    }
    
    /**
     * If you have the Invoice Settlement feature disabled, the value of this field is the amount of the payment to apply to a credit balance. This field is only required if the `AppliedInvoiceAmount` field value is null.
     * 
     * If you have the Invoice Settlement feature enabled, the value of this field is created as the unapplied amount.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AppliedCreditBalanceAmount")
    public Double appliedCreditBalanceAmount;
    public ProxyCreatePayment withAppliedCreditBalanceAmount(Double appliedCreditBalanceAmount) {
        this.appliedCreditBalanceAmount = appliedCreditBalanceAmount;
        return this;
    }
    
    /**
     * The amount of the payment to apply to an invoice. This field is only required if either the `InvoiceId` or `InvoiceNumber` field is not null.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AppliedInvoiceAmount")
    public Double appliedInvoiceAmount;
    public ProxyCreatePayment withAppliedInvoiceAmount(Double appliedInvoiceAmount) {
        this.appliedInvoiceAmount = appliedInvoiceAmount;
        return this;
    }
    
    /**
     * The authorization transaction ID from the payment gateway. Use this field for electronic payments, such as credit cards.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AuthTransactionId")
    public String authTransactionId;
    public ProxyCreatePayment withAuthTransactionId(String authTransactionId) {
        this.authTransactionId = authTransactionId;
        return this;
    }
    
    /**
     * Additional information related to the payment.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Comment")
    public String comment;
    public ProxyCreatePayment withComment(String comment) {
        this.comment = comment;
        return this;
    }
    
    /**
     * The date when the payment takes effect.
     * 
     */
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("EffectiveDate")
    public LocalDate effectiveDate;
    public ProxyCreatePayment withEffectiveDate(LocalDate effectiveDate) {
        this.effectiveDate = effectiveDate;
        return this;
    }
    
    /**
     * The name of the gateway instance that processes the payment. When creating a payment, the value of this field must be a valid gateway instance name, and this gateway must support the specific payment method. If no value is specified, the default gateway on the Account will be used.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Gateway")
    public String gateway;
    public ProxyCreatePayment withGateway(String gateway) {
        this.gateway = gateway;
        return this;
    }
    
    /**
     * A field used to pass gateway options. Zuora allows you to pass in special gateway-specific parameters for payments that go through the Adyen, Autorize.et, CyberSource, Merchant eSolutions, Orbital (Chase Paymentech), QValent, Vantiv, and Verifi gateways.
     * 
     * For each of these special parameters, you supply the name-value pair and Zuora passes it to the gateway. This allows you to add functionality that's supported by a specific gateway but currently not supported by Zuora.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("GatewayOptionData")
    public ProxyCreatePaymentGatewayOptionData gatewayOptionData;
    public ProxyCreatePayment withGatewayOptionData(ProxyCreatePaymentGatewayOptionData gatewayOptionData) {
        this.gatewayOptionData = gatewayOptionData;
        return this;
    }
    
    /**
     * A merchant-specified natural key value that can be passed to the electronic payment gateway when a payment is created. If not specified, the payment number will be passed in instead.
     * 
     * Gateways check duplicates on the gateway order ID to ensure that the merchant do not accidentally enter the same transaction twice. This ID can also be used to do reconciliation and tie the payment to a natural key in external systems. The source of this ID varies by merchant. Some merchants use their shopping cart order IDs, and others use something different. Merchants use this ID to track transactions in their eCommerce systems.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("GatewayOrderId")
    public String gatewayOrderId;
    public ProxyCreatePayment withGatewayOrderId(String gatewayOrderId) {
        this.gatewayOrderId = gatewayOrderId;
        return this;
    }
    
    /**
     * The message returned from the payment gateway for the payment. This message is gateway-dependent.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("GatewayResponse")
    public String gatewayResponse;
    public ProxyCreatePayment withGatewayResponse(String gatewayResponse) {
        this.gatewayResponse = gatewayResponse;
        return this;
    }
    
    /**
     * The code returned from the payment gateway for the payment. This code is gateway-dependent.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("GatewayResponseCode")
    public String gatewayResponseCode;
    public ProxyCreatePayment withGatewayResponseCode(String gatewayResponseCode) {
        this.gatewayResponseCode = gatewayResponseCode;
        return this;
    }
    
    /**
     * The status of the payment in the gateway; use for reconciliation.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("GatewayState")
    public ProxyCreatePaymentGatewayStateEnum gatewayState;
    public ProxyCreatePayment withGatewayState(ProxyCreatePaymentGatewayStateEnum gatewayState) {
        this.gatewayState = gatewayState;
        return this;
    }
    
    /**
     * ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IntegrationId__NS")
    public String integrationIdNS;
    public ProxyCreatePayment withIntegrationIdNS(String integrationIdNS) {
        this.integrationIdNS = integrationIdNS;
        return this;
    }
    
    /**
     * Status of the payment's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IntegrationStatus__NS")
    public String integrationStatusNS;
    public ProxyCreatePayment withIntegrationStatusNS(String integrationStatusNS) {
        this.integrationStatusNS = integrationStatusNS;
        return this;
    }
    
    /**
     * The ID of the invoice that the payment is applied to. When applying a payment to a single invoice, this field is only required if the `InvoiceNumber` field is null.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("InvoiceId")
    public String invoiceId;
    public ProxyCreatePayment withInvoiceId(String invoiceId) {
        this.invoiceId = invoiceId;
        return this;
    }
    
    /**
     * The unique identification number for the invoice that the payment is applied to. When applying a payment to a single invoice, this field is only required if the `InvoiceId` field is null.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("InvoiceNumber")
    public String invoiceNumber;
    public ProxyCreatePayment withInvoiceNumber(String invoiceNumber) {
        this.invoiceNumber = invoiceNumber;
        return this;
    }
    
    /**
     * Container for the invoice payment data. This field is only required if you apply a payment to multiple invoices.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("InvoicePaymentData")
    public ProxyCreatePaymentInvoicePaymentData invoicePaymentData;
    public ProxyCreatePayment withInvoicePaymentData(ProxyCreatePaymentInvoicePaymentData invoicePaymentData) {
        this.invoicePaymentData = invoicePaymentData;
        return this;
    }
    
    /**
     * Origin of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Origin__NS")
    public String originNS;
    public ProxyCreatePayment withOriginNS(String originNS) {
        this.originNS = originNS;
        return this;
    }
    
    /**
     * The ID of the payment method used for the payment. 
     * 
     */
    @JsonProperty("PaymentMethodId")
    public String paymentMethodId;
    public ProxyCreatePayment withPaymentMethodId(String paymentMethodId) {
        this.paymentMethodId = paymentMethodId;
        return this;
    }
    
    /**
     * The unique identification number of the payment. For example, P-00000028.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PaymentNumber")
    public String paymentNumber;
    public ProxyCreatePayment withPaymentNumber(String paymentNumber) {
        this.paymentNumber = paymentNumber;
        return this;
    }
    
    /**
     * The transaction ID returned by the payment gateway. Use this field to reconcile payments between your gateway and Zuora Payments.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ReferenceId")
    public String referenceId;
    public ProxyCreatePayment withReferenceId(String referenceId) {
        this.referenceId = referenceId;
        return this;
    }
    
    /**
     * A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi. 
     * 
     * Zuora passes this field to Verifi directly without verification. In general, this field will be defaulted by the gateway. For Orbital, this field contains two fields separated by an asterisk, `SDMerchantName` and `SDProductionInfo`. For more information, contact your payment gateway.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SoftDescriptor")
    public String softDescriptor;
    public ProxyCreatePayment withSoftDescriptor(String softDescriptor) {
        this.softDescriptor = softDescriptor;
        return this;
    }
    
    /**
     * A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.
     * 
     * Verifi and Orbital determine how to format this string. For more information, contact your payment gateway.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SoftDescriptorPhone")
    public String softDescriptorPhone;
    public ProxyCreatePayment withSoftDescriptorPhone(String softDescriptorPhone) {
        this.softDescriptorPhone = softDescriptorPhone;
        return this;
    }
    
    /**
     * The status of the payment in Zuora. The value depends on the type of payments.
     * 
     * - If you have the Invoice Settlement feature disabled, for electronic payments, the status can be `Processed`, `Processing`, `Error`, or `Voided`. For external payments, the status can be `Processed` or `Canceled`.
     * - If you have the Invoice Settlement feature enabled, for electronic payments, the status can be `Processed`, `Processing`, `Error`, or `Canceled`. For external payments, the status can be `Processed` or `Canceled`.
     * 
     */
    @JsonProperty("Status")
    public ProxyCreatePaymentStatusEnum status;
    public ProxyCreatePayment withStatus(ProxyCreatePaymentStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * Date when the payment was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SyncDate__NS")
    public String syncDateNS;
    public ProxyCreatePayment withSyncDateNS(String syncDateNS) {
        this.syncDateNS = syncDateNS;
        return this;
    }
    
    /**
     * Related transaction in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Transaction__NS")
    public String transactionNS;
    public ProxyCreatePayment withTransactionNS(String transactionNS) {
        this.transactionNS = transactionNS;
        return this;
    }
    
    /**
     * The type of the payment, whether the payment is external or electronic.
     * 
     */
    @JsonProperty("Type")
    public ProxyCreatePaymentTypeEnum type;
    public ProxyCreatePayment withType(ProxyCreatePaymentTypeEnum type) {
        this.type = type;
        return this;
    }
    
}
