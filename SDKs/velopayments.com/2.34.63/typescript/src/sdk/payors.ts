/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * A Payor is the entity which is sending money. Here you will find the available APIs for working with Payors.
 */
export class Payors {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get Payor
   *
   * @remarks
   * <p>Get a Single Payor by Id.</p>
   * <p>deprecated since v2.10 - Use /v2/payors
   *
   */
  getPayorByIdV1(
    req: operations.GetPayorByIdV1Request,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPayorByIdV1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPayorByIdV1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/payors/{payorId}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPayorByIdV1Response =
        new operations.GetPayorByIdV1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.payorV1 = utils.objectToClass(httpRes?.data, shared.PayorV1);
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse403 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse403
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Payor
   *
   * @remarks
   * Get a Single Payor by Id.
   *
   */
  getPayorByIdV2(
    req: operations.GetPayorByIdV2Request,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPayorByIdV2Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPayorByIdV2Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2/payors/{payorId}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPayorByIdV2Response =
        new operations.GetPayorByIdV2Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.payorV2 = utils.objectToClass(httpRes?.data, shared.PayorV2);
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse400 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse400
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse403 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse403
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Add Logo
   *
   * @remarks
   * <p>Add Payor Logo</p>
   * <p>Logo file is used in your branding and emails sent to payees</p>
   *
   */
  payorAddPayorLogoV1(
    req: operations.PayorAddPayorLogoV1Request,
    config?: AxiosRequestConfig
  ): Promise<operations.PayorAddPayorLogoV1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PayorAddPayorLogoV1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/payors/{payorId}/branding/logos",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "payorLogoRequest",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PayorAddPayorLogoV1Response =
        new operations.PayorAddPayorLogoV1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse400 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse400
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse403 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse403
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse404 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse404
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create API Key
   *
   * @remarks
   * <p>Create an an API key for the given payor Id and application Id</p>
   * <p>You can create multiple API Keys for a given application</p>
   * <p>API Keys are programmatic users for integrating your application with the Velo platform</p>
   *
   */
  payorCreateApiKeyV1(
    req: operations.PayorCreateApiKeyV1Request,
    config?: AxiosRequestConfig
  ): Promise<operations.PayorCreateApiKeyV1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PayorCreateApiKeyV1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/payors/{payorId}/applications/{applicationId}/keys",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "payorCreateApiKeyRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PayorCreateApiKeyV1Response =
        new operations.PayorCreateApiKeyV1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.payorCreateApiKeyResponse = utils.objectToClass(
              httpRes?.data,
              shared.PayorCreateApiKeyResponse
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse400 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse400
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse403 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse403
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse404 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse404
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create Application
   *
   * @remarks
   * <p>Create an application for the given Payor ID.</p>
   * <p>Applications provide a means to group your API Keys</p>
   * <p>For example you might have an SAP application that you wish to integrate with Velo</p>
   * <p>You can create an application and then create one or more API keys for the application</p>
   *
   */
  payorCreateApplicationV1(
    req: operations.PayorCreateApplicationV1Request,
    config?: AxiosRequestConfig
  ): Promise<operations.PayorCreateApplicationV1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PayorCreateApplicationV1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/payors/{payorId}/applications",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "payorCreateApplicationRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PayorCreateApplicationV1Response =
        new operations.PayorCreateApplicationV1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 201:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse400 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse400
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse403 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse403
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse404 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse404
            );
          }
          break;
        case httpRes?.status == 409:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse409 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse409
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Reminder Email Opt-Out
   *
   * @remarks
   * Update the emailRemindersOptOut field for a Payor. This API can be used to opt out
   * or opt into Payor Reminder emails. These emails are typically around payee events
   * such as payees registering and onboarding.
   *
   */
  payorEmailOptOut(
    req: operations.PayorEmailOptOutRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PayorEmailOptOutResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PayorEmailOptOutRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/payors/{payorId}/reminderEmailsUpdate",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "payorEmailOptOutRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PayorEmailOptOutResponse =
        new operations.PayorEmailOptOutResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 202:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse400 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse400
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse403 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse403
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Branding
   *
   * @remarks
   * Get the payor branding details.
   */
  payorGetBranding(
    req: operations.PayorGetBrandingRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PayorGetBrandingResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PayorGetBrandingRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/payors/{payorId}/branding",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PayorGetBrandingResponse =
        new operations.PayorGetBrandingResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.payorBrandingResponse = utils.objectToClass(
              httpRes?.data,
              shared.PayorBrandingResponse
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse400 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse400
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse403 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse403
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
