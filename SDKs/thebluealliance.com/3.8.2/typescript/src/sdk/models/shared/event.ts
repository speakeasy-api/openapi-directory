/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { DistrictList } from "./districtlist";
import { Webcast } from "./webcast";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Successful response
 */
export class Event extends SpeakeasyBase {
  /**
   * Address of the event's venue, if available.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address" })
  address?: string;

  /**
   * City, town, village, etc. the event is located in.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "city" })
  city?: string;

  /**
   * Country the event is located in.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "country" })
  country?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "district" })
  @Type(() => DistrictList)
  district?: DistrictList;

  /**
   * An array of event keys for the divisions at this event.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "division_keys" })
  divisionKeys?: string[];

  /**
   * Event end date in `yyyy-mm-dd` format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "end_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endDate: Date;

  /**
   * Event short code, as provided by FIRST.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "event_code" })
  eventCode: string;

  /**
   * Event Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/event_type.py#L2
   */
  @SpeakeasyMetadata()
  @Expose({ name: "event_type" })
  eventType: number;

  /**
   * Event Type, eg Regional, District, or Offseason.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "event_type_string" })
  eventTypeString: string;

  /**
   * Public facing event code used by FIRST (on frc-events.firstinspires.org, for example)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "first_event_code" })
  firstEventCode?: string;

  /**
   * The FIRST internal Event ID, used to link to the event on the FRC webpage.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "first_event_id" })
  firstEventId?: string;

  /**
   * Google Maps Place ID for the event address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gmaps_place_id" })
  gmapsPlaceId?: string;

  /**
   * Link to address location on Google Maps.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gmaps_url" })
  gmapsUrl?: string;

  /**
   * TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "key" })
  key: string;

  /**
   * Latitude for the event address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lat" })
  lat?: number;

  /**
   * Longitude for the event address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lng" })
  lng?: number;

  /**
   * Name of the location at the address for the event, eg. Blue Alliance High School.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "location_name" })
  locationName?: string;

  /**
   * Official name of event on record either provided by FIRST or organizers of offseason event.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * The TBA Event key that represents the event's parent. Used to link back to the event from a division event. It is also the inverse relation of `divison_keys`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "parent_event_key" })
  parentEventKey?: string;

  /**
   * Playoff Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/playoff_type.py#L4, or null.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "playoff_type" })
  playoffType?: number;

  /**
   * String representation of the `playoff_type`, or null.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "playoff_type_string" })
  playoffTypeString?: string;

  /**
   * Postal code from the event address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "postal_code" })
  postalCode?: string;

  /**
   * Same as `name` but doesn't include event specifiers, such as 'Regional' or 'District'. May be null.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "short_name" })
  shortName?: string;

  /**
   * Event start date in `yyyy-mm-dd` format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "start_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startDate: Date;

  /**
   * State or Province the event is located in.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state_prov" })
  stateProv?: string;

  /**
   * Timezone name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timezone" })
  timezone?: string;

  @SpeakeasyMetadata({ elemType: Webcast })
  @Expose({ name: "webcasts" })
  @Type(() => Webcast)
  webcasts?: Webcast[];

  /**
   * The event's website, if any.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "website" })
  website?: string;

  /**
   * Week of the event relative to the first official season event, zero-indexed. Only valid for Regionals, Districts, and District Championships. Null otherwise. (Eg. A season with a week 0 'preseason' event does not count, and week 1 events will show 0 here. Seasons with a week 0.5 regional event will show week 0 for those event(s) and week 1 for week 1 events and so on.)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "week" })
  week?: number;

  /**
   * Year the event data is for.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "year" })
  year: number;
}
