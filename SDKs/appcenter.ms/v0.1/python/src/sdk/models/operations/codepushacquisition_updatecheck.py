"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class CodePushAcquisitionUpdateCheckRequest:
    
    app_version: str = dataclasses.field(metadata={'query_param': { 'field_name': 'app_version', 'style': 'form', 'explode': True }})  
    deployment_key: str = dataclasses.field(metadata={'query_param': { 'field_name': 'deployment_key', 'style': 'form', 'explode': True }})  
    client_unique_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'client_unique_id', 'style': 'form', 'explode': True }})  
    is_companion: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'is_companion', 'style': 'form', 'explode': True }})  
    label: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'label', 'style': 'form', 'explode': True }})  
    package_hash: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'package_hash', 'style': 'form', 'explode': True }})  
    previous_deployment_key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'previous_deployment_key', 'style': 'form', 'explode': True }})  
    previous_label_or_app_version: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'previous_label_or_app_version', 'style': 'form', 'explode': True }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CodePushAcquisitionUpdateCheckDefaultApplicationJSON:
    r"""Error"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CodePushAcquisitionUpdateCheck200ApplicationJSONUpdateInfo:
    
    is_available: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_available') }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    download_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('download_url'), 'exclude': lambda f: f is None }})  
    is_disabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_disabled'), 'exclude': lambda f: f is None }})  
    is_mandatory: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_mandatory'), 'exclude': lambda f: f is None }})  
    label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label'), 'exclude': lambda f: f is None }})  
    package_hash: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('package_hash'), 'exclude': lambda f: f is None }})  
    package_size: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('package_size'), 'exclude': lambda f: f is None }})  
    rollout: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rollout'), 'exclude': lambda f: f is None }})  
    should_run_binary_version: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('should_run_binary_version'), 'exclude': lambda f: f is None }})  
    target_binary_range: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('target_binary_range'), 'exclude': lambda f: f is None }})  
    update_app_version: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('update_app_version'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CodePushAcquisitionUpdateCheck200ApplicationJSON:
    r"""Success"""
    
    update_info: CodePushAcquisitionUpdateCheck200ApplicationJSONUpdateInfo = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('update_info') }})  
    

@dataclasses.dataclass
class CodePushAcquisitionUpdateCheckResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    code_push_acquisition_update_check_200_application_json_object: Optional[CodePushAcquisitionUpdateCheck200ApplicationJSON] = dataclasses.field(default=None)
    r"""Success"""  
    code_push_acquisition_update_check_default_application_json_object: Optional[CodePushAcquisitionUpdateCheckDefaultApplicationJSON] = dataclasses.field(default=None)
    r"""Error"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    