/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * PaymentInitiationCancelResponse202 - Body of the response for a successful cancel payment request.
 */
public class PaymentInitiationCancelResponse202 {
    /**
     * A list of hyperlinks to be recognised by the TPP. The actual hyperlinks used in the response depend on the
     * dynamical decisions of the ASPSP when processing the request.
     * 
     * Remark: All links can be relative or full links, to be decided by the ASPSP.
     * 
     * Type of links admitted in this response, (further links might be added for ASPSP defined extensions):
     * 
     *   * 'startAuthorisation':
     *     In case, where just the authorisation process of the cancellation needs to be started,
     *     but no additional data needs to be updated for time being (no authentication method to be selected,
     *     no PSU identification nor PSU authentication data to be uploaded).
     *   * 'startAuthorisationWithPsuIdentification': 
     *     In case where a PSU identification needs to be updated when starting the cancellation authorisation:
     *     The link to the cancellation-authorisations end-point, where the cancellation sub-resource has to be 
     *     generated while uploading the PSU identification data.
     *   * 'startAuthorisationWithPsuAuthentication':
     *     In case of a yet to be created authorisation sub-resource: The link to the cancalation authorisation end-point,
     *     where the authorisation sub-resource has to be generated while uploading the PSU authentication data.
     *   * 'startAuthorisationWithEncryptedPsuAuthentication':
     *     Same as startAuthorisactionWithPsuAuthentication where the authentication data need to be encrypted on
     *     application layer in uploading.
     *   * 'startAuthorisationWithAuthenticationMethodSelection':
     *     The link to the authorisation end-point, where the cancellation-authorisation sub-resource has to be
     *     generated while selecting the authentication method. This link is contained under exactly the same
     *     conditions as the data element 'scaMethods'
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    public java.util.Map<String, HrefType> links;

    public PaymentInitiationCancelResponse202 withLinks(java.util.Map<String, HrefType> links) {
        this.links = links;
        return this;
    }
    
    /**
     * It is contained in addition to the data element 'chosenScaMethod' if challenge data is needed for SCA.
     * In rare cases this attribute is also used in the context of the 'startAuthorisationWithPsuAuthentication' link.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("challengeData")
    public ChallengeData challengeData;

    public PaymentInitiationCancelResponse202 withChallengeData(ChallengeData challengeData) {
        this.challengeData = challengeData;
        return this;
    }
    
    /**
     * Authentication object.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chosenScaMethod")
    public ChosenScaMethod chosenScaMethod;

    public PaymentInitiationCancelResponse202 withChosenScaMethod(ChosenScaMethod chosenScaMethod) {
        this.chosenScaMethod = chosenScaMethod;
        return this;
    }
    
    /**
     * This data element might be contained, if SCA is required and if the PSU has a choice between different
     * authentication methods.
     * 
     * Depending on the risk management of the ASPSP this choice might be offered before or after the PSU
     * has been identified with the first relevant factor, or if an access token is transported.
     * 
     * If this data element is contained, then there is also a hyperlink of type 'startAuthorisationWithAuthenticationMethodSelection'
     * contained in the response body.
     * 
     * These methods shall be presented towards the PSU for selection by the TPP.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scaMethods")
    public AuthenticationObject[] scaMethods;

    public PaymentInitiationCancelResponse202 withScaMethods(AuthenticationObject[] scaMethods) {
        this.scaMethods = scaMethods;
        return this;
    }
    
    /**
     * The transaction status is filled with codes of the ISO 20022 data table:
     * - 'ACCC': 'AcceptedSettlementCompleted' -
     *   Settlement on the creditor's account has been completed.
     * - 'ACCP': 'AcceptedCustomerProfile' -
     *   Preceding check of technical validation was successful.
     *   Customer profile check was also successful.
     * - 'ACSC': 'AcceptedSettlementCompleted' -
     *   Settlement on the debtoro?=s account has been completed.
     * 
     *   **Usage:** this can be used by the first agent to report to the debtor that the transaction has been completed.
     * 
     *   **Warning:** this status is provided for transaction status reasons, not for financial information.
     *   It can only be used after bilateral agreement.
     * - 'ACSP': 'AcceptedSettlementInProcess' -
     *   All preceding checks such as technical validation and customer profile were successful and therefore the payment initiation has been accepted for execution.
     * - 'ACTC': 'AcceptedTechnicalValidation' -
     *   Authentication and syntactical and semantical validation are successful.
     * - 'ACWC': 'AcceptedWithChange' -
     *   Instruction is accepted but a change will be made, such as date or remittance not sent.
     * - 'ACWP': 'AcceptedWithoutPosting' -
     *   Payment instruction included in the credit transfer is accepted without being posted to the creditor customero?=s account.
     * - 'RCVD': 'Received' -
     *   Payment initiation has been received by the receiving agent.
     * - 'PDNG': 'Pending' -
     *   Payment initiation or individual transaction included in the payment initiation is pending.
     *   Further checks and status update will be performed.
     * - 'RJCT': 'Rejected' -
     *   Payment initiation or individual transaction included in the payment initiation has been rejected.
     * - 'CANC': 'Cancelled'
     *   Payment initiation has been cancelled before execution
     *   Remark: This codeis accepted as new code by ISO20022.
     * - 'ACFC': 'AcceptedFundsChecked' -
     *   Preceding check of technical validation and customer profile was successful and an automatic funds check was positive .
     *   Remark: This code is accepted as new code by ISO20022.
     * - 'PATC': 'PartiallyAcceptedTechnical'
     *   Correct The payment initiation needs multiple authentications, where some but not yet all have been performed. Syntactical and semantical validations are successful.
     *   Remark: This code is accepted as new code by ISO20022.
     * - 'PART': 'PartiallyAccepted' -
     *   A number of transactions have been accepted, whereas another number of transactions have not yet achieved 'accepted' status.
     *   Remark: This code may be used only in case of bulk payments. It is only used in a situation where all mandated authorisations have been applied, but some payments have been rejected.
     * 
     */
    @JsonProperty("transactionStatus")
    public TransactionStatusEnum transactionStatus;

    public PaymentInitiationCancelResponse202 withTransactionStatus(TransactionStatusEnum transactionStatus) {
        this.transactionStatus = transactionStatus;
        return this;
    }
    
    public PaymentInitiationCancelResponse202(@JsonProperty("transactionStatus") TransactionStatusEnum transactionStatus) {
        this.transactionStatus = transactionStatus;
  }
}
