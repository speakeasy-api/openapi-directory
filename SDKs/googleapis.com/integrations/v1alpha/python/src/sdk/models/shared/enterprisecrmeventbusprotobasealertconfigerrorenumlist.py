"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumListFilterTypeEnum(str, Enum):
    DEFAULT_INCLUSIVE = 'DEFAULT_INCLUSIVE'
    EXCLUSIVE = 'EXCLUSIVE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumList:
    r"""List of error enums for alerts."""
    
    enum_strings: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enumStrings'), 'exclude': lambda f: f is None }})  
    filter_type: Optional[EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumListFilterTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filterType'), 'exclude': lambda f: f is None }})  
    