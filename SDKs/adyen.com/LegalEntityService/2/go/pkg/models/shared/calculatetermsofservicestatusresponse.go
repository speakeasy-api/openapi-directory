// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type CalculateTermsOfServiceStatusResponseTermsOfServiceTypesEnum string

const (
	CalculateTermsOfServiceStatusResponseTermsOfServiceTypesEnumAdyenAccount              CalculateTermsOfServiceStatusResponseTermsOfServiceTypesEnum = "adyenAccount"
	CalculateTermsOfServiceStatusResponseTermsOfServiceTypesEnumAdyenCapital              CalculateTermsOfServiceStatusResponseTermsOfServiceTypesEnum = "adyenCapital"
	CalculateTermsOfServiceStatusResponseTermsOfServiceTypesEnumAdyenForPlatformsAdvanced CalculateTermsOfServiceStatusResponseTermsOfServiceTypesEnum = "adyenForPlatformsAdvanced"
	CalculateTermsOfServiceStatusResponseTermsOfServiceTypesEnumAdyenForPlatformsManage   CalculateTermsOfServiceStatusResponseTermsOfServiceTypesEnum = "adyenForPlatformsManage"
	CalculateTermsOfServiceStatusResponseTermsOfServiceTypesEnumAdyenIssuing              CalculateTermsOfServiceStatusResponseTermsOfServiceTypesEnum = "adyenIssuing"
)

func (e *CalculateTermsOfServiceStatusResponseTermsOfServiceTypesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "adyenAccount":
		fallthrough
	case "adyenCapital":
		fallthrough
	case "adyenForPlatformsAdvanced":
		fallthrough
	case "adyenForPlatformsManage":
		fallthrough
	case "adyenIssuing":
		*e = CalculateTermsOfServiceStatusResponseTermsOfServiceTypesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CalculateTermsOfServiceStatusResponseTermsOfServiceTypesEnum: %s", s)
	}
}

// CalculateTermsOfServiceStatusResponse - OK - the request has succeeded.
type CalculateTermsOfServiceStatusResponse struct {
	// The type of Terms of Service that the legal entity needs to accept. If empty, no Terms of Service needs to be accepted.
	TermsOfServiceTypes []CalculateTermsOfServiceStatusResponseTermsOfServiceTypesEnum `json:"termsOfServiceTypes,omitempty"`
}
