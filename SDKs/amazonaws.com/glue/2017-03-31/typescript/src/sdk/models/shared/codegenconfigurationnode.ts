/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Aggregate } from "./aggregate";
import { ApplyMapping } from "./applymapping";
import { AthenaConnectorSource } from "./athenaconnectorsource";
import { BasicCatalogTarget } from "./basiccatalogtarget";
import { CatalogDeltaSource } from "./catalogdeltasource";
import { CatalogHudiSource } from "./cataloghudisource";
import { CatalogKafkaSource } from "./catalogkafkasource";
import { CatalogKinesisSource } from "./catalogkinesissource";
import { CatalogSource } from "./catalogsource";
import { CustomCode } from "./customcode";
import { DirectJDBCSource } from "./directjdbcsource";
import { DirectKafkaSource } from "./directkafkasource";
import { DirectKinesisSource } from "./directkinesissource";
import { DropDuplicates } from "./dropduplicates";
import { DropFields } from "./dropfields";
import { DropNullFields } from "./dropnullfields";
import { DynamicTransform } from "./dynamictransform";
import { DynamoDBCatalogSource } from "./dynamodbcatalogsource";
import { EvaluateDataQuality } from "./evaluatedataquality";
import { FillMissingValues } from "./fillmissingvalues";
import { Filter } from "./filter";
import { GovernedCatalogSource } from "./governedcatalogsource";
import { GovernedCatalogTarget } from "./governedcatalogtarget";
import { JDBCConnectorSource } from "./jdbcconnectorsource";
import { JDBCConnectorTarget } from "./jdbcconnectortarget";
import { Join } from "./join";
import { Merge } from "./merge";
import { MicrosoftSQLServerCatalogSource } from "./microsoftsqlservercatalogsource";
import { MicrosoftSQLServerCatalogTarget } from "./microsoftsqlservercatalogtarget";
import { MySQLCatalogSource } from "./mysqlcatalogsource";
import { MySQLCatalogTarget } from "./mysqlcatalogtarget";
import { OracleSQLCatalogSource } from "./oraclesqlcatalogsource";
import { OracleSQLCatalogTarget } from "./oraclesqlcatalogtarget";
import { PIIDetection } from "./piidetection";
import { PostgreSQLCatalogSource } from "./postgresqlcatalogsource";
import { PostgreSQLCatalogTarget } from "./postgresqlcatalogtarget";
import { RedshiftSource } from "./redshiftsource";
import { RedshiftTarget } from "./redshifttarget";
import { RelationalCatalogSource } from "./relationalcatalogsource";
import { RenameField } from "./renamefield";
import { S3CatalogDeltaSource } from "./s3catalogdeltasource";
import { S3CatalogHudiSource } from "./s3cataloghudisource";
import { S3CatalogSource } from "./s3catalogsource";
import { S3CatalogTarget } from "./s3catalogtarget";
import { S3CsvSource } from "./s3csvsource";
import { S3DeltaCatalogTarget } from "./s3deltacatalogtarget";
import { S3DeltaDirectTarget } from "./s3deltadirecttarget";
import { S3DeltaSource } from "./s3deltasource";
import { S3DirectTarget } from "./s3directtarget";
import { S3GlueParquetTarget } from "./s3glueparquettarget";
import { S3HudiCatalogTarget } from "./s3hudicatalogtarget";
import { S3HudiDirectTarget } from "./s3hudidirecttarget";
import { S3HudiSource } from "./s3hudisource";
import { S3JsonSource } from "./s3jsonsource";
import { S3ParquetSource } from "./s3parquetsource";
import { SelectFields } from "./selectfields";
import { SelectFromCollection } from "./selectfromcollection";
import { SparkConnectorSource } from "./sparkconnectorsource";
import { SparkConnectorTarget } from "./sparkconnectortarget";
import { SparkSQL } from "./sparksql";
import { Spigot } from "./spigot";
import { SplitFields } from "./splitfields";
import { Union } from "./union";
import { Expose, Type } from "class-transformer";

/**
 *  <code>CodeGenConfigurationNode</code> enumerates all valid Node types. One and only one of its member variables can be populated.
 */
export class CodeGenConfigurationNode extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Aggregate" })
  @Type(() => Aggregate)
  aggregate?: Aggregate;

  @SpeakeasyMetadata()
  @Expose({ name: "ApplyMapping" })
  @Type(() => ApplyMapping)
  applyMapping?: ApplyMapping;

  @SpeakeasyMetadata()
  @Expose({ name: "AthenaConnectorSource" })
  @Type(() => AthenaConnectorSource)
  athenaConnectorSource?: AthenaConnectorSource;

  @SpeakeasyMetadata()
  @Expose({ name: "CatalogDeltaSource" })
  @Type(() => CatalogDeltaSource)
  catalogDeltaSource?: CatalogDeltaSource;

  @SpeakeasyMetadata()
  @Expose({ name: "CatalogHudiSource" })
  @Type(() => CatalogHudiSource)
  catalogHudiSource?: CatalogHudiSource;

  @SpeakeasyMetadata()
  @Expose({ name: "CatalogKafkaSource" })
  @Type(() => CatalogKafkaSource)
  catalogKafkaSource?: CatalogKafkaSource;

  @SpeakeasyMetadata()
  @Expose({ name: "CatalogKinesisSource" })
  @Type(() => CatalogKinesisSource)
  catalogKinesisSource?: CatalogKinesisSource;

  @SpeakeasyMetadata()
  @Expose({ name: "CatalogSource" })
  @Type(() => CatalogSource)
  catalogSource?: CatalogSource;

  @SpeakeasyMetadata()
  @Expose({ name: "CatalogTarget" })
  @Type(() => BasicCatalogTarget)
  catalogTarget?: BasicCatalogTarget;

  @SpeakeasyMetadata()
  @Expose({ name: "CustomCode" })
  @Type(() => CustomCode)
  customCode?: CustomCode;

  /**
   * Specifies the direct JDBC source connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DirectJDBCSource" })
  @Type(() => DirectJDBCSource)
  directJDBCSource?: DirectJDBCSource;

  @SpeakeasyMetadata()
  @Expose({ name: "DirectKafkaSource" })
  @Type(() => DirectKafkaSource)
  directKafkaSource?: DirectKafkaSource;

  @SpeakeasyMetadata()
  @Expose({ name: "DirectKinesisSource" })
  @Type(() => DirectKinesisSource)
  directKinesisSource?: DirectKinesisSource;

  @SpeakeasyMetadata()
  @Expose({ name: "DropDuplicates" })
  @Type(() => DropDuplicates)
  dropDuplicates?: DropDuplicates;

  @SpeakeasyMetadata()
  @Expose({ name: "DropFields" })
  @Type(() => DropFields)
  dropFields?: DropFields;

  @SpeakeasyMetadata()
  @Expose({ name: "DropNullFields" })
  @Type(() => DropNullFields)
  dropNullFields?: DropNullFields;

  @SpeakeasyMetadata()
  @Expose({ name: "DynamicTransform" })
  @Type(() => DynamicTransform)
  dynamicTransform?: DynamicTransform;

  @SpeakeasyMetadata()
  @Expose({ name: "DynamoDBCatalogSource" })
  @Type(() => DynamoDBCatalogSource)
  dynamoDBCatalogSource?: DynamoDBCatalogSource;

  @SpeakeasyMetadata()
  @Expose({ name: "EvaluateDataQuality" })
  @Type(() => EvaluateDataQuality)
  evaluateDataQuality?: EvaluateDataQuality;

  @SpeakeasyMetadata()
  @Expose({ name: "FillMissingValues" })
  @Type(() => FillMissingValues)
  fillMissingValues?: FillMissingValues;

  @SpeakeasyMetadata()
  @Expose({ name: "Filter" })
  @Type(() => Filter)
  filter?: Filter;

  @SpeakeasyMetadata()
  @Expose({ name: "GovernedCatalogSource" })
  @Type(() => GovernedCatalogSource)
  governedCatalogSource?: GovernedCatalogSource;

  @SpeakeasyMetadata()
  @Expose({ name: "GovernedCatalogTarget" })
  @Type(() => GovernedCatalogTarget)
  governedCatalogTarget?: GovernedCatalogTarget;

  @SpeakeasyMetadata()
  @Expose({ name: "JDBCConnectorSource" })
  @Type(() => JDBCConnectorSource)
  jdbcConnectorSource?: JDBCConnectorSource;

  @SpeakeasyMetadata()
  @Expose({ name: "JDBCConnectorTarget" })
  @Type(() => JDBCConnectorTarget)
  jdbcConnectorTarget?: JDBCConnectorTarget;

  @SpeakeasyMetadata()
  @Expose({ name: "Join" })
  @Type(() => Join)
  join?: Join;

  @SpeakeasyMetadata()
  @Expose({ name: "Merge" })
  @Type(() => Merge)
  merge?: Merge;

  @SpeakeasyMetadata()
  @Expose({ name: "MicrosoftSQLServerCatalogSource" })
  @Type(() => MicrosoftSQLServerCatalogSource)
  microsoftSQLServerCatalogSource?: MicrosoftSQLServerCatalogSource;

  @SpeakeasyMetadata()
  @Expose({ name: "MicrosoftSQLServerCatalogTarget" })
  @Type(() => MicrosoftSQLServerCatalogTarget)
  microsoftSQLServerCatalogTarget?: MicrosoftSQLServerCatalogTarget;

  @SpeakeasyMetadata()
  @Expose({ name: "MySQLCatalogSource" })
  @Type(() => MySQLCatalogSource)
  mySQLCatalogSource?: MySQLCatalogSource;

  @SpeakeasyMetadata()
  @Expose({ name: "MySQLCatalogTarget" })
  @Type(() => MySQLCatalogTarget)
  mySQLCatalogTarget?: MySQLCatalogTarget;

  @SpeakeasyMetadata()
  @Expose({ name: "OracleSQLCatalogSource" })
  @Type(() => OracleSQLCatalogSource)
  oracleSQLCatalogSource?: OracleSQLCatalogSource;

  @SpeakeasyMetadata()
  @Expose({ name: "OracleSQLCatalogTarget" })
  @Type(() => OracleSQLCatalogTarget)
  oracleSQLCatalogTarget?: OracleSQLCatalogTarget;

  @SpeakeasyMetadata()
  @Expose({ name: "PIIDetection" })
  @Type(() => PIIDetection)
  piiDetection?: PIIDetection;

  @SpeakeasyMetadata()
  @Expose({ name: "PostgreSQLCatalogSource" })
  @Type(() => PostgreSQLCatalogSource)
  postgreSQLCatalogSource?: PostgreSQLCatalogSource;

  @SpeakeasyMetadata()
  @Expose({ name: "PostgreSQLCatalogTarget" })
  @Type(() => PostgreSQLCatalogTarget)
  postgreSQLCatalogTarget?: PostgreSQLCatalogTarget;

  @SpeakeasyMetadata()
  @Expose({ name: "RedshiftSource" })
  @Type(() => RedshiftSource)
  redshiftSource?: RedshiftSource;

  @SpeakeasyMetadata()
  @Expose({ name: "RedshiftTarget" })
  @Type(() => RedshiftTarget)
  redshiftTarget?: RedshiftTarget;

  @SpeakeasyMetadata()
  @Expose({ name: "RelationalCatalogSource" })
  @Type(() => RelationalCatalogSource)
  relationalCatalogSource?: RelationalCatalogSource;

  @SpeakeasyMetadata()
  @Expose({ name: "RenameField" })
  @Type(() => RenameField)
  renameField?: RenameField;

  @SpeakeasyMetadata()
  @Expose({ name: "S3CatalogDeltaSource" })
  @Type(() => S3CatalogDeltaSource)
  s3CatalogDeltaSource?: S3CatalogDeltaSource;

  @SpeakeasyMetadata()
  @Expose({ name: "S3CatalogHudiSource" })
  @Type(() => S3CatalogHudiSource)
  s3CatalogHudiSource?: S3CatalogHudiSource;

  @SpeakeasyMetadata()
  @Expose({ name: "S3CatalogSource" })
  @Type(() => S3CatalogSource)
  s3CatalogSource?: S3CatalogSource;

  @SpeakeasyMetadata()
  @Expose({ name: "S3CatalogTarget" })
  @Type(() => S3CatalogTarget)
  s3CatalogTarget?: S3CatalogTarget;

  @SpeakeasyMetadata()
  @Expose({ name: "S3CsvSource" })
  @Type(() => S3CsvSource)
  s3CsvSource?: S3CsvSource;

  @SpeakeasyMetadata()
  @Expose({ name: "S3DeltaCatalogTarget" })
  @Type(() => S3DeltaCatalogTarget)
  s3DeltaCatalogTarget?: S3DeltaCatalogTarget;

  @SpeakeasyMetadata()
  @Expose({ name: "S3DeltaDirectTarget" })
  @Type(() => S3DeltaDirectTarget)
  s3DeltaDirectTarget?: S3DeltaDirectTarget;

  @SpeakeasyMetadata()
  @Expose({ name: "S3DeltaSource" })
  @Type(() => S3DeltaSource)
  s3DeltaSource?: S3DeltaSource;

  @SpeakeasyMetadata()
  @Expose({ name: "S3DirectTarget" })
  @Type(() => S3DirectTarget)
  s3DirectTarget?: S3DirectTarget;

  @SpeakeasyMetadata()
  @Expose({ name: "S3GlueParquetTarget" })
  @Type(() => S3GlueParquetTarget)
  s3GlueParquetTarget?: S3GlueParquetTarget;

  @SpeakeasyMetadata()
  @Expose({ name: "S3HudiCatalogTarget" })
  @Type(() => S3HudiCatalogTarget)
  s3HudiCatalogTarget?: S3HudiCatalogTarget;

  @SpeakeasyMetadata()
  @Expose({ name: "S3HudiDirectTarget" })
  @Type(() => S3HudiDirectTarget)
  s3HudiDirectTarget?: S3HudiDirectTarget;

  @SpeakeasyMetadata()
  @Expose({ name: "S3HudiSource" })
  @Type(() => S3HudiSource)
  s3HudiSource?: S3HudiSource;

  @SpeakeasyMetadata()
  @Expose({ name: "S3JsonSource" })
  @Type(() => S3JsonSource)
  s3JsonSource?: S3JsonSource;

  @SpeakeasyMetadata()
  @Expose({ name: "S3ParquetSource" })
  @Type(() => S3ParquetSource)
  s3ParquetSource?: S3ParquetSource;

  @SpeakeasyMetadata()
  @Expose({ name: "SelectFields" })
  @Type(() => SelectFields)
  selectFields?: SelectFields;

  @SpeakeasyMetadata()
  @Expose({ name: "SelectFromCollection" })
  @Type(() => SelectFromCollection)
  selectFromCollection?: SelectFromCollection;

  @SpeakeasyMetadata()
  @Expose({ name: "SparkConnectorSource" })
  @Type(() => SparkConnectorSource)
  sparkConnectorSource?: SparkConnectorSource;

  @SpeakeasyMetadata()
  @Expose({ name: "SparkConnectorTarget" })
  @Type(() => SparkConnectorTarget)
  sparkConnectorTarget?: SparkConnectorTarget;

  @SpeakeasyMetadata()
  @Expose({ name: "SparkSQL" })
  @Type(() => SparkSQL)
  sparkSQL?: SparkSQL;

  @SpeakeasyMetadata()
  @Expose({ name: "Spigot" })
  @Type(() => Spigot)
  spigot?: Spigot;

  @SpeakeasyMetadata()
  @Expose({ name: "SplitFields" })
  @Type(() => SplitFields)
  splitFields?: SplitFields;

  @SpeakeasyMetadata()
  @Expose({ name: "Union" })
  @Type(() => Union)
  union?: Union;
}
