// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type GetGroupPathParams struct {
	// Use group name instead of id
	ID string `pathParam:"style=simple,explode=false,name=id"`
}

type GetGroupRequest struct {
	PathParams GetGroupPathParams
}

type GetGroup200ApplicationJSONExtras struct {
	VisibleGroupNames []interface{} `json:"visible_group_names"`
}

type GetGroup200ApplicationJSONGroup struct {
	AllowMembershipRequests         bool                   `json:"allow_membership_requests"`
	AllowUnknownSenderTopicReplies  bool                   `json:"allow_unknown_sender_topic_replies"`
	AssociatedGroupIds              []interface{}          `json:"associated_group_ids,omitempty"`
	Automatic                       bool                   `json:"automatic"`
	AutomaticMembershipEmailDomains string                 `json:"automatic_membership_email_domains"`
	BioCooked                       string                 `json:"bio_cooked"`
	BioExcerpt                      string                 `json:"bio_excerpt"`
	BioRaw                          string                 `json:"bio_raw"`
	CanAdminGroup                   bool                   `json:"can_admin_group"`
	CanEditGroup                    *bool                  `json:"can_edit_group,omitempty"`
	CanSeeMembers                   bool                   `json:"can_see_members"`
	DefaultNotificationLevel        int64                  `json:"default_notification_level"`
	EmailFromAlias                  *string                `json:"email_from_alias,omitempty"`
	EmailPassword                   string                 `json:"email_password"`
	EmailUsername                   string                 `json:"email_username"`
	FlairBgColor                    string                 `json:"flair_bg_color"`
	FlairColor                      string                 `json:"flair_color"`
	FlairURL                        string                 `json:"flair_url"`
	FullName                        string                 `json:"full_name"`
	GrantTrustLevel                 string                 `json:"grant_trust_level"`
	HasMessages                     bool                   `json:"has_messages"`
	ID                              int64                  `json:"id"`
	ImapEnabled                     *bool                  `json:"imap_enabled,omitempty"`
	ImapLastError                   string                 `json:"imap_last_error"`
	ImapMailboxName                 string                 `json:"imap_mailbox_name"`
	ImapMailboxes                   []interface{}          `json:"imap_mailboxes"`
	ImapNewEmails                   string                 `json:"imap_new_emails"`
	ImapOldEmails                   string                 `json:"imap_old_emails"`
	ImapPort                        string                 `json:"imap_port"`
	ImapServer                      string                 `json:"imap_server"`
	ImapSsl                         string                 `json:"imap_ssl"`
	ImapUpdatedAt                   *string                `json:"imap_updated_at,omitempty"`
	ImapUpdatedBy                   map[string]interface{} `json:"imap_updated_by,omitempty"`
	IncomingEmail                   string                 `json:"incoming_email"`
	IsGroupOwnerDisplay             bool                   `json:"is_group_owner_display"`
	IsGroupUser                     bool                   `json:"is_group_user"`
	MembersVisibilityLevel          int64                  `json:"members_visibility_level"`
	MembershipRequestTemplate       string                 `json:"membership_request_template"`
	Mentionable                     bool                   `json:"mentionable"`
	MentionableLevel                int64                  `json:"mentionable_level"`
	MessageCount                    int64                  `json:"message_count"`
	Messageable                     bool                   `json:"messageable"`
	MessageableLevel                int64                  `json:"messageable_level"`
	MutedCategoryIds                []interface{}          `json:"muted_category_ids"`
	MutedTags                       []interface{}          `json:"muted_tags,omitempty"`
	Name                            string                 `json:"name"`
	PrimaryGroup                    bool                   `json:"primary_group"`
	PublicAdmission                 bool                   `json:"public_admission"`
	PublicExit                      bool                   `json:"public_exit"`
	PublishReadState                bool                   `json:"publish_read_state"`
	RegularCategoryIds              []interface{}          `json:"regular_category_ids"`
	RegularTags                     []interface{}          `json:"regular_tags,omitempty"`
	SMTPEnabled                     *bool                  `json:"smtp_enabled,omitempty"`
	SMTPPort                        string                 `json:"smtp_port"`
	SMTPServer                      string                 `json:"smtp_server"`
	SMTPSsl                         string                 `json:"smtp_ssl"`
	SMTPUpdatedAt                   *string                `json:"smtp_updated_at,omitempty"`
	SMTPUpdatedBy                   map[string]interface{} `json:"smtp_updated_by,omitempty"`
	Title                           string                 `json:"title"`
	TrackingCategoryIds             []interface{}          `json:"tracking_category_ids"`
	TrackingTags                    []interface{}          `json:"tracking_tags,omitempty"`
	UserCount                       int64                  `json:"user_count"`
	VisibilityLevel                 int64                  `json:"visibility_level"`
	WatchingCategoryIds             []interface{}          `json:"watching_category_ids"`
	WatchingFirstPostCategoryIds    []interface{}          `json:"watching_first_post_category_ids"`
	WatchingFirstPostTags           []interface{}          `json:"watching_first_post_tags,omitempty"`
	WatchingTags                    []interface{}          `json:"watching_tags,omitempty"`
}

// GetGroup200ApplicationJSON - success response
type GetGroup200ApplicationJSON struct {
	Extras GetGroup200ApplicationJSONExtras `json:"extras"`
	Group  GetGroup200ApplicationJSONGroup  `json:"group"`
}

type GetGroupResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// success response
	GetGroup200ApplicationJSONObject *GetGroup200ApplicationJSON
}
