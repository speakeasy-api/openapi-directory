// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"net/http"
	"openapi/pkg/models/shared"
	"openapi/pkg/utils"
	"time"
)

// ServerList contains the list of servers available to the SDK
var ServerList = []string{
	"https://art19.com",
}

// HTTPClient provides an interface for suplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// SDK - The ART19 Content API conforms to the [JSON:API specification](http://jsonapi.org).
//
// API requests **MUST** use the HTTP Accept header:
//
// `Accept: application/vnd.api+json`
//
// API requests **MUST** be authenticated using the HTTP Authorization header:
//
// `Authorization: Token token="your-token", credential="your-credential"`
//
// ## General Notes
//
// Some query parameters use unencoded [ and ] characters simply for readability. Defaults, examples, and
// possible values are additionally rendered in double quotes for readability. In practice, query parameters should
// not have quotes around the values (e.g., `foo=bar` is valid, not `foo="bar"`), and both query parameter keys
// and values must be percent-encoded, per the requirements in [RFC 3986 ยง 3.4](https://tools.ietf.org/html/rfc3986#section-3.4).
//
// ## Rate Limiting
//
// In order to provide a fair distribution of available resources, all API calls are subject to rate limits.
// If you exceed the number of API calls per minute granted to your credential, a `429 Too Many Requests`
// error response will be returned.
//
// In that case, a `Retry-After` header MAY be included in the response, describing the number of seconds
// after which a request can be retried.
//
// If you run into a high number of 429 errors, please reach out to ART19 Support to adjust your rate limit.
//
// ### Example
//
// In the following example the request can be retried after waiting for 21 seconds:
//
//	HTTP/1.1 429 Too Many Requests
//	Content-Type: text/html
//	Retry-After: 21
//
// ## Pagination
//
// Requests to collection endpoints **SHOULD** provide pagination parameters.
// Some endpoints **REQUIRE** pagination parameters to be provided.
// Whenever pagination is provided, it **MUST** be valid.
// Failing to provide pagination when it is required or providing wrong or incomplete pagination
// always results in a `400 Bad Request` error response.
//
// The page numbering starts with `1` and the maximum page size (if not otherwise documented
// on an endpoint) is `100`. Pagination **MUST NOT** be specified if requesting a list of IDs (using an `ids[]` parameter).
//
// Providing invalid values for page number or page size, as well as providing only a page number or only a page size,
// is considered an error. Pagination is provided like this:
//
// `page[number]=1&page[size]=25`
//
// Responses conform to the [JSON:API specification's pagination section](https://jsonapi.org/format/#fetching-pagination)
// by including pagination links. Your requested page size will be carried into the pagination links.
//
// ## Sorting
//
// Requests to collection endpoints usually accept a `sort` parameter. Please refer to the
// [JSON:API Specification's sorting section](https://jsonapi.org/format/#fetching-sorting) for further details.
//
// ## Relationship Linking
//
// Currently, resources return all of their relationships, in no particular order, pursuant to how relationships
// should be returned [according to the JSON:API specification](https://jsonapi.org/format/#document-resource-object-relationships). Consumers of this API
// **MUST NOT** make assumptions about the order of these collections. Even though this data is not currently paginated, consumers **MUST** support
// paginating relationships per the JSON:API specification if this data is important for their application.
type SDK struct {
	Classification          *classification
	ClassificationInclusion *classificationInclusion
	Credit                  *credit
	Episode                 *episode
	Image                   *image
	MediaAsset              *mediaAsset
	Network                 *network
	Person                  *person
	Season                  *season
	Series                  *series

	// Non-idiomatic field names below are to namespace fields from the fields names above to avoid name conflicts
	_defaultClient  HTTPClient
	_securityClient HTTPClient
	_security       *shared.Security
	_serverURL      string
	_language       string
	_sdkVersion     string
	_genVersion     string
}

type SDKOption func(*SDK)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *SDK) {
		sdk._serverURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *SDK) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk._serverURL = serverURL
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *SDK) {
		sdk._defaultClient = client
	}
}

// WithSecurity configures the SDK to use the provided security details
func WithSecurity(security shared.Security) SDKOption {
	return func(sdk *SDK) {
		sdk._security = &security
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *SDK {
	sdk := &SDK{
		_language:   "go",
		_sdkVersion: "0.0.1",
		_genVersion: "internal",
	}
	for _, opt := range opts {
		opt(sdk)
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk._defaultClient == nil {
		sdk._defaultClient = &http.Client{Timeout: 60 * time.Second}
	}
	if sdk._securityClient == nil {
		if sdk._security != nil {
			sdk._securityClient = utils.ConfigureSecurityClient(sdk._defaultClient, sdk._security)
		} else {
			sdk._securityClient = sdk._defaultClient
		}
	}

	if sdk._serverURL == "" {
		sdk._serverURL = ServerList[0]
	}

	sdk.Classification = newClassification(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.ClassificationInclusion = newClassificationInclusion(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Credit = newCredit(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Episode = newEpisode(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Image = newImage(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.MediaAsset = newMediaAsset(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Network = newNetwork(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Person = newPerson(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Season = newSeason(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Series = newSeries(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	return sdk
}
