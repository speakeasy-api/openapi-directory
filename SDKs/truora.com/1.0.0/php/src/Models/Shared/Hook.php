<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Hook - Represents a hook configuration
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Hook
{
    /**
     * Actions you want to be notified. Possible inputs are created, started, and finished or any combination of those three
     * 
     * @var ?array<string> $actions
     */
	#[\JMS\Serializer\Annotation\SerializedName('actions')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $actions = null;
    
    /**
     * Entity events you want to be notified. If all is selected, there is no need to enter actions
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\HookEventTypeEnum $eventType
     */
	#[\JMS\Serializer\Annotation\SerializedName('event_type')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\HookEventTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?HookEventTypeEnum $eventType = null;
    
    /**
     * Secret random hexadecimal key used to sign the event and confirm its legitimacy. Signing keys are used to decode the JWT you get as payload from events
     * 
     * @var ?string $signingKey
     */
	#[\JMS\Serializer\Annotation\SerializedName('signing_key')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $signingKey = null;
    
    /**
     * indicates whether the hook is active or not. enabled by default
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\HookStatusEnum $status
     */
	#[\JMS\Serializer\Annotation\SerializedName('status')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\HookStatusEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?HookStatusEnum $status = null;
    
    /**
     * Platform with an endpoint ready to process the information. Only web is supported currently
     * 
     * @var ?string $subscriberType
     */
	#[\JMS\Serializer\Annotation\SerializedName('subscriber_type')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $subscriberType = null;
    
    /**
     * Link where notification requests will be sent, required when subscriber_type is web
     * 
     * @var ?string $subscriberUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('subscriber_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $subscriberUrl = null;
    
	public function __construct()
	{
		$this->actions = null;
		$this->eventType = null;
		$this->signingKey = null;
		$this->status = null;
		$this->subscriberType = null;
		$this->subscriberUrl = null;
	}
}
