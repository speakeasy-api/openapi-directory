<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Resources 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create a folder
     * 
     * Create a new empty folder at the specified path. New files can be uploaded via the [/resources/upload](#operation/uploadFile) endpoint.
     * 
     * **Notes:**
     * - Authenticated user should have modify permission.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddFolderRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AddFolderResponse
     */
	public function addFolder(
        \OpenAPI\OpenAPI\Models\Operations\AddFolderRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AddFolderResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/resources');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddFolderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResourceResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Compress resources
     * 
     * Create a zip archive containing the files from given set of paths. Note that this can be a very slow operation if you have indicated many files should be included in the archive.
     * 
     * **Notes:**
     * - Authenticated user should have modify permission.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CompressFilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CompressFilesResponse
     */
	public function compressFiles(
        \OpenAPI\OpenAPI\Models\Operations\CompressFilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CompressFilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/resources/compress');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CompressFilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResourceResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Copy resources
     * 
     * Copies a set of exisiting files/folders (provided by an array `resources`) to the requested `parentResource` in your account.
     * In the `resources` array, you may specify paths pointing files/folders throughout the account, but everything will be copied to the 
     * root of the `parentResource`.
     * 
     * **Notes:**
     * - Authenticated user should have modify permission.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CopyResourcesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CopyResourcesResponse
     */
	public function copyResources(
        \OpenAPI\OpenAPI\Models\Operations\CopyResourcesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CopyResourcesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/resources/copy');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CopyResourcesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceCopyMove = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResourceCopyMove', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 207) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceMultiResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResourceMultiResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a Resource
     * 
     * Delete a single file or folder resource. Deleting a folder will also delete all of the contents.
     * 
     * **Notes:**
     * - Authenticated user should have [delete permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions).
     * - There is no way to un-delete a deleted resource.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteResourceByIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteResourceByIdResponse
     */
	public function deleteResourceById(
        \OpenAPI\OpenAPI\Models\Operations\DeleteResourceByIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteResourceByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/resources/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteResourceByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteResourceByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->emptyResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EmptyResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete Resources
     * 
     * Delete multiple file or folder resourcess. Deleting a folder resource will also delete any resources in that folder.
     * 
     * **Notes:**
     * - Authenticated user should have [delete permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions).
     * - It is not possible to un-delete a deleted resource.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteResourcesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteResourcesResponse
     */
	public function deleteResources(
        \OpenAPI\OpenAPI\Models\Operations\DeleteResourcesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteResourcesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/resources');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteResourcesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->emptyResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EmptyResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 207) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceMultiResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResourceMultiResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Download a file
     * 
     * Downloads a file from the server. Whenever more than one file is being downloaded, the file are first zipped into  a single file before the download starts, and the resulting zip file is named to match the `downloadArchiveName` parameter.
     * 
     * **NOTE**: Downloading many files at once  may result in a long delay before the API will return a response. You may need to override default timeout values in your API client, or download files individually.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DownloadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DownloadResponse
     */
	public function download(
        \OpenAPI\OpenAPI\Models\Operations\DownloadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DownloadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/resources/download');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DownloadRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DownloadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/octet-stream')) {
                $response->download200ApplicationOctetStreamBinaryString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/zip')) {
                $response->download200ApplicationZipBinaryString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Extract resources
     * 
     * Extract the contents of a zip archive to a specified directory. Note that this can be a very slow operation.
     * 
     * **Notes:**
     * - You must have  [modify permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) to do this.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ExtractFilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ExtractFilesResponse
     */
	public function extractFiles(
        \OpenAPI\OpenAPI\Models\Operations\ExtractFilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ExtractFilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/resources/extract');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExtractFilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceCollectionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResourceCollectionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Preview a file
     * 
     * Returns a resized image of the specified document for supported file types.
     * 
     * Image data returned is encoded in base64 format and can be viewed using the `<img>` element. 
     * 
     * ```<img src='data:image/jpeg;base64' + meta.image/>```
     * 
     * **Notes:**
     * - Supported files types are `'jpg'`, `'jpeg'`, `'gif'`, `'png'`, `'bmp'`, `'pdf'`, `'psd'`, `'doc'`
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPreviewImageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPreviewImageResponse
     */
	public function getPreviewImage(
        \OpenAPI\OpenAPI\Models\Operations\GetPreviewImageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPreviewImageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/resources/preview');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPreviewImageRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPreviewImageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewFileResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewFileResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Resource Properties
     * 
     * Returns details for specified file/folder id or hash, including upload date, size and type. For the full list of returned properties, see the response syntax, below.
     * 
     * **Notes:**
     * - Authenticated user should have list permission.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetResourceInfoRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetResourceInfoResponse
     */
	public function getResourceInfo(
        \OpenAPI\OpenAPI\Models\Operations\GetResourceInfoRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetResourceInfoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/resources');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetResourceInfoRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetResourceInfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResourceResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get resource metadata
     * 
     * Returns metadata for specified file/folder path, including upload date, size and type. For the full list of returned properties, see the response syntax, below.
     * 
     * **Notes:**
     * - Authenticated user should have list permission.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetResourceInfoByIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetResourceInfoByIdResponse
     */
	public function getResourceInfoById(
        \OpenAPI\OpenAPI\Models\Operations\GetResourceInfoByIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetResourceInfoByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/resources/{id}', \OpenAPI\OpenAPI\Models\Operations\GetResourceInfoByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetResourceInfoByIdRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetResourceInfoByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResourceResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List contents of folder
     * 
     * Returns a list of files/folders for the parent resource ID. 
     * 
     * You can use this API call to get information about all files and folders at a specified path. By default, the API returns basic metadata on each file/folder. An optional `include` parameter forces the return of additional metadata. As with all API calls, the path should be the full path relative to the user's home directory (e.g. ** /myfiles/some_folder**).
     * 
     * **Notes:**
     * - Authenticated user should have list permission.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListResourceContentsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListResourceContentsResponse
     */
	public function listResourceContents(
        \OpenAPI\OpenAPI\Models\Operations\ListResourceContentsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListResourceContentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/resources/list/{id}', \OpenAPI\OpenAPI\Models\Operations\ListResourceContentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListResourceContentsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListResourceContentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceCollectionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResourceCollectionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of all resources
     * 
     * Returns a list of files and folders in the account. Use the `resource` query parameter to indicate the folder you wish to search in (which can be /). 
     * 
     * **Searching for Files and Folders**
     * 
     * Using the `name` parameter triggers search mode, which will search the entire directory structure under the provided `resource` for files or folders with names matching the provided `name`. This supports wildcard matching such as:
     * 
     * - \*Report\* would find any files or folders with "Report" in the name.
     * - Data\_202?-09-30.xlsx would match items such as "Data\_2020-09-30.xlsx", "DATA\_2021-09-30.xlsx", "data\_2022-09-30.xlsx" etc.
     * - sales\* would find any files or folders starting with the word "Sales"
     * - \*.csv would locate any files ending in ".csv"
     * - \* matches everything within the directory tree starting at your given `resource`
     * 
     * The search is not case-sensitive. Searching for Clients\* or clients\* or CLIENTS\*, etc. will provide identical results
     * 
     * If you are using the `name` parameter to run a search, the `type` parameter will be ignored by the server.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListResourcesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListResourcesResponse
     */
	public function listResources(
        \OpenAPI\OpenAPI\Models\Operations\ListResourcesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListResourcesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/resources/list');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListResourcesRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListResourcesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceCollectionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResourceCollectionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Move resources
     * 
     * Moves a set of exisiting files/folders (provided by an array `resources`) to the requested `parentResource` in your account.
     * In the `resources` array, you may specify paths pointing files/folders throughout the account, but everything will be moved to the root of the `parentResource`.
     * 
     * **Notes:**
     * - Authenticated user should have modify permission.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MoveResourcesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MoveResourcesResponse
     */
	public function moveResources(
        \OpenAPI\OpenAPI\Models\Operations\MoveResourcesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MoveResourcesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/resources/move');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MoveResourcesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceCopyMove = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResourceCopyMove', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 207) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceMultiResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResourceMultiResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Rename a resource.
     * 
     * Update the specified file or folder resource record's "name" parameter. The resource is identified by the numeric resource ID that is passed in as the last segment of the URI.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateResourceByIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateResourceByIdResponse
     */
	public function updateResourceById(
        \OpenAPI\OpenAPI\Models\Operations\UpdateResourceByIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateResourceByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/resources/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateResourceByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateResourceByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResourceResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Upload a file
     * 
     * Uploads a file to a specified path, with optional support for resuming a partially uploaded existing file.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UploadFileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UploadFileResponse
     */
	public function uploadFile(
        \OpenAPI\OpenAPI\Models\Operations\UploadFileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UploadFileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/resources/upload');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\UploadFileRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UploadFileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResourceResponse', 'json');
            }
        }

        return $response;
    }
}