/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * TablesDatasetMetadata - Metadata for a dataset used for AutoML Tables.
 */
public class TablesDatasetMetadata {
    /**
     * column_spec_id of the primary table column which specifies a possible ML use of the row, i.e. the column will be used to split the rows into TRAIN, VALIDATE and TEST sets. Required type: STRING. This column, if set, must either have all of `TRAIN`, `VALIDATE`, `TEST` among its values, or only have `TEST`, `UNASSIGNED` values. In the latter case the rows with `UNASSIGNED` value will be assigned by AutoML. Note that if a given ml use distribution makes it impossible to create a "good" model, that call will error describing the issue. If both this column_spec_id and primary table's time_column_spec_id are not set, then all rows are treated as `UNASSIGNED`. NOTE: Updates of this field will instantly affect any other users concurrently working with the dataset.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mlUseColumnSpecId")
    public String mlUseColumnSpecId;
    public TablesDatasetMetadata withMlUseColumnSpecId(String mlUseColumnSpecId) {
        this.mlUseColumnSpecId = mlUseColumnSpecId;
        return this;
    }
    
    /**
     * Output only. The table_spec_id of the primary table of this dataset.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primaryTableSpecId")
    public String primaryTableSpecId;
    public TablesDatasetMetadata withPrimaryTableSpecId(String primaryTableSpecId) {
        this.primaryTableSpecId = primaryTableSpecId;
        return this;
    }
    
    /**
     * Output only. The most recent timestamp when target_column_correlations field and all descendant ColumnSpec.data_stats and ColumnSpec.top_correlated_columns fields were last (re-)generated. Any changes that happened to the dataset afterwards are not reflected in these fields values. The regeneration happens in the background on a best effort basis.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statsUpdateTime")
    public String statsUpdateTime;
    public TablesDatasetMetadata withStatsUpdateTime(String statsUpdateTime) {
        this.statsUpdateTime = statsUpdateTime;
        return this;
    }
    
    /**
     * Output only. Correlations between TablesDatasetMetadata.target_column_spec_id, and other columns of the TablesDatasetMetadataprimary_table. Only set if the target column is set. Mapping from other column spec id to its CorrelationStats with the target column. This field may be stale, see the stats_update_time field for for the timestamp at which these stats were last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targetColumnCorrelations")
    public java.util.Map<String, CorrelationStats> targetColumnCorrelations;
    public TablesDatasetMetadata withTargetColumnCorrelations(java.util.Map<String, CorrelationStats> targetColumnCorrelations) {
        this.targetColumnCorrelations = targetColumnCorrelations;
        return this;
    }
    
    /**
     * column_spec_id of the primary table's column that should be used as the training &amp; prediction target. This column must be non-nullable and have one of following data types (otherwise model creation will error): * CATEGORY * FLOAT64 If the type is CATEGORY , only up to 100 unique values may exist in that column across all rows. NOTE: Updates of this field will instantly affect any other users concurrently working with the dataset.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targetColumnSpecId")
    public String targetColumnSpecId;
    public TablesDatasetMetadata withTargetColumnSpecId(String targetColumnSpecId) {
        this.targetColumnSpecId = targetColumnSpecId;
        return this;
    }
    
    /**
     * column_spec_id of the primary table's column that should be used as the weight column, i.e. the higher the value the more important the row will be during model training. Required type: FLOAT64. Allowed values: 0 to 10000, inclusive on both ends; 0 means the row is ignored for training. If not set all rows are assumed to have equal weight of 1. NOTE: Updates of this field will instantly affect any other users concurrently working with the dataset.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("weightColumnSpecId")
    public String weightColumnSpecId;
    public TablesDatasetMetadata withWeightColumnSpecId(String weightColumnSpecId) {
        this.weightColumnSpecId = weightColumnSpecId;
        return this;
    }
    
}
