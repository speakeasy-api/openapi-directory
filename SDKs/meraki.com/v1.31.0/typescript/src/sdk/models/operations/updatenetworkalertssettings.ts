/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * A hash of destinations for this specific alert
 */
export class UpdateNetworkAlertsSettingsRequestBodyAlertsAlertDestinations extends SpeakeasyBase {
  /**
   * If true, then all network admins will receive emails for this alert
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allAdmins" })
  allAdmins?: boolean;

  /**
   * A list of emails that will receive information about the alert
   */
  @SpeakeasyMetadata()
  @Expose({ name: "emails" })
  emails?: string[];

  /**
   * A list of HTTP server IDs to send a Webhook to for this alert
   */
  @SpeakeasyMetadata()
  @Expose({ name: "httpServerIds" })
  httpServerIds?: string[];

  /**
   * If true, then an SNMP trap will be sent for this alert if there is an SNMP trap server configured for this network
   */
  @SpeakeasyMetadata()
  @Expose({ name: "snmp" })
  snmp?: boolean;
}

export class UpdateNetworkAlertsSettingsRequestBodyAlerts extends SpeakeasyBase {
  /**
   * A hash of destinations for this specific alert
   */
  @SpeakeasyMetadata()
  @Expose({ name: "alertDestinations" })
  @Type(() => UpdateNetworkAlertsSettingsRequestBodyAlertsAlertDestinations)
  alertDestinations?: UpdateNetworkAlertsSettingsRequestBodyAlertsAlertDestinations;

  /**
   * A boolean depicting if the alert is turned on or off
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;

  /**
   * A hash of specific configuration data for the alert. Only filters specific to the alert will be updated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "filters" })
  filters?: Record<string, any>;

  /**
   * The type of alert
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;
}

/**
 * The network-wide destinations for all alerts on the network.
 */
export class UpdateNetworkAlertsSettingsRequestBodyDefaultDestinations extends SpeakeasyBase {
  /**
   * If true, then all network admins will receive emails.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allAdmins" })
  allAdmins?: boolean;

  /**
   * A list of emails that will recieve the alert(s).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "emails" })
  emails?: string[];

  /**
   * A list of HTTP server IDs to send a Webhook to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "httpServerIds" })
  httpServerIds?: string[];

  /**
   * If true, then an SNMP trap will be sent if there is an SNMP trap server configured for this network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "snmp" })
  snmp?: boolean;
}

export class UpdateNetworkAlertsSettingsRequestBody extends SpeakeasyBase {
  /**
   * Alert-specific configuration for each type. Only alerts that pertain to the network can be updated.
   */
  @SpeakeasyMetadata({ elemType: UpdateNetworkAlertsSettingsRequestBodyAlerts })
  @Expose({ name: "alerts" })
  @Type(() => UpdateNetworkAlertsSettingsRequestBodyAlerts)
  alerts?: UpdateNetworkAlertsSettingsRequestBodyAlerts[];

  /**
   * The network-wide destinations for all alerts on the network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "defaultDestinations" })
  @Type(() => UpdateNetworkAlertsSettingsRequestBodyDefaultDestinations)
  defaultDestinations?: UpdateNetworkAlertsSettingsRequestBodyDefaultDestinations;
}

export class UpdateNetworkAlertsSettingsRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: UpdateNetworkAlertsSettingsRequestBody;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=networkId",
  })
  networkId: string;
}

export class UpdateNetworkAlertsSettingsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  updateNetworkAlertsSettings200ApplicationJSONObject?: Record<string, any>;
}
