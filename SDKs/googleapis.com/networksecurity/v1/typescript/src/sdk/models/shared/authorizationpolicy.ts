/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Rule } from "./rule";
import { Expose, Type } from "class-transformer";

/**
 * Required. The action to take when a rule match is found. Possible values are "ALLOW" or "DENY".
 */
export enum AuthorizationPolicyActionEnum {
  ActionUnspecified = "ACTION_UNSPECIFIED",
  Allow = "ALLOW",
  Deny = "DENY",
}

/**
 * AuthorizationPolicy is a resource that specifies how a server should authorize incoming connections. This resource in itself does not change the configuration unless it's attached to a target https proxy or endpoint config selector resource.
 */
export class AuthorizationPolicy extends SpeakeasyBase {
  /**
   * Required. The action to take when a rule match is found. Possible values are "ALLOW" or "DENY".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "action" })
  action?: AuthorizationPolicyActionEnum;

  /**
   * Output only. The timestamp when the resource was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createTime" })
  createTime?: string;

  /**
   * Optional. Free-text description of the resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Optional. Set of label tags associated with the AuthorizationPolicy resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels?: Record<string, string>;

  /**
   * Required. Name of the AuthorizationPolicy resource. It matches pattern `projects/{project}/locations/{location}/authorizationPolicies/`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Optional. List of rules to match. Note that at least one of the rules must match in order for the action specified in the 'action' field to be taken. A rule is a match if there is a matching source and destination. If left blank, the action specified in the `action` field will be applied on every request.
   */
  @SpeakeasyMetadata({ elemType: Rule })
  @Expose({ name: "rules" })
  @Type(() => Rule)
  rules?: Rule[];

  /**
   * Output only. The timestamp when the resource was updated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updateTime" })
  updateTime?: string;
}

/**
 * AuthorizationPolicy is a resource that specifies how a server should authorize incoming connections. This resource in itself does not change the configuration unless it's attached to a target https proxy or endpoint config selector resource.
 */
export class AuthorizationPolicyInput extends SpeakeasyBase {
  /**
   * Required. The action to take when a rule match is found. Possible values are "ALLOW" or "DENY".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "action" })
  action?: AuthorizationPolicyActionEnum;

  /**
   * Optional. Free-text description of the resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Optional. Set of label tags associated with the AuthorizationPolicy resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels?: Record<string, string>;

  /**
   * Required. Name of the AuthorizationPolicy resource. It matches pattern `projects/{project}/locations/{location}/authorizationPolicies/`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Optional. List of rules to match. Note that at least one of the rules must match in order for the action specified in the 'action' field to be taken. A rule is a match if there is a matching source and destination. If left blank, the action specified in the `action` field will be applied on every request.
   */
  @SpeakeasyMetadata({ elemType: Rule })
  @Expose({ name: "rules" })
  @Type(() => Rule)
  rules?: Rule[];
}
