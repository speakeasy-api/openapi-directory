<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class RootVolumeGroup 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create on-demand snapshot for the Volume Group
     * 
     * Create an on-demand snapshot for the given Volume Group ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOnDemandVolumeGroupBackupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOnDemandVolumeGroupBackupResponse
     */
	public function createOnDemandVolumeGroupBackup(
        \OpenAPI\OpenAPI\Models\Operations\CreateOnDemandVolumeGroupBackupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOnDemandVolumeGroupBackupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/volume_group/{id}/snapshot', \OpenAPI\OpenAPI\Models\Operations\CreateOnDemandVolumeGroupBackupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "volumeGroupOnDemandSnapshotConfig", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOnDemandVolumeGroupBackupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->asyncRequestStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AsyncRequestStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Volume Group details
     * 
     * Detailed view of a Volume Group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVolumeGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVolumeGroupResponse
     */
	public function getVolumeGroup(
        \OpenAPI\OpenAPI\Models\Operations\GetVolumeGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVolumeGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/volume_group/{id}', \OpenAPI\OpenAPI\Models\Operations\GetVolumeGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVolumeGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->volumeGroupDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VolumeGroupDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve the configuration for forcing a full snapshot
     * 
     * Retrieve the configuration for forcing a full snapshot for a Volume Group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVolumeGroupForceFullSpecRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVolumeGroupForceFullSpecResponse
     */
	public function getVolumeGroupForceFullSpec(
        \OpenAPI\OpenAPI\Models\Operations\GetVolumeGroupForceFullSpecRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVolumeGroupForceFullSpecResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/volume_group/{id}/request/force_full_snapshot', \OpenAPI\OpenAPI\Models\Operations\GetVolumeGroupForceFullSpecRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVolumeGroupForceFullSpecResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->volumeGroupForceFullResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VolumeGroupForceFullResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Volume Group snapshot details
     * 
     * Retrieve detailed information about a snapshot.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVolumeGroupSnapshotRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVolumeGroupSnapshotResponse
     */
	public function getVolumeGroupSnapshot(
        \OpenAPI\OpenAPI\Models\Operations\GetVolumeGroupSnapshotRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVolumeGroupSnapshotResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/volume_group/snapshot/{id}', \OpenAPI\OpenAPI\Models\Operations\GetVolumeGroupSnapshotRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVolumeGroupSnapshotResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->volumeGroupSnapshotSummary = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VolumeGroupSnapshotSummary', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get summary information for a mount
     * 
     * Retrieve information on a Volume Group mount. The information returned includes the following items, when available. id (the unique ID of the mount), name (the name of the Volume Group), snapshotDate (the snapshot date), sourceVolumeGroupId (The ID of the Volume Group from which this snapshot was created), sourceHostId (the ID of the source host), sourceHostName (the name of the source host), mountedDate (the date when the mount was created), mountedVolumes (the mounted volumes information), targetHostId (the ID of the mounted volumes host), targetHostName (the name of the mounted volumes host), mountRequestId (the ID of the job instance that initiated the mount), unmountRequestId (the ID of the job instance that intiated the request to remove the mount), isReady (whether the Volume Group mount is ready to use), and restoreScriptSmbPath (the link to the script that can perform bare-metal recovery).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVolumeGroupSnapshotMountRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVolumeGroupSnapshotMountResponse
     */
	public function getVolumeGroupSnapshotMount(
        \OpenAPI\OpenAPI\Models\Operations\GetVolumeGroupSnapshotMountRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVolumeGroupSnapshotMountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/volume_group/snapshot/mount/{id}', \OpenAPI\OpenAPI\Models\Operations\GetVolumeGroupSnapshotMountRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVolumeGroupSnapshotMountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->volumeGroupMountSummary = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VolumeGroupMountSummary', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update Volume Group properties
     * 
     * Patch Volume Group with specified properties.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchVolumeGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchVolumeGroupResponse
     */
	public function patchVolumeGroup(
        \OpenAPI\OpenAPI\Models\Operations\PatchVolumeGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchVolumeGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/volume_group/{id}', \OpenAPI\OpenAPI\Models\Operations\PatchVolumeGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "volumeGroupPatch", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchVolumeGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->volumeGroupDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VolumeGroupDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get list of Volume Groups
     * 
     * Get summary of all Volume Groups.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\QueryVolumeGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QueryVolumeGroupResponse
     */
	public function queryVolumeGroup(
        \OpenAPI\OpenAPI\Models\Operations\QueryVolumeGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QueryVolumeGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/volume_group');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\QueryVolumeGroupRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QueryVolumeGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->volumeGroupSummaryListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VolumeGroupSummaryListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the latest snapshot of the Volume Group
     * 
     * Retrieve the latest snapshot summary of a Volume Group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\QueryVolumeGroupLatestSnapshotRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QueryVolumeGroupLatestSnapshotResponse
     */
	public function queryVolumeGroupLatestSnapshot(
        \OpenAPI\OpenAPI\Models\Operations\QueryVolumeGroupLatestSnapshotRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QueryVolumeGroupLatestSnapshotResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/volume_group/{id}/latest_snapshot', \OpenAPI\OpenAPI\Models\Operations\QueryVolumeGroupLatestSnapshotRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QueryVolumeGroupLatestSnapshotResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->volumeGroupSnapshotSummaries = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\VolumeGroupSnapshotSummary>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get list of snapshots of the Volume Group
     * 
     * Retrieve snapshot details for a Volume Group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\QueryVolumeGroupSnapshotRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QueryVolumeGroupSnapshotResponse
     */
	public function queryVolumeGroupSnapshot(
        \OpenAPI\OpenAPI\Models\Operations\QueryVolumeGroupSnapshotRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QueryVolumeGroupSnapshotResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/volume_group/{id}/snapshot', \OpenAPI\OpenAPI\Models\Operations\QueryVolumeGroupSnapshotRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QueryVolumeGroupSnapshotResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->volumeGroupSnapshotSummaryListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VolumeGroupSnapshotSummaryListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get summary information for all mounts
     * 
     * Retrieves information for each Volume Group mount. The information returned includes the following items, when available. id (the unique ID of the mount), name (the name of the Volume Group), snapshotDate (the snapshot date), sourceVolumeGroupId (the ID of the Volume Group from which this snapshot was created), sourceHostId (the ID of the source host), sourceHostName (the name of the source host), mountedDate (the date when the mount was created), mountedVolumes (information on the mounted volumes), targetHostId (the ID of the mounted volumes host), targetHostName (the name of the mounted volumes host), mountRequestId (the ID of the job instance that initiated the mount), unmountRequestId (the ID of the job instance that initiated the request to remove the mount), isReady (whether the Volume Group mount is ready to use), and restoreScriptSmbPath (the link to the script that can perform bare-metal recovery).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\QueryVolumeGroupSnapshotMountRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QueryVolumeGroupSnapshotMountResponse
     */
	public function queryVolumeGroupSnapshotMount(
        \OpenAPI\OpenAPI\Models\Operations\QueryVolumeGroupSnapshotMountRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QueryVolumeGroupSnapshotMountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/volume_group/snapshot/mount');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\QueryVolumeGroupSnapshotMountRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QueryVolumeGroupSnapshotMountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->volumeGroupMountSummaryListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VolumeGroupMountSummaryListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Request a full snapshot on the next backup job of a Volume Group
     * 
     * Request a full snapshot to be taken during the next backup job of a Volume Group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RequestVolumeGroupForceFullSnapshotRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestVolumeGroupForceFullSnapshotResponse
     */
	public function requestVolumeGroupForceFullSnapshot(
        \OpenAPI\OpenAPI\Models\Operations\RequestVolumeGroupForceFullSnapshotRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestVolumeGroupForceFullSnapshotResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/volume_group/{id}/request/force_full_snapshot', \OpenAPI\OpenAPI\Models\Operations\RequestVolumeGroupForceFullSnapshotRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "volumeGroupForceFullRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestVolumeGroupForceFullSnapshotResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->volumeGroupForceFullResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VolumeGroupForceFullResponse', 'json');
            }
        }

        return $response;
    }
}