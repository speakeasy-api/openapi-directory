"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import updatecloudformationcollectionfilter as shared_updatecloudformationcollectionfilter
from ..shared import updatetagcollectionfilter as shared_updatetagcollectionfilter
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class UpdateResourceCollectionRequestBodyActionEnum(str, Enum):
    r"""Specifies if the resource collection in the request is added or deleted to the resource collection."""
    ADD = 'ADD'
    REMOVE = 'REMOVE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateResourceCollectionRequestBodyResourceCollection:
    r"""Contains information used to update a collection of Amazon Web Services resources."""
    
    cloud_formation: Optional[shared_updatecloudformationcollectionfilter.UpdateCloudFormationCollectionFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CloudFormation'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_updatetagcollectionfilter.UpdateTagCollectionFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateResourceCollectionRequestBody:
    
    action: UpdateResourceCollectionRequestBodyActionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Action') }})
    r"""Specifies if the resource collection in the request is added or deleted to the resource collection."""  
    resource_collection: UpdateResourceCollectionRequestBodyResourceCollection = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResourceCollection') }})
    r"""Contains information used to update a collection of Amazon Web Services resources."""  
    

@dataclasses.dataclass
class UpdateResourceCollectionRequest:
    
    request_body: UpdateResourceCollectionRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateResourceCollectionResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictException"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    update_resource_collection_response: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Success"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    