/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Interact with reactions to various GitHub entities.
 */
export class Reactions {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Create reaction for a commit comment
   *
   * @remarks
   * Create a reaction to a [commit comment](https://docs.github.com/enterprise-server@3.5/rest/reference/repos#comments). A response with an HTTP `200` status means that you already added the reaction type to this commit comment.
   *
   * @see {@link https://docs.github.com/enterprise-server@3.5/rest/reference/reactions#create-reaction-for-a-commit-comment} - API method documentation
   */
  reactionsCreateForCommitComment(
    req: operations.ReactionsCreateForCommitCommentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ReactionsCreateForCommitCommentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReactionsCreateForCommitCommentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repos/{owner}/{repo}/comments/{comment_id}/reactions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReactionsCreateForCommitCommentResponse =
        new operations.ReactionsCreateForCommitCommentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 201].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reaction = utils.objectToClass(httpRes?.data, shared.Reaction);
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationError = utils.objectToClass(
              httpRes?.data,
              shared.ValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create reaction for an issue
   *
   * @remarks
   * Create a reaction to an [issue](https://docs.github.com/enterprise-server@3.5/rest/reference/issues/). A response with an HTTP `200` status means that you already added the reaction type to this issue.
   *
   * @see {@link https://docs.github.com/enterprise-server@3.5/rest/reference/reactions#create-reaction-for-an-issue} - API method documentation
   */
  reactionsCreateForIssue(
    req: operations.ReactionsCreateForIssueRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ReactionsCreateForIssueResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReactionsCreateForIssueRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repos/{owner}/{repo}/issues/{issue_number}/reactions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReactionsCreateForIssueResponse =
        new operations.ReactionsCreateForIssueResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 201].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reaction = utils.objectToClass(httpRes?.data, shared.Reaction);
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationError = utils.objectToClass(
              httpRes?.data,
              shared.ValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create reaction for an issue comment
   *
   * @remarks
   * Create a reaction to an [issue comment](https://docs.github.com/enterprise-server@3.5/rest/reference/issues#comments). A response with an HTTP `200` status means that you already added the reaction type to this issue comment.
   *
   * @see {@link https://docs.github.com/enterprise-server@3.5/rest/reference/reactions#create-reaction-for-an-issue-comment} - API method documentation
   */
  reactionsCreateForIssueComment(
    req: operations.ReactionsCreateForIssueCommentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ReactionsCreateForIssueCommentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReactionsCreateForIssueCommentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReactionsCreateForIssueCommentResponse =
        new operations.ReactionsCreateForIssueCommentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 201].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reaction = utils.objectToClass(httpRes?.data, shared.Reaction);
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationError = utils.objectToClass(
              httpRes?.data,
              shared.ValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create reaction for a pull request review comment
   *
   * @remarks
   * Create a reaction to a [pull request review comment](https://docs.github.com/enterprise-server@3.5/rest/reference/pulls#comments). A response with an HTTP `200` status means that you already added the reaction type to this pull request review comment.
   *
   * @see {@link https://docs.github.com/enterprise-server@3.5/rest/reference/reactions#create-reaction-for-a-pull-request-review-comment} - API method documentation
   */
  reactionsCreateForPullRequestReviewComment(
    req: operations.ReactionsCreateForPullRequestReviewCommentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ReactionsCreateForPullRequestReviewCommentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReactionsCreateForPullRequestReviewCommentRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReactionsCreateForPullRequestReviewCommentResponse =
        new operations.ReactionsCreateForPullRequestReviewCommentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 201].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reaction = utils.objectToClass(httpRes?.data, shared.Reaction);
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationError = utils.objectToClass(
              httpRes?.data,
              shared.ValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create reaction for a release
   *
   * @remarks
   * Create a reaction to a [release](https://docs.github.com/enterprise-server@3.5/rest/reference/repos#releases). A response with a `Status: 200 OK` means that you already added the reaction type to this release.
   *
   * @see {@link https://docs.github.com/enterprise-server@3.5/rest/reference/reactions/#create-reaction-for-a-release} - API method documentation
   */
  reactionsCreateForRelease(
    req: operations.ReactionsCreateForReleaseRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ReactionsCreateForReleaseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReactionsCreateForReleaseRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repos/{owner}/{repo}/releases/{release_id}/reactions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReactionsCreateForReleaseResponse =
        new operations.ReactionsCreateForReleaseResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 201].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reaction = utils.objectToClass(httpRes?.data, shared.Reaction);
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationError = utils.objectToClass(
              httpRes?.data,
              shared.ValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create reaction for a team discussion comment
   *
   * @remarks
   * Create a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@3.5/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.5/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
   *
   * @see {@link https://docs.github.com/enterprise-server@3.5/rest/reference/reactions#create-reaction-for-a-team-discussion-comment} - API method documentation
   */
  reactionsCreateForTeamDiscussionCommentInOrg(
    req: operations.ReactionsCreateForTeamDiscussionCommentInOrgRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ReactionsCreateForTeamDiscussionCommentInOrgResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReactionsCreateForTeamDiscussionCommentInOrgRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReactionsCreateForTeamDiscussionCommentInOrgResponse =
        new operations.ReactionsCreateForTeamDiscussionCommentInOrgResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 201].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reaction = utils.objectToClass(httpRes?.data, shared.Reaction);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create reaction for a team discussion comment (Legacy)
   *
   * @remarks
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Create reaction for a team discussion comment](https://docs.github.com/enterprise-server@3.5/rest/reference/reactions#create-reaction-for-a-team-discussion-comment)" endpoint.
   *
   * Create a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@3.5/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.5/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.
   *
   * @see {@link https://docs.github.com/enterprise-server@3.5/rest/reference/reactions/#create-reaction-for-a-team-discussion-comment-legacy} - API method documentation
   */
  reactionsCreateForTeamDiscussionCommentLegacy(
    req: operations.ReactionsCreateForTeamDiscussionCommentLegacyRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ReactionsCreateForTeamDiscussionCommentLegacyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReactionsCreateForTeamDiscussionCommentLegacyRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReactionsCreateForTeamDiscussionCommentLegacyResponse =
        new operations.ReactionsCreateForTeamDiscussionCommentLegacyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reaction = utils.objectToClass(httpRes?.data, shared.Reaction);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create reaction for a team discussion
   *
   * @remarks
   * Create a reaction to a [team discussion](https://docs.github.com/enterprise-server@3.5/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.5/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
   *
   * @see {@link https://docs.github.com/enterprise-server@3.5/rest/reference/reactions#create-reaction-for-a-team-discussion} - API method documentation
   */
  reactionsCreateForTeamDiscussionInOrg(
    req: operations.ReactionsCreateForTeamDiscussionInOrgRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ReactionsCreateForTeamDiscussionInOrgResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReactionsCreateForTeamDiscussionInOrgRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReactionsCreateForTeamDiscussionInOrgResponse =
        new operations.ReactionsCreateForTeamDiscussionInOrgResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 201].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reaction = utils.objectToClass(httpRes?.data, shared.Reaction);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create reaction for a team discussion (Legacy)
   *
   * @remarks
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://docs.github.com/enterprise-server@3.5/rest/reference/reactions#create-reaction-for-a-team-discussion) endpoint.
   *
   * Create a reaction to a [team discussion](https://docs.github.com/enterprise-server@3.5/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.5/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.
   *
   * @see {@link https://docs.github.com/enterprise-server@3.5/rest/reference/reactions/#create-reaction-for-a-team-discussion-legacy} - API method documentation
   */
  reactionsCreateForTeamDiscussionLegacy(
    req: operations.ReactionsCreateForTeamDiscussionLegacyRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ReactionsCreateForTeamDiscussionLegacyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReactionsCreateForTeamDiscussionLegacyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/teams/{team_id}/discussions/{discussion_number}/reactions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReactionsCreateForTeamDiscussionLegacyResponse =
        new operations.ReactionsCreateForTeamDiscussionLegacyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reaction = utils.objectToClass(httpRes?.data, shared.Reaction);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete a commit comment reaction
   *
   * @remarks
   * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.
   *
   * Delete a reaction to a [commit comment](https://docs.github.com/enterprise-server@3.5/rest/reference/repos#comments).
   *
   * @see {@link https://docs.github.com/enterprise-server@3.5/rest/reference/reactions#delete-a-commit-comment-reaction} - API method documentation
   */
  reactionsDeleteForCommitComment(
    req: operations.ReactionsDeleteForCommitCommentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ReactionsDeleteForCommitCommentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReactionsDeleteForCommitCommentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReactionsDeleteForCommitCommentResponse =
        new operations.ReactionsDeleteForCommitCommentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Delete an issue reaction
   *
   * @remarks
   * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.
   *
   * Delete a reaction to an [issue](https://docs.github.com/enterprise-server@3.5/rest/reference/issues/).
   *
   * @see {@link https://docs.github.com/enterprise-server@3.5/rest/reference/reactions#delete-an-issue-reaction} - API method documentation
   */
  reactionsDeleteForIssue(
    req: operations.ReactionsDeleteForIssueRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ReactionsDeleteForIssueResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReactionsDeleteForIssueRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReactionsDeleteForIssueResponse =
        new operations.ReactionsDeleteForIssueResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Delete an issue comment reaction
   *
   * @remarks
   * **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.
   *
   * Delete a reaction to an [issue comment](https://docs.github.com/enterprise-server@3.5/rest/reference/issues#comments).
   *
   * @see {@link https://docs.github.com/enterprise-server@3.5/rest/reference/reactions#delete-an-issue-comment-reaction} - API method documentation
   */
  reactionsDeleteForIssueComment(
    req: operations.ReactionsDeleteForIssueCommentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ReactionsDeleteForIssueCommentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReactionsDeleteForIssueCommentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReactionsDeleteForIssueCommentResponse =
        new operations.ReactionsDeleteForIssueCommentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Delete a pull request comment reaction
   *
   * @remarks
   * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`
   *
   * Delete a reaction to a [pull request review comment](https://docs.github.com/enterprise-server@3.5/rest/reference/pulls#review-comments).
   *
   * @see {@link https://docs.github.com/enterprise-server@3.5/rest/reference/reactions#delete-a-pull-request-comment-reaction} - API method documentation
   */
  reactionsDeleteForPullRequestComment(
    req: operations.ReactionsDeleteForPullRequestCommentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ReactionsDeleteForPullRequestCommentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReactionsDeleteForPullRequestCommentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReactionsDeleteForPullRequestCommentResponse =
        new operations.ReactionsDeleteForPullRequestCommentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Delete a release reaction
   *
   * @remarks
   * **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/releases/:release_id/reactions/:reaction_id`.
   *
   * Delete a reaction to a [release](https://docs.github.com/enterprise-server@3.5/rest/reference/repos#releases).
   *
   * @see {@link https://docs.github.com/enterprise-server@3.5/rest/reference/reactions/#delete-a-release-reaction} - API method documentation
   */
  reactionsDeleteForRelease(
    req: operations.ReactionsDeleteForReleaseRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ReactionsDeleteForReleaseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReactionsDeleteForReleaseRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReactionsDeleteForReleaseResponse =
        new operations.ReactionsDeleteForReleaseResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Delete team discussion reaction
   *
   * @remarks
   * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.
   *
   * Delete a reaction to a [team discussion](https://docs.github.com/enterprise-server@3.5/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.5/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * @see {@link https://docs.github.com/enterprise-server@3.5/rest/reference/reactions#delete-team-discussion-reaction} - API method documentation
   */
  reactionsDeleteForTeamDiscussion(
    req: operations.ReactionsDeleteForTeamDiscussionRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ReactionsDeleteForTeamDiscussionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReactionsDeleteForTeamDiscussionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReactionsDeleteForTeamDiscussionResponse =
        new operations.ReactionsDeleteForTeamDiscussionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Delete team discussion comment reaction
   *
   * @remarks
   * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.
   *
   * Delete a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@3.5/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.5/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * @see {@link https://docs.github.com/enterprise-server@3.5/rest/reference/reactions#delete-team-discussion-comment-reaction} - API method documentation
   */
  reactionsDeleteForTeamDiscussionComment(
    req: operations.ReactionsDeleteForTeamDiscussionCommentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ReactionsDeleteForTeamDiscussionCommentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReactionsDeleteForTeamDiscussionCommentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReactionsDeleteForTeamDiscussionCommentResponse =
        new operations.ReactionsDeleteForTeamDiscussionCommentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * List reactions for a commit comment
   *
   * @remarks
   * List the reactions to a [commit comment](https://docs.github.com/enterprise-server@3.5/rest/reference/repos#comments).
   *
   * @see {@link https://docs.github.com/enterprise-server@3.5/rest/reference/reactions#list-reactions-for-a-commit-comment} - API method documentation
   */
  reactionsListForCommitComment(
    req: operations.ReactionsListForCommitCommentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ReactionsListForCommitCommentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReactionsListForCommitCommentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repos/{owner}/{repo}/comments/{comment_id}/reactions",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReactionsListForCommitCommentResponse =
        new operations.ReactionsListForCommitCommentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reactions = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.reactions = utils.objectToClass(
              httpRes?.data,
              shared.Reaction,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List reactions for an issue
   *
   * @remarks
   * List the reactions to an [issue](https://docs.github.com/enterprise-server@3.5/rest/reference/issues).
   *
   * @see {@link https://docs.github.com/enterprise-server@3.5/rest/reference/reactions#list-reactions-for-an-issue} - API method documentation
   */
  reactionsListForIssue(
    req: operations.ReactionsListForIssueRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ReactionsListForIssueResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReactionsListForIssueRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repos/{owner}/{repo}/issues/{issue_number}/reactions",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReactionsListForIssueResponse =
        new operations.ReactionsListForIssueResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reactions = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.reactions = utils.objectToClass(
              httpRes?.data,
              shared.Reaction,
              resFieldDepth
            );
          }
          break;
        case [404, 410].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List reactions for an issue comment
   *
   * @remarks
   * List the reactions to an [issue comment](https://docs.github.com/enterprise-server@3.5/rest/reference/issues#comments).
   *
   * @see {@link https://docs.github.com/enterprise-server@3.5/rest/reference/reactions#list-reactions-for-an-issue-comment} - API method documentation
   */
  reactionsListForIssueComment(
    req: operations.ReactionsListForIssueCommentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ReactionsListForIssueCommentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReactionsListForIssueCommentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReactionsListForIssueCommentResponse =
        new operations.ReactionsListForIssueCommentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reactions = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.reactions = utils.objectToClass(
              httpRes?.data,
              shared.Reaction,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List reactions for a pull request review comment
   *
   * @remarks
   * List the reactions to a [pull request review comment](https://docs.github.com/enterprise-server@3.5/rest/reference/pulls#review-comments).
   *
   * @see {@link https://docs.github.com/enterprise-server@3.5/rest/reference/reactions#list-reactions-for-a-pull-request-review-comment} - API method documentation
   */
  reactionsListForPullRequestReviewComment(
    req: operations.ReactionsListForPullRequestReviewCommentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ReactionsListForPullRequestReviewCommentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReactionsListForPullRequestReviewCommentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReactionsListForPullRequestReviewCommentResponse =
        new operations.ReactionsListForPullRequestReviewCommentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reactions = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.reactions = utils.objectToClass(
              httpRes?.data,
              shared.Reaction,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List reactions for a release
   *
   * @remarks
   * List the reactions to a [release](https://docs.github.com/enterprise-server@3.5/rest/reference/repos#releases).
   *
   * @see {@link https://docs.github.com/enterprise-server@3.5/rest/reference/reactions/#list-reactions-for-a-release} - API method documentation
   */
  reactionsListForRelease(
    req: operations.ReactionsListForReleaseRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ReactionsListForReleaseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReactionsListForReleaseRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repos/{owner}/{repo}/releases/{release_id}/reactions",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReactionsListForReleaseResponse =
        new operations.ReactionsListForReleaseResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reactions = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.reactions = utils.objectToClass(
              httpRes?.data,
              shared.Reaction,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List reactions for a team discussion comment
   *
   * @remarks
   * List the reactions to a [team discussion comment](https://docs.github.com/enterprise-server@3.5/rest/reference/teams#discussion-comments/). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.5/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
   *
   * @see {@link https://docs.github.com/enterprise-server@3.5/rest/reference/reactions#list-reactions-for-a-team-discussion-comment} - API method documentation
   */
  reactionsListForTeamDiscussionCommentInOrg(
    req: operations.ReactionsListForTeamDiscussionCommentInOrgRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ReactionsListForTeamDiscussionCommentInOrgResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReactionsListForTeamDiscussionCommentInOrgRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReactionsListForTeamDiscussionCommentInOrgResponse =
        new operations.ReactionsListForTeamDiscussionCommentInOrgResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reactions = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.reactions = utils.objectToClass(
              httpRes?.data,
              shared.Reaction,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List reactions for a team discussion comment (Legacy)
   *
   * @remarks
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://docs.github.com/enterprise-server@3.5/rest/reference/reactions#list-reactions-for-a-team-discussion-comment) endpoint.
   *
   * List the reactions to a [team discussion comment](https://docs.github.com/enterprise-server@3.5/rest/reference/teams#discussion-comments). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.5/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * @see {@link https://docs.github.com/enterprise-server@3.5/rest/reference/reactions/#list-reactions-for-a-team-discussion-comment-legacy} - API method documentation
   */
  reactionsListForTeamDiscussionCommentLegacy(
    req: operations.ReactionsListForTeamDiscussionCommentLegacyRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ReactionsListForTeamDiscussionCommentLegacyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReactionsListForTeamDiscussionCommentLegacyRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReactionsListForTeamDiscussionCommentLegacyResponse =
        new operations.ReactionsListForTeamDiscussionCommentLegacyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reactions = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.reactions = utils.objectToClass(
              httpRes?.data,
              shared.Reaction,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List reactions for a team discussion
   *
   * @remarks
   * List the reactions to a [team discussion](https://docs.github.com/enterprise-server@3.5/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.5/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
   *
   * @see {@link https://docs.github.com/enterprise-server@3.5/rest/reference/reactions#list-reactions-for-a-team-discussion} - API method documentation
   */
  reactionsListForTeamDiscussionInOrg(
    req: operations.ReactionsListForTeamDiscussionInOrgRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ReactionsListForTeamDiscussionInOrgResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReactionsListForTeamDiscussionInOrgRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReactionsListForTeamDiscussionInOrgResponse =
        new operations.ReactionsListForTeamDiscussionInOrgResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reactions = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.reactions = utils.objectToClass(
              httpRes?.data,
              shared.Reaction,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List reactions for a team discussion (Legacy)
   *
   * @remarks
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/enterprise-server@3.5/rest/reference/reactions#list-reactions-for-a-team-discussion) endpoint.
   *
   * List the reactions to a [team discussion](https://docs.github.com/enterprise-server@3.5/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.5/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * @see {@link https://docs.github.com/enterprise-server@3.5/rest/reference/reactions/#list-reactions-for-a-team-discussion-legacy} - API method documentation
   */
  reactionsListForTeamDiscussionLegacy(
    req: operations.ReactionsListForTeamDiscussionLegacyRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ReactionsListForTeamDiscussionLegacyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReactionsListForTeamDiscussionLegacyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/teams/{team_id}/discussions/{discussion_number}/reactions",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReactionsListForTeamDiscussionLegacyResponse =
        new operations.ReactionsListForTeamDiscussionLegacyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reactions = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.reactions = utils.objectToClass(
              httpRes?.data,
              shared.Reaction,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }
}
