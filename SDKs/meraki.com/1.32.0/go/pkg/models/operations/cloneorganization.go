// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type CloneOrganizationRequestBody struct {
	// The name of the new organization
	Name string `json:"name"`
}

type CloneOrganizationRequest struct {
	RequestBody    CloneOrganizationRequestBody `request:"mediaType=application/json"`
	OrganizationID string                       `pathParam:"style=simple,explode=false,name=organizationId"`
}

// CloneOrganization201ApplicationJSONAPI - API related settings
type CloneOrganization201ApplicationJSONAPI struct {
	// Enable API access
	Enabled *bool `json:"enabled,omitempty"`
}

// CloneOrganization201ApplicationJSONCloudRegion - Region info
type CloneOrganization201ApplicationJSONCloudRegion struct {
	// Name of region
	Name *string `json:"name,omitempty"`
}

// CloneOrganization201ApplicationJSONCloud - Data for this organization
type CloneOrganization201ApplicationJSONCloud struct {
	// Region info
	Region *CloneOrganization201ApplicationJSONCloudRegion `json:"region,omitempty"`
}

// CloneOrganization201ApplicationJSONLicensingModelEnum - Organization licensing model. Can be 'co-term', 'per-device', or 'subscription'.
type CloneOrganization201ApplicationJSONLicensingModelEnum string

const (
	CloneOrganization201ApplicationJSONLicensingModelEnumCoTerm       CloneOrganization201ApplicationJSONLicensingModelEnum = "co-term"
	CloneOrganization201ApplicationJSONLicensingModelEnumPerDevice    CloneOrganization201ApplicationJSONLicensingModelEnum = "per-device"
	CloneOrganization201ApplicationJSONLicensingModelEnumSubscription CloneOrganization201ApplicationJSONLicensingModelEnum = "subscription"
)

func (e CloneOrganization201ApplicationJSONLicensingModelEnum) ToPointer() *CloneOrganization201ApplicationJSONLicensingModelEnum {
	return &e
}

func (e *CloneOrganization201ApplicationJSONLicensingModelEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "co-term":
		fallthrough
	case "per-device":
		fallthrough
	case "subscription":
		*e = CloneOrganization201ApplicationJSONLicensingModelEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CloneOrganization201ApplicationJSONLicensingModelEnum: %v", v)
	}
}

// CloneOrganization201ApplicationJSONLicensing - Licensing related settings
type CloneOrganization201ApplicationJSONLicensing struct {
	// Organization licensing model. Can be 'co-term', 'per-device', or 'subscription'.
	Model *CloneOrganization201ApplicationJSONLicensingModelEnum `json:"model,omitempty"`
}

type CloneOrganization201ApplicationJSONManagementDetails struct {
	// Name of management data
	Name *string `json:"name,omitempty"`
	// Value of management data
	Value *string `json:"value,omitempty"`
}

// CloneOrganization201ApplicationJSONManagement - Information about the organization's management system
type CloneOrganization201ApplicationJSONManagement struct {
	// Details related to organization management, possibly empty
	Details []CloneOrganization201ApplicationJSONManagementDetails `json:"details,omitempty"`
}

// CloneOrganization201ApplicationJSON - Successful operation
type CloneOrganization201ApplicationJSON struct {
	// API related settings
	API *CloneOrganization201ApplicationJSONAPI `json:"api,omitempty"`
	// Data for this organization
	Cloud *CloneOrganization201ApplicationJSONCloud `json:"cloud,omitempty"`
	// Organization ID
	ID *string `json:"id,omitempty"`
	// Licensing related settings
	Licensing *CloneOrganization201ApplicationJSONLicensing `json:"licensing,omitempty"`
	// Information about the organization's management system
	Management *CloneOrganization201ApplicationJSONManagement `json:"management,omitempty"`
	// Organization name
	Name *string `json:"name,omitempty"`
	// Organization URL
	URL *string `json:"url,omitempty"`
}

type CloneOrganizationResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	CloneOrganization201ApplicationJSONObject *CloneOrganization201ApplicationJSON
}
