"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import adtechnologyproviders as shared_adtechnologyproviders
from ..shared import correction as shared_correction
from ..shared import htmlcontent as shared_htmlcontent
from ..shared import nativecontent as shared_nativecontent
from ..shared import servingrestriction as shared_servingrestriction
from ..shared import videocontent as shared_videocontent
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CreativeAttributesEnum(str, Enum):
    ATTRIBUTE_UNSPECIFIED = 'ATTRIBUTE_UNSPECIFIED'
    IMAGE_RICH_MEDIA = 'IMAGE_RICH_MEDIA'
    ADOBE_FLASH_FLV = 'ADOBE_FLASH_FLV'
    IS_TAGGED = 'IS_TAGGED'
    IS_COOKIE_TARGETED = 'IS_COOKIE_TARGETED'
    IS_USER_INTEREST_TARGETED = 'IS_USER_INTEREST_TARGETED'
    EXPANDING_DIRECTION_NONE = 'EXPANDING_DIRECTION_NONE'
    EXPANDING_DIRECTION_UP = 'EXPANDING_DIRECTION_UP'
    EXPANDING_DIRECTION_DOWN = 'EXPANDING_DIRECTION_DOWN'
    EXPANDING_DIRECTION_LEFT = 'EXPANDING_DIRECTION_LEFT'
    EXPANDING_DIRECTION_RIGHT = 'EXPANDING_DIRECTION_RIGHT'
    EXPANDING_DIRECTION_UP_LEFT = 'EXPANDING_DIRECTION_UP_LEFT'
    EXPANDING_DIRECTION_UP_RIGHT = 'EXPANDING_DIRECTION_UP_RIGHT'
    EXPANDING_DIRECTION_DOWN_LEFT = 'EXPANDING_DIRECTION_DOWN_LEFT'
    EXPANDING_DIRECTION_DOWN_RIGHT = 'EXPANDING_DIRECTION_DOWN_RIGHT'
    CREATIVE_TYPE_HTML = 'CREATIVE_TYPE_HTML'
    CREATIVE_TYPE_VAST_VIDEO = 'CREATIVE_TYPE_VAST_VIDEO'
    EXPANDING_DIRECTION_UP_OR_DOWN = 'EXPANDING_DIRECTION_UP_OR_DOWN'
    EXPANDING_DIRECTION_LEFT_OR_RIGHT = 'EXPANDING_DIRECTION_LEFT_OR_RIGHT'
    EXPANDING_DIRECTION_ANY_DIAGONAL = 'EXPANDING_DIRECTION_ANY_DIAGONAL'
    EXPANDING_ACTION_ROLLOVER_TO_EXPAND = 'EXPANDING_ACTION_ROLLOVER_TO_EXPAND'
    INSTREAM_VAST_VIDEO_TYPE_VPAID_FLASH = 'INSTREAM_VAST_VIDEO_TYPE_VPAID_FLASH'
    RICH_MEDIA_CAPABILITY_TYPE_MRAID = 'RICH_MEDIA_CAPABILITY_TYPE_MRAID'
    RICH_MEDIA_CAPABILITY_TYPE_FLASH = 'RICH_MEDIA_CAPABILITY_TYPE_FLASH'
    RICH_MEDIA_CAPABILITY_TYPE_HTML5 = 'RICH_MEDIA_CAPABILITY_TYPE_HTML5'
    SKIPPABLE_INSTREAM_VIDEO = 'SKIPPABLE_INSTREAM_VIDEO'
    RICH_MEDIA_CAPABILITY_TYPE_SSL = 'RICH_MEDIA_CAPABILITY_TYPE_SSL'
    RICH_MEDIA_CAPABILITY_TYPE_NON_SSL = 'RICH_MEDIA_CAPABILITY_TYPE_NON_SSL'
    RICH_MEDIA_CAPABILITY_TYPE_INTERSTITIAL = 'RICH_MEDIA_CAPABILITY_TYPE_INTERSTITIAL'
    NON_SKIPPABLE_INSTREAM_VIDEO = 'NON_SKIPPABLE_INSTREAM_VIDEO'
    NATIVE_ELIGIBILITY_ELIGIBLE = 'NATIVE_ELIGIBILITY_ELIGIBLE'
    NON_VPAID = 'NON_VPAID'
    NATIVE_ELIGIBILITY_NOT_ELIGIBLE = 'NATIVE_ELIGIBILITY_NOT_ELIGIBLE'
    ANY_INTERSTITIAL = 'ANY_INTERSTITIAL'
    NON_INTERSTITIAL = 'NON_INTERSTITIAL'
    IN_BANNER_VIDEO = 'IN_BANNER_VIDEO'
    RENDERING_SIZELESS_ADX = 'RENDERING_SIZELESS_ADX'
    OMSDK_1_0 = 'OMSDK_1_0'

class CreativeDealsStatusEnum(str, Enum):
    r"""Output only. The top-level deals status of this creative. If disapproved, an entry for 'auctionType=DIRECT_DEALS' (or 'ALL') in serving_restrictions will also exist. Note that this may be nuanced with other contextual restrictions, in which case, it may be preferable to read from serving_restrictions directly. Can be used to filter the response of the creatives.list method."""
    STATUS_UNSPECIFIED = 'STATUS_UNSPECIFIED'
    NOT_CHECKED = 'NOT_CHECKED'
    CONDITIONALLY_APPROVED = 'CONDITIONALLY_APPROVED'
    APPROVED = 'APPROVED'
    DISAPPROVED = 'DISAPPROVED'
    PENDING_REVIEW = 'PENDING_REVIEW'
    STATUS_TYPE_UNSPECIFIED = 'STATUS_TYPE_UNSPECIFIED'

class CreativeOpenAuctionStatusEnum(str, Enum):
    r"""Output only. The top-level open auction status of this creative. If disapproved, an entry for 'auctionType = OPEN_AUCTION' (or 'ALL') in serving_restrictions will also exist. Note that this may be nuanced with other contextual restrictions, in which case, it may be preferable to read from serving_restrictions directly. Can be used to filter the response of the creatives.list method."""
    STATUS_UNSPECIFIED = 'STATUS_UNSPECIFIED'
    NOT_CHECKED = 'NOT_CHECKED'
    CONDITIONALLY_APPROVED = 'CONDITIONALLY_APPROVED'
    APPROVED = 'APPROVED'
    DISAPPROVED = 'DISAPPROVED'
    PENDING_REVIEW = 'PENDING_REVIEW'
    STATUS_TYPE_UNSPECIFIED = 'STATUS_TYPE_UNSPECIFIED'

class CreativeRestrictedCategoriesEnum(str, Enum):
    NO_RESTRICTED_CATEGORIES = 'NO_RESTRICTED_CATEGORIES'
    ALCOHOL = 'ALCOHOL'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Creative:
    r"""A creative and its classification data."""
    
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountId'), 'exclude': lambda f: f is None }})
    r"""The account that this creative belongs to. Can be used to filter the response of the creatives.list method."""  
    ad_choices_destination_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adChoicesDestinationUrl'), 'exclude': lambda f: f is None }})
    r"""The link to AdChoices destination page."""  
    ad_technology_providers: Optional[shared_adtechnologyproviders.AdTechnologyProviders] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adTechnologyProviders'), 'exclude': lambda f: f is None }})
    r"""Detected ad technology provider information."""  
    advertiser_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('advertiserName'), 'exclude': lambda f: f is None }})
    r"""The name of the company being advertised in the creative."""  
    agency_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('agencyId'), 'exclude': lambda f: f is None }})
    r"""The agency ID for this creative."""  
    api_update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('apiUpdateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The last update timestamp of the creative through the API."""  
    attributes: Optional[list[CreativeAttributesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes'), 'exclude': lambda f: f is None }})
    r"""All attributes for the ads that may be shown from this creative. Can be used to filter the response of the creatives.list method."""  
    click_through_urls: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clickThroughUrls'), 'exclude': lambda f: f is None }})
    r"""The set of destination URLs for the creative."""  
    corrections: Optional[list[shared_correction.Correction]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('corrections'), 'exclude': lambda f: f is None }})
    r"""Output only. Shows any corrections that were applied to this creative."""  
    creative_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creativeId'), 'exclude': lambda f: f is None }})
    r"""The buyer-defined creative ID of this creative. Can be used to filter the response of the creatives.list method."""  
    deals_status: Optional[CreativeDealsStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dealsStatus'), 'exclude': lambda f: f is None }})
    r"""Output only. The top-level deals status of this creative. If disapproved, an entry for 'auctionType=DIRECT_DEALS' (or 'ALL') in serving_restrictions will also exist. Note that this may be nuanced with other contextual restrictions, in which case, it may be preferable to read from serving_restrictions directly. Can be used to filter the response of the creatives.list method."""  
    declared_click_through_urls: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('declaredClickThroughUrls'), 'exclude': lambda f: f is None }})
    r"""The set of declared destination URLs for the creative."""  
    detected_advertiser_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detectedAdvertiserIds'), 'exclude': lambda f: f is None }})
    r"""Output only. Detected advertiser IDs, if any."""  
    detected_domains: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detectedDomains'), 'exclude': lambda f: f is None }})
    r"""Output only. The detected domains for this creative."""  
    detected_languages: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detectedLanguages'), 'exclude': lambda f: f is None }})
    r"""Output only. The detected languages for this creative. The order is arbitrary. The codes are 2 or 5 characters and are documented at https://developers.google.com/adwords/api/docs/appendix/languagecodes."""  
    detected_product_categories: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detectedProductCategories'), 'exclude': lambda f: f is None }})
    r"""Output only. Detected product categories, if any. See the ad-product-categories.txt file in the technical documentation for a list of IDs."""  
    detected_sensitive_categories: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detectedSensitiveCategories'), 'exclude': lambda f: f is None }})
    r"""Output only. Detected sensitive categories, if any. See the ad-sensitive-categories.txt file in the technical documentation for a list of IDs. You should use these IDs along with the excluded-sensitive-category field in the bid request to filter your bids."""  
    html: Optional[shared_htmlcontent.HTMLContent] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('html'), 'exclude': lambda f: f is None }})
    r"""HTML content for a creative."""  
    impression_tracking_urls: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('impressionTrackingUrls'), 'exclude': lambda f: f is None }})
    r"""The set of URLs to be called to record an impression."""  
    native: Optional[shared_nativecontent.NativeContent] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('native'), 'exclude': lambda f: f is None }})
    r"""Native content for a creative."""  
    open_auction_status: Optional[CreativeOpenAuctionStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('openAuctionStatus'), 'exclude': lambda f: f is None }})
    r"""Output only. The top-level open auction status of this creative. If disapproved, an entry for 'auctionType = OPEN_AUCTION' (or 'ALL') in serving_restrictions will also exist. Note that this may be nuanced with other contextual restrictions, in which case, it may be preferable to read from serving_restrictions directly. Can be used to filter the response of the creatives.list method."""  
    restricted_categories: Optional[list[CreativeRestrictedCategoriesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('restrictedCategories'), 'exclude': lambda f: f is None }})
    r"""All restricted categories for the ads that may be shown from this creative."""  
    serving_restrictions: Optional[list[shared_servingrestriction.ServingRestriction]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('servingRestrictions'), 'exclude': lambda f: f is None }})
    r"""Output only. The granular status of this ad in specific contexts. A context here relates to where something ultimately serves (for example, a physical location, a platform, an HTTPS versus HTTP request, or the type of auction)."""  
    vendor_ids: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vendorIds'), 'exclude': lambda f: f is None }})
    r"""All vendor IDs for the ads that may be shown from this creative. See https://storage.googleapis.com/adx-rtb-dictionaries/vendors.txt for possible values."""  
    version: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})
    r"""Output only. The version of this creative."""  
    video: Optional[shared_videocontent.VideoContent] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('video'), 'exclude': lambda f: f is None }})
    r"""Video content for a creative."""  
    