/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

public class SaveTransaction {
    @JsonProperty("account_id")
    public String accountId;

    public SaveTransaction withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     * The transaction amount in milliunits format.  Split transaction amounts cannot be changed and if a different amount is supplied it will be ignored.
     */
    @JsonProperty("amount")
    public Long amount;

    public SaveTransaction withAmount(Long amount) {
        this.amount = amount;
        return this;
    }
    
    /**
     * Whether or not the transaction is approved.  If not supplied, transaction will be unapproved by default.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("approved")
    public Boolean approved;

    public SaveTransaction withApproved(Boolean approved) {
        this.approved = approved;
        return this;
    }
    
    /**
     * The category for the transaction.  To configure a split transaction, you can specify null for `category_id` and provide a `subtransactions` array as part of the transaction object.  If an existing transaction is a split, the `category_id` cannot be changed.  Credit Card Payment categories are not permitted and will be ignored if supplied.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("category_id")
    public String categoryId;

    public SaveTransaction withCategoryId(String categoryId) {
        this.categoryId = categoryId;
        return this;
    }
    
    /**
     * The cleared status of the transaction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cleared")
    public SaveTransactionClearedEnum cleared;

    public SaveTransaction withCleared(SaveTransactionClearedEnum cleared) {
        this.cleared = cleared;
        return this;
    }
    
    /**
     * The transaction date in ISO format (e.g. 2016-12-01).  Future dates (scheduled transactions) are not permitted.  Split transaction dates cannot be changed and if a different date is supplied it will be ignored.
     */
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("date")
    public LocalDate date;

    public SaveTransaction withDate(LocalDate date) {
        this.date = date;
        return this;
    }
    
    /**
     * The transaction flag
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("flag_color")
    public SaveTransactionFlagColorEnum flagColor;

    public SaveTransaction withFlagColor(SaveTransactionFlagColorEnum flagColor) {
        this.flagColor = flagColor;
        return this;
    }
    
    /**
     * If specified, the new transaction will be assigned this `import_id` and considered "imported".  We will also attempt to match this imported transaction to an existing "user-entered" transation on the same account, with the same amount, and with a date +/-10 days from the imported transaction date.&lt;br&gt;&lt;br&gt;Transactions imported through File Based Import or Direct Import (not through the API) are assigned an import_id in the format: 'YNAB:[milliunit_amount]:[iso_date]:[occurrence]'. For example, a transaction dated 2015-12-30 in the amount of -$294.23 USD would have an import_id of 'YNAB:-294230:2015-12-30:1'.  If a second transaction on the same account was imported and had the same date and same amount, its import_id would be 'YNAB:-294230:2015-12-30:2'.  Using a consistent format will prevent duplicates through Direct Import and File Based Import.&lt;br&gt;&lt;br&gt;If import_id is omitted or specified as null, the transaction will be treated as a "user-entered" transaction. As such, it will be eligible to be matched against transactions later being imported (via DI, FBI, or API).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("import_id")
    public String importId;

    public SaveTransaction withImportId(String importId) {
        this.importId = importId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memo")
    public String memo;

    public SaveTransaction withMemo(String memo) {
        this.memo = memo;
        return this;
    }
    
    /**
     * The payee for the transaction.  To create a transfer between two accounts, use the account transfer payee pointing to the target account.  Account transfer payees are specified as `tranfer_payee_id` on the account resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payee_id")
    public String payeeId;

    public SaveTransaction withPayeeId(String payeeId) {
        this.payeeId = payeeId;
        return this;
    }
    
    /**
     * The payee name.  If a `payee_name` value is provided and `payee_id` has a null value, the `payee_name` value will be used to resolve the payee by either (1) a matching payee rename rule (only if `import_id` is also specified) or (2) a payee with the same name or (3) creation of a new payee.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payee_name")
    public String payeeName;

    public SaveTransaction withPayeeName(String payeeName) {
        this.payeeName = payeeName;
        return this;
    }
    
    /**
     * An array of subtransactions to configure a transaction as a split.  Updating `subtransactions` on an existing split transaction is not supported.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subtransactions")
    public SaveSubTransaction[] subtransactions;

    public SaveTransaction withSubtransactions(SaveSubTransaction[] subtransactions) {
        this.subtransactions = subtransactions;
        return this;
    }
    
    public SaveTransaction(@JsonProperty("account_id") String accountId, @JsonProperty("amount") Long amount, @JsonProperty("date") LocalDate date) {
        this.accountId = accountId;
        this.amount = amount;
        this.date = date;
  }
}
