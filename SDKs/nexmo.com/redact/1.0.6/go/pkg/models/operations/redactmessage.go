// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type RedactMessageSecurity struct {
	Password string `security:"scheme,type=http,subtype=basic,name=password"`
	Username string `security:"scheme,type=http,subtype=basic,name=username"`
}

type RedactMessage422ApplicationJSONType string

const (
	RedactMessage422ApplicationJSONTypeErrorInvalidJSON        RedactMessage422ApplicationJSONType = "ErrorInvalidJson"
	RedactMessage422ApplicationJSONTypeErrorUnsupportedProduct RedactMessage422ApplicationJSONType = "ErrorUnsupportedProduct"
)

type RedactMessage422ApplicationJSON struct {
	ErrorInvalidJSON        *shared.ErrorInvalidJSON
	ErrorUnsupportedProduct *shared.ErrorUnsupportedProduct

	Type RedactMessage422ApplicationJSONType
}

func CreateRedactMessage422ApplicationJSONErrorInvalidJSON(errorInvalidJSON shared.ErrorInvalidJSON) RedactMessage422ApplicationJSON {
	typ := RedactMessage422ApplicationJSONTypeErrorInvalidJSON

	return RedactMessage422ApplicationJSON{
		ErrorInvalidJSON: &errorInvalidJSON,
		Type:             typ,
	}
}

func CreateRedactMessage422ApplicationJSONErrorUnsupportedProduct(errorUnsupportedProduct shared.ErrorUnsupportedProduct) RedactMessage422ApplicationJSON {
	typ := RedactMessage422ApplicationJSONTypeErrorUnsupportedProduct

	return RedactMessage422ApplicationJSON{
		ErrorUnsupportedProduct: &errorUnsupportedProduct,
		Type:                    typ,
	}
}

func (u *RedactMessage422ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	errorInvalidJSON := new(shared.ErrorInvalidJSON)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&errorInvalidJSON); err == nil {
		u.ErrorInvalidJSON = errorInvalidJSON
		u.Type = RedactMessage422ApplicationJSONTypeErrorInvalidJSON
		return nil
	}

	errorUnsupportedProduct := new(shared.ErrorUnsupportedProduct)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&errorUnsupportedProduct); err == nil {
		u.ErrorUnsupportedProduct = errorUnsupportedProduct
		u.Type = RedactMessage422ApplicationJSONTypeErrorUnsupportedProduct
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u RedactMessage422ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.ErrorInvalidJSON != nil {
		return json.Marshal(u.ErrorInvalidJSON)
	}

	if u.ErrorUnsupportedProduct != nil {
		return json.Marshal(u.ErrorUnsupportedProduct)
	}

	return nil, nil
}

type RedactMessage403ApplicationJSONType string

const (
	RedactMessage403ApplicationJSONTypeErrorPrematureRedaction RedactMessage403ApplicationJSONType = "ErrorPrematureRedaction"
	RedactMessage403ApplicationJSONTypeErrorUnprovisioned      RedactMessage403ApplicationJSONType = "ErrorUnprovisioned"
)

type RedactMessage403ApplicationJSON struct {
	ErrorPrematureRedaction *shared.ErrorPrematureRedaction
	ErrorUnprovisioned      *shared.ErrorUnprovisioned

	Type RedactMessage403ApplicationJSONType
}

func CreateRedactMessage403ApplicationJSONErrorPrematureRedaction(errorPrematureRedaction shared.ErrorPrematureRedaction) RedactMessage403ApplicationJSON {
	typ := RedactMessage403ApplicationJSONTypeErrorPrematureRedaction

	return RedactMessage403ApplicationJSON{
		ErrorPrematureRedaction: &errorPrematureRedaction,
		Type:                    typ,
	}
}

func CreateRedactMessage403ApplicationJSONErrorUnprovisioned(errorUnprovisioned shared.ErrorUnprovisioned) RedactMessage403ApplicationJSON {
	typ := RedactMessage403ApplicationJSONTypeErrorUnprovisioned

	return RedactMessage403ApplicationJSON{
		ErrorUnprovisioned: &errorUnprovisioned,
		Type:               typ,
	}
}

func (u *RedactMessage403ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	errorPrematureRedaction := new(shared.ErrorPrematureRedaction)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&errorPrematureRedaction); err == nil {
		u.ErrorPrematureRedaction = errorPrematureRedaction
		u.Type = RedactMessage403ApplicationJSONTypeErrorPrematureRedaction
		return nil
	}

	errorUnprovisioned := new(shared.ErrorUnprovisioned)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&errorUnprovisioned); err == nil {
		u.ErrorUnprovisioned = errorUnprovisioned
		u.Type = RedactMessage403ApplicationJSONTypeErrorUnprovisioned
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u RedactMessage403ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.ErrorPrematureRedaction != nil {
		return json.Marshal(u.ErrorPrematureRedaction)
	}

	if u.ErrorUnprovisioned != nil {
		return json.Marshal(u.ErrorUnprovisioned)
	}

	return nil, nil
}

type RedactMessageResponse struct {
	ContentType string
	// No such record
	ErrorInvalidID *shared.ErrorInvalidID
	// Rate Limited
	ErrorThrottled *shared.ErrorThrottled
	// Authentication failure
	ErrorUnauthorized *shared.ErrorUnauthorized
	StatusCode        int
	RawResponse       *http.Response
	// Authorisation denied
	RedactMessage403ApplicationJSONOneOf *RedactMessage403ApplicationJSON
	// Invalid JSON body
	RedactMessage422ApplicationJSONOneOf *RedactMessage422ApplicationJSON
}
