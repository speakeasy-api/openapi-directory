/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * NHBug - A JSON object describing the bug.
 */
public class NHBug {
    /**
     * An array of possible catchphrases the player says after catching the bug. Most critters have just one, but some can have multiple.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("catchphrases")
    public String[] catchphrases;

    public NHBug withCatchphrases(String[] catchphrases) {
        this.catchphrases = catchphrases;
        return this;
    }
    
    /**
     * Image of the bug.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image_url")
    public String imageUrl;

    public NHBug withImageUrl(String imageUrl) {
        this.imageUrl = imageUrl;
        return this;
    }
    
    /**
     * Short descriptor of where the bug can be found.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    public String location;

    public NHBug withLocation(String location) {
        this.location = location;
        return this;
    }
    
    /**
     * Name of the bug.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public NHBug withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * When you can catch the bug in the Northern hemisphere.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("north")
    public NHBugNorth north;

    public NHBug withNorth(NHBugNorth north) {
        this.north = north;
        return this;
    }
    
    /**
     * In-game bug number, marking position in the Critterpedia.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number")
    public Long number;

    public NHBug withNumber(Long number) {
        this.number = number;
        return this;
    }
    
    /**
     * How rare the bug is. Note that this field is currently empty for most bugs as we do not yet know how exactly bug rarities are calculated in the game code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rarity")
    public String rarity;

    public NHBug withRarity(String rarity) {
        this.rarity = rarity;
        return this;
    }
    
    /**
     * Render of the bug.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("render_url")
    public String renderUrl;

    public NHBug withRenderUrl(String renderUrl) {
        this.renderUrl = renderUrl;
        return this;
    }
    
    /**
     * The number of Bells the bug can be sold to Flick for. This value is always 1.5x that of `sell_nook`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sell_flick")
    public Long sellFlick;

    public NHBug withSellFlick(Long sellFlick) {
        this.sellFlick = sellFlick;
        return this;
    }
    
    /**
     * The number of Bells the bug can be sold to Nook's store for.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sell_nook")
    public Long sellNook;

    public NHBug withSellNook(Long sellNook) {
        this.sellNook = sellNook;
        return this;
    }
    
    /**
     * When you can catch the bug in the Southern hemisphere.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("south")
    public NHBugSouth south;

    public NHBug withSouth(NHBugSouth south) {
        this.south = south;
        return this;
    }
    
    /**
     * The length of the tank when the bug is placed as a furniture item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tank_length")
    public Float tankLength;

    public NHBug withTankLength(Float tankLength) {
        this.tankLength = tankLength;
        return this;
    }
    
    /**
     * The width of the tank when the bug is placed as a furniture item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tank_width")
    public Float tankWidth;

    public NHBug withTankWidth(Float tankWidth) {
        this.tankWidth = tankWidth;
        return this;
    }
    
    /**
     * The total number of bug the player has to have caught before this bug will start spawning.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_catch")
    public Long totalCatch;

    public NHBug withTotalCatch(Long totalCatch) {
        this.totalCatch = totalCatch;
        return this;
    }
    
    /**
     * Link to the respective Nookipedia article.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;

    public NHBug withUrl(String url) {
        this.url = url;
        return this;
    }
    
    public NHBug(){}
}
