"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Summary:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_organization_summary_top_appliances_by_utilization(self, request: operations.GetOrganizationSummaryTopAppliancesByUtilizationRequest) -> operations.GetOrganizationSummaryTopAppliancesByUtilizationResponse:
        r"""Return the top 10 appliances sorted by utilization over given time range.
        Return the top 10 appliances sorted by utilization over given time range.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationSummaryTopAppliancesByUtilizationRequest, base_url, '/organizations/{organizationId}/summary/top/appliances/byUtilization', request)
        
        query_params = utils.get_query_params(operations.GetOrganizationSummaryTopAppliancesByUtilizationRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationSummaryTopAppliancesByUtilizationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetOrganizationSummaryTopAppliancesByUtilization200ApplicationJSON]])
                res.get_organization_summary_top_appliances_by_utilization_200_application_json_objects = out

        return res

    def get_organization_summary_top_clients_by_usage(self, request: operations.GetOrganizationSummaryTopClientsByUsageRequest) -> operations.GetOrganizationSummaryTopClientsByUsageResponse:
        r"""Return metrics for organization's top 10 clients by data usage (in mb) over given time range.
        Return metrics for organization's top 10 clients by data usage (in mb) over given time range.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationSummaryTopClientsByUsageRequest, base_url, '/organizations/{organizationId}/summary/top/clients/byUsage', request)
        
        query_params = utils.get_query_params(operations.GetOrganizationSummaryTopClientsByUsageRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationSummaryTopClientsByUsageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetOrganizationSummaryTopClientsByUsage200ApplicationJSON]])
                res.get_organization_summary_top_clients_by_usage_200_application_json_objects = out

        return res

    def get_organization_summary_top_clients_manufacturers_by_usage(self, request: operations.GetOrganizationSummaryTopClientsManufacturersByUsageRequest) -> operations.GetOrganizationSummaryTopClientsManufacturersByUsageResponse:
        r"""Return metrics for organization's top clients by data usage (in mb) over given time range, grouped by manufacturer.
        Return metrics for organization's top clients by data usage (in mb) over given time range, grouped by manufacturer.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationSummaryTopClientsManufacturersByUsageRequest, base_url, '/organizations/{organizationId}/summary/top/clients/manufacturers/byUsage', request)
        
        query_params = utils.get_query_params(operations.GetOrganizationSummaryTopClientsManufacturersByUsageRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationSummaryTopClientsManufacturersByUsageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetOrganizationSummaryTopClientsManufacturersByUsage200ApplicationJSON]])
                res.get_organization_summary_top_clients_manufacturers_by_usage_200_application_json_objects = out

        return res

    def get_organization_summary_top_devices_by_usage(self, request: operations.GetOrganizationSummaryTopDevicesByUsageRequest) -> operations.GetOrganizationSummaryTopDevicesByUsageResponse:
        r"""Return metrics for organization's top 10 devices sorted by data usage over given time range
        Return metrics for organization's top 10 devices sorted by data usage over given time range. Default unit is megabytes.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationSummaryTopDevicesByUsageRequest, base_url, '/organizations/{organizationId}/summary/top/devices/byUsage', request)
        
        query_params = utils.get_query_params(operations.GetOrganizationSummaryTopDevicesByUsageRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationSummaryTopDevicesByUsageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetOrganizationSummaryTopDevicesByUsage200ApplicationJSON]])
                res.get_organization_summary_top_devices_by_usage_200_application_json_objects = out

        return res

    def get_organization_summary_top_devices_models_by_usage(self, request: operations.GetOrganizationSummaryTopDevicesModelsByUsageRequest) -> operations.GetOrganizationSummaryTopDevicesModelsByUsageResponse:
        r"""Return metrics for organization's top 10 device models sorted by data usage over given time range
        Return metrics for organization's top 10 device models sorted by data usage over given time range. Default unit is megabytes.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationSummaryTopDevicesModelsByUsageRequest, base_url, '/organizations/{organizationId}/summary/top/devices/models/byUsage', request)
        
        query_params = utils.get_query_params(operations.GetOrganizationSummaryTopDevicesModelsByUsageRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationSummaryTopDevicesModelsByUsageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetOrganizationSummaryTopDevicesModelsByUsage200ApplicationJSON]])
                res.get_organization_summary_top_devices_models_by_usage_200_application_json_objects = out

        return res

    def get_organization_summary_top_ssids_by_usage(self, request: operations.GetOrganizationSummaryTopSsidsByUsageRequest) -> operations.GetOrganizationSummaryTopSsidsByUsageResponse:
        r"""Return metrics for organization's top 10 ssids by data usage over given time range
        Return metrics for organization's top 10 ssids by data usage over given time range. Default unit is megabytes.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationSummaryTopSsidsByUsageRequest, base_url, '/organizations/{organizationId}/summary/top/ssids/byUsage', request)
        
        query_params = utils.get_query_params(operations.GetOrganizationSummaryTopSsidsByUsageRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationSummaryTopSsidsByUsageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetOrganizationSummaryTopSsidsByUsage200ApplicationJSON]])
                res.get_organization_summary_top_ssids_by_usage_200_application_json_objects = out

        return res

    def get_organization_summary_top_switches_by_energy_usage(self, request: operations.GetOrganizationSummaryTopSwitchesByEnergyUsageRequest) -> operations.GetOrganizationSummaryTopSwitchesByEnergyUsageResponse:
        r"""Return metrics for organization's top 10 switches by energy usage over given time range
        Return metrics for organization's top 10 switches by energy usage over given time range. Default unit is joules.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationSummaryTopSwitchesByEnergyUsageRequest, base_url, '/organizations/{organizationId}/summary/top/switches/byEnergyUsage', request)
        
        query_params = utils.get_query_params(operations.GetOrganizationSummaryTopSwitchesByEnergyUsageRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationSummaryTopSwitchesByEnergyUsageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetOrganizationSummaryTopSwitchesByEnergyUsage200ApplicationJSON]])
                res.get_organization_summary_top_switches_by_energy_usage_200_application_json_objects = out

        return res

    