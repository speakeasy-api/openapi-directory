"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Payouts:
    r"""<p>Payout APIs allow you to create and instruct payouts to payees</p>
    <p>There are three phases to a payout:</p>
    <ul>
        <li>Submit - the payments are created within the platform</li>
        <li>Quote - optional step if FX is involved</li>
        <li>Instruct - the payments are sent to the payment rails for processing</li>
    </ul>
    <p>Between 1 and 2000 payments can be created within the platform as part of a Payout</p>
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_quote_for_payout_v3(self, request: operations.CreateQuoteForPayoutV3Request) -> operations.CreateQuoteForPayoutV3Response:
        r"""Create a quote for the payout
        Create quote for a payout
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateQuoteForPayoutV3Request, base_url, '/v3/payouts/{payoutId}/quote', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateQuoteForPayoutV3Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.QuoteResponseV3])
                res.quote_response_v3 = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse404])
                res.inline_response_404 = out
        elif http_res.status_code == 409:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse409])
                res.inline_response_409 = out

        return res

    def deschedule_payout(self, request: operations.DeschedulePayoutRequest) -> operations.DeschedulePayoutResponse:
        r"""Deschedule a payout
        Remove the schedule for a scheduled payout
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeschedulePayoutRequest, base_url, '/v3/payouts/{payoutId}/schedule', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeschedulePayoutResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse401])
                res.inline_response_401 = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse403])
                res.inline_response_403 = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse404])
                res.inline_response_404 = out
        elif http_res.status_code == 409:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse409])
                res.inline_response_409 = out

        return res

    def get_payments_for_payout_v3(self, request: operations.GetPaymentsForPayoutV3Request) -> operations.GetPaymentsForPayoutV3Response:
        r"""Retrieve payments for a payout
        Retrieve payments for a payout
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPaymentsForPayoutV3Request, base_url, '/v3/payouts/{payoutId}/payments', request)
        
        query_params = utils.get_query_params(operations.GetPaymentsForPayoutV3Request, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPaymentsForPayoutV3Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PagedPaymentsResponseV3])
                res.paged_payments_response_v3 = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse404])
                res.inline_response_404 = out

        return res

    def get_payout_summary_v3(self, request: operations.GetPayoutSummaryV3Request) -> operations.GetPayoutSummaryV3Response:
        r"""Get Payout Summary
        Get payout summary - returns the current state of the payout.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPayoutSummaryV3Request, base_url, '/v3/payouts/{payoutId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPayoutSummaryV3Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PayoutSummaryResponseV3])
                res.payout_summary_response_v3 = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse401])
                res.inline_response_401 = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse403])
                res.inline_response_403 = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse404])
                res.inline_response_404 = out

        return res

    def instruct_payout_v3(self, request: operations.InstructPayoutV3Request) -> operations.InstructPayoutV3Response:
        r"""Instruct Payout
        Instruct a payout to be made for the specified payoutId.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.InstructPayoutV3Request, base_url, '/v3/payouts/{payoutId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "instruct_payout_request_v3", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InstructPayoutV3Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse400])
                res.inline_response_400 = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse401])
                res.inline_response_401 = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse403])
                res.inline_response_403 = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse404])
                res.inline_response_404 = out
        elif http_res.status_code == 409:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse409])
                res.inline_response_409 = out

        return res

    def schedule_for_payout(self, request: operations.ScheduleForPayoutRequest) -> operations.ScheduleForPayoutResponse:
        r"""Schedule a payout
        <p>Schedule a payout for auto-instruction in the future
        or update existing payout schedule if the payout has been scheduled before.</p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ScheduleForPayoutRequest, base_url, '/v3/payouts/{payoutId}/schedule', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "schedule_payout_request_v3", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ScheduleForPayoutResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse400])
                res.inline_response_400 = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse401])
                res.inline_response_401 = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse403])
                res.inline_response_403 = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse404])
                res.inline_response_404 = out
        elif http_res.status_code == 409:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse409])
                res.inline_response_409 = out

        return res

    def submit_payout_v3_json(self, request: shared.CreatePayoutRequestV3) -> operations.SubmitPayoutV3JSONResponse:
        r"""Submit Payout
        <p>Create a new payout and return a location header with a link to the payout</p>
        <p>Basic validation of the payout is performed before returning but more comprehensive validation is done asynchronously</p>
        <p>The results can be obtained by issuing a HTTP GET to the URL returned in the location header</p>
        <p>**NOTE:** amount values in payments must be in 'minor units' format. E.g. cents for USD, pence for GBP etc with no decimal places</p>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v3/payouts'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SubmitPayoutV3JSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            res.headers = http_res.headers
            
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse400])
                res.inline_response_400 = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse401])
                res.inline_response_401 = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse403])
                res.inline_response_403 = out

        return res

    def submit_payout_v3_multipart(self, request: operations.SubmitPayoutV3MultipartFormData) -> operations.SubmitPayoutV3MultipartResponse:
        r"""Submit Payout
        <p>Create a new payout and return a location header with a link to the payout</p>
        <p>Basic validation of the payout is performed before returning but more comprehensive validation is done asynchronously</p>
        <p>The results can be obtained by issuing a HTTP GET to the URL returned in the location header</p>
        <p>**NOTE:** amount values in payments must be in 'minor units' format. E.g. cents for USD, pence for GBP etc with no decimal places</p>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v3/payouts'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SubmitPayoutV3MultipartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            res.headers = http_res.headers
            
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse400])
                res.inline_response_400 = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse401])
                res.inline_response_401 = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse403])
                res.inline_response_403 = out

        return res

    def withdraw_payment(self, request: operations.WithdrawPaymentRequest) -> operations.WithdrawPaymentResponse:
        r"""Withdraw a Payment
        <p>withdraw a payment </p>
        <p>There are a variety of reasons why this can fail</p>
        <ul>
            <li>the payment must be in a state of 'accepted' or 'unfunded'</li>
            <li>the payout must not be in a state of 'instructed'</li>
        </ul>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.WithdrawPaymentRequest, base_url, '/v1/payments/{paymentId}/withdraw', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "withdraw_payment_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WithdrawPaymentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse400])
                res.inline_response_400 = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse401])
                res.inline_response_401 = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse403])
                res.inline_response_403 = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse404])
                res.inline_response_404 = out

        return res

    def withdraw_payout_v3(self, request: operations.WithdrawPayoutV3Request) -> operations.WithdrawPayoutV3Response:
        r"""Withdraw Payout
        Withdraw Payout will remove the payout details from the rails but the payout will still be accessible in payout service in WITHDRAWN status.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.WithdrawPayoutV3Request, base_url, '/v3/payouts/{payoutId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WithdrawPayoutV3Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse400])
                res.inline_response_400 = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse401])
                res.inline_response_401 = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse403])
                res.inline_response_403 = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse404])
                res.inline_response_404 = out

        return res

    