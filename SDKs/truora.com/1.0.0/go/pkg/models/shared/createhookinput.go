// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CreateHookInputEventTypeEnum - The entity events the client wants to subscribe
type CreateHookInputEventTypeEnum string

const (
	CreateHookInputEventTypeEnumAll             CreateHookInputEventTypeEnum = "all"
	CreateHookInputEventTypeEnumCheck           CreateHookInputEventTypeEnum = "check"
	CreateHookInputEventTypeEnumContinuousCheck CreateHookInputEventTypeEnum = "continuous_check"
)

func (e *CreateHookInputEventTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "all":
		fallthrough
	case "check":
		fallthrough
	case "continuous_check":
		*e = CreateHookInputEventTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateHookInputEventTypeEnum: %s", s)
	}
}

// CreateHookInputStatusEnum - indicates whether the hook is active or not. enabled by default
type CreateHookInputStatusEnum string

const (
	CreateHookInputStatusEnumEnabled  CreateHookInputStatusEnum = "enabled"
	CreateHookInputStatusEnumDisabled CreateHookInputStatusEnum = "disabled"
)

func (e *CreateHookInputStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "enabled":
		fallthrough
	case "disabled":
		*e = CreateHookInputStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateHookInputStatusEnum: %s", s)
	}
}

// CreateHookInputSubscriberLanguageEnum - Language for the notification to be sent
type CreateHookInputSubscriberLanguageEnum string

const (
	CreateHookInputSubscriberLanguageEnumAf   CreateHookInputSubscriberLanguageEnum = "af"
	CreateHookInputSubscriberLanguageEnumAr   CreateHookInputSubscriberLanguageEnum = "ar"
	CreateHookInputSubscriberLanguageEnumCa   CreateHookInputSubscriberLanguageEnum = "ca"
	CreateHookInputSubscriberLanguageEnumCs   CreateHookInputSubscriberLanguageEnum = "cs"
	CreateHookInputSubscriberLanguageEnumDa   CreateHookInputSubscriberLanguageEnum = "da"
	CreateHookInputSubscriberLanguageEnumDe   CreateHookInputSubscriberLanguageEnum = "de"
	CreateHookInputSubscriberLanguageEnumEl   CreateHookInputSubscriberLanguageEnum = "el"
	CreateHookInputSubscriberLanguageEnumEn   CreateHookInputSubscriberLanguageEnum = "en"
	CreateHookInputSubscriberLanguageEnumEs   CreateHookInputSubscriberLanguageEnum = "es"
	CreateHookInputSubscriberLanguageEnumFi   CreateHookInputSubscriberLanguageEnum = "fi"
	CreateHookInputSubscriberLanguageEnumFr   CreateHookInputSubscriberLanguageEnum = "fr"
	CreateHookInputSubscriberLanguageEnumHe   CreateHookInputSubscriberLanguageEnum = "he"
	CreateHookInputSubscriberLanguageEnumHi   CreateHookInputSubscriberLanguageEnum = "hi"
	CreateHookInputSubscriberLanguageEnumHr   CreateHookInputSubscriberLanguageEnum = "hr"
	CreateHookInputSubscriberLanguageEnumHu   CreateHookInputSubscriberLanguageEnum = "hu"
	CreateHookInputSubscriberLanguageEnumID   CreateHookInputSubscriberLanguageEnum = "id"
	CreateHookInputSubscriberLanguageEnumIt   CreateHookInputSubscriberLanguageEnum = "it"
	CreateHookInputSubscriberLanguageEnumJa   CreateHookInputSubscriberLanguageEnum = "ja"
	CreateHookInputSubscriberLanguageEnumKo   CreateHookInputSubscriberLanguageEnum = "ko"
	CreateHookInputSubscriberLanguageEnumMs   CreateHookInputSubscriberLanguageEnum = "ms"
	CreateHookInputSubscriberLanguageEnumNb   CreateHookInputSubscriberLanguageEnum = "nb"
	CreateHookInputSubscriberLanguageEnumNl   CreateHookInputSubscriberLanguageEnum = "nl"
	CreateHookInputSubscriberLanguageEnumPl   CreateHookInputSubscriberLanguageEnum = "pl"
	CreateHookInputSubscriberLanguageEnumPt   CreateHookInputSubscriberLanguageEnum = "pt"
	CreateHookInputSubscriberLanguageEnumPrBr CreateHookInputSubscriberLanguageEnum = "pr-BR"
	CreateHookInputSubscriberLanguageEnumRo   CreateHookInputSubscriberLanguageEnum = "ro"
	CreateHookInputSubscriberLanguageEnumRu   CreateHookInputSubscriberLanguageEnum = "ru"
	CreateHookInputSubscriberLanguageEnumSv   CreateHookInputSubscriberLanguageEnum = "sv"
	CreateHookInputSubscriberLanguageEnumTh   CreateHookInputSubscriberLanguageEnum = "th"
	CreateHookInputSubscriberLanguageEnumTl   CreateHookInputSubscriberLanguageEnum = "tl"
	CreateHookInputSubscriberLanguageEnumTr   CreateHookInputSubscriberLanguageEnum = "tr"
	CreateHookInputSubscriberLanguageEnumVi   CreateHookInputSubscriberLanguageEnum = "vi"
	CreateHookInputSubscriberLanguageEnumZh   CreateHookInputSubscriberLanguageEnum = "zh"
	CreateHookInputSubscriberLanguageEnumZhCn CreateHookInputSubscriberLanguageEnum = "zh-CN"
	CreateHookInputSubscriberLanguageEnumZhHk CreateHookInputSubscriberLanguageEnum = "zh-HK"
)

func (e *CreateHookInputSubscriberLanguageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "af":
		fallthrough
	case "ar":
		fallthrough
	case "ca":
		fallthrough
	case "cs":
		fallthrough
	case "da":
		fallthrough
	case "de":
		fallthrough
	case "el":
		fallthrough
	case "en":
		fallthrough
	case "es":
		fallthrough
	case "fi":
		fallthrough
	case "fr":
		fallthrough
	case "he":
		fallthrough
	case "hi":
		fallthrough
	case "hr":
		fallthrough
	case "hu":
		fallthrough
	case "id":
		fallthrough
	case "it":
		fallthrough
	case "ja":
		fallthrough
	case "ko":
		fallthrough
	case "ms":
		fallthrough
	case "nb":
		fallthrough
	case "nl":
		fallthrough
	case "pl":
		fallthrough
	case "pt":
		fallthrough
	case "pr-BR":
		fallthrough
	case "ro":
		fallthrough
	case "ru":
		fallthrough
	case "sv":
		fallthrough
	case "th":
		fallthrough
	case "tl":
		fallthrough
	case "tr":
		fallthrough
	case "vi":
		fallthrough
	case "zh":
		fallthrough
	case "zh-CN":
		fallthrough
	case "zh-HK":
		*e = CreateHookInputSubscriberLanguageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateHookInputSubscriberLanguageEnum: %s", s)
	}
}

// CreateHookInputSubscriberTypeEnum - A platform with an endpoint ready to process the information
type CreateHookInputSubscriberTypeEnum string

const (
	CreateHookInputSubscriberTypeEnumWeb   CreateHookInputSubscriberTypeEnum = "web"
	CreateHookInputSubscriberTypeEnumEmail CreateHookInputSubscriberTypeEnum = "email"
)

func (e *CreateHookInputSubscriberTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "web":
		fallthrough
	case "email":
		*e = CreateHookInputSubscriberTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateHookInputSubscriberTypeEnum: %s", s)
	}
}

// CreateHookInput - Creates a hook related to previous created check.
type CreateHookInput struct {
	// Actions you want to be notified. Possible inputs are created, started, and finished or any combination of those three
	Actions []string `form:"name=actions"`
	// The entity events the client wants to subscribe
	EventType CreateHookInputEventTypeEnum `form:"name=event_type"`
	// indicates whether the hook is active or not. enabled by default
	Status *CreateHookInputStatusEnum `form:"name=status"`
	// Email address where the notification is to be sent. Required if subscriber_type was set to email
	SubscriberAddress *string `form:"name=subscriber_address"`
	// Language for the notification to be sent
	SubscriberLanguage *CreateHookInputSubscriberLanguageEnum `form:"name=subscriber_language"`
	// Name of the person to be notified
	SubscriberName *string `form:"name=subscriber_name"`
	// A platform with an endpoint ready to process the information
	SubscriberType CreateHookInputSubscriberTypeEnum `form:"name=subscriber_type"`
	// URL where the notification is to be sent. Required only if subscriber_type is set to web
	SubscriberURL *string `form:"name=subscriber_url"`
}
