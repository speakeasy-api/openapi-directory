// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETAssignPrivateIPAddressesActionEnum
type GETAssignPrivateIPAddressesActionEnum string

const (
	GETAssignPrivateIPAddressesActionEnumAssignPrivateIPAddresses GETAssignPrivateIPAddressesActionEnum = "AssignPrivateIpAddresses"
)

func (e *GETAssignPrivateIPAddressesActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AssignPrivateIpAddresses":
		*e = GETAssignPrivateIPAddressesActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETAssignPrivateIPAddressesActionEnum: %s", s)
	}
}

// GETAssignPrivateIPAddressesVersionEnum
type GETAssignPrivateIPAddressesVersionEnum string

const (
	GETAssignPrivateIPAddressesVersionEnumTwoThousandAndSixteen1115 GETAssignPrivateIPAddressesVersionEnum = "2016-11-15"
)

func (e *GETAssignPrivateIPAddressesVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETAssignPrivateIPAddressesVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETAssignPrivateIPAddressesVersionEnum: %s", s)
	}
}

type GETAssignPrivateIPAddressesRequest struct {
	Action GETAssignPrivateIPAddressesActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Indicates whether to allow an IP address that is already assigned to another network interface or instance to be reassigned to the specified network interface.
	AllowReassignment *bool `queryParam:"style=form,explode=true,name=AllowReassignment"`
	// One or more IPv4 prefixes assigned to the network interface. You cannot use this option if you use the <code>Ipv4PrefixCount</code> option.
	Ipv4Prefix []string `queryParam:"style=form,explode=true,name=Ipv4Prefix"`
	// The number of IPv4 prefixes that Amazon Web Services automatically assigns to the network interface. You cannot use this option if you use the <code>Ipv4 Prefixes</code> option.
	Ipv4PrefixCount *int64 `queryParam:"style=form,explode=true,name=Ipv4PrefixCount"`
	// The ID of the network interface.
	NetworkInterfaceID string `queryParam:"style=form,explode=true,name=NetworkInterfaceId"`
	// <p>The IP addresses to be assigned as a secondary private IP address to the network interface. You can't specify this parameter when also specifying a number of secondary IP addresses.</p> <p>If you don't specify an IP address, Amazon EC2 automatically selects an IP address within the subnet range.</p>
	PrivateIPAddress []string `queryParam:"style=form,explode=true,name=PrivateIpAddress"`
	// The number of secondary IP addresses to assign to the network interface. You can't specify this parameter when also specifying private IP addresses.
	SecondaryPrivateIPAddressCount *int64                                 `queryParam:"style=form,explode=true,name=SecondaryPrivateIpAddressCount"`
	Version                        GETAssignPrivateIPAddressesVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm                  *string                                `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256              *string                                `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                 *string                                `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                       *string                                `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken              *string                                `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                  *string                                `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders              *string                                `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETAssignPrivateIPAddressesResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
