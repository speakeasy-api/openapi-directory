// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
	"openapi/pkg/types"
)

type DashboardZoomRoomIssueSecurity struct {
	OAuth shared.SchemeOAuth `security:"scheme,type=oauth2"`
}

type DashboardZoomRoomIssueQueryParams struct {
	// Start date in 'yyyy-mm-dd' format. The date range defined by the "from" and "to" parameters should only be one month as the report includes only one month worth of data at once.
	From types.Date `queryParam:"style=form,explode=true,name=from"`
	// End date.
	To types.Date `queryParam:"style=form,explode=true,name=to"`
}

type DashboardZoomRoomIssueRequest struct {
	QueryParams DashboardZoomRoomIssueQueryParams
	Security    DashboardZoomRoomIssueSecurity
}

type DashboardZoomRoomIssue200ApplicationXMLIssues struct {
	// Issue Name.<br> The value of the this field could be one of the following:<br>
	// * `Room Controller disconnected`<br>
	// * `Room Controller connected`
	// * `Selected camera has disconnected`
	// * `Selected camera is reconnected`
	// * `Selected microphone has disconnected`
	// * `Selected microphone is reconnected`
	// * `Selected speaker has disconnected`
	// * `Selected speaker is reconnected`
	// * `Zoom room is offline`
	// * `Zoom room is online`
	// * `High CPU usage is detected`
	// * `Low bandwidth network is detected`
	// * `{name} battery is low`
	// * `{name} battery is normal`
	// * `{name} disconnected`
	// * `{name} connected`
	// * `{name} is not charging`
	//
	// Possible values for {name}: <br>
	// * Zoom Rooms Computer
	// * Controller
	// * Scheduling Display
	IssueName *string
	// Zoom Room Count of Issue
	ZoomRoomsCount *int64
}

// DashboardZoomRoomIssue200ApplicationXML - **HTTP Status Code:** `200`<br>
// Zoom Room Issue details returned
type DashboardZoomRoomIssue200ApplicationXML struct {
	// Start date for this report
	From   *types.Date
	Issues []DashboardZoomRoomIssue200ApplicationXMLIssues
	// End date for this report
	To *types.Date
	// The number of all records available across pages
	TotalRecords *int64
}

type DashboardZoomRoomIssue200ApplicationJSONIssues struct {
	// Issue Name.<br> The value of the this field could be one of the following:<br>
	// * `Room Controller disconnected`<br>
	// * `Room Controller connected`
	// * `Selected camera has disconnected`
	// * `Selected camera is reconnected`
	// * `Selected microphone has disconnected`
	// * `Selected microphone is reconnected`
	// * `Selected speaker has disconnected`
	// * `Selected speaker is reconnected`
	// * `Zoom room is offline`
	// * `Zoom room is online`
	// * `High CPU usage is detected`
	// * `Low bandwidth network is detected`
	// * `{name} battery is low`
	// * `{name} battery is normal`
	// * `{name} disconnected`
	// * `{name} connected`
	// * `{name} is not charging`
	//
	// Possible values for {name}: <br>
	// * Zoom Rooms Computer
	// * Controller
	// * Scheduling Display
	IssueName *string `json:"issue_name,omitempty"`
	// Zoom Room Count of Issue
	ZoomRoomsCount *int64 `json:"zoom_rooms_count,omitempty"`
}

// DashboardZoomRoomIssue200ApplicationJSON - **HTTP Status Code:** `200`<br>
// Zoom Room Issue details returned
type DashboardZoomRoomIssue200ApplicationJSON struct {
	// Start date for this report
	From   *types.Date                                      `json:"from,omitempty"`
	Issues []DashboardZoomRoomIssue200ApplicationJSONIssues `json:"issues,omitempty"`
	// End date for this report
	To *types.Date `json:"to,omitempty"`
	// The number of all records available across pages
	TotalRecords *int64 `json:"total_records,omitempty"`
}

type DashboardZoomRoomIssueResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200`<br>
	// Zoom Room Issue details returned
	DashboardZoomRoomIssue200ApplicationJSONObject *DashboardZoomRoomIssue200ApplicationJSON
}
