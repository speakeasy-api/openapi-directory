/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Category } from "./category";
import { EmbedSettings } from "./embedsettings";
import { OnDemandGenre } from "./ondemandgenre";
import { Picture } from "./picture";
import { PurchaseInteraction } from "./purchaseinteraction";
import { Tag } from "./tag";
import { User } from "./user";
import { Video } from "./video";
import { Expose, Type } from "class-transformer";

export class OnDemandPagePictureSizes extends SpeakeasyBase {
  /**
   * The height of the image.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "height" })
  height: number;

  /**
   * The direct link to the image.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "link" })
  link: string;

  /**
   * The direct link to the image with a play button overlay.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "link_with_play_button" })
  linkWithPlayButton?: string;

  /**
   * The width of the image.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "width" })
  width: number;
}

/**
 * The type of the picture:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `caution` - An image that is appropriate for all ages.
 *  * `custom` - A custom image for the video.
 *  * `default` - The default image for the video.
 *
 */
export enum OnDemandPagePictureTypeEnum {
  Caution = "caution",
  Custom = "custom",
  Default = "default",
}

/**
 * The background image for the On Demand page on Vimeo.
 */
export class OnDemandPagePicture extends SpeakeasyBase {
  /**
   * Whether this picture is the active picture for its parent resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "active" })
  active: boolean;

  /**
   * The upload URL for the picture. This field appears when you create the picture resource for the first time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "link" })
  link?: string;

  /**
   * The picture's resource key string.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resource_key" })
  resourceKey: string;

  /**
   * An array containing reference information about all available image files.
   */
  @SpeakeasyMetadata({ elemType: OnDemandPagePictureSizes })
  @Expose({ name: "sizes" })
  @Type(() => OnDemandPagePictureSizes)
  sizes: OnDemandPagePictureSizes[];

  /**
   * The type of the picture:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `caution` - An image that is appropriate for all ages.
   *  * `custom` - A custom image for the video.
   *  * `default` - The default image for the video.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: OnDemandPagePictureTypeEnum;

  /**
   * The picture's URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * The primary and secondary colors used for rendering this On Demand page.
 */
export class OnDemandPageColors extends SpeakeasyBase {
  /**
   * The hexadecimal color code for the page's primary color.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "primary" })
  primary: string;

  /**
   * The hexadecimal color code for the page's secondary color.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "secondary" })
  secondary: string;
}

export class OnDemandPageEpisodesBuy extends SpeakeasyBase {
  /**
   * Whether all the videos on this On Demand page can be purchased as a whole.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "active" })
  active: boolean;

  /**
   * The default price to buy an episode.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "price" })
  price: number;
}

/**
 * The rental period for the video:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `1 day` - The rental period is one day.
 *  * `1 month` - The rental period is one month.
 *  * `1 week` - The rental period is one week.
 *  * `1 year` - The rental period is one year.
 *  * `2 day` - The rental period is two days.
 *  * `24 hour` - The rental period is 24 hours.
 *  * `3 day` - The rental period is three days.
 *  * `3 month` - The rental period is three months.
 *  * `30 day` - The rental period is 30 days.
 *  * `48 hour` - The rental period is 48 hours.
 *  * `6 month` - The rental period is six months.
 *  * `60 day` - The rental period is 60 days.
 *  * `7 day` - The rental period is 7 days.
 *  * `72 hour` - The rental period is 72 hours.
 *
 */
export enum OnDemandPageEpisodesRentPeriodEnum {
  OneDay = "1 day",
  OneMonth = "1 month",
  OneWeek = "1 week",
  OneYear = "1 year",
  TwoDay = "2 day",
  TwentyFourHour = "24 hour",
  ThreeDay = "3 day",
  ThreeMonth = "3 month",
  ThirtyDay = "30 day",
  FortyEightHour = "48 hour",
  SixMonth = "6 month",
  SixtyDay = "60 day",
  SevenDay = "7 day",
  SeventyTwoHour = "72 hour",
}

export class OnDemandPageEpisodesRent extends SpeakeasyBase {
  /**
   * Whether all the videos on this On Demand page can be rented as a whole.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "active" })
  active: boolean;

  /**
   * The rental period for the video:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `1 day` - The rental period is one day.
   *  * `1 month` - The rental period is one month.
   *  * `1 week` - The rental period is one week.
   *  * `1 year` - The rental period is one year.
   *  * `2 day` - The rental period is two days.
   *  * `24 hour` - The rental period is 24 hours.
   *  * `3 day` - The rental period is three days.
   *  * `3 month` - The rental period is three months.
   *  * `30 day` - The rental period is 30 days.
   *  * `48 hour` - The rental period is 48 hours.
   *  * `6 month` - The rental period is six months.
   *  * `60 day` - The rental period is 60 days.
   *  * `7 day` - The rental period is 7 days.
   *  * `72 hour` - The rental period is 72 hours.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "period" })
  period: OnDemandPageEpisodesRentPeriodEnum;

  /**
   * The default price to rent an episode.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "price" })
  price: number;
}

/**
 * Information about this On Demand page's episodes, if the page is for a series.
 */
export class OnDemandPageEpisodes extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "buy" })
  @Type(() => OnDemandPageEpisodesBuy)
  buy: OnDemandPageEpisodesBuy;

  @SpeakeasyMetadata()
  @Expose({ name: "rent" })
  @Type(() => OnDemandPageEpisodesRent)
  rent: OnDemandPageEpisodesRent;
}

/**
 * Information about the comments associated with this page.
 */
export class OnDemandPageMetadataConnectionsMetadataConnectionsComments extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of comments on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the genres associated with this page.
 */
export class OnDemandPageMetadataConnectionsMetadataConnectionsGenres extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of genres on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the likes associated with this page.
 */
export class OnDemandPageMetadataConnectionsMetadataConnectionsLikes extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of likes on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the pictures associated with this page.
 */
export class OnDemandPageMetadataConnectionsMetadataConnectionsPictures extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of pictures on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the seasons associated with this page.
 */
export class OnDemandPageMetadataConnectionsMetadataConnectionsSeasons extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of seasons on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the videos associated with this page.
 */
export class OnDemandPageMetadataConnectionsMetadataConnectionsVideos extends SpeakeasyBase {
  /**
   * The total number of extra videos.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "extra_total" })
  extraTotal: number;

  /**
   * The total number of main videos.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "main_total" })
  mainTotal: number;

  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of videos on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;

  /**
   * The total number of viewable videos.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "viewable_total" })
  viewableTotal: number;
}

export class OnDemandPageMetadataConnectionsMetadataConnections extends SpeakeasyBase {
  /**
   * Information about the comments associated with this page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "comments" })
  @Type(() => OnDemandPageMetadataConnectionsMetadataConnectionsComments)
  comments: OnDemandPageMetadataConnectionsMetadataConnectionsComments;

  /**
   * Information about the genres associated with this page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "genres" })
  @Type(() => OnDemandPageMetadataConnectionsMetadataConnectionsGenres)
  genres: OnDemandPageMetadataConnectionsMetadataConnectionsGenres;

  /**
   * Information about the likes associated with this page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "likes" })
  @Type(() => OnDemandPageMetadataConnectionsMetadataConnectionsLikes)
  likes: OnDemandPageMetadataConnectionsMetadataConnectionsLikes;

  /**
   * Information about the pictures associated with this page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pictures" })
  @Type(() => OnDemandPageMetadataConnectionsMetadataConnectionsPictures)
  pictures: OnDemandPageMetadataConnectionsMetadataConnectionsPictures;

  /**
   * Information about the seasons associated with this page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "seasons" })
  @Type(() => OnDemandPageMetadataConnectionsMetadataConnectionsSeasons)
  seasons: OnDemandPageMetadataConnectionsMetadataConnectionsSeasons;

  /**
   * Information about the videos associated with this page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "videos" })
  @Type(() => OnDemandPageMetadataConnectionsMetadataConnectionsVideos)
  videos: OnDemandPageMetadataConnectionsMetadataConnectionsVideos;
}

export class OnDemandPageMetadataConnectionsMetadata extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "connections" })
  @Type(() => OnDemandPageMetadataConnectionsMetadataConnections)
  connections: OnDemandPageMetadataConnectionsMetadataConnections;
}

/**
 * A collection of information that is connected to this resource, including videos, genres, and pictures connections.
 */
export class OnDemandPageMetadataConnections extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  @Type(() => OnDemandPageMetadataConnectionsMetadata)
  metadata: OnDemandPageMetadataConnectionsMetadata;
}

/**
 * Metadata about the On Demand page.
 */
export class OnDemandPageMetadata extends SpeakeasyBase {
  /**
   * A collection of information that is connected to this resource, including videos, genres, and pictures connections.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "connections" })
  @Type(() => OnDemandPageMetadataConnections)
  connections: OnDemandPageMetadataConnections;

  /**
   * The user's available purchase interactions.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "interactions" })
  @Type(() => PurchaseInteraction)
  interactions: PurchaseInteraction;
}

export class OnDemandPagePreorder extends SpeakeasyBase {
  /**
   * Whether this page is available for preorder.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "active" })
  active: boolean;

  /**
   * The time in ISO 8601 format when the preorder was cancelled.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cancel_time" })
  cancelTime: string;

  /**
   * The time in ISO 8601 format when the preorder was released to the public.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "publish_time" })
  publishTime: string;

  /**
   * The time in ISO 8601 format when the preorder started.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "time" })
  time: string;
}

export class OnDemandPagePublished extends SpeakeasyBase {
  /**
   * Whether this On Demand page has been published.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled: boolean;

  /**
   * The time in IS 8601 format when this page was published.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "time" })
  time: string;
}

/**
 * Information about subscribing to this On Demand page, if enabled.
 */
export class OnDemandPageSubscription extends SpeakeasyBase {
  /**
   * Whether this product is active.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "active" })
  active: boolean;

  /**
   * The link to this product on Vimeo.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "link" })
  link: string;

  /**
   * The product's rental period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "period" })
  period?: string;

  /**
   * The accepted currencies and respective pricing for this product.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "price" })
  price: Record<string, any>;
}

/**
 * The contextual action:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `Added to` - An Added To action.
 *  * `Appearance by` - An Appearance By action.
 *  * `Liked by` - A Liked By action.
 *  * `Uploaded by` - An Unloaded By action.
 *
 */
export enum OnDemandPageVideoContextActionEnum {
  AddedTo = "Added to",
  AppearanceBy = "Appearance by",
  LikedBy = "Liked by",
  UploadedBy = "Uploaded by",
}

/**
 * The context of the video's subscription, if this video is part of a subscription.
 */
export class OnDemandPageVideoContext extends SpeakeasyBase {
  /**
   * The contextual action:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `Added to` - An Added To action.
   *  * `Appearance by` - An Appearance By action.
   *  * `Liked by` - A Liked By action.
   *  * `Uploaded by` - An Unloaded By action.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "action" })
  action: OnDemandPageVideoContextActionEnum;

  /**
   * The contextual resource: a user, group, or channel representation, or an object of a tag.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resource" })
  resource: Record<string, any>;

  /**
   * The contextual resource type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resource_type" })
  resourceType: string;
}

/**
 * The [Creative Commons](http://creativecommons.org/licenses/) license used for the video:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `by` - Attribution
 *  * `by-nc` - Attribution Non-Commercial
 *  * `by-nc-nd` - Attribution Non-Commercial No Derivatives
 *  * `by-nc-sa` - Attribution Non-Commercial Share Alike
 *  * `by-nd` - Attribution No Derivatives
 *  * `by-sa` - Attribution Share Alike
 *  * `cc0` - Public Domain Dedication
 *
 */
export enum OnDemandPageVideoLicenseEnum {
  By = "by",
  ByNc = "by-nc",
  ByNcNd = "by-nc-nd",
  ByNcSa = "by-nc-sa",
  ByNd = "by-nd",
  BySa = "by-sa",
  Cc0 = "cc0",
}

/**
 * Information about the comments on this video.
 */
export class OnDemandPageVideoMetadataConnectionsComments extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of comments on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the users credited in this video.
 */
export class OnDemandPageVideoMetadataConnectionsCredits extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options?: string[];

  /**
   * The total number of users on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total?: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri?: string;
}

/**
 * Information about the users who have liked this video.
 */
export class OnDemandPageVideoMetadataConnectionsLikes extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of likes on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this video's ondemand data.
 */
export class OnDemandPageVideoMetadataConnectionsOndemand extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The On Demand connection resource key.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resource_key" })
  resourceKey: string;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this video's thumbnails.
 */
export class OnDemandPageVideoMetadataConnectionsPictures extends SpeakeasyBase {
  /**
   * An array of HTTP methods allowed on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * Total number of thumbnails on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * The DRM playback status connection for this video.
 */
export class OnDemandPageVideoMetadataConnectionsPlayback extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * The recommendations for this video.
 */
export class OnDemandPageVideoMetadataConnectionsRecommendations extends SpeakeasyBase {
  /**
   * An array of HTTP methods allowed on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options?: string[];

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri?: string;
}

/**
 * Related content for this video.
 */
export class OnDemandPageVideoMetadataConnectionsRelated extends SpeakeasyBase {
  /**
   * An array of HTTP methods allowed on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options?: string[];

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri?: string;
}

/**
 * Information about the video's season.
 */
export class OnDemandPageVideoMetadataConnectionsSeason extends SpeakeasyBase {
  /**
   * The name of this season.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this video's text tracks.
 */
export class OnDemandPageVideoMetadataConnectionsTexttracks extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of text tracks on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this video's VOD trailer.
 */
export class OnDemandPageVideoMetadataConnectionsTrailer extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The trailer connection resource key.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resource_key" })
  resourceKey: string;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the user privacy of this video, if the video privacy is `users`.
 */
export class OnDemandPageVideoMetadataConnectionsUsersWithAccess extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of users on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the versions of this video.
 */
export class OnDemandPageVideoMetadataConnectionsVersions extends SpeakeasyBase {
  /**
   * The URI of the current version of the video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "current_uri" })
  currentUri?: string;

  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of versions on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * A list of resource URIs related to the video.
 */
export class OnDemandPageVideoMetadataConnections extends SpeakeasyBase {
  /**
   * Information about the comments on this video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "comments" })
  @Type(() => OnDemandPageVideoMetadataConnectionsComments)
  comments: OnDemandPageVideoMetadataConnectionsComments;

  /**
   * Information about the users credited in this video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "credits" })
  @Type(() => OnDemandPageVideoMetadataConnectionsCredits)
  credits: OnDemandPageVideoMetadataConnectionsCredits;

  /**
   * Information about the users who have liked this video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "likes" })
  @Type(() => OnDemandPageVideoMetadataConnectionsLikes)
  likes: OnDemandPageVideoMetadataConnectionsLikes;

  /**
   * Information about this video's ondemand data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ondemand" })
  @Type(() => OnDemandPageVideoMetadataConnectionsOndemand)
  ondemand: OnDemandPageVideoMetadataConnectionsOndemand;

  /**
   * Information about this video's thumbnails.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pictures" })
  @Type(() => OnDemandPageVideoMetadataConnectionsPictures)
  pictures: OnDemandPageVideoMetadataConnectionsPictures;

  /**
   * The DRM playback status connection for this video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "playback" })
  @Type(() => OnDemandPageVideoMetadataConnectionsPlayback)
  playback: OnDemandPageVideoMetadataConnectionsPlayback;

  /**
   * The recommendations for this video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recommendations" })
  @Type(() => OnDemandPageVideoMetadataConnectionsRecommendations)
  recommendations: OnDemandPageVideoMetadataConnectionsRecommendations;

  /**
   * Related content for this video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "related" })
  @Type(() => OnDemandPageVideoMetadataConnectionsRelated)
  related: OnDemandPageVideoMetadataConnectionsRelated;

  /**
   * Information about the video's season.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "season" })
  @Type(() => OnDemandPageVideoMetadataConnectionsSeason)
  season: OnDemandPageVideoMetadataConnectionsSeason;

  /**
   * Information about this video's text tracks.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "texttracks" })
  @Type(() => OnDemandPageVideoMetadataConnectionsTexttracks)
  texttracks: OnDemandPageVideoMetadataConnectionsTexttracks;

  /**
   * Information about this video's VOD trailer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "trailer" })
  @Type(() => OnDemandPageVideoMetadataConnectionsTrailer)
  trailer: OnDemandPageVideoMetadataConnectionsTrailer;

  /**
   * Information about the user privacy of this video, if the video privacy is `users`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "users_with_access" })
  @Type(() => OnDemandPageVideoMetadataConnectionsUsersWithAccess)
  usersWithAccess: OnDemandPageVideoMetadataConnectionsUsersWithAccess;

  /**
   * Information about the versions of this video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "versions" })
  @Type(() => OnDemandPageVideoMetadataConnectionsVersions)
  versions: OnDemandPageVideoMetadataConnectionsVersions;
}

/**
 * The user's download access to this On Demand video:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `available` - The video is available for download.
 *  * `purchased` - The user has purchased the video.
 *  * `restricted` - The user isn't permitted to download the video.
 *  * `unavailable` - The video isn't available for download.
 *
 */
export enum OnDemandPageVideoMetadataInteractionsBuyDownloadEnum {
  Available = "available",
  Purchased = "purchased",
  Restricted = "restricted",
  Unavailable = "unavailable",
}

/**
 * The user's streaming access to this On Demand video:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `available` - The video is available for streaming.
 *  * `purchased` - The user has purchased the video.
 *  * `restricted` - The user isn't permitted to stream the video.
 *  * `unavailable` - The video isn't available for streaming
 *
 */
export enum OnDemandPageVideoMetadataInteractionsBuyStreamEnum {
  Available = "available",
  Purchased = "purchased",
  Restricted = "restricted",
  Unavailable = "unavailable",
}

/**
 * The Buy interaction for a On Demand video.
 */
export class OnDemandPageVideoMetadataInteractionsBuy extends SpeakeasyBase {
  /**
   * The currency code for the current user's region.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency: string;

  /**
   * Formatted price to display to buy an On Demand video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "display_price" })
  displayPrice: string;

  /**
   * The user's download access to this On Demand video:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `available` - The video is available for download.
   *  * `purchased` - The user has purchased the video.
   *  * `restricted` - The user isn't permitted to download the video.
   *  * `unavailable` - The video isn't available for download.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "download" })
  download: OnDemandPageVideoMetadataInteractionsBuyDownloadEnum;

  /**
   * Whether the video has DRM.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "drm" })
  drm: boolean;

  /**
   * The URL to buy the On Demand video on Vimeo.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "link" })
  link: string;

  /**
   * The numeric value of the price for buying the On Demand video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "price" })
  price: number;

  /**
   * The time in ISO 8601 format when the On Demand video was purchased.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "purchase_time" })
  purchaseTime: string;

  /**
   * The user's streaming access to this On Demand video:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `available` - The video is available for streaming.
   *  * `purchased` - The user has purchased the video.
   *  * `restricted` - The user isn't permitted to stream the video.
   *  * `unavailable` - The video isn't available for streaming
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stream" })
  stream: OnDemandPageVideoMetadataInteractionsBuyStreamEnum;

  /**
   * The product URI to purchase the On Demand video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * When a video is referenced by a channel URI, if the user is a moderator of the channel, include information about removing the video from the channel.
 */
export class OnDemandPageVideoMetadataInteractionsChannel extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about whether the authenticated user has liked this video.
 */
export class OnDemandPageVideoMetadataInteractionsLike extends SpeakeasyBase {
  /**
   * Whether the user has liked the video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "added" })
  added: boolean;

  /**
   * The time in ISO 8601 format when the user liked the video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "added_time" })
  addedTime: string;

  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * The user's streaming access to this On Demand video:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `available` - The video is available for streaming.
 *  * `purchased` - The user has purchased the video.
 *  * `restricted` - The user isn't permitted to stream the video.
 *  * `unavailable` - The video isn't available for streaming.
 *
 */
export enum OnDemandPageVideoMetadataInteractionsRentStreamEnum {
  Available = "available",
  Purchased = "purchased",
  Restricted = "restricted",
  Unavailable = "unavailable",
}

/**
 * The Rent interaction for an On Demand video.
 */
export class OnDemandPageVideoMetadataInteractionsRent extends SpeakeasyBase {
  /**
   * The currency code for the current user's region.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency: string;

  /**
   * Formatted price to display to rent an On Demand video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "display_price" })
  displayPrice: string;

  /**
   * Whether the video has DRM.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "drm" })
  drm: boolean;

  /**
   * The time in ISO 8601 format when the rental period for the video expires.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expires_time" })
  expiresTime: string;

  /**
   * The URL to rent the On Demand video on Vimeo.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "link" })
  link: string;

  /**
   * The numeric value of the price for buying the On Demand video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "price" })
  price: number;

  /**
   * The time in ISO 8601 format when the On Demand video was rented.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "purchase_time" })
  purchaseTime: string;

  /**
   * The user's streaming access to this On Demand video:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `available` - The video is available for streaming.
   *  * `purchased` - The user has purchased the video.
   *  * `restricted` - The user isn't permitted to stream the video.
   *  * `unavailable` - The video isn't available for streaming.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stream" })
  stream: OnDemandPageVideoMetadataInteractionsRentStreamEnum;

  /**
   * The product URI to rent the On Demand video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about where and how to report a video.
 */
export class OnDemandPageVideoMetadataInteractionsReport extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * A list of valid reasons for reporting a video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reason" })
  reason: string[];

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Subscription information for an On Demand video.
 */
export class OnDemandPageVideoMetadataInteractionsSubscribe extends SpeakeasyBase {
  /**
   * Whether the video has DRM.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "drm" })
  drm?: boolean;

  /**
   * The time in ISO 8601 format when the subscription expires.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expires_time" })
  expiresTime?: string;

  /**
   * The tine in ISO 8601 format when the subscription was purchased.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "purchase_time" })
  purchaseTime?: string;

  /**
   * The stream type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stream" })
  stream?: string;
}

/**
 * Information about removing this video from the user's list of watched videos.
 */
export class OnDemandPageVideoMetadataInteractionsWatched extends SpeakeasyBase {
  /**
   * Whether the user has watched the video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "added" })
  added: boolean;

  /**
   * The time in ISO 8601 format when the user watched the video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "added_time" })
  addedTime: string;

  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about whether this video appears on the authenticated user's Watch Later list.
 */
export class OnDemandPageVideoMetadataInteractionsWatchlater extends SpeakeasyBase {
  /**
   * Whether the user has added the video to their Watch later list.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "added" })
  added: boolean;

  /**
   * The time in ISO 8601 format when the user added the video to their Watch Later list.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "added_time" })
  addedTime: string;

  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * A list of resource URIs related to the video.
 */
export class OnDemandPageVideoMetadataInteractions extends SpeakeasyBase {
  /**
   * The Buy interaction for a On Demand video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "buy" })
  @Type(() => OnDemandPageVideoMetadataInteractionsBuy)
  buy: OnDemandPageVideoMetadataInteractionsBuy;

  /**
   * When a video is referenced by a channel URI, if the user is a moderator of the channel, include information about removing the video from the channel.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channel" })
  @Type(() => OnDemandPageVideoMetadataInteractionsChannel)
  channel: OnDemandPageVideoMetadataInteractionsChannel;

  /**
   * Information about whether the authenticated user has liked this video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "like" })
  @Type(() => OnDemandPageVideoMetadataInteractionsLike)
  like: OnDemandPageVideoMetadataInteractionsLike;

  /**
   * The Rent interaction for an On Demand video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rent" })
  @Type(() => OnDemandPageVideoMetadataInteractionsRent)
  rent: OnDemandPageVideoMetadataInteractionsRent;

  /**
   * Information about where and how to report a video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "report" })
  @Type(() => OnDemandPageVideoMetadataInteractionsReport)
  report: OnDemandPageVideoMetadataInteractionsReport;

  /**
   * Subscription information for an On Demand video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subscribe" })
  @Type(() => OnDemandPageVideoMetadataInteractionsSubscribe)
  subscribe?: OnDemandPageVideoMetadataInteractionsSubscribe;

  /**
   * Information about removing this video from the user's list of watched videos.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "watched" })
  @Type(() => OnDemandPageVideoMetadataInteractionsWatched)
  watched: OnDemandPageVideoMetadataInteractionsWatched;

  /**
   * Information about whether this video appears on the authenticated user's Watch Later list.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "watchlater" })
  @Type(() => OnDemandPageVideoMetadataInteractionsWatchlater)
  watchlater: OnDemandPageVideoMetadataInteractionsWatchlater;
}

/**
 * The video's metadata.
 */
export class OnDemandPageVideoMetadata extends SpeakeasyBase {
  /**
   * A list of resource URIs related to the video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "connections" })
  @Type(() => OnDemandPageVideoMetadataConnections)
  connections: OnDemandPageVideoMetadataConnections;

  /**
   * A list of resource URIs related to the video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "interactions" })
  @Type(() => OnDemandPageVideoMetadataInteractions)
  interactions: OnDemandPageVideoMetadataInteractions;
}

/**
 * A standard connection object indicating how to get all the videos in this project.
 */
export class OnDemandPageVideoProjectMetadataConnectionsVideos extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of videos on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * A list of resource URIs related to the project.
 */
export class OnDemandPageVideoProjectMetadataConnections extends SpeakeasyBase {
  /**
   * A standard connection object indicating how to get all the videos in this project.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "videos" })
  @Type(() => OnDemandPageVideoProjectMetadataConnectionsVideos)
  videos: OnDemandPageVideoProjectMetadataConnectionsVideos;
}

/**
 * The project's metadata.
 */
export class OnDemandPageVideoProjectMetadata extends SpeakeasyBase {
  /**
   * A list of resource URIs related to the project.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "connections" })
  @Type(() => OnDemandPageVideoProjectMetadataConnections)
  connections: OnDemandPageVideoProjectMetadataConnections;
}

/**
 * Information about the folder that contains this video.
 */
export class OnDemandPageVideoProject extends SpeakeasyBase {
  /**
   * The time in ISO 8601 format when the project was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_time" })
  createdTime: string;

  /**
   * The project's metadata.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  @Type(() => OnDemandPageVideoProjectMetadata)
  metadata: OnDemandPageVideoProjectMetadata;

  /**
   * The time in ISO 8601 format when the project was last modified.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "modified_time" })
  modifiedTime: string;

  /**
   * The name of the folder.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * The resource key string of the project.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resource_key" })
  resourceKey: string;

  /**
   * The URI of the project.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;

  /**
   * The owner of the project.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  @Type(() => User)
  user: User;
}

/**
 * Who can comment on the video:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `anybody` - Anyone can comment on the video.
 *  * `contacts` - Only contacts can comment on the video.
 *  * `nobody` - No one can comment on the video.
 *
 */
export enum OnDemandPageVideoPrivacyCommentsEnum {
  Anybody = "anybody",
  Contacts = "contacts",
  Nobody = "nobody",
}

/**
 * The video's embed permission setting:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `private` - The video is private.
 *  * `public` - Anyone can embed the video.
 *
 */
export enum OnDemandPageVideoPrivacyEmbedEnum {
  Private = "private",
  Public = "public",
}

/**
 * The general privacy setting for the video:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `anybody` - Anyone can view the video.
 *  * `contacts` - Only contacts can view the video.
 *  * `disable` - Hide from vimeo
 *  * `nobody` - No one besides the owner can view the video.
 *  * `password` - Anyone with the video's password can view the video.
 *  * `unlisted` - Not searchable from vimeo.com
 *  * `users` - Only people with a Vimeo account can view the video.
 *
 */
export enum OnDemandPageVideoPrivacyViewEnum {
  Anybody = "anybody",
  Contacts = "contacts",
  Disable = "disable",
  Nobody = "nobody",
  Password = "password",
  Unlisted = "unlisted",
  Users = "users",
}

/**
 * The video's privacy setting.
 */
export class OnDemandPageVideoPrivacy extends SpeakeasyBase {
  /**
   * Whether the video can be added to collections.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "add" })
  add: boolean;

  /**
   * Who can comment on the video:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `anybody` - Anyone can comment on the video.
   *  * `contacts` - Only contacts can comment on the video.
   *  * `nobody` - No one can comment on the video.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "comments" })
  comments: OnDemandPageVideoPrivacyCommentsEnum;

  /**
   * The video's download permission setting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "download" })
  download: boolean;

  /**
   * The video's embed permission setting:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `private` - The video is private.
   *  * `public` - Anyone can embed the video.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "embed" })
  embed: OnDemandPageVideoPrivacyEmbedEnum;

  /**
   * The general privacy setting for the video:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `anybody` - Anyone can view the video.
   *  * `contacts` - Only contacts can view the video.
   *  * `disable` - Hide from vimeo
   *  * `nobody` - No one besides the owner can view the video.
   *  * `password` - Anyone with the video's password can view the video.
   *  * `unlisted` - Not searchable from vimeo.com
   *  * `users` - Only people with a Vimeo account can view the video.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "view" })
  view: OnDemandPageVideoPrivacyViewEnum;
}

export class OnDemandPageVideoSpatialDirectorTimeline extends SpeakeasyBase {
  /**
   * The director timeline pitch, from -90 (minimum) to 90 (maximum).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pitch" })
  pitch?: number;

  /**
   * The director timeline roll.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "roll" })
  roll?: number;

  /**
   * The director timeline time code.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "time_code" })
  timeCode?: number;

  /**
   * The director timeline yaw, from 0 (minimum) to 360 (maximum).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "yaw" })
  yaw?: number;
}

/**
 * The 360 spatial projection:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `cubical` - The spatial projection is cubical.
 *  * `cylindrical` - The spatial projection is cylindrical.
 *  * `dome` - The spatial projection is dome-shaped.
 *  * `equirectangular` - The spatial projection is equirectangular.
 *  * `pyramid` - The spatial projection is pyramid-shaped.
 *
 */
export enum OnDemandPageVideoSpatialProjectionEnum {
  Cubical = "cubical",
  Cylindrical = "cylindrical",
  Dome = "dome",
  Equirectangular = "equirectangular",
  Pyramid = "pyramid",
}

/**
 * The 360 stereo format:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `left-right` - The stereo format is left-right.
 *  * `mono` - The audio is monaural.
 *  * `top-bottom` - The stereo format is top-bottom.
 *
 */
export enum OnDemandPageVideoSpatialStereoFormatEnum {
  LeftRight = "left-right",
  Mono = "mono",
  TopBottom = "top-bottom",
}

/**
 * 360 spatial data.
 */
export class OnDemandPageVideoSpatial extends SpeakeasyBase {
  /**
   * 360 director timeline.
   */
  @SpeakeasyMetadata({ elemType: OnDemandPageVideoSpatialDirectorTimeline })
  @Expose({ name: "director_timeline" })
  @Type(() => OnDemandPageVideoSpatialDirectorTimeline)
  directorTimeline: OnDemandPageVideoSpatialDirectorTimeline[];

  /**
   * The 360 field of view, from 30 (minimum) to 90 (maximum). The default is 50.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "field_of_view" })
  fieldOfView: number;

  /**
   * The 360 spatial projection:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `cubical` - The spatial projection is cubical.
   *  * `cylindrical` - The spatial projection is cylindrical.
   *  * `dome` - The spatial projection is dome-shaped.
   *  * `equirectangular` - The spatial projection is equirectangular.
   *  * `pyramid` - The spatial projection is pyramid-shaped.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "projection" })
  projection: OnDemandPageVideoSpatialProjectionEnum;

  /**
   * The 360 stereo format:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `left-right` - The stereo format is left-right.
   *  * `mono` - The audio is monaural.
   *  * `top-bottom` - The stereo format is top-bottom.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stereo_format" })
  stereoFormat: OnDemandPageVideoSpatialStereoFormatEnum;
}

/**
 * A collection of stats associated with this video.
 */
export class OnDemandPageVideoStats extends SpeakeasyBase {
  /**
   * The current total number of times that the video has been played.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "plays" })
  plays: number;
}

/**
 * The status code for the availability of the video. This field is deprecated in favor of `upload` and `transcode`.
 *
 * @remarks
 *
 * Option descriptions:
 *  * `available` - The video is available.
 *  * `quota_exceeded` - The user's quota is exceeded with this video.
 *  * `total_cap_exceeded` - The user has exceeded their total cap with this video.
 *  * `transcode_starting` - Transcoding is beginning for the video.
 *  * `transcoding` - Transcoding is underway for the video.
 *  * `transcoding_error` - There was an error in transcoding the video.
 *  * `unavailable` - The video is unavailable.
 *  * `uploading` - The video is being uploaded.
 *  * `uploading_error` - There was an error in uploading the video.
 *
 */
export enum OnDemandPageVideoStatusEnum {
  Available = "available",
  QuotaExceeded = "quota_exceeded",
  TotalCapExceeded = "total_cap_exceeded",
  TranscodeStarting = "transcode_starting",
  Transcoding = "transcoding",
  TranscodingError = "transcoding_error",
  Unavailable = "unavailable",
  Uploading = "uploading",
  UploadingError = "uploading_error",
}

/**
 * Status code for this video's availability.
 */
export enum OnDemandPageVideoTranscodeStatusEnum {
  Complete = "complete",
  Error = "error",
  InProgress = "in_progress",
}

/**
 * The transcode information for a video upload.
 */
export class OnDemandPageVideoTranscode extends SpeakeasyBase {
  /**
   * Status code for this video's availability.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: OnDemandPageVideoTranscodeStatusEnum;
}

/**
 * The approach for uploading the video.
 */
export enum OnDemandPageVideoUploadApproachEnum {
  Post = "post",
  Pull = "pull",
  Streaming = "streaming",
  Tus = "tus",
}

/**
 * The status code for the availability of the uploaded video:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `complete` - The upload is complete.
 *  * `error` - The upload ended with an error.
 *  * `in_progress` - The upload is underway.
 *
 */
export enum OnDemandPageVideoUploadStatusEnum {
  Complete = "complete",
  Error = "error",
  InProgress = "in_progress",
}

/**
 * The upload information for this video.
 */
export class OnDemandPageVideoUpload extends SpeakeasyBase {
  /**
   * The approach for uploading the video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "approach" })
  approach?: OnDemandPageVideoUploadApproachEnum;

  /**
   * The URI for completing the upload.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "complete_uri" })
  completeUri?: string;

  /**
   * The HTML form for uploading a video through the post approach.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "form" })
  form?: string;

  /**
   * The link of the video to capture through the pull approach.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "link" })
  link?: string;

  /**
   * The redirect URL for the upload app.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "redirect_url" })
  redirectUrl?: string;

  /**
   * The file size in bytes of the uploaded video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "size" })
  size?: number;

  /**
   * The status code for the availability of the uploaded video:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `complete` - The upload is complete.
   *  * `error` - The upload ended with an error.
   *  * `in_progress` - The upload is underway.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: OnDemandPageVideoUploadStatusEnum;

  /**
   * The link for sending video file data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "upload_link" })
  uploadLink?: string;
}

/**
 * The user's account type:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `basic` - The user has a Vimeo Basic subscription.
 *  * `business` - The user has a Vimeo Business subscription.
 *  * `live_business` - The user has a Vimeo Business Live subscription.
 *  * `live_premium` - The user has a Vimeo Premium subscription.
 *  * `live_pro` - The user has a Vimeo PRO Live subscription.
 *  * `plus` - The user has a Vimeo Plus subscription.
 *  * `pro` - The user has a Vimeo Pro subscription.
 *  * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
 *  * `producer` - The user has a Vimeo Producer subscription.
 *
 */
export enum OnDemandPageVideoUserAccountEnum {
  Basic = "basic",
  Business = "business",
  LiveBusiness = "live_business",
  LivePremium = "live_premium",
  LivePro = "live_pro",
  Plus = "plus",
  Pro = "pro",
  ProUnlimited = "pro_unlimited",
  Producer = "producer",
}

/**
 * The user's content filters:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `drugs` - Drugs or alcohol use.
 *  * `language` - Profanity or sexually suggestive content.
 *  * `nudity` - Nudity.
 *  * `safe` - Suitable for all audiences.
 *  * `unrated` - No rating.
 *  * `violence` - Violent or graphic content.
 *
 */
export enum OnDemandPageVideoUserContentFilterEnum {
  Drugs = "drugs",
  Language = "language",
  Nudity = "nudity",
  Safe = "safe",
  Unrated = "unrated",
  Violence = "violence",
}

/**
 * Information about the albums created by this user.
 */
export class OnDemandPageVideoUserMetadataConnectionsAlbums extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of albums on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the appearances of this user in other videos.
 */
export class OnDemandPageVideoUserMetadataConnectionsAppearances extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of appearances on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information on the users that the current user has blocked. This data requires a bearer token with the `private` scope.
 */
export class OnDemandPageVideoUserMetadataConnectionsBlock extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of blocked users on this connection. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this user's followed categories.
 */
export class OnDemandPageVideoUserMetadataConnectionsCategories extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of categories on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this user's subscribed channels.
 */
export class OnDemandPageVideoUserMetadataConnectionsChannels extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of channels on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this user's feed.
 */
export class OnDemandPageVideoUserMetadataConnectionsFeed extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this user's folders.
 */
export class OnDemandPageVideoUserMetadataConnectionsFolders extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of folders on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the user's followers.
 */
export class OnDemandPageVideoUserMetadataConnectionsFollowers extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of followers on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the users that the current user is following.
 */
export class OnDemandPageVideoUserMetadataConnectionsFollowing extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of users on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the groups created by this user.
 */
export class OnDemandPageVideoUserMetadataConnectionsGroups extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of groups on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the videos that this user has liked.
 */
export class OnDemandPageVideoUserMetadataConnectionsLikes extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of likes on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the channels that this user moderates.
 */
export class OnDemandPageVideoUserMetadataConnectionsModeratedChannels extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of channels on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this user's portraits.
 */
export class OnDemandPageVideoUserMetadataConnectionsPictures extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of pictures on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this user's portfolios.
 */
export class OnDemandPageVideoUserMetadataConnectionsPortfolios extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of portfolios on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * A collection of recommended channels for the current user to follow. This data requires a bearer token with the `private` scope.
 */
export class OnDemandPageVideoUserMetadataConnectionsRecommendedChannels extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of channels on this connection. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * A Collection of recommended users for the current user to follow. This data requires a bearer token with the `private` scope.
 */
export class OnDemandPageVideoUserMetadataConnectionsRecommendedUsers extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of users on this connection. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the videos that have been shared with this user.
 */
export class OnDemandPageVideoUserMetadataConnectionsShared extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of videos on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the videos uploaded by this user.
 */
export class OnDemandPageVideoUserMetadataConnectionsVideos extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of videos on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the videos that this user has watched.
 */
export class OnDemandPageVideoUserMetadataConnectionsWatchedVideos extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of videos on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the videos that this user wants to watch later.
 */
export class OnDemandPageVideoUserMetadataConnectionsWatchlater extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of videos on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * The list of resource URIs related to the user.
 */
export class OnDemandPageVideoUserMetadataConnections extends SpeakeasyBase {
  /**
   * Information about the albums created by this user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "albums" })
  @Type(() => OnDemandPageVideoUserMetadataConnectionsAlbums)
  albums: OnDemandPageVideoUserMetadataConnectionsAlbums;

  /**
   * Information about the appearances of this user in other videos.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "appearances" })
  @Type(() => OnDemandPageVideoUserMetadataConnectionsAppearances)
  appearances: OnDemandPageVideoUserMetadataConnectionsAppearances;

  /**
   * Information on the users that the current user has blocked. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "block" })
  @Type(() => OnDemandPageVideoUserMetadataConnectionsBlock)
  block: OnDemandPageVideoUserMetadataConnectionsBlock;

  /**
   * Information about this user's followed categories.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "categories" })
  @Type(() => OnDemandPageVideoUserMetadataConnectionsCategories)
  categories: OnDemandPageVideoUserMetadataConnectionsCategories;

  /**
   * Information about this user's subscribed channels.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channels" })
  @Type(() => OnDemandPageVideoUserMetadataConnectionsChannels)
  channels: OnDemandPageVideoUserMetadataConnectionsChannels;

  /**
   * Information about this user's feed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "feed" })
  @Type(() => OnDemandPageVideoUserMetadataConnectionsFeed)
  feed: OnDemandPageVideoUserMetadataConnectionsFeed;

  /**
   * Information about this user's folders.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "folders" })
  @Type(() => OnDemandPageVideoUserMetadataConnectionsFolders)
  folders: OnDemandPageVideoUserMetadataConnectionsFolders;

  /**
   * Information about the user's followers.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "followers" })
  @Type(() => OnDemandPageVideoUserMetadataConnectionsFollowers)
  followers: OnDemandPageVideoUserMetadataConnectionsFollowers;

  /**
   * Information about the users that the current user is following.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "following" })
  @Type(() => OnDemandPageVideoUserMetadataConnectionsFollowing)
  following: OnDemandPageVideoUserMetadataConnectionsFollowing;

  /**
   * Information about the groups created by this user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "groups" })
  @Type(() => OnDemandPageVideoUserMetadataConnectionsGroups)
  groups: OnDemandPageVideoUserMetadataConnectionsGroups;

  /**
   * Information about the videos that this user has liked.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "likes" })
  @Type(() => OnDemandPageVideoUserMetadataConnectionsLikes)
  likes: OnDemandPageVideoUserMetadataConnectionsLikes;

  /**
   * Information about the channels that this user moderates.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "moderated_channels" })
  @Type(() => OnDemandPageVideoUserMetadataConnectionsModeratedChannels)
  moderatedChannels: OnDemandPageVideoUserMetadataConnectionsModeratedChannels;

  /**
   * Information about this user's portraits.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pictures" })
  @Type(() => OnDemandPageVideoUserMetadataConnectionsPictures)
  pictures: OnDemandPageVideoUserMetadataConnectionsPictures;

  /**
   * Information about this user's portfolios.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "portfolios" })
  @Type(() => OnDemandPageVideoUserMetadataConnectionsPortfolios)
  portfolios: OnDemandPageVideoUserMetadataConnectionsPortfolios;

  /**
   * A collection of recommended channels for the current user to follow. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recommended_channels" })
  @Type(() => OnDemandPageVideoUserMetadataConnectionsRecommendedChannels)
  recommendedChannels: OnDemandPageVideoUserMetadataConnectionsRecommendedChannels;

  /**
   * A Collection of recommended users for the current user to follow. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recommended_users" })
  @Type(() => OnDemandPageVideoUserMetadataConnectionsRecommendedUsers)
  recommendedUsers: OnDemandPageVideoUserMetadataConnectionsRecommendedUsers;

  /**
   * Information about the videos that have been shared with this user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shared" })
  @Type(() => OnDemandPageVideoUserMetadataConnectionsShared)
  shared: OnDemandPageVideoUserMetadataConnectionsShared;

  /**
   * Information about the videos uploaded by this user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "videos" })
  @Type(() => OnDemandPageVideoUserMetadataConnectionsVideos)
  videos: OnDemandPageVideoUserMetadataConnectionsVideos;

  /**
   * Information about the videos that this user has watched.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "watched_videos" })
  @Type(() => OnDemandPageVideoUserMetadataConnectionsWatchedVideos)
  watchedVideos: OnDemandPageVideoUserMetadataConnectionsWatchedVideos;

  /**
   * Information about the videos that this user wants to watch later.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "watchlater" })
  @Type(() => OnDemandPageVideoUserMetadataConnectionsWatchlater)
  watchlater: OnDemandPageVideoUserMetadataConnectionsWatchlater;
}

export class OnDemandPageVideoUserMetadataInteractionsAddPrivacyUser extends SpeakeasyBase {
  /**
   * An array of the HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options?: string[];

  /**
   * The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri?: string;
}

/**
 * Information related to the block status of this user.
 */
export class OnDemandPageVideoUserMetadataInteractionsBlock extends SpeakeasyBase {
  /**
   * Whether a user is blocking the current user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "added" })
  added: boolean;

  /**
   * The time in ISO 8601 format when the block occurred, or the null value if no block exists.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "added_time" })
  addedTime: string;

  /**
   * An array of the HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The URI to block or unblock the user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information related to the followed status of this user.
 */
export class OnDemandPageVideoUserMetadataInteractionsFollow extends SpeakeasyBase {
  /**
   * Whether a user is following the current user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "added" })
  added: boolean;

  /**
   * An array of the HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The URI to follow the user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information regarding where and how to report a user.
 */
export class OnDemandPageVideoUserMetadataInteractionsReport extends SpeakeasyBase {
  /**
   * An array of the HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * List of valid reasons for reporting a video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reason" })
  reason: string[];

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

export class OnDemandPageVideoUserMetadataInteractions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "add_privacy_user" })
  @Type(() => OnDemandPageVideoUserMetadataInteractionsAddPrivacyUser)
  addPrivacyUser?: OnDemandPageVideoUserMetadataInteractionsAddPrivacyUser;

  /**
   * Information related to the block status of this user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "block" })
  @Type(() => OnDemandPageVideoUserMetadataInteractionsBlock)
  block: OnDemandPageVideoUserMetadataInteractionsBlock;

  /**
   * Information related to the followed status of this user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "follow" })
  @Type(() => OnDemandPageVideoUserMetadataInteractionsFollow)
  follow: OnDemandPageVideoUserMetadataInteractionsFollow;

  /**
   * Information regarding where and how to report a user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "report" })
  @Type(() => OnDemandPageVideoUserMetadataInteractionsReport)
  report: OnDemandPageVideoUserMetadataInteractionsReport;
}

/**
 * The user's metadata.
 */
export class OnDemandPageVideoUserMetadata extends SpeakeasyBase {
  /**
   * The list of resource URIs related to the user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "connections" })
  @Type(() => OnDemandPageVideoUserMetadataConnections)
  connections: OnDemandPageVideoUserMetadataConnections;

  @SpeakeasyMetadata()
  @Expose({ name: "interactions" })
  @Type(() => OnDemandPageVideoUserMetadataInteractions)
  interactions: OnDemandPageVideoUserMetadataInteractions;
}

/**
 * The user's privacy preference for comments:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `anybody` - Anyone can comment on the user's videos.
 *  * `contacts` - Only contacts can comment on the user's videos.
 *  * `nobody` - No one can comment on the user's videos.
 *
 */
export enum OnDemandPageVideoUserPreferencesVideosPrivacyCommentsEnum {
  Anybody = "anybody",
  Contacts = "contacts",
  Nobody = "nobody",
}

/**
 * The user's privacy preference for embeds:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `private` - Only the user can embed their own videos.
 *  * `public` - Anyone can embed the user's videos.
 *  * `whitelist` - Only those on the whitelist can embed the user's videos.
 *
 */
export enum OnDemandPageVideoUserPreferencesVideosPrivacyEmbedEnum {
  Private = "private",
  Public = "public",
  Whitelist = "whitelist",
}

/**
 * The user's privacy preference for views:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `anybody` - Anyone can view the user's videos.
 *  * `contacts` - Only contacts can view the user's videos.
 *  * `disable` - Views are disabled for the user's videos.
 *  * `nobody` - No one except the user can view the user's videos.
 *  * `password` - Only those with the password can view the user's videos.
 *  * `unlisted` - Anybody can view the user's videos if they have a link.
 *  * `users` - Only other Vimeo members can view the user's videos.
 *
 */
export enum OnDemandPageVideoUserPreferencesVideosPrivacyViewEnum {
  Anybody = "anybody",
  Contacts = "contacts",
  Disable = "disable",
  Nobody = "nobody",
  Password = "password",
  Unlisted = "unlisted",
  Users = "users",
}

export class OnDemandPageVideoUserPreferencesVideosPrivacy extends SpeakeasyBase {
  /**
   * Whether other users can add the user's videos.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "add" })
  add?: boolean;

  /**
   * The user's privacy preference for comments:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `anybody` - Anyone can comment on the user's videos.
   *  * `contacts` - Only contacts can comment on the user's videos.
   *  * `nobody` - No one can comment on the user's videos.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "comments" })
  comments?: OnDemandPageVideoUserPreferencesVideosPrivacyCommentsEnum;

  /**
   * Whether other users can download the user's videos.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "download" })
  download?: boolean;

  /**
   * The user's privacy preference for embeds:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `private` - Only the user can embed their own videos.
   *  * `public` - Anyone can embed the user's videos.
   *  * `whitelist` - Only those on the whitelist can embed the user's videos.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "embed" })
  embed?: OnDemandPageVideoUserPreferencesVideosPrivacyEmbedEnum;

  /**
   * The user's privacy preference for views:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `anybody` - Anyone can view the user's videos.
   *  * `contacts` - Only contacts can view the user's videos.
   *  * `disable` - Views are disabled for the user's videos.
   *  * `nobody` - No one except the user can view the user's videos.
   *  * `password` - Only those with the password can view the user's videos.
   *  * `unlisted` - Anybody can view the user's videos if they have a link.
   *  * `users` - Only other Vimeo members can view the user's videos.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "view" })
  view?: OnDemandPageVideoUserPreferencesVideosPrivacyViewEnum;
}

export class OnDemandPageVideoUserPreferencesVideos extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "privacy" })
  @Type(() => OnDemandPageVideoUserPreferencesVideosPrivacy)
  privacy?: OnDemandPageVideoUserPreferencesVideosPrivacy;
}

export class OnDemandPageVideoUserPreferences extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "videos" })
  @Type(() => OnDemandPageVideoUserPreferencesVideos)
  videos?: OnDemandPageVideoUserPreferencesVideos;
}

/**
 * Information about the user's lifetime upload usage.
 */
export class OnDemandPageVideoUserUploadQuotaLifetime extends SpeakeasyBase {
  /**
   * The number of bytes remaining in your lifetime maximum.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "free" })
  free: number;

  /**
   * The total number of bytes that you can upload across the lifetime of your account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "max" })
  max: number;

  /**
   * The number of bytes that you've already uploaded against your lifetime limit.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "used" })
  used: number;
}

/**
 * Information about the user's usage for the current period.
 */
export class OnDemandPageVideoUserUploadQuotaPeriodic extends SpeakeasyBase {
  /**
   * The number of bytes remaining in your upload quota for the current period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "free" })
  free: number;

  /**
   * The total number of bytes that you can upload per period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "max" })
  max: number;

  /**
   * The time in ISO 8601 format when your upload quota resets.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reset_date" })
  resetDate: string;

  /**
   * The number of bytes that you've already uploaded against your quota in the current period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "used" })
  used: number;
}

/**
 * Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota.
 */
export enum OnDemandPageVideoUserUploadQuotaSpaceShowingEnum {
  Lifetime = "lifetime",
  Periodic = "periodic",
}

/**
 * Information about the user's upload space remaining for the current period.
 */
export class OnDemandPageVideoUserUploadQuotaSpace extends SpeakeasyBase {
  /**
   * The number of bytes remaining in your upload quota.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "free" })
  free: number;

  /**
   * The maximum number of bytes allotted to your upload quota.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "max" })
  max: number;

  /**
   * Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "showing" })
  showing: OnDemandPageVideoUserUploadQuotaSpaceShowingEnum;

  /**
   * The number of bytes that you've already uploaded against your quota.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "used" })
  used: number;
}

/**
 * Appears only when the user has upload access and is looking at their own user record.
 */
export class OnDemandPageVideoUserUploadQuota extends SpeakeasyBase {
  /**
   * Information about the user's lifetime upload usage.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lifetime" })
  @Type(() => OnDemandPageVideoUserUploadQuotaLifetime)
  lifetime: OnDemandPageVideoUserUploadQuotaLifetime;

  /**
   * Information about the user's usage for the current period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "periodic" })
  @Type(() => OnDemandPageVideoUserUploadQuotaPeriodic)
  periodic: OnDemandPageVideoUserUploadQuotaPeriodic;

  /**
   * Information about the user's upload space remaining for the current period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "space" })
  @Type(() => OnDemandPageVideoUserUploadQuotaSpace)
  space: OnDemandPageVideoUserUploadQuotaSpace;
}

export class OnDemandPageVideoUserWebsites extends SpeakeasyBase {
  /**
   * The website's description.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * The URL of the website.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "link" })
  link: string;

  /**
   * The name of the website.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;
}

/**
 * The video owner.
 */
export class OnDemandPageVideoUser extends SpeakeasyBase {
  /**
   * The user's account type:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `basic` - The user has a Vimeo Basic subscription.
   *  * `business` - The user has a Vimeo Business subscription.
   *  * `live_business` - The user has a Vimeo Business Live subscription.
   *  * `live_premium` - The user has a Vimeo Premium subscription.
   *  * `live_pro` - The user has a Vimeo PRO Live subscription.
   *  * `plus` - The user has a Vimeo Plus subscription.
   *  * `pro` - The user has a Vimeo Pro subscription.
   *  * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
   *  * `producer` - The user has a Vimeo Producer subscription.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "account" })
  account: OnDemandPageVideoUserAccountEnum;

  /**
   * The user's bio.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bio" })
  bio: string;

  /**
   * The user's content filters:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `drugs` - Drugs or alcohol use.
   *  * `language` - Profanity or sexually suggestive content.
   *  * `nudity` - Nudity.
   *  * `safe` - Suitable for all audiences.
   *  * `unrated` - No rating.
   *  * `violence` - Violent or graphic content.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "content_filter" })
  contentFilter?: OnDemandPageVideoUserContentFilterEnum;

  /**
   * The time in ISO 8601 format when the user account was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_time" })
  createdTime: string;

  /**
   * The user's email address. This data requires a bearer token with the `email` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  /**
   * The absolute URL of this user's profile page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "link" })
  link: string;

  /**
   * The user's location.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "location" })
  location: string;

  /**
   * The user's metadata.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  @Type(() => OnDemandPageVideoUserMetadata)
  metadata: OnDemandPageVideoUserMetadata;

  /**
   * The user's display name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * The active portrait of this user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pictures" })
  @Type(() => Picture)
  pictures: Picture;

  @SpeakeasyMetadata()
  @Expose({ name: "preferences" })
  @Type(() => OnDemandPageVideoUserPreferences)
  preferences?: OnDemandPageVideoUserPreferences;

  /**
   * The user's resource key string.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resource_key" })
  resourceKey: string;

  /**
   * Appears only when the user has upload access and is looking at their own user record.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "upload_quota" })
  @Type(() => OnDemandPageVideoUserUploadQuota)
  uploadQuota: OnDemandPageVideoUserUploadQuota;

  /**
   * The user's canonical relative URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;

  /**
   * The user's websites.
   */
  @SpeakeasyMetadata({ elemType: OnDemandPageVideoUserWebsites })
  @Expose({ name: "websites" })
  @Type(() => OnDemandPageVideoUserWebsites)
  websites: OnDemandPageVideoUserWebsites[];
}

/**
 * The trailer for this On Demand page.
 */
export class OnDemandPageVideo extends SpeakeasyBase {
  /**
   * The categories to which this video belongs.
   */
  @SpeakeasyMetadata({ elemType: Category })
  @Expose({ name: "categories" })
  @Type(() => Category)
  categories: Category[];

  /**
   * The content ratings of this video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "content_rating" })
  contentRating: string[];

  /**
   * The context of the video's subscription, if this video is part of a subscription.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "context" })
  @Type(() => OnDemandPageVideoContext)
  context: OnDemandPageVideoContext;

  /**
   * The time in ISO 8601 format when the video was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_time" })
  createdTime: string;

  /**
   * A brief explanation of the video's content.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * The video's duration in seconds.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "duration" })
  duration: number;

  /**
   * Information about embedding this video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "embed" })
  @Type(() => EmbedSettings)
  embed: EmbedSettings;

  /**
   * The video's height in pixels.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "height" })
  height: number;

  /**
   * The video's primary language.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "language" })
  language: string;

  /**
   * The time in ISO 8601 format when the user last modified the video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_user_action_event_date" })
  lastUserActionEventDate?: string;

  /**
   * The [Creative Commons](http://creativecommons.org/licenses/) license used for the video:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `by` - Attribution
   *  * `by-nc` - Attribution Non-Commercial
   *  * `by-nc-nd` - Attribution Non-Commercial No Derivatives
   *  * `by-nc-sa` - Attribution Non-Commercial Share Alike
   *  * `by-nd` - Attribution No Derivatives
   *  * `by-sa` - Attribution Share Alike
   *  * `cc0` - Public Domain Dedication
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "license" })
  license: OnDemandPageVideoLicenseEnum;

  /**
   * The link to the video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "link" })
  link: string;

  /**
   * The video's metadata.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  @Type(() => OnDemandPageVideoMetadata)
  metadata: OnDemandPageVideoMetadata;

  /**
   * The time in ISO 8601 format when the video metadata was last modified.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "modified_time" })
  modifiedTime: string;

  /**
   * The video's title.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Information about the folder that contains this video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "parent_folder" })
  @Type(() => OnDemandPageVideoProject)
  parentFolder?: OnDemandPageVideoProject;

  /**
   * The privacy-enabled password to watch this video. Only users can see their own video passwords. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "password" })
  password?: string;

  /**
   * The active picture for this video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pictures" })
  @Type(() => Picture)
  pictures: Picture;

  /**
   * The video's privacy setting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "privacy" })
  @Type(() => OnDemandPageVideoPrivacy)
  privacy: OnDemandPageVideoPrivacy;

  /**
   * The time in ISO 8601 format when the video was released.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "release_time" })
  releaseTime: string;

  /**
   * The resource key string of the video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resource_key" })
  resourceKey: string;

  /**
   * 360 spatial data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "spatial" })
  @Type(() => OnDemandPageVideoSpatial)
  spatial: OnDemandPageVideoSpatial;

  /**
   * A collection of stats associated with this video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stats" })
  @Type(() => OnDemandPageVideoStats)
  stats: OnDemandPageVideoStats;

  /**
   * The status code for the availability of the video. This field is deprecated in favor of `upload` and `transcode`.
   *
   * @remarks
   *
   * Option descriptions:
   *  * `available` - The video is available.
   *  * `quota_exceeded` - The user's quota is exceeded with this video.
   *  * `total_cap_exceeded` - The user has exceeded their total cap with this video.
   *  * `transcode_starting` - Transcoding is beginning for the video.
   *  * `transcoding` - Transcoding is underway for the video.
   *  * `transcoding_error` - There was an error in transcoding the video.
   *  * `unavailable` - The video is unavailable.
   *  * `uploading` - The video is being uploaded.
   *  * `uploading_error` - There was an error in uploading the video.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: OnDemandPageVideoStatusEnum;

  /**
   * An array of all tags assigned to this video.
   */
  @SpeakeasyMetadata({ elemType: Tag })
  @Expose({ name: "tags" })
  @Type(() => Tag)
  tags: Tag[];

  /**
   * The transcode information for a video upload.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transcode" })
  @Type(() => OnDemandPageVideoTranscode)
  transcode: OnDemandPageVideoTranscode;

  /**
   * The upload information for this video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "upload" })
  @Type(() => OnDemandPageVideoUpload)
  upload: OnDemandPageVideoUpload;

  /**
   * The video's canonical relative URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;

  /**
   * The video owner.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  @Type(() => OnDemandPageVideoUser)
  user: OnDemandPageVideoUser;

  /**
   * The video's width in pixels.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "width" })
  width: number;
}

/**
 * Whether this On Demand page is for a film or a series.
 *
 * @remarks
 *
 * Option descriptions:
 *  * `film` - The On Demand page is for a film.
 *  * `series` - The On Demand page is for a series.
 *
 */
export enum OnDemandPageTypeEnum {
  Film = "film",
  Series = "series",
}

/**
 * The user's account type:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `basic` - The user has a Vimeo Basic subscription.
 *  * `business` - The user has a Vimeo Business subscription.
 *  * `live_business` - The user has a Vimeo Business Live subscription.
 *  * `live_premium` - The user has a Vimeo Premium subscription.
 *  * `live_pro` - The user has a Vimeo PRO Live subscription.
 *  * `plus` - The user has a Vimeo Plus subscription.
 *  * `pro` - The user has a Vimeo Pro subscription.
 *  * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
 *  * `producer` - The user has a Vimeo Producer subscription.
 *
 */
export enum OnDemandPageUserAccountEnum {
  Basic = "basic",
  Business = "business",
  LiveBusiness = "live_business",
  LivePremium = "live_premium",
  LivePro = "live_pro",
  Plus = "plus",
  Pro = "pro",
  ProUnlimited = "pro_unlimited",
  Producer = "producer",
}

/**
 * The user's content filters:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `drugs` - Drugs or alcohol use.
 *  * `language` - Profanity or sexually suggestive content.
 *  * `nudity` - Nudity.
 *  * `safe` - Suitable for all audiences.
 *  * `unrated` - No rating.
 *  * `violence` - Violent or graphic content.
 *
 */
export enum OnDemandPageUserContentFilterEnum {
  Drugs = "drugs",
  Language = "language",
  Nudity = "nudity",
  Safe = "safe",
  Unrated = "unrated",
  Violence = "violence",
}

/**
 * Information about the albums created by this user.
 */
export class OnDemandPageUserMetadataConnectionsAlbums extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of albums on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the appearances of this user in other videos.
 */
export class OnDemandPageUserMetadataConnectionsAppearances extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of appearances on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information on the users that the current user has blocked. This data requires a bearer token with the `private` scope.
 */
export class OnDemandPageUserMetadataConnectionsBlock extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of blocked users on this connection. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this user's followed categories.
 */
export class OnDemandPageUserMetadataConnectionsCategories extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of categories on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this user's subscribed channels.
 */
export class OnDemandPageUserMetadataConnectionsChannels extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of channels on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this user's feed.
 */
export class OnDemandPageUserMetadataConnectionsFeed extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this user's folders.
 */
export class OnDemandPageUserMetadataConnectionsFolders extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of folders on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the user's followers.
 */
export class OnDemandPageUserMetadataConnectionsFollowers extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of followers on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the users that the current user is following.
 */
export class OnDemandPageUserMetadataConnectionsFollowing extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of users on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the groups created by this user.
 */
export class OnDemandPageUserMetadataConnectionsGroups extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of groups on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the videos that this user has liked.
 */
export class OnDemandPageUserMetadataConnectionsLikes extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of likes on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the channels that this user moderates.
 */
export class OnDemandPageUserMetadataConnectionsModeratedChannels extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of channels on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this user's portraits.
 */
export class OnDemandPageUserMetadataConnectionsPictures extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of pictures on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this user's portfolios.
 */
export class OnDemandPageUserMetadataConnectionsPortfolios extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of portfolios on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * A collection of recommended channels for the current user to follow. This data requires a bearer token with the `private` scope.
 */
export class OnDemandPageUserMetadataConnectionsRecommendedChannels extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of channels on this connection. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * A Collection of recommended users for the current user to follow. This data requires a bearer token with the `private` scope.
 */
export class OnDemandPageUserMetadataConnectionsRecommendedUsers extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of users on this connection. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the videos that have been shared with this user.
 */
export class OnDemandPageUserMetadataConnectionsShared extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of videos on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the videos uploaded by this user.
 */
export class OnDemandPageUserMetadataConnectionsVideos extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of videos on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the videos that this user has watched.
 */
export class OnDemandPageUserMetadataConnectionsWatchedVideos extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of videos on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the videos that this user wants to watch later.
 */
export class OnDemandPageUserMetadataConnectionsWatchlater extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of videos on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * The list of resource URIs related to the user.
 */
export class OnDemandPageUserMetadataConnections extends SpeakeasyBase {
  /**
   * Information about the albums created by this user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "albums" })
  @Type(() => OnDemandPageUserMetadataConnectionsAlbums)
  albums: OnDemandPageUserMetadataConnectionsAlbums;

  /**
   * Information about the appearances of this user in other videos.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "appearances" })
  @Type(() => OnDemandPageUserMetadataConnectionsAppearances)
  appearances: OnDemandPageUserMetadataConnectionsAppearances;

  /**
   * Information on the users that the current user has blocked. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "block" })
  @Type(() => OnDemandPageUserMetadataConnectionsBlock)
  block: OnDemandPageUserMetadataConnectionsBlock;

  /**
   * Information about this user's followed categories.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "categories" })
  @Type(() => OnDemandPageUserMetadataConnectionsCategories)
  categories: OnDemandPageUserMetadataConnectionsCategories;

  /**
   * Information about this user's subscribed channels.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channels" })
  @Type(() => OnDemandPageUserMetadataConnectionsChannels)
  channels: OnDemandPageUserMetadataConnectionsChannels;

  /**
   * Information about this user's feed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "feed" })
  @Type(() => OnDemandPageUserMetadataConnectionsFeed)
  feed: OnDemandPageUserMetadataConnectionsFeed;

  /**
   * Information about this user's folders.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "folders" })
  @Type(() => OnDemandPageUserMetadataConnectionsFolders)
  folders: OnDemandPageUserMetadataConnectionsFolders;

  /**
   * Information about the user's followers.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "followers" })
  @Type(() => OnDemandPageUserMetadataConnectionsFollowers)
  followers: OnDemandPageUserMetadataConnectionsFollowers;

  /**
   * Information about the users that the current user is following.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "following" })
  @Type(() => OnDemandPageUserMetadataConnectionsFollowing)
  following: OnDemandPageUserMetadataConnectionsFollowing;

  /**
   * Information about the groups created by this user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "groups" })
  @Type(() => OnDemandPageUserMetadataConnectionsGroups)
  groups: OnDemandPageUserMetadataConnectionsGroups;

  /**
   * Information about the videos that this user has liked.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "likes" })
  @Type(() => OnDemandPageUserMetadataConnectionsLikes)
  likes: OnDemandPageUserMetadataConnectionsLikes;

  /**
   * Information about the channels that this user moderates.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "moderated_channels" })
  @Type(() => OnDemandPageUserMetadataConnectionsModeratedChannels)
  moderatedChannels: OnDemandPageUserMetadataConnectionsModeratedChannels;

  /**
   * Information about this user's portraits.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pictures" })
  @Type(() => OnDemandPageUserMetadataConnectionsPictures)
  pictures: OnDemandPageUserMetadataConnectionsPictures;

  /**
   * Information about this user's portfolios.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "portfolios" })
  @Type(() => OnDemandPageUserMetadataConnectionsPortfolios)
  portfolios: OnDemandPageUserMetadataConnectionsPortfolios;

  /**
   * A collection of recommended channels for the current user to follow. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recommended_channels" })
  @Type(() => OnDemandPageUserMetadataConnectionsRecommendedChannels)
  recommendedChannels: OnDemandPageUserMetadataConnectionsRecommendedChannels;

  /**
   * A Collection of recommended users for the current user to follow. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recommended_users" })
  @Type(() => OnDemandPageUserMetadataConnectionsRecommendedUsers)
  recommendedUsers: OnDemandPageUserMetadataConnectionsRecommendedUsers;

  /**
   * Information about the videos that have been shared with this user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shared" })
  @Type(() => OnDemandPageUserMetadataConnectionsShared)
  shared: OnDemandPageUserMetadataConnectionsShared;

  /**
   * Information about the videos uploaded by this user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "videos" })
  @Type(() => OnDemandPageUserMetadataConnectionsVideos)
  videos: OnDemandPageUserMetadataConnectionsVideos;

  /**
   * Information about the videos that this user has watched.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "watched_videos" })
  @Type(() => OnDemandPageUserMetadataConnectionsWatchedVideos)
  watchedVideos: OnDemandPageUserMetadataConnectionsWatchedVideos;

  /**
   * Information about the videos that this user wants to watch later.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "watchlater" })
  @Type(() => OnDemandPageUserMetadataConnectionsWatchlater)
  watchlater: OnDemandPageUserMetadataConnectionsWatchlater;
}

export class OnDemandPageUserMetadataInteractionsAddPrivacyUser extends SpeakeasyBase {
  /**
   * An array of the HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options?: string[];

  /**
   * The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri?: string;
}

/**
 * Information related to the block status of this user.
 */
export class OnDemandPageUserMetadataInteractionsBlock extends SpeakeasyBase {
  /**
   * Whether a user is blocking the current user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "added" })
  added: boolean;

  /**
   * The time in ISO 8601 format when the block occurred, or the null value if no block exists.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "added_time" })
  addedTime: string;

  /**
   * An array of the HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The URI to block or unblock the user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information related to the followed status of this user.
 */
export class OnDemandPageUserMetadataInteractionsFollow extends SpeakeasyBase {
  /**
   * Whether a user is following the current user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "added" })
  added: boolean;

  /**
   * An array of the HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The URI to follow the user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information regarding where and how to report a user.
 */
export class OnDemandPageUserMetadataInteractionsReport extends SpeakeasyBase {
  /**
   * An array of the HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * List of valid reasons for reporting a video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reason" })
  reason: string[];

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

export class OnDemandPageUserMetadataInteractions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "add_privacy_user" })
  @Type(() => OnDemandPageUserMetadataInteractionsAddPrivacyUser)
  addPrivacyUser?: OnDemandPageUserMetadataInteractionsAddPrivacyUser;

  /**
   * Information related to the block status of this user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "block" })
  @Type(() => OnDemandPageUserMetadataInteractionsBlock)
  block: OnDemandPageUserMetadataInteractionsBlock;

  /**
   * Information related to the followed status of this user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "follow" })
  @Type(() => OnDemandPageUserMetadataInteractionsFollow)
  follow: OnDemandPageUserMetadataInteractionsFollow;

  /**
   * Information regarding where and how to report a user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "report" })
  @Type(() => OnDemandPageUserMetadataInteractionsReport)
  report: OnDemandPageUserMetadataInteractionsReport;
}

/**
 * The user's metadata.
 */
export class OnDemandPageUserMetadata extends SpeakeasyBase {
  /**
   * The list of resource URIs related to the user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "connections" })
  @Type(() => OnDemandPageUserMetadataConnections)
  connections: OnDemandPageUserMetadataConnections;

  @SpeakeasyMetadata()
  @Expose({ name: "interactions" })
  @Type(() => OnDemandPageUserMetadataInteractions)
  interactions: OnDemandPageUserMetadataInteractions;
}

/**
 * The user's privacy preference for comments:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `anybody` - Anyone can comment on the user's videos.
 *  * `contacts` - Only contacts can comment on the user's videos.
 *  * `nobody` - No one can comment on the user's videos.
 *
 */
export enum OnDemandPageUserPreferencesVideosPrivacyCommentsEnum {
  Anybody = "anybody",
  Contacts = "contacts",
  Nobody = "nobody",
}

/**
 * The user's privacy preference for embeds:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `private` - Only the user can embed their own videos.
 *  * `public` - Anyone can embed the user's videos.
 *  * `whitelist` - Only those on the whitelist can embed the user's videos.
 *
 */
export enum OnDemandPageUserPreferencesVideosPrivacyEmbedEnum {
  Private = "private",
  Public = "public",
  Whitelist = "whitelist",
}

/**
 * The user's privacy preference for views:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `anybody` - Anyone can view the user's videos.
 *  * `contacts` - Only contacts can view the user's videos.
 *  * `disable` - Views are disabled for the user's videos.
 *  * `nobody` - No one except the user can view the user's videos.
 *  * `password` - Only those with the password can view the user's videos.
 *  * `unlisted` - Anybody can view the user's videos if they have a link.
 *  * `users` - Only other Vimeo members can view the user's videos.
 *
 */
export enum OnDemandPageUserPreferencesVideosPrivacyViewEnum {
  Anybody = "anybody",
  Contacts = "contacts",
  Disable = "disable",
  Nobody = "nobody",
  Password = "password",
  Unlisted = "unlisted",
  Users = "users",
}

export class OnDemandPageUserPreferencesVideosPrivacy extends SpeakeasyBase {
  /**
   * Whether other users can add the user's videos.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "add" })
  add?: boolean;

  /**
   * The user's privacy preference for comments:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `anybody` - Anyone can comment on the user's videos.
   *  * `contacts` - Only contacts can comment on the user's videos.
   *  * `nobody` - No one can comment on the user's videos.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "comments" })
  comments?: OnDemandPageUserPreferencesVideosPrivacyCommentsEnum;

  /**
   * Whether other users can download the user's videos.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "download" })
  download?: boolean;

  /**
   * The user's privacy preference for embeds:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `private` - Only the user can embed their own videos.
   *  * `public` - Anyone can embed the user's videos.
   *  * `whitelist` - Only those on the whitelist can embed the user's videos.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "embed" })
  embed?: OnDemandPageUserPreferencesVideosPrivacyEmbedEnum;

  /**
   * The user's privacy preference for views:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `anybody` - Anyone can view the user's videos.
   *  * `contacts` - Only contacts can view the user's videos.
   *  * `disable` - Views are disabled for the user's videos.
   *  * `nobody` - No one except the user can view the user's videos.
   *  * `password` - Only those with the password can view the user's videos.
   *  * `unlisted` - Anybody can view the user's videos if they have a link.
   *  * `users` - Only other Vimeo members can view the user's videos.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "view" })
  view?: OnDemandPageUserPreferencesVideosPrivacyViewEnum;
}

export class OnDemandPageUserPreferencesVideos extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "privacy" })
  @Type(() => OnDemandPageUserPreferencesVideosPrivacy)
  privacy?: OnDemandPageUserPreferencesVideosPrivacy;
}

export class OnDemandPageUserPreferences extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "videos" })
  @Type(() => OnDemandPageUserPreferencesVideos)
  videos?: OnDemandPageUserPreferencesVideos;
}

/**
 * Information about the user's lifetime upload usage.
 */
export class OnDemandPageUserUploadQuotaLifetime extends SpeakeasyBase {
  /**
   * The number of bytes remaining in your lifetime maximum.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "free" })
  free: number;

  /**
   * The total number of bytes that you can upload across the lifetime of your account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "max" })
  max: number;

  /**
   * The number of bytes that you've already uploaded against your lifetime limit.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "used" })
  used: number;
}

/**
 * Information about the user's usage for the current period.
 */
export class OnDemandPageUserUploadQuotaPeriodic extends SpeakeasyBase {
  /**
   * The number of bytes remaining in your upload quota for the current period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "free" })
  free: number;

  /**
   * The total number of bytes that you can upload per period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "max" })
  max: number;

  /**
   * The time in ISO 8601 format when your upload quota resets.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reset_date" })
  resetDate: string;

  /**
   * The number of bytes that you've already uploaded against your quota in the current period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "used" })
  used: number;
}

/**
 * Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota.
 */
export enum OnDemandPageUserUploadQuotaSpaceShowingEnum {
  Lifetime = "lifetime",
  Periodic = "periodic",
}

/**
 * Information about the user's upload space remaining for the current period.
 */
export class OnDemandPageUserUploadQuotaSpace extends SpeakeasyBase {
  /**
   * The number of bytes remaining in your upload quota.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "free" })
  free: number;

  /**
   * The maximum number of bytes allotted to your upload quota.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "max" })
  max: number;

  /**
   * Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "showing" })
  showing: OnDemandPageUserUploadQuotaSpaceShowingEnum;

  /**
   * The number of bytes that you've already uploaded against your quota.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "used" })
  used: number;
}

/**
 * Appears only when the user has upload access and is looking at their own user record.
 */
export class OnDemandPageUserUploadQuota extends SpeakeasyBase {
  /**
   * Information about the user's lifetime upload usage.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lifetime" })
  @Type(() => OnDemandPageUserUploadQuotaLifetime)
  lifetime: OnDemandPageUserUploadQuotaLifetime;

  /**
   * Information about the user's usage for the current period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "periodic" })
  @Type(() => OnDemandPageUserUploadQuotaPeriodic)
  periodic: OnDemandPageUserUploadQuotaPeriodic;

  /**
   * Information about the user's upload space remaining for the current period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "space" })
  @Type(() => OnDemandPageUserUploadQuotaSpace)
  space: OnDemandPageUserUploadQuotaSpace;
}

export class OnDemandPageUserWebsites extends SpeakeasyBase {
  /**
   * The website's description.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * The URL of the website.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "link" })
  link: string;

  /**
   * The name of the website.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;
}

/**
 * The user who created this On Demand page.
 */
export class OnDemandPageUser extends SpeakeasyBase {
  /**
   * The user's account type:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `basic` - The user has a Vimeo Basic subscription.
   *  * `business` - The user has a Vimeo Business subscription.
   *  * `live_business` - The user has a Vimeo Business Live subscription.
   *  * `live_premium` - The user has a Vimeo Premium subscription.
   *  * `live_pro` - The user has a Vimeo PRO Live subscription.
   *  * `plus` - The user has a Vimeo Plus subscription.
   *  * `pro` - The user has a Vimeo Pro subscription.
   *  * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
   *  * `producer` - The user has a Vimeo Producer subscription.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "account" })
  account: OnDemandPageUserAccountEnum;

  /**
   * The user's bio.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bio" })
  bio: string;

  /**
   * The user's content filters:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `drugs` - Drugs or alcohol use.
   *  * `language` - Profanity or sexually suggestive content.
   *  * `nudity` - Nudity.
   *  * `safe` - Suitable for all audiences.
   *  * `unrated` - No rating.
   *  * `violence` - Violent or graphic content.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "content_filter" })
  contentFilter?: OnDemandPageUserContentFilterEnum;

  /**
   * The time in ISO 8601 format when the user account was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_time" })
  createdTime: string;

  /**
   * The user's email address. This data requires a bearer token with the `email` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  /**
   * The absolute URL of this user's profile page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "link" })
  link: string;

  /**
   * The user's location.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "location" })
  location: string;

  /**
   * The user's metadata.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  @Type(() => OnDemandPageUserMetadata)
  metadata: OnDemandPageUserMetadata;

  /**
   * The user's display name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * The active portrait of this user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pictures" })
  @Type(() => Picture)
  pictures: Picture;

  @SpeakeasyMetadata()
  @Expose({ name: "preferences" })
  @Type(() => OnDemandPageUserPreferences)
  preferences?: OnDemandPageUserPreferences;

  /**
   * The user's resource key string.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resource_key" })
  resourceKey: string;

  /**
   * Appears only when the user has upload access and is looking at their own user record.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "upload_quota" })
  @Type(() => OnDemandPageUserUploadQuota)
  uploadQuota: OnDemandPageUserUploadQuota;

  /**
   * The user's canonical relative URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;

  /**
   * The user's websites.
   */
  @SpeakeasyMetadata({ elemType: OnDemandPageUserWebsites })
  @Expose({ name: "websites" })
  @Type(() => OnDemandPageUserWebsites)
  websites: OnDemandPageUserWebsites[];
}

/**
 * The On Demand page was created.
 */
export class OnDemandPage extends SpeakeasyBase {
  /**
   * The background image for the On Demand page on Vimeo.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "background" })
  @Type(() => OnDemandPagePicture)
  background: OnDemandPagePicture;

  /**
   * The primary and secondary colors used for rendering this On Demand page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "colors" })
  @Type(() => OnDemandPageColors)
  colors: OnDemandPageColors;

  /**
   * An array of the page's content ratings.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "content_rating" })
  contentRating: string[];

  /**
   * The time in ISO 8601 format when the page was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_time" })
  createdTime?: string;

  /**
   * The description of this On Demand page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * The link to this page on its own domain.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "domain_link" })
  domainLink: string;

  /**
   * Information about this On Demand page's episodes, if the page is for a series.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "episodes" })
  @Type(() => OnDemandPageEpisodes)
  episodes: OnDemandPageEpisodes;

  /**
   * This On Demand page's film, if it is a film.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "film" })
  @Type(() => Video)
  film?: Video;

  /**
   * All the genres assigned to this page.
   */
  @SpeakeasyMetadata({ elemType: OnDemandGenre })
  @Expose({ name: "genres" })
  @Type(() => OnDemandGenre)
  genres: OnDemandGenre[];

  /**
   * The link to the page on Vimeo.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "link" })
  link: string;

  /**
   * Metadata about the On Demand page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  @Type(() => OnDemandPageMetadata)
  metadata: OnDemandPageMetadata;

  /**
   * he time in ISO 8601 format when the page was last modified.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "modified_time" })
  modifiedTime?: string;

  /**
   * A descriptive title of this On Demand page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * The active poster for this On Demand page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pictures" })
  @Type(() => OnDemandPagePicture)
  pictures: OnDemandPagePicture;

  @SpeakeasyMetadata()
  @Expose({ name: "preorder" })
  @Type(() => OnDemandPagePreorder)
  preorder: OnDemandPagePreorder;

  @SpeakeasyMetadata()
  @Expose({ name: "published" })
  @Type(() => OnDemandPagePublished)
  published: OnDemandPagePublished;

  /**
   * The rating of this page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rating" })
  rating: number;

  /**
   * The VOD resource key.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resource_key" })
  resourceKey: string;

  /**
   * The creator-designated SKU for this On Demand page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sku" })
  sku?: string;

  /**
   * Information about subscribing to this On Demand page, if enabled.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subscription" })
  @Type(() => OnDemandPageSubscription)
  subscription: OnDemandPageSubscription;

  /**
   * The graphical theme for this On Demand page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "theme" })
  theme: string;

  /**
   * The thumbnail image for the On Demand page on Vimeo.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "thumbnail" })
  @Type(() => OnDemandPagePicture)
  thumbnail: OnDemandPagePicture;

  /**
   * The trailer for this On Demand page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "trailer" })
  @Type(() => OnDemandPageVideo)
  trailer: OnDemandPageVideo;

  /**
   * Whether this On Demand page is for a film or a series.
   *
   * @remarks
   *
   * Option descriptions:
   *  * `film` - The On Demand page is for a film.
   *  * `series` - The On Demand page is for a series.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: OnDemandPageTypeEnum;

  /**
   * The relative URI of the On Demand page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;

  /**
   * The user who created this On Demand page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  @Type(() => OnDemandPageUser)
  user: OnDemandPageUser;
}
