/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { GoogleCloudKmsV1ExternalProtectionLevelOptions } from "./googlecloudkmsv1externalprotectionleveloptions";
import { GoogleCloudKmsV1KeyOperationAttestation } from "./googlecloudkmsv1keyoperationattestation";
import { Expose, Type } from "class-transformer";

/**
 * Output only. The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
 */
export enum GoogleCloudKmsV1CryptoKeyVersionAlgorithmEnum {
  CryptoKeyVersionAlgorithmUnspecified = "CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED",
  GoogleSymmetricEncryption = "GOOGLE_SYMMETRIC_ENCRYPTION",
  RsaSignPss2048Sha256 = "RSA_SIGN_PSS_2048_SHA256",
  RsaSignPss3072Sha256 = "RSA_SIGN_PSS_3072_SHA256",
  RsaSignPss4096Sha256 = "RSA_SIGN_PSS_4096_SHA256",
  RsaSignPss4096Sha512 = "RSA_SIGN_PSS_4096_SHA512",
  RsaSignPkcs12048Sha256 = "RSA_SIGN_PKCS1_2048_SHA256",
  RsaSignPkcs13072Sha256 = "RSA_SIGN_PKCS1_3072_SHA256",
  RsaSignPkcs14096Sha256 = "RSA_SIGN_PKCS1_4096_SHA256",
  RsaSignPkcs14096Sha512 = "RSA_SIGN_PKCS1_4096_SHA512",
  RsaSignRawPkcs12048 = "RSA_SIGN_RAW_PKCS1_2048",
  RsaSignRawPkcs13072 = "RSA_SIGN_RAW_PKCS1_3072",
  RsaSignRawPkcs14096 = "RSA_SIGN_RAW_PKCS1_4096",
  RsaDecryptOaep2048Sha256 = "RSA_DECRYPT_OAEP_2048_SHA256",
  RsaDecryptOaep3072Sha256 = "RSA_DECRYPT_OAEP_3072_SHA256",
  RsaDecryptOaep4096Sha256 = "RSA_DECRYPT_OAEP_4096_SHA256",
  RsaDecryptOaep4096Sha512 = "RSA_DECRYPT_OAEP_4096_SHA512",
  RsaDecryptOaep2048Sha1 = "RSA_DECRYPT_OAEP_2048_SHA1",
  RsaDecryptOaep3072Sha1 = "RSA_DECRYPT_OAEP_3072_SHA1",
  RsaDecryptOaep4096Sha1 = "RSA_DECRYPT_OAEP_4096_SHA1",
  EcSignP256Sha256 = "EC_SIGN_P256_SHA256",
  EcSignP384Sha384 = "EC_SIGN_P384_SHA384",
  EcSignSecp256K1Sha256 = "EC_SIGN_SECP256K1_SHA256",
  HmacSha256 = "HMAC_SHA256",
  HmacSha1 = "HMAC_SHA1",
  HmacSha384 = "HMAC_SHA384",
  HmacSha512 = "HMAC_SHA512",
  HmacSha224 = "HMAC_SHA224",
  ExternalSymmetricEncryption = "EXTERNAL_SYMMETRIC_ENCRYPTION",
}

/**
 * Output only. The ProtectionLevel describing how crypto operations are performed with this CryptoKeyVersion.
 */
export enum GoogleCloudKmsV1CryptoKeyVersionProtectionLevelEnum {
  ProtectionLevelUnspecified = "PROTECTION_LEVEL_UNSPECIFIED",
  Software = "SOFTWARE",
  Hsm = "HSM",
  External = "EXTERNAL",
  ExternalVpc = "EXTERNAL_VPC",
}

/**
 * The current state of the CryptoKeyVersion.
 */
export enum GoogleCloudKmsV1CryptoKeyVersionStateEnum {
  CryptoKeyVersionStateUnspecified = "CRYPTO_KEY_VERSION_STATE_UNSPECIFIED",
  PendingGeneration = "PENDING_GENERATION",
  Enabled = "ENABLED",
  Disabled = "DISABLED",
  Destroyed = "DESTROYED",
  DestroyScheduled = "DESTROY_SCHEDULED",
  PendingImport = "PENDING_IMPORT",
  ImportFailed = "IMPORT_FAILED",
  GenerationFailed = "GENERATION_FAILED",
  PendingExternalDestruction = "PENDING_EXTERNAL_DESTRUCTION",
  ExternalDestructionFailed = "EXTERNAL_DESTRUCTION_FAILED",
}

/**
 * A CryptoKeyVersion represents an individual cryptographic key, and the associated key material. An ENABLED version can be used for cryptographic operations. For security reasons, the raw cryptographic key material represented by a CryptoKeyVersion can never be viewed or exported. It can only be used to encrypt, decrypt, or sign data when an authorized user or application invokes Cloud KMS.
 */
export class GoogleCloudKmsV1CryptoKeyVersion extends SpeakeasyBase {
  /**
   * Output only. The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "algorithm" })
  algorithm?: GoogleCloudKmsV1CryptoKeyVersionAlgorithmEnum;

  /**
   * Contains an HSM-generated attestation about a key operation. For more information, see [Verifying attestations] (https://cloud.google.com/kms/docs/attest-key).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "attestation" })
  @Type(() => GoogleCloudKmsV1KeyOperationAttestation)
  attestation?: GoogleCloudKmsV1KeyOperationAttestation;

  /**
   * Output only. The time at which this CryptoKeyVersion was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createTime" })
  createTime?: string;

  /**
   * Output only. The time this CryptoKeyVersion's key material was destroyed. Only present if state is DESTROYED.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destroyEventTime" })
  destroyEventTime?: string;

  /**
   * Output only. The time this CryptoKeyVersion's key material is scheduled for destruction. Only present if state is DESTROY_SCHEDULED.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destroyTime" })
  destroyTime?: string;

  /**
   * Output only. The root cause of the most recent external destruction failure. Only present if state is EXTERNAL_DESTRUCTION_FAILED.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "externalDestructionFailureReason" })
  externalDestructionFailureReason?: string;

  /**
   * ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific to the EXTERNAL protection level and EXTERNAL_VPC protection levels.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "externalProtectionLevelOptions" })
  @Type(() => GoogleCloudKmsV1ExternalProtectionLevelOptions)
  externalProtectionLevelOptions?: GoogleCloudKmsV1ExternalProtectionLevelOptions;

  /**
   * Output only. The time this CryptoKeyVersion's key material was generated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "generateTime" })
  generateTime?: string;

  /**
   * Output only. The root cause of the most recent generation failure. Only present if state is GENERATION_FAILED.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "generationFailureReason" })
  generationFailureReason?: string;

  /**
   * Output only. The root cause of the most recent import failure. Only present if state is IMPORT_FAILED.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "importFailureReason" })
  importFailureReason?: string;

  /**
   * Output only. The name of the ImportJob used in the most recent import of this CryptoKeyVersion. Only present if the underlying key material was imported.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "importJob" })
  importJob?: string;

  /**
   * Output only. The time at which this CryptoKeyVersion's key material was most recently imported.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "importTime" })
  importTime?: string;

  /**
   * Output only. The resource name for this CryptoKeyVersion in the format `projects/* /locations/* /keyRings/* /cryptoKeys/* /cryptoKeyVersions/*`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Output only. The ProtectionLevel describing how crypto operations are performed with this CryptoKeyVersion.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "protectionLevel" })
  protectionLevel?: GoogleCloudKmsV1CryptoKeyVersionProtectionLevelEnum;

  /**
   * Output only. Whether or not this key version is eligible for reimport, by being specified as a target in ImportCryptoKeyVersionRequest.crypto_key_version.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reimportEligible" })
  reimportEligible?: boolean;

  /**
   * The current state of the CryptoKeyVersion.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: GoogleCloudKmsV1CryptoKeyVersionStateEnum;
}
