"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import task_queue_enum_task_order_enum as shared_task_queue_enum_task_order_enum
from ..shared import taskrouter_v1_workspace_task_queue as shared_taskrouter_v1_workspace_task_queue
from typing import Optional

UPDATE_TASK_QUEUE_SERVERS = [
	"https://taskrouter.twilio.com",
]


@dataclasses.dataclass
class UpdateTaskQueueSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    

@dataclasses.dataclass
class UpdateTaskQueueUpdateTaskQueueRequest:
    
    assignment_activity_sid: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'AssignmentActivitySid' }})
    r"""The SID of the Activity to assign Workers when a task is assigned for them."""  
    friendly_name: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'FriendlyName' }})
    r"""A descriptive string that you create to describe the TaskQueue. For example `Support-Tier 1`, `Sales`, or `Escalation`."""  
    max_reserved_workers: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'MaxReservedWorkers' }})
    r"""The maximum number of Workers to create reservations for the assignment of a task while in the queue. Maximum of 50."""  
    reservation_activity_sid: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'ReservationActivitySid' }})
    r"""The SID of the Activity to assign Workers when a task is reserved for them."""  
    target_workers: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'TargetWorkers' }})
    r"""A string describing the Worker selection criteria for any Tasks that enter the TaskQueue. For example '\\"language\\" == \\"spanish\\"' If no TargetWorkers parameter is provided, Tasks will wait in the queue until they are either deleted or moved to another queue. Additional examples on how to describing Worker selection criteria below."""  
    task_order: Optional[shared_task_queue_enum_task_order_enum.TaskQueueEnumTaskOrderEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'TaskOrder' }})  
    

@dataclasses.dataclass
class UpdateTaskQueueRequest:
    
    sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'Sid', 'style': 'simple', 'explode': False }})
    r"""The SID of the TaskQueue resource to update."""  
    workspace_sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'WorkspaceSid', 'style': 'simple', 'explode': False }})
    r"""The SID of the Workspace with the TaskQueue to update."""  
    request_body: Optional[UpdateTaskQueueUpdateTaskQueueRequest] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/x-www-form-urlencoded' }})  
    

@dataclasses.dataclass
class UpdateTaskQueueResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    taskrouter_v1_workspace_task_queue: Optional[shared_taskrouter_v1_workspace_task_queue.TaskrouterV1WorkspaceTaskQueue] = dataclasses.field(default=None)
    r"""OK"""  
    