// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AppEntityAppTypeEnum - The type of the App
type AppEntityAppTypeEnum string

const (
	AppEntityAppTypeEnumSDK            AppEntityAppTypeEnum = "sdk"
	AppEntityAppTypeEnumSso            AppEntityAppTypeEnum = "sso"
	AppEntityAppTypeEnumRemoteServer   AppEntityAppTypeEnum = "remote_server"
	AppEntityAppTypeEnumFolderBehavior AppEntityAppTypeEnum = "folder_behavior"
	AppEntityAppTypeEnumClientApp      AppEntityAppTypeEnum = "client_app"
	AppEntityAppTypeEnumAppIntegration AppEntityAppTypeEnum = "app_integration"
)

func (e AppEntityAppTypeEnum) ToPointer() *AppEntityAppTypeEnum {
	return &e
}

func (e *AppEntityAppTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sdk":
		fallthrough
	case "sso":
		fallthrough
	case "remote_server":
		fallthrough
	case "folder_behavior":
		fallthrough
	case "client_app":
		fallthrough
	case "app_integration":
		*e = AppEntityAppTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppEntityAppTypeEnum: %v", v)
	}
}

// AppEntityFolderBehaviorTypeEnum - Associated Folder Behavior type, if any
type AppEntityFolderBehaviorTypeEnum string

const (
	AppEntityFolderBehaviorTypeEnumWebhook                AppEntityFolderBehaviorTypeEnum = "webhook"
	AppEntityFolderBehaviorTypeEnumFileExpiration         AppEntityFolderBehaviorTypeEnum = "file_expiration"
	AppEntityFolderBehaviorTypeEnumAutoEncrypt            AppEntityFolderBehaviorTypeEnum = "auto_encrypt"
	AppEntityFolderBehaviorTypeEnumLockSubfolders         AppEntityFolderBehaviorTypeEnum = "lock_subfolders"
	AppEntityFolderBehaviorTypeEnumStorageRegion          AppEntityFolderBehaviorTypeEnum = "storage_region"
	AppEntityFolderBehaviorTypeEnumServePublicly          AppEntityFolderBehaviorTypeEnum = "serve_publicly"
	AppEntityFolderBehaviorTypeEnumCreateUserFolders      AppEntityFolderBehaviorTypeEnum = "create_user_folders"
	AppEntityFolderBehaviorTypeEnumRemoteServerSync       AppEntityFolderBehaviorTypeEnum = "remote_server_sync"
	AppEntityFolderBehaviorTypeEnumInbox                  AppEntityFolderBehaviorTypeEnum = "inbox"
	AppEntityFolderBehaviorTypeEnumAppendTimestamp        AppEntityFolderBehaviorTypeEnum = "append_timestamp"
	AppEntityFolderBehaviorTypeEnumLimitFileExtensions    AppEntityFolderBehaviorTypeEnum = "limit_file_extensions"
	AppEntityFolderBehaviorTypeEnumLimitFileRegex         AppEntityFolderBehaviorTypeEnum = "limit_file_regex"
	AppEntityFolderBehaviorTypeEnumAmazonSns              AppEntityFolderBehaviorTypeEnum = "amazon_sns"
	AppEntityFolderBehaviorTypeEnumWatermark              AppEntityFolderBehaviorTypeEnum = "watermark"
	AppEntityFolderBehaviorTypeEnumRemoteServerMount      AppEntityFolderBehaviorTypeEnum = "remote_server_mount"
	AppEntityFolderBehaviorTypeEnumSlackWebhook           AppEntityFolderBehaviorTypeEnum = "slack_webhook"
	AppEntityFolderBehaviorTypeEnumAutoDecrypt            AppEntityFolderBehaviorTypeEnum = "auto_decrypt"
	AppEntityFolderBehaviorTypeEnumOverrideUploadFilename AppEntityFolderBehaviorTypeEnum = "override_upload_filename"
)

func (e AppEntityFolderBehaviorTypeEnum) ToPointer() *AppEntityFolderBehaviorTypeEnum {
	return &e
}

func (e *AppEntityFolderBehaviorTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "webhook":
		fallthrough
	case "file_expiration":
		fallthrough
	case "auto_encrypt":
		fallthrough
	case "lock_subfolders":
		fallthrough
	case "storage_region":
		fallthrough
	case "serve_publicly":
		fallthrough
	case "create_user_folders":
		fallthrough
	case "remote_server_sync":
		fallthrough
	case "inbox":
		fallthrough
	case "append_timestamp":
		fallthrough
	case "limit_file_extensions":
		fallthrough
	case "limit_file_regex":
		fallthrough
	case "amazon_sns":
		fallthrough
	case "watermark":
		fallthrough
	case "remote_server_mount":
		fallthrough
	case "slack_webhook":
		fallthrough
	case "auto_decrypt":
		fallthrough
	case "override_upload_filename":
		*e = AppEntityFolderBehaviorTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppEntityFolderBehaviorTypeEnum: %v", v)
	}
}

// AppEntityRemoteServerTypeEnum - Associated Remote Server type, if any
type AppEntityRemoteServerTypeEnum string

const (
	AppEntityRemoteServerTypeEnumFtp                AppEntityRemoteServerTypeEnum = "ftp"
	AppEntityRemoteServerTypeEnumSftp               AppEntityRemoteServerTypeEnum = "sftp"
	AppEntityRemoteServerTypeEnumS3                 AppEntityRemoteServerTypeEnum = "s3"
	AppEntityRemoteServerTypeEnumGoogleCloudStorage AppEntityRemoteServerTypeEnum = "google_cloud_storage"
	AppEntityRemoteServerTypeEnumWebdav             AppEntityRemoteServerTypeEnum = "webdav"
	AppEntityRemoteServerTypeEnumWasabi             AppEntityRemoteServerTypeEnum = "wasabi"
	AppEntityRemoteServerTypeEnumBackblazeB2        AppEntityRemoteServerTypeEnum = "backblaze_b2"
	AppEntityRemoteServerTypeEnumOneDrive           AppEntityRemoteServerTypeEnum = "one_drive"
	AppEntityRemoteServerTypeEnumRackspace          AppEntityRemoteServerTypeEnum = "rackspace"
	AppEntityRemoteServerTypeEnumBox                AppEntityRemoteServerTypeEnum = "box"
	AppEntityRemoteServerTypeEnumDropbox            AppEntityRemoteServerTypeEnum = "dropbox"
	AppEntityRemoteServerTypeEnumGoogleDrive        AppEntityRemoteServerTypeEnum = "google_drive"
	AppEntityRemoteServerTypeEnumAzure              AppEntityRemoteServerTypeEnum = "azure"
	AppEntityRemoteServerTypeEnumSharepoint         AppEntityRemoteServerTypeEnum = "sharepoint"
	AppEntityRemoteServerTypeEnumS3Compatible       AppEntityRemoteServerTypeEnum = "s3_compatible"
	AppEntityRemoteServerTypeEnumAzureFiles         AppEntityRemoteServerTypeEnum = "azure_files"
	AppEntityRemoteServerTypeEnumFilesAgent         AppEntityRemoteServerTypeEnum = "files_agent"
	AppEntityRemoteServerTypeEnumFilebase           AppEntityRemoteServerTypeEnum = "filebase"
)

func (e AppEntityRemoteServerTypeEnum) ToPointer() *AppEntityRemoteServerTypeEnum {
	return &e
}

func (e *AppEntityRemoteServerTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ftp":
		fallthrough
	case "sftp":
		fallthrough
	case "s3":
		fallthrough
	case "google_cloud_storage":
		fallthrough
	case "webdav":
		fallthrough
	case "wasabi":
		fallthrough
	case "backblaze_b2":
		fallthrough
	case "one_drive":
		fallthrough
	case "rackspace":
		fallthrough
	case "box":
		fallthrough
	case "dropbox":
		fallthrough
	case "google_drive":
		fallthrough
	case "azure":
		fallthrough
	case "sharepoint":
		fallthrough
	case "s3_compatible":
		fallthrough
	case "azure_files":
		fallthrough
	case "files_agent":
		fallthrough
	case "filebase":
		*e = AppEntityRemoteServerTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppEntityRemoteServerTypeEnum: %v", v)
	}
}

// AppEntitySsoStrategyTypeEnum - Associated SSO Strategy type, if any
type AppEntitySsoStrategyTypeEnum string

const (
	AppEntitySsoStrategyTypeEnumGoogle       AppEntitySsoStrategyTypeEnum = "google"
	AppEntitySsoStrategyTypeEnumAuth0        AppEntitySsoStrategyTypeEnum = "auth0"
	AppEntitySsoStrategyTypeEnumOkta         AppEntitySsoStrategyTypeEnum = "okta"
	AppEntitySsoStrategyTypeEnumAtlassian    AppEntitySsoStrategyTypeEnum = "atlassian"
	AppEntitySsoStrategyTypeEnumAzure        AppEntitySsoStrategyTypeEnum = "azure"
	AppEntitySsoStrategyTypeEnumBox          AppEntitySsoStrategyTypeEnum = "box"
	AppEntitySsoStrategyTypeEnumDropbox      AppEntitySsoStrategyTypeEnum = "dropbox"
	AppEntitySsoStrategyTypeEnumSlack        AppEntitySsoStrategyTypeEnum = "slack"
	AppEntitySsoStrategyTypeEnumUnusedUbuntu AppEntitySsoStrategyTypeEnum = "_unused_ubuntu"
	AppEntitySsoStrategyTypeEnumOnelogin     AppEntitySsoStrategyTypeEnum = "onelogin"
	AppEntitySsoStrategyTypeEnumSaml         AppEntitySsoStrategyTypeEnum = "saml"
	AppEntitySsoStrategyTypeEnumIdaptive     AppEntitySsoStrategyTypeEnum = "idaptive"
	AppEntitySsoStrategyTypeEnumLdap         AppEntitySsoStrategyTypeEnum = "ldap"
	AppEntitySsoStrategyTypeEnumScim         AppEntitySsoStrategyTypeEnum = "scim"
)

func (e AppEntitySsoStrategyTypeEnum) ToPointer() *AppEntitySsoStrategyTypeEnum {
	return &e
}

func (e *AppEntitySsoStrategyTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "google":
		fallthrough
	case "auth0":
		fallthrough
	case "okta":
		fallthrough
	case "atlassian":
		fallthrough
	case "azure":
		fallthrough
	case "box":
		fallthrough
	case "dropbox":
		fallthrough
	case "slack":
		fallthrough
	case "_unused_ubuntu":
		fallthrough
	case "onelogin":
		fallthrough
	case "saml":
		fallthrough
	case "idaptive":
		fallthrough
	case "ldap":
		fallthrough
	case "scim":
		*e = AppEntitySsoStrategyTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppEntitySsoStrategyTypeEnum: %v", v)
	}
}

// AppEntity - List Apps
type AppEntity struct {
	// The type of the App
	AppType *AppEntityAppTypeEnum `json:"app_type,omitempty"`
	// Collection of named links to documentation
	DocumentationLinks map[string]interface{} `json:"documentation_links,omitempty"`
	// Long form description of the App
	ExtendedDescription *string `json:"extended_description,omitempty"`
	// Link to external homepage
	ExternalHomepageURL *string `json:"external_homepage_url,omitempty"`
	// Is featured on the App listing?
	Featured *bool `json:"featured,omitempty"`
	// Associated Folder Behavior type, if any
	FolderBehaviorType *AppEntityFolderBehaviorTypeEnum `json:"folder_behavior_type,omitempty"`
	// App icon
	IconURL *string `json:"icon_url,omitempty"`
	// Logo thumbnail for the App
	LogoThumbnailURL *string `json:"logo_thumbnail_url,omitempty"`
	// Full size logo for the App
	LogoURL *string `json:"logo_url,omitempty"`
	// Marketing video page
	MarketingYoutubeURL *string `json:"marketing_youtube_url,omitempty"`
	// Name of the App
	Name *string `json:"name,omitempty"`
	// Associated Remote Server type, if any
	RemoteServerType *AppEntityRemoteServerTypeEnum `json:"remote_server_type,omitempty"`
	// Screenshots of the App
	ScreenshotListUrls []string `json:"screenshot_list_urls,omitempty"`
	// Short description of the App
	ShortDescription *string `json:"short_description,omitempty"`
	// Associated SSO Strategy type, if any
	SsoStrategyType *AppEntitySsoStrategyTypeEnum `json:"sso_strategy_type,omitempty"`
	// Tutorial video page
	TutorialYoutubeURL *string `json:"tutorial_youtube_url,omitempty"`
}
