"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import resource as shared_resource
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class RoleGrantPrincipalEnum(str, Enum):
    r"""Prinicipal/Identity for whom the role need to assigned."""
    PRINCIPAL_UNSPECIFIED = 'PRINCIPAL_UNSPECIFIED'
    CONNECTOR_SA = 'CONNECTOR_SA'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RoleGrant:
    r"""This configuration defines all the Cloud IAM roles that needs to be granted to a particular GCP resource for the selected prinicpal like service account. These configurations will let UI display to customers what IAM roles need to be granted by them. Or these configurations can be used by the UI to render a 'grant' button to do the same on behalf of the user."""
    
    helper_text_template: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('helperTextTemplate'), 'exclude': lambda f: f is None }})
    r"""Template that UI can use to provide helper text to customers."""  
    principal: Optional[RoleGrantPrincipalEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('principal'), 'exclude': lambda f: f is None }})
    r"""Prinicipal/Identity for whom the role need to assigned."""  
    resource: Optional[shared_resource.Resource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource'), 'exclude': lambda f: f is None }})
    r"""Resource definition"""  
    roles: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roles'), 'exclude': lambda f: f is None }})
    r"""List of roles that need to be granted."""  
    