"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import catalogtarget as shared_catalogtarget
from ..shared import deltatarget as shared_deltatarget
from ..shared import dynamodbtarget as shared_dynamodbtarget
from ..shared import jdbctarget as shared_jdbctarget
from ..shared import mongodbtarget as shared_mongodbtarget
from ..shared import s3target as shared_s3target
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CrawlerTargets:
    r"""Specifies data stores to crawl."""
    
    catalog_targets: Optional[list[shared_catalogtarget.CatalogTarget]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CatalogTargets'), 'exclude': lambda f: f is None }})  
    delta_targets: Optional[list[shared_deltatarget.DeltaTarget]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeltaTargets'), 'exclude': lambda f: f is None }})  
    dynamo_db_targets: Optional[list[shared_dynamodbtarget.DynamoDBTarget]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DynamoDBTargets'), 'exclude': lambda f: f is None }})  
    jdbc_targets: Optional[list[shared_jdbctarget.JdbcTarget]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JdbcTargets'), 'exclude': lambda f: f is None }})  
    mongo_db_targets: Optional[list[shared_mongodbtarget.MongoDBTarget]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MongoDBTargets'), 'exclude': lambda f: f is None }})  
    s3_targets: Optional[list[shared_s3target.S3Target]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3Targets'), 'exclude': lambda f: f is None }})  
    