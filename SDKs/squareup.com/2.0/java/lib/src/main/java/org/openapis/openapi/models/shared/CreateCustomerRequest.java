/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CreateCustomerRequest - Defines the body parameters that can be included in a request to the
 * `CreateCustomer` endpoint.
 */
public class CreateCustomerRequest {
    /**
     * Represents a postal address in a country. The address format is based 
     * on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
     * see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
     * This format has dedicated fields for four address components: postal code, 
     * locality (city), administrative district (state, prefecture, or province), and 
     * sublocality (town or village). These components have dedicated fields in the 
     * `Address` object because software sometimes behaves differently based on them. 
     * For example, sales tax software may charge different amounts of sales tax 
     * based on the postal code, and some software is only available in 
     * certain states due to compliance reasons.
     * 
     * For the remaining address components, the `Address` type provides the 
     * `address_line_1` and `address_line_2` fields for free-form data entry. 
     * These fields are free-form because the remaining address components have 
     * too many variations around the world and typical software does not parse 
     * these components. These fields enable users to enter anything they want. 
     * 
     * Note that, in the current implementation, all other `Address` type fields are blank. 
     * These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
     * `administrative_district_level_2`, `administrative_district_level_3`, 
     * `first_name`, `last_name`, and `organization`. 
     * 
     * When it comes to localization, the seller's language preferences 
     * (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
     * are ignored for addresses. Even though Square products (such as Square Point of Sale 
     * and the Seller Dashboard) mostly use a seller's language preference in 
     * communication, when it comes to addresses, they will use English for a US address, 
     * Japanese for an address in Japan, and so on.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address")
    public Address address;

    public CreateCustomerRequest withAddress(Address address) {
        this.address = address;
        return this;
    }
    
    /**
     * The birthday associated with the customer profile, in RFC 3339 format. The year is optional. The timezone and time are not allowed.
     * For example, `0000-09-21T00:00:00-00:00` represents a birthday on September 21 and `1998-09-21T00:00:00-00:00` represents a birthday on September 21, 1998.
     * You can also specify this value in `YYYY-MM-DD` format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("birthday")
    public String birthday;

    public CreateCustomerRequest withBirthday(String birthday) {
        this.birthday = birthday;
        return this;
    }
    
    /**
     * A business name associated with the customer profile.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_name")
    public String companyName;

    public CreateCustomerRequest withCompanyName(String companyName) {
        this.companyName = companyName;
        return this;
    }
    
    /**
     * The email address associated with the customer profile.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email_address")
    public String emailAddress;

    public CreateCustomerRequest withEmailAddress(String emailAddress) {
        this.emailAddress = emailAddress;
        return this;
    }
    
    /**
     * The family name (that is, the last name) associated with the customer profile.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("family_name")
    public String familyName;

    public CreateCustomerRequest withFamilyName(String familyName) {
        this.familyName = familyName;
        return this;
    }
    
    /**
     * The given name (that is, the first name) associated with the customer profile.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("given_name")
    public String givenName;

    public CreateCustomerRequest withGivenName(String givenName) {
        this.givenName = givenName;
        return this;
    }
    
    /**
     * The idempotency key for the request.	For more information, see
     * [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idempotency_key")
    public String idempotencyKey;

    public CreateCustomerRequest withIdempotencyKey(String idempotencyKey) {
        this.idempotencyKey = idempotencyKey;
        return this;
    }
    
    /**
     * A nickname for the customer profile.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nickname")
    public String nickname;

    public CreateCustomerRequest withNickname(String nickname) {
        this.nickname = nickname;
        return this;
    }
    
    /**
     * A custom note associated with the customer profile.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("note")
    public String note;

    public CreateCustomerRequest withNote(String note) {
        this.note = note;
        return this;
    }
    
    /**
     * The 11-digit phone number associated with the customer profile.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_number")
    public String phoneNumber;

    public CreateCustomerRequest withPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
        return this;
    }
    
    /**
     * An optional second ID used to associate the customer profile with an
     * entity in another system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference_id")
    public String referenceId;

    public CreateCustomerRequest withReferenceId(String referenceId) {
        this.referenceId = referenceId;
        return this;
    }
    
    public CreateCustomerRequest(){}
}
