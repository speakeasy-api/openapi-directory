<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - This page contains the documentation on how to use Discourse through API calls.
 * 
 * 
 * > Note: For any endpoints not listed you can follow the
 * [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576)
 * guide to figure out how to use an API endpoint.
 * 
 * ### Request Content-Type
 * 
 * The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`,
 * `multipart/form-data`, or `application/json`.
 * 
 * ### Endpoint Names and Response Content-Type
 * 
 * Most API endpoints provide the same content as their HTML counterparts. For example
 * the URL `/categories` serves a list of categories, the `/categories.json` API provides the
 * same information in JSON format.
 * 
 * Instead of sending API requests to `/categories.json` you may also send them to `/categories`
 * and add an `Accept: application/json` header to the request to get the JSON response.
 * Sending requests with the `Accept` header is necessary if you want to use URLs
 * for related endpoints returned by the API, such as pagination URLs.
 * These URLs are returned without the `.json` prefix so you need to add the header in
 * order to get the correct response format.
 * 
 * ### Authentication
 * 
 * Some endpoints do not require any authentication, pretty much anything else will
 * require you to be authenticated.
 * 
 * To become authenticated you will need to create an API Key from the admin panel.
 * 
 * Once you have your API Key you can pass it in along with your API Username
 * as an HTTP header like this:
 * 
 * ```
 * curl -X GET "http://127.0.0.1:3000/admin/users/list/active.json" \
 * -H "Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19" \
 * -H "Api-Username: system"
 * ```
 * 
 * and this is how POST requests will look:
 * 
 * ```
 * curl -X POST "http://127.0.0.1:3000/categories" \
 * -H "Content-Type: multipart/form-data;" \
 * -H "Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19" \
 * -H "Api-Username: system" \
 * -F "name=89853c20-4409-e91a-a8ea-f6cdff96aaaa" \
 * -F "color=49d9e9" \
 * -F "text_color=f0fcfd"
 * ```
 * 
 * ### Boolean values
 * 
 * If an endpoint accepts a boolean be sure to specify it as a lowercase
 * `true` or `false` value unless noted otherwise.
 * 
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'http://discourse.local',
		'https://{defaultHost}',
	];
  	
	public Admin $admin;
	
	public Backups $backups;
	
	public Badges $badges;
	
	public Categories $categories;
	
	public Groups $groups;
	
	public Invites $invites;
	
	public Notifications $notifications;
	
	public Posts $posts;
	
	public PrivateMessages $privateMessages;
	
	public Search $search;
	
	public Site $site;
	
	public Tags $tags;
	
	public Topics $topics;
	
	public Uploads $uploads;
	
	public Users $users;
		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
		
		$this->admin = new Admin(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->backups = new Backups(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->badges = new Badges(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->categories = new Categories(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->groups = new Groups(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->invites = new Invites(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->notifications = new Notifications(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->posts = new Posts(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->privateMessages = new PrivateMessages(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->search = new Search(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->site = new Site(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->tags = new Tags(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->topics = new Topics(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->uploads = new Uploads(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->users = new Users(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
	}
}