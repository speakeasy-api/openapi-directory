/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class AccountHolders {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get an account holder
   *
   * @remarks
   * Returns an account holder.
   */
  getAccountHoldersId(
    req: operations.GetAccountHoldersIdRequest,
    security: operations.GetAccountHoldersIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAccountHoldersIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAccountHoldersIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/accountHolders/{id}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetAccountHoldersIdSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAccountHoldersIdResponse =
        new operations.GetAccountHoldersIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accountHolder = utils.objectToClass(
              httpRes?.data,
              shared.AccountHolder
            );
          }
          break;
        case [400, 401, 403, 422, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.restServiceError = utils.objectToClass(
              httpRes?.data,
              shared.RestServiceError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get all balance accounts of an account holder
   *
   * @remarks
   * Returns a paginated list of the balance accounts associated with an account holder. To fetch multiple pages, use the query parameters.
   *
   * For example, to limit the page to 5 balance accounts and skip the first 10, use `/accountHolders/{id}/balanceAccounts?limit=5&offset=10`.
   */
  getAccountHoldersIdBalanceAccounts(
    req: operations.GetAccountHoldersIdBalanceAccountsRequest,
    security: operations.GetAccountHoldersIdBalanceAccountsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAccountHoldersIdBalanceAccountsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAccountHoldersIdBalanceAccountsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accountHolders/{id}/balanceAccounts",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetAccountHoldersIdBalanceAccountsSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAccountHoldersIdBalanceAccountsResponse =
        new operations.GetAccountHoldersIdBalanceAccountsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.paginatedBalanceAccountsResponse = utils.objectToClass(
              httpRes?.data,
              shared.PaginatedBalanceAccountsResponse
            );
          }
          break;
        case [400, 401, 403, 422, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.restServiceError = utils.objectToClass(
              httpRes?.data,
              shared.RestServiceError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update an account holder
   *
   * @remarks
   * Updates an account holder. When updating an account holder resource, if a parameter is not provided in the request, it is left unchanged.
   */
  patchAccountHoldersId(
    req: operations.PatchAccountHoldersIdRequest,
    security: operations.PatchAccountHoldersIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PatchAccountHoldersIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PatchAccountHoldersIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/accountHolders/{id}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "accountHolderInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PatchAccountHoldersIdSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PatchAccountHoldersIdResponse =
        new operations.PatchAccountHoldersIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accountHolder = utils.objectToClass(
              httpRes?.data,
              shared.AccountHolder
            );
          }
          break;
        case [400, 401, 403, 422, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.restServiceError = utils.objectToClass(
              httpRes?.data,
              shared.RestServiceError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create an account holder
   *
   * @remarks
   * Creates an account holder linked to a [legal entity](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/legalEntities).
   *
   *
   */
  postAccountHolders(
    req: shared.AccountHolderInfoInput,
    security: operations.PostAccountHoldersSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostAccountHoldersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.AccountHolderInfoInput(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/accountHolders";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostAccountHoldersSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostAccountHoldersResponse =
        new operations.PostAccountHoldersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accountHolder = utils.objectToClass(
              httpRes?.data,
              shared.AccountHolder
            );
          }
          break;
        case [400, 401, 403, 422, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.restServiceError = utils.objectToClass(
              httpRes?.data,
              shared.RestServiceError
            );
          }
          break;
      }

      return res;
    });
  }
}
