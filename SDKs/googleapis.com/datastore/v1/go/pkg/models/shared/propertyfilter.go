// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PropertyFilterOpEnum - The operator to filter by.
type PropertyFilterOpEnum string

const (
	PropertyFilterOpEnumOperatorUnspecified PropertyFilterOpEnum = "OPERATOR_UNSPECIFIED"
	PropertyFilterOpEnumLessThan            PropertyFilterOpEnum = "LESS_THAN"
	PropertyFilterOpEnumLessThanOrEqual     PropertyFilterOpEnum = "LESS_THAN_OR_EQUAL"
	PropertyFilterOpEnumGreaterThan         PropertyFilterOpEnum = "GREATER_THAN"
	PropertyFilterOpEnumGreaterThanOrEqual  PropertyFilterOpEnum = "GREATER_THAN_OR_EQUAL"
	PropertyFilterOpEnumEqual               PropertyFilterOpEnum = "EQUAL"
	PropertyFilterOpEnumIn                  PropertyFilterOpEnum = "IN"
	PropertyFilterOpEnumNotEqual            PropertyFilterOpEnum = "NOT_EQUAL"
	PropertyFilterOpEnumHasAncestor         PropertyFilterOpEnum = "HAS_ANCESTOR"
	PropertyFilterOpEnumNotIn               PropertyFilterOpEnum = "NOT_IN"
)

func (e PropertyFilterOpEnum) ToPointer() *PropertyFilterOpEnum {
	return &e
}

func (e *PropertyFilterOpEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OPERATOR_UNSPECIFIED":
		fallthrough
	case "LESS_THAN":
		fallthrough
	case "LESS_THAN_OR_EQUAL":
		fallthrough
	case "GREATER_THAN":
		fallthrough
	case "GREATER_THAN_OR_EQUAL":
		fallthrough
	case "EQUAL":
		fallthrough
	case "IN":
		fallthrough
	case "NOT_EQUAL":
		fallthrough
	case "HAS_ANCESTOR":
		fallthrough
	case "NOT_IN":
		*e = PropertyFilterOpEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PropertyFilterOpEnum: %v", v)
	}
}

// PropertyFilter - A filter on a specific property.
type PropertyFilter struct {
	// The operator to filter by.
	Op *PropertyFilterOpEnum `json:"op,omitempty"`
	// A reference to a property relative to the kind expressions.
	Property *PropertyReference `json:"property,omitempty"`
	// A message that can hold any of the supported value types and associated metadata.
	Value *Value `json:"value,omitempty"`
}
