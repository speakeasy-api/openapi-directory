/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GoogleCloudConnectorsV1AuthConfigOauth2AuthCodeFlow - Parameters to support Oauth 2.0 Auth Code Grant Authentication. See https://www.rfc-editor.org/rfc/rfc6749#section-1.3.1 for more details.
 */
public class GoogleCloudConnectorsV1AuthConfigOauth2AuthCodeFlow {
    /**
     * Authorization code to be exchanged for access and refresh tokens.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authCode")
    public String authCode;

    public GoogleCloudConnectorsV1AuthConfigOauth2AuthCodeFlow withAuthCode(String authCode) {
        this.authCode = authCode;
        return this;
    }
    
    /**
     * Client ID for user-provided OAuth app.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientId")
    public String clientId;

    public GoogleCloudConnectorsV1AuthConfigOauth2AuthCodeFlow withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }
    
    /**
     * Secret provides a reference to entries in Secret Manager.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientSecret")
    public GoogleCloudConnectorsV1Secret clientSecret;

    public GoogleCloudConnectorsV1AuthConfigOauth2AuthCodeFlow withClientSecret(GoogleCloudConnectorsV1Secret clientSecret) {
        this.clientSecret = clientSecret;
        return this;
    }
    
    /**
     * Whether to enable PKCE when the user performs the auth code flow.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enablePkce")
    public Boolean enablePkce;

    public GoogleCloudConnectorsV1AuthConfigOauth2AuthCodeFlow withEnablePkce(Boolean enablePkce) {
        this.enablePkce = enablePkce;
        return this;
    }
    
    /**
     * PKCE verifier to be used during the auth code exchange.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pkceVerifier")
    public String pkceVerifier;

    public GoogleCloudConnectorsV1AuthConfigOauth2AuthCodeFlow withPkceVerifier(String pkceVerifier) {
        this.pkceVerifier = pkceVerifier;
        return this;
    }
    
    /**
     * Redirect URI to be provided during the auth code exchange.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("redirectUri")
    public String redirectUri;

    public GoogleCloudConnectorsV1AuthConfigOauth2AuthCodeFlow withRedirectUri(String redirectUri) {
        this.redirectUri = redirectUri;
        return this;
    }
    
    /**
     * Scopes the connection will request when the user performs the auth code flow.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scopes")
    public String[] scopes;

    public GoogleCloudConnectorsV1AuthConfigOauth2AuthCodeFlow withScopes(String[] scopes) {
        this.scopes = scopes;
        return this;
    }
    
    public GoogleCloudConnectorsV1AuthConfigOauth2AuthCodeFlow(){}
}
