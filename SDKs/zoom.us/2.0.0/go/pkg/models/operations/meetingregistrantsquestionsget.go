// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type MeetingRegistrantsQuestionsGetSecurity struct {
	OAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type MeetingRegistrantsQuestionsGetRequest struct {
	// The meeting ID in **long** format. The data type of this field is "long"(represented as int64 in JSON).
	//
	// While storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits.
	MeetingID int64 `pathParam:"style=simple,explode=false,name=meetingId"`
}

// MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsCustomQuestionsTypeEnum - Type of the question being asked.
type MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsCustomQuestionsTypeEnum string

const (
	MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsCustomQuestionsTypeEnumShort  MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsCustomQuestionsTypeEnum = "short"
	MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsCustomQuestionsTypeEnumSingle MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsCustomQuestionsTypeEnum = "single"
)

func (e *MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsCustomQuestionsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "short":
		fallthrough
	case "single":
		*e = MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsCustomQuestionsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsCustomQuestionsTypeEnum: %s", s)
	}
}

type MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsCustomQuestions struct {
	// Answer choices for the question. Can not be used for `short` question type as this type of question requires registrants to type out the answer.
	Answers []string `json:"answers,omitempty"`
	// Indicates whether or not the custom question is required to be answered by participants or not.
	Required *bool `json:"required,omitempty"`
	// Title of the custom question.
	Title *string `json:"title,omitempty"`
	// Type of the question being asked.
	Type *MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsCustomQuestionsTypeEnum `json:"type,omitempty"`
}

// MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestionsFieldNameEnum - Field name of the question.
type MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestionsFieldNameEnum string

const (
	MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestionsFieldNameEnumAddress               MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestionsFieldNameEnum = "address"
	MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestionsFieldNameEnumCity                  MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestionsFieldNameEnum = "city"
	MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestionsFieldNameEnumCountry               MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestionsFieldNameEnum = "country"
	MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestionsFieldNameEnumZip                   MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestionsFieldNameEnum = "zip"
	MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestionsFieldNameEnumState                 MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestionsFieldNameEnum = "state"
	MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestionsFieldNameEnumPhone                 MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestionsFieldNameEnum = "phone"
	MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestionsFieldNameEnumIndustry              MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestionsFieldNameEnum = "industry"
	MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestionsFieldNameEnumOrg                   MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestionsFieldNameEnum = "org"
	MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestionsFieldNameEnumJobTitle              MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestionsFieldNameEnum = "job_title"
	MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestionsFieldNameEnumPurchasingTimeFrame   MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestionsFieldNameEnum = "purchasing_time_frame"
	MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestionsFieldNameEnumRoleInPurchaseProcess MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestionsFieldNameEnum = "role_in_purchase_process"
	MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestionsFieldNameEnumNoOfEmployees         MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestionsFieldNameEnum = "no_of_employees"
	MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestionsFieldNameEnumComments              MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestionsFieldNameEnum = "comments"
)

func (e *MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestionsFieldNameEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "address":
		fallthrough
	case "city":
		fallthrough
	case "country":
		fallthrough
	case "zip":
		fallthrough
	case "state":
		fallthrough
	case "phone":
		fallthrough
	case "industry":
		fallthrough
	case "org":
		fallthrough
	case "job_title":
		fallthrough
	case "purchasing_time_frame":
		fallthrough
	case "role_in_purchase_process":
		fallthrough
	case "no_of_employees":
		fallthrough
	case "comments":
		*e = MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestionsFieldNameEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestionsFieldNameEnum: %s", s)
	}
}

type MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestions struct {
	// Field name of the question.
	FieldName *MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestionsFieldNameEnum `json:"field_name,omitempty"`
	// Indicates whether or not the displayed fields are required to be filled out by registrants.
	Required *bool `json:"required,omitempty"`
}

// MeetingRegistrantsQuestionsGetMeetingRegistrantQuestions - Meeting Registrant Questions
type MeetingRegistrantsQuestionsGetMeetingRegistrantQuestions struct {
	// Array of Registrant Custom Questions
	CustomQuestions []MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsCustomQuestions `json:"custom_questions,omitempty"`
	// Array of Registrant Questions
	Questions []MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestions `json:"questions,omitempty"`
}

type MeetingRegistrantsQuestionsGetResponse struct {
	Body        []byte
	ContentType string
	// **HTTP Status Code:** `200`<br>
	// Meeting Registrant Question object returned
	MeetingRegistrantQuestions *MeetingRegistrantsQuestionsGetMeetingRegistrantQuestions
	StatusCode                 int
	RawResponse                *http.Response
}
