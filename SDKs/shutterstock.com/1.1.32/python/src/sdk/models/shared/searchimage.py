"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import language_enum as shared_language_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional

class SearchImageImageTypeEnum(str, Enum):
    PHOTO = 'photo'
    ILLUSTRATION = 'illustration'
    VECTOR = 'vector'

class SearchImageLicenseEnum(str, Enum):
    COMMERCIAL = 'commercial'
    EDITORIAL = 'editorial'
    ENHANCED = 'enhanced'

class SearchImageOrientationEnum(str, Enum):
    r"""Show image results with horizontal or vertical orientation"""
    HORIZONTAL = 'horizontal'
    VERTICAL = 'vertical'

class SearchImagePeopleAgeEnum(str, Enum):
    r"""Show images that feature people of the specified age category"""
    INFANTS = 'infants'
    CHILDREN = 'children'
    TEENAGERS = 'teenagers'
    TWENTYS = '20s'
    THIRTYS = '30s'
    FORTYS = '40s'
    FIFTYS = '50s'
    SIXTYS = '60s'
    OLDER = 'older'

class SearchImagePeopleEthnicityEnum(str, Enum):
    AFRICAN = 'african'
    AFRICAN_AMERICAN = 'african_american'
    BLACK = 'black'
    BRAZILIAN = 'brazilian'
    CHINESE = 'chinese'
    CAUCASIAN = 'caucasian'
    EAST_ASIAN = 'east_asian'
    HISPANIC = 'hispanic'
    JAPANESE = 'japanese'
    MIDDLE_EASTERN = 'middle_eastern'
    NATIVE_AMERICAN = 'native_american'
    PACIFIC_ISLANDER = 'pacific_islander'
    SOUTH_ASIAN = 'south_asian'
    SOUTHEAST_ASIAN = 'southeast_asian'
    OTHER = 'other'
    NOT_AFRICAN = 'NOT african'
    NOT_AFRICAN_AMERICAN = 'NOT african_american'
    NOT_BLACK = 'NOT black'
    NOT_BRAZILIAN = 'NOT brazilian'
    NOT_CHINESE = 'NOT chinese'
    NOT_CAUCASIAN = 'NOT caucasian'
    NOT_EAST_ASIAN = 'NOT east_asian'
    NOT_HISPANIC = 'NOT hispanic'
    NOT_JAPANESE = 'NOT japanese'
    NOT_MIDDLE_EASTERN = 'NOT middle_eastern'
    NOT_NATIVE_AMERICAN = 'NOT native_american'
    NOT_PACIFIC_ISLANDER = 'NOT pacific_islander'
    NOT_SOUTH_ASIAN = 'NOT south_asian'
    NOT_SOUTHEAST_ASIAN = 'NOT southeast_asian'
    NOT_OTHER = 'NOT other'

class SearchImagePeopleGenderEnum(str, Enum):
    r"""Show images with people of the specified gender"""
    MALE = 'male'
    FEMALE = 'female'
    BOTH = 'both'

class SearchImageSortEnum(str, Enum):
    r"""Sort by"""
    NEWEST = 'newest'
    POPULAR = 'popular'
    RELEVANCE = 'relevance'
    RANDOM = 'random'

class SearchImageViewEnum(str, Enum):
    r"""Amount of detail to render in the response"""
    MINIMAL = 'minimal'
    FULL = 'full'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchImage:
    r"""Data required to search for an image"""
    
    added_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('added_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Show images added on the specified date"""  
    added_date_end: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('added_date_end'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Show images added before the specified date"""  
    added_date_start: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('added_date_start'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Show images added on or after the specified date"""  
    aspect_ratio: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aspect_ratio'), 'exclude': lambda f: f is None }})
    r"""Show images with the specified aspect ratio, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image"""  
    aspect_ratio_max: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aspect_ratio_max'), 'exclude': lambda f: f is None }})
    r"""Show images with the specified aspect ratio or lower, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image"""  
    aspect_ratio_min: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aspect_ratio_min'), 'exclude': lambda f: f is None }})
    r"""Show images with the specified aspect ratio or higher, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image"""  
    authentic: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authentic'), 'exclude': lambda f: f is None }})
    r"""Show only authentic images"""  
    category: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})
    r"""Show images with the specified Shutterstock-defined category; specify a category name or ID"""  
    color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('color'), 'exclude': lambda f: f is None }})
    r"""Specify either a hexadecimal color in the format '4F21EA' or 'grayscale'; the API returns images that use similar colors"""  
    contributor: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contributor'), 'exclude': lambda f: f is None }})
    r"""Show images with the specified contributor names or IDs, allows multiple"""  
    contributor_country: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contributor_country'), 'exclude': lambda f: f is None }})
    r"""Show images from contributors in one or more specified countries, or start with NOT to exclude a country from the search"""  
    fields_: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fields'), 'exclude': lambda f: f is None }})
    r"""Fields to display in the response; see the documentation for the fields parameter in the overview section"""  
    height: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('height'), 'exclude': lambda f: f is None }})
    r"""(Deprecated; use height_from and height_to instead) Show images with the specified height"""  
    height_from: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('height_from'), 'exclude': lambda f: f is None }})
    r"""Show images with the specified height or larger, in pixels"""  
    height_to: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('height_to'), 'exclude': lambda f: f is None }})
    r"""Show images with the specified height or smaller, in pixels"""  
    image_type: Optional[list[SearchImageImageTypeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image_type'), 'exclude': lambda f: f is None }})
    r"""Show images of the specified type"""  
    keyword_safe_search: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keyword_safe_search'), 'exclude': lambda f: f is None }})
    r"""Hide results with potentially unsafe keywords"""  
    language: Optional[shared_language_enum.LanguageEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('language'), 'exclude': lambda f: f is None }})
    r"""Language code"""  
    license: Optional[list[SearchImageLicenseEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('license'), 'exclude': lambda f: f is None }})
    r"""Show only images with the specified license"""  
    model: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('model'), 'exclude': lambda f: f is None }})
    r"""Show image results with the specified model IDs"""  
    orientation: Optional[SearchImageOrientationEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orientation'), 'exclude': lambda f: f is None }})
    r"""Show image results with horizontal or vertical orientation"""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page'), 'exclude': lambda f: f is None }})
    r"""Page number"""  
    people_age: Optional[SearchImagePeopleAgeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('people_age'), 'exclude': lambda f: f is None }})
    r"""Show images that feature people of the specified age category"""  
    people_ethnicity: Optional[list[SearchImagePeopleEthnicityEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('people_ethnicity'), 'exclude': lambda f: f is None }})
    r"""Show images with people of the specified ethnicities, or start with NOT to show images without those ethnicities"""  
    people_gender: Optional[SearchImagePeopleGenderEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('people_gender'), 'exclude': lambda f: f is None }})
    r"""Show images with people of the specified gender"""  
    people_model_released: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('people_model_released'), 'exclude': lambda f: f is None }})
    r"""Show images of people with a signed model release"""  
    people_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('people_number'), 'exclude': lambda f: f is None }})
    r"""Show images with the specified number of people"""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('per_page'), 'exclude': lambda f: f is None }})
    r"""Number of results per page"""  
    query: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query'), 'exclude': lambda f: f is None }})
    r"""One or more search terms separated by spaces; you can use NOT to filter out images that match a term"""  
    region: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('region'), 'exclude': lambda f: f is None }})
    r"""Raise or lower search result rankings based on the result's relevance to a specified region; you can provide a country code or an IP address from which the API infers a country"""  
    safe: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('safe'), 'exclude': lambda f: f is None }})
    r"""Enable or disable safe search"""  
    sort: Optional[SearchImageSortEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sort'), 'exclude': lambda f: f is None }})
    r"""Sort by"""  
    spellcheck_query: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spellcheck_query'), 'exclude': lambda f: f is None }})
    r"""Spellcheck the search query and return results on suggested spellings"""  
    view: Optional[SearchImageViewEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('view'), 'exclude': lambda f: f is None }})
    r"""Amount of detail to render in the response"""  
    width: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('width'), 'exclude': lambda f: f is None }})
    r"""(Deprecated; use width_from and width_to instead) Show images with the specified width"""  
    width_from: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('width_from'), 'exclude': lambda f: f is None }})
    r"""Show images with the specified width or larger, in pixels"""  
    width_to: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('width_to'), 'exclude': lambda f: f is None }})
    r"""Show images with the specified width or smaller, in pixels"""  
    