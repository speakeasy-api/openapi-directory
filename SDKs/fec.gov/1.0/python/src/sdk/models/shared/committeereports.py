"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommitteeReports:
    
    aggregate_amount_personal_contributions_general: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aggregate_amount_personal_contributions_general'), 'exclude': lambda f: f is None }})  
    aggregate_contributions_personal_funds_primary: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aggregate_contributions_personal_funds_primary'), 'exclude': lambda f: f is None }})  
    all_loans_received_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('all_loans_received_period'), 'exclude': lambda f: f is None }})  
    all_loans_received_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('all_loans_received_ytd'), 'exclude': lambda f: f is None }})  
    all_other_loans_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('all_other_loans_period'), 'exclude': lambda f: f is None }})  
    all_other_loans_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('all_other_loans_ytd'), 'exclude': lambda f: f is None }})  
    allocated_federal_election_levin_share_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allocated_federal_election_levin_share_period'), 'exclude': lambda f: f is None }})  
    amendment_chain: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amendment_chain'), 'exclude': lambda f: f is None }})
    r"""The first value in the chain is the original filing.  The ordering in the chain reflects the order the
    amendments were filed up to the amendment being inspected.
    """  
    amendment_indicator: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amendment_indicator'), 'exclude': lambda f: f is None }})  
    amendment_indicator_full: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amendment_indicator_full'), 'exclude': lambda f: f is None }})  
    beginning_image_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beginning_image_number'), 'exclude': lambda f: f is None }})  
    calendar_ytd: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('calendar_ytd'), 'exclude': lambda f: f is None }})  
    candidate_contribution_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('candidate_contribution_period'), 'exclude': lambda f: f is None }})  
    candidate_contribution_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('candidate_contribution_ytd'), 'exclude': lambda f: f is None }})  
    cash_on_hand_beginning_calendar_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cash_on_hand_beginning_calendar_ytd'), 'exclude': lambda f: f is None }})  
    cash_on_hand_beginning_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cash_on_hand_beginning_period'), 'exclude': lambda f: f is None }})
    r"""Balance for the committee at the start of the two-year period"""  
    cash_on_hand_close_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cash_on_hand_close_ytd'), 'exclude': lambda f: f is None }})  
    cash_on_hand_end_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cash_on_hand_end_period'), 'exclude': lambda f: f is None }})
    r"""Ending cash balance on the most recent filing"""  
    committee_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('committee_id'), 'exclude': lambda f: f is None }})
    r"""A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits."""  
    committee_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('committee_name'), 'exclude': lambda f: f is None }})
    r"""The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records."""  
    committee_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('committee_type'), 'exclude': lambda f: f is None }})  
    coordinated_expenditures_by_party_committee_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coordinated_expenditures_by_party_committee_period'), 'exclude': lambda f: f is None }})  
    coordinated_expenditures_by_party_committee_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coordinated_expenditures_by_party_committee_ytd'), 'exclude': lambda f: f is None }})  
    coverage_end_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coverage_end_date'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Ending date of the reporting period"""  
    coverage_start_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coverage_start_date'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Beginning date of the reporting period"""  
    csv_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('csv_url'), 'exclude': lambda f: f is None }})  
    cycle: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cycle'), 'exclude': lambda f: f is None }})
    r"""Filter records to only those that are applicable to a given two-year
    period. This cycle follows the traditional House election cycle and
    subdivides the presidential and Senate elections into comparable
    two-year blocks. The cycle begins with an odd year and is named for its
    ending, even year.
    """  
    debts_owed_by_committee: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('debts_owed_by_committee'), 'exclude': lambda f: f is None }})
    r"""Debts owed by the committee"""  
    debts_owed_to_committee: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('debts_owed_to_committee'), 'exclude': lambda f: f is None }})
    r"""Debts owed to the committee"""  
    document_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('document_description'), 'exclude': lambda f: f is None }})  
    end_image_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_image_number'), 'exclude': lambda f: f is None }})  
    exempt_legal_accounting_disbursement_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exempt_legal_accounting_disbursement_period'), 'exclude': lambda f: f is None }})  
    exempt_legal_accounting_disbursement_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exempt_legal_accounting_disbursement_ytd'), 'exclude': lambda f: f is None }})  
    expenditure_subject_to_limits: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expenditure_subject_to_limits'), 'exclude': lambda f: f is None }})  
    fec_file_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fec_file_id'), 'exclude': lambda f: f is None }})  
    fec_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fec_url'), 'exclude': lambda f: f is None }})  
    fed_candidate_committee_contribution_refunds_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fed_candidate_committee_contribution_refunds_ytd'), 'exclude': lambda f: f is None }})  
    fed_candidate_committee_contributions_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fed_candidate_committee_contributions_period'), 'exclude': lambda f: f is None }})  
    fed_candidate_committee_contributions_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fed_candidate_committee_contributions_ytd'), 'exclude': lambda f: f is None }})  
    fed_candidate_contribution_refunds_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fed_candidate_contribution_refunds_period'), 'exclude': lambda f: f is None }})  
    federal_funds_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('federal_funds_period'), 'exclude': lambda f: f is None }})  
    federal_funds_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('federal_funds_ytd'), 'exclude': lambda f: f is None }})  
    file_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_number'), 'exclude': lambda f: f is None }})  
    fundraising_disbursements_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fundraising_disbursements_period'), 'exclude': lambda f: f is None }})  
    fundraising_disbursements_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fundraising_disbursements_ytd'), 'exclude': lambda f: f is None }})  
    gross_receipt_authorized_committee_general: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gross_receipt_authorized_committee_general'), 'exclude': lambda f: f is None }})  
    gross_receipt_authorized_committee_primary: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gross_receipt_authorized_committee_primary'), 'exclude': lambda f: f is None }})  
    gross_receipt_minus_personal_contribution_general: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gross_receipt_minus_personal_contribution_general'), 'exclude': lambda f: f is None }})  
    gross_receipt_minus_personal_contributions_primary: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gross_receipt_minus_personal_contributions_primary'), 'exclude': lambda f: f is None }})  
    html_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('html_url'), 'exclude': lambda f: f is None }})
    r"""HTML link to the filing."""  
    independent_contributions_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('independent_contributions_period'), 'exclude': lambda f: f is None }})  
    independent_expenditures_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('independent_expenditures_period'), 'exclude': lambda f: f is None }})  
    independent_expenditures_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('independent_expenditures_ytd'), 'exclude': lambda f: f is None }})  
    individual_itemized_contributions_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('individual_itemized_contributions_period'), 'exclude': lambda f: f is None }})
    r"""Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. total for the reporting period"""  
    individual_itemized_contributions_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('individual_itemized_contributions_ytd'), 'exclude': lambda f: f is None }})
    r"""Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. total for the year to date"""  
    individual_unitemized_contributions_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('individual_unitemized_contributions_period'), 'exclude': lambda f: f is None }})
    r"""Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. total for the reporting period"""  
    individual_unitemized_contributions_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('individual_unitemized_contributions_ytd'), 'exclude': lambda f: f is None }})
    r"""Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. total for the year to date"""  
    is_amended: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_amended'), 'exclude': lambda f: f is None }})
    r"""False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment."""  
    items_on_hand_liquidated: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('items_on_hand_liquidated'), 'exclude': lambda f: f is None }})  
    loan_repayments_candidate_loans_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loan_repayments_candidate_loans_period'), 'exclude': lambda f: f is None }})  
    loan_repayments_candidate_loans_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loan_repayments_candidate_loans_ytd'), 'exclude': lambda f: f is None }})  
    loan_repayments_made_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loan_repayments_made_period'), 'exclude': lambda f: f is None }})  
    loan_repayments_made_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loan_repayments_made_ytd'), 'exclude': lambda f: f is None }})  
    loan_repayments_other_loans_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loan_repayments_other_loans_period'), 'exclude': lambda f: f is None }})  
    loan_repayments_other_loans_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loan_repayments_other_loans_ytd'), 'exclude': lambda f: f is None }})  
    loan_repayments_received_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loan_repayments_received_period'), 'exclude': lambda f: f is None }})  
    loan_repayments_received_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loan_repayments_received_ytd'), 'exclude': lambda f: f is None }})  
    loans_made_by_candidate_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loans_made_by_candidate_period'), 'exclude': lambda f: f is None }})  
    loans_made_by_candidate_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loans_made_by_candidate_ytd'), 'exclude': lambda f: f is None }})  
    loans_made_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loans_made_period'), 'exclude': lambda f: f is None }})  
    loans_made_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loans_made_ytd'), 'exclude': lambda f: f is None }})  
    loans_received_from_candidate_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loans_received_from_candidate_period'), 'exclude': lambda f: f is None }})  
    loans_received_from_candidate_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loans_received_from_candidate_ytd'), 'exclude': lambda f: f is None }})  
    means_filed: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('means_filed'), 'exclude': lambda f: f is None }})
    r"""The method used to file with the FEC, either electronic or on paper."""  
    most_recent: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('most_recent'), 'exclude': lambda f: f is None }})
    r"""Report is either new or is the most-recently filed amendment"""  
    most_recent_file_number: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('most_recent_file_number'), 'exclude': lambda f: f is None }})  
    net_contributions_cycle_to_date: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('net_contributions_cycle_to_date'), 'exclude': lambda f: f is None }})  
    net_contributions_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('net_contributions_period'), 'exclude': lambda f: f is None }})  
    net_contributions_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('net_contributions_ytd'), 'exclude': lambda f: f is None }})  
    net_operating_expenditures_cycle_to_date: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('net_operating_expenditures_cycle_to_date'), 'exclude': lambda f: f is None }})  
    net_operating_expenditures_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('net_operating_expenditures_period'), 'exclude': lambda f: f is None }})  
    net_operating_expenditures_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('net_operating_expenditures_ytd'), 'exclude': lambda f: f is None }})  
    non_allocated_fed_election_activity_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('non_allocated_fed_election_activity_period'), 'exclude': lambda f: f is None }})  
    non_allocated_fed_election_activity_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('non_allocated_fed_election_activity_ytd'), 'exclude': lambda f: f is None }})  
    nonfed_share_allocated_disbursements_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nonfed_share_allocated_disbursements_period'), 'exclude': lambda f: f is None }})  
    offsets_to_fundraising_expenditures_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offsets_to_fundraising_expenditures_period'), 'exclude': lambda f: f is None }})  
    offsets_to_fundraising_expenditures_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offsets_to_fundraising_expenditures_ytd'), 'exclude': lambda f: f is None }})  
    offsets_to_legal_accounting_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offsets_to_legal_accounting_period'), 'exclude': lambda f: f is None }})  
    offsets_to_legal_accounting_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offsets_to_legal_accounting_ytd'), 'exclude': lambda f: f is None }})  
    offsets_to_operating_expenditures_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offsets_to_operating_expenditures_period'), 'exclude': lambda f: f is None }})
    r"""Offsets to operating expenditures total for the reporting period"""  
    offsets_to_operating_expenditures_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offsets_to_operating_expenditures_ytd'), 'exclude': lambda f: f is None }})
    r"""Offsets to operating expenditures total for the year to date"""  
    operating_expenditures_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('operating_expenditures_period'), 'exclude': lambda f: f is None }})  
    operating_expenditures_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('operating_expenditures_ytd'), 'exclude': lambda f: f is None }})  
    other_disbursements_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('other_disbursements_period'), 'exclude': lambda f: f is None }})
    r"""Other disbursements total for the reporting period"""  
    other_disbursements_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('other_disbursements_ytd'), 'exclude': lambda f: f is None }})
    r"""Other disbursements total for the year to date"""  
    other_fed_operating_expenditures_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('other_fed_operating_expenditures_period'), 'exclude': lambda f: f is None }})  
    other_fed_operating_expenditures_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('other_fed_operating_expenditures_ytd'), 'exclude': lambda f: f is None }})  
    other_fed_receipts_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('other_fed_receipts_period'), 'exclude': lambda f: f is None }})  
    other_fed_receipts_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('other_fed_receipts_ytd'), 'exclude': lambda f: f is None }})  
    other_loans_received_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('other_loans_received_period'), 'exclude': lambda f: f is None }})  
    other_loans_received_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('other_loans_received_ytd'), 'exclude': lambda f: f is None }})  
    other_political_committee_contributions_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('other_political_committee_contributions_period'), 'exclude': lambda f: f is None }})
    r"""Other committees contributions total for the reporting period"""  
    other_political_committee_contributions_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('other_political_committee_contributions_ytd'), 'exclude': lambda f: f is None }})
    r"""Other committees contributions total for the year to date"""  
    other_receipts_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('other_receipts_period'), 'exclude': lambda f: f is None }})  
    other_receipts_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('other_receipts_ytd'), 'exclude': lambda f: f is None }})  
    pdf_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pdf_url'), 'exclude': lambda f: f is None }})  
    political_party_committee_contributions_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('political_party_committee_contributions_period'), 'exclude': lambda f: f is None }})
    r"""Party committees contributions total for the reporting period"""  
    political_party_committee_contributions_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('political_party_committee_contributions_ytd'), 'exclude': lambda f: f is None }})
    r"""Party committees contributions total for the year to date"""  
    previous_file_number: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previous_file_number'), 'exclude': lambda f: f is None }})  
    receipt_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('receipt_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date the FEC received the electronic or paper record"""  
    refunded_individual_contributions_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refunded_individual_contributions_period'), 'exclude': lambda f: f is None }})
    r"""Individual refunds total for the reporting period"""  
    refunded_individual_contributions_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refunded_individual_contributions_ytd'), 'exclude': lambda f: f is None }})
    r"""Individual refunds total for the year to date"""  
    refunded_other_political_committee_contributions_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refunded_other_political_committee_contributions_period'), 'exclude': lambda f: f is None }})
    r"""Other committee refunds total for the reporting period"""  
    refunded_other_political_committee_contributions_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refunded_other_political_committee_contributions_ytd'), 'exclude': lambda f: f is None }})
    r"""Other committee refunds total for the year to date"""  
    refunded_political_party_committee_contributions_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refunded_political_party_committee_contributions_period'), 'exclude': lambda f: f is None }})
    r"""Political party refunds total for the reporting period"""  
    refunded_political_party_committee_contributions_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refunded_political_party_committee_contributions_ytd'), 'exclude': lambda f: f is None }})
    r"""Political party refunds total for the year to date"""  
    refunds_total_contributions_col_total_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refunds_total_contributions_col_total_ytd'), 'exclude': lambda f: f is None }})  
    repayments_loans_made_by_candidate_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repayments_loans_made_by_candidate_period'), 'exclude': lambda f: f is None }})  
    repayments_loans_made_candidate_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repayments_loans_made_candidate_ytd'), 'exclude': lambda f: f is None }})  
    repayments_other_loans_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repayments_other_loans_period'), 'exclude': lambda f: f is None }})  
    repayments_other_loans_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repayments_other_loans_ytd'), 'exclude': lambda f: f is None }})  
    report_form: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('report_form'), 'exclude': lambda f: f is None }})  
    report_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('report_type'), 'exclude': lambda f: f is None }})
    r"""Name of report where the underlying data comes from:
        - 10D Pre-Election
        - 10G Pre-General
        - 10P Pre-Primary
        - 10R Pre-Run-Off
        - 10S Pre-Special
        - 12C Pre-Convention
        - 12G Pre-General
        - 12P Pre-Primary
        - 12R Pre-Run-Off
        - 12S Pre-Special
        - 30D Post-Election
        - 30G Post-General
        - 30P Post-Primary
        - 30R Post-Run-Off
        - 30S Post-Special
        - 60D Post-Convention
        - M1  January Monthly
        - M10 October Monthly
        - M11 November Monthly
        - M12 December Monthly
        - M2  February Monthly
        - M3  March Monthly
        - M4  April Monthly
        - M5  May Monthly
        - M6  June Monthly
        - M7  July Monthly
        - M8  August Monthly
        - M9  September Monthly
        - MY  Mid-Year Report
        - Q1  April Quarterly
        - Q2  July Quarterly
        - Q3  October Quarterly
        - TER Termination Report
        - YE  Year-End
        - ADJ COMP ADJUST AMEND
        - CA  COMPREHENSIVE AMEND
        - 90S Post Inaugural Supplement
        - 90D Post Inaugural
        - 48  48 Hour Notification
        - 24  24 Hour Notification
        - M7S July Monthly/Semi-Annual
        - MSA Monthly Semi-Annual (MY)
        - MYS Monthly Year End/Semi-Annual
        - Q2S July Quarterly/Semi-Annual
        - QSA Quarterly Semi-Annual (MY)
        - QYS Quarterly Year End/Semi-Annual
        - QYE Quarterly Semi-Annual (YE)
        - QMS Quarterly Mid-Year/ Semi-Annual
        - MSY Monthly Semi-Annual (YE)
    """  
    report_type_full: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('report_type_full'), 'exclude': lambda f: f is None }})
    r"""Name of report where the underlying data comes from:
        - 10D Pre-Election
        - 10G Pre-General
        - 10P Pre-Primary
        - 10R Pre-Run-Off
        - 10S Pre-Special
        - 12C Pre-Convention
        - 12G Pre-General
        - 12P Pre-Primary
        - 12R Pre-Run-Off
        - 12S Pre-Special
        - 30D Post-Election
        - 30G Post-General
        - 30P Post-Primary
        - 30R Post-Run-Off
        - 30S Post-Special
        - 60D Post-Convention
        - M1  January Monthly
        - M10 October Monthly
        - M11 November Monthly
        - M12 December Monthly
        - M2  February Monthly
        - M3  March Monthly
        - M4  April Monthly
        - M5  May Monthly
        - M6  June Monthly
        - M7  July Monthly
        - M8  August Monthly
        - M9  September Monthly
        - MY  Mid-Year Report
        - Q1  April Quarterly
        - Q2  July Quarterly
        - Q3  October Quarterly
        - TER Termination Report
        - YE  Year-End
        - ADJ COMP ADJUST AMEND
        - CA  COMPREHENSIVE AMEND
        - 90S Post Inaugural Supplement
        - 90D Post Inaugural
        - 48  48 Hour Notification
        - 24  24 Hour Notification
        - M7S July Monthly/Semi-Annual
        - MSA Monthly Semi-Annual (MY)
        - MYS Monthly Year End/Semi-Annual
        - Q2S July Quarterly/Semi-Annual
        - QSA Quarterly Semi-Annual (MY)
        - QYS Quarterly Year End/Semi-Annual
        - QYE Quarterly Semi-Annual (YE)
        - QMS Quarterly Mid-Year/ Semi-Annual
        - MSY Monthly Semi-Annual (YE)
    """  
    report_year: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('report_year'), 'exclude': lambda f: f is None }})
    r"""Forms with coverage date -
        year from the coverage ending date.
    Forms without coverage date - 
        year from the receipt date.
    """  
    shared_fed_activity_nonfed_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shared_fed_activity_nonfed_ytd'), 'exclude': lambda f: f is None }})  
    shared_fed_activity_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shared_fed_activity_period'), 'exclude': lambda f: f is None }})  
    shared_fed_activity_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shared_fed_activity_ytd'), 'exclude': lambda f: f is None }})  
    shared_fed_operating_expenditures_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shared_fed_operating_expenditures_period'), 'exclude': lambda f: f is None }})  
    shared_fed_operating_expenditures_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shared_fed_operating_expenditures_ytd'), 'exclude': lambda f: f is None }})  
    shared_nonfed_operating_expenditures_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shared_nonfed_operating_expenditures_period'), 'exclude': lambda f: f is None }})  
    shared_nonfed_operating_expenditures_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shared_nonfed_operating_expenditures_ytd'), 'exclude': lambda f: f is None }})  
    subtotal_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subtotal_period'), 'exclude': lambda f: f is None }})  
    subtotal_summary_page_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subtotal_summary_page_period'), 'exclude': lambda f: f is None }})  
    subtotal_summary_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subtotal_summary_period'), 'exclude': lambda f: f is None }})  
    subtotal_summary_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subtotal_summary_ytd'), 'exclude': lambda f: f is None }})  
    total_contribution_refunds_col_total_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_contribution_refunds_col_total_period'), 'exclude': lambda f: f is None }})  
    total_contribution_refunds_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_contribution_refunds_period'), 'exclude': lambda f: f is None }})
    r"""Total contribution refunds total for the reporting period"""  
    total_contribution_refunds_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_contribution_refunds_ytd'), 'exclude': lambda f: f is None }})
    r"""Total contribution refunds total for the year to date"""  
    total_contributions_column_total_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_contributions_column_total_period'), 'exclude': lambda f: f is None }})  
    total_contributions_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_contributions_period'), 'exclude': lambda f: f is None }})
    r"""Contribution total for the reporting period"""  
    total_contributions_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_contributions_ytd'), 'exclude': lambda f: f is None }})
    r"""Contribution total for the year to date"""  
    total_disbursements_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_disbursements_period'), 'exclude': lambda f: f is None }})
    r"""Disbursements total for the reporting period"""  
    total_disbursements_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_disbursements_ytd'), 'exclude': lambda f: f is None }})
    r"""Disbursements total for the year to date"""  
    total_fed_disbursements_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_fed_disbursements_period'), 'exclude': lambda f: f is None }})  
    total_fed_disbursements_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_fed_disbursements_ytd'), 'exclude': lambda f: f is None }})  
    total_fed_election_activity_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_fed_election_activity_period'), 'exclude': lambda f: f is None }})  
    total_fed_election_activity_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_fed_election_activity_ytd'), 'exclude': lambda f: f is None }})  
    total_fed_operating_expenditures_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_fed_operating_expenditures_period'), 'exclude': lambda f: f is None }})  
    total_fed_operating_expenditures_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_fed_operating_expenditures_ytd'), 'exclude': lambda f: f is None }})  
    total_fed_receipts_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_fed_receipts_period'), 'exclude': lambda f: f is None }})  
    total_fed_receipts_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_fed_receipts_ytd'), 'exclude': lambda f: f is None }})  
    total_individual_contributions_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_individual_contributions_period'), 'exclude': lambda f: f is None }})
    r"""Individual contributions total for the reporting period"""  
    total_individual_contributions_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_individual_contributions_ytd'), 'exclude': lambda f: f is None }})
    r"""Individual contributions total for the year to date"""  
    total_loan_repayments_made_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_loan_repayments_made_period'), 'exclude': lambda f: f is None }})  
    total_loan_repayments_made_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_loan_repayments_made_ytd'), 'exclude': lambda f: f is None }})  
    total_loans_received_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_loans_received_period'), 'exclude': lambda f: f is None }})  
    total_loans_received_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_loans_received_ytd'), 'exclude': lambda f: f is None }})  
    total_nonfed_transfers_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_nonfed_transfers_period'), 'exclude': lambda f: f is None }})  
    total_nonfed_transfers_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_nonfed_transfers_ytd'), 'exclude': lambda f: f is None }})  
    total_offsets_to_operating_expenditures_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_offsets_to_operating_expenditures_period'), 'exclude': lambda f: f is None }})  
    total_offsets_to_operating_expenditures_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_offsets_to_operating_expenditures_ytd'), 'exclude': lambda f: f is None }})  
    total_operating_expenditures_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_operating_expenditures_period'), 'exclude': lambda f: f is None }})  
    total_operating_expenditures_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_operating_expenditures_ytd'), 'exclude': lambda f: f is None }})  
    total_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_period'), 'exclude': lambda f: f is None }})  
    total_receipts_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_receipts_period'), 'exclude': lambda f: f is None }})
    r"""Anything of value (money, goods, services or property) received by a political committee total for the reporting period"""  
    total_receipts_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_receipts_ytd'), 'exclude': lambda f: f is None }})
    r"""Anything of value (money, goods, services or property) received by a political committee total for the year to date"""  
    total_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_ytd'), 'exclude': lambda f: f is None }})  
    transfers_from_affiliated_committee_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transfers_from_affiliated_committee_period'), 'exclude': lambda f: f is None }})  
    transfers_from_affiliated_committee_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transfers_from_affiliated_committee_ytd'), 'exclude': lambda f: f is None }})  
    transfers_from_affiliated_party_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transfers_from_affiliated_party_period'), 'exclude': lambda f: f is None }})  
    transfers_from_affiliated_party_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transfers_from_affiliated_party_ytd'), 'exclude': lambda f: f is None }})  
    transfers_from_nonfed_account_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transfers_from_nonfed_account_period'), 'exclude': lambda f: f is None }})  
    transfers_from_nonfed_account_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transfers_from_nonfed_account_ytd'), 'exclude': lambda f: f is None }})  
    transfers_from_nonfed_levin_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transfers_from_nonfed_levin_period'), 'exclude': lambda f: f is None }})  
    transfers_from_nonfed_levin_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transfers_from_nonfed_levin_ytd'), 'exclude': lambda f: f is None }})  
    transfers_from_other_authorized_committee_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transfers_from_other_authorized_committee_period'), 'exclude': lambda f: f is None }})  
    transfers_from_other_authorized_committee_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transfers_from_other_authorized_committee_ytd'), 'exclude': lambda f: f is None }})  
    transfers_to_affiliated_committee_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transfers_to_affiliated_committee_period'), 'exclude': lambda f: f is None }})  
    transfers_to_affilitated_committees_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transfers_to_affilitated_committees_ytd'), 'exclude': lambda f: f is None }})  
    transfers_to_other_authorized_committee_period: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transfers_to_other_authorized_committee_period'), 'exclude': lambda f: f is None }})  
    transfers_to_other_authorized_committee_ytd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transfers_to_other_authorized_committee_ytd'), 'exclude': lambda f: f is None }})  
    