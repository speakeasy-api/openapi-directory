// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DisassociateFleetXAmzTargetEnum
type DisassociateFleetXAmzTargetEnum string

const (
	DisassociateFleetXAmzTargetEnumPhotonAdminProxyServiceDisassociateFleet DisassociateFleetXAmzTargetEnum = "PhotonAdminProxyService.DisassociateFleet"
)

func (e *DisassociateFleetXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PhotonAdminProxyService.DisassociateFleet":
		*e = DisassociateFleetXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DisassociateFleetXAmzTargetEnum: %s", s)
	}
}

type DisassociateFleetRequest struct {
	DisassociateFleetRequest shared.DisassociateFleetRequest `request:"mediaType=application/json"`
	XAmzAlgorithm            *string                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256        *string                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential           *string                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                 *string                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken        *string                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature            *string                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders        *string                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget               DisassociateFleetXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DisassociateFleetResponse struct {
	// ConcurrentModificationException
	ConcurrentModificationException interface{}
	ContentType                     string
	// Success
	DisassociateFleetResult map[string]interface{}
	// OperationNotPermittedException
	OperationNotPermittedException interface{}
	// ResourceInUseException
	ResourceInUseException interface{}
	StatusCode             int
	RawResponse            *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
}
