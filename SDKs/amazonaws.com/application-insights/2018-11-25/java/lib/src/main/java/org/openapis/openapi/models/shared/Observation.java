/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Observation - Describes an anomaly or error with the application.
 */
public class Observation {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CloudWatchEventDetailType")
    public String cloudWatchEventDetailType;
    public Observation withCloudWatchEventDetailType(String cloudWatchEventDetailType) {
        this.cloudWatchEventDetailType = cloudWatchEventDetailType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CloudWatchEventId")
    public String cloudWatchEventId;
    public Observation withCloudWatchEventId(String cloudWatchEventId) {
        this.cloudWatchEventId = cloudWatchEventId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CloudWatchEventSource")
    public CloudWatchEventSourceEnum cloudWatchEventSource;
    public Observation withCloudWatchEventSource(CloudWatchEventSourceEnum cloudWatchEventSource) {
        this.cloudWatchEventSource = cloudWatchEventSource;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CodeDeployApplication")
    public String codeDeployApplication;
    public Observation withCodeDeployApplication(String codeDeployApplication) {
        this.codeDeployApplication = codeDeployApplication;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CodeDeployDeploymentGroup")
    public String codeDeployDeploymentGroup;
    public Observation withCodeDeployDeploymentGroup(String codeDeployDeploymentGroup) {
        this.codeDeployDeploymentGroup = codeDeployDeploymentGroup;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CodeDeployDeploymentId")
    public String codeDeployDeploymentId;
    public Observation withCodeDeployDeploymentId(String codeDeployDeploymentId) {
        this.codeDeployDeploymentId = codeDeployDeploymentId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CodeDeployInstanceGroupId")
    public String codeDeployInstanceGroupId;
    public Observation withCodeDeployInstanceGroupId(String codeDeployInstanceGroupId) {
        this.codeDeployInstanceGroupId = codeDeployInstanceGroupId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CodeDeployState")
    public String codeDeployState;
    public Observation withCodeDeployState(String codeDeployState) {
        this.codeDeployState = codeDeployState;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("EbsCause")
    public String ebsCause;
    public Observation withEbsCause(String ebsCause) {
        this.ebsCause = ebsCause;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("EbsEvent")
    public String ebsEvent;
    public Observation withEbsEvent(String ebsEvent) {
        this.ebsEvent = ebsEvent;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("EbsRequestId")
    public String ebsRequestId;
    public Observation withEbsRequestId(String ebsRequestId) {
        this.ebsRequestId = ebsRequestId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("EbsResult")
    public String ebsResult;
    public Observation withEbsResult(String ebsResult) {
        this.ebsResult = ebsResult;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Ec2State")
    public String ec2State;
    public Observation withEc2State(String ec2State) {
        this.ec2State = ec2State;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("EndTime")
    public OffsetDateTime endTime;
    public Observation withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("HealthEventArn")
    public String healthEventArn;
    public Observation withHealthEventArn(String healthEventArn) {
        this.healthEventArn = healthEventArn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("HealthEventDescription")
    public String healthEventDescription;
    public Observation withHealthEventDescription(String healthEventDescription) {
        this.healthEventDescription = healthEventDescription;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("HealthEventTypeCategory")
    public String healthEventTypeCategory;
    public Observation withHealthEventTypeCategory(String healthEventTypeCategory) {
        this.healthEventTypeCategory = healthEventTypeCategory;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("HealthEventTypeCode")
    public String healthEventTypeCode;
    public Observation withHealthEventTypeCode(String healthEventTypeCode) {
        this.healthEventTypeCode = healthEventTypeCode;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("HealthService")
    public String healthService;
    public Observation withHealthService(String healthService) {
        this.healthService = healthService;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Id")
    public String id;
    public Observation withId(String id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("LineTime")
    public OffsetDateTime lineTime;
    public Observation withLineTime(OffsetDateTime lineTime) {
        this.lineTime = lineTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("LogFilter")
    public LogFilterEnum logFilter;
    public Observation withLogFilter(LogFilterEnum logFilter) {
        this.logFilter = logFilter;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("LogGroup")
    public String logGroup;
    public Observation withLogGroup(String logGroup) {
        this.logGroup = logGroup;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("LogText")
    public String logText;
    public Observation withLogText(String logText) {
        this.logText = logText;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MetricName")
    public String metricName;
    public Observation withMetricName(String metricName) {
        this.metricName = metricName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MetricNamespace")
    public String metricNamespace;
    public Observation withMetricNamespace(String metricNamespace) {
        this.metricNamespace = metricNamespace;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RdsEventCategories")
    public String rdsEventCategories;
    public Observation withRdsEventCategories(String rdsEventCategories) {
        this.rdsEventCategories = rdsEventCategories;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RdsEventMessage")
    public String rdsEventMessage;
    public Observation withRdsEventMessage(String rdsEventMessage) {
        this.rdsEventMessage = rdsEventMessage;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("S3EventName")
    public String s3EventName;
    public Observation withS3EventName(String s3EventName) {
        this.s3EventName = s3EventName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SourceARN")
    public String sourceARN;
    public Observation withSourceARN(String sourceARN) {
        this.sourceARN = sourceARN;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SourceType")
    public String sourceType;
    public Observation withSourceType(String sourceType) {
        this.sourceType = sourceType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("StartTime")
    public OffsetDateTime startTime;
    public Observation withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("StatesArn")
    public String statesArn;
    public Observation withStatesArn(String statesArn) {
        this.statesArn = statesArn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("StatesExecutionArn")
    public String statesExecutionArn;
    public Observation withStatesExecutionArn(String statesExecutionArn) {
        this.statesExecutionArn = statesExecutionArn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("StatesInput")
    public String statesInput;
    public Observation withStatesInput(String statesInput) {
        this.statesInput = statesInput;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("StatesStatus")
    public String statesStatus;
    public Observation withStatesStatus(String statesStatus) {
        this.statesStatus = statesStatus;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Unit")
    public String unit;
    public Observation withUnit(String unit) {
        this.unit = unit;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Value")
    public Double value;
    public Observation withValue(Double value) {
        this.value = value;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("XRayErrorPercent")
    public Long xRayErrorPercent;
    public Observation withXRayErrorPercent(Long xRayErrorPercent) {
        this.xRayErrorPercent = xRayErrorPercent;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("XRayFaultPercent")
    public Long xRayFaultPercent;
    public Observation withXRayFaultPercent(Long xRayFaultPercent) {
        this.xRayFaultPercent = xRayFaultPercent;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("XRayNodeName")
    public String xRayNodeName;
    public Observation withXRayNodeName(String xRayNodeName) {
        this.xRayNodeName = xRayNodeName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("XRayNodeType")
    public String xRayNodeType;
    public Observation withXRayNodeType(String xRayNodeType) {
        this.xRayNodeType = xRayNodeType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("XRayRequestAverageLatency")
    public Long xRayRequestAverageLatency;
    public Observation withXRayRequestAverageLatency(Long xRayRequestAverageLatency) {
        this.xRayRequestAverageLatency = xRayRequestAverageLatency;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("XRayRequestCount")
    public Long xRayRequestCount;
    public Observation withXRayRequestCount(Long xRayRequestCount) {
        this.xRayRequestCount = xRayRequestCount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("XRayThrottlePercent")
    public Long xRayThrottlePercent;
    public Observation withXRayThrottlePercent(Long xRayThrottlePercent) {
        this.xRayThrottlePercent = xRayThrottlePercent;
        return this;
    }
    
}
