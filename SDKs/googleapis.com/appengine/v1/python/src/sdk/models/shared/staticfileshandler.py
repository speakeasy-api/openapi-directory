"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StaticFilesHandler:
    r"""Files served directly to the user for a given URL, such as images, CSS stylesheets, or JavaScript source files. Static file handlers describe which files in the application directory are static files, and which URLs serve them."""
    
    application_readable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applicationReadable'), 'exclude': lambda f: f is None }})
    r"""Whether files should also be uploaded as code data. By default, files declared in static file handlers are uploaded as static data and are only served to end users; they cannot be read by the application. If enabled, uploads are charged against both your code and static data storage resource quotas."""  
    expiration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiration'), 'exclude': lambda f: f is None }})
    r"""Time a static file served by this handler should be cached by web proxies and browsers."""  
    http_headers: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('httpHeaders'), 'exclude': lambda f: f is None }})
    r"""HTTP headers to use for all responses from these URLs."""  
    mime_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mimeType'), 'exclude': lambda f: f is None }})
    r"""MIME type used to serve all files served by this handler.Defaults to file-specific MIME types, which are derived from each file's filename extension."""  
    path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path'), 'exclude': lambda f: f is None }})
    r"""Path to the static files matched by the URL pattern, from the application root directory. The path can refer to text matched in groupings in the URL pattern."""  
    require_matching_file: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requireMatchingFile'), 'exclude': lambda f: f is None }})
    r"""Whether this handler should match the request if the file referenced by the handler does not exist."""  
    upload_path_regex: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uploadPathRegex'), 'exclude': lambda f: f is None }})
    r"""Regular expression that matches the file paths for all files that should be referenced by this handler."""  
    