/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * DataQueryJobCancelled - A cancelled data query job.
 * 
 */
public class DataQueryJobCancelled {
    /**
     * The query job creator's Id.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdBy")
    public String createdBy;
    public DataQueryJobCancelled withCreatedBy(String createdBy) {
        this.createdBy = createdBy;
        return this;
    }
    
    /**
     * Internal identifier of the query job.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public DataQueryJobCancelled withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The query that was submitted.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query")
    public String query;
    public DataQueryJobCancelled withQuery(String query) {
        this.query = query;
        return this;
    }
    
    /**
     * Status of the query job.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("queryStatus")
    public DataQueryJobCancelledQueryStatusEnum queryStatus;
    public DataQueryJobCancelled withQueryStatus(DataQueryJobCancelledQueryStatusEnum queryStatus) {
        this.queryStatus = queryStatus;
        return this;
    }
    
    /**
     * The number of times that Zuora will retry the query if Zuora is unable to perform the query.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remainingRetries")
    public Long remainingRetries;
    public DataQueryJobCancelled withRemainingRetries(Long remainingRetries) {
        this.remainingRetries = remainingRetries;
        return this;
    }
    
    /**
     * Date and time when the query job was last updated, in ISO 8601 format.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updatedOn")
    public OffsetDateTime updatedOn;
    public DataQueryJobCancelled withUpdatedOn(OffsetDateTime updatedOn) {
        this.updatedOn = updatedOn;
        return this;
    }
    
}
