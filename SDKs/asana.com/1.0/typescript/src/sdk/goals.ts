/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * A goal is an object in the goal-tracking system that helps your organization drive measurable results.
 */
export class Goals {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Add a collaborator to a goal
   *
   * @remarks
   * Adds followers to a goal. Returns the goal the followers were added to.
   * Each goal can be associated with zero or more followers in the system.
   * Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
   */
  addFollowers(
    req: operations.AddFollowersRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AddFollowersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AddFollowersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/goals/{goal_gid}/addFollowers",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AddFollowersResponse =
        new operations.AddFollowersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.addFollowers200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.AddFollowers200ApplicationJSON
            );
          }
          break;
        case [400, 401, 402, 403, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a goal
   *
   * @remarks
   * Creates a new goal in a workspace or team.
   *
   * Returns the full record of the newly created goal.
   */
  createGoal(
    req: operations.CreateGoalRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateGoalResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateGoalRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/goals";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateGoalResponse =
        new operations.CreateGoalResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createGoal201ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateGoal201ApplicationJSON
            );
          }
          break;
        case [400, 401, 402, 403, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a goal metric
   *
   * @remarks
   * Creates and adds a goal metric to a specified goal. Note that this replaces an existing goal metric if one already exists.
   */
  createGoalMetric(
    req: operations.CreateGoalMetricRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateGoalMetricResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateGoalMetricRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/goals/{goal_gid}/setMetric",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateGoalMetricResponse =
        new operations.CreateGoalMetricResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createGoalMetric200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateGoalMetric200ApplicationJSON
            );
          }
          break;
        case [400, 401, 402, 403, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete a goal
   *
   * @remarks
   * A specific, existing goal can be deleted by making a DELETE request on the URL for that goal.
   *
   * Returns an empty data record.
   */
  deleteGoal(
    req: operations.DeleteGoalRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteGoalResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteGoalRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/goals/{goal_gid}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteGoalResponse =
        new operations.DeleteGoalResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteGoal200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.DeleteGoal200ApplicationJSON
            );
          }
          break;
        case [400, 401, 402, 403, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a goal
   *
   * @remarks
   * Returns the complete goal record for a single goal.
   */
  getGoal(
    req: operations.GetGoalRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetGoalResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetGoalRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/goals/{goal_gid}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetGoalResponse = new operations.GetGoalResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getGoal200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetGoal200ApplicationJSON
            );
          }
          break;
        case [400, 401, 402, 403, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get goals
   *
   * @remarks
   * Returns compact goal records.
   */
  getGoals(
    req: operations.GetGoalsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetGoalsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetGoalsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/goals";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetGoalsResponse = new operations.GetGoalsResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getGoals200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetGoals200ApplicationJSON
            );
          }
          break;
        case [400, 401, 402, 403, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get parent goals from a goal
   *
   * @remarks
   * Returns a compact representation of all of the parent goals of a goal.
   */
  getParentGoalsForGoal(
    req: operations.GetParentGoalsForGoalRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetParentGoalsForGoalResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetParentGoalsForGoalRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/goals/{goal_gid}/parentGoals",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetParentGoalsForGoalResponse =
        new operations.GetParentGoalsForGoalResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getParentGoalsForGoal200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetParentGoalsForGoal200ApplicationJSON
              );
          }
          break;
        case [400, 401, 402, 403, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Remove a collaborator from a goal
   *
   * @remarks
   * Removes followers from a goal. Returns the goal the followers were removed from.
   * Each goal can be associated with zero or more followers in the system.
   * Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
   */
  removeFollowers(
    req: operations.RemoveFollowersRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.RemoveFollowersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RemoveFollowersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/goals/{goal_gid}/removeFollowers",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RemoveFollowersResponse =
        new operations.RemoveFollowersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.removeFollowers200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.RemoveFollowers200ApplicationJSON
            );
          }
          break;
        case [400, 401, 402, 403, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update a goal
   *
   * @remarks
   * An existing goal can be updated by making a PUT request on the URL for
   * that goal. Only the fields provided in the `data` block will be updated;
   * any unspecified fields will remain unchanged.
   *
   * Returns the complete updated goal record.
   */
  updateGoal(
    req: operations.UpdateGoalRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateGoalResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateGoalRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/goals/{goal_gid}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateGoalResponse =
        new operations.UpdateGoalResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateGoal200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UpdateGoal200ApplicationJSON
            );
          }
          break;
        case [400, 401, 403, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update a goal metric
   *
   * @remarks
   * Updates a goal's existing metric's `current_number_value` if one exists,
   * otherwise responds with a 400 status code.
   *
   * Returns the complete updated goal metric record.
   */
  updateGoalMetric(
    req: operations.UpdateGoalMetricRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateGoalMetricResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateGoalMetricRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/goals/{goal_gid}/setMetricCurrentValue",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateGoalMetricResponse =
        new operations.UpdateGoalMetricResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateGoalMetric200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UpdateGoalMetric200ApplicationJSON
            );
          }
          break;
        case [400, 401, 402, 403, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
