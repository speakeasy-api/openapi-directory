"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class POSTReversePaymentRequest:
    
    amount: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount') }})
    r"""The amount that needs to be reversed (chargeback). It cannot be greater than the total Payment amount."""  
    gateway_response: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gatewayResponse'), 'exclude': lambda f: f is None }})
    r"""The transaction response returned by the gateway for this transaction. If the transaction was declined, this reason is provided in the message."""  
    gateway_response_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gatewayResponseCode'), 'exclude': lambda f: f is None }})
    r"""Response message Code returned by the gateway about the transaction status."""  
    reference_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('referenceId'), 'exclude': lambda f: f is None }})
    r"""Unique Id generated by the gateway for each transaction. Use this ID to find the respective Zuora Payment ID."""  
    second_reference_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secondReferenceId'), 'exclude': lambda f: f is None }})
    r"""The second reference Id. Some gateways use two unique transaction IDs."""  
    settled_on: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('settledOn'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time of the transaction settlement. The format is `yyyy-mm-dd hh:mm:ss`."""  
    