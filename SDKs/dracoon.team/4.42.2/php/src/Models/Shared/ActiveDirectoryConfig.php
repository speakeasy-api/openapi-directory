<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * ActiveDirectoryConfig - Active Directory configuration
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class ActiveDirectoryConfig
{
    /**
     * If `userImport` is set to `true`,
     * 
     * 
     * the user must be member of this Active Directory group to receive a newly created DRACOON account.
     * 
     * @var string $adExportGroup
     */
	#[\JMS\Serializer\Annotation\SerializedName('adExportGroup')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $adExportGroup;
    
    /**
     * Unique name for an Active Directory configuration
     * 
     * @var string $alias
     */
	#[\JMS\Serializer\Annotation\SerializedName('alias')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $alias;
    
    /**
     * &#128679; Deprecated since v4.10.0
     * 
     * 
     * DEPRECATED, will be ignored
     * 
     * Determines whether a room is created for each user that is created by automatic import (like a home folder).
     * 
     * Room's name will equal the user's login name.
     * 
     * @var ?bool $createHomeFolder
     */
	#[\JMS\Serializer\Annotation\SerializedName('createHomeFolder')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $createHomeFolder = null;
    
    /**
     * &#128679; Deprecated since v4.10.0
     * 
     * 
     * DEPRECATED, will be ignored
     * 
     * ID of the room in which the individual rooms for users will be created.
     * 
     * @var ?int $homeFolderParent
     */
	#[\JMS\Serializer\Annotation\SerializedName('homeFolderParent')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $homeFolderParent = null;
    
    /**
     * ID
     * 
     * @var int $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $id;
    
    /**
     * Search scope of Active Directory; only users below this node can log on.
     * 
     * @var string $ldapUsersDomain
     */
	#[\JMS\Serializer\Annotation\SerializedName('ldapUsersDomain')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $ldapUsersDomain;
    
    /**
     * User group that is assigned to users who are created by automatic import.
     * 
     * 
     * Reset with `0`
     * 
     * @var ?int $sdsImportGroup
     */
	#[\JMS\Serializer\Annotation\SerializedName('sdsImportGroup')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $sdsImportGroup = null;
    
    /**
     * Distinguished Name (DN) of Active Directory administrative account
     * 
     * @var string $serverAdminName
     */
	#[\JMS\Serializer\Annotation\SerializedName('serverAdminName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $serverAdminName;
    
    /**
     * IPv4 or IPv6 address or host name
     * 
     * @var string $serverIp
     */
	#[\JMS\Serializer\Annotation\SerializedName('serverIp')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $serverIp;
    
    /**
     * Port
     * 
     * @var int $serverPort
     */
	#[\JMS\Serializer\Annotation\SerializedName('serverPort')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $serverPort;
    
    /**
     * SSL finger print of Active Directory server.
     * 
     * 
     * Mandatory for LDAPS connections.
     * 
     * Format: `Algorithm/Fingerprint`
     * 
     * @var ?string $sslFingerPrint
     */
	#[\JMS\Serializer\Annotation\SerializedName('sslFingerPrint')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $sslFingerPrint = null;
    
    /**
     * Determines whether LDAPS should be used instead of plain LDAP.
     * 
     * @var bool $useLdaps
     */
	#[\JMS\Serializer\Annotation\SerializedName('useLdaps')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $useLdaps;
    
    /**
     * Name of Active Directory attribute that is used as login name.
     * 
     * @var string $userFilter
     */
	#[\JMS\Serializer\Annotation\SerializedName('userFilter')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $userFilter;
    
    /**
     * Determines if a DRACOON account is automatically created for a new user
     * 
     * 
     * who successfully logs on with his / her AD / IDP account.
     * 
     * @var bool $userImport
     */
	#[\JMS\Serializer\Annotation\SerializedName('userImport')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $userImport;
    
	public function __construct()
	{
		$this->adExportGroup = "";
		$this->alias = "";
		$this->createHomeFolder = null;
		$this->homeFolderParent = null;
		$this->id = 0;
		$this->ldapUsersDomain = "";
		$this->sdsImportGroup = null;
		$this->serverAdminName = "";
		$this->serverIp = "";
		$this->serverPort = 0;
		$this->sslFingerPrint = null;
		$this->useLdaps = false;
		$this->userFilter = "";
		$this->userImport = false;
	}
}
