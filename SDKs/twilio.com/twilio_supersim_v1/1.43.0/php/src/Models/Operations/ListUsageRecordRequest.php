<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class ListUsageRecordRequest
{
    /**
     * Only include usage that occurred before this time (exclusive), specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. Default is the current time.
     * 
     * @var ?\DateTime $endTime
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=EndTime,dateTimeFormat=Y-m-d\TH:i:s.up')]
    public ?\DateTime $endTime = null;
    
    /**
     * SID or unique name of a Fleet resource. Only show UsageRecords representing usage for Super SIMs belonging to this Fleet resource at the time the usage occurred.
     * 
     * @var ?string $fleet
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=Fleet')]
    public ?string $fleet = null;
    
    /**
     * Time-based grouping that UsageRecords should be aggregated by. Can be: `hour`, `day`, or `all`. Default is `all`. `all` returns one UsageRecord that describes the usage for the entire period.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\UsageRecordEnumGranularityEnum $granularity
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=Granularity')]
    public ?\OpenAPI\OpenAPI\Models\Shared\UsageRecordEnumGranularityEnum $granularity = null;
    
    /**
     * Dimension over which to aggregate usage records. Can be: `sim`, `fleet`, `network`, `isoCountry`. Default is to not aggregate across any of these dimensions, UsageRecords will be aggregated into the time buckets described by the `Granularity` parameter.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\UsageRecordEnumGroupEnum $group
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=Group')]
    public ?\OpenAPI\OpenAPI\Models\Shared\UsageRecordEnumGroupEnum $group = null;
    
    /**
     * Alpha-2 ISO Country Code. Only show UsageRecords representing usage in this country.
     * 
     * @var ?string $isoCountry
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=IsoCountry')]
    public ?string $isoCountry = null;
    
    /**
     * SID of a Network resource. Only show UsageRecords representing usage on this network.
     * 
     * @var ?string $network
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=Network')]
    public ?string $network = null;
    
    /**
     * The page index. This value is simply for client state.
     * 
     * @var ?int $page
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=Page')]
    public ?int $page = null;
    
    /**
     * How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * 
     * @var ?int $pageSize
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=PageSize')]
    public ?int $pageSize = null;
    
    /**
     * The page token. This is provided by the API.
     * 
     * @var ?string $pageToken
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=PageToken')]
    public ?string $pageToken = null;
    
    /**
     * SID or unique name of a Sim resource. Only show UsageRecords representing usage incurred by this Super SIM.
     * 
     * @var ?string $sim
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=Sim')]
    public ?string $sim = null;
    
    /**
     * Only include usage that occurred at or after this time, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. Default is one month before the `end_time`.
     * 
     * @var ?\DateTime $startTime
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=StartTime,dateTimeFormat=Y-m-d\TH:i:s.up')]
    public ?\DateTime $startTime = null;
    
	public function __construct()
	{
		$this->endTime = null;
		$this->fleet = null;
		$this->granularity = null;
		$this->group = null;
		$this->isoCountry = null;
		$this->network = null;
		$this->page = null;
		$this->pageSize = null;
		$this->pageToken = null;
		$this->sim = null;
		$this->startTime = null;
	}
}
