/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GoogleCloudContactcenterinsightsV1Conversation - The conversation resource.
 */
public class GoogleCloudContactcenterinsightsV1Conversation {
    /**
     * An opaque, user-specified string representing the human agent who handled the conversation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("agentId")
    public String agentId;
    public GoogleCloudContactcenterinsightsV1Conversation withAgentId(String agentId) {
        this.agentId = agentId;
        return this;
    }
    
    /**
     * Call-specific metadata.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("callMetadata")
    public GoogleCloudContactcenterinsightsV1ConversationCallMetadata callMetadata;
    public GoogleCloudContactcenterinsightsV1Conversation withCallMetadata(GoogleCloudContactcenterinsightsV1ConversationCallMetadata callMetadata) {
        this.callMetadata = callMetadata;
        return this;
    }
    
    /**
     * Output only. The time at which the conversation was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;
    public GoogleCloudContactcenterinsightsV1Conversation withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * The conversation source, which is a combination of transcript and audio.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataSource")
    public GoogleCloudContactcenterinsightsV1ConversationDataSource dataSource;
    public GoogleCloudContactcenterinsightsV1Conversation withDataSource(GoogleCloudContactcenterinsightsV1ConversationDataSource dataSource) {
        this.dataSource = dataSource;
        return this;
    }
    
    /**
     * Output only. All the matched Dialogflow intents in the call. The key corresponds to a Dialogflow intent, format: projects/{project}/agent/{agent}/intents/{intent}
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dialogflowIntents")
    public java.util.Map<String, GoogleCloudContactcenterinsightsV1DialogflowIntent> dialogflowIntents;
    public GoogleCloudContactcenterinsightsV1Conversation withDialogflowIntents(java.util.Map<String, GoogleCloudContactcenterinsightsV1DialogflowIntent> dialogflowIntents) {
        this.dialogflowIntents = dialogflowIntents;
        return this;
    }
    
    /**
     * Output only. The duration of the conversation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration")
    public String duration;
    public GoogleCloudContactcenterinsightsV1Conversation withDuration(String duration) {
        this.duration = duration;
        return this;
    }
    
    /**
     * The time at which this conversation should expire. After this time, the conversation data and any associated analyses will be deleted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expireTime")
    public String expireTime;
    public GoogleCloudContactcenterinsightsV1Conversation withExpireTime(String expireTime) {
        this.expireTime = expireTime;
        return this;
    }
    
    /**
     * A map for the user to specify any custom fields. A maximum of 20 labels per conversation is allowed, with a maximum of 256 characters per entry.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;
    public GoogleCloudContactcenterinsightsV1Conversation withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * A user-specified language code for the conversation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("languageCode")
    public String languageCode;
    public GoogleCloudContactcenterinsightsV1Conversation withLanguageCode(String languageCode) {
        this.languageCode = languageCode;
        return this;
    }
    
    /**
     * The analysis resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("latestAnalysis")
    public GoogleCloudContactcenterinsightsV1Analysis latestAnalysis;
    public GoogleCloudContactcenterinsightsV1Conversation withLatestAnalysis(GoogleCloudContactcenterinsightsV1Analysis latestAnalysis) {
        this.latestAnalysis = latestAnalysis;
        return this;
    }
    
    /**
     * Immutable. The conversation medium, if unspecified will default to PHONE_CALL.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("medium")
    public GoogleCloudContactcenterinsightsV1ConversationMediumEnum medium;
    public GoogleCloudContactcenterinsightsV1Conversation withMedium(GoogleCloudContactcenterinsightsV1ConversationMediumEnum medium) {
        this.medium = medium;
        return this;
    }
    
    /**
     * Immutable. The resource name of the conversation. Format: projects/{project}/locations/{location}/conversations/{conversation}
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public GoogleCloudContactcenterinsightsV1Conversation withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Obfuscated user ID which the customer sent to us.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("obfuscatedUserId")
    public String obfuscatedUserId;
    public GoogleCloudContactcenterinsightsV1Conversation withObfuscatedUserId(String obfuscatedUserId) {
        this.obfuscatedUserId = obfuscatedUserId;
        return this;
    }
    
    /**
     * Output only. The annotations that were generated during the customer and agent interaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runtimeAnnotations")
    public GoogleCloudContactcenterinsightsV1RuntimeAnnotation[] runtimeAnnotations;
    public GoogleCloudContactcenterinsightsV1Conversation withRuntimeAnnotations(GoogleCloudContactcenterinsightsV1RuntimeAnnotation[] runtimeAnnotations) {
        this.runtimeAnnotations = runtimeAnnotations;
        return this;
    }
    
    /**
     * The time at which the conversation started.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startTime")
    public String startTime;
    public GoogleCloudContactcenterinsightsV1Conversation withStartTime(String startTime) {
        this.startTime = startTime;
        return this;
    }
    
    /**
     * A message representing the transcript of a conversation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transcript")
    public GoogleCloudContactcenterinsightsV1ConversationTranscript transcript;
    public GoogleCloudContactcenterinsightsV1Conversation withTranscript(GoogleCloudContactcenterinsightsV1ConversationTranscript transcript) {
        this.transcript = transcript;
        return this;
    }
    
    /**
     * Input only. The TTL for this resource. If specified, then this TTL will be used to calculate the expire time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ttl")
    public String ttl;
    public GoogleCloudContactcenterinsightsV1Conversation withTtl(String ttl) {
        this.ttl = ttl;
        return this;
    }
    
    /**
     * Output only. The number of turns in the conversation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("turnCount")
    public Integer turnCount;
    public GoogleCloudContactcenterinsightsV1Conversation withTurnCount(Integer turnCount) {
        this.turnCount = turnCount;
        return this;
    }
    
    /**
     * Output only. The most recent time at which the conversation was updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    public String updateTime;
    public GoogleCloudContactcenterinsightsV1Conversation withUpdateTime(String updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
}
