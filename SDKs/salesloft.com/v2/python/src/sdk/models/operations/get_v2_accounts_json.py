"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Any, Optional


@dataclasses.dataclass
class GetV2AccountsJSONRequest:
    
    account_stage_id: Optional[list[int]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'account_stage_id', 'style': 'form', 'explode': False }})
    r"""Filters accounts by account_stage_id. Multiple account_stage_ids can be applied. An additional value of \\"_is_null\\" can be passed to filter accounts that do not have account_stage_id"""  
    account_tier_id: Optional[list[int]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'account_tier_id', 'style': 'form', 'explode': False }})
    r"""Filters accounts by account_tier_id. Multiple account tier ids can be applied"""  
    archived: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'archived', 'style': 'form', 'explode': True }})
    r"""Filters accounts by archived_at status. Returns only accounts where archived_at is not null if this field is true. Returns only accounts where archived_at is null if this field is false. Do not pass this parameter to return both archived and unarchived accounts. This filter is not applied if any value other than \\"true\\" or \\"false\\" is passed."""  
    city: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'city', 'style': 'form', 'explode': False }})
    r"""Filters accounts by city by exact match. Supports partial matching"""  
    country: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'country', 'style': 'form', 'explode': False }})
    r"""Filters accounts by country by exact match. Supports partial matching"""  
    created_at: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'created_at', 'style': 'form', 'explode': False }})
    r"""Equality filters that are applied to the created_at field. A single filter can be used by itself or combined with other filters to create a range.
    
    ---CUSTOM---
    {\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}
    """  
    crm_id: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'crm_id', 'style': 'form', 'explode': False }})
    r"""Filters accounts by crm_id. Multiple crm ids can be applied"""  
    custom_fields: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'custom_fields', 'style': 'form', 'explode': True }})
    r"""Filters by accounts matching all given custom fields. The custom field names are case-sensitive, but the provided values are case-insensitive. Example: v2/accounts?custom_fields[custom_field_name]=custom_field_value"""  
    domain: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'domain', 'style': 'form', 'explode': True }})
    r"""Domain of the accounts to fetch. Domains are unique and lowercase"""  
    ids: Optional[list[int]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ids', 'style': 'form', 'explode': False }})
    r"""IDs of accounts to fetch. If a record can't be found, that record won't be returned and your request will be successful"""  
    include_paging_counts: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include_paging_counts', 'style': 'form', 'explode': True }})
    r"""Whether to include total_pages and total_count in the metadata. Defaults to false"""  
    industry: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'industry', 'style': 'form', 'explode': False }})
    r"""Filters accounts by industry by exact match. Supports partial matching"""  
    last_contacted: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'last_contacted', 'style': 'form', 'explode': True }})
    r"""Equality filters that are applied to the last_contacted field. A single filter can be used by itself or combined with other filters to create a range.
    Additional values of \"_is_null\" or \"_is_not_null\" can be passed to filter records that either have no timestamp value or any timestamp value.
    ---CUSTOM---
    {\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}
    """  
    limit_paging_counts: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit_paging_counts', 'style': 'form', 'explode': True }})
    r"""Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data"""  
    locales: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'locales', 'style': 'form', 'explode': False }})
    r"""Filters accounts by locale. Multiple locales are allowed"""  
    name: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'name', 'style': 'form', 'explode': False }})
    r"""Names of accounts to fetch. Name matches are exact and case sensitive. Multiple names can be fetched."""  
    owner_crm_id: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'owner_crm_id', 'style': 'form', 'explode': False }})
    r"""Filters accounts by owner_crm_id. Multiple owner_crm_ids can be applied. An additional value of \\"_is_null\\" can be passed to filter accounts that are unowned. A \\"_not_in\\" modifier can be used to exclude specific owner_crm_ids. Example: v2/accounts?owner_crm_id[_not_in]=id"""  
    owner_id: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'owner_id', 'style': 'form', 'explode': False }})
    r"""Filters accounts by owner_id. Multiple owner_ids can be applied. An additional value of \\"_is_null\\" can be passed to filter accounts that are unowned"""  
    owner_is_active: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'owner_is_active', 'style': 'form', 'explode': True }})
    r"""Filters accounts by whether the owner is active or not."""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""The current page to fetch results from. Defaults to 1"""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""How many records to show per page in the range [1, 100]. Defaults to 25"""  
    sort_by: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_by', 'style': 'form', 'explode': True }})
    r"""Key to sort on, must be one of: created_at, updated_at, last_contacted_at, account_stage, account_stage_name, account_tier, account_tier_name, name, counts_people. Defaults to updated_at"""  
    sort_direction: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_direction', 'style': 'form', 'explode': True }})
    r"""Direction to sort in, must be one of: ASC, DESC. Defaults to DESC"""  
    state: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'state', 'style': 'form', 'explode': False }})
    r"""Filters accounts by state by exact match. Supports partial matching"""  
    tag: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tag', 'style': 'form', 'explode': False }})
    r"""Filters accounts by the tags applied to the account. Multiple tags can be applied"""  
    tag_id: Optional[list[int]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tag_id', 'style': 'form', 'explode': False }})
    r"""Filters accounts by the tag id's applied to the account. Multiple tag id's can be applied"""  
    updated_at: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'updated_at', 'style': 'form', 'explode': False }})
    r"""Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.
    
    ---CUSTOM---
    {\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}
    """  
    user_relationships: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'user_relationships', 'style': 'form', 'explode': True }})
    r"""Filters by accounts matching all given user relationship fields, _is_null or _unmapped can be passed to filter accounts with null or unmapped user relationship values. Example: v2/accounts?user_relationships[name]=value"""  
    website: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'website', 'style': 'form', 'explode': False }})
    r"""Filters accounts by website. Multiple websites can be applied. An additional value of \\"_is_null\\" can be passed to filter accounts that do not have a website."""  
    

@dataclasses.dataclass
class GetV2AccountsJSONResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    