// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// JSONFileFormatCompressionEnum - Compression of the loaded JSON file.
type JSONFileFormatCompressionEnum string

const (
	JSONFileFormatCompressionEnumJSONCompressionUnspecified JSONFileFormatCompressionEnum = "JSON_COMPRESSION_UNSPECIFIED"
	JSONFileFormatCompressionEnumNoCompression              JSONFileFormatCompressionEnum = "NO_COMPRESSION"
	JSONFileFormatCompressionEnumGzip                       JSONFileFormatCompressionEnum = "GZIP"
)

func (e JSONFileFormatCompressionEnum) ToPointer() *JSONFileFormatCompressionEnum {
	return &e
}

func (e *JSONFileFormatCompressionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "JSON_COMPRESSION_UNSPECIFIED":
		fallthrough
	case "NO_COMPRESSION":
		fallthrough
	case "GZIP":
		*e = JSONFileFormatCompressionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for JSONFileFormatCompressionEnum: %v", v)
	}
}

// JSONFileFormatSchemaFileFormatEnum - The schema file format along JSON data files.
type JSONFileFormatSchemaFileFormatEnum string

const (
	JSONFileFormatSchemaFileFormatEnumSchemaFileFormatUnspecified JSONFileFormatSchemaFileFormatEnum = "SCHEMA_FILE_FORMAT_UNSPECIFIED"
	JSONFileFormatSchemaFileFormatEnumNoSchemaFile                JSONFileFormatSchemaFileFormatEnum = "NO_SCHEMA_FILE"
	JSONFileFormatSchemaFileFormatEnumAvroSchemaFile              JSONFileFormatSchemaFileFormatEnum = "AVRO_SCHEMA_FILE"
)

func (e JSONFileFormatSchemaFileFormatEnum) ToPointer() *JSONFileFormatSchemaFileFormatEnum {
	return &e
}

func (e *JSONFileFormatSchemaFileFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SCHEMA_FILE_FORMAT_UNSPECIFIED":
		fallthrough
	case "NO_SCHEMA_FILE":
		fallthrough
	case "AVRO_SCHEMA_FILE":
		*e = JSONFileFormatSchemaFileFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for JSONFileFormatSchemaFileFormatEnum: %v", v)
	}
}

// JSONFileFormat - JSON file format configuration.
type JSONFileFormat struct {
	// Compression of the loaded JSON file.
	Compression *JSONFileFormatCompressionEnum `json:"compression,omitempty"`
	// The schema file format along JSON data files.
	SchemaFileFormat *JSONFileFormatSchemaFileFormatEnum `json:"schemaFileFormat,omitempty"`
}
