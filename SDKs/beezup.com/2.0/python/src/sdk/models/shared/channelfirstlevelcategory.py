"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import channelcategory as shared_channelcategory
from ..shared import channelcategorycolumnoverride as shared_channelcategorycolumnoverride
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ChannelFirstLevelCategory:
    r"""The first level category with his sub categories"""
    
    channel_category_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelCategoryId') }})  
    channel_category_level: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelCategoryLevel') }})
    r"""The channel category level starting from 1"""  
    channel_category_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelCategoryName') }})
    r"""The channel category name"""  
    channel_category_channel_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelCategoryChannelCode'), 'exclude': lambda f: f is None }})
    r"""The channel category channel code identifier"""  
    channel_category_column_overrides: Optional[dict[str, shared_channelcategorycolumnoverride.ChannelCategoryColumnOverride]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelCategoryColumnOverrides'), 'exclude': lambda f: f is None }})
    r"""The channel category column overrides"""  
    channel_category_default_cost: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelCategoryDefaultCost'), 'exclude': lambda f: f is None }})
    r"""The default cost on this channel category"""  
    sub_categories: Optional[list[shared_channelcategory.ChannelCategory]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subCategories'), 'exclude': lambda f: f is None }})  
    