// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type GamesListQueryParams struct {
	// Filter by creators, for example: `78,28` or `cris-velasco,mike-morasky`.
	Creators *string `queryParam:"style=form,explode=true,name=creators"`
	// Filter by a release date, for example: `2010-01-01,2018-12-31.1960-01-01,1969-12-31`.
	Dates *string `queryParam:"style=form,explode=true,name=dates"`
	// Filter by developers, for example: `1612,18893` or `valve-software,feral-interactive`.
	Developers *string `queryParam:"style=form,explode=true,name=developers"`
	// Exclude additions.
	ExcludeAdditions *bool `queryParam:"style=form,explode=true,name=exclude_additions"`
	// Exclude games from a particular collection, for example: `123`.
	ExcludeCollection *int64 `queryParam:"style=form,explode=true,name=exclude_collection"`
	// Exclude games which included in a game series.
	ExcludeGameSeries *bool `queryParam:"style=form,explode=true,name=exclude_game_series"`
	// Exclude games which have additions.
	ExcludeParents *bool `queryParam:"style=form,explode=true,name=exclude_parents"`
	// Exclude stores, for example: `5,6`.
	ExcludeStores *string `queryParam:"style=form,explode=true,name=exclude_stores"`
	// Filter by genres, for example: `4,51` or `action,indie`.
	Genres *string `queryParam:"style=form,explode=true,name=genres"`
	// Filter by a metacritic rating, for example: `80,100`.
	Metacritic *string `queryParam:"style=form,explode=true,name=metacritic"`
	// Available fields: `name`, `released`, `added`, `created`, `updated`, `rating`, `metacritic`. You can reverse the sort order adding a hyphen, for example: `-released`.
	Ordering *string `queryParam:"style=form,explode=true,name=ordering"`
	// A page number within the paginated result set.
	Page *int64 `queryParam:"style=form,explode=true,name=page"`
	// Number of results to return per page.
	PageSize *int64 `queryParam:"style=form,explode=true,name=page_size"`
	// Filter by parent platforms, for example: `1,2,3`.
	ParentPlatforms *string `queryParam:"style=form,explode=true,name=parent_platforms"`
	// Filter by platforms, for example: `4,5`.
	Platforms *string `queryParam:"style=form,explode=true,name=platforms"`
	// Filter by platforms count, for example: `1`.
	PlatformsCount *int64 `queryParam:"style=form,explode=true,name=platforms_count"`
	// Filter by publishers, for example: `354,20987` or `electronic-arts,microsoft-studios`.
	Publishers *string `queryParam:"style=form,explode=true,name=publishers"`
	// Search query.
	Search *string `queryParam:"style=form,explode=true,name=search"`
	// Mark the search query as exact.
	SearchExact *bool `queryParam:"style=form,explode=true,name=search_exact"`
	// Disable fuzziness for the search query.
	SearchPrecise *bool `queryParam:"style=form,explode=true,name=search_precise"`
	// Filter by stores, for example: `5,6`.
	Stores *string `queryParam:"style=form,explode=true,name=stores"`
	// Filter by tags, for example: `31,7` or `singleplayer,multiplayer`.
	Tags *string `queryParam:"style=form,explode=true,name=tags"`
	// Filter by an update date, for example: `2020-12-01,2020-12-31`.
	Updated *string `queryParam:"style=form,explode=true,name=updated"`
}

type GamesListRequest struct {
	QueryParams GamesListQueryParams
}

type GamesList200ApplicationJSON struct {
	Count    int64         `json:"count"`
	Next     *string       `json:"next,omitempty"`
	Previous *string       `json:"previous,omitempty"`
	Results  []shared.Game `json:"results"`
}

type GamesListResponse struct {
	ContentType                       string
	StatusCode                        int
	RawResponse                       *http.Response
	GamesList200ApplicationJSONObject *GamesList200ApplicationJSON
}
