// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type JobLogEventEnum string

const (
	JobLogEventEnumJobStart                    JobLogEventEnum = "JOB_START"
	JobLogEventEnumServerSkipped               JobLogEventEnum = "SERVER_SKIPPED"
	JobLogEventEnumCleanupStart                JobLogEventEnum = "CLEANUP_START"
	JobLogEventEnumCleanupEnd                  JobLogEventEnum = "CLEANUP_END"
	JobLogEventEnumCleanupFail                 JobLogEventEnum = "CLEANUP_FAIL"
	JobLogEventEnumSnapshotStart               JobLogEventEnum = "SNAPSHOT_START"
	JobLogEventEnumSnapshotEnd                 JobLogEventEnum = "SNAPSHOT_END"
	JobLogEventEnumSnapshotFail                JobLogEventEnum = "SNAPSHOT_FAIL"
	JobLogEventEnumUsingPreviousSnapshot       JobLogEventEnum = "USING_PREVIOUS_SNAPSHOT"
	JobLogEventEnumUsingPreviousSnapshotFailed JobLogEventEnum = "USING_PREVIOUS_SNAPSHOT_FAILED"
	JobLogEventEnumConversionStart             JobLogEventEnum = "CONVERSION_START"
	JobLogEventEnumConversionEnd               JobLogEventEnum = "CONVERSION_END"
	JobLogEventEnumConversionFail              JobLogEventEnum = "CONVERSION_FAIL"
	JobLogEventEnumLaunchStart                 JobLogEventEnum = "LAUNCH_START"
	JobLogEventEnumLaunchFailed                JobLogEventEnum = "LAUNCH_FAILED"
	JobLogEventEnumJobCancel                   JobLogEventEnum = "JOB_CANCEL"
	JobLogEventEnumJobEnd                      JobLogEventEnum = "JOB_END"
)

func (e JobLogEventEnum) ToPointer() *JobLogEventEnum {
	return &e
}

func (e *JobLogEventEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "JOB_START":
		fallthrough
	case "SERVER_SKIPPED":
		fallthrough
	case "CLEANUP_START":
		fallthrough
	case "CLEANUP_END":
		fallthrough
	case "CLEANUP_FAIL":
		fallthrough
	case "SNAPSHOT_START":
		fallthrough
	case "SNAPSHOT_END":
		fallthrough
	case "SNAPSHOT_FAIL":
		fallthrough
	case "USING_PREVIOUS_SNAPSHOT":
		fallthrough
	case "USING_PREVIOUS_SNAPSHOT_FAILED":
		fallthrough
	case "CONVERSION_START":
		fallthrough
	case "CONVERSION_END":
		fallthrough
	case "CONVERSION_FAIL":
		fallthrough
	case "LAUNCH_START":
		fallthrough
	case "LAUNCH_FAILED":
		fallthrough
	case "JOB_CANCEL":
		fallthrough
	case "JOB_END":
		*e = JobLogEventEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for JobLogEventEnum: %v", v)
	}
}
