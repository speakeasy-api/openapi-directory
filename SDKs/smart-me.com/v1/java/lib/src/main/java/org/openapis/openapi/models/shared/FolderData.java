/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * FolderData - Container class for the folder API
 */
public class FolderData {
    /**
     * The Counter values for electricity (kWh)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ElectricityCounterValue")
    public Double electricityCounterValue;
    public FolderData withElectricityCounterValue(Double electricityCounterValue) {
        this.electricityCounterValue = electricityCounterValue;
        return this;
    }
    
    /**
     * The Power for electricity (kW)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ElectricityPower")
    public Double electricityPower;
    public FolderData withElectricityPower(Double electricityPower) {
        this.electricityPower = electricityPower;
        return this;
    }
    
    /**
     * The Counter values for Gas (m3)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("GasCounterValue")
    public Double gasCounterValue;
    public FolderData withGasCounterValue(Double gasCounterValue) {
        this.gasCounterValue = gasCounterValue;
        return this;
    }
    
    /**
     * The Flow Rate for Gas (m3/h)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("GasFlowRate")
    public Double gasFlowRate;
    public FolderData withGasFlowRate(Double gasFlowRate) {
        this.gasFlowRate = gasFlowRate;
        return this;
    }
    
    /**
     * The Counter values for Heat (kWh)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("HeatCounterValue")
    public Double heatCounterValue;
    public FolderData withHeatCounterValue(Double heatCounterValue) {
        this.heatCounterValue = heatCounterValue;
        return this;
    }
    
    /**
     * The Power for Heat (kW)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("HeatPower")
    public Double heatPower;
    public FolderData withHeatPower(Double heatPower) {
        this.heatPower = heatPower;
        return this;
    }
    
    /**
     * The Counter values for Water (m3)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("WaterCounterValue")
    public Double waterCounterValue;
    public FolderData withWaterCounterValue(Double waterCounterValue) {
        this.waterCounterValue = waterCounterValue;
        return this;
    }
    
    /**
     * The Flow Rate for Water (m3/h)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("WaterFlowRate")
    public Double waterFlowRate;
    public FolderData withWaterFlowRate(Double waterFlowRate) {
        this.waterFlowRate = waterFlowRate;
        return this;
    }
    
}
