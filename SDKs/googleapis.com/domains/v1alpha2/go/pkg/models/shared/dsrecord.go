// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DsRecordAlgorithmEnum - The algorithm used to generate the referenced DNSKEY.
type DsRecordAlgorithmEnum string

const (
	DsRecordAlgorithmEnumAlgorithmUnspecified DsRecordAlgorithmEnum = "ALGORITHM_UNSPECIFIED"
	DsRecordAlgorithmEnumRsamd5               DsRecordAlgorithmEnum = "RSAMD5"
	DsRecordAlgorithmEnumDh                   DsRecordAlgorithmEnum = "DH"
	DsRecordAlgorithmEnumDsa                  DsRecordAlgorithmEnum = "DSA"
	DsRecordAlgorithmEnumEcc                  DsRecordAlgorithmEnum = "ECC"
	DsRecordAlgorithmEnumRsasha1              DsRecordAlgorithmEnum = "RSASHA1"
	DsRecordAlgorithmEnumDsansec3Sha1         DsRecordAlgorithmEnum = "DSANSEC3SHA1"
	DsRecordAlgorithmEnumRsasha1Nsec3Sha1     DsRecordAlgorithmEnum = "RSASHA1NSEC3SHA1"
	DsRecordAlgorithmEnumRsasha256            DsRecordAlgorithmEnum = "RSASHA256"
	DsRecordAlgorithmEnumRsasha512            DsRecordAlgorithmEnum = "RSASHA512"
	DsRecordAlgorithmEnumEccgost              DsRecordAlgorithmEnum = "ECCGOST"
	DsRecordAlgorithmEnumEcdsap256Sha256      DsRecordAlgorithmEnum = "ECDSAP256SHA256"
	DsRecordAlgorithmEnumEcdsap384Sha384      DsRecordAlgorithmEnum = "ECDSAP384SHA384"
	DsRecordAlgorithmEnumEd25519              DsRecordAlgorithmEnum = "ED25519"
	DsRecordAlgorithmEnumEd448                DsRecordAlgorithmEnum = "ED448"
	DsRecordAlgorithmEnumIndirect             DsRecordAlgorithmEnum = "INDIRECT"
	DsRecordAlgorithmEnumPrivatedns           DsRecordAlgorithmEnum = "PRIVATEDNS"
	DsRecordAlgorithmEnumPrivateoid           DsRecordAlgorithmEnum = "PRIVATEOID"
)

func (e DsRecordAlgorithmEnum) ToPointer() *DsRecordAlgorithmEnum {
	return &e
}

func (e *DsRecordAlgorithmEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALGORITHM_UNSPECIFIED":
		fallthrough
	case "RSAMD5":
		fallthrough
	case "DH":
		fallthrough
	case "DSA":
		fallthrough
	case "ECC":
		fallthrough
	case "RSASHA1":
		fallthrough
	case "DSANSEC3SHA1":
		fallthrough
	case "RSASHA1NSEC3SHA1":
		fallthrough
	case "RSASHA256":
		fallthrough
	case "RSASHA512":
		fallthrough
	case "ECCGOST":
		fallthrough
	case "ECDSAP256SHA256":
		fallthrough
	case "ECDSAP384SHA384":
		fallthrough
	case "ED25519":
		fallthrough
	case "ED448":
		fallthrough
	case "INDIRECT":
		fallthrough
	case "PRIVATEDNS":
		fallthrough
	case "PRIVATEOID":
		*e = DsRecordAlgorithmEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DsRecordAlgorithmEnum: %v", v)
	}
}

// DsRecordDigestTypeEnum - The hash function used to generate the digest of the referenced DNSKEY.
type DsRecordDigestTypeEnum string

const (
	DsRecordDigestTypeEnumDigestTypeUnspecified DsRecordDigestTypeEnum = "DIGEST_TYPE_UNSPECIFIED"
	DsRecordDigestTypeEnumSha1                  DsRecordDigestTypeEnum = "SHA1"
	DsRecordDigestTypeEnumSha256                DsRecordDigestTypeEnum = "SHA256"
	DsRecordDigestTypeEnumGost3411              DsRecordDigestTypeEnum = "GOST3411"
	DsRecordDigestTypeEnumSha384                DsRecordDigestTypeEnum = "SHA384"
)

func (e DsRecordDigestTypeEnum) ToPointer() *DsRecordDigestTypeEnum {
	return &e
}

func (e *DsRecordDigestTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DIGEST_TYPE_UNSPECIFIED":
		fallthrough
	case "SHA1":
		fallthrough
	case "SHA256":
		fallthrough
	case "GOST3411":
		fallthrough
	case "SHA384":
		*e = DsRecordDigestTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DsRecordDigestTypeEnum: %v", v)
	}
}

// DsRecord - Defines a Delegation Signer (DS) record, which is needed to enable DNSSEC for a domain. It contains a digest (hash) of a DNSKEY record that must be present in the domain's DNS zone.
type DsRecord struct {
	// The algorithm used to generate the referenced DNSKEY.
	Algorithm *DsRecordAlgorithmEnum `json:"algorithm,omitempty"`
	// The digest generated from the referenced DNSKEY.
	Digest *string `json:"digest,omitempty"`
	// The hash function used to generate the digest of the referenced DNSKEY.
	DigestType *DsRecordDigestTypeEnum `json:"digestType,omitempty"`
	// The key tag of the record. Must be set in range 0 -- 65535.
	KeyTag *int `json:"keyTag,omitempty"`
}
