"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Estimate:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_estimate(self, request: operations.GetEstimateRequest) -> operations.GetEstimateResponse:
        r"""Get a specific estimate of project
        Get a specific estimate of project
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetEstimateRequest, base_url, '/v1/workgroups/{workgroup_id}/projects/{project_id}/estimates/{estimate_id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEstimateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/csv'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EstimateExpandVO])
                res.estimate_expand_vo = out
            if utils.match_content_type(content_type, 'application/x-json-smile'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EstimateExpandVO])
                res.estimate_expand_vo = out
        elif http_res.status_code in [404, 500]:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/csv'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPStatusVO])
                res.http_status_vo = out
            if utils.match_content_type(content_type, 'application/x-json-smile'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPStatusVO])
                res.http_status_vo = out

        return res

    def get_estimate_list(self, request: operations.GetEstimateListRequest) -> operations.GetEstimateListResponse:
        r"""List the Estimates
        List the Estimates
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetEstimateListRequest, base_url, '/v1/workgroups/{workgroup_id}/projects/{project_id}/estimates', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEstimateListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/csv'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EstimateListExpandVO])
                res.estimate_list_expand_vo = out
            if utils.match_content_type(content_type, 'application/x-json-smile'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EstimateListExpandVO])
                res.estimate_list_expand_vo = out
        elif http_res.status_code in [404, 500]:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/csv'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPStatusVO])
                res.http_status_vo = out
            if utils.match_content_type(content_type, 'application/x-json-smile'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPStatusVO])
                res.http_status_vo = out

        return res

    def post_estimate_json(self, request: operations.PostEstimateJSONRequest) -> operations.PostEstimateJSONResponse:
        r"""Create a Estimate
        Create a Estimate
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostEstimateJSONRequest, base_url, '/v1/workgroups/{workgroup_id}/projects/{project_id}/estimates', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "estimate_po", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostEstimateJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/csv'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EstimatePO])
                res.estimate_po = out
            if utils.match_content_type(content_type, 'application/x-json-smile'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EstimatePO])
                res.estimate_po = out
        elif http_res.status_code in [422, 500]:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/csv'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPStatusVO])
                res.http_status_vo = out
            if utils.match_content_type(content_type, 'application/x-json-smile'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPStatusVO])
                res.http_status_vo = out

        return res

    def post_estimate_raw(self, request: operations.PostEstimateRawRequest) -> operations.PostEstimateRawResponse:
        r"""Create a Estimate
        Create a Estimate
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostEstimateRawRequest, base_url, '/v1/workgroups/{workgroup_id}/projects/{project_id}/estimates', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostEstimateRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/csv'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EstimatePO])
                res.estimate_po = out
            if utils.match_content_type(content_type, 'application/x-json-smile'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EstimatePO])
                res.estimate_po = out
        elif http_res.status_code in [422, 500]:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/csv'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPStatusVO])
                res.http_status_vo = out
            if utils.match_content_type(content_type, 'application/x-json-smile'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPStatusVO])
                res.http_status_vo = out

        return res

    