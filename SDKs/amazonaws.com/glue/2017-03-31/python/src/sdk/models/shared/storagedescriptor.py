"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import column as shared_column
from ..shared import order as shared_order
from ..shared import schemareference as shared_schemareference
from ..shared import serdeinfo as shared_serdeinfo
from ..shared import skewedinfo as shared_skewedinfo
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StorageDescriptor:
    r"""Describes the physical storage of table data."""
    
    additional_locations: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AdditionalLocations'), 'exclude': lambda f: f is None }})  
    bucket_columns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BucketColumns'), 'exclude': lambda f: f is None }})  
    columns: Optional[list[shared_column.Column]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Columns'), 'exclude': lambda f: f is None }})  
    compressed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Compressed'), 'exclude': lambda f: f is None }})  
    input_format: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InputFormat'), 'exclude': lambda f: f is None }})  
    location: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Location'), 'exclude': lambda f: f is None }})  
    number_of_buckets: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NumberOfBuckets'), 'exclude': lambda f: f is None }})  
    output_format: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OutputFormat'), 'exclude': lambda f: f is None }})  
    parameters: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Parameters'), 'exclude': lambda f: f is None }})  
    schema_reference: Optional[shared_schemareference.SchemaReference] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SchemaReference'), 'exclude': lambda f: f is None }})  
    serde_info: Optional[shared_serdeinfo.SerDeInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SerdeInfo'), 'exclude': lambda f: f is None }})  
    skewed_info: Optional[shared_skewedinfo.SkewedInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SkewedInfo'), 'exclude': lambda f: f is None }})  
    sort_columns: Optional[list[shared_order.Order]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SortColumns'), 'exclude': lambda f: f is None }})  
    stored_as_sub_directories: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StoredAsSubDirectories'), 'exclude': lambda f: f is None }})  
    