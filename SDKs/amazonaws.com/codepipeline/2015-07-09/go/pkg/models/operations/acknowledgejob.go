// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// AcknowledgeJobXAmzTargetEnum
type AcknowledgeJobXAmzTargetEnum string

const (
	AcknowledgeJobXAmzTargetEnumCodePipeline20150709AcknowledgeJob AcknowledgeJobXAmzTargetEnum = "CodePipeline_20150709.AcknowledgeJob"
)

func (e *AcknowledgeJobXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodePipeline_20150709.AcknowledgeJob":
		*e = AcknowledgeJobXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AcknowledgeJobXAmzTargetEnum: %s", s)
	}
}

type AcknowledgeJobHeaders struct {
	XAmzAlgorithm     *string                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        AcknowledgeJobXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type AcknowledgeJobRequest struct {
	Headers AcknowledgeJobHeaders
	Request shared.AcknowledgeJobInput `request:"mediaType=application/json"`
}

type AcknowledgeJobResponse struct {
	// Success
	AcknowledgeJobOutput *shared.AcknowledgeJobOutput
	ContentType          string
	// InvalidNonceException
	InvalidNonceException interface{}
	// JobNotFoundException
	JobNotFoundException interface{}
	StatusCode           int
	RawResponse          *http.Response
	// ValidationException
	ValidationException interface{}
}
