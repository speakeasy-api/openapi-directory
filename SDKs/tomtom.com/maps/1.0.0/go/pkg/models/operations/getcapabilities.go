// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetCapabilitiesVersionNumberEnum
type GetCapabilitiesVersionNumberEnum string

const (
	GetCapabilitiesVersionNumberEnumOne GetCapabilitiesVersionNumberEnum = "1"
)

func (e *GetCapabilitiesVersionNumberEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		*e = GetCapabilitiesVersionNumberEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCapabilitiesVersionNumberEnum: %s", s)
	}
}

type GetCapabilitiesPathParams struct {
	VersionNumber GetCapabilitiesVersionNumberEnum `pathParam:"style=simple,explode=false,name=versionNumber"`
}

// GetCapabilitiesRequestEnum
type GetCapabilitiesRequestEnum string

const (
	GetCapabilitiesRequestEnumGetCapabilities GetCapabilitiesRequestEnum = "GetCapabilities"
)

func (e *GetCapabilitiesRequestEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "GetCapabilities":
		*e = GetCapabilitiesRequestEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCapabilitiesRequestEnum: %s", s)
	}
}

// GetCapabilitiesServiceEnum
type GetCapabilitiesServiceEnum string

const (
	GetCapabilitiesServiceEnumWms GetCapabilitiesServiceEnum = "WMS"
)

func (e *GetCapabilitiesServiceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "WMS":
		*e = GetCapabilitiesServiceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCapabilitiesServiceEnum: %s", s)
	}
}

// GetCapabilitiesVersionEnum - WMS service version
type GetCapabilitiesVersionEnum string

const (
	GetCapabilitiesVersionEnumOne11 GetCapabilitiesVersionEnum = "1.1.1"
)

func (e *GetCapabilitiesVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1.1.1":
		*e = GetCapabilitiesVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCapabilitiesVersionEnum: %s", s)
	}
}

type GetCapabilitiesQueryParams struct {
	Request GetCapabilitiesRequestEnum `queryParam:"style=form,explode=true,name=request"`
	Service GetCapabilitiesServiceEnum `queryParam:"style=form,explode=true,name=service"`
	// WMS service version
	Version *GetCapabilitiesVersionEnum `queryParam:"style=form,explode=true,name=version"`
}

type GetCapabilitiesRequest struct {
	PathParams  GetCapabilitiesPathParams
	QueryParams GetCapabilitiesQueryParams
}

type GetCapabilitiesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
