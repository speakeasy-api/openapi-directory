"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class BatchBatchPayloadSchemaDefaultsMethodEnum(str, Enum):
    GET = 'GET'
    HEAD = 'HEAD'
    DELETE = 'DELETE'
    TRACE = 'TRACE'
    POST = 'POST'
    PUT = 'PUT'
    PATCH = 'PATCH'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BatchBatchPayloadSchemaDefaults:
    
    body: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('body'), 'exclude': lambda f: f is None }})  
    headers: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('headers'), 'exclude': lambda f: f is None }})  
    method: Optional[BatchBatchPayloadSchemaDefaultsMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('method'), 'exclude': lambda f: f is None }})  
    path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path'), 'exclude': lambda f: f is None }})  
    
class BatchBatchPayloadSchemaRequestsMethodEnum(str, Enum):
    GET = 'GET'
    HEAD = 'HEAD'
    DELETE = 'DELETE'
    TRACE = 'TRACE'
    POST = 'POST'
    PUT = 'PUT'
    PATCH = 'PATCH'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BatchBatchPayloadSchemaRequests:
    
    path: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path') }})  
    body: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('body'), 'exclude': lambda f: f is None }})  
    headers: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('headers'), 'exclude': lambda f: f is None }})  
    method: Optional[BatchBatchPayloadSchemaRequestsMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('method'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BatchBatchPayloadSchema:
    
    requests: list[BatchBatchPayloadSchemaRequests] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requests') }})  
    defaults: Optional[BatchBatchPayloadSchemaDefaults] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaults'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BatchErrorSchema:
    r"""The request was badly formatted."""
    
    code: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    errno: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errno') }})  
    error: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error') }})  
    details: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('details'), 'exclude': lambda f: f is None }})  
    info: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('info'), 'exclude': lambda f: f is None }})  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BatchBatchResponseBodySchemaResponses:
    
    path: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path') }})  
    status: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    body: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('body'), 'exclude': lambda f: f is None }})  
    headers: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('headers'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BatchBatchResponseBodySchema:
    r"""Return a list of operation responses."""
    
    responses: list[BatchBatchResponseBodySchemaResponses] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('responses') }})  
    

@dataclasses.dataclass
class BatchResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    batch_response_body_schema: Optional[BatchBatchResponseBodySchema] = dataclasses.field(default=None)
    r"""Return a list of operation responses."""  
    error_schema: Optional[BatchErrorSchema] = dataclasses.field(default=None)
    r"""The request was badly formatted."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    