"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import maptask as shared_maptask
from ..shared import package as shared_package
from ..shared import seqmaptask as shared_seqmaptask
from ..shared import shelltask as shared_shelltask
from ..shared import sourceoperationrequest as shared_sourceoperationrequest
from ..shared import streamingcomputationtask as shared_streamingcomputationtask
from ..shared import streamingconfigtask as shared_streamingconfigtask
from ..shared import streamingsetuptask as shared_streamingsetuptask
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WorkItem:
    r"""WorkItem represents basic information about a WorkItem to be executed in the cloud."""
    
    configuration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('configuration'), 'exclude': lambda f: f is None }})
    r"""Work item-specific configuration as an opaque blob."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Identifies this WorkItem."""  
    initial_report_index: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('initialReportIndex'), 'exclude': lambda f: f is None }})
    r"""The initial index to use when reporting the status of the WorkItem."""  
    job_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobId'), 'exclude': lambda f: f is None }})
    r"""Identifies the workflow job this WorkItem belongs to."""  
    lease_expire_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('leaseExpireTime'), 'exclude': lambda f: f is None }})
    r"""Time when the lease on this Work will expire."""  
    map_task: Optional[shared_maptask.MapTask] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mapTask'), 'exclude': lambda f: f is None }})
    r"""MapTask consists of an ordered set of instructions, each of which describes one particular low-level operation for the worker to perform in order to accomplish the MapTask's WorkItem. Each instruction must appear in the list before any instructions which depends on its output."""  
    packages: Optional[list[shared_package.Package]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('packages'), 'exclude': lambda f: f is None }})
    r"""Any required packages that need to be fetched in order to execute this WorkItem."""  
    project_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('projectId'), 'exclude': lambda f: f is None }})
    r"""Identifies the cloud project this WorkItem belongs to."""  
    report_status_interval: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reportStatusInterval'), 'exclude': lambda f: f is None }})
    r"""Recommended reporting interval."""  
    seq_map_task: Optional[shared_seqmaptask.SeqMapTask] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('seqMapTask'), 'exclude': lambda f: f is None }})
    r"""Describes a particular function to invoke."""  
    shell_task: Optional[shared_shelltask.ShellTask] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shellTask'), 'exclude': lambda f: f is None }})
    r"""A task which consists of a shell command for the worker to execute."""  
    source_operation_task: Optional[shared_sourceoperationrequest.SourceOperationRequest] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceOperationTask'), 'exclude': lambda f: f is None }})
    r"""A work item that represents the different operations that can be performed on a user-defined Source specification."""  
    streaming_computation_task: Optional[shared_streamingcomputationtask.StreamingComputationTask] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('streamingComputationTask'), 'exclude': lambda f: f is None }})
    r"""A task which describes what action should be performed for the specified streaming computation ranges."""  
    streaming_config_task: Optional[shared_streamingconfigtask.StreamingConfigTask] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('streamingConfigTask'), 'exclude': lambda f: f is None }})
    r"""A task that carries configuration information for streaming computations."""  
    streaming_setup_task: Optional[shared_streamingsetuptask.StreamingSetupTask] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('streamingSetupTask'), 'exclude': lambda f: f is None }})
    r"""A task which initializes part of a streaming Dataflow job."""  
    