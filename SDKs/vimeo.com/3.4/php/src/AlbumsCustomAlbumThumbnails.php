<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class AlbumsCustomAlbumThumbnails 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add a custom uploaded thumbnail
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAlbumCustomThumbRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAlbumCustomThumbSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateAlbumCustomThumbResponse
     */
	public function createAlbumCustomThumb(
        \OpenAPI\OpenAPI\Models\Operations\CreateAlbumCustomThumbRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateAlbumCustomThumbSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateAlbumCustomThumbResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/albums/{album_id}/custom_thumbnails', \OpenAPI\OpenAPI\Models\Operations\CreateAlbumCustomThumbRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateAlbumCustomThumbResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.picture+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->picture = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Picture', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.picture+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove a custom uploaded album thumbnail
     * 
     * This method removes a custom uploaded thumbnail from the specified album.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAlbumCustomThumbnailRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAlbumCustomThumbnailSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteAlbumCustomThumbnailResponse
     */
	public function deleteAlbumCustomThumbnail(
        \OpenAPI\OpenAPI\Models\Operations\DeleteAlbumCustomThumbnailRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteAlbumCustomThumbnailSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteAlbumCustomThumbnailResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/albums/{album_id}/custom_thumbnails/{thumbnail_id}', \OpenAPI\OpenAPI\Models\Operations\DeleteAlbumCustomThumbnailRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteAlbumCustomThumbnailResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.picture+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a specific custom uploaded album thumbnail
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAlbumCustomThumbnailRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAlbumCustomThumbnailResponse
     */
	public function getAlbumCustomThumbnail(
        \OpenAPI\OpenAPI\Models\Operations\GetAlbumCustomThumbnailRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAlbumCustomThumbnailResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/albums/{album_id}/custom_thumbnails/{thumbnail_id}', \OpenAPI\OpenAPI\Models\Operations\GetAlbumCustomThumbnailRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAlbumCustomThumbnailResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.picture+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->picture = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Picture', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.picture+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the custom upload thumbnails of an album
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAlbumCustomThumbsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAlbumCustomThumbsResponse
     */
	public function getAlbumCustomThumbs(
        \OpenAPI\OpenAPI\Models\Operations\GetAlbumCustomThumbsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAlbumCustomThumbsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/albums/{album_id}/custom_thumbnails', \OpenAPI\OpenAPI\Models\Operations\GetAlbumCustomThumbsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAlbumCustomThumbsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAlbumCustomThumbsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.picture+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pictures = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Picture>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.picture+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Replace a custom uploaded album thumbnail
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReplaceAlbumCustomThumbRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReplaceAlbumCustomThumbSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReplaceAlbumCustomThumbResponse
     */
	public function replaceAlbumCustomThumb(
        \OpenAPI\OpenAPI\Models\Operations\ReplaceAlbumCustomThumbRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReplaceAlbumCustomThumbSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReplaceAlbumCustomThumbResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/albums/{album_id}/custom_thumbnails/{thumbnail_id}', \OpenAPI\OpenAPI\Models\Operations\ReplaceAlbumCustomThumbRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReplaceAlbumCustomThumbResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.picture+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->picture = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Picture', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.picture+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
}