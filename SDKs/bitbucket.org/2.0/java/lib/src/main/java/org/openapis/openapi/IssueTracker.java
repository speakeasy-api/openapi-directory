/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.util.function.Function;
import java.util.stream.Collectors;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

/**
 * The issue resources provide functionality for getting information on
 * issues in an issue tracker, creating new issues, updating them and deleting
 * them.
 * 
 * You can access public issues without authentication, but you can't gain access
 * to private repositories' issues. By authenticating, you will get the ability
 * to create issues, as well as access to updating data or deleting issues you
 * have access to.
 * 
 */
public class IssueTracker {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public IssueTracker(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Delete an issue
     * Deletes the specified issue. This requires write access to the
     * repository.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdResponse deleteRepositoriesWorkspaceRepoSlugIssuesIssueId(org.openapis.openapi.models.operations.DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdRequest request, org.openapis.openapi.models.operations.DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdRequest.class, baseUrl, "/repositories/{workspace}/{repo_slug}/issues/{issue_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdResponse res = new org.openapis.openapi.models.operations.DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdResponse(contentType, httpRes.statusCode()) {{
            issue = null;
            error = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.issue = out;
            }
        }
        else if (httpRes.statusCode() == 403 || httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.error = out;
            }
        }

        return res;
    }

    /**
     * Delete an attachment for an issue
     * Deletes an attachment.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathResponse deleteRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPath(org.openapis.openapi.models.operations.DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathRequest request, org.openapis.openapi.models.operations.DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathRequest.class, baseUrl, "/repositories/{workspace}/{repo_slug}/issues/{issue_id}/attachments/{path}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathResponse res = new org.openapis.openapi.models.operations.DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathResponse(contentType, httpRes.statusCode()) {{
            error = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204 || httpRes.statusCode() == 401) {
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.error = out;
            }
        }

        return res;
    }

    /**
     * Delete a comment on an issue
     * Deletes the specified comment.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse deleteRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentId(org.openapis.openapi.models.operations.DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdRequest request, org.openapis.openapi.models.operations.DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdRequest.class, baseUrl, "/repositories/{workspace}/{repo_slug}/issues/{issue_id}/comments/{comment_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse res = new org.openapis.openapi.models.operations.DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Remove vote for an issue
     * Retract your vote.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteResponse deleteRepositoriesWorkspaceRepoSlugIssuesIssueIdVote(org.openapis.openapi.models.operations.DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteRequest request, org.openapis.openapi.models.operations.DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteRequest.class, baseUrl, "/repositories/{workspace}/{repo_slug}/issues/{issue_id}/vote", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteResponse res = new org.openapis.openapi.models.operations.DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteResponse(contentType, httpRes.statusCode()) {{
            error = null;
        }};
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.error = out;
            }
        }

        return res;
    }

    /**
     * Stop watching an issue
     * Stop watching this issue.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchResponse deleteRepositoriesWorkspaceRepoSlugIssuesIssueIdWatch(org.openapis.openapi.models.operations.DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchRequest request, org.openapis.openapi.models.operations.DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchRequest.class, baseUrl, "/repositories/{workspace}/{repo_slug}/issues/{issue_id}/watch", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchResponse res = new org.openapis.openapi.models.operations.DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchResponse(contentType, httpRes.statusCode()) {{
            error = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204 || httpRes.statusCode() == 401 || httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.error = out;
            }
        }

        return res;
    }

    /**
     * List components
     * Returns the components that have been defined in the issue tracker.
     * 
     * This resource is only available on repositories that have the issue
     * tracker enabled.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugComponentsResponse getRepositoriesWorkspaceRepoSlugComponents(org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugComponentsRequest request, org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugComponentsSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugComponentsRequest.class, baseUrl, "/repositories/{workspace}/{repo_slug}/components", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugComponentsResponse res = new org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugComponentsResponse(contentType, httpRes.statusCode()) {{
            paginatedComponents = null;
            error = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PaginatedComponents out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PaginatedComponents.class);
                res.paginatedComponents = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.error = out;
            }
        }

        return res;
    }

    /**
     * Get a component for issues
     * Returns the specified issue tracker component object.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugComponentsComponentIdResponse getRepositoriesWorkspaceRepoSlugComponentsComponentId(org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugComponentsComponentIdRequest request, org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugComponentsComponentIdSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugComponentsComponentIdRequest.class, baseUrl, "/repositories/{workspace}/{repo_slug}/components/{component_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugComponentsComponentIdResponse res = new org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugComponentsComponentIdResponse(contentType, httpRes.statusCode()) {{
            component = null;
            error = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.component = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.error = out;
            }
        }

        return res;
    }

    /**
     * List issues
     * Returns the issues in the issue tracker.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesResponse getRepositoriesWorkspaceRepoSlugIssues(org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesRequest request, org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesRequest.class, baseUrl, "/repositories/{workspace}/{repo_slug}/issues", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesResponse res = new org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesResponse(contentType, httpRes.statusCode()) {{
            paginatedIssues = null;
            error = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PaginatedIssues out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PaginatedIssues.class);
                res.paginatedIssues = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.error = out;
            }
        }

        return res;
    }

    /**
     * Check issue export status
     * This endpoint is used to poll for the progress of an issue export
     * job and return the zip file after the job is complete.
     * As long as the job is running, this will return a 200 response
     * with in the response body a description of the current status.
     * 
     * After the job has been scheduled, but before it starts executing, this
     * endpoint's response is:
     * 
     * {
     *  "type": "issue_job_status",
     *  "status": "ACCEPTED",
     *  "phase": "Initializing",
     *  "total": 0,
     *  "count": 0,
     *  "pct": 0
     * }
     * 
     * 
     * Then once it starts running, it becomes:
     * 
     * {
     *  "type": "issue_job_status",
     *  "status": "STARTED",
     *  "phase": "Attachments",
     *  "total": 15,
     *  "count": 11,
     *  "pct": 73
     * }
     * 
     * Once the job has successfully completed, it returns a stream of the zip file.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZipResponse getRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZip(org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZipRequest request, org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZipSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZipRequest.class, baseUrl, "/repositories/{workspace}/{repo_slug}/issues/export/{repo_name}-issues-{task_id}.zip", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZipResponse res = new org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZipResponse(contentType, httpRes.statusCode()) {{
            issueJobStatus = null;
            error = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 202) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.IssueJobStatus out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.IssueJobStatus.class);
                res.issueJobStatus = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.error = out;
            }
        }

        return res;
    }

    /**
     * Check issue import status
     * When using GET, this endpoint reports the status of the current import task. Request example:
     * 
     * ```
     * $ curl -u &lt;username&gt; -X GET https://api.bitbucket.org/2.0/repositories/&lt;owner_username&gt;/&lt;repo_slug&gt;/issues/import
     * ```
     * 
     * After the job has been scheduled, but before it starts executing, this endpoint's response is:
     * 
     * ```
     * &lt; HTTP/1.1 202 Accepted
     * {
     *     "type": "issue_job_status",
     *     "status": "PENDING",
     *     "phase": "Attachments",
     *     "total": 15,
     *     "count": 0,
     *     "percent": 0
     * }
     * ```
     * 
     * Once it starts running, it is a 202 response with status STARTED and progress filled.
     * 
     * After it is finished, it becomes a 200 response with status SUCCESS or FAILURE.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesImportResponse getRepositoriesWorkspaceRepoSlugIssuesImport(org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesImportRequest request, org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesImportSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesImportRequest.class, baseUrl, "/repositories/{workspace}/{repo_slug}/issues/import", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesImportResponse res = new org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesImportResponse(contentType, httpRes.statusCode()) {{
            issueJobStatus = null;
            error = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 202) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.IssueJobStatus out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.IssueJobStatus.class);
                res.issueJobStatus = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.error = out;
            }
        }

        return res;
    }

    /**
     * Get an issue
     * Returns the specified issue.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdResponse getRepositoriesWorkspaceRepoSlugIssuesIssueId(org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdRequest request, org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdRequest.class, baseUrl, "/repositories/{workspace}/{repo_slug}/issues/{issue_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdResponse res = new org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdResponse(contentType, httpRes.statusCode()) {{
            issue = null;
            error = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.issue = out;
            }
        }
        else if (httpRes.statusCode() == 403 || httpRes.statusCode() == 404 || httpRes.statusCode() == 410) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.error = out;
            }
        }

        return res;
    }

    /**
     * List attachments for an issue
     * Returns all attachments for this issue.
     * 
     * This returns the files' meta data. This does not return the files'
     * actual contents.
     * 
     * The files are always ordered by their upload date.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsResponse getRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachments(org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsRequest request, org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsRequest.class, baseUrl, "/repositories/{workspace}/{repo_slug}/issues/{issue_id}/attachments", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsResponse res = new org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsResponse(contentType, httpRes.statusCode()) {{
            paginatedIssueAttachments = null;
            error = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PaginatedIssueAttachments out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PaginatedIssueAttachments.class);
                res.paginatedIssueAttachments = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.error = out;
            }
        }

        return res;
    }

    /**
     * Get attachment for an issue
     * Returns the contents of the specified file attachment.
     * 
     * Note that this endpoint does not return a JSON response, but instead
     * returns a redirect pointing to the actual file that in turn will return
     * the raw contents.
     * 
     * The redirect URL contains a one-time token that has a limited lifetime.
     * As a result, the link should not be persisted, stored, or shared.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathResponse getRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPath(org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathRequest request, org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathRequest.class, baseUrl, "/repositories/{workspace}/{repo_slug}/issues/{issue_id}/attachments/{path}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathResponse res = new org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathResponse(contentType, httpRes.statusCode()) {{
            error = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 302) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
        }
        else if (httpRes.statusCode() == 401) {
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.error = out;
            }
        }

        return res;
    }

    /**
     * List changes on an issue
     * Returns the list of all changes that have been made to the specified
     * issue. Changes are returned in chronological order with the oldest
     * change first.
     * 
     * Each time an issue is edited in the UI or through the API, an immutable
     * change record is created under the `/issues/123/changes` endpoint. It
     * also has a comment associated with the change.
     * 
     * Note that this operation is changing significantly, due to privacy changes.
     * See the [announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-changes-gdpr/#changes-to-the-issue-changes-api)
     * for details.
     * 
     * ```
     * $ curl -s https://api.bitbucket.org/2.0/repositories/evzijst/dogslow/issues/1/changes - | jq .
     * 
     * {
     *   "pagelen": 20,
     *   "values": [
     *     {
     *       "changes": {
     *         "priority": {
     *           "new": "trivial",
     *           "old": "major"
     *         },
     *         "assignee": {
     *           "new": "",
     *           "old": "evzijst"
     *         },
     *         "assignee_account_id": {
     *           "new": "",
     *           "old": "557058:c0b72ad0-1cb5-4018-9cdc-0cde8492c443"
     *         },
     *         "kind": {
     *           "new": "enhancement",
     *           "old": "bug"
     *         }
     *       },
     *       "links": {
     *         "self": {
     *           "href": "https://api.bitbucket.org/2.0/repositories/evzijst/dogslow/issues/1/changes/2"
     *         },
     *         "html": {
     *           "href": "https://bitbucket.org/evzijst/dogslow/issues/1#comment-2"
     *         }
     *       },
     *       "issue": {
     *         "links": {
     *           "self": {
     *             "href": "https://api.bitbucket.org/2.0/repositories/evzijst/dogslow/issues/1"
     *           }
     *         },
     *         "type": "issue",
     *         "id": 1,
     *         "repository": {
     *           "links": {
     *             "self": {
     *               "href": "https://api.bitbucket.org/2.0/repositories/evzijst/dogslow"
     *             },
     *             "html": {
     *               "href": "https://bitbucket.org/evzijst/dogslow"
     *             },
     *             "avatar": {
     *               "href": "https://bitbucket.org/evzijst/dogslow/avatar/32/"
     *             }
     *           },
     *           "type": "repository",
     *           "name": "dogslow",
     *           "full_name": "evzijst/dogslow",
     *           "uuid": "{988b17c6-1a47-4e70-84ee-854d5f012bf6}"
     *         },
     *         "title": "Updated title"
     *       },
     *       "created_on": "2018-03-03T00:35:28.353630+00:00",
     *       "user": {
     *         "username": "evzijst",
     *         "nickname": "evzijst",
     *         "display_name": "evzijst",
     *         "type": "user",
     *         "uuid": "{aaa7972b-38af-4fb1-802d-6e3854c95778}",
     *         "links": {
     *           "self": {
     *             "href": "https://api.bitbucket.org/2.0/users/evzijst"
     *           },
     *           "html": {
     *             "href": "https://bitbucket.org/evzijst/"
     *           },
     *           "avatar": {
     *             "href": "https://bitbucket.org/account/evzijst/avatar/32/"
     *           }
     *         }
     *       },
     *       "message": {
     *         "raw": "Removed assignee, changed kind and priority.",
     *         "markup": "markdown",
     *         "html": "&lt;p&gt;Removed assignee, changed kind and priority.&lt;/p&gt;",
     *         "type": "rendered"
     *       },
     *       "type": "issue_change",
     *       "id": 2
     *     }
     *   ],
     *   "page": 1
     * }
     * ```
     * 
     * Changes support [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering) that
     * can be used to search for specific changes. For instance, to see
     * when an issue transitioned to "resolved":
     * 
     * ```
     * $ curl -s https://api.bitbucket.org/2.0/repositories/site/master/issues/1/changes \
     *    -G --data-urlencode='q=changes.state.new = "resolved"'
     * ```
     * 
     * This resource is only available on repositories that have the issue
     * tracker enabled.
     * 
     * N.B.
     * 
     * The `changes.assignee` and `changes.assignee_account_id` fields are not
     * a `user` object. Instead, they contain the raw `username` and
     * `account_id` of the user. This is to protect the integrity of the audit
     * log even after a user account gets deleted.
     * 
     * The `changes.assignee` field is deprecated will disappear in the
     * future. Use `changes.assignee_account_id` instead.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesResponse getRepositoriesWorkspaceRepoSlugIssuesIssueIdChanges(org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesRequest request, org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesRequest.class, baseUrl, "/repositories/{workspace}/{repo_slug}/issues/{issue_id}/changes", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesResponse res = new org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesResponse(contentType, httpRes.statusCode()) {{
            paginatedLogEntries = null;
            error = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PaginatedLogEntries out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PaginatedLogEntries.class);
                res.paginatedLogEntries = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.error = out;
            }
        }

        return res;
    }

    /**
     * Get issue change object
     * Returns the specified issue change object.
     * 
     * This resource is only available on repositories that have the issue
     * tracker enabled.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeIdResponse getRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeId(org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeIdRequest request, org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeIdSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeIdRequest.class, baseUrl, "/repositories/{workspace}/{repo_slug}/issues/{issue_id}/changes/{change_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeIdResponse res = new org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeIdResponse(contentType, httpRes.statusCode()) {{
            issueChange = null;
            error = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.issueChange = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.error = out;
            }
        }

        return res;
    }

    /**
     * List comments on an issue
     * Returns a paginated list of all comments that were made on the
     * specified issue.
     * 
     * The default sorting is oldest to newest and can be overridden with
     * the `sort` query parameter.
     * 
     * This endpoint also supports filtering and sorting of the results. See
     * [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering) for more details.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsResponse getRepositoriesWorkspaceRepoSlugIssuesIssueIdComments(org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsRequest request, org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsRequest.class, baseUrl, "/repositories/{workspace}/{repo_slug}/issues/{issue_id}/comments", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsResponse res = new org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsResponse(contentType, httpRes.statusCode()) {{
            paginatedIssueComments = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PaginatedIssueComments out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PaginatedIssueComments.class);
                res.paginatedIssueComments = out;
            }
        }

        return res;
    }

    /**
     * Get a comment on an issue
     * Returns the specified issue comment object.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse getRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentId(org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdRequest request, org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdRequest.class, baseUrl, "/repositories/{workspace}/{repo_slug}/issues/{issue_id}/comments/{comment_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse res = new org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse(contentType, httpRes.statusCode()) {{
            issueComment = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.issueComment = out;
            }
        }

        return res;
    }

    /**
     * Check if current user voted for an issue
     * Check whether the authenticated user has voted for this issue.
     * A 204 status code indicates that the user has voted, while a 404
     * implies they haven't.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteResponse getRepositoriesWorkspaceRepoSlugIssuesIssueIdVote(org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteRequest request, org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteRequest.class, baseUrl, "/repositories/{workspace}/{repo_slug}/issues/{issue_id}/vote", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteResponse res = new org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteResponse(contentType, httpRes.statusCode()) {{
            error = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204 || httpRes.statusCode() == 401 || httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.error = out;
            }
        }

        return res;
    }

    /**
     * Check if current user is watching a issue
     * Indicated whether or not the authenticated user is watching this
     * issue.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchResponse getRepositoriesWorkspaceRepoSlugIssuesIssueIdWatch(org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchRequest request, org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchRequest.class, baseUrl, "/repositories/{workspace}/{repo_slug}/issues/{issue_id}/watch", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchResponse res = new org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchResponse(contentType, httpRes.statusCode()) {{
            error = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204 || httpRes.statusCode() == 401 || httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.error = out;
            }
        }

        return res;
    }

    /**
     * List milestones
     * Returns the milestones that have been defined in the issue tracker.
     * 
     * This resource is only available on repositories that have the issue
     * tracker enabled.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugMilestonesResponse getRepositoriesWorkspaceRepoSlugMilestones(org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugMilestonesRequest request, org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugMilestonesSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugMilestonesRequest.class, baseUrl, "/repositories/{workspace}/{repo_slug}/milestones", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugMilestonesResponse res = new org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugMilestonesResponse(contentType, httpRes.statusCode()) {{
            paginatedMilestones = null;
            error = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PaginatedMilestones out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PaginatedMilestones.class);
                res.paginatedMilestones = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.error = out;
            }
        }

        return res;
    }

    /**
     * Get a milestone
     * Returns the specified issue tracker milestone object.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugMilestonesMilestoneIdResponse getRepositoriesWorkspaceRepoSlugMilestonesMilestoneId(org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugMilestonesMilestoneIdRequest request, org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugMilestonesMilestoneIdSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugMilestonesMilestoneIdRequest.class, baseUrl, "/repositories/{workspace}/{repo_slug}/milestones/{milestone_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugMilestonesMilestoneIdResponse res = new org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugMilestonesMilestoneIdResponse(contentType, httpRes.statusCode()) {{
            milestone = null;
            error = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.milestone = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.error = out;
            }
        }

        return res;
    }

    /**
     * List defined versions for issues
     * Returns the versions that have been defined in the issue tracker.
     * 
     * This resource is only available on repositories that have the issue
     * tracker enabled.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugVersionsResponse getRepositoriesWorkspaceRepoSlugVersions(org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugVersionsRequest request, org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugVersionsSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugVersionsRequest.class, baseUrl, "/repositories/{workspace}/{repo_slug}/versions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugVersionsResponse res = new org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugVersionsResponse(contentType, httpRes.statusCode()) {{
            paginatedVersions = null;
            error = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PaginatedVersions out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PaginatedVersions.class);
                res.paginatedVersions = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.error = out;
            }
        }

        return res;
    }

    /**
     * Get a defined version for issues
     * Returns the specified issue tracker version object.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugVersionsVersionIdResponse getRepositoriesWorkspaceRepoSlugVersionsVersionId(org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugVersionsVersionIdRequest request, org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugVersionsVersionIdSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugVersionsVersionIdRequest.class, baseUrl, "/repositories/{workspace}/{repo_slug}/versions/{version_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugVersionsVersionIdResponse res = new org.openapis.openapi.models.operations.GetRepositoriesWorkspaceRepoSlugVersionsVersionIdResponse(contentType, httpRes.statusCode()) {{
            version = null;
            error = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.version = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.error = out;
            }
        }

        return res;
    }

    /**
     * Create an issue
     * Creates a new issue.
     * 
     * This call requires authentication. Private repositories or private
     * issue trackers require the caller to authenticate with an account that
     * has appropriate authorization.
     * 
     * The authenticated user is used for the issue's `reporter` field.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRepositoriesWorkspaceRepoSlugIssuesResponse postRepositoriesWorkspaceRepoSlugIssues(org.openapis.openapi.models.operations.PostRepositoriesWorkspaceRepoSlugIssuesRequest request, org.openapis.openapi.models.operations.PostRepositoriesWorkspaceRepoSlugIssuesSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRepositoriesWorkspaceRepoSlugIssuesRequest.class, baseUrl, "/repositories/{workspace}/{repo_slug}/issues", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRepositoriesWorkspaceRepoSlugIssuesResponse res = new org.openapis.openapi.models.operations.PostRepositoriesWorkspaceRepoSlugIssuesResponse(contentType, httpRes.statusCode()) {{
            issue = null;
            error = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.issue = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.error = out;
            }
        }

        return res;
    }

    /**
     * Export issues
     * A POST request to this endpoint initiates a new background celery task that archives the repo's issues.
     * 
     * For example, you can run:
     * 
     * curl -u &lt;username&gt; -X POST http://api.bitbucket.org/2.0/repositories/&lt;owner_username&gt;/&lt;repo_slug&gt;/
     * issues/export
     * 
     * When the job has been accepted, it will return a 202 (Accepted) along with a unique url to this job in the
     * 'Location' response header. This url is the endpoint for where the user can obtain their zip files."
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRepositoriesWorkspaceRepoSlugIssuesExportResponse postRepositoriesWorkspaceRepoSlugIssuesExport(org.openapis.openapi.models.operations.PostRepositoriesWorkspaceRepoSlugIssuesExportRequest request, org.openapis.openapi.models.operations.PostRepositoriesWorkspaceRepoSlugIssuesExportSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRepositoriesWorkspaceRepoSlugIssuesExportRequest.class, baseUrl, "/repositories/{workspace}/{repo_slug}/issues/export", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRepositoriesWorkspaceRepoSlugIssuesExportResponse res = new org.openapis.openapi.models.operations.PostRepositoriesWorkspaceRepoSlugIssuesExportResponse(contentType, httpRes.statusCode()) {{
            error = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 202) {
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.error = out;
            }
        }

        return res;
    }

    /**
     * Import issues
     * A POST request to this endpoint will import the zip file given by the archive parameter into the repository. All
     * existing issues will be deleted and replaced by the contents of the imported zip file.
     * 
     * Imports are done through a multipart/form-data POST. There is one valid and required form field, with the name
     * "archive," which needs to be a file field:
     * 
     * ```
     * $ curl -u &lt;username&gt; -X POST -F archive=@/path/to/file.zip https://api.bitbucket.org/2.0/repositories/&lt;owner_username&gt;/&lt;repo_slug&gt;/issues/import
     * ```
     * 
     * When the import job is accepted, here is example output:
     * 
     * ```
     * &lt; HTTP/1.1 202 Accepted
     * 
     * {
     *     "type": "issue_job_status",
     *     "status": "ACCEPTED",
     *     "phase": "Attachments",
     *     "total": 15,
     *     "count": 0,
     *     "percent": 0
     * }
     * ```
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRepositoriesWorkspaceRepoSlugIssuesImportResponse postRepositoriesWorkspaceRepoSlugIssuesImport(org.openapis.openapi.models.operations.PostRepositoriesWorkspaceRepoSlugIssuesImportRequest request, org.openapis.openapi.models.operations.PostRepositoriesWorkspaceRepoSlugIssuesImportSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRepositoriesWorkspaceRepoSlugIssuesImportRequest.class, baseUrl, "/repositories/{workspace}/{repo_slug}/issues/import", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRepositoriesWorkspaceRepoSlugIssuesImportResponse res = new org.openapis.openapi.models.operations.PostRepositoriesWorkspaceRepoSlugIssuesImportResponse(contentType, httpRes.statusCode()) {{
            issueJobStatus = null;
            error = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 202) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.IssueJobStatus out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.IssueJobStatus.class);
                res.issueJobStatus = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 404 || httpRes.statusCode() == 409) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.error = out;
            }
        }

        return res;
    }

    /**
     * Upload an attachment to an issue
     * Upload new issue attachments.
     * 
     * To upload files, perform a `multipart/form-data` POST containing one
     * or more file fields.
     * 
     * When a file is uploaded with the same name as an existing attachment,
     * then the existing file will be replaced.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsResponse postRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachments(org.openapis.openapi.models.operations.PostRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsRequest request, org.openapis.openapi.models.operations.PostRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsRequest.class, baseUrl, "/repositories/{workspace}/{repo_slug}/issues/{issue_id}/attachments", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsResponse res = new org.openapis.openapi.models.operations.PostRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsResponse(contentType, httpRes.statusCode()) {{
            error = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401) {
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.error = out;
            }
        }

        return res;
    }

    /**
     * Modify the state of an issue
     * Makes a change to the specified issue.
     * 
     * For example, to change an issue's state and assignee, create a new
     * change object that modifies these fields:
     * 
     * ```
     * curl https://api.bitbucket.org/2.0/site/master/issues/1234/changes \
     *   -s -u evzijst -X POST -H "Content-Type: application/json" \
     *   -d '{
     *     "changes": {
     *       "assignee_account_id": {
     *         "new": "557058:c0b72ad0-1cb5-4018-9cdc-0cde8492c443"
     *       },
     *       "state": {
     *         "new": 'resolved"
     *       }
     *     }
     *     "message": {
     *       "raw": "This is now resolved."
     *     }
     *   }'
     * ```
     * 
     * The above example also includes a custom comment to go alongside the
     * change. This comment will also be visible on the issue page in the UI.
     * 
     * The fields of the `changes` object are strings, not objects. This
     * allows for immutable change log records, even after user accounts,
     * milestones, or other objects recorded in a change entry, get renamed or
     * deleted.
     * 
     * The `assignee_account_id` field stores the account id. When POSTing a
     * new change and changing the assignee, the client should therefore use
     * the user's account_id in the `changes.assignee_account_id.new` field.
     * 
     * This call requires authentication. Private repositories or private
     * issue trackers require the caller to authenticate with an account that
     * has appropriate authorization.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesResponse postRepositoriesWorkspaceRepoSlugIssuesIssueIdChanges(org.openapis.openapi.models.operations.PostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesRequest request, org.openapis.openapi.models.operations.PostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesRequest.class, baseUrl, "/repositories/{workspace}/{repo_slug}/issues/{issue_id}/changes", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesResponse res = new org.openapis.openapi.models.operations.PostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesResponse(contentType, httpRes.statusCode()) {{
            issueChange = null;
            error = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.issueChange = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.error = out;
            }
        }

        return res;
    }

    /**
     * Create a comment on an issue
     * Creates a new issue comment.
     * 
     * ```
     * $ curl https://api.bitbucket.org/2.0/repositories/atlassian/prlinks/issues/42/comments/ \
     *   -X POST -u evzijst \
     *   -H 'Content-Type: application/json' \
     *   -d '{"content": {"raw": "Lorem ipsum."}}'
     * ```
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsResponse postRepositoriesWorkspaceRepoSlugIssuesIssueIdComments(org.openapis.openapi.models.operations.PostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsRequest request, org.openapis.openapi.models.operations.PostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsRequest.class, baseUrl, "/repositories/{workspace}/{repo_slug}/issues/{issue_id}/comments", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsResponse res = new org.openapis.openapi.models.operations.PostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsResponse(contentType, httpRes.statusCode()) {{
            error = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.error = out;
            }
        }

        return res;
    }

    /**
     * Update an issue
     * Modifies the issue.
     * 
     * ```
     * $ curl https://api.bitbucket.org/2.0/repostories/evzijst/dogslow/issues/123 \
     *   -u evzijst -s -X PUT -H 'Content-Type: application/json' \
     *   -d '{
     *   "title": "Updated title",
     *   "assignee": {
     *     "account_id": "5d5355e8c6b9320d9ea5b28d"
     *   },
     *   "priority": "minor",
     *   "version": {
     *     "name": "1.0"
     *   },
     *   "component": null
     * }'
     * ```
     * 
     * This example changes the `title`, `assignee`, `priority` and the
     * `version`. It also removes the value of the `component` from the issue
     * by setting the field to `null`. Any field not present keeps its existing
     * value.
     * 
     * Each time an issue is edited in the UI or through the API, an immutable
     * change record is created under the `/issues/123/changes` endpoint. It
     * also has a comment associated with the change.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutRepositoriesWorkspaceRepoSlugIssuesIssueIdResponse putRepositoriesWorkspaceRepoSlugIssuesIssueId(org.openapis.openapi.models.operations.PutRepositoriesWorkspaceRepoSlugIssuesIssueIdRequest request, org.openapis.openapi.models.operations.PutRepositoriesWorkspaceRepoSlugIssuesIssueIdSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutRepositoriesWorkspaceRepoSlugIssuesIssueIdRequest.class, baseUrl, "/repositories/{workspace}/{repo_slug}/issues/{issue_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutRepositoriesWorkspaceRepoSlugIssuesIssueIdResponse res = new org.openapis.openapi.models.operations.PutRepositoriesWorkspaceRepoSlugIssuesIssueIdResponse(contentType, httpRes.statusCode()) {{
            issue = null;
            error = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.issue = out;
            }
        }
        else if (httpRes.statusCode() == 403 || httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.error = out;
            }
        }

        return res;
    }

    /**
     * Update a comment on an issue
     * Updates the content of the specified issue comment. Note that only
     * the `content.raw` field can be modified.
     * 
     * ```
     * $ curl https://api.bitbucket.org/2.0/repositories/atlassian/prlinks/issues/42/comments/5728901 \
     *   -X PUT -u evzijst \
     *   -H 'Content-Type: application/json' \
     *   -d '{"content": {"raw": "Lorem ipsum."}'
     * ```
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse putRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentId(org.openapis.openapi.models.operations.PutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdRequest request, org.openapis.openapi.models.operations.PutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdRequest.class, baseUrl, "/repositories/{workspace}/{repo_slug}/issues/{issue_id}/comments/{comment_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse res = new org.openapis.openapi.models.operations.PutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse(contentType, httpRes.statusCode()) {{
            issueComment = null;
            error = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.issueComment = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.error = out;
            }
        }

        return res;
    }

    /**
     * Vote for an issue
     * Vote for this issue.
     * 
     * To cast your vote, do an empty PUT. The 204 status code indicates that
     * the operation was successful.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteResponse putRepositoriesWorkspaceRepoSlugIssuesIssueIdVote(org.openapis.openapi.models.operations.PutRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteRequest request, org.openapis.openapi.models.operations.PutRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteRequest.class, baseUrl, "/repositories/{workspace}/{repo_slug}/issues/{issue_id}/vote", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteResponse res = new org.openapis.openapi.models.operations.PutRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteResponse(contentType, httpRes.statusCode()) {{
            error = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204 || httpRes.statusCode() == 401 || httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.error = out;
            }
        }

        return res;
    }

    /**
     * Watch an issue
     * Start watching this issue.
     * 
     * To start watching this issue, do an empty PUT. The 204 status code
     * indicates that the operation was successful.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchResponse putRepositoriesWorkspaceRepoSlugIssuesIssueIdWatch(org.openapis.openapi.models.operations.PutRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchRequest request, org.openapis.openapi.models.operations.PutRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchRequest.class, baseUrl, "/repositories/{workspace}/{repo_slug}/issues/{issue_id}/watch", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchResponse res = new org.openapis.openapi.models.operations.PutRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchResponse(contentType, httpRes.statusCode()) {{
            error = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204 || httpRes.statusCode() == 401 || httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.error = out;
            }
        }

        return res;
    }
}