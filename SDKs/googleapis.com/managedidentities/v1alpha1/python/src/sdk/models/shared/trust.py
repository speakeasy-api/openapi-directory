"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class TrustStateEnum(str, Enum):
    r"""Output only. The current state of this trust."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    CREATING = 'CREATING'
    UPDATING = 'UPDATING'
    DELETING = 'DELETING'
    CONNECTED = 'CONNECTED'
    DISCONNECTED = 'DISCONNECTED'

class TrustTrustDirectionEnum(str, Enum):
    r"""The trust direction decides the current domain is trusted, trusting or both."""
    TRUST_DIRECTION_UNSPECIFIED = 'TRUST_DIRECTION_UNSPECIFIED'
    INBOUND = 'INBOUND'
    OUTBOUND = 'OUTBOUND'
    BIDIRECTIONAL = 'BIDIRECTIONAL'

class TrustTrustTypeEnum(str, Enum):
    r"""The type of trust represented by the trust resource."""
    TRUST_TYPE_UNSPECIFIED = 'TRUST_TYPE_UNSPECIFIED'
    FOREST = 'FOREST'
    EXTERNAL = 'EXTERNAL'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Trust:
    r"""Represents a relationship between two domains which makes it possible for users in one domain to be authenticated by a dc in another domain. Refer https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/cc731335(v%3dws.10) If the trust is being changed, it will be placed into the UPDATING state, which indicates that the resource is being reconciled. At this point, Get will reflect an intermediate state."""
    
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The time the instance was created."""  
    last_known_trust_connected_heartbeat_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastKnownTrustConnectedHeartbeatTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The last heartbeat time when the trust was known to be connected."""  
    selective_authentication: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selectiveAuthentication'), 'exclude': lambda f: f is None }})
    r"""The trust authentication type which decides whether the trusted side has forest/domain wide access or selective access to approved set of resources."""  
    state: Optional[TrustStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Output only. The current state of this trust."""  
    state_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stateDescription'), 'exclude': lambda f: f is None }})
    r"""Output only. Additional information about the current state of this trust, if available."""  
    target_dns_ip_addresses: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetDnsIpAddresses'), 'exclude': lambda f: f is None }})
    r"""The target dns server ip addresses which can resolve the remote domain involved in trust."""  
    target_domain_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetDomainName'), 'exclude': lambda f: f is None }})
    r"""The fully qualified target domain name which will be in trust with current domain."""  
    trust_direction: Optional[TrustTrustDirectionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trustDirection'), 'exclude': lambda f: f is None }})
    r"""The trust direction decides the current domain is trusted, trusting or both."""  
    trust_handshake_secret: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trustHandshakeSecret'), 'exclude': lambda f: f is None }})
    r"""Input only, and will not be stored. The trust secret used for handshake with target domain."""  
    trust_type: Optional[TrustTrustTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trustType'), 'exclude': lambda f: f is None }})
    r"""The type of trust represented by the trust resource."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. Last update time."""  
    