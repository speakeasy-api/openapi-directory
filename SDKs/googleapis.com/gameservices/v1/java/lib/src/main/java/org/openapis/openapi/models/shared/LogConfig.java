/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * LogConfig - Specifies what kind of log the caller must write
 */
public class LogConfig {
    /**
     * Write a Cloud Audit log
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cloudAudit")
    public CloudAuditOptions cloudAudit;

    public LogConfig withCloudAudit(CloudAuditOptions cloudAudit) {
        this.cloudAudit = cloudAudit;
        return this;
    }
    
    /**
     * Increment a streamz counter with the specified metric and field names. Metric names should start with a '/', generally be lowercase-only, and end in "_count". Field names should not contain an initial slash. The actual exported metric names will have "/iam/policy" prepended. Field names correspond to IAM request parameters and field values are their respective values. Supported field names: - "authority", which is "[token]" if IAMContext.token is present, otherwise the value of IAMContext.authority_selector if present, and otherwise a representation of IAMContext.principal; or - "iam_principal", a representation of IAMContext.principal even if a token or authority selector is present; or - "" (empty string), resulting in a counter with no fields. Examples: counter { metric: "/debug_access_count" field: "iam_principal" } ==&gt; increment counter /iam/policy/debug_access_count {iam_principal=[value of IAMContext.principal]}
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("counter")
    public CounterOptions counter;

    public LogConfig withCounter(CounterOptions counter) {
        this.counter = counter;
        return this;
    }
    
    /**
     * Write a Data Access (Gin) log
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataAccess")
    public DataAccessOptions dataAccess;

    public LogConfig withDataAccess(DataAccessOptions dataAccess) {
        this.dataAccess = dataAccess;
        return this;
    }
    
    public LogConfig(){}
}
