/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * RoutineInput - A user-defined function or a stored procedure.
 */
public class RoutineInput {
    /**
     * Optional.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("arguments")
    public Argument[] arguments;
    public RoutineInput withArguments(Argument[] arguments) {
        this.arguments = arguments;
        return this;
    }
    
    /**
     * Required. The body of the routine. For functions, this is the expression in the AS clause. If language=SQL, it is the substring inside (but excluding) the parentheses. For example, for the function created with the following statement: `CREATE FUNCTION JoinLines(x string, y string) as (concat(x, "\n", y))` The definition_body is `concat(x, "\n", y)` (\n is not replaced with linebreak). If language=JAVASCRIPT, it is the evaluated string in the AS clause. For example, for the function created with the following statement: `CREATE FUNCTION f() RETURNS STRING LANGUAGE js AS 'return "\n";\n'` The definition_body is `return "\n";\n` Note that both \n are replaced with linebreaks.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("definitionBody")
    public String definitionBody;
    public RoutineInput withDefinitionBody(String definitionBody) {
        this.definitionBody = definitionBody;
        return this;
    }
    
    /**
     * Optional. The description of the routine, if defined.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public RoutineInput withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Optional. The determinism level of the JavaScript UDF, if defined.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("determinismLevel")
    public RoutineDeterminismLevelEnum determinismLevel;
    public RoutineInput withDeterminismLevel(RoutineDeterminismLevelEnum determinismLevel) {
        this.determinismLevel = determinismLevel;
        return this;
    }
    
    /**
     * Optional. If language = "JAVASCRIPT", this field stores the path of the imported JAVASCRIPT libraries.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("importedLibraries")
    public String[] importedLibraries;
    public RoutineInput withImportedLibraries(String[] importedLibraries) {
        this.importedLibraries = importedLibraries;
        return this;
    }
    
    /**
     * Optional. Defaults to "SQL" if remote_function_options field is absent, not set otherwise.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("language")
    public RoutineLanguageEnum language;
    public RoutineInput withLanguage(RoutineLanguageEnum language) {
        this.language = language;
        return this;
    }
    
    /**
     * Options for a remote user-defined function.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remoteFunctionOptions")
    public RemoteFunctionOptions remoteFunctionOptions;
    public RoutineInput withRemoteFunctionOptions(RemoteFunctionOptions remoteFunctionOptions) {
        this.remoteFunctionOptions = remoteFunctionOptions;
        return this;
    }
    
    /**
     * A table type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("returnTableType")
    public StandardSqlTableType returnTableType;
    public RoutineInput withReturnTableType(StandardSqlTableType returnTableType) {
        this.returnTableType = returnTableType;
        return this;
    }
    
    /**
     * The data type of a variable such as a function argument. Examples include: * INT64: `{"typeKind": "INT64"}` * ARRAY: { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "STRING"} } * STRUCT&gt;: { "typeKind": "STRUCT", "structType": { "fields": [ { "name": "x", "type": {"typeKind": "STRING"} }, { "name": "y", "type": { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "DATE"} } } ] } }
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("returnType")
    public StandardSqlDataType returnType;
    public RoutineInput withReturnType(StandardSqlDataType returnType) {
        this.returnType = returnType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("routineReference")
    public RoutineReference routineReference;
    public RoutineInput withRoutineReference(RoutineReference routineReference) {
        this.routineReference = routineReference;
        return this;
    }
    
    /**
     * Required. The type of routine.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("routineType")
    public RoutineRoutineTypeEnum routineType;
    public RoutineInput withRoutineType(RoutineRoutineTypeEnum routineType) {
        this.routineType = routineType;
        return this;
    }
    
    /**
     * Options for a user-defined Spark routine.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sparkOptions")
    public SparkOptions sparkOptions;
    public RoutineInput withSparkOptions(SparkOptions sparkOptions) {
        this.sparkOptions = sparkOptions;
        return this;
    }
    
    /**
     * Optional. Can be set for procedures only. If true (default), the definition body will be validated in the creation and the updates of the procedure. For procedures with an argument of ANY TYPE, the definition body validtion is not supported at creation/update time, and thus this field must be set to false explicitly.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("strictMode")
    public Boolean strictMode;
    public RoutineInput withStrictMode(Boolean strictMode) {
        this.strictMode = strictMode;
        return this;
    }
    
}
