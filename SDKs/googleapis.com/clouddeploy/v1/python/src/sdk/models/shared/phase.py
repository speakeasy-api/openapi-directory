"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import childrolloutjobs as shared_childrolloutjobs
from ..shared import deploymentjobs as shared_deploymentjobs
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PhaseStateEnum(str, Enum):
    r"""Output only. Current state of the Phase."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    PENDING = 'PENDING'
    IN_PROGRESS = 'IN_PROGRESS'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    ABORTED = 'ABORTED'
    SKIPPED = 'SKIPPED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Phase:
    r"""Phase represents a collection of jobs that are logically grouped together for a `Rollout`."""
    
    child_rollout_jobs: Optional[shared_childrolloutjobs.ChildRolloutJobs] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('childRolloutJobs'), 'exclude': lambda f: f is None }})
    r"""ChildRollouts job composition"""  
    deployment_jobs: Optional[shared_deploymentjobs.DeploymentJobs] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deploymentJobs'), 'exclude': lambda f: f is None }})
    r"""Deployment job composition."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Output only. The ID of the Phase."""  
    skip_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skipMessage'), 'exclude': lambda f: f is None }})
    r"""Output only. Additional information on why the Phase was skipped, if available."""  
    state: Optional[PhaseStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Output only. Current state of the Phase."""  
    