<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class TargetInstances 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieves an aggregated list of target instances.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesAggregatedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesAggregatedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesAggregatedListResponse
     */
	public function computeTargetInstancesAggregatedList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesAggregatedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesAggregatedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesAggregatedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/aggregated/targetInstances', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesAggregatedListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesAggregatedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesAggregatedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->targetInstanceAggregatedList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TargetInstanceAggregatedList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified TargetInstance resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesDeleteResponse
     */
	public function computeTargetInstancesDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/targetInstances/{targetInstance}', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified TargetInstance resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesGetResponse
     */
	public function computeTargetInstancesGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/targetInstances/{targetInstance}', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->targetInstance = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TargetInstance', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a TargetInstance resource in the specified project and zone using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesInsertResponse
     */
	public function computeTargetInstancesInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/targetInstances', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "targetInstance", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of TargetInstance resources available to the specified project and zone.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesListResponse
     */
	public function computeTargetInstancesList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/targetInstances', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->targetInstanceList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TargetInstanceList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesTestIamPermissionsResponse
     */
	public function computeTargetInstancesTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/targetInstances/{resource}/testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetInstancesTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}