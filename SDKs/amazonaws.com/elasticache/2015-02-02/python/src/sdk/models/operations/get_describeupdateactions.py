"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import serviceupdatestatus_enum as shared_serviceupdatestatus_enum
from ..shared import updateactionstatus_enum as shared_updateactionstatus_enum
from datetime import datetime
from enum import Enum
from typing import Optional

class GETDescribeUpdateActionsActionEnum(str, Enum):
    DESCRIBE_UPDATE_ACTIONS = 'DescribeUpdateActions'


@dataclasses.dataclass
class GETDescribeUpdateActionsServiceUpdateTimeRange:
    r"""Filters update actions from the service updates that are in available status during the time range."""
    
    end_time: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'EndTime' }})  
    start_time: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'StartTime' }})  
    
class GETDescribeUpdateActionsVersionEnum(str, Enum):
    TWO_THOUSAND_AND_FIFTEEN_02_02 = '2015-02-02'


@dataclasses.dataclass
class GETDescribeUpdateActionsRequest:
    
    action: GETDescribeUpdateActionsActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    version: GETDescribeUpdateActionsVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    cache_cluster_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'CacheClusterIds', 'style': 'form', 'explode': True }})
    r"""The cache cluster IDs"""  
    engine: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Engine', 'style': 'form', 'explode': True }})
    r"""The Elasticache engine to which the update applies. Either Redis or Memcached"""  
    marker: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Marker', 'style': 'form', 'explode': True }})
    r"""An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>."""  
    max_records: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'MaxRecords', 'style': 'form', 'explode': True }})
    r"""The maximum number of records to include in the response"""  
    replication_group_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ReplicationGroupIds', 'style': 'form', 'explode': True }})
    r"""The replication group IDs"""  
    service_update_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ServiceUpdateName', 'style': 'form', 'explode': True }})
    r"""The unique ID of the service update"""  
    service_update_status: Optional[list[shared_serviceupdatestatus_enum.ServiceUpdateStatusEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ServiceUpdateStatus', 'style': 'form', 'explode': True }})
    r"""The status of the service update"""  
    service_update_time_range: Optional[GETDescribeUpdateActionsServiceUpdateTimeRange] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ServiceUpdateTimeRange', 'style': 'form', 'explode': True }})
    r"""The range of time specified to search for service updates that are in available status"""  
    show_node_level_update_status: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ShowNodeLevelUpdateStatus', 'style': 'form', 'explode': True }})
    r"""Dictates whether to include node level update status in the response"""  
    update_action_status: Optional[list[shared_updateactionstatus_enum.UpdateActionStatusEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'UpdateActionStatus', 'style': 'form', 'explode': True }})
    r"""The status of the update action."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETDescribeUpdateActionsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    