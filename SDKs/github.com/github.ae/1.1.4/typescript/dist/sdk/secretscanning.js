"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecretScanning = void 0;
var utils = __importStar(require("../internal/utils"));
var operations = __importStar(require("./models/operations"));
var shared = __importStar(require("./models/shared"));
/**
 * Retrieve secret scanning alerts from a repository.
 */
var SecretScanning = /** @class */ (function () {
    function SecretScanning(defaultClient, securityClient, serverURL, language, sdkVersion, genVersion) {
        this._defaultClient = defaultClient;
        this._securityClient = securityClient;
        this._serverURL = serverURL;
        this._language = language;
        this._sdkVersion = sdkVersion;
        this._genVersion = genVersion;
    }
    /**
     * Get a secret scanning alert
     *
     * @remarks
     * Gets a single secret scanning alert detected in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
     *
     * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
     *
     * @see {@link https://docs.github.com/github-ae@latest/rest/reference/secret-scanning#get-a-secret-scanning-alert} - API method documentation
     */
    SecretScanning.prototype.secretScanningGetAlert = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.SecretScanningGetAlertRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.SecretScanningGetAlertResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.secretScanningAlert = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.SecretScanningAlert);
                    }
                    break;
                case [304, 404].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 503:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.secretScanningGetAlert503ApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.SecretScanningGetAlert503ApplicationJSON);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * List secret scanning alerts for an enterprise
     *
     * @remarks
     * Lists secret scanning alerts for eligible repositories in an enterprise, from newest to oldest.
     * To use this endpoint, you must be a member of the enterprise, and you must use an access token with the `repo` scope or `security_events` scope. Alerts are only returned for organizations in the enterprise for which you are an organization owner or a [security manager](https://docs.github.com/github-ae@latest/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).
     *
     * @see {@link https://docs.github.com/github-ae@latest/rest/reference/secret-scanning#list-secret-scanning-alerts-for-an-enterprise} - API method documentation
     */
    SecretScanning.prototype.secretScanningListAlertsForEnterprise = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.SecretScanningListAlertsForEnterpriseRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/enterprises/{enterprise}/secret-scanning/alerts", req);
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.SecretScanningListAlertsForEnterpriseResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
                headers: utils.getHeadersFromResponse(httpRes.headers),
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.organizationSecretScanningAlerts = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.organizationSecretScanningAlerts = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.OrganizationSecretScanningAlert, resFieldDepth);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 404:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.basicError = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.BasicError);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 503:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.secretScanningListAlertsForEnterprise503ApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.SecretScanningListAlertsForEnterprise503ApplicationJSON);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * List secret scanning alerts for a repository
     *
     * @remarks
     * Lists secret scanning alerts for a private repository, from newest to oldest. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
     *
     * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
     *
     * @see {@link https://docs.github.com/github-ae@latest/rest/reference/secret-scanning#list-secret-scanning-alerts-for-a-repository} - API method documentation
     */
    SecretScanning.prototype.secretScanningListAlertsForRepo = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.SecretScanningListAlertsForRepoRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/repos/{owner}/{repo}/secret-scanning/alerts", req);
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.SecretScanningListAlertsForRepoResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.secretScanningAlerts = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.secretScanningAlerts = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.SecretScanningAlert, resFieldDepth);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 404:
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 503:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.secretScanningListAlertsForRepo503ApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.SecretScanningListAlertsForRepo503ApplicationJSON);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * List locations for a secret scanning alert
     *
     * @remarks
     * Lists all locations for a given secret scanning alert for a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
     *
     * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
     *
     * @see {@link https://docs.github.com/github-ae@latest/rest/reference/secret-scanning#list-locations-for-a-secret-scanning-alert} - API method documentation
     */
    SecretScanning.prototype.secretScanningListLocationsForAlert = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.SecretScanningListLocationsForAlertRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations", req);
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.SecretScanningListLocationsForAlertResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
                headers: utils.getHeadersFromResponse(httpRes.headers),
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.secretScanningLocations = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.secretScanningLocations = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.SecretScanningLocation, resFieldDepth);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 404:
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 503:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.secretScanningListLocationsForAlert503ApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.SecretScanningListLocationsForAlert503ApplicationJSON);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Update a secret scanning alert
     *
     * @remarks
     * Updates the status of a secret scanning alert in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
     *
     * GitHub Apps must have the `secret_scanning_alerts` write permission to use this endpoint.
     *
     * @see {@link https://docs.github.com/github-ae@latest/rest/reference/secret-scanning#update-a-secret-scanning-alert} - API method documentation
     */
    SecretScanning.prototype.secretScanningUpdateAlert = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.SecretScanningUpdateAlertRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._defaultClient;
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "patch", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.SecretScanningUpdateAlertResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.secretScanningAlert = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.SecretScanningAlert);
                    }
                    break;
                case [400, 404, 422].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 503:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.secretScanningUpdateAlert503ApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.SecretScanningUpdateAlert503ApplicationJSON);
                    }
                    break;
            }
            return res;
        });
    };
    return SecretScanning;
}());
exports.SecretScanning = SecretScanning;
