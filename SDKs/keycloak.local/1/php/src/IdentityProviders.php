<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class IdentityProviders 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete the identity provider
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRealmIdentityProviderInstancesAliasRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRealmIdentityProviderInstancesAliasResponse
     */
	public function deleteRealmIdentityProviderInstancesAlias(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRealmIdentityProviderInstancesAliasRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRealmIdentityProviderInstancesAliasResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/identity-provider/instances/{alias}', \OpenAPI\OpenAPI\Models\Operations\DeleteRealmIdentityProviderInstancesAliasRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRealmIdentityProviderInstancesAliasResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Delete a mapper for the identity provider
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRealmIdentityProviderInstancesAliasMappersIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRealmIdentityProviderInstancesAliasMappersIdResponse
     */
	public function deleteRealmIdentityProviderInstancesAliasMappersId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRealmIdentityProviderInstancesAliasMappersIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRealmIdentityProviderInstancesAliasMappersIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/identity-provider/instances/{alias}/mappers/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteRealmIdentityProviderInstancesAliasMappersIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRealmIdentityProviderInstancesAliasMappersIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Get identity providers
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderInstancesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderInstancesResponse
     */
	public function getRealmIdentityProviderInstances(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderInstancesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderInstancesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/identity-provider/instances', \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderInstancesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderInstancesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->identityProviderRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\IdentityProviderRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the identity provider
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderInstancesAliasRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderInstancesAliasResponse
     */
	public function getRealmIdentityProviderInstancesAlias(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderInstancesAliasRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderInstancesAliasResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/identity-provider/instances/{alias}', \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderInstancesAliasRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderInstancesAliasResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->identityProviderRepresentation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\IdentityProviderRepresentation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Export public broker configuration for identity provider
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderInstancesAliasExportRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderInstancesAliasExportResponse
     */
	public function getRealmIdentityProviderInstancesAliasExport(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderInstancesAliasExportRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderInstancesAliasExportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/identity-provider/instances/{alias}/export', \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderInstancesAliasExportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderInstancesAliasExportRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderInstancesAliasExportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderInstancesAliasManagementPermissionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderInstancesAliasManagementPermissionsResponse
     */
	public function getRealmIdentityProviderInstancesAliasManagementPermissions(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderInstancesAliasManagementPermissionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderInstancesAliasManagementPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/identity-provider/instances/{alias}/management/permissions', \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderInstancesAliasManagementPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderInstancesAliasManagementPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->managementPermissionReference = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ManagementPermissionReference', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get mapper types for identity provider
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderInstancesAliasMapperTypesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderInstancesAliasMapperTypesResponse
     */
	public function getRealmIdentityProviderInstancesAliasMapperTypes(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderInstancesAliasMapperTypesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderInstancesAliasMapperTypesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/identity-provider/instances/{alias}/mapper-types', \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderInstancesAliasMapperTypesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderInstancesAliasMapperTypesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Get mappers for identity provider
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderInstancesAliasMappersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderInstancesAliasMappersResponse
     */
	public function getRealmIdentityProviderInstancesAliasMappers(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderInstancesAliasMappersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderInstancesAliasMappersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/identity-provider/instances/{alias}/mappers', \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderInstancesAliasMappersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderInstancesAliasMappersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->identityProviderMapperRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\IdentityProviderMapperRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get mapper by id for the identity provider
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderInstancesAliasMappersIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderInstancesAliasMappersIdResponse
     */
	public function getRealmIdentityProviderInstancesAliasMappersId(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderInstancesAliasMappersIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderInstancesAliasMappersIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/identity-provider/instances/{alias}/mappers/{id}', \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderInstancesAliasMappersIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderInstancesAliasMappersIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->identityProviderMapperRepresentation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\IdentityProviderMapperRepresentation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get identity providers
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderProvidersProviderIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderProvidersProviderIdResponse
     */
	public function getRealmIdentityProviderProvidersProviderId(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderProvidersProviderIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderProvidersProviderIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/identity-provider/providers/{provider_id}', \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderProvidersProviderIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmIdentityProviderProvidersProviderIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Import identity provider from uploaded JSON file
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmIdentityProviderImportConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmIdentityProviderImportConfigResponse
     */
	public function postRealmIdentityProviderImportConfig(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmIdentityProviderImportConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmIdentityProviderImportConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/identity-provider/import-config', \OpenAPI\OpenAPI\Models\Operations\PostRealmIdentityProviderImportConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmIdentityProviderImportConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postRealmIdentityProviderImportConfig2XXApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new identity provider
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmIdentityProviderInstancesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmIdentityProviderInstancesResponse
     */
	public function postRealmIdentityProviderInstances(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmIdentityProviderInstancesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmIdentityProviderInstancesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/identity-provider/instances', \OpenAPI\OpenAPI\Models\Operations\PostRealmIdentityProviderInstancesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "identityProviderRepresentation", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmIdentityProviderInstancesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Add a mapper to identity provider
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmIdentityProviderInstancesAliasMappersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmIdentityProviderInstancesAliasMappersResponse
     */
	public function postRealmIdentityProviderInstancesAliasMappers(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmIdentityProviderInstancesAliasMappersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmIdentityProviderInstancesAliasMappersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/identity-provider/instances/{alias}/mappers', \OpenAPI\OpenAPI\Models\Operations\PostRealmIdentityProviderInstancesAliasMappersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "identityProviderMapperRepresentation", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmIdentityProviderInstancesAliasMappersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Update the identity provider
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutRealmIdentityProviderInstancesAliasRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutRealmIdentityProviderInstancesAliasResponse
     */
	public function putRealmIdentityProviderInstancesAlias(
        \OpenAPI\OpenAPI\Models\Operations\PutRealmIdentityProviderInstancesAliasRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutRealmIdentityProviderInstancesAliasResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/identity-provider/instances/{alias}', \OpenAPI\OpenAPI\Models\Operations\PutRealmIdentityProviderInstancesAliasRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "identityProviderRepresentation", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutRealmIdentityProviderInstancesAliasResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutRealmIdentityProviderInstancesAliasManagementPermissionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutRealmIdentityProviderInstancesAliasManagementPermissionsResponse
     */
	public function putRealmIdentityProviderInstancesAliasManagementPermissions(
        \OpenAPI\OpenAPI\Models\Operations\PutRealmIdentityProviderInstancesAliasManagementPermissionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutRealmIdentityProviderInstancesAliasManagementPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/identity-provider/instances/{alias}/management/permissions', \OpenAPI\OpenAPI\Models\Operations\PutRealmIdentityProviderInstancesAliasManagementPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "managementPermissionReference", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutRealmIdentityProviderInstancesAliasManagementPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->managementPermissionReference = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ManagementPermissionReference', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a mapper for the identity provider
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutRealmIdentityProviderInstancesAliasMappersIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutRealmIdentityProviderInstancesAliasMappersIdResponse
     */
	public function putRealmIdentityProviderInstancesAliasMappersId(
        \OpenAPI\OpenAPI\Models\Operations\PutRealmIdentityProviderInstancesAliasMappersIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutRealmIdentityProviderInstancesAliasMappersIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/identity-provider/instances/{alias}/mappers/{id}', \OpenAPI\OpenAPI\Models\Operations\PutRealmIdentityProviderInstancesAliasMappersIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "identityProviderMapperRepresentation", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutRealmIdentityProviderInstancesAliasMappersIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
}