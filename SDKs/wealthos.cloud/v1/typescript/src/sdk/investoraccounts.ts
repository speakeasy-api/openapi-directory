/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * An investor account is designed to manage a group of pots attached to a single financial product. A user can maintain multiple accounts for a given financial product if the product regulations support this setup.
 */
export class InvestorAccounts {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Retrieve all the investor accounts
   */
  getAllinvestorAccounts(
    req: operations.GetAllinvestorAccountsRequest,
    security: operations.GetAllinvestorAccountsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAllinvestorAccountsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAllinvestorAccountsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/tenant/investor-accounts/v1";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetAllinvestorAccountsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAllinvestorAccountsResponse =
        new operations.GetAllinvestorAccountsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAllinvestorAccounts200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetAllinvestorAccounts200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAllinvestorAccounts400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetAllinvestorAccounts400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAllinvestorAccounts401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetAllinvestorAccounts401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAllinvestorAccounts403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetAllinvestorAccounts403ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAllinvestorAccounts404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetAllinvestorAccounts404ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 409:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAllinvestorAccounts409ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetAllinvestorAccounts409ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 429:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAllinvestorAccounts429ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetAllinvestorAccounts429ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAllinvestorAccounts500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetAllinvestorAccounts500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve existing investor account from account id
   */
  getinvestorAccount(
    req: operations.GetinvestorAccountRequest,
    security: operations.GetinvestorAccountSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetinvestorAccountResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetinvestorAccountRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tenant/investor-accounts/v1/{account_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetinvestorAccountSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetinvestorAccountResponse =
        new operations.GetinvestorAccountResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getinvestorAccount200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetinvestorAccount200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getinvestorAccount400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetinvestorAccount400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getinvestorAccount401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetinvestorAccount401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getinvestorAccount403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetinvestorAccount403ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getinvestorAccount404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetinvestorAccount404ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 409:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getinvestorAccount409ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetinvestorAccount409ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 429:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getinvestorAccount429ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetinvestorAccount429ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getinvestorAccount500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetinvestorAccount500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
