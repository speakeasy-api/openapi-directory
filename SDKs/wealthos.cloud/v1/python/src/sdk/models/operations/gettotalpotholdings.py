"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class GetTotalPotHoldingsSecurity:
    
    api_secret_key: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'x-api-key' }})  
    

@dataclasses.dataclass
class GetTotalPotHoldingsRequest:
    
    investor_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'investor_id', 'style': 'simple', 'explode': False }})
    r"""Id of the investor"""  
    x_api_key: str = dataclasses.field(metadata={'header': { 'field_name': 'x-api-key', 'style': 'simple', 'explode': False }})
    r"""ApiSecretKey"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTotalPotHoldings500ApplicationJSON:
    r"""System error. Retry later. If the error persist, contact WOS support"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTotalPotHoldings429ApplicationJSON:
    r"""You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTotalPotHoldings404ApplicationJSON:
    r"""The specified resource was not found"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTotalPotHoldings403ApplicationJSON:
    r"""Your authentication information is missing or invalid. Please check the keys are properly set and its correct"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTotalPotHoldings401ApplicationJSON:
    r"""You do not have permissions to access this resource."""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTotalPotHoldings200ApplicationJSONPotsHoldings:
    
    currency: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency') }})
    r"""Currency of the pot"""  
    free_value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('free_value') }})
    r"""Free value of the holding"""  
    investment_product_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('investment_product_id') }})
    r"""Investment product id of the holding. Will be 'cash' for cash holdings"""  
    locked_value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locked_value') }})
    r"""Locked value of the holding"""  
    total_value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_value') }})
    r"""Total value of the holding"""  
    additional_external_details: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additional_external_details'), 'exclude': lambda f: f is None }})
    r"""Additional external details of the holding. This may be populated in reconciliation process"""  
    average_book_cost: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('average_book_cost'), 'exclude': lambda f: f is None }})
    r"""Per-unit book cost for a particular holding (applicable for investment product holdings only)"""  
    cost_of_holding: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cost_of_holding'), 'exclude': lambda f: f is None }})
    r"""Total book cost for the total units currently held within the pot (applicable for investment product holdings only)"""  
    free_quantity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('free_quantity'), 'exclude': lambda f: f is None }})
    r"""Free quantity of the investment product holding. Will be empty for the cash holding"""  
    investment_product_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('investment_product_name'), 'exclude': lambda f: f is None }})
    r"""Investment product name of the holding. Will be empty for cash holdings"""  
    locked_quantity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locked_quantity'), 'exclude': lambda f: f is None }})
    r"""Locked quantity of the investment product holding. Will be empty for the cash holding"""  
    price: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})
    r"""Last price available for the investment product. Will be empty for the cash holding"""  
    price_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price_date'), 'exclude': lambda f: f is None }})
    r"""Last price updated date for the investment product. Will be empty for the cash holding"""  
    settled_cash_position: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('settled_cash_position'), 'exclude': lambda f: f is None }})
    r"""Settled cash amount within the pot (applicable for cash holdings only)"""  
    total_quantity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_quantity'), 'exclude': lambda f: f is None }})
    r"""Total quantity of the investment product holding. Will be empty for the cash holding"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTotalPotHoldings200ApplicationJSONPots:
    
    holdings: list[GetTotalPotHoldings200ApplicationJSONPotsHoldings] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('holdings') }})
    r"""Array of holdings belonging to a respective pot"""  
    pot_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pot_id') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTotalPotHoldings200ApplicationJSON:
    r"""success"""
    
    pots: list[GetTotalPotHoldings200ApplicationJSONPots] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pots') }})  
    

@dataclasses.dataclass
class GetTotalPotHoldingsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_total_pot_holdings_200_application_json_object: Optional[GetTotalPotHoldings200ApplicationJSON] = dataclasses.field(default=None)
    r"""success"""  
    get_total_pot_holdings_401_application_json_object: Optional[GetTotalPotHoldings401ApplicationJSON] = dataclasses.field(default=None)
    r"""You do not have permissions to access this resource."""  
    get_total_pot_holdings_403_application_json_object: Optional[GetTotalPotHoldings403ApplicationJSON] = dataclasses.field(default=None)
    r"""Your authentication information is missing or invalid. Please check the keys are properly set and its correct"""  
    get_total_pot_holdings_404_application_json_object: Optional[GetTotalPotHoldings404ApplicationJSON] = dataclasses.field(default=None)
    r"""The specified resource was not found"""  
    get_total_pot_holdings_429_application_json_object: Optional[GetTotalPotHoldings429ApplicationJSON] = dataclasses.field(default=None)
    r"""You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support"""  
    get_total_pot_holdings_500_application_json_object: Optional[GetTotalPotHoldings500ApplicationJSON] = dataclasses.field(default=None)
    r"""System error. Retry later. If the error persist, contact WOS support"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    