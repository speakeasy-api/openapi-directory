<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a new ContactCenter in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsContactCentersCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsContactCentersCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsContactCentersCreateResponse
     */
	public function contactcenteraiplatformProjectsLocationsContactCentersCreate(
        \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsContactCentersCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsContactCentersCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsContactCentersCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/contactCenters', \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsContactCentersCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "contactCenterInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsContactCentersCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsContactCentersCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists ContactCenters in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsContactCentersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsContactCentersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsContactCentersListResponse
     */
	public function contactcenteraiplatformProjectsLocationsContactCentersList(
        \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsContactCentersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsContactCentersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsContactCentersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/contactCenters', \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsContactCentersListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsContactCentersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsContactCentersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listContactCentersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListContactCentersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the parameters of a single ContactCenter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsContactCentersPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsContactCentersPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsContactCentersPatchResponse
     */
	public function contactcenteraiplatformProjectsLocationsContactCentersPatch(
        \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsContactCentersPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsContactCentersPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsContactCentersPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}', \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsContactCentersPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "contactCenterInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsContactCentersPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsContactCentersPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists information about the supported locations for this service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsListResponse
     */
	public function contactcenteraiplatformProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}/locations', \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsOperationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsOperationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsOperationsCancelResponse
     */
	public function contactcenteraiplatformProjectsLocationsOperationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsOperationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsOperationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsOperationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsOperationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsOperationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsOperationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsOperationsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsOperationsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsOperationsDeleteResponse
     */
	public function contactcenteraiplatformProjectsLocationsOperationsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsOperationsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsOperationsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsOperationsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}', \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsOperationsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsOperationsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsOperationsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsOperationsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsOperationsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsOperationsGetResponse
     */
	public function contactcenteraiplatformProjectsLocationsOperationsGet(
        \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsOperationsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsOperationsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsOperationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}', \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsOperationsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsOperationsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsOperationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsOperationsListResponse
     */
	public function contactcenteraiplatformProjectsLocationsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListOperationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Queries the contact center quota, an aggregation over all the projects, that belongs to the billing account, which the input project belongs to.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsQueryContactCenterQuotaRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsQueryContactCenterQuotaSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsQueryContactCenterQuotaResponse
     */
	public function contactcenteraiplatformProjectsLocationsQueryContactCenterQuota(
        \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsQueryContactCenterQuotaRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsQueryContactCenterQuotaSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsQueryContactCenterQuotaResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}:queryContactCenterQuota', \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsQueryContactCenterQuotaRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsQueryContactCenterQuotaRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContactcenteraiplatformProjectsLocationsQueryContactCenterQuotaResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contactCenterQuota = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContactCenterQuota', 'json');
            }
        }

        return $response;
    }
}