// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ConfirmConnectionXAmzTargetEnum
type ConfirmConnectionXAmzTargetEnum string

const (
	ConfirmConnectionXAmzTargetEnumOvertureServiceConfirmConnection ConfirmConnectionXAmzTargetEnum = "OvertureService.ConfirmConnection"
)

func (e *ConfirmConnectionXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "OvertureService.ConfirmConnection":
		*e = ConfirmConnectionXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ConfirmConnectionXAmzTargetEnum: %s", s)
	}
}

type ConfirmConnectionRequest struct {
	ConfirmConnectionRequest shared.ConfirmConnectionRequest `request:"mediaType=application/json"`
	XAmzAlgorithm            *string                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256        *string                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential           *string                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                 *string                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken        *string                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature            *string                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders        *string                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget               ConfirmConnectionXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ConfirmConnectionResponse struct {
	// Success
	ConfirmConnectionResponse *shared.ConfirmConnectionResponse
	ContentType               string
	// DirectConnectClientException
	DirectConnectClientException interface{}
	// DirectConnectServerException
	DirectConnectServerException interface{}
	StatusCode                   int
	RawResponse                  *http.Response
}
