/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * MssqlLogShippingDetail - Returned when the request for the log shipping configuration details is successful.
 */
public class MssqlLogShippingDetail {
    /**
     * ID assigned to the log shipping configuration object.
     */
    @JsonProperty("id")
    public String id;

    public MssqlLogShippingDetail withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Number of milliseconds elapsed since the latest backup was applied to the secondary database and the time the backup was taken on the primary database.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lagTime")
    public Long lagTime;

    public MssqlLogShippingDetail withLagTime(Long lagTime) {
        this.lagTime = lagTime;
        return this;
    }
    
    /**
     * Timestamp of the last transaction applied using the specified log shipping configuration object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastAppliedPoint")
    public OffsetDateTime lastAppliedPoint;

    public MssqlLogShippingDetail withLastAppliedPoint(OffsetDateTime lastAppliedPoint) {
        this.lastAppliedPoint = lastAppliedPoint;
        return this;
    }
    
    @JsonProperty("links")
    public MssqlLogShippingLinks links;

    public MssqlLogShippingDetail withLinks(MssqlLogShippingLinks links) {
        this.links = links;
        return this;
    }
    
    /**
     * Location of a specified secondary database. Location uses this format: "host/instance".
     */
    @JsonProperty("location")
    public String location;

    public MssqlLogShippingDetail withLocation(String location) {
        this.location = location;
        return this;
    }
    
    /**
     * ID of the primary database.
     */
    @JsonProperty("primaryDatabaseId")
    public String primaryDatabaseId;

    public MssqlLogShippingDetail withPrimaryDatabaseId(String primaryDatabaseId) {
        this.primaryDatabaseId = primaryDatabaseId;
        return this;
    }
    
    /**
     * Log backup frequency, in seconds, of the primary database.
     */
    @JsonProperty("primaryDatabaseLogBackupFrequency")
    public Long primaryDatabaseLogBackupFrequency;

    public MssqlLogShippingDetail withPrimaryDatabaseLogBackupFrequency(Long primaryDatabaseLogBackupFrequency) {
        this.primaryDatabaseLogBackupFrequency = primaryDatabaseLogBackupFrequency;
        return this;
    }
    
    /**
     * Name of the primary database.
     */
    @JsonProperty("primaryDatabaseName")
    public String primaryDatabaseName;

    public MssqlLogShippingDetail withPrimaryDatabaseName(String primaryDatabaseName) {
        this.primaryDatabaseName = primaryDatabaseName;
        return this;
    }
    
    /**
     * ID of the secondary database.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secondaryDatabaseId")
    public String secondaryDatabaseId;

    public MssqlLogShippingDetail withSecondaryDatabaseId(String secondaryDatabaseId) {
        this.secondaryDatabaseId = secondaryDatabaseId;
        return this;
    }
    
    /**
     * Name of the secondary database.
     */
    @JsonProperty("secondaryDatabaseName")
    public String secondaryDatabaseName;

    public MssqlLogShippingDetail withSecondaryDatabaseName(String secondaryDatabaseName) {
        this.secondaryDatabaseName = secondaryDatabaseName;
        return this;
    }
    
    /**
     * Whether to automatically disconnect users from a secondary database in Standby mode when a restore operation is performed. If this value is false and users remain connected, then any scheduled restore operations will fail. This is only returned when the secondary database is in Standby mode.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shouldDisconnectStandbyUsers")
    public Boolean shouldDisconnectStandbyUsers;

    public MssqlLogShippingDetail withShouldDisconnectStandbyUsers(Boolean shouldDisconnectStandbyUsers) {
        this.shouldDisconnectStandbyUsers = shouldDisconnectStandbyUsers;
        return this;
    }
    
    /**
     * The current state of the secondary database.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public String state;

    public MssqlLogShippingDetail withState(String state) {
        this.state = state;
        return this;
    }
    
    @JsonProperty("status")
    public MssqlLogShippingStatusInfo status;

    public MssqlLogShippingDetail withStatus(MssqlLogShippingStatusInfo status) {
        this.status = status;
        return this;
    }
    
    public MssqlLogShippingDetail(@JsonProperty("id") String id, @JsonProperty("links") MssqlLogShippingLinks links, @JsonProperty("location") String location, @JsonProperty("primaryDatabaseId") String primaryDatabaseId, @JsonProperty("primaryDatabaseLogBackupFrequency") Long primaryDatabaseLogBackupFrequency, @JsonProperty("primaryDatabaseName") String primaryDatabaseName, @JsonProperty("secondaryDatabaseName") String secondaryDatabaseName, @JsonProperty("status") MssqlLogShippingStatusInfo status) {
        this.id = id;
        this.links = links;
        this.location = location;
        this.primaryDatabaseId = primaryDatabaseId;
        this.primaryDatabaseLogBackupFrequency = primaryDatabaseLogBackupFrequency;
        this.primaryDatabaseName = primaryDatabaseName;
        this.secondaryDatabaseName = secondaryDatabaseName;
        this.status = status;
  }
}
