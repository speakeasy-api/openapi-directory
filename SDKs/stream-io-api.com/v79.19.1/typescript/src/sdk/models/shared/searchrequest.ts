/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { SortParam } from "./sortparam";
import { Expose, Type } from "class-transformer";

export class SearchRequest extends SpeakeasyBase {
  /**
   * Channel filter conditions
   */
  @SpeakeasyMetadata()
  @Expose({ name: "filter_conditions" })
  filterConditions: Record<string, any>;

  /**
   * Number of messages to return
   */
  @SpeakeasyMetadata()
  @Expose({ name: "limit" })
  limit?: number;

  /**
   * Message filter conditions
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message_filter_conditions" })
  messageFilterConditions?: Record<string, any>;

  /**
   * Pagination parameter. Cannot be used with non-zero offset.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "next" })
  next?: string;

  /**
   * Pagination offset. Cannot be used with sort or next.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "offset" })
  offset?: number;

  /**
   * Search phrase
   */
  @SpeakeasyMetadata()
  @Expose({ name: "query" })
  query?: string;

  /**
   * Sort parameters. Cannot be used with non-zero offset
   */
  @SpeakeasyMetadata({ elemType: SortParam })
  @Expose({ name: "sort" })
  @Type(() => SortParam)
  sort?: SortParam[];
}
