/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Grid, GridInput } from "./grid";
import { Image, ImageInput } from "./image";
import { Question, QuestionInput } from "./question";
import { Expose, Type } from "class-transformer";

/**
 * Defines a question that comprises multiple questions grouped together.
 */
export class QuestionGroupItem extends SpeakeasyBase {
  /**
   * A grid of choices (radio or check boxes) with each row constituting a separate question. Each row has the same choices, which are shown as the columns.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "grid" })
  @Type(() => Grid)
  grid?: Grid;

  /**
   * Data representing an image.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "image" })
  @Type(() => Image)
  image?: Image;

  /**
   * Required. A list of questions that belong in this question group. A question must only belong to one group. The `kind` of the group may affect what types of questions are allowed.
   */
  @SpeakeasyMetadata({ elemType: Question })
  @Expose({ name: "questions" })
  @Type(() => Question)
  questions?: Question[];
}

/**
 * Defines a question that comprises multiple questions grouped together.
 */
export class QuestionGroupItemInput extends SpeakeasyBase {
  /**
   * A grid of choices (radio or check boxes) with each row constituting a separate question. Each row has the same choices, which are shown as the columns.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "grid" })
  @Type(() => GridInput)
  grid?: GridInput;

  /**
   * Data representing an image.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "image" })
  @Type(() => ImageInput)
  image?: ImageInput;

  /**
   * Required. A list of questions that belong in this question group. A question must only belong to one group. The `kind` of the group may affect what types of questions are allowed.
   */
  @SpeakeasyMetadata({ elemType: QuestionInput })
  @Expose({ name: "questions" })
  @Type(() => QuestionInput)
  questions?: QuestionInput[];
}
