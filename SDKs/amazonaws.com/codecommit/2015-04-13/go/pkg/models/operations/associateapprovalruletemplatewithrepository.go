// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// AssociateApprovalRuleTemplateWithRepositoryXAmzTargetEnum
type AssociateApprovalRuleTemplateWithRepositoryXAmzTargetEnum string

const (
	AssociateApprovalRuleTemplateWithRepositoryXAmzTargetEnumCodeCommit20150413AssociateApprovalRuleTemplateWithRepository AssociateApprovalRuleTemplateWithRepositoryXAmzTargetEnum = "CodeCommit_20150413.AssociateApprovalRuleTemplateWithRepository"
)

func (e *AssociateApprovalRuleTemplateWithRepositoryXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeCommit_20150413.AssociateApprovalRuleTemplateWithRepository":
		*e = AssociateApprovalRuleTemplateWithRepositoryXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AssociateApprovalRuleTemplateWithRepositoryXAmzTargetEnum: %s", s)
	}
}

type AssociateApprovalRuleTemplateWithRepositoryHeaders struct {
	XAmzAlgorithm     *string                                                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        AssociateApprovalRuleTemplateWithRepositoryXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type AssociateApprovalRuleTemplateWithRepositoryRequest struct {
	Headers AssociateApprovalRuleTemplateWithRepositoryHeaders
	Request shared.AssociateApprovalRuleTemplateWithRepositoryInput `request:"mediaType=application/json"`
}

type AssociateApprovalRuleTemplateWithRepositoryResponse struct {
	// ApprovalRuleTemplateDoesNotExistException
	ApprovalRuleTemplateDoesNotExistException interface{}
	// ApprovalRuleTemplateNameRequiredException
	ApprovalRuleTemplateNameRequiredException interface{}
	ContentType                               string
	// EncryptionIntegrityChecksFailedException
	EncryptionIntegrityChecksFailedException interface{}
	// EncryptionKeyAccessDeniedException
	EncryptionKeyAccessDeniedException interface{}
	// EncryptionKeyDisabledException
	EncryptionKeyDisabledException interface{}
	// EncryptionKeyNotFoundException
	EncryptionKeyNotFoundException interface{}
	// EncryptionKeyUnavailableException
	EncryptionKeyUnavailableException interface{}
	// InvalidApprovalRuleTemplateNameException
	InvalidApprovalRuleTemplateNameException interface{}
	// InvalidRepositoryNameException
	InvalidRepositoryNameException interface{}
	// MaximumRuleTemplatesAssociatedWithRepositoryException
	MaximumRuleTemplatesAssociatedWithRepositoryException interface{}
	// RepositoryDoesNotExistException
	RepositoryDoesNotExistException interface{}
	// RepositoryNameRequiredException
	RepositoryNameRequiredException interface{}
	StatusCode                      int
	RawResponse                     *http.Response
}
