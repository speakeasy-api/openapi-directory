"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetDeviceLiveToolsPingRequest:
    
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})  
    serial: str = dataclasses.field(metadata={'path_param': { 'field_name': 'serial', 'style': 'simple', 'explode': False }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetDeviceLiveToolsPing200ApplicationJSONRequest:
    r"""Ping request parameters"""
    
    count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('count'), 'exclude': lambda f: f is None }})
    r"""Number of pings to send"""  
    serial: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serial'), 'exclude': lambda f: f is None }})
    r"""Device serial number"""  
    target: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('target'), 'exclude': lambda f: f is None }})
    r"""IP address or FQDN to ping"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetDeviceLiveToolsPing200ApplicationJSONResultsLatencies:
    r"""Packet latency stats"""
    
    average: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('average'), 'exclude': lambda f: f is None }})
    r"""Average latency"""  
    maximum: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maximum'), 'exclude': lambda f: f is None }})
    r"""Maximum latency"""  
    minimum: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minimum'), 'exclude': lambda f: f is None }})
    r"""Minimum latency"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetDeviceLiveToolsPing200ApplicationJSONResultsLoss:
    r"""Lost packets"""
    
    percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('percentage'), 'exclude': lambda f: f is None }})
    r"""Percentage of packets lost"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetDeviceLiveToolsPing200ApplicationJSONResultsReplies:
    
    latency: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('latency'), 'exclude': lambda f: f is None }})
    r"""Latency of the packet in milliseconds"""  
    sequence_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sequenceId'), 'exclude': lambda f: f is None }})
    r"""Sequence ID of the packet"""  
    size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size'), 'exclude': lambda f: f is None }})
    r"""Size of the packet in bytes"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetDeviceLiveToolsPing200ApplicationJSONResults:
    r"""Results of the ping request."""
    
    latencies: Optional[GetDeviceLiveToolsPing200ApplicationJSONResultsLatencies] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('latencies'), 'exclude': lambda f: f is None }})
    r"""Packet latency stats"""  
    loss: Optional[GetDeviceLiveToolsPing200ApplicationJSONResultsLoss] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loss'), 'exclude': lambda f: f is None }})
    r"""Lost packets"""  
    received: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('received'), 'exclude': lambda f: f is None }})
    r"""Number of packets received"""  
    replies: Optional[list[GetDeviceLiveToolsPing200ApplicationJSONResultsReplies]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('replies'), 'exclude': lambda f: f is None }})
    r"""Received packets"""  
    sent: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sent'), 'exclude': lambda f: f is None }})
    r"""Number of packets sent"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetDeviceLiveToolsPing200ApplicationJSON:
    r"""Successful operation"""
    
    ping_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pingId'), 'exclude': lambda f: f is None }})
    r"""Id to check the status of your ping request."""  
    request: Optional[GetDeviceLiveToolsPing200ApplicationJSONRequest] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('request'), 'exclude': lambda f: f is None }})
    r"""Ping request parameters"""  
    results: Optional[GetDeviceLiveToolsPing200ApplicationJSONResults] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('results'), 'exclude': lambda f: f is None }})
    r"""Results of the ping request."""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status of the ping request."""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""GET this url to check the status of your ping request."""  
    

@dataclasses.dataclass
class GetDeviceLiveToolsPingResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_device_live_tools_ping_200_application_json_object: Optional[GetDeviceLiveToolsPing200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    