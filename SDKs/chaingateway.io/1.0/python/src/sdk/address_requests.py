"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class AddressRequests:
    r"""Requests to create, list and delete addresses"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_address(self, request: operations.DeleteAddressRequest) -> operations.DeleteAddressResponse:
        r"""deleteAddress
        Deletes an existing ethereum address. Be careful when using this function.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/deleteAddress'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "delete_address_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAddressResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DeleteAddress])
                res.delete_address = out

        return res

    def export_address(self, request: operations.ExportAddressRequest) -> operations.ExportAddressResponse:
        r"""exportAddress
        Returns all ethereum addresses created with an account.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/exportAddress'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "export_address_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ExportAddressResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ExportAddress])
                res.export_address = out

        return res

    def import_address(self, request: operations.ImportAddressRequest) -> operations.ImportAddressResponse:
        r"""importAddress
        Returns all ethereum addresses created with an account.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/importAddress'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "import_address_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ImportAddressResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ImportAddress])
                res.import_address = out

        return res

    def list_addresses(self, request: operations.ListAddressesRequest) -> operations.ListAddressesResponse:
        r"""listAddresses
        Returns all ethereum addresses created with an account.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/listAddresses'
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('POST', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListAddressesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListAddresses])
                res.list_addresses = out

        return res

    def new_address(self, request: operations.NewAddressRequest) -> operations.NewAddressResponse:
        r"""newAddress
        Generates a new ethereum addresses you can use to send or receive funds. Do not lose the password! We can't restore access to an address if you lose it.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/newAddress'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "new_address_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NewAddressResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NewAddress])
                res.new_address = out

        return res

    