/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * Output only. The state of a Channel.
 */
export enum ChannelStateEnum {
  StateUnspecified = "STATE_UNSPECIFIED",
  Pending = "PENDING",
  Active = "ACTIVE",
  Inactive = "INACTIVE",
}

/**
 * A representation of the Channel resource. A Channel is a resource on which event providers publish their events. The published events are delivered through the transport associated with the channel. Note that a channel is associated with exactly one event provider.
 */
export class Channel extends SpeakeasyBase {
  /**
   * Output only. The activation token for the channel. The token must be used by the provider to register the channel for publishing.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "activationToken" })
  activationToken?: string;

  /**
   * Output only. The creation time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createTime" })
  createTime?: string;

  /**
   * Optional. Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt their event data. It must match the pattern `projects/* /locations/* /keyRings/* /cryptoKeys/*`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cryptoKeyName" })
  cryptoKeyName?: string;

  /**
   * Required. The resource name of the channel. Must be unique within the location on the project and must be in `projects/{project}/locations/{location}/channels/{channel_id}` format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * The name of the event provider (e.g. Eventarc SaaS partner) associated with the channel. This provider will be granted permissions to publish events to the channel. Format: `projects/{project}/locations/{location}/providers/{provider_id}`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "provider" })
  provider?: string;

  /**
   * Output only. The name of the Pub/Sub topic created and managed by Eventarc system as a transport for the event delivery. Format: `projects/{project}/topics/{topic_id}`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pubsubTopic" })
  pubsubTopic?: string;

  /**
   * Output only. The state of a Channel.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: ChannelStateEnum;

  /**
   * Output only. Server assigned unique identifier for the channel. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uid" })
  uid?: string;

  /**
   * Output only. The last-modified time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updateTime" })
  updateTime?: string;
}

/**
 * A representation of the Channel resource. A Channel is a resource on which event providers publish their events. The published events are delivered through the transport associated with the channel. Note that a channel is associated with exactly one event provider.
 */
export class ChannelInput extends SpeakeasyBase {
  /**
   * Optional. Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt their event data. It must match the pattern `projects/* /locations/* /keyRings/* /cryptoKeys/*`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cryptoKeyName" })
  cryptoKeyName?: string;

  /**
   * Required. The resource name of the channel. Must be unique within the location on the project and must be in `projects/{project}/locations/{location}/channels/{channel_id}` format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * The name of the event provider (e.g. Eventarc SaaS partner) associated with the channel. This provider will be granted permissions to publish events to the channel. Format: `projects/{project}/locations/{location}/providers/{provider_id}`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "provider" })
  provider?: string;
}
