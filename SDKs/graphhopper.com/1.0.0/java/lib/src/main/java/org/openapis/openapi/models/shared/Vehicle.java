/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class Vehicle {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("break")
    public Object break_;

    public Vehicle withBreak(Object break_) {
        this.break_ = break_;
        return this;
    }
    
    /**
     * Earliest start of vehicle in seconds. It is recommended to use the unix timestamp.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("earliest_start")
    public Long earliestStart;

    public Vehicle withEarliestStart(Long earliestStart) {
        this.earliestStart = earliestStart;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_address")
    public Address endAddress;

    public Vehicle withEndAddress(Address endAddress) {
        this.endAddress = endAddress;
        return this;
    }
    
    /**
     * Latest end of vehicle in seconds, i.e. the time the vehicle needs to be at its end location at latest.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("latest_end")
    public Long latestEnd;

    public Vehicle withLatestEnd(Long latestEnd) {
        this.latestEnd = latestEnd;
        return this;
    }
    
    /**
     * Specifies the maximum number of activities a vehicle can conduct.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_activities")
    public Integer maxActivities;

    public Vehicle withMaxActivities(Integer maxActivities) {
        this.maxActivities = maxActivities;
        return this;
    }
    
    /**
     * Specifies the maximum distance (in meters) a vehicle can go.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_distance")
    public Long maxDistance;

    public Vehicle withMaxDistance(Long maxDistance) {
        this.maxDistance = maxDistance;
        return this;
    }
    
    /**
     * Specifies the maximum drive time (in seconds) a vehicle/driver can go, i.e. the maximum time on the road (service and waiting times are not included here)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_driving_time")
    public Long maxDrivingTime;

    public Vehicle withMaxDrivingTime(Long maxDrivingTime) {
        this.maxDrivingTime = maxDrivingTime;
        return this;
    }
    
    /**
     * Specifies the maximum number of jobs a vehicle can load.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_jobs")
    public Integer maxJobs;

    public Vehicle withMaxJobs(Integer maxJobs) {
        this.maxJobs = maxJobs;
        return this;
    }
    
    /**
     * Specifies the minimum number of jobs a vehicle should load. This is a soft constraint, i.e. if it is not possible to fulfill \u201cmin_jobs\u201d, we will still try to get as close as possible to this constraint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("min_jobs")
    public Integer minJobs;

    public Vehicle withMinJobs(Integer minJobs) {
        this.minJobs = minJobs;
        return this;
    }
    
    /**
     * Indicates whether a vehicle should be moved even though it has not been assigned any jobs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("move_to_end_address")
    public Boolean moveToEndAddress;

    public Vehicle withMoveToEndAddress(Boolean moveToEndAddress) {
        this.moveToEndAddress = moveToEndAddress;
        return this;
    }
    
    /**
     * If it is false, the algorithm decides where to end the vehicle route. It ends in one of your customers' locations. The end is chosen such that it contributes to the overall objective function, e.g. min transport_time. If it is true, you can either specify a specific end location (which is then regarded as end depot) or you can leave it and the driver returns to its start location.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("return_to_depot")
    public Boolean returnToDepot;

    public Vehicle withReturnToDepot(Boolean returnToDepot) {
        this.returnToDepot = returnToDepot;
        return this;
    }
    
    /**
     * Array of skills, i.e. array of string (not case sensitive).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skills")
    public String[] skills;

    public Vehicle withSkills(String[] skills) {
        this.skills = skills;
        return this;
    }
    
    @JsonProperty("start_address")
    public Address startAddress;

    public Vehicle withStartAddress(Address startAddress) {
        this.startAddress = startAddress;
        return this;
    }
    
    /**
     * The type ID assigns a vehicle type to this vehicle. You can specify types in the array of vehicle types. If you omit the type ID, the default type is used. The default type is a `car` with a capacity of 0.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type_id")
    public String typeId;

    public Vehicle withTypeId(String typeId) {
        this.typeId = typeId;
        return this;
    }
    
    /**
     * Specifies the ID of the vehicle. Ids must be unique, i.e. if there are two vehicles with the same ID, an error is returned.
     */
    @JsonProperty("vehicle_id")
    public String vehicleId;

    public Vehicle withVehicleId(String vehicleId) {
        this.vehicleId = vehicleId;
        return this;
    }
    
    public Vehicle(@JsonProperty("start_address") Address startAddress, @JsonProperty("vehicle_id") String vehicleId) {
        this.startAddress = startAddress;
        this.vehicleId = vehicleId;
  }
}
