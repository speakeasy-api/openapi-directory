"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Transactions:
    r"""While there are many types of transactions, they are all represented by the same JSON object with a different txnType."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_transactions_by_idv1(self, request: operations.GetTransactionsByIdv1Request) -> operations.GetTransactionsByIdv1Response:
        r"""List transactions for an account (v1)
        Retrieve a list of transactions against an account. Recommended to use the v3 endpoint instead.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTransactionsByIdv1Request, base_url, '/v1/accounts/{ican}/transactions', request)
        
        query_params = utils.get_query_params(operations.GetTransactionsByIdv1Request, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTransactionsByIdv1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetTransactionsByIdv1CardTransactionsv1])
                res.card_transactionsv1 = out

        return res

    def get_transactions_by_idv3(self, request: operations.GetTransactionsByIdv3Request) -> operations.GetTransactionsByIdv3Response:
        r"""List transactions for an account (v3)
        Retrieve a list of transactions against an account. Initially, use the optional `limit`, `dateRangeFrom` and `dateRangeTo` query params to limit your query, then use the embedded `next` or `prev` links in the response to get newer or older pages.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTransactionsByIdv3Request, base_url, '/v3/accounts/{ican}/transactions', request)
        
        query_params = utils.get_query_params(operations.GetTransactionsByIdv3Request, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTransactionsByIdv3Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetTransactionsByIdv3CardTransactionsv3])
                res.card_transactionsv3 = out

        return res

    def get_transactions_filtered_by_id(self, request: operations.GetTransactionsFilteredByIDRequest) -> operations.GetTransactionsFilteredByIDResponse:
        r"""Filtered list of transactions for an account (v1)
        Retrieve a filtered list of transactions against an account. Recommended to use the v3 endpoint instead.
        * `dateRangeFrom` - A millisecond epoch time specifying the date range start date.
        * `dateRangeTo` - A millisecond epoch time specifying the date range end date.
        * `searchKeyword` - Search term to filter by from the reference field (`myRef`).
        * `transactionTypes` - One or more of the transaction types above. This field can be repeated multiple times to allow for multiple transaction types.
        * `offset` - The page offset. Defaults to 0. This is the record number that the returned list will start at. E.g. offset = 40 and limit = 20 will return records 40 to 59.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTransactionsFilteredByIDRequest, base_url, '/v1/accounts/{ican}/transactions/filter', request)
        
        query_params = utils.get_query_params(operations.GetTransactionsFilteredByIDRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTransactionsFilteredByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetTransactionsFilteredByIDCardTransactionsv1])
                res.card_transactionsv1 = out

        return res

    