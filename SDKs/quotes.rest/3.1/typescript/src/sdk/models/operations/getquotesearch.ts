/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class GetQuoteSearchSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=X-TheySaidSo-Api-Secret",
  })
  xTheySaidSoApiSecret: string;
}

export class GetQuoteSearchRequest extends SpeakeasyBase {
  /**
   * Quote Author
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=author",
  })
  author?: string;

  /**
   * Quote Category
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=category",
  })
  category?: string;

  /**
   * Language of the Quote. The language must be supported in our system.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=language",
  })
  language?: string;

  /**
   * No of quotes to return. The max limit depends on the subscription level.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=limit" })
  limit?: number;

  /**
   * Quote maximum Length
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=maxlength",
  })
  maxlength?: number;

  /**
   * Quote minimum Length
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=minlength",
  })
  minlength?: number;

  /**
   * Should search private collection? Default searches public collection.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=private",
  })
  private?: boolean;

  /**
   * keyword to search for in the quote
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=query" })
  query?: string;

  /**
   * Should search only SFW (Safe For Work) quotes?
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sfw" })
  sfw?: boolean;
}

export class GetQuoteSearchResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * 200  response
   */
  @SpeakeasyMetadata()
  quoteResponse?: shared.QuoteResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
