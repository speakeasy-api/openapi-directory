"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import errorresponse as shared_errorresponse
from ..shared import eventscount as shared_eventscount
from enum import Enum
from typing import Optional

class GetEventsCountDirectionEnum(str, Enum):
    r"""Filter by event direction"""
    INBOUND = 'INBOUND'
    OUTBOUND = 'OUTBOUND'

class GetEventsCountStatesEnum(str, Enum):
    r"""Filter events by state"""
    INITIALIZING = 'INITIALIZING'
    RINGING = 'RINGING'
    ACTIVE = 'ACTIVE'
    HELD = 'HELD'
    REMOTE_HELD = 'REMOTE_HELD'


@dataclasses.dataclass
class GetEventsCountRequest:
    
    direction: Optional[GetEventsCountDirectionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'direction', 'style': 'form', 'explode': True }})
    r"""Filter by event direction"""  
    from_date: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fromDate', 'style': 'form', 'explode': True }})
    r"""Return events that occurred after this point in time"""  
    states: Optional[GetEventsCountStatesEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'states', 'style': 'form', 'explode': True }})
    r"""Filter events by state"""  
    to_date: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'toDate', 'style': 'form', 'explode': True }})
    r"""Return events that occurred before this point in time"""  
    

@dataclasses.dataclass
class GetEventsCountResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    error_response: Optional[shared_errorresponse.ErrorResponse] = dataclasses.field(default=None)
    r"""Bad Request: The client should not repeat the request without modifications"""  
    events_count: Optional[shared_eventscount.EventsCount] = dataclasses.field(default=None)
    r"""Successful"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    