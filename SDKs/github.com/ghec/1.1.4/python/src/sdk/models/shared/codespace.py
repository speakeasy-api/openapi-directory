"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import minimal_repository as shared_minimal_repository
from ..shared import nullable_codespace_machine as shared_nullable_codespace_machine
from ..shared import simple_user as shared_simple_user
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CodespaceGitStatus:
    r"""Details about the codespace's git repository."""
    
    ahead: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ahead'), 'exclude': lambda f: f is None }})
    r"""The number of commits the local repository is ahead of the remote."""  
    behind: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('behind'), 'exclude': lambda f: f is None }})
    r"""The number of commits the local repository is behind the remote."""  
    has_uncommitted_changes: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_uncommitted_changes'), 'exclude': lambda f: f is None }})
    r"""Whether the local repository has uncommitted changes."""  
    has_unpushed_changes: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_unpushed_changes'), 'exclude': lambda f: f is None }})
    r"""Whether the local repository has unpushed changes."""  
    ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ref'), 'exclude': lambda f: f is None }})
    r"""The current branch (or SHA if in detached HEAD state) of the local repository."""  
    
class CodespaceLocationEnum(str, Enum):
    r"""The Azure region where this codespace is located."""
    EAST_US = 'EastUs'
    SOUTH_EAST_ASIA = 'SouthEastAsia'
    WEST_EUROPE = 'WestEurope'
    WEST_US2 = 'WestUs2'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CodespaceRuntimeConstraints:
    
    allowed_port_privacy_settings: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowed_port_privacy_settings'), 'exclude': lambda f: f is None }})
    r"""The privacy settings a user can select from when forwarding a port."""  
    
class CodespaceStateEnum(str, Enum):
    r"""State of this codespace."""
    UNKNOWN = 'Unknown'
    CREATED = 'Created'
    QUEUED = 'Queued'
    PROVISIONING = 'Provisioning'
    AVAILABLE = 'Available'
    AWAITING = 'Awaiting'
    UNAVAILABLE = 'Unavailable'
    DELETED = 'Deleted'
    MOVED = 'Moved'
    SHUTDOWN = 'Shutdown'
    ARCHIVED = 'Archived'
    STARTING = 'Starting'
    SHUTTING_DOWN = 'ShuttingDown'
    FAILED = 'Failed'
    EXPORTING = 'Exporting'
    UPDATING = 'Updating'
    REBUILDING = 'Rebuilding'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Codespace:
    r"""A codespace."""
    
    billable_owner: shared_simple_user.SimpleUser = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billable_owner') }})
    r"""A GitHub user."""  
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    environment_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('environment_id') }})
    r"""UUID identifying this codespace's environment."""  
    git_status: CodespaceGitStatus = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('git_status') }})
    r"""Details about the codespace's git repository."""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    idle_timeout_minutes: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idle_timeout_minutes') }})
    r"""The number of minutes of inactivity after which this codespace will be automatically stopped."""  
    last_used_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_used_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""Last known time this codespace was started."""  
    location: CodespaceLocationEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location') }})
    r"""The Azure region where this codespace is located."""  
    machine: shared_nullable_codespace_machine.NullableCodespaceMachine = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('machine') }})
    r"""A description of the machine powering a codespace."""  
    machines_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('machines_url') }})
    r"""API URL to access available alternate machine types for this codespace."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Automatically generated name of this codespace."""  
    owner: shared_simple_user.SimpleUser = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('owner') }})
    r"""A GitHub user."""  
    prebuild: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prebuild') }})
    r"""Whether the codespace was created from a prebuild."""  
    pulls_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pulls_url') }})
    r"""API URL for the Pull Request associated with this codespace, if any."""  
    recent_folders: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recent_folders') }})  
    repository: shared_minimal_repository.MinimalRepository = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repository') }})
    r"""Minimal Repository"""  
    start_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_url') }})
    r"""API URL to start this codespace."""  
    state: CodespaceStateEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})
    r"""State of this codespace."""  
    stop_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stop_url') }})
    r"""API URL to stop this codespace."""  
    updated_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""API URL for this codespace."""  
    web_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('web_url') }})
    r"""URL to access this codespace on the web."""  
    devcontainer_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('devcontainer_path'), 'exclude': lambda f: f is None }})
    r"""Path to devcontainer.json from repo root used to create Codespace."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display_name'), 'exclude': lambda f: f is None }})
    r"""Display name for this codespace."""  
    idle_timeout_notice: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idle_timeout_notice'), 'exclude': lambda f: f is None }})
    r"""Text to show user when codespace idle timeout minutes has been overriden by an organization policy"""  
    last_known_stop_notice: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_known_stop_notice'), 'exclude': lambda f: f is None }})
    r"""The text to display to a user when a codespace has been stopped for a potentially actionable reason."""  
    pending_operation: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pending_operation'), 'exclude': lambda f: f is None }})
    r"""Whether or not a codespace has a pending async operation. This would mean that the codespace is temporarily unavailable. The only thing that you can do with a codespace in this state is delete it."""  
    pending_operation_disabled_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pending_operation_disabled_reason'), 'exclude': lambda f: f is None }})
    r"""Text to show user when codespace is disabled by a pending operation"""  
    publish_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publish_url'), 'exclude': lambda f: f is None }})
    r"""API URL to publish this codespace to a new repository."""  
    retention_expires_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('retention_expires_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""When a codespace will be auto-deleted based on the \\"retention_period_minutes\\" and \\"last_used_at\\" """  
    retention_period_minutes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('retention_period_minutes'), 'exclude': lambda f: f is None }})
    r"""Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days)."""  
    runtime_constraints: Optional[CodespaceRuntimeConstraints] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('runtime_constraints'), 'exclude': lambda f: f is None }})  
    