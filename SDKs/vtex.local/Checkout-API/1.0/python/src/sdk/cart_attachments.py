"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class CartAttachments:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_client_preferences(self, request: operations.AddClientPreferencesRequest) -> operations.AddClientPreferencesResponse:
        r"""Add client preferences
        Use this request to include client preferences information to a given shopping cart.
        
        The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure which represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
        
        
        > This request has a time out of 12 seconds.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddClientPreferencesRequest, base_url, '/api/checkout/pub/orderForm/{orderFormId}/attachments/clientPreferencesData', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddClientPreferencesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.add_client_preferences_200_application_json_any = out

        return res

    def add_client_profile(self, request: operations.AddClientProfileRequest) -> operations.AddClientProfileResponse:
        r"""Add client profile
        Use this request to include client profile information to a given shopping cart.
        
        The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure which represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
        
        
        > This request has a time out of 12 seconds.
        
        >⚠️ The authentication of this endpoint can change depending on the customer context. If you are modifying information from a customer with a complete profile on the store, the response will return the customer's data masked. You can only access the customer data with an authenticated request.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddClientProfileRequest, base_url, '/api/checkout/pub/orderForm/{orderFormId}/attachments/clientProfileData', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddClientProfileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def add_marketing_data(self, request: operations.AddMarketingDataRequest) -> operations.AddMarketingDataResponse:
        r"""Add marketing data
        Use this request to include marketing information to a given shopping cart.
        
        The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure which represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
        
        
        > This request has a time out of 12 seconds.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddMarketingDataRequest, base_url, '/api/checkout/pub/orderForm/{orderFormId}/attachments/marketingData', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddMarketingDataResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def add_merchant_context_data(self, request: operations.AddMerchantContextDataRequest) -> operations.AddMerchantContextDataResponse:
        r"""Add merchant context data
        This endpoint is used for the merchant to add to the cart any relevant information that is related to the context of a specific order.
        
        The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure which represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
        
        
        > This request has a time out of 12 seconds.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddMerchantContextDataRequest, base_url, '/api/checkout/pub/orderForm/{orderFormId}/attachments/merchantContextData', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddMerchantContextDataResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.AddMerchantContextData200ApplicationJSON])
                res.add_merchant_context_data_200_application_json_object = out

        return res

    def add_payment_data(self, request: operations.AddPaymentDataRequest) -> operations.AddPaymentDataResponse:
        r"""Add payment data
        Use this request to include payment information to a given shopping cart. The payment information attachment in the shopping cart does not determine the final order payment method in itself. However, it allows tha platform to update any relevant information that may be impacted by the payment method.
        
        The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure which represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
        
        
        > This request has a time out of 12 seconds.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddPaymentDataRequest, base_url, '/api/checkout/pub/orderForm/{orderFormId}/attachments/paymentData', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddPaymentDataResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def add_shipping_address(self, request: operations.AddShippingAddressRequest) -> operations.AddShippingAddressResponse:
        r"""Add shipping address and select delivery option
        Use this request to include shipping information and/or selected delivery option to a given shopping cart.
        
        To add shipping addresses send the `selectedAddresses` array. For delivery option use the `logisticsInfo` array.
        
        The [orderForm](https://developers.vtex.com/docs/guides/orderform-fields) is the data structure which represents a shopping cart and contains all information pertaining to it. Hence, the `orderFormId` is the identification code of a given cart.
        
        
        > This request has a time out of 12 seconds.
        
        >⚠️ The authentication of this endpoint can change depending on the customer context. If you are modifying information from a customer with a complete profile on the store, the response will return the customer's data masked. You can only access the customer data with an authenticated request.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddShippingAddressRequest, base_url, '/api/checkout/pub/orderForm/{orderFormId}/attachments/shippingData', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddShippingAddressResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_client_profile_by_email(self, request: operations.GetClientProfileByEmailRequest) -> operations.GetClientProfileByEmailResponse:
        r"""Get client profile by email
        Retrieve a client's profile information by providing an email address.
        
        
        If the response body fields are empty, the following situations may have occurred:
        
        
        1. There is no client registered with the email address provided in your store, or;
        
        2. Client profile is invalid or incomplete. For more information, see [SmartCheckout - Customer information automatic fill-in](https://help.vtex.com/en/tutorial/smartcheckout-customer-information-automatic-fill-in--2Nuu3xAFzdhIzJIldAdtan).
        
        >⚠️ The authentication of this endpoint can change depending on the customer context. If you are consulting information from a customer with a complete profile on the store, the response will return the customer's data masked. You can only access the customer data with an authenticated request.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/checkout/pub/profiles'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetClientProfileByEmailRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetClientProfileByEmailResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetClientProfileByEmail200ApplicationJSON])
                res.get_client_profile_by_email_200_application_json_object = out

        return res

    