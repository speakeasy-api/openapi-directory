// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

var CreateParticipantServerList = []string{
	"https://api.twilio.com",
}

type CreateParticipantSecurity struct {
	Password string `security:"scheme,type=http,subtype=basic,name=password"`
	Username string `security:"scheme,type=http,subtype=basic,name=username"`
}

// CreateParticipantCreateParticipantRequestAmdStatusCallbackMethodEnum - The HTTP method we should use when calling the `amd_status_callback` URL. Can be: `GET` or `POST` and the default is `POST`.
type CreateParticipantCreateParticipantRequestAmdStatusCallbackMethodEnum string

const (
	CreateParticipantCreateParticipantRequestAmdStatusCallbackMethodEnumHead   CreateParticipantCreateParticipantRequestAmdStatusCallbackMethodEnum = "HEAD"
	CreateParticipantCreateParticipantRequestAmdStatusCallbackMethodEnumGet    CreateParticipantCreateParticipantRequestAmdStatusCallbackMethodEnum = "GET"
	CreateParticipantCreateParticipantRequestAmdStatusCallbackMethodEnumPost   CreateParticipantCreateParticipantRequestAmdStatusCallbackMethodEnum = "POST"
	CreateParticipantCreateParticipantRequestAmdStatusCallbackMethodEnumPatch  CreateParticipantCreateParticipantRequestAmdStatusCallbackMethodEnum = "PATCH"
	CreateParticipantCreateParticipantRequestAmdStatusCallbackMethodEnumPut    CreateParticipantCreateParticipantRequestAmdStatusCallbackMethodEnum = "PUT"
	CreateParticipantCreateParticipantRequestAmdStatusCallbackMethodEnumDelete CreateParticipantCreateParticipantRequestAmdStatusCallbackMethodEnum = "DELETE"
)

func (e CreateParticipantCreateParticipantRequestAmdStatusCallbackMethodEnum) ToPointer() *CreateParticipantCreateParticipantRequestAmdStatusCallbackMethodEnum {
	return &e
}

func (e *CreateParticipantCreateParticipantRequestAmdStatusCallbackMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HEAD":
		fallthrough
	case "GET":
		fallthrough
	case "POST":
		fallthrough
	case "PATCH":
		fallthrough
	case "PUT":
		fallthrough
	case "DELETE":
		*e = CreateParticipantCreateParticipantRequestAmdStatusCallbackMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateParticipantCreateParticipantRequestAmdStatusCallbackMethodEnum: %v", v)
	}
}

// CreateParticipantCreateParticipantRequestConferenceRecordingStatusCallbackMethodEnum - The HTTP method we should use to call `conference_recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
type CreateParticipantCreateParticipantRequestConferenceRecordingStatusCallbackMethodEnum string

const (
	CreateParticipantCreateParticipantRequestConferenceRecordingStatusCallbackMethodEnumHead   CreateParticipantCreateParticipantRequestConferenceRecordingStatusCallbackMethodEnum = "HEAD"
	CreateParticipantCreateParticipantRequestConferenceRecordingStatusCallbackMethodEnumGet    CreateParticipantCreateParticipantRequestConferenceRecordingStatusCallbackMethodEnum = "GET"
	CreateParticipantCreateParticipantRequestConferenceRecordingStatusCallbackMethodEnumPost   CreateParticipantCreateParticipantRequestConferenceRecordingStatusCallbackMethodEnum = "POST"
	CreateParticipantCreateParticipantRequestConferenceRecordingStatusCallbackMethodEnumPatch  CreateParticipantCreateParticipantRequestConferenceRecordingStatusCallbackMethodEnum = "PATCH"
	CreateParticipantCreateParticipantRequestConferenceRecordingStatusCallbackMethodEnumPut    CreateParticipantCreateParticipantRequestConferenceRecordingStatusCallbackMethodEnum = "PUT"
	CreateParticipantCreateParticipantRequestConferenceRecordingStatusCallbackMethodEnumDelete CreateParticipantCreateParticipantRequestConferenceRecordingStatusCallbackMethodEnum = "DELETE"
)

func (e CreateParticipantCreateParticipantRequestConferenceRecordingStatusCallbackMethodEnum) ToPointer() *CreateParticipantCreateParticipantRequestConferenceRecordingStatusCallbackMethodEnum {
	return &e
}

func (e *CreateParticipantCreateParticipantRequestConferenceRecordingStatusCallbackMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HEAD":
		fallthrough
	case "GET":
		fallthrough
	case "POST":
		fallthrough
	case "PATCH":
		fallthrough
	case "PUT":
		fallthrough
	case "DELETE":
		*e = CreateParticipantCreateParticipantRequestConferenceRecordingStatusCallbackMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateParticipantCreateParticipantRequestConferenceRecordingStatusCallbackMethodEnum: %v", v)
	}
}

// CreateParticipantCreateParticipantRequestConferenceStatusCallbackMethodEnum - The HTTP method we should use to call `conference_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
type CreateParticipantCreateParticipantRequestConferenceStatusCallbackMethodEnum string

const (
	CreateParticipantCreateParticipantRequestConferenceStatusCallbackMethodEnumHead   CreateParticipantCreateParticipantRequestConferenceStatusCallbackMethodEnum = "HEAD"
	CreateParticipantCreateParticipantRequestConferenceStatusCallbackMethodEnumGet    CreateParticipantCreateParticipantRequestConferenceStatusCallbackMethodEnum = "GET"
	CreateParticipantCreateParticipantRequestConferenceStatusCallbackMethodEnumPost   CreateParticipantCreateParticipantRequestConferenceStatusCallbackMethodEnum = "POST"
	CreateParticipantCreateParticipantRequestConferenceStatusCallbackMethodEnumPatch  CreateParticipantCreateParticipantRequestConferenceStatusCallbackMethodEnum = "PATCH"
	CreateParticipantCreateParticipantRequestConferenceStatusCallbackMethodEnumPut    CreateParticipantCreateParticipantRequestConferenceStatusCallbackMethodEnum = "PUT"
	CreateParticipantCreateParticipantRequestConferenceStatusCallbackMethodEnumDelete CreateParticipantCreateParticipantRequestConferenceStatusCallbackMethodEnum = "DELETE"
)

func (e CreateParticipantCreateParticipantRequestConferenceStatusCallbackMethodEnum) ToPointer() *CreateParticipantCreateParticipantRequestConferenceStatusCallbackMethodEnum {
	return &e
}

func (e *CreateParticipantCreateParticipantRequestConferenceStatusCallbackMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HEAD":
		fallthrough
	case "GET":
		fallthrough
	case "POST":
		fallthrough
	case "PATCH":
		fallthrough
	case "PUT":
		fallthrough
	case "DELETE":
		*e = CreateParticipantCreateParticipantRequestConferenceStatusCallbackMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateParticipantCreateParticipantRequestConferenceStatusCallbackMethodEnum: %v", v)
	}
}

// CreateParticipantCreateParticipantRequestRecordingStatusCallbackMethodEnum - The HTTP method we should use when we call `recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
type CreateParticipantCreateParticipantRequestRecordingStatusCallbackMethodEnum string

const (
	CreateParticipantCreateParticipantRequestRecordingStatusCallbackMethodEnumHead   CreateParticipantCreateParticipantRequestRecordingStatusCallbackMethodEnum = "HEAD"
	CreateParticipantCreateParticipantRequestRecordingStatusCallbackMethodEnumGet    CreateParticipantCreateParticipantRequestRecordingStatusCallbackMethodEnum = "GET"
	CreateParticipantCreateParticipantRequestRecordingStatusCallbackMethodEnumPost   CreateParticipantCreateParticipantRequestRecordingStatusCallbackMethodEnum = "POST"
	CreateParticipantCreateParticipantRequestRecordingStatusCallbackMethodEnumPatch  CreateParticipantCreateParticipantRequestRecordingStatusCallbackMethodEnum = "PATCH"
	CreateParticipantCreateParticipantRequestRecordingStatusCallbackMethodEnumPut    CreateParticipantCreateParticipantRequestRecordingStatusCallbackMethodEnum = "PUT"
	CreateParticipantCreateParticipantRequestRecordingStatusCallbackMethodEnumDelete CreateParticipantCreateParticipantRequestRecordingStatusCallbackMethodEnum = "DELETE"
)

func (e CreateParticipantCreateParticipantRequestRecordingStatusCallbackMethodEnum) ToPointer() *CreateParticipantCreateParticipantRequestRecordingStatusCallbackMethodEnum {
	return &e
}

func (e *CreateParticipantCreateParticipantRequestRecordingStatusCallbackMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HEAD":
		fallthrough
	case "GET":
		fallthrough
	case "POST":
		fallthrough
	case "PATCH":
		fallthrough
	case "PUT":
		fallthrough
	case "DELETE":
		*e = CreateParticipantCreateParticipantRequestRecordingStatusCallbackMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateParticipantCreateParticipantRequestRecordingStatusCallbackMethodEnum: %v", v)
	}
}

// CreateParticipantCreateParticipantRequestStatusCallbackMethodEnum - The HTTP method we should use to call `status_callback`. Can be: `GET` and `POST` and defaults to `POST`.
type CreateParticipantCreateParticipantRequestStatusCallbackMethodEnum string

const (
	CreateParticipantCreateParticipantRequestStatusCallbackMethodEnumHead   CreateParticipantCreateParticipantRequestStatusCallbackMethodEnum = "HEAD"
	CreateParticipantCreateParticipantRequestStatusCallbackMethodEnumGet    CreateParticipantCreateParticipantRequestStatusCallbackMethodEnum = "GET"
	CreateParticipantCreateParticipantRequestStatusCallbackMethodEnumPost   CreateParticipantCreateParticipantRequestStatusCallbackMethodEnum = "POST"
	CreateParticipantCreateParticipantRequestStatusCallbackMethodEnumPatch  CreateParticipantCreateParticipantRequestStatusCallbackMethodEnum = "PATCH"
	CreateParticipantCreateParticipantRequestStatusCallbackMethodEnumPut    CreateParticipantCreateParticipantRequestStatusCallbackMethodEnum = "PUT"
	CreateParticipantCreateParticipantRequestStatusCallbackMethodEnumDelete CreateParticipantCreateParticipantRequestStatusCallbackMethodEnum = "DELETE"
)

func (e CreateParticipantCreateParticipantRequestStatusCallbackMethodEnum) ToPointer() *CreateParticipantCreateParticipantRequestStatusCallbackMethodEnum {
	return &e
}

func (e *CreateParticipantCreateParticipantRequestStatusCallbackMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HEAD":
		fallthrough
	case "GET":
		fallthrough
	case "POST":
		fallthrough
	case "PATCH":
		fallthrough
	case "PUT":
		fallthrough
	case "DELETE":
		*e = CreateParticipantCreateParticipantRequestStatusCallbackMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateParticipantCreateParticipantRequestStatusCallbackMethodEnum: %v", v)
	}
}

// CreateParticipantCreateParticipantRequestWaitMethodEnum - The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file.
type CreateParticipantCreateParticipantRequestWaitMethodEnum string

const (
	CreateParticipantCreateParticipantRequestWaitMethodEnumHead   CreateParticipantCreateParticipantRequestWaitMethodEnum = "HEAD"
	CreateParticipantCreateParticipantRequestWaitMethodEnumGet    CreateParticipantCreateParticipantRequestWaitMethodEnum = "GET"
	CreateParticipantCreateParticipantRequestWaitMethodEnumPost   CreateParticipantCreateParticipantRequestWaitMethodEnum = "POST"
	CreateParticipantCreateParticipantRequestWaitMethodEnumPatch  CreateParticipantCreateParticipantRequestWaitMethodEnum = "PATCH"
	CreateParticipantCreateParticipantRequestWaitMethodEnumPut    CreateParticipantCreateParticipantRequestWaitMethodEnum = "PUT"
	CreateParticipantCreateParticipantRequestWaitMethodEnumDelete CreateParticipantCreateParticipantRequestWaitMethodEnum = "DELETE"
)

func (e CreateParticipantCreateParticipantRequestWaitMethodEnum) ToPointer() *CreateParticipantCreateParticipantRequestWaitMethodEnum {
	return &e
}

func (e *CreateParticipantCreateParticipantRequestWaitMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HEAD":
		fallthrough
	case "GET":
		fallthrough
	case "POST":
		fallthrough
	case "PATCH":
		fallthrough
	case "PUT":
		fallthrough
	case "DELETE":
		*e = CreateParticipantCreateParticipantRequestWaitMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateParticipantCreateParticipantRequestWaitMethodEnum: %v", v)
	}
}

type CreateParticipantCreateParticipantRequest struct {
	// The URL that we should call using the `amd_status_callback_method` to notify customer application whether the call was answered by human, machine or fax.
	AmdStatusCallback *string `form:"name=AmdStatusCallback"`
	// The HTTP method we should use when calling the `amd_status_callback` URL. Can be: `GET` or `POST` and the default is `POST`.
	AmdStatusCallbackMethod *CreateParticipantCreateParticipantRequestAmdStatusCallbackMethodEnum `form:"name=AmdStatusCallbackMethod"`
	// Whether to play a notification beep to the conference when the participant joins. Can be: `true`, `false`, `onEnter`, or `onExit`. The default value is `true`.
	Beep *string `form:"name=Beep"`
	// The SID of a BYOC (Bring Your Own Carrier) trunk to route this call with. Note that `byoc` is only meaningful when `to` is a phone number; it will otherwise be ignored. (Beta)
	Byoc *string `form:"name=Byoc"`
	// The Reason for the outgoing call. Use it to specify the purpose of the call that is presented on the called party's phone. (Branded Calls Beta)
	CallReason *string `form:"name=CallReason"`
	// The SID of the participant who is being `coached`. The participant being coached is the only participant who can hear the participant who is `coaching`.
	CallSidToCoach *string `form:"name=CallSidToCoach"`
	// The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted `client:name`. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `callerId` must also be a phone number. If `to` is sip address, this value of `callerId` should be a username portion to be used to populate the From header that is passed to the SIP endpoint.
	CallerID *string `form:"name=CallerId"`
	// Whether the participant is coaching another call. Can be: `true` or `false`. If not present, defaults to `false` unless `call_sid_to_coach` is defined. If `true`, `call_sid_to_coach` must be defined.
	Coaching *bool `form:"name=Coaching"`
	// Whether to record the conference the participant is joining. Can be: `true`, `false`, `record-from-start`, and `do-not-record`. The default value is `false`.
	ConferenceRecord *string `form:"name=ConferenceRecord"`
	// The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available.
	ConferenceRecordingStatusCallback *string `form:"name=ConferenceRecordingStatusCallback"`
	// The conference recording state changes that generate a call to `conference_recording_status_callback`. Can be: `in-progress`, `completed`, `failed`, and `absent`. Separate multiple values with a space, ex: `'in-progress completed failed'`
	ConferenceRecordingStatusCallbackEvent []string `form:"name=ConferenceRecordingStatusCallbackEvent"`
	// The HTTP method we should use to call `conference_recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
	ConferenceRecordingStatusCallbackMethod *CreateParticipantCreateParticipantRequestConferenceRecordingStatusCallbackMethodEnum `form:"name=ConferenceRecordingStatusCallbackMethod"`
	// The URL we should call using the `conference_status_callback_method` when the conference events in `conference_status_callback_event` occur. Only the value set by the first participant to join the conference is used. Subsequent `conference_status_callback` values are ignored.
	ConferenceStatusCallback *string `form:"name=ConferenceStatusCallback"`
	// The conference state changes that should generate a call to `conference_status_callback`. Can be: `start`, `end`, `join`, `leave`, `mute`, `hold`, `modify`, `speaker`, and `announcement`. Separate multiple values with a space. Defaults to `start end`.
	ConferenceStatusCallbackEvent []string `form:"name=ConferenceStatusCallbackEvent"`
	// The HTTP method we should use to call `conference_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
	ConferenceStatusCallbackMethod *CreateParticipantCreateParticipantRequestConferenceStatusCallbackMethodEnum `form:"name=ConferenceStatusCallbackMethod"`
	// Whether to trim leading and trailing silence from your recorded conference audio files. Can be: `trim-silence` or `do-not-trim` and defaults to `trim-silence`.
	ConferenceTrim *string `form:"name=ConferenceTrim"`
	// Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. Can be: `true` or `false` and defaults to `true`.
	EarlyMedia *bool `form:"name=EarlyMedia"`
	// Whether to end the conference when the participant leaves. Can be: `true` or `false` and defaults to `false`.
	EndConferenceOnExit *bool `form:"name=EndConferenceOnExit"`
	// The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted `client:name`. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `from` must also be a phone number. If `to` is sip address, this value of `from` should be a username portion to be used to populate the P-Asserted-Identity header that is passed to the SIP endpoint.
	From string `form:"name=From"`
	// Jitter buffer size for the connecting participant. Twilio will use this setting to apply Jitter Buffer before participant's audio is mixed into the conference. Can be: `off`, `small`, `medium`, and `large`. Default to `large`.
	JitterBufferSize *string `form:"name=JitterBufferSize"`
	// A label for this participant. If one is supplied, it may subsequently be used to fetch, update or delete the participant.
	Label *string `form:"name=Label"`
	// Whether to detect if a human, answering machine, or fax has picked up the call. Can be: `Enable` or `DetectMessageEnd`. Use `Enable` if you would like us to return `AnsweredBy` as soon as the called party is identified. Use `DetectMessageEnd`, if you would like to leave a message on an answering machine. If `send_digits` is provided, this parameter is ignored. For more information, see [Answering Machine Detection](https://www.twilio.com/docs/voice/answering-machine-detection).
	MachineDetection *string `form:"name=MachineDetection"`
	// The number of milliseconds of initial silence after which an `unknown` AnsweredBy result will be returned. Possible Values: 2000-10000. Default: 5000.
	MachineDetectionSilenceTimeout *int64 `form:"name=MachineDetectionSilenceTimeout"`
	// The number of milliseconds of silence after speech activity at which point the speech activity is considered complete. Possible Values: 500-5000. Default: 1200.
	MachineDetectionSpeechEndThreshold *int64 `form:"name=MachineDetectionSpeechEndThreshold"`
	// The number of milliseconds that is used as the measuring stick for the length of the speech activity, where durations lower than this value will be interpreted as a human and longer than this value as a machine. Possible Values: 1000-6000. Default: 2400.
	MachineDetectionSpeechThreshold *int64 `form:"name=MachineDetectionSpeechThreshold"`
	// The number of seconds that we should attempt to detect an answering machine before timing out and sending a voice request with `AnsweredBy` of `unknown`. The default timeout is 30 seconds.
	MachineDetectionTimeout *int64 `form:"name=MachineDetectionTimeout"`
	// The maximum number of participants in the conference. Can be a positive integer from `2` to `250`. The default value is `250`.
	MaxParticipants *int64 `form:"name=MaxParticipants"`
	// Whether the agent is muted in the conference. Can be `true` or `false` and the default is `false`.
	Muted *bool `form:"name=Muted"`
	// Whether to record the participant and their conferences, including the time between conferences. Can be `true` or `false` and the default is `false`.
	Record *bool `form:"name=Record"`
	// The recording channels for the final recording. Can be: `mono` or `dual` and the default is `mono`.
	RecordingChannels *string `form:"name=RecordingChannels"`
	// The URL that we should call using the `recording_status_callback_method` when the recording status changes.
	RecordingStatusCallback *string `form:"name=RecordingStatusCallback"`
	// The recording state changes that should generate a call to `recording_status_callback`. Can be: `started`, `in-progress`, `paused`, `resumed`, `stopped`, `completed`, `failed`, and `absent`. Separate multiple values with a space, ex: `'in-progress completed failed'`.
	RecordingStatusCallbackEvent []string `form:"name=RecordingStatusCallbackEvent"`
	// The HTTP method we should use when we call `recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
	RecordingStatusCallbackMethod *CreateParticipantCreateParticipantRequestRecordingStatusCallbackMethodEnum `form:"name=RecordingStatusCallbackMethod"`
	// The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is sent from Twilio. `both` records the audio that is received and sent by Twilio.
	RecordingTrack *string `form:"name=RecordingTrack"`
	// The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:`us1`, `ie1`, `de1`, `sg1`, `br1`, `au1`, or `jp1`.
	Region *string `form:"name=Region"`
	// The SIP password for authentication.
	SipAuthPassword *string `form:"name=SipAuthPassword"`
	// The SIP username used for authentication.
	SipAuthUsername *string `form:"name=SipAuthUsername"`
	// Whether to start the conference when the participant joins, if it has not already started. Can be: `true` or `false` and the default is `true`. If `false` and the conference has not started, the participant is muted and hears background music until another participant starts the conference.
	StartConferenceOnEnter *bool `form:"name=StartConferenceOnEnter"`
	// The URL we should call using the `status_callback_method` to send status information to your application.
	StatusCallback *string `form:"name=StatusCallback"`
	// The conference state changes that should generate a call to `status_callback`. Can be: `initiated`, `ringing`, `answered`, and `completed`. Separate multiple values with a space. The default value is `completed`.
	StatusCallbackEvent []string `form:"name=StatusCallbackEvent"`
	// The HTTP method we should use to call `status_callback`. Can be: `GET` and `POST` and defaults to `POST`.
	StatusCallbackMethod *CreateParticipantCreateParticipantRequestStatusCallbackMethodEnum `form:"name=StatusCallbackMethod"`
	// The maximum duration of the call in seconds. Constraints depend on account and configuration.
	TimeLimit *int64 `form:"name=TimeLimit"`
	// The number of seconds that we should allow the phone to ring before assuming there is no answer. Can be an integer between `5` and `600`, inclusive. The default value is `60`. We always add a 5-second timeout buffer to outgoing calls, so  value of 10 would result in an actual timeout that was closer to 15 seconds.
	Timeout *int64 `form:"name=Timeout"`
	// The phone number, SIP address, or Client identifier that received this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). SIP addresses are formatted as `sip:name@company.com`. Client identifiers are formatted `client:name`. [Custom parameters](https://www.twilio.com/docs/voice/api/conference-participant-resource#custom-parameters) may also be specified.
	To string `form:"name=To"`
	// The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file.
	WaitMethod *CreateParticipantCreateParticipantRequestWaitMethodEnum `form:"name=WaitMethod"`
	// The URL we should call using the `wait_method` for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).
	WaitURL *string `form:"name=WaitUrl"`
}

type CreateParticipantRequest struct {
	// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
	AccountSid string `pathParam:"style=simple,explode=false,name=AccountSid"`
	// The SID of the participant's conference.
	ConferenceSid string                                     `pathParam:"style=simple,explode=false,name=ConferenceSid"`
	RequestBody   *CreateParticipantCreateParticipantRequest `request:"mediaType=application/x-www-form-urlencoded"`
}

type CreateParticipantResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Created
	APIV2010AccountConferenceParticipant *shared.APIV2010AccountConferenceParticipant
}
