<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a new, empty script project with no script files and a base manifest file.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsCreateResponse
     */
	public function scriptProjectsCreate(
        \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createProjectRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ScriptProjectsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->project = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Project', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a deployment of an Apps Script project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsCreateResponse
     */
	public function scriptProjectsDeploymentsCreate(
        \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{scriptId}/deployments', \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deploymentConfig", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deployment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Deployment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a deployment of an Apps Script project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsDeleteResponse
     */
	public function scriptProjectsDeploymentsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{scriptId}/deployments/{deploymentId}', \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a deployment of an Apps Script project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsGetResponse
     */
	public function scriptProjectsDeploymentsGet(
        \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{scriptId}/deployments/{deploymentId}', \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deployment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Deployment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the deployments of an Apps Script project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsListResponse
     */
	public function scriptProjectsDeploymentsList(
        \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{scriptId}/deployments', \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDeploymentsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListDeploymentsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a deployment of an Apps Script project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsUpdateResponse
     */
	public function scriptProjectsDeploymentsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{scriptId}/deployments/{deploymentId}', \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateDeploymentRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsDeploymentsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deployment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Deployment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a script project's metadata.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsGetResponse
     */
	public function scriptProjectsGet(
        \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{scriptId}', \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ScriptProjectsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->project = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Project', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the content of the script project, including the code source and metadata for each script file.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsGetContentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsGetContentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsGetContentResponse
     */
	public function scriptProjectsGetContent(
        \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsGetContentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsGetContentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsGetContentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{scriptId}/content', \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsGetContentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ScriptProjectsGetContentRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsGetContentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->content = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Content', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get metrics data for scripts, such as number of executions and active users.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsGetMetricsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsGetMetricsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsGetMetricsResponse
     */
	public function scriptProjectsGetMetrics(
        \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsGetMetricsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsGetMetricsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsGetMetricsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{scriptId}/metrics', \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsGetMetricsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ScriptProjectsGetMetricsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsGetMetricsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->metrics = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Metrics', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the content of the specified script project. This content is stored as the HEAD version, and is used when the script is executed as a trigger, in the script editor, in add-on preview mode, or as a web app or Apps Script API in development mode. This clears all the existing files in the project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsUpdateContentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsUpdateContentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsUpdateContentResponse
     */
	public function scriptProjectsUpdateContent(
        \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsUpdateContentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsUpdateContentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsUpdateContentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{scriptId}/content', \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsUpdateContentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "content", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ScriptProjectsUpdateContentRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsUpdateContentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->content = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Content', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new immutable version using the current code, with a unique version number.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsVersionsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsVersionsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsVersionsCreateResponse
     */
	public function scriptProjectsVersionsCreate(
        \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsVersionsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsVersionsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsVersionsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{scriptId}/versions', \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsVersionsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "version", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ScriptProjectsVersionsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsVersionsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->version = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Version', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a version of a script project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsVersionsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsVersionsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsVersionsGetResponse
     */
	public function scriptProjectsVersionsGet(
        \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsVersionsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsVersionsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsVersionsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{scriptId}/versions/{versionNumber}', \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsVersionsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ScriptProjectsVersionsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsVersionsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->version = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Version', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the versions of a script project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsVersionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsVersionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsVersionsListResponse
     */
	public function scriptProjectsVersionsList(
        \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsVersionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsVersionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsVersionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{scriptId}/versions', \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsVersionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ScriptProjectsVersionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ScriptProjectsVersionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listVersionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListVersionsResponse', 'json');
            }
        }

        return $response;
    }
}