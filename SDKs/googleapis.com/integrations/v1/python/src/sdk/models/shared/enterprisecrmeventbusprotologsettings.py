"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import enterprisecrmlogginggwsfieldlimits as shared_enterprisecrmlogginggwsfieldlimits
from ..shared import enterprisecrmlogginggwssanitizeoptions as shared_enterprisecrmlogginggwssanitizeoptions
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class EnterpriseCrmEventbusProtoLogSettingsSeedPeriodEnum(str, Enum):
    SEED_PERIOD_UNSPECIFIED = 'SEED_PERIOD_UNSPECIFIED'
    DAY = 'DAY'
    WEEK = 'WEEK'
    MONTH = 'MONTH'

class EnterpriseCrmEventbusProtoLogSettingsSeedScopeEnum(str, Enum):
    SEED_SCOPE_UNSPECIFIED = 'SEED_SCOPE_UNSPECIFIED'
    EVENT_NAME = 'EVENT_NAME'
    TIME_PERIOD = 'TIME_PERIOD'
    PARAM_NAME = 'PARAM_NAME'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EnterpriseCrmEventbusProtoLogSettings:
    r"""The LogSettings define the logging attributes for an event property. These attributes are used to map the property to the parameter in the log proto. Also used to define scrubbing/truncation behavior and PII information."""
    
    log_field_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logFieldName'), 'exclude': lambda f: f is None }})
    r"""The name of corresponding logging field of the event property. If omitted, assumes the same name as the event property key."""  
    sanitize_options: Optional[shared_enterprisecrmlogginggwssanitizeoptions.EnterpriseCrmLoggingGwsSanitizeOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sanitizeOptions'), 'exclude': lambda f: f is None }})
    r"""Identifies whether a field contains, or may contain, PII or sensitive data, and how to sanitize the field if it does. If a field's privacy type cannot be determined then it is sanitized (e.g., scrubbed). The specific sanitizer implementation is determined by run-time configuration and environment options (e.g., prod vs. qa). next_id: 5"""  
    seed_period: Optional[EnterpriseCrmEventbusProtoLogSettingsSeedPeriodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('seedPeriod'), 'exclude': lambda f: f is None }})  
    seed_scope: Optional[EnterpriseCrmEventbusProtoLogSettingsSeedScopeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('seedScope'), 'exclude': lambda f: f is None }})  
    shortening_limits: Optional[shared_enterprisecrmlogginggwsfieldlimits.EnterpriseCrmLoggingGwsFieldLimits] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shorteningLimits'), 'exclude': lambda f: f is None }})
    r"""Describes string and array limits when writing to logs. When a limit is exceeded the *shortener_type* describes how to shorten the field. next_id: 6"""  
    