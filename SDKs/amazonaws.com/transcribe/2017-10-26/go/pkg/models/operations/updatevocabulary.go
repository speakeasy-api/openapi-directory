// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UpdateVocabularyXAmzTargetEnum
type UpdateVocabularyXAmzTargetEnum string

const (
	UpdateVocabularyXAmzTargetEnumTranscribeUpdateVocabulary UpdateVocabularyXAmzTargetEnum = "Transcribe.UpdateVocabulary"
)

func (e *UpdateVocabularyXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Transcribe.UpdateVocabulary":
		*e = UpdateVocabularyXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateVocabularyXAmzTargetEnum: %s", s)
	}
}

type UpdateVocabularyRequest struct {
	UpdateVocabularyRequest shared.UpdateVocabularyRequest `request:"mediaType=application/json"`
	XAmzAlgorithm           *string                        `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256       *string                        `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential          *string                        `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                *string                        `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken       *string                        `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature           *string                        `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders       *string                        `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget              UpdateVocabularyXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type UpdateVocabularyResponse struct {
	// BadRequestException
	BadRequestException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// InternalFailureException
	InternalFailureException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// NotFoundException
	NotFoundException interface{}
	StatusCode        int
	RawResponse       *http.Response
	// Success
	UpdateVocabularyResponse *shared.UpdateVocabularyResponse
}
