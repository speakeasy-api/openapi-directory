// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ManagedCertificateStatusEnum - Status of certificate management. Refers to the most recent certificate acquisition or renewal attempt.@OutputOnly
type ManagedCertificateStatusEnum string

const (
	ManagedCertificateStatusEnumManagementStatusUnspecified ManagedCertificateStatusEnum = "MANAGEMENT_STATUS_UNSPECIFIED"
	ManagedCertificateStatusEnumOk                          ManagedCertificateStatusEnum = "OK"
	ManagedCertificateStatusEnumPending                     ManagedCertificateStatusEnum = "PENDING"
	ManagedCertificateStatusEnumFailedRetryingNotVisible    ManagedCertificateStatusEnum = "FAILED_RETRYING_NOT_VISIBLE"
	ManagedCertificateStatusEnumFailedPermanent             ManagedCertificateStatusEnum = "FAILED_PERMANENT"
	ManagedCertificateStatusEnumFailedRetryingCaaForbidden  ManagedCertificateStatusEnum = "FAILED_RETRYING_CAA_FORBIDDEN"
	ManagedCertificateStatusEnumFailedRetryingCaaChecking   ManagedCertificateStatusEnum = "FAILED_RETRYING_CAA_CHECKING"
)

func (e ManagedCertificateStatusEnum) ToPointer() *ManagedCertificateStatusEnum {
	return &e
}

func (e *ManagedCertificateStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MANAGEMENT_STATUS_UNSPECIFIED":
		fallthrough
	case "OK":
		fallthrough
	case "PENDING":
		fallthrough
	case "FAILED_RETRYING_NOT_VISIBLE":
		fallthrough
	case "FAILED_PERMANENT":
		fallthrough
	case "FAILED_RETRYING_CAA_FORBIDDEN":
		fallthrough
	case "FAILED_RETRYING_CAA_CHECKING":
		*e = ManagedCertificateStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ManagedCertificateStatusEnum: %v", v)
	}
}

// ManagedCertificate - A certificate managed by App Engine.
type ManagedCertificate struct {
	// Time at which the certificate was last renewed. The renewal process is fully managed. Certificate renewal will automatically occur before the certificate expires. Renewal errors can be tracked via ManagementStatus.@OutputOnly
	LastRenewalTime *string `json:"lastRenewalTime,omitempty"`
	// Status of certificate management. Refers to the most recent certificate acquisition or renewal attempt.@OutputOnly
	Status *ManagedCertificateStatusEnum `json:"status,omitempty"`
}
