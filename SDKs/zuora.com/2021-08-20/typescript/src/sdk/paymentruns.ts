/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class PaymentRuns {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete a payment run
   *
   * @remarks
   * Deletes a payment run. Only payment runs with the Canceled or Error status can be deleted.
   *
   */
  deletePaymentRun(
    req: operations.DELETEPaymentRunRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DELETEPaymentRunResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DELETEPaymentRunRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/payment-runs/{paymentRunId}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DELETEPaymentRunResponse =
        new operations.DELETEPaymentRunResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.commonResponseType = utils.objectToClass(
              httpRes?.data,
              shared.CommonResponseType
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve a payment run
   *
   * @remarks
   * Retrives the information about a specific payment run.
   *
   */
  getPaymentRun(
    req: operations.GETPaymentRunRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETPaymentRunResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETPaymentRunRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/payment-runs/{paymentRunId}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETPaymentRunResponse =
        new operations.GETPaymentRunResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getPaymentRunType = utils.objectToClass(
              httpRes?.data,
              shared.GETPaymentRunType
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve payment run data
   *
   * @remarks
   * Retrieves payment run data and the processing result with details, if the `data` field was specified in the Create payment run operation.
   *
   *
   */
  getPaymentRunData(
    req: operations.GETPaymentRunDataRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETPaymentRunDataResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETPaymentRunDataRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/payment-runs/{paymentRunId}/data",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETPaymentRunDataResponse =
        new operations.GETPaymentRunDataResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getPaymentRunDataArrayResponse = utils.objectToClass(
              httpRes?.data,
              shared.GETPaymentRunDataArrayResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve a payment run summary
   *
   * @remarks
   * Retrives the summary of a payment run.
   *
   */
  getPaymentRunSummary(
    req: operations.GETPaymentRunSummaryRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETPaymentRunSummaryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETPaymentRunSummaryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/payment-runs/{paymentRunId}/summary",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETPaymentRunSummaryResponse =
        new operations.GETPaymentRunSummaryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getPaymentRunSummaryResponse = utils.objectToClass(
              httpRes?.data,
              shared.GETPaymentRunSummaryResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List payment runs
   *
   * @remarks
   * Retrieves the information about all payment runs. You can define filterable fields to restrict the data returned in the response.
   *
   * ### Filtering
   *
   * You can use query parameters to restrict the data returned in the response. Each query parameter corresponds to one field in the response body.
   *
   * If the value of a filterable field is string, you can set the corresponding query parameter to `null` when filtering. Then, you can get the response data with this field value being `null`.
   *
   * Examples:
   *
   * - /v1/payment-runs?status=Processed
   *
   * - /v1/payment-runs?targetDate=2017-10-10&status=Pending
   *
   * - /v1/payment-runs?status=Completed&sort=+updatedDate
   *
   */
  getPaymentRuns(
    req: operations.GETPaymentRunsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETPaymentRunsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETPaymentRunsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/payment-runs";

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETPaymentRunsResponse =
        new operations.GETPaymentRunsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getPaymentRunCollectionType = utils.objectToClass(
              httpRes?.data,
              shared.GETPaymentRunCollectionType
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a payment run
   *
   * @remarks
   * Creates a payment run. You can create a payment run to be executed immediately after it is created, or a scheduled payment run to be executed in future.
   *
   * To filter the payments to be collected for a payment run, you can use either of the following methods but not both:
   *
   *   - Use the `accountId`, `batch`, `billCycleDay`, `currency`, `paymentGatewayId`, and `billingRunId` fields to define the billing documents to be collected.
   *   - Use the `data` field to specify the records of accounts and billing documents to be collected, in a more flexible manner.
   *
   * If no filter criteria are specified in the request body, the payment run collects payments for all accounts.
   *
   */
  postPaymentRun(
    req: operations.POSTPaymentRunRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.POSTPaymentRunResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.POSTPaymentRunRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/payment-runs";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "postPaymentRunRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.POSTPaymentRunResponse =
        new operations.POSTPaymentRunResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.getPaymentRunType = utils.objectToClass(
              httpRes?.data,
              shared.GETPaymentRunType
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update a payment run
   *
   * @remarks
   * Updates the information about an unexecuted payment run. Only pending payment runs can be updated.
   *
   * If none of the **accountId**, **batch**, **billCycleDay**, **currency**, **paymentGatewayId**, and **billingRunId** fields is specified in the request body, the corresponding payment run collects payments for all accounts.
   *
   */
  putPaymentRun(
    req: operations.PUTPaymentRunRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PUTPaymentRunResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PUTPaymentRunRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/payment-runs/{paymentRunId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "putPaymentRunRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PUTPaymentRunResponse =
        new operations.PUTPaymentRunResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.getPaymentRunType = utils.objectToClass(
              httpRes?.data,
              shared.GETPaymentRunType
            );
          }
          break;
      }

      return res;
    });
  }
}
