// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
)

type PostSpacesSpaceIDFoldersIDContractualDocumentsJSONSecurity struct {
	GmaAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2AccountingWorkbookEnum string

const (
	PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2AccountingWorkbookEnumCustomer    PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2AccountingWorkbookEnum = "customer"
	PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2AccountingWorkbookEnumProvider    PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2AccountingWorkbookEnum = "provider"
	PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2AccountingWorkbookEnumBank        PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2AccountingWorkbookEnum = "bank"
	PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2AccountingWorkbookEnumCashWoucher PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2AccountingWorkbookEnum = "cashWoucher"
	PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2AccountingWorkbookEnumFiscal      PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2AccountingWorkbookEnum = "fiscal"
	PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2AccountingWorkbookEnumInsurance   PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2AccountingWorkbookEnum = "insurance"
	PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2AccountingWorkbookEnumSocial      PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2AccountingWorkbookEnum = "social"
	PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2AccountingWorkbookEnumOther       PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2AccountingWorkbookEnum = "other"
	PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2AccountingWorkbookEnumPermanent   PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2AccountingWorkbookEnum = "permanent"
)

func (e *PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2AccountingWorkbookEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "customer":
		fallthrough
	case "provider":
		fallthrough
	case "bank":
		fallthrough
	case "cashWoucher":
		fallthrough
	case "fiscal":
		fallthrough
	case "insurance":
		fallthrough
	case "social":
		fallthrough
	case "other":
		fallthrough
	case "permanent":
		*e = PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2AccountingWorkbookEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2AccountingWorkbookEnum: %s", s)
	}
}

type PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2Accounting struct {
	AccountedOn *string                                                                               `json:"AccountedOn,omitempty"`
	Workbook    *PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2AccountingWorkbookEnum `json:"Workbook,omitempty"`
	YearMonth   *string                                                                               `json:"YearMonth,omitempty"`
}

type PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2File struct {
	Content64Encoded *string `json:"Content64Encoded,omitempty"`
	Name             *string `json:"Name,omitempty"`
}

type PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2TypeEnum string

const (
	PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2TypeEnumContract         PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2TypeEnum = "contract"
	PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2TypeEnumEngagementLetter PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2TypeEnum = "engagement-letter"
	PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2TypeEnumAmendment        PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2TypeEnum = "amendment"
	PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2TypeEnumPurchaseOrder    PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2TypeEnum = "purchase-order"
	PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2TypeEnumDeliveryOrder    PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2TypeEnum = "delivery-order"
	PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2TypeEnumQuotation        PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2TypeEnum = "quotation"
	PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2TypeEnumOther            PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2TypeEnum = "other"
)

func (e *PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "contract":
		fallthrough
	case "engagement-letter":
		fallthrough
	case "amendment":
		fallthrough
	case "purchase-order":
		fallthrough
	case "delivery-order":
		fallthrough
	case "quotation":
		fallthrough
	case "other":
		*e = PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2TypeEnum: %s", s)
	}
}

type PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2 struct {
	Accounting  *PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2Accounting `json:"Accounting,omitempty"`
	Amount      *string                                                                   `json:"Amount,omitempty"`
	Author      *string                                                                   `json:"Author,omitempty"`
	Code        *string                                                                   `json:"Code,omitempty"`
	Comment     *string                                                                   `json:"Comment,omitempty"`
	Date        *string                                                                   `json:"Date,omitempty"`
	Designation *string                                                                   `json:"Designation,omitempty"`
	File        PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2File        `json:"File"`
	Reference   *string                                                                   `json:"Reference,omitempty"`
	StartDate   *string                                                                   `json:"StartDate,omitempty"`
	Title       string                                                                    `json:"Title"`
	Type        *PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2TypeEnum   `json:"Type,omitempty"`
}

type PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON1TypeEnum string

const (
	PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON1TypeEnumContract         PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON1TypeEnum = "contract"
	PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON1TypeEnumEngagementLetter PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON1TypeEnum = "engagement-letter"
	PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON1TypeEnumAmendment        PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON1TypeEnum = "amendment"
	PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON1TypeEnumPurchaseOrder    PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON1TypeEnum = "purchase-order"
	PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON1TypeEnumDeliveryOrder    PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON1TypeEnum = "delivery-order"
	PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON1TypeEnumQuotation        PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON1TypeEnum = "quotation"
	PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON1TypeEnumOther            PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON1TypeEnum = "other"
)

func (e *PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON1TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "contract":
		fallthrough
	case "engagement-letter":
		fallthrough
	case "amendment":
		fallthrough
	case "purchase-order":
		fallthrough
	case "delivery-order":
		fallthrough
	case "quotation":
		fallthrough
	case "other":
		*e = PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON1TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON1TypeEnum: %s", s)
	}
}

type PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON1 struct {
	Amount      *string                                                                 `json:"Amount,omitempty"`
	Designation *string                                                                 `json:"Designation,omitempty"`
	DocumentID  string                                                                  `json:"DocumentId"`
	Reference   *string                                                                 `json:"Reference,omitempty"`
	StartDate   *string                                                                 `json:"StartDate,omitempty"`
	Type        *PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON1TypeEnum `json:"Type,omitempty"`
}

type PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSONType string

const (
	PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSONTypePostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON1 PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSONType = "post_/spaces/{spaceId}/folders/{id}/contractual-documents_ApplicationJSON_1"
	PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSONTypePostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2 PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSONType = "post_/spaces/{spaceId}/folders/{id}/contractual-documents_ApplicationJSON_2"
)

type PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON struct {
	PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON1 *PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON1
	PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2 *PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2

	Type PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSONType
}

func CreatePostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSONPostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON1(postSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON1 PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON1) PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON {
	typ := PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSONTypePostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON1

	return PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON{
		PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON1: &postSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON1,
		Type: typ,
	}
}

func CreatePostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSONPostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2(postSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2 PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2) PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON {
	typ := PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSONTypePostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2

	return PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON{
		PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2: &postSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2,
		Type: typ,
	}
}

func (u *PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	postSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON1 := new(PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON1); err == nil {
		u.PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON1 = postSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON1
		u.Type = PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSONTypePostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON1
		return nil
	}

	postSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2 := new(PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2); err == nil {
		u.PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2 = postSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2
		u.Type = PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSONTypePostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON1 != nil {
		return json.Marshal(u.PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON1)
	}

	if u.PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2 != nil {
		return json.Marshal(u.PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON2)
	}

	return nil, nil
}

type PostSpacesSpaceIDFoldersIDContractualDocumentsJSONRequest struct {
	// Document to add (either DocumentId either (File,Name,Content64Encoded,Title) is mandatory)
	RequestBody PostSpacesSpaceIDFoldersIDContractualDocumentsApplicationJSON `request:"mediaType=application/json"`
	// Id of the folder
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Id of the space
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

// PostSpacesSpaceIDFoldersIDContractualDocumentsJSON201ApplicationJSON - Id of document created
type PostSpacesSpaceIDFoldersIDContractualDocumentsJSON201ApplicationJSON struct {
	ID *string `json:"Id,omitempty"`
}

type PostSpacesSpaceIDFoldersIDContractualDocumentsJSONResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Id of document created
	PostSpacesSpaceIDFoldersIDContractualDocumentsJSON201ApplicationJSONObject *PostSpacesSpaceIDFoldersIDContractualDocumentsJSON201ApplicationJSON
}
