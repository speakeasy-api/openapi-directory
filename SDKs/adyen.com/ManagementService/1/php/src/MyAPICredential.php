<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class MyAPICredential 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Remove allowed origin
     * 
     * Removes the [allowed origin](https://docs.adyen.com/development-resources/client-side-authentication#allowed-origins) specified in the path.
     * The API key from the request is used to identify the [API credential](https://docs.adyen.com/development-resources/api-credentials).
     * 
     * You can make this request with any of the Management API roles.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteMeAllowedOriginsOriginIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteMeAllowedOriginsOriginIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteMeAllowedOriginsOriginIdResponse
     */
	public function deleteMeAllowedOriginsOriginId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteMeAllowedOriginsOriginIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteMeAllowedOriginsOriginIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteMeAllowedOriginsOriginIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/allowedOrigins/{originId}', \OpenAPI\OpenAPI\Models\Operations\DeleteMeAllowedOriginsOriginIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteMeAllowedOriginsOriginIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get API credential details
     * 
     * Returns your [API credential](https://docs.adyen.com/development-resources/api-credentials) details based on the API Key you used in the request.
     * 
     * You can make this request with any of the Management API roles.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMeResponse
     */
	public function getMe(
        \OpenAPI\OpenAPI\Models\Operations\GetMeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->meApiCredential = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MeApiCredential', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get allowed origins
     * 
     * Returns the list of [allowed origins](https://docs.adyen.com/development-resources/client-side-authentication#allowed-origins) of your [API credential](https://docs.adyen.com/development-resources/api-credentials) based on the API key you used in the request.
     * 
     * You can make this request with any of the Management API roles.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMeAllowedOriginsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMeAllowedOriginsResponse
     */
	public function getMeAllowedOrigins(
        \OpenAPI\OpenAPI\Models\Operations\GetMeAllowedOriginsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMeAllowedOriginsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/allowedOrigins');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMeAllowedOriginsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->allowedOriginsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AllowedOriginsResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get allowed origin details
     * 
     * Returns the details of the [allowed origin](https://docs.adyen.com/development-resources/client-side-authentication#allowed-origins) specified in the path.
     * The API key from the request is used to identify the [API credential](https://docs.adyen.com/development-resources/api-credentials).
     * 
     * You can make this request with any of the Management API roles.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMeAllowedOriginsOriginIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMeAllowedOriginsOriginIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMeAllowedOriginsOriginIdResponse
     */
	public function getMeAllowedOriginsOriginId(
        \OpenAPI\OpenAPI\Models\Operations\GetMeAllowedOriginsOriginIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetMeAllowedOriginsOriginIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMeAllowedOriginsOriginIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/allowedOrigins/{originId}', \OpenAPI\OpenAPI\Models\Operations\GetMeAllowedOriginsOriginIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMeAllowedOriginsOriginIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->allowedOrigin = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AllowedOrigin', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add allowed origin
     * 
     * Adds an allowed origin to the list of [allowed origins](https://docs.adyen.com/development-resources/client-side-authentication#allowed-origins) of your API credential.
     * The API key from the request is used to identify the [API credential](https://docs.adyen.com/development-resources/api-credentials).
     * 
     * You can make this request with any of the Management API roles.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreateAllowedOriginRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostMeAllowedOriginsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostMeAllowedOriginsResponse
     */
	public function postMeAllowedOrigins(
        \OpenAPI\OpenAPI\Models\Shared\CreateAllowedOriginRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostMeAllowedOriginsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostMeAllowedOriginsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/allowedOrigins');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostMeAllowedOriginsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->allowedOrigin = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AllowedOrigin', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
}