/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = [
  "https://api.deutschebahn.com/reisezentren/v1",
  "http://api.deutschebahn.com/reisezentren/v1",
] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * This REST-API enables you to query information about travel centers in Germany.
 */
export class SDK {
  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    this._securityClient = this._defaultClient;
  }

  /**
   * Get all station infos
   *
   * @remarks
   * Get all station infos
   */
  getReisezentren(
    req: operations.GetReisezentrenRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetReisezentrenResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetReisezentrenRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/reisezentren";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetReisezentrenResponse =
        new operations.GetReisezentrenResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.travelCenterList = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.travelCenterList = utils.objectToClass(
              httpRes?.data,
              shared.TravelCenter,
              resFieldDepth
            );
          }
          break;
        case [404, 416].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get information about a station near a location
   *
   * @remarks
   * Get information about a station near a location
   */
  getReisezentrenLocLatLon(
    req: operations.GetReisezentrenLocLatLonRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetReisezentrenLocLatLonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetReisezentrenLocLatLonRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/reisezentren/loc/{lat}/{lon}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetReisezentrenLocLatLonResponse =
        new operations.GetReisezentrenLocLatLonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.travelCenter = utils.objectToClass(
              httpRes?.data,
              shared.TravelCenter
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get stations in a given radius
   *
   * @remarks
   * Get stations in a given radius
   */
  getReisezentrenLocLatLonDist(
    req: operations.GetReisezentrenLocLatLonDistRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetReisezentrenLocLatLonDistResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetReisezentrenLocLatLonDistRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/reisezentren/loc/{lat}/{lon}/{dist}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetReisezentrenLocLatLonDistResponse =
        new operations.GetReisezentrenLocLatLonDistResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.travelCenter = utils.objectToClass(
              httpRes?.data,
              shared.TravelCenter
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get information about a specific station
   *
   * @remarks
   * Get information about a specific station
   */
  getReisezentrenId(
    req: operations.GetReisezentrenIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetReisezentrenIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetReisezentrenIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/reisezentren/{id}", req);

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetReisezentrenIdResponse =
        new operations.GetReisezentrenIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }
}
