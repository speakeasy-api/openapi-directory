// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetGenericObjectByTypeTypeEnum - bioentity type
type GetGenericObjectByTypeTypeEnum string

const (
	GetGenericObjectByTypeTypeEnumGene        GetGenericObjectByTypeTypeEnum = "gene"
	GetGenericObjectByTypeTypeEnumVariant     GetGenericObjectByTypeTypeEnum = "variant"
	GetGenericObjectByTypeTypeEnumGenotype    GetGenericObjectByTypeTypeEnum = "genotype"
	GetGenericObjectByTypeTypeEnumPhenotype   GetGenericObjectByTypeTypeEnum = "phenotype"
	GetGenericObjectByTypeTypeEnumDisease     GetGenericObjectByTypeTypeEnum = "disease"
	GetGenericObjectByTypeTypeEnumGoterm      GetGenericObjectByTypeTypeEnum = "goterm"
	GetGenericObjectByTypeTypeEnumPathway     GetGenericObjectByTypeTypeEnum = "pathway"
	GetGenericObjectByTypeTypeEnumAnatomy     GetGenericObjectByTypeTypeEnum = "anatomy"
	GetGenericObjectByTypeTypeEnumSubstance   GetGenericObjectByTypeTypeEnum = "substance"
	GetGenericObjectByTypeTypeEnumIndividual  GetGenericObjectByTypeTypeEnum = "individual"
	GetGenericObjectByTypeTypeEnumPublication GetGenericObjectByTypeTypeEnum = "publication"
	GetGenericObjectByTypeTypeEnumModel       GetGenericObjectByTypeTypeEnum = "model"
	GetGenericObjectByTypeTypeEnumCase        GetGenericObjectByTypeTypeEnum = "case"
)

func (e *GetGenericObjectByTypeTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gene":
		fallthrough
	case "variant":
		fallthrough
	case "genotype":
		fallthrough
	case "phenotype":
		fallthrough
	case "disease":
		fallthrough
	case "goterm":
		fallthrough
	case "pathway":
		fallthrough
	case "anatomy":
		fallthrough
	case "substance":
		fallthrough
	case "individual":
		fallthrough
	case "publication":
		fallthrough
	case "model":
		fallthrough
	case "case":
		*e = GetGenericObjectByTypeTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetGenericObjectByTypeTypeEnum: %s", s)
	}
}

type GetGenericObjectByTypeRequest struct {
	// Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
	Direct *bool `queryParam:"style=form,explode=true,name=direct"`
	// Get distinct counts for associations (to be used in conjunction with 'get_association_counts' parameter)
	DistinctCounts *bool `queryParam:"style=form,explode=true,name=distinct_counts"`
	// Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
	Evidence *string `queryParam:"style=form,explode=true,name=evidence"`
	// If true, excludes associations that involve IEAs (ECO:0000501)
	ExcludeAutomaticAssertions *bool `queryParam:"style=form,explode=true,name=exclude_automatic_assertions"`
	// Enable faceting
	Facet *bool `queryParam:"style=form,explode=true,name=facet"`
	// Fields to facet on
	FacetFields []string `queryParam:"style=form,explode=true,name=facet_fields"`
	// If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
	FetchObjects *bool `queryParam:"style=form,explode=true,name=fetch_objects"`
	// Get association counts
	GetAssociationCounts *bool `queryParam:"style=form,explode=true,name=get_association_counts"`
	// id, e.g. NCBIGene:84570
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// number of rows
	Rows *int64 `queryParam:"style=form,explode=true,name=rows"`
	// Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
	Slim []string `queryParam:"style=form,explode=true,name=slim"`
	// beginning row
	Start *int64 `queryParam:"style=form,explode=true,name=start"`
	// bioentity type
	Type GetGenericObjectByTypeTypeEnum `pathParam:"style=simple,explode=false,name=type"`
	// If true, excludes evidence objects in response
	UnselectEvidence *bool `queryParam:"style=form,explode=true,name=unselect_evidence"`
	// If true, returns results in compact associations format
	UseCompactAssociations *bool `queryParam:"style=form,explode=true,name=use_compact_associations"`
}

type GetGenericObjectByTypeResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
