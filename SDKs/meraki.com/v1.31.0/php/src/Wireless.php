<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Wireless 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates new RF profile for this network
     * 
     * Creates new RF profile for this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWirelessRfProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWirelessRfProfileResponse
     */
	public function createNetworkWirelessRfProfile(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWirelessRfProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWirelessRfProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/rfProfiles', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWirelessRfProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWirelessRfProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkWirelessRfProfile201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateNetworkWirelessRfProfile201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an Identity PSK
     * 
     * Create an Identity PSK
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWirelessSsidIdentityPskRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWirelessSsidIdentityPskResponse
     */
	public function createNetworkWirelessSsidIdentityPsk(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWirelessSsidIdentityPskRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWirelessSsidIdentityPskResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/identityPsks', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWirelessSsidIdentityPskRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkWirelessSsidIdentityPskResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkWirelessSsidIdentityPsk201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a RF Profile
     * 
     * Delete a RF Profile
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWirelessRfProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWirelessRfProfileResponse
     */
	public function deleteNetworkWirelessRfProfile(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWirelessRfProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWirelessRfProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/rfProfiles/{rfProfileId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWirelessRfProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWirelessRfProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete an Identity PSK
     * 
     * Delete an Identity PSK
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWirelessSsidIdentityPskRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWirelessSsidIdentityPskResponse
     */
	public function deleteNetworkWirelessSsidIdentityPsk(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWirelessSsidIdentityPskRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWirelessSsidIdentityPskResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/identityPsks/{identityPskId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWirelessSsidIdentityPskRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkWirelessSsidIdentityPskResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Return the bluetooth settings for a wireless device
     * 
     * Return the bluetooth settings for a wireless device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessBluetoothSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessBluetoothSettingsResponse
     */
	public function getDeviceWirelessBluetoothSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessBluetoothSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessBluetoothSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/wireless/bluetooth/settings', \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessBluetoothSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessBluetoothSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceWirelessBluetoothSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessBluetoothSettings200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Aggregated connectivity info for a given AP on this network
     * 
     * Aggregated connectivity info for a given AP on this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessConnectionStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessConnectionStatsResponse
     */
	public function getDeviceWirelessConnectionStats(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessConnectionStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessConnectionStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/wireless/connectionStats', \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessConnectionStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessConnectionStatsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessConnectionStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceWirelessConnectionStats200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessConnectionStats200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Aggregated latency info for a given AP on this network
     * 
     * Aggregated latency info for a given AP on this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessLatencyStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessLatencyStatsResponse
     */
	public function getDeviceWirelessLatencyStats(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessLatencyStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessLatencyStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/wireless/latencyStats', \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessLatencyStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessLatencyStatsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessLatencyStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceWirelessLatencyStats200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the radio settings of a device
     * 
     * Return the radio settings of a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessRadioSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessRadioSettingsResponse
     */
	public function getDeviceWirelessRadioSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessRadioSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessRadioSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/wireless/radio/settings', \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessRadioSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessRadioSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceWirelessRadioSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the SSID statuses of an access point
     * 
     * Return the SSID statuses of an access point
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessStatusRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessStatusResponse
     */
	public function getDeviceWirelessStatus(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessStatusRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/wireless/status', \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceWirelessStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceWirelessStatus200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List Air Marshal scan results from a network
     * 
     * List Air Marshal scan results from a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessAirMarshalRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessAirMarshalResponse
     */
	public function getNetworkWirelessAirMarshal(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessAirMarshalRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessAirMarshalResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/airMarshal', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessAirMarshalRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessAirMarshalRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessAirMarshalResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessAirMarshal200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return alternate management interface and devices with IP assigned
     * 
     * Return alternate management interface and devices with IP assigned
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessAlternateManagementInterfaceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessAlternateManagementInterfaceResponse
     */
	public function getNetworkWirelessAlternateManagementInterface(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessAlternateManagementInterfaceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessAlternateManagementInterfaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/alternateManagementInterface', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessAlternateManagementInterfaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessAlternateManagementInterfaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessAlternateManagementInterface200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the billing settings of this network
     * 
     * Return the billing settings of this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessBillingRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessBillingResponse
     */
	public function getNetworkWirelessBilling(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessBillingRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessBillingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/billing', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessBillingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessBillingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessBilling200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the Bluetooth settings for a network. <a href="https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)">Bluetooth settings</a> must be enabled on the network.
     * 
     * Return the Bluetooth settings for a network. <a href="https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)">Bluetooth settings</a> must be enabled on the network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessBluetoothSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessBluetoothSettingsResponse
     */
	public function getNetworkWirelessBluetoothSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessBluetoothSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessBluetoothSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/bluetooth/settings', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessBluetoothSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessBluetoothSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessBluetoothSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessBluetoothSettings200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return AP channel utilization over time for a device or network client
     * 
     * Return AP channel utilization over time for a device or network client
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessChannelUtilizationHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessChannelUtilizationHistoryResponse
     */
	public function getNetworkWirelessChannelUtilizationHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessChannelUtilizationHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessChannelUtilizationHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/channelUtilizationHistory', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessChannelUtilizationHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessChannelUtilizationHistoryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessChannelUtilizationHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessChannelUtilizationHistory200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessChannelUtilizationHistory200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Aggregated connectivity info for a given client on this network
     * 
     * Aggregated connectivity info for a given client on this network. Clients are identified by their MAC.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientConnectionStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientConnectionStatsResponse
     */
	public function getNetworkWirelessClientConnectionStats(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientConnectionStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientConnectionStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/clients/{clientId}/connectionStats', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientConnectionStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientConnectionStatsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientConnectionStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessClientConnectionStats200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the wireless connectivity events for a client within a network in the timespan.
     * 
     * List the wireless connectivity events for a client within a network in the timespan.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientConnectivityEventsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientConnectivityEventsResponse
     */
	public function getNetworkWirelessClientConnectivityEvents(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientConnectivityEventsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientConnectivityEventsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/clients/{clientId}/connectivityEvents', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientConnectivityEventsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientConnectivityEventsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientConnectivityEventsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessClientConnectivityEvents200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return wireless client counts over time for a network, device, or network client
     * 
     * Return wireless client counts over time for a network, device, or network client
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientCountHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientCountHistoryResponse
     */
	public function getNetworkWirelessClientCountHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientCountHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientCountHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/clientCountHistory', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientCountHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientCountHistoryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientCountHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessClientCountHistory200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientCountHistory200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the latency history for a client
     * 
     * Return the latency history for a client. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP. The latency data is from a sample of 2% of packets and is grouped into 4 traffic categories: background, best effort, video, voice. Within these categories the sampled packet counters are bucketed by latency in milliseconds.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientLatencyHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientLatencyHistoryResponse
     */
	public function getNetworkWirelessClientLatencyHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientLatencyHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientLatencyHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/clients/{clientId}/latencyHistory', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientLatencyHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientLatencyHistoryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientLatencyHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessClientLatencyHistory200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Aggregated latency info for a given client on this network
     * 
     * Aggregated latency info for a given client on this network. Clients are identified by their MAC.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientLatencyStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientLatencyStatsResponse
     */
	public function getNetworkWirelessClientLatencyStats(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientLatencyStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientLatencyStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/clients/{clientId}/latencyStats', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientLatencyStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientLatencyStatsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientLatencyStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessClientLatencyStats200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Aggregated connectivity info for this network, grouped by clients
     * 
     * Aggregated connectivity info for this network, grouped by clients
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientsConnectionStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientsConnectionStatsResponse
     */
	public function getNetworkWirelessClientsConnectionStats(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientsConnectionStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientsConnectionStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/clients/connectionStats', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientsConnectionStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientsConnectionStatsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientsConnectionStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessClientsConnectionStats200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Aggregated latency info for this network, grouped by clients
     * 
     * Aggregated latency info for this network, grouped by clients
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientsLatencyStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientsLatencyStatsResponse
     */
	public function getNetworkWirelessClientsLatencyStats(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientsLatencyStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientsLatencyStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/clients/latencyStats', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientsLatencyStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientsLatencyStatsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessClientsLatencyStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessClientsLatencyStats200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Aggregated connectivity info for this network
     * 
     * Aggregated connectivity info for this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessConnectionStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessConnectionStatsResponse
     */
	public function getNetworkWirelessConnectionStats(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessConnectionStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessConnectionStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/connectionStats', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessConnectionStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessConnectionStatsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessConnectionStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessConnectionStats200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessConnectionStats200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return PHY data rates over time for a network, device, or network client
     * 
     * Return PHY data rates over time for a network, device, or network client
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDataRateHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDataRateHistoryResponse
     */
	public function getNetworkWirelessDataRateHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDataRateHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDataRateHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/dataRateHistory', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDataRateHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDataRateHistoryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDataRateHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessDataRateHistory200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDataRateHistory200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Aggregated connectivity info for this network, grouped by node
     * 
     * Aggregated connectivity info for this network, grouped by node
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesConnectionStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesConnectionStatsResponse
     */
	public function getNetworkWirelessDevicesConnectionStats(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesConnectionStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesConnectionStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/devices/connectionStats', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesConnectionStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesConnectionStatsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesConnectionStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessDevicesConnectionStats200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesConnectionStats200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Aggregated latency info for this network, grouped by node
     * 
     * Aggregated latency info for this network, grouped by node
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesLatencyStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesLatencyStatsResponse
     */
	public function getNetworkWirelessDevicesLatencyStats(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesLatencyStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesLatencyStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/devices/latencyStats', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesLatencyStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesLatencyStatsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessDevicesLatencyStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessDevicesLatencyStats200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List of all failed client connection events on this network in a given time range
     * 
     * List of all failed client connection events on this network in a given time range
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessFailedConnectionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessFailedConnectionsResponse
     */
	public function getNetworkWirelessFailedConnections(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessFailedConnectionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessFailedConnectionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/failedConnections', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessFailedConnectionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessFailedConnectionsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessFailedConnectionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessFailedConnections200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessFailedConnections200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return average wireless latency over time for a network, device, or network client
     * 
     * Return average wireless latency over time for a network, device, or network client
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessLatencyHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessLatencyHistoryResponse
     */
	public function getNetworkWirelessLatencyHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessLatencyHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessLatencyHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/latencyHistory', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessLatencyHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessLatencyHistoryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessLatencyHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessLatencyHistory200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessLatencyHistory200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Aggregated latency info for this network
     * 
     * Aggregated latency info for this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessLatencyStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessLatencyStatsResponse
     */
	public function getNetworkWirelessLatencyStats(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessLatencyStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessLatencyStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/latencyStats', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessLatencyStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessLatencyStatsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessLatencyStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessLatencyStats200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List wireless mesh statuses for repeaters
     * 
     * List wireless mesh statuses for repeaters
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessMeshStatusesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessMeshStatusesResponse
     */
	public function getNetworkWirelessMeshStatuses(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessMeshStatusesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessMeshStatusesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/meshStatuses', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessMeshStatusesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessMeshStatusesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessMeshStatusesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessMeshStatuses200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a RF profile
     * 
     * Return a RF profile
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessRfProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessRfProfileResponse
     */
	public function getNetworkWirelessRfProfile(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessRfProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessRfProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/rfProfiles/{rfProfileId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessRfProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessRfProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessRfProfile200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the non-basic RF profiles for this network
     * 
     * List the non-basic RF profiles for this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessRfProfilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessRfProfilesResponse
     */
	public function getNetworkWirelessRfProfiles(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessRfProfilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessRfProfilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/rfProfiles', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessRfProfilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessRfProfilesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessRfProfilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessRfProfiles200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the wireless settings for a network
     * 
     * Return the wireless settings for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSettingsResponse
     */
	public function getNetworkWirelessSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/settings', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSettings200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return signal quality (SNR/RSSI) over time for a device or network client
     * 
     * Return signal quality (SNR/RSSI) over time for a device or network client
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSignalQualityHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSignalQualityHistoryResponse
     */
	public function getNetworkWirelessSignalQualityHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSignalQualityHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSignalQualityHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/signalQualityHistory', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSignalQualityHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSignalQualityHistoryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSignalQualityHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessSignalQualityHistory200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSignalQualityHistory200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a single MR SSID
     * 
     * Return a single MR SSID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidResponse
     */
	public function getNetworkWirelessSsid(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessSsid200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the Bonjour forwarding setting and rules for the SSID
     * 
     * List the Bonjour forwarding setting and rules for the SSID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidBonjourForwardingRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidBonjourForwardingResponse
     */
	public function getNetworkWirelessSsidBonjourForwarding(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidBonjourForwardingRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidBonjourForwardingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/bonjourForwarding', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidBonjourForwardingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidBonjourForwardingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessSsidBonjourForwarding200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the device type group policies for the SSID
     * 
     * List the device type group policies for the SSID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidDeviceTypeGroupPoliciesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidDeviceTypeGroupPoliciesResponse
     */
	public function getNetworkWirelessSsidDeviceTypeGroupPolicies(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidDeviceTypeGroupPoliciesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidDeviceTypeGroupPoliciesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/deviceTypeGroupPolicies', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidDeviceTypeGroupPoliciesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidDeviceTypeGroupPoliciesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessSsidDeviceTypeGroupPolicies200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the EAP overridden parameters for an SSID
     * 
     * Return the EAP overridden parameters for an SSID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidEapOverrideRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidEapOverrideResponse
     */
	public function getNetworkWirelessSsidEapOverride(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidEapOverrideRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidEapOverrideResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/eapOverride', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidEapOverrideRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidEapOverrideResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessSsidEapOverride200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidEapOverride200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the L3 firewall rules for an SSID on an MR network
     * 
     * Return the L3 firewall rules for an SSID on an MR network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidFirewallL3FirewallRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidFirewallL3FirewallRulesResponse
     */
	public function getNetworkWirelessSsidFirewallL3FirewallRules(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidFirewallL3FirewallRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidFirewallL3FirewallRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/firewall/l3FirewallRules', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidFirewallL3FirewallRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidFirewallL3FirewallRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessSsidFirewallL3FirewallRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the L7 firewall rules for an SSID on an MR network
     * 
     * Return the L7 firewall rules for an SSID on an MR network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidFirewallL7FirewallRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidFirewallL7FirewallRulesResponse
     */
	public function getNetworkWirelessSsidFirewallL7FirewallRules(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidFirewallL7FirewallRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidFirewallL7FirewallRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/firewall/l7FirewallRules', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidFirewallL7FirewallRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidFirewallL7FirewallRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessSsidFirewallL7FirewallRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the Hotspot 2.0 settings for an SSID
     * 
     * Return the Hotspot 2.0 settings for an SSID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidHotspot20Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidHotspot20Response
     */
	public function getNetworkWirelessSsidHotspot20(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidHotspot20Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidHotspot20Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/hotspot20', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidHotspot20Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidHotspot20Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessSsidHotspot20200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return an Identity PSK
     * 
     * Return an Identity PSK
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidIdentityPskRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidIdentityPskResponse
     */
	public function getNetworkWirelessSsidIdentityPsk(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidIdentityPskRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidIdentityPskResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/identityPsks/{identityPskId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidIdentityPskRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidIdentityPskResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessSsidIdentityPsk200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidIdentityPsk200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all Identity PSKs in a wireless network
     * 
     * List all Identity PSKs in a wireless network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidIdentityPsksRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidIdentityPsksResponse
     */
	public function getNetworkWirelessSsidIdentityPsks(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidIdentityPsksRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidIdentityPsksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/identityPsks', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidIdentityPsksRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidIdentityPsksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessSsidIdentityPsks200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidIdentityPsks200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the outage schedule for the SSID
     * 
     * List the outage schedule for the SSID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidSchedulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidSchedulesResponse
     */
	public function getNetworkWirelessSsidSchedules(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidSchedulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidSchedulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/schedules', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidSchedulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidSchedulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessSsidSchedules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Display the splash page settings for the given SSID
     * 
     * Display the splash page settings for the given SSID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidSplashSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidSplashSettingsResponse
     */
	public function getNetworkWirelessSsidSplashSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidSplashSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidSplashSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/splash/settings', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidSplashSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidSplashSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessSsidSplashSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidSplashSettings200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Display the traffic shaping settings for a SSID on an MR network
     * 
     * Display the traffic shaping settings for a SSID on an MR network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidTrafficShapingRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidTrafficShapingRulesResponse
     */
	public function getNetworkWirelessSsidTrafficShapingRules(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidTrafficShapingRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidTrafficShapingRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/trafficShaping/rules', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidTrafficShapingRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidTrafficShapingRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessSsidTrafficShapingRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the VPN settings for the SSID.
     * 
     * List the VPN settings for the SSID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidVpnRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidVpnResponse
     */
	public function getNetworkWirelessSsidVpn(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidVpnRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidVpnResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/vpn', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidVpnRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidVpnResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessSsidVpn200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the MR SSIDs in a network
     * 
     * List the MR SSIDs in a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidsResponse
     */
	public function getNetworkWirelessSsids(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessSsidsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessSsids200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return AP usage over time for a device or network client
     * 
     * Return AP usage over time for a device or network client
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessUsageHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessUsageHistoryResponse
     */
	public function getNetworkWirelessUsageHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessUsageHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessUsageHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/usageHistory', \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessUsageHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessUsageHistoryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessUsageHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkWirelessUsageHistory200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkWirelessUsageHistory200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Endpoint to see power status for wireless devices
     * 
     * Endpoint to see power status for wireless devices
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWirelessDevicesEthernetStatusesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWirelessDevicesEthernetStatusesResponse
     */
	public function getOrganizationWirelessDevicesEthernetStatuses(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWirelessDevicesEthernetStatusesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWirelessDevicesEthernetStatusesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/wireless/devices/ethernet/statuses', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWirelessDevicesEthernetStatusesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationWirelessDevicesEthernetStatusesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationWirelessDevicesEthernetStatusesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationWirelessDevicesEthernetStatuses200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the bluetooth settings for a wireless device
     * 
     * Update the bluetooth settings for a wireless device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceWirelessBluetoothSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceWirelessBluetoothSettingsResponse
     */
	public function updateDeviceWirelessBluetoothSettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceWirelessBluetoothSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceWirelessBluetoothSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/wireless/bluetooth/settings', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceWirelessBluetoothSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceWirelessBluetoothSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateDeviceWirelessBluetoothSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateDeviceWirelessBluetoothSettings200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the radio settings of a device
     * 
     * Update the radio settings of a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceWirelessRadioSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceWirelessRadioSettingsResponse
     */
	public function updateDeviceWirelessRadioSettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceWirelessRadioSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceWirelessRadioSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/wireless/radio/settings', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceWirelessRadioSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceWirelessRadioSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateDeviceWirelessRadioSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update alternate management interface and device static IP
     * 
     * Update alternate management interface and device static IP
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessAlternateManagementInterfaceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessAlternateManagementInterfaceResponse
     */
	public function updateNetworkWirelessAlternateManagementInterface(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessAlternateManagementInterfaceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessAlternateManagementInterfaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/alternateManagementInterface', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessAlternateManagementInterfaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessAlternateManagementInterfaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkWirelessAlternateManagementInterface200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the billing settings
     * 
     * Update the billing settings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessBillingRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessBillingResponse
     */
	public function updateNetworkWirelessBilling(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessBillingRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessBillingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/billing', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessBillingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessBillingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkWirelessBilling200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the Bluetooth settings for a network
     * 
     * Update the Bluetooth settings for a network. See the docs page for <a href="https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)">Bluetooth settings</a>.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessBluetoothSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessBluetoothSettingsResponse
     */
	public function updateNetworkWirelessBluetoothSettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessBluetoothSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessBluetoothSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/bluetooth/settings', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessBluetoothSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessBluetoothSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkWirelessBluetoothSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessBluetoothSettings200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates specified RF profile for this network
     * 
     * Updates specified RF profile for this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessRfProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessRfProfileResponse
     */
	public function updateNetworkWirelessRfProfile(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessRfProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessRfProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/rfProfiles/{rfProfileId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessRfProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessRfProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkWirelessRfProfile200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessRfProfile200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the wireless settings for a network
     * 
     * Update the wireless settings for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSettingsResponse
     */
	public function updateNetworkWirelessSettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/settings', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkWirelessSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSettings200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the attributes of an MR SSID
     * 
     * Update the attributes of an MR SSID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidResponse
     */
	public function updateNetworkWirelessSsid(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkWirelessSsid200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the bonjour forwarding setting and rules for the SSID
     * 
     * Update the bonjour forwarding setting and rules for the SSID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidBonjourForwardingRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidBonjourForwardingResponse
     */
	public function updateNetworkWirelessSsidBonjourForwarding(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidBonjourForwardingRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidBonjourForwardingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/bonjourForwarding', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidBonjourForwardingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidBonjourForwardingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkWirelessSsidBonjourForwarding200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the device type group policies for the SSID
     * 
     * Update the device type group policies for the SSID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesResponse
     */
	public function updateNetworkWirelessSsidDeviceTypeGroupPolicies(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/deviceTypeGroupPolicies', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkWirelessSsidDeviceTypeGroupPolicies200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the EAP overridden parameters for an SSID.
     * 
     * Update the EAP overridden parameters for an SSID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidEapOverrideRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidEapOverrideResponse
     */
	public function updateNetworkWirelessSsidEapOverride(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidEapOverrideRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidEapOverrideResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/eapOverride', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidEapOverrideRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidEapOverrideResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkWirelessSsidEapOverride200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the L3 firewall rules of an SSID on an MR network
     * 
     * Update the L3 firewall rules of an SSID on an MR network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidFirewallL3FirewallRulesResponse
     */
	public function updateNetworkWirelessSsidFirewallL3FirewallRules(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidFirewallL3FirewallRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/firewall/l3FirewallRules', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidFirewallL3FirewallRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkWirelessSsidFirewallL3FirewallRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the L7 firewall rules of an SSID on an MR network
     * 
     * Update the L7 firewall rules of an SSID on an MR network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidFirewallL7FirewallRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidFirewallL7FirewallRulesResponse
     */
	public function updateNetworkWirelessSsidFirewallL7FirewallRules(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidFirewallL7FirewallRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidFirewallL7FirewallRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/firewall/l7FirewallRules', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidFirewallL7FirewallRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidFirewallL7FirewallRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkWirelessSsidFirewallL7FirewallRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the Hotspot 2.0 settings of an SSID
     * 
     * Update the Hotspot 2.0 settings of an SSID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidHotspot20Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidHotspot20Response
     */
	public function updateNetworkWirelessSsidHotspot20(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidHotspot20Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidHotspot20Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/hotspot20', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidHotspot20Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidHotspot20Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkWirelessSsidHotspot20200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an Identity PSK
     * 
     * Update an Identity PSK
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidIdentityPskRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidIdentityPskResponse
     */
	public function updateNetworkWirelessSsidIdentityPsk(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidIdentityPskRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidIdentityPskResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/identityPsks/{identityPskId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidIdentityPskRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidIdentityPskResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkWirelessSsidIdentityPsk200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the outage schedule for the SSID
     * 
     * Update the outage schedule for the SSID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidSchedulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidSchedulesResponse
     */
	public function updateNetworkWirelessSsidSchedules(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidSchedulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidSchedulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/schedules', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidSchedulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidSchedulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkWirelessSsidSchedules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Modify the splash page settings for the given SSID
     * 
     * Modify the splash page settings for the given SSID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidSplashSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidSplashSettingsResponse
     */
	public function updateNetworkWirelessSsidSplashSettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidSplashSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidSplashSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/splash/settings', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidSplashSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidSplashSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkWirelessSsidSplashSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidSplashSettings200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the traffic shaping settings for an SSID on an MR network
     * 
     * Update the traffic shaping settings for an SSID on an MR network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidTrafficShapingRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidTrafficShapingRulesResponse
     */
	public function updateNetworkWirelessSsidTrafficShapingRules(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidTrafficShapingRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidTrafficShapingRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/trafficShaping/rules', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidTrafficShapingRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidTrafficShapingRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkWirelessSsidTrafficShapingRules200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the VPN settings for the SSID
     * 
     * Update the VPN settings for the SSID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidVpnRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidVpnResponse
     */
	public function updateNetworkWirelessSsidVpn(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidVpnRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidVpnResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/wireless/ssids/{number}/vpn', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidVpnRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkWirelessSsidVpnResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkWirelessSsidVpn200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
}