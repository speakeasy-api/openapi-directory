/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

export class URLInfoResponse extends SpeakeasyBase {
  /**
   * The actual content this URL responded with. Only set if the 'fetch-content' option was used
   */
  @SpeakeasyMetadata()
  @Expose({ name: "content" })
  content: string;

  /**
   * The encoding format the URL uses
   */
  @SpeakeasyMetadata()
  @Expose({ name: "content-encoding" })
  contentEncoding: string;

  /**
   * The size of the URL content in bytes
   */
  @SpeakeasyMetadata()
  @Expose({ name: "content-size" })
  contentSize: number;

  /**
   * The content-type this URL serves
   */
  @SpeakeasyMetadata()
  @Expose({ name: "content-type" })
  contentType: string;

  /**
   * True if this URL responded with an HTTP OK (200) status
   */
  @SpeakeasyMetadata()
  @Expose({ name: "http-ok" })
  httpOk: boolean;

  /**
   * True if this URL responded with an HTTP redirect
   */
  @SpeakeasyMetadata()
  @Expose({ name: "http-redirect" })
  httpRedirect: boolean;

  /**
   * The HTTP status code this URL responded with. An HTTP status of 0 indicates a network level issue
   */
  @SpeakeasyMetadata()
  @Expose({ name: "http-status" })
  httpStatus: number;

  /**
   * The HTTP status message assoicated with the status code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "http-status-message" })
  httpStatusMessage: number;

  /**
   * True if an error occurred while loading the URL. This includes network errors, TLS errors and timeouts
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is-error" })
  isError: boolean;

  /**
   * True if a timeout occurred while loading the URL. You can set the timeout with the request parameter 'timeout'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is-timeout" })
  isTimeout: boolean;

  /**
   * The ISO 2-letter language code of the page. Extracted from either the HTML document or via HTTP headers
   */
  @SpeakeasyMetadata()
  @Expose({ name: "language-code" })
  languageCode: string;

  /**
   * The time taken to load the URL content in seconds
   */
  @SpeakeasyMetadata()
  @Expose({ name: "load-time" })
  loadTime: number;

  /**
   * A key-value map of the URL query paramaters
   */
  @SpeakeasyMetadata()
  @Expose({ name: "query" })
  query: Record<string, string>;

  /**
   * Is this URL actually serving real content
   */
  @SpeakeasyMetadata()
  @Expose({ name: "real" })
  real: boolean;

  /**
   * The servers IP geo-location: full city name (if detectable)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "server-city" })
  serverCity: string;

  /**
   * The servers IP geo-location: full country name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "server-country" })
  serverCountry: string;

  /**
   * The servers IP geo-location: ISO 2-letter country code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "server-country-code" })
  serverCountryCode: string;

  /**
   * The servers hostname (PTR record)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "server-hostname" })
  serverHostname: string;

  /**
   * The IP address of the server hosting this URL
   */
  @SpeakeasyMetadata()
  @Expose({ name: "server-ip" })
  serverIp: string;

  /**
   * The name of the server software hosting this URL
   */
  @SpeakeasyMetadata()
  @Expose({ name: "server-name" })
  serverName: string;

  /**
   * The servers IP geo-location: full region name (if detectable)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "server-region" })
  serverRegion: string;

  /**
   * The document title
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title: string;

  /**
   * The fully qualified URL. This may be different to the URL requested if http-redirect is true
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;

  /**
   * The URL path
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url-path" })
  urlPath: string;

  /**
   * The URL port
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url-port" })
  urlPort: number;

  /**
   * The URL protocol, usually http or https
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url-protocol" })
  urlProtocol: string;

  /**
   * Is this a valid well-formed URL
   */
  @SpeakeasyMetadata()
  @Expose({ name: "valid" })
  valid: boolean;
}
