// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// OrderActionForEvergreenTypeEnum - Type of the order action.
type OrderActionForEvergreenTypeEnum string

const (
	OrderActionForEvergreenTypeEnumCreateSubscription OrderActionForEvergreenTypeEnum = "CreateSubscription"
	OrderActionForEvergreenTypeEnumTermsAndConditions OrderActionForEvergreenTypeEnum = "TermsAndConditions"
	OrderActionForEvergreenTypeEnumAddProduct         OrderActionForEvergreenTypeEnum = "AddProduct"
	OrderActionForEvergreenTypeEnumUpdateProduct      OrderActionForEvergreenTypeEnum = "UpdateProduct"
	OrderActionForEvergreenTypeEnumRemoveProduct      OrderActionForEvergreenTypeEnum = "RemoveProduct"
	OrderActionForEvergreenTypeEnumRenewSubscription  OrderActionForEvergreenTypeEnum = "RenewSubscription"
	OrderActionForEvergreenTypeEnumCancelSubscription OrderActionForEvergreenTypeEnum = "CancelSubscription"
	OrderActionForEvergreenTypeEnumOwnerTransfer      OrderActionForEvergreenTypeEnum = "OwnerTransfer"
	OrderActionForEvergreenTypeEnumSuspend            OrderActionForEvergreenTypeEnum = "Suspend"
	OrderActionForEvergreenTypeEnumResume             OrderActionForEvergreenTypeEnum = "Resume"
)

func (e *OrderActionForEvergreenTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CreateSubscription":
		fallthrough
	case "TermsAndConditions":
		fallthrough
	case "AddProduct":
		fallthrough
	case "UpdateProduct":
		fallthrough
	case "RemoveProduct":
		fallthrough
	case "RenewSubscription":
		fallthrough
	case "CancelSubscription":
		fallthrough
	case "OwnerTransfer":
		fallthrough
	case "Suspend":
		fallthrough
	case "Resume":
		*e = OrderActionForEvergreenTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderActionForEvergreenTypeEnum: %s", s)
	}
}

// OrderActionForEvergreen - Represents the processed order action.
type OrderActionForEvergreen struct {
	// Rate plan associated with a subscription.
	//
	AddProduct *RatePlanOverrideForEvergreen `json:"addProduct,omitempty"`
	// Information about an order action of type `CancelSubscription`.
	//
	CancelSubscription *CancelSubscription `json:"cancelSubscription,omitempty"`
	// Information about an order action of type `CreateSubscription`.
	//
	CreateSubscription *CreateSubscriptionForEvergreen `json:"createSubscription,omitempty"`
	// Container for custom fields of an Order Action object.
	//
	CustomFields map[string]interface{} `json:"customFields,omitempty"`
	// The Id of the order action processed in the order.
	ID *string `json:"id,omitempty"`
	// Shows the delta metrics caused by a specific order action on a specific charge.
	//
	OrderMetrics []OrderMetricsForEvergreen `json:"orderMetrics,omitempty"`
	// Information about an order action of type `OwnerTransfer`.
	//
	// **Note:** The Owner Transfer feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
	//
	OwnerTransfer *OwnerTransfer `json:"ownerTransfer,omitempty"`
	// Information about an order action of type `RemoveProduct`.
	//
	RemoveProduct *RemoveProduct `json:"removeProduct,omitempty"`
	// Information about an order action of type `Resume`.
	//
	Resume *GetOrderResume `json:"resume,omitempty"`
	// The sequence of the order actions processed in the order.
	Sequence *int64 `json:"sequence,omitempty"`
	// Information about an order action of type `Suspend`.
	//
	Suspend *GetOrderSuspend `json:"suspend,omitempty"`
	// Information about an order action of type `TermsAndConditions`.
	//
	TermsAndConditions *TermsAndConditions `json:"termsAndConditions,omitempty"`
	// Container for the contract effective, service activation, and customer acceptance dates of the order action.
	//
	// If [Zuora is configured to require service activation](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Service_Activation_of_Orders.3F) and the `ServiceActivation` field is not set for a `CreateSubscription` order action, a `Pending` order and a `Pending Activation` subscription are created.
	//
	// If [Zuora is configured to require customer acceptance](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Customer_Acceptance_of_Orders.3F) and the `CustomerAcceptance` field is not set for a `CreateSubscription` order action, a `Pending` order and a `Pending Acceptance` subscription are created. At the same time, if the service activation date field is also required and not set, a `Pending` order and a `Pending Activation` subscription are created instead.
	//
	// If [Zuora is configured to require service activation](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Service_Activation_of_Orders.3F) and the `ServiceActivation` field is not set for either of the following order actions, a `Pending` order is created. The subscription status is not impacted. **Note:** This feature is in **Limited Availability**. If you want to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
	//  * AddProduct
	//  * UpdateProduct
	//  * RemoveProduct
	//  * RenewSubscription
	//  * TermsAndConditions
	//
	// If [Zuora is configured to require customer acceptance](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Customer_Acceptance_of_Orders.3F) and the `CustomerAcceptance` field is not set for either of the following order actions, a `Pending` order is created. The subscription status is not impacted. **Note:** This feature is in **Limited Availability**. If you want to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
	//  * AddProduct
	//  * UpdateProduct
	//  * RemoveProduct
	//  * RenewSubscription
	//  * TermsAndConditions
	//
	TriggerDates []TriggerDate `json:"triggerDates,omitempty"`
	// Type of the order action.
	Type *OrderActionForEvergreenTypeEnum `json:"type,omitempty"`
	// Information about an order action of type `UpdateProduct`.
	//
	UpdateProduct *RatePlanUpdateForEvergreen `json:"updateProduct,omitempty"`
}
