/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class QueryMembersRequest {
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at_after")
    public OffsetDateTime createdAtAfter;
    public QueryMembersRequest withCreatedAtAfter(OffsetDateTime createdAtAfter) {
        this.createdAtAfter = createdAtAfter;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at_after_or_equal")
    public OffsetDateTime createdAtAfterOrEqual;
    public QueryMembersRequest withCreatedAtAfterOrEqual(OffsetDateTime createdAtAfterOrEqual) {
        this.createdAtAfterOrEqual = createdAtAfterOrEqual;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at_before")
    public OffsetDateTime createdAtBefore;
    public QueryMembersRequest withCreatedAtBefore(OffsetDateTime createdAtBefore) {
        this.createdAtBefore = createdAtBefore;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at_before_or_equal")
    public OffsetDateTime createdAtBeforeOrEqual;
    public QueryMembersRequest withCreatedAtBeforeOrEqual(OffsetDateTime createdAtBeforeOrEqual) {
        this.createdAtBeforeOrEqual = createdAtBeforeOrEqual;
        return this;
    }
    
    /**
     * Filter to apply to members
     */
    @JsonProperty("filter_conditions")
    public java.util.Map<String, Object> filterConditions;
    public QueryMembersRequest withFilterConditions(java.util.Map<String, Object> filterConditions) {
        this.filterConditions = filterConditions;
        return this;
    }
    
    /**
     * Channel ID to interact with
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public QueryMembersRequest withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Number of records to return
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("limit")
    public Double limit;
    public QueryMembersRequest withLimit(Double limit) {
        this.limit = limit;
        return this;
    }
    
    /**
     * List of members to search in distinct channels
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("members")
    public ChannelMember[] members;
    public QueryMembersRequest withMembers(ChannelMember[] members) {
        this.members = members;
        return this;
    }
    
    /**
     * Number of records to offset
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("offset")
    public Double offset;
    public QueryMembersRequest withOffset(Double offset) {
        this.offset = offset;
        return this;
    }
    
    /**
     * Array of sort parameters
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sort")
    public SortParam[] sort;
    public QueryMembersRequest withSort(SortParam[] sort) {
        this.sort = sort;
        return this;
    }
    
    /**
     * Channel type to interact with
     */
    @JsonProperty("type")
    public String type;
    public QueryMembersRequest withType(String type) {
        this.type = type;
        return this;
    }
    
    /**
     * Represents chat user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user")
    public java.util.Map<String, Object> user;
    public QueryMembersRequest withUser(java.util.Map<String, Object> user) {
        this.user = user;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_id")
    public String userId;
    public QueryMembersRequest withUserId(String userId) {
        this.userId = userId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_id_gt")
    public String userIdGt;
    public QueryMembersRequest withUserIdGt(String userIdGt) {
        this.userIdGt = userIdGt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_id_gte")
    public String userIdGte;
    public QueryMembersRequest withUserIdGte(String userIdGte) {
        this.userIdGte = userIdGte;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_id_lt")
    public String userIdLt;
    public QueryMembersRequest withUserIdLt(String userIdLt) {
        this.userIdLt = userIdLt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_id_lte")
    public String userIdLte;
    public QueryMembersRequest withUserIdLte(String userIdLte) {
        this.userIdLte = userIdLte;
        return this;
    }
    
}
