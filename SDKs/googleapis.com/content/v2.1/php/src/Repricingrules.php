<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Repricingrules 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a repricing rule for your Merchant Center account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesCreateResponse
     */
	public function contentRepricingrulesCreate(
        \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/repricingrules', \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "repricingRuleInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->repricingRule = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RepricingRule', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a repricing rule in your Merchant Center account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesDeleteResponse
     */
	public function contentRepricingrulesDelete(
        \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/repricingrules/{ruleId}', \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Retrieves a repricing rule from your Merchant Center account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesGetResponse
     */
	public function contentRepricingrulesGet(
        \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/repricingrules/{ruleId}', \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->repricingRule = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RepricingRule', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the repricing rules in your Merchant Center account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesListResponse
     */
	public function contentRepricingrulesList(
        \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/repricingrules', \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listRepricingRulesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListRepricingRulesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a repricing rule in your Merchant Center account. All mutable fields will be overwritten in each update request. In each update, you must provide all required mutable fields, or an error will be thrown. If you do not provide an optional field in the update request, if that field currently exists, it will be deleted from the rule.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesPatchResponse
     */
	public function contentRepricingrulesPatch(
        \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/repricingrules/{ruleId}', \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "repricingRuleInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->repricingRule = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RepricingRule', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the metrics report for a given Repricing rule.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesRepricingreportsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesRepricingreportsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesRepricingreportsListResponse
     */
	public function contentRepricingrulesRepricingreportsList(
        \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesRepricingreportsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesRepricingreportsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesRepricingreportsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/repricingrules/{ruleId}/repricingreports', \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesRepricingreportsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesRepricingreportsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentRepricingrulesRepricingreportsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listRepricingRuleReportsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListRepricingRuleReportsResponse', 'json');
            }
        }

        return $response;
    }
}