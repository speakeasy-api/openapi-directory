// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type RvcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type RvcerRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// Aadhaar number
	UID string `json:"UID"`
	// Chassis No
	ChasisNo string `json:"chasis_no"`
	// Vehicle Registration No
	RegNo string `json:"reg_no"`
}

// RvcerRequestBodyFormatEnum - The format of the certificate in response.
type RvcerRequestBodyFormatEnum string

const (
	RvcerRequestBodyFormatEnumXML RvcerRequestBodyFormatEnum = "xml"
	RvcerRequestBodyFormatEnumPdf RvcerRequestBodyFormatEnum = "pdf"
)

func (e *RvcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "xml":
		fallthrough
	case "pdf":
		*e = RvcerRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RvcerRequestBodyFormatEnum: %s", s)
	}
}

// RvcerRequestBody - Request format
type RvcerRequestBody struct {
	CertificateParameters *RvcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format RvcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Rvcer504ApplicationJSONErrorEnum string

const (
	Rvcer504ApplicationJSONErrorEnumGatewayTimeout Rvcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Rvcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Rvcer504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rvcer504ApplicationJSONErrorEnum: %s", s)
	}
}

type Rvcer504ApplicationJSONErrorDescriptionEnum string

const (
	Rvcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Rvcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Rvcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Rvcer504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rvcer504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Rvcer504ApplicationJSON - Gateway timeout
type Rvcer504ApplicationJSON struct {
	Error            *Rvcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rvcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rvcer503ApplicationJSONErrorEnum string

const (
	Rvcer503ApplicationJSONErrorEnumServiceUnavailable Rvcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Rvcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Rvcer503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rvcer503ApplicationJSONErrorEnum: %s", s)
	}
}

type Rvcer503ApplicationJSONErrorDescriptionEnum string

const (
	Rvcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Rvcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Rvcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Rvcer503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rvcer503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Rvcer503ApplicationJSON - Service unavailable
type Rvcer503ApplicationJSON struct {
	Error            *Rvcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rvcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rvcer502ApplicationJSONErrorEnum string

const (
	Rvcer502ApplicationJSONErrorEnumBadGatewy Rvcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Rvcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Rvcer502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rvcer502ApplicationJSONErrorEnum: %s", s)
	}
}

type Rvcer502ApplicationJSONErrorDescriptionEnum string

const (
	Rvcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Rvcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Rvcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Rvcer502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rvcer502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Rvcer502ApplicationJSON - Bad gateway
type Rvcer502ApplicationJSON struct {
	Error            *Rvcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rvcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rvcer500ApplicationJSONErrorEnum string

const (
	Rvcer500ApplicationJSONErrorEnumInternalServerError Rvcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Rvcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Rvcer500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rvcer500ApplicationJSONErrorEnum: %s", s)
	}
}

type Rvcer500ApplicationJSONErrorDescriptionEnum string

const (
	Rvcer500ApplicationJSONErrorDescriptionEnumInternalServerError Rvcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Rvcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Rvcer500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rvcer500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Rvcer500ApplicationJSON - Internal server error
type Rvcer500ApplicationJSON struct {
	Error            *Rvcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rvcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rvcer404ApplicationJSONErrorEnum string

const (
	Rvcer404ApplicationJSONErrorEnumRecordNotFound Rvcer404ApplicationJSONErrorEnum = "record_not_found"
	Rvcer404ApplicationJSONErrorEnumURLNotFound    Rvcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Rvcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Rvcer404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rvcer404ApplicationJSONErrorEnum: %s", s)
	}
}

type Rvcer404ApplicationJSONErrorDescriptionEnum string

const (
	Rvcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Rvcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Rvcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Rvcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Rvcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Rvcer404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rvcer404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Rvcer404ApplicationJSON - No record found
type Rvcer404ApplicationJSON struct {
	Error            *Rvcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rvcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rvcer401ApplicationJSONErrorEnum string

const (
	Rvcer401ApplicationJSONErrorEnumInvalidAuthentication Rvcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Rvcer401ApplicationJSONErrorEnumInvalidAuthorization  Rvcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Rvcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Rvcer401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rvcer401ApplicationJSONErrorEnum: %s", s)
	}
}

type Rvcer401ApplicationJSONErrorDescriptionEnum string

const (
	Rvcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Rvcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Rvcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Rvcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Rvcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Rvcer401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rvcer401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Rvcer401ApplicationJSON - Unauthorized access
type Rvcer401ApplicationJSON struct {
	Error            *Rvcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rvcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rvcer400ApplicationJSONErrorEnum string

const (
	Rvcer400ApplicationJSONErrorEnumMissingParameter Rvcer400ApplicationJSONErrorEnum = "missing_parameter"
	Rvcer400ApplicationJSONErrorEnumInvalidParameter Rvcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Rvcer400ApplicationJSONErrorEnumInvalidFormat    Rvcer400ApplicationJSONErrorEnum = "invalid_format"
	Rvcer400ApplicationJSONErrorEnumInvalidTxnid     Rvcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Rvcer400ApplicationJSONErrorEnumInvalidConsentid Rvcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Rvcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Rvcer400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rvcer400ApplicationJSONErrorEnum: %s", s)
	}
}

type Rvcer400ApplicationJSONErrorDescriptionEnum string

const (
	Rvcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Rvcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Rvcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Rvcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Rvcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Rvcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Rvcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Rvcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Rvcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Rvcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Rvcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Rvcer400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rvcer400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Rvcer400ApplicationJSON - Bad request
type Rvcer400ApplicationJSON struct {
	Error            *Rvcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rvcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type RvcerResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Rvcer400ApplicationJSONObject *Rvcer400ApplicationJSON
	// Unauthorized access
	Rvcer401ApplicationJSONObject *Rvcer401ApplicationJSON
	// No record found
	Rvcer404ApplicationJSONObject *Rvcer404ApplicationJSON
	// Internal server error
	Rvcer500ApplicationJSONObject *Rvcer500ApplicationJSON
	// Bad gateway
	Rvcer502ApplicationJSONObject *Rvcer502ApplicationJSON
	// Service unavailable
	Rvcer503ApplicationJSONObject *Rvcer503ApplicationJSON
	// Gateway timeout
	Rvcer504ApplicationJSONObject *Rvcer504ApplicationJSON
}
