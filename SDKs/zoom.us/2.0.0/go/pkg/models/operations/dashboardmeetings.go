// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/types"
	"time"
)

type DashboardMeetingsSecurity struct {
	OAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

// DashboardMeetingsIncludeFieldsEnum - Set the value of this field to "tracking_fields" if you would like to include tracking fields of each meeting in the response.
type DashboardMeetingsIncludeFieldsEnum string

const (
	DashboardMeetingsIncludeFieldsEnumTrackingFields DashboardMeetingsIncludeFieldsEnum = "tracking_fields"
)

func (e *DashboardMeetingsIncludeFieldsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "tracking_fields":
		*e = DashboardMeetingsIncludeFieldsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DashboardMeetingsIncludeFieldsEnum: %s", s)
	}
}

// DashboardMeetingsTypeEnum - Specify a value to get the response for the corresponding meeting type. The value of this field can be one of the following:<br> <br>`past` - Meeting that already occurred in the specified date range.<br>`pastOne` - Past meetings that were attended by only one user. <br>`live` - Live meetings.<br><br>
//
// If you do not provide this field, the default value will be `live` and thus, the API will only query responses for live meetings.
type DashboardMeetingsTypeEnum string

const (
	DashboardMeetingsTypeEnumPast    DashboardMeetingsTypeEnum = "past"
	DashboardMeetingsTypeEnumPastOne DashboardMeetingsTypeEnum = "pastOne"
	DashboardMeetingsTypeEnumLive    DashboardMeetingsTypeEnum = "live"
)

func (e *DashboardMeetingsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "past":
		fallthrough
	case "pastOne":
		fallthrough
	case "live":
		*e = DashboardMeetingsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DashboardMeetingsTypeEnum: %s", s)
	}
}

type DashboardMeetingsRequest struct {
	// Start date in 'yyyy-mm-dd' format. The date range defined by the "from" and "to" parameters should only be one month as the report includes only one month worth of data at once.
	From types.Date `queryParam:"style=form,explode=true,name=from"`
	// Set the value of this field to "tracking_fields" if you would like to include tracking fields of each meeting in the response.
	IncludeFields *DashboardMeetingsIncludeFieldsEnum `queryParam:"style=form,explode=true,name=include_fields"`
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string `queryParam:"style=form,explode=true,name=next_page_token"`
	// The number of records returned within a single API call.
	PageSize *int64 `queryParam:"style=form,explode=true,name=page_size"`
	// End date.
	To types.Date `queryParam:"style=form,explode=true,name=to"`
	// Specify a value to get the response for the corresponding meeting type. The value of this field can be one of the following:<br> <br>`past` - Meeting that already occurred in the specified date range.<br>`pastOne` - Past meetings that were attended by only one user. <br>`live` - Live meetings.<br><br>
	//
	// If you do not provide this field, the default value will be `live` and thus, the API will only query responses for live meetings.
	Type *DashboardMeetingsTypeEnum `queryParam:"style=form,explode=true,name=type"`
}

type DashboardMeetings200ApplicationXMLMetricsCustomKeys struct {
	// Custom key associated with the meeting.
	Key *string
	// Value of the custom key associated with the meeting.
	Value *string
}

type DashboardMeetings200ApplicationXMLMetricsTrackingFields struct {
	// Label of the tracking field.
	Field *string
	// Value of the tracking field.
	Value *string
}

// DashboardMeetings200ApplicationXMLMetrics - Meeting metric details.
type DashboardMeetings200ApplicationXMLMetrics struct {
	// Custom keys and values assigned to the meeting.
	CustomKeys []DashboardMeetings200ApplicationXMLMetricsCustomKeys
	// Department of the host.
	Dept *string
	// Meeting duration. Formatted as hh:mm:ss, for example: `16:08` for 16 minutes and 8 seconds.
	Duration *string
	// Email address of the host.
	Email *string
	// Meeting end time.
	EndTime *time.Time
	// Indicates whether or not [third party audio](https://support.zoom.us/hc/en-us/articles/202470795-3rd-Party-Audio-Conference) was used in the meeting.
	Has3rdPartyAudio *bool
	// Indicates whether or not the PSTN was used in the meeting.
	HasPstn *bool
	// Indicates whether or not the recording feature was used in the meeting.
	HasRecording *bool
	// Indicates whether or not screenshare feature was used in the meeting.
	HasScreenShare *bool
	// Indicates whether or not someone joined the meeting using SIP.
	HasSip *bool
	// Indicates whether or not video was used in the meeting.
	HasVideo *bool
	// Indicates whether or not VoIP was used in the meeting.
	HasVoip *bool
	// Host display name.
	Host *string
	// [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "**long**" format(represented as int64 data type in JSON), also known as the meeting number.
	ID *int64
	// The number of Zoom Room participants in the meeting.
	InRoomParticipants *int64
	// Meeting participant count.
	Participants *int64
	// Meeting start time.
	StartTime *time.Time
	// Meeting topic.
	Topic *string
	// Tracking fields and values assigned to the meeting.
	TrackingFields []DashboardMeetings200ApplicationXMLMetricsTrackingFields
	// License type of the user.
	UserType *string
	// Meeting UUID. Please double encode your UUID when using it for API calls if the UUID begins with a '/'or contains '//' in it.
	UUID *string
}

// DashboardMeetings200ApplicationXML - Pagination object.
type DashboardMeetings200ApplicationXML struct {
	// Start date for this report in 'yyyy-mm-dd' format.
	From *types.Date
	// Array of meeting objects.
	Meetings []DashboardMeetings200ApplicationXMLMetrics
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string
	// The number of pages returned for the request made.
	PageCount *int64
	// The number of records returned within a single API call.
	PageSize *int64
	// End date for this report in 'yyyy-mm-dd' format.
	To *types.Date
	// The number of all records available across pages.
	TotalRecords *int64
}

type DashboardMeetings200ApplicationJSONMetricsCustomKeys struct {
	// Custom key associated with the meeting.
	Key *string `json:"key,omitempty"`
	// Value of the custom key associated with the meeting.
	Value *string `json:"value,omitempty"`
}

type DashboardMeetings200ApplicationJSONMetricsTrackingFields struct {
	// Label of the tracking field.
	Field *string `json:"field,omitempty"`
	// Value of the tracking field.
	Value *string `json:"value,omitempty"`
}

// DashboardMeetings200ApplicationJSONMetrics - Meeting metric details.
type DashboardMeetings200ApplicationJSONMetrics struct {
	// Custom keys and values assigned to the meeting.
	CustomKeys []DashboardMeetings200ApplicationJSONMetricsCustomKeys `json:"custom_keys,omitempty"`
	// Department of the host.
	Dept *string `json:"dept,omitempty"`
	// Meeting duration. Formatted as hh:mm:ss, for example: `16:08` for 16 minutes and 8 seconds.
	Duration *string `json:"duration,omitempty"`
	// Email address of the host.
	Email *string `json:"email,omitempty"`
	// Meeting end time.
	EndTime *time.Time `json:"end_time,omitempty"`
	// Indicates whether or not [third party audio](https://support.zoom.us/hc/en-us/articles/202470795-3rd-Party-Audio-Conference) was used in the meeting.
	Has3rdPartyAudio *bool `json:"has_3rd_party_audio,omitempty"`
	// Indicates whether or not the PSTN was used in the meeting.
	HasPstn *bool `json:"has_pstn,omitempty"`
	// Indicates whether or not the recording feature was used in the meeting.
	HasRecording *bool `json:"has_recording,omitempty"`
	// Indicates whether or not screenshare feature was used in the meeting.
	HasScreenShare *bool `json:"has_screen_share,omitempty"`
	// Indicates whether or not someone joined the meeting using SIP.
	HasSip *bool `json:"has_sip,omitempty"`
	// Indicates whether or not video was used in the meeting.
	HasVideo *bool `json:"has_video,omitempty"`
	// Indicates whether or not VoIP was used in the meeting.
	HasVoip *bool `json:"has_voip,omitempty"`
	// Host display name.
	Host *string `json:"host,omitempty"`
	// [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "**long**" format(represented as int64 data type in JSON), also known as the meeting number.
	ID *int64 `json:"id,omitempty"`
	// The number of Zoom Room participants in the meeting.
	InRoomParticipants *int64 `json:"in_room_participants,omitempty"`
	// Meeting participant count.
	Participants *int64 `json:"participants,omitempty"`
	// Meeting start time.
	StartTime *time.Time `json:"start_time,omitempty"`
	// Meeting topic.
	Topic *string `json:"topic,omitempty"`
	// Tracking fields and values assigned to the meeting.
	TrackingFields []DashboardMeetings200ApplicationJSONMetricsTrackingFields `json:"tracking_fields,omitempty"`
	// License type of the user.
	UserType *string `json:"user_type,omitempty"`
	// Meeting UUID. Please double encode your UUID when using it for API calls if the UUID begins with a '/'or contains '//' in it.
	UUID *string `json:"uuid,omitempty"`
}

// DashboardMeetings200ApplicationJSON - Pagination object.
type DashboardMeetings200ApplicationJSON struct {
	// Start date for this report in 'yyyy-mm-dd' format.
	From *types.Date `json:"from,omitempty"`
	// Array of meeting objects.
	Meetings []DashboardMeetings200ApplicationJSONMetrics `json:"meetings,omitempty"`
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string `json:"next_page_token,omitempty"`
	// The number of pages returned for the request made.
	PageCount *int64 `json:"page_count,omitempty"`
	// The number of records returned within a single API call.
	PageSize *int64 `json:"page_size,omitempty"`
	// End date for this report in 'yyyy-mm-dd' format.
	To *types.Date `json:"to,omitempty"`
	// The number of all records available across pages.
	TotalRecords *int64 `json:"total_records,omitempty"`
}

type DashboardMeetingsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200`<br>
	// Meetings returned.<br>
	// Only available for paid accounts that have dashboard feature enabled.
	DashboardMeetings200ApplicationJSONObject *DashboardMeetings200ApplicationJSON
}
