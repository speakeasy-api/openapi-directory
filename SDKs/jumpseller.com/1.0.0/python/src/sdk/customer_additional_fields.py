"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class CustomerAdditionalFields:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_customers_id_fields_field_id_(self, request: operations.DeleteCustomersIDFieldsFieldIDRequest) -> operations.DeleteCustomersIDFieldsFieldIDResponse:
        r"""Delete a Customer Additional Field."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteCustomersIDFieldsFieldIDRequest, base_url, '/customers/{id}/fields/{field_id}', request)
        
        query_params = utils.get_query_params(operations.DeleteCustomersIDFieldsFieldIDRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteCustomersIDFieldsFieldIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.delete_customers_id_fields_field_id_200_application_json_string = http_res.content
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def get_customers_id_fields(self, request: operations.GetCustomersIDFieldsRequest) -> operations.GetCustomersIDFieldsResponse:
        r"""Retrieves the Customer Additional Field of a Customer."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCustomersIDFieldsRequest, base_url, '/customers/{id}/fields', request)
        
        query_params = utils.get_query_params(operations.GetCustomersIDFieldsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCustomersIDFieldsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.CustomerAdditionalField]])
                res.customer_additional_fields = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def get_customers_id_fields_field_id_(self, request: operations.GetCustomersIDFieldsFieldIDRequest) -> operations.GetCustomersIDFieldsFieldIDResponse:
        r"""Retrieve a single Customer Additional Field."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCustomersIDFieldsFieldIDRequest, base_url, '/customers/{id}/fields/{field_id}', request)
        
        query_params = utils.get_query_params(operations.GetCustomersIDFieldsFieldIDRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCustomersIDFieldsFieldIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomerAdditionalField])
                res.customer_additional_field = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def post_customers_id_fields(self, request: operations.PostCustomersIDFieldsRequest) -> operations.PostCustomersIDFieldsResponse:
        r"""Adds Customer Additional Fields to a Customer."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostCustomersIDFieldsRequest, base_url, '/customers/{id}/fields', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "customer_additional_field_edit", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PostCustomersIDFieldsRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostCustomersIDFieldsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomerAdditionalField])
                res.customer_additional_field = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def put_customers_id_fields_field_id_(self, request: operations.PutCustomersIDFieldsFieldIDRequest) -> operations.PutCustomersIDFieldsFieldIDResponse:
        r"""Update a Customer Additional Field."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutCustomersIDFieldsFieldIDRequest, base_url, '/customers/{id}/fields/{field_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "customer_additional_field_edit", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PutCustomersIDFieldsFieldIDRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutCustomersIDFieldsFieldIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomerAdditionalField])
                res.customer_additional_field = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BadParams])
                res.bad_params = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    