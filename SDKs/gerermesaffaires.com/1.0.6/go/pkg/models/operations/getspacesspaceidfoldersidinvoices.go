// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetSpacesSpaceIDFoldersIDInvoicesPathParams struct {
	// Id of the folder
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Id of the space
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

// GetSpacesSpaceIDFoldersIDInvoicesSortNameEnum - name of value for sort
type GetSpacesSpaceIDFoldersIDInvoicesSortNameEnum string

const (
	GetSpacesSpaceIDFoldersIDInvoicesSortNameEnumDueDate     GetSpacesSpaceIDFoldersIDInvoicesSortNameEnum = "DueDate"
	GetSpacesSpaceIDFoldersIDInvoicesSortNameEnumPaymentDate GetSpacesSpaceIDFoldersIDInvoicesSortNameEnum = "PaymentDate"
	GetSpacesSpaceIDFoldersIDInvoicesSortNameEnumInvoiceDate GetSpacesSpaceIDFoldersIDInvoicesSortNameEnum = "InvoiceDate"
	GetSpacesSpaceIDFoldersIDInvoicesSortNameEnumInclVat     GetSpacesSpaceIDFoldersIDInvoicesSortNameEnum = "InclVAT"
	GetSpacesSpaceIDFoldersIDInvoicesSortNameEnumContracting GetSpacesSpaceIDFoldersIDInvoicesSortNameEnum = "Contracting"
	GetSpacesSpaceIDFoldersIDInvoicesSortNameEnumTitle       GetSpacesSpaceIDFoldersIDInvoicesSortNameEnum = "Title"
)

func (e *GetSpacesSpaceIDFoldersIDInvoicesSortNameEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DueDate":
		fallthrough
	case "PaymentDate":
		fallthrough
	case "InvoiceDate":
		fallthrough
	case "InclVAT":
		fallthrough
	case "Contracting":
		fallthrough
	case "Title":
		*e = GetSpacesSpaceIDFoldersIDInvoicesSortNameEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSpacesSpaceIDFoldersIDInvoicesSortNameEnum: %s", s)
	}
}

// GetSpacesSpaceIDFoldersIDInvoicesSortOrderEnum - order of sort (if absent default is asc)
type GetSpacesSpaceIDFoldersIDInvoicesSortOrderEnum string

const (
	GetSpacesSpaceIDFoldersIDInvoicesSortOrderEnumAsc  GetSpacesSpaceIDFoldersIDInvoicesSortOrderEnum = "asc"
	GetSpacesSpaceIDFoldersIDInvoicesSortOrderEnumDesc GetSpacesSpaceIDFoldersIDInvoicesSortOrderEnum = "desc"
)

func (e *GetSpacesSpaceIDFoldersIDInvoicesSortOrderEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "asc":
		fallthrough
	case "desc":
		*e = GetSpacesSpaceIDFoldersIDInvoicesSortOrderEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSpacesSpaceIDFoldersIDInvoicesSortOrderEnum: %s", s)
	}
}

type GetSpacesSpaceIDFoldersIDInvoicesQueryParams struct {
	// value of AccountedOn (boolean available but not range)
	AccountedOn *string `queryParam:"style=form,explode=true,name=AccountedOn"`
	// amount before VAT
	BeforeVAT *float64 `queryParam:"style=form,explode=true,name=BeforeVAT"`
	// date range of the documents
	Date *string `queryParam:"style=form,explode=true,name=Date"`
	// date due payment
	DueDate *string `queryParam:"style=form,explode=true,name=DueDate"`
	// json object to filter extend data
	Extend *string `queryParam:"style=form,explode=true,name=Extend"`
	// date range of attachment
	FolderDate *string `queryParam:"style=form,explode=true,name=FolderDate"`
	// amount incl. VAT
	InclVAT *float64 `queryParam:"style=form,explode=true,name=InclVAT"`
	// range date of invoice
	InvoiceDate *string `queryParam:"style=form,explode=true,name=InvoiceDate"`
	// Number of the invoice
	Number *string `queryParam:"style=form,explode=true,name=Number"`
	// date of payment (boolean and valid available)
	PaymentDate *string `queryParam:"style=form,explode=true,name=PaymentDate"`
	// index range of the results
	Range *string `queryParam:"style=form,explode=true,name=Range"`
	// name of value for sort
	SortName *GetSpacesSpaceIDFoldersIDInvoicesSortNameEnum `queryParam:"style=form,explode=true,name=SortName"`
	// order of sort (if absent default is asc)
	SortOrder *GetSpacesSpaceIDFoldersIDInvoicesSortOrderEnum `queryParam:"style=form,explode=true,name=SortOrder"`
	// Title of the documents
	Title *string `queryParam:"style=form,explode=true,name=Title"`
	// If present returns also the data extend
	WithExtend *string `queryParam:"style=form,explode=true,name=WithExtend"`
}

type GetSpacesSpaceIDFoldersIDInvoicesRequest struct {
	PathParams  GetSpacesSpaceIDFoldersIDInvoicesPathParams
	QueryParams GetSpacesSpaceIDFoldersIDInvoicesQueryParams
}

type GetSpacesSpaceIDFoldersIDInvoicesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// A list of invoices of the folder  (if the folder is the root folder (Customers of Providers) the FolderId, the Designation and the Contracting  of the contract are also returned)
	GetSpacesSpaceIDFoldersIDInvoices200ApplicationJSONAllOfs []shared.Invoice
}
