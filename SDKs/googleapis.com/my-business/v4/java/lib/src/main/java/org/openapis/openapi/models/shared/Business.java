/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Business - Features of the property of specific interest to the business traveler.
 */
public class Business {
    /**
     * Business center. A designated room at the hotel with one or more desks and equipped with guest-use computers, printers, fax machines and/or photocopiers. May or may not be open 24/7. May or may not require a key to access. Not a meeting room or conference room.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("businessCenter")
    public Boolean businessCenter;

    public Business withBusinessCenter(Boolean businessCenter) {
        this.businessCenter = businessCenter;
        return this;
    }
    
    /**
     * Business center exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("businessCenterException")
    public BusinessBusinessCenterExceptionEnum businessCenterException;

    public Business withBusinessCenterException(BusinessBusinessCenterExceptionEnum businessCenterException) {
        this.businessCenterException = businessCenterException;
        return this;
    }
    
    /**
     * Meeting rooms. Rooms at the hotel designated for business-related gatherings. Rooms are usually equipped with tables or desks, office chairs and audio/visual facilities to allow for presentations and conference calls. Also known as conference rooms.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("meetingRooms")
    public Boolean meetingRooms;

    public Business withMeetingRooms(Boolean meetingRooms) {
        this.meetingRooms = meetingRooms;
        return this;
    }
    
    /**
     * Meeting rooms count. The number of meeting rooms at the property.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("meetingRoomsCount")
    public Integer meetingRoomsCount;

    public Business withMeetingRoomsCount(Integer meetingRoomsCount) {
        this.meetingRoomsCount = meetingRoomsCount;
        return this;
    }
    
    /**
     * Meeting rooms count exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("meetingRoomsCountException")
    public BusinessMeetingRoomsCountExceptionEnum meetingRoomsCountException;

    public Business withMeetingRoomsCountException(BusinessMeetingRoomsCountExceptionEnum meetingRoomsCountException) {
        this.meetingRoomsCountException = meetingRoomsCountException;
        return this;
    }
    
    /**
     * Meeting rooms exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("meetingRoomsException")
    public BusinessMeetingRoomsExceptionEnum meetingRoomsException;

    public Business withMeetingRoomsException(BusinessMeetingRoomsExceptionEnum meetingRoomsException) {
        this.meetingRoomsException = meetingRoomsException;
        return this;
    }
    
    public Business(){}
}
