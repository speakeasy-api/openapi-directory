// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ManageEventActionEnum string

const (
	ManageEventActionEnumCreate ManageEventActionEnum = "create"
	ManageEventActionEnumFire   ManageEventActionEnum = "fire"
	ManageEventActionEnumChange ManageEventActionEnum = "change"
	ManageEventActionEnumDelete ManageEventActionEnum = "delete"
)

func (e ManageEventActionEnum) ToPointer() *ManageEventActionEnum {
	return &e
}

func (e *ManageEventActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "create":
		fallthrough
	case "fire":
		fallthrough
	case "change":
		fallthrough
	case "delete":
		*e = ManageEventActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ManageEventActionEnum: %v", v)
	}
}

// ManageEvent - Collaborator user id and permission type
type ManageEvent struct {
	Action       *ManageEventActionEnum `json:"action,omitempty"`
	ActionParams map[string]interface{} `json:"action_params,omitempty"`
	Name         *string                `json:"name,omitempty"`
}
