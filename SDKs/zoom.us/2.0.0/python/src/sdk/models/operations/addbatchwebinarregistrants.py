"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class AddBatchWebinarRegistrantsSecurity:
    
    bearer: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'Authorization' }})  
    o_auth: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddBatchWebinarRegistrantsApplicationJSONRegistrants:
    
    email: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email') }})
    r"""Email address of the registrant."""  
    first_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_name') }})
    r"""First name of the registrant."""  
    last_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_name'), 'exclude': lambda f: f is None }})
    r"""Last name of the registrant."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddBatchWebinarRegistrantsApplicationJSON:
    
    auto_approve: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_approve'), 'exclude': lambda f: f is None }})
    r"""If a meeting was scheduled with approval_type `1` (manual approval), but you would like to automatically approve the registrants that are added via this API, you can set the value of this field to `true`.
    
    You **cannot** use this field to change approval setting for a meeting  that was originally scheduled with approval_type `0` (automatic approval).
    """  
    registrants: Optional[list[AddBatchWebinarRegistrantsApplicationJSONRegistrants]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registrants'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class AddBatchWebinarRegistrantsRequest:
    
    webinar_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'webinarId', 'style': 'simple', 'explode': False }})
    r"""Unique identifier of the webinar."""  
    request_body: Optional[AddBatchWebinarRegistrantsApplicationJSON] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class AddBatchWebinarRegistrants200ApplicationXMLRegistrants:
    
    email: Optional[str] = dataclasses.field(default=None)
    r"""Email address of the registrant."""  
    join_url: Optional[str] = dataclasses.field(default=None)
    r"""Unique URL using which registrant can join the webinar."""  
    registrant_id: Optional[str] = dataclasses.field(default=None)
    r"""Unique identifier of the registrant."""  
    

@dataclasses.dataclass
class AddBatchWebinarRegistrants200ApplicationXML:
    r"""**HTTP Status Code:** `200` **OK** <br>
    Registrants added.
    """
    
    registrants: Optional[list[AddBatchWebinarRegistrants200ApplicationXMLRegistrants]] = dataclasses.field(default=None)  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddBatchWebinarRegistrants200ApplicationJSONRegistrants:
    
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""Email address of the registrant."""  
    join_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('join_url'), 'exclude': lambda f: f is None }})
    r"""Unique URL using which registrant can join the webinar."""  
    registrant_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registrant_id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier of the registrant."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddBatchWebinarRegistrants200ApplicationJSON:
    r"""**HTTP Status Code:** `200` **OK** <br>
    Registrants added.
    """
    
    registrants: Optional[list[AddBatchWebinarRegistrants200ApplicationJSONRegistrants]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registrants'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class AddBatchWebinarRegistrantsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    add_batch_webinar_registrants_200_application_json_object: Optional[AddBatchWebinarRegistrants200ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200` **OK** <br>
    Registrants added.
    """  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    