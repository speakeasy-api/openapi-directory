<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Dcim 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * dcimChoicesList
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimChoicesListResponse
     */
	public function dcimChoicesList(
    ): \OpenAPI\OpenAPI\Models\Operations\DcimChoicesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/_choices/');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimChoicesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * dcimChoicesRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimChoicesReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimChoicesReadResponse
     */
	public function dcimChoicesRead(
        \OpenAPI\OpenAPI\Models\Operations\DcimChoicesReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimChoicesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/_choices/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimChoicesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimChoicesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * This endpoint allows a user to determine what device (if any) is connected to a given peer device and peer
     * interface. This is useful in a situation where a device boots with no configuration, but can detect its neighbors
     * via a protocol such as LLDP. Two query parameters must be included in the request:
     * 
     * * `peer_device`: The name of the peer device
     * * `peer_interface`: The name of the peer interface
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimConnectedDeviceListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimConnectedDeviceListResponse
     */
	public function dcimConnectedDeviceList(
        \OpenAPI\OpenAPI\Models\Operations\DcimConnectedDeviceListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimConnectedDeviceListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/connected-device/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DcimConnectedDeviceListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimConnectedDeviceListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->device = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Device', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimConsoleConnectionsList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimConsoleConnectionsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimConsoleConnectionsListResponse
     */
	public function dcimConsoleConnectionsList(
        \OpenAPI\OpenAPI\Models\Operations\DcimConsoleConnectionsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimConsoleConnectionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/console-connections/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DcimConsoleConnectionsListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimConsoleConnectionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dcimConsoleConnectionsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DcimConsoleConnectionsList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimConsolePortTemplatesCreate
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\WritableConsolePortTemplateInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortTemplatesCreateResponse
     */
	public function dcimConsolePortTemplatesCreate(
        \OpenAPI\OpenAPI\Models\Shared\WritableConsolePortTemplateInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortTemplatesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/console-port-templates/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortTemplatesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->consolePortTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConsolePortTemplate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimConsolePortTemplatesDelete
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortTemplatesDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortTemplatesDeleteResponse
     */
	public function dcimConsolePortTemplatesDelete(
        \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortTemplatesDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortTemplatesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/console-port-templates/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortTemplatesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortTemplatesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * dcimConsolePortTemplatesList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortTemplatesListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortTemplatesListResponse
     */
	public function dcimConsolePortTemplatesList(
        \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortTemplatesListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortTemplatesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/console-port-templates/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DcimConsolePortTemplatesListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortTemplatesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dcimConsolePortTemplatesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DcimConsolePortTemplatesList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimConsolePortTemplatesPartialUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortTemplatesPartialUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortTemplatesPartialUpdateResponse
     */
	public function dcimConsolePortTemplatesPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortTemplatesPartialUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortTemplatesPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/console-port-templates/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortTemplatesPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableConsolePortTemplateInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortTemplatesPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->consolePortTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConsolePortTemplate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimConsolePortTemplatesRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortTemplatesReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortTemplatesReadResponse
     */
	public function dcimConsolePortTemplatesRead(
        \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortTemplatesReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortTemplatesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/console-port-templates/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortTemplatesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortTemplatesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->consolePortTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConsolePortTemplate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimConsolePortTemplatesUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortTemplatesUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortTemplatesUpdateResponse
     */
	public function dcimConsolePortTemplatesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortTemplatesUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortTemplatesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/console-port-templates/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortTemplatesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableConsolePortTemplateInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortTemplatesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->consolePortTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConsolePortTemplate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimConsolePortsCreate
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\WritableConsolePortInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortsCreateResponse
     */
	public function dcimConsolePortsCreate(
        \OpenAPI\OpenAPI\Models\Shared\WritableConsolePortInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/console-ports/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->consolePort = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConsolePort', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimConsolePortsDelete
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortsDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortsDeleteResponse
     */
	public function dcimConsolePortsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortsDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/console-ports/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * dcimConsolePortsList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortsListResponse
     */
	public function dcimConsolePortsList(
        \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/console-ports/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DcimConsolePortsListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dcimConsolePortsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DcimConsolePortsList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimConsolePortsPartialUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortsPartialUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortsPartialUpdateResponse
     */
	public function dcimConsolePortsPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortsPartialUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortsPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/console-ports/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortsPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableConsolePortInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortsPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->consolePort = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConsolePort', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimConsolePortsRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortsReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortsReadResponse
     */
	public function dcimConsolePortsRead(
        \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortsReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/console-ports/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortsReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->consolePort = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConsolePort', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimConsolePortsUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortsUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortsUpdateResponse
     */
	public function dcimConsolePortsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortsUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/console-ports/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableConsolePortInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimConsolePortsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->consolePort = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConsolePort', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimConsoleServerPortTemplatesCreate
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\WritableConsoleServerPortTemplateInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortTemplatesCreateResponse
     */
	public function dcimConsoleServerPortTemplatesCreate(
        \OpenAPI\OpenAPI\Models\Shared\WritableConsoleServerPortTemplateInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortTemplatesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/console-server-port-templates/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortTemplatesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->consoleServerPortTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConsoleServerPortTemplate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimConsoleServerPortTemplatesDelete
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortTemplatesDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortTemplatesDeleteResponse
     */
	public function dcimConsoleServerPortTemplatesDelete(
        \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortTemplatesDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortTemplatesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/console-server-port-templates/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortTemplatesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortTemplatesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * dcimConsoleServerPortTemplatesList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortTemplatesListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortTemplatesListResponse
     */
	public function dcimConsoleServerPortTemplatesList(
        \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortTemplatesListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortTemplatesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/console-server-port-templates/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortTemplatesListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortTemplatesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dcimConsoleServerPortTemplatesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortTemplatesList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimConsoleServerPortTemplatesPartialUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortTemplatesPartialUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortTemplatesPartialUpdateResponse
     */
	public function dcimConsoleServerPortTemplatesPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortTemplatesPartialUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortTemplatesPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/console-server-port-templates/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortTemplatesPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableConsoleServerPortTemplateInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortTemplatesPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->consoleServerPortTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConsoleServerPortTemplate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimConsoleServerPortTemplatesRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortTemplatesReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortTemplatesReadResponse
     */
	public function dcimConsoleServerPortTemplatesRead(
        \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortTemplatesReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortTemplatesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/console-server-port-templates/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortTemplatesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortTemplatesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->consoleServerPortTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConsoleServerPortTemplate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimConsoleServerPortTemplatesUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortTemplatesUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortTemplatesUpdateResponse
     */
	public function dcimConsoleServerPortTemplatesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortTemplatesUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortTemplatesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/console-server-port-templates/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortTemplatesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableConsoleServerPortTemplateInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortTemplatesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->consoleServerPortTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConsoleServerPortTemplate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimConsoleServerPortsCreate
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\WritableConsoleServerPortInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortsCreateResponse
     */
	public function dcimConsoleServerPortsCreate(
        \OpenAPI\OpenAPI\Models\Shared\WritableConsoleServerPortInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/console-server-ports/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->consoleServerPort = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConsoleServerPort', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimConsoleServerPortsDelete
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortsDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortsDeleteResponse
     */
	public function dcimConsoleServerPortsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortsDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/console-server-ports/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * dcimConsoleServerPortsList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortsListResponse
     */
	public function dcimConsoleServerPortsList(
        \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/console-server-ports/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortsListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dcimConsoleServerPortsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortsList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimConsoleServerPortsPartialUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortsPartialUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortsPartialUpdateResponse
     */
	public function dcimConsoleServerPortsPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortsPartialUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortsPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/console-server-ports/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortsPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableConsoleServerPortInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortsPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->consoleServerPort = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConsoleServerPort', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimConsoleServerPortsRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortsReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortsReadResponse
     */
	public function dcimConsoleServerPortsRead(
        \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortsReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/console-server-ports/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortsReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->consoleServerPort = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConsoleServerPort', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimConsoleServerPortsUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortsUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortsUpdateResponse
     */
	public function dcimConsoleServerPortsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortsUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/console-server-ports/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableConsoleServerPortInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimConsoleServerPortsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->consoleServerPort = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConsoleServerPort', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimDeviceBayTemplatesCreate
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\WritableDeviceBayTemplateInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBayTemplatesCreateResponse
     */
	public function dcimDeviceBayTemplatesCreate(
        \OpenAPI\OpenAPI\Models\Shared\WritableDeviceBayTemplateInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBayTemplatesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/device-bay-templates/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBayTemplatesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deviceBayTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeviceBayTemplate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimDeviceBayTemplatesDelete
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBayTemplatesDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBayTemplatesDeleteResponse
     */
	public function dcimDeviceBayTemplatesDelete(
        \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBayTemplatesDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBayTemplatesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/device-bay-templates/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBayTemplatesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBayTemplatesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * dcimDeviceBayTemplatesList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBayTemplatesListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBayTemplatesListResponse
     */
	public function dcimDeviceBayTemplatesList(
        \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBayTemplatesListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBayTemplatesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/device-bay-templates/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DcimDeviceBayTemplatesListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBayTemplatesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dcimDeviceBayTemplatesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DcimDeviceBayTemplatesList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimDeviceBayTemplatesPartialUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBayTemplatesPartialUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBayTemplatesPartialUpdateResponse
     */
	public function dcimDeviceBayTemplatesPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBayTemplatesPartialUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBayTemplatesPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/device-bay-templates/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBayTemplatesPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableDeviceBayTemplateInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBayTemplatesPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deviceBayTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeviceBayTemplate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimDeviceBayTemplatesRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBayTemplatesReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBayTemplatesReadResponse
     */
	public function dcimDeviceBayTemplatesRead(
        \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBayTemplatesReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBayTemplatesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/device-bay-templates/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBayTemplatesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBayTemplatesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deviceBayTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeviceBayTemplate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimDeviceBayTemplatesUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBayTemplatesUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBayTemplatesUpdateResponse
     */
	public function dcimDeviceBayTemplatesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBayTemplatesUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBayTemplatesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/device-bay-templates/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBayTemplatesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableDeviceBayTemplateInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBayTemplatesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deviceBayTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeviceBayTemplate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimDeviceBaysCreate
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\WritableDeviceBayInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBaysCreateResponse
     */
	public function dcimDeviceBaysCreate(
        \OpenAPI\OpenAPI\Models\Shared\WritableDeviceBayInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBaysCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/device-bays/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBaysCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deviceBay = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeviceBay', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimDeviceBaysDelete
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBaysDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBaysDeleteResponse
     */
	public function dcimDeviceBaysDelete(
        \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBaysDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBaysDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/device-bays/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBaysDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBaysDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * dcimDeviceBaysList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBaysListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBaysListResponse
     */
	public function dcimDeviceBaysList(
        \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBaysListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBaysListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/device-bays/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DcimDeviceBaysListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBaysListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dcimDeviceBaysList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DcimDeviceBaysList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimDeviceBaysPartialUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBaysPartialUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBaysPartialUpdateResponse
     */
	public function dcimDeviceBaysPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBaysPartialUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBaysPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/device-bays/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBaysPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableDeviceBayInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBaysPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deviceBay = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeviceBay', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimDeviceBaysRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBaysReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBaysReadResponse
     */
	public function dcimDeviceBaysRead(
        \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBaysReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBaysReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/device-bays/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBaysReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBaysReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deviceBay = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeviceBay', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimDeviceBaysUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBaysUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBaysUpdateResponse
     */
	public function dcimDeviceBaysUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBaysUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBaysUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/device-bays/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBaysUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableDeviceBayInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimDeviceBaysUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deviceBay = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeviceBay', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimDeviceRolesCreate
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\DeviceRoleInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimDeviceRolesCreateResponse
     */
	public function dcimDeviceRolesCreate(
        \OpenAPI\OpenAPI\Models\Shared\DeviceRoleInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimDeviceRolesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/device-roles/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimDeviceRolesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deviceRole = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeviceRole', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimDeviceRolesDelete
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimDeviceRolesDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimDeviceRolesDeleteResponse
     */
	public function dcimDeviceRolesDelete(
        \OpenAPI\OpenAPI\Models\Operations\DcimDeviceRolesDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimDeviceRolesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/device-roles/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimDeviceRolesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimDeviceRolesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * dcimDeviceRolesList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimDeviceRolesListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimDeviceRolesListResponse
     */
	public function dcimDeviceRolesList(
        \OpenAPI\OpenAPI\Models\Operations\DcimDeviceRolesListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimDeviceRolesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/device-roles/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DcimDeviceRolesListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimDeviceRolesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dcimDeviceRolesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DcimDeviceRolesList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimDeviceRolesPartialUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimDeviceRolesPartialUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimDeviceRolesPartialUpdateResponse
     */
	public function dcimDeviceRolesPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimDeviceRolesPartialUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimDeviceRolesPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/device-roles/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimDeviceRolesPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deviceRoleInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimDeviceRolesPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deviceRole = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeviceRole', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimDeviceRolesRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimDeviceRolesReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimDeviceRolesReadResponse
     */
	public function dcimDeviceRolesRead(
        \OpenAPI\OpenAPI\Models\Operations\DcimDeviceRolesReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimDeviceRolesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/device-roles/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimDeviceRolesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimDeviceRolesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deviceRole = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeviceRole', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimDeviceRolesUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimDeviceRolesUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimDeviceRolesUpdateResponse
     */
	public function dcimDeviceRolesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimDeviceRolesUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimDeviceRolesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/device-roles/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimDeviceRolesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deviceRoleInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimDeviceRolesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deviceRole = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeviceRole', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimDeviceTypesCreate
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\WritableDeviceTypeInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimDeviceTypesCreateResponse
     */
	public function dcimDeviceTypesCreate(
        \OpenAPI\OpenAPI\Models\Shared\WritableDeviceTypeInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimDeviceTypesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/device-types/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimDeviceTypesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deviceType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeviceType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimDeviceTypesDelete
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimDeviceTypesDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimDeviceTypesDeleteResponse
     */
	public function dcimDeviceTypesDelete(
        \OpenAPI\OpenAPI\Models\Operations\DcimDeviceTypesDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimDeviceTypesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/device-types/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimDeviceTypesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimDeviceTypesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * dcimDeviceTypesList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimDeviceTypesListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimDeviceTypesListResponse
     */
	public function dcimDeviceTypesList(
        \OpenAPI\OpenAPI\Models\Operations\DcimDeviceTypesListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimDeviceTypesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/device-types/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DcimDeviceTypesListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimDeviceTypesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dcimDeviceTypesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DcimDeviceTypesList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimDeviceTypesPartialUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimDeviceTypesPartialUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimDeviceTypesPartialUpdateResponse
     */
	public function dcimDeviceTypesPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimDeviceTypesPartialUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimDeviceTypesPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/device-types/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimDeviceTypesPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableDeviceTypeInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimDeviceTypesPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deviceType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeviceType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimDeviceTypesRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimDeviceTypesReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimDeviceTypesReadResponse
     */
	public function dcimDeviceTypesRead(
        \OpenAPI\OpenAPI\Models\Operations\DcimDeviceTypesReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimDeviceTypesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/device-types/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimDeviceTypesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimDeviceTypesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deviceType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeviceType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimDeviceTypesUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimDeviceTypesUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimDeviceTypesUpdateResponse
     */
	public function dcimDeviceTypesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimDeviceTypesUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimDeviceTypesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/device-types/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimDeviceTypesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableDeviceTypeInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimDeviceTypesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deviceType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeviceType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimDevicesCreate
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\WritableDeviceInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimDevicesCreateResponse
     */
	public function dcimDevicesCreate(
        \OpenAPI\OpenAPI\Models\Shared\WritableDeviceInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimDevicesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/devices/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimDevicesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->device = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Device', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimDevicesDelete
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimDevicesDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimDevicesDeleteResponse
     */
	public function dcimDevicesDelete(
        \OpenAPI\OpenAPI\Models\Operations\DcimDevicesDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimDevicesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/devices/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimDevicesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimDevicesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * dcimDevicesList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimDevicesListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimDevicesListResponse
     */
	public function dcimDevicesList(
        \OpenAPI\OpenAPI\Models\Operations\DcimDevicesListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimDevicesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/devices/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DcimDevicesListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimDevicesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dcimDevicesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DcimDevicesList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Execute a NAPALM method on a Device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimDevicesNapalmRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimDevicesNapalmResponse
     */
	public function dcimDevicesNapalm(
        \OpenAPI\OpenAPI\Models\Operations\DcimDevicesNapalmRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimDevicesNapalmResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/devices/{id}/napalm/', \OpenAPI\OpenAPI\Models\Operations\DcimDevicesNapalmRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimDevicesNapalmResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->device = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Device', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimDevicesPartialUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimDevicesPartialUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimDevicesPartialUpdateResponse
     */
	public function dcimDevicesPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimDevicesPartialUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimDevicesPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/devices/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimDevicesPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableDeviceInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimDevicesPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->device = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Device', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimDevicesRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimDevicesReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimDevicesReadResponse
     */
	public function dcimDevicesRead(
        \OpenAPI\OpenAPI\Models\Operations\DcimDevicesReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimDevicesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/devices/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimDevicesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimDevicesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deviceWithConfigContext = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeviceWithConfigContext', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimDevicesUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimDevicesUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimDevicesUpdateResponse
     */
	public function dcimDevicesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimDevicesUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimDevicesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/devices/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimDevicesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableDeviceInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimDevicesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->device = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Device', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimInterfaceConnectionsCreate
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\WritableInterfaceConnectionInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceConnectionsCreateResponse
     */
	public function dcimInterfaceConnectionsCreate(
        \OpenAPI\OpenAPI\Models\Shared\WritableInterfaceConnectionInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceConnectionsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/interface-connections/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceConnectionsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->interfaceConnection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InterfaceConnection', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimInterfaceConnectionsDelete
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceConnectionsDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceConnectionsDeleteResponse
     */
	public function dcimInterfaceConnectionsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceConnectionsDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceConnectionsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/interface-connections/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceConnectionsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceConnectionsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * dcimInterfaceConnectionsList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceConnectionsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceConnectionsListResponse
     */
	public function dcimInterfaceConnectionsList(
        \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceConnectionsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceConnectionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/interface-connections/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DcimInterfaceConnectionsListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceConnectionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dcimInterfaceConnectionsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DcimInterfaceConnectionsList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimInterfaceConnectionsPartialUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceConnectionsPartialUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceConnectionsPartialUpdateResponse
     */
	public function dcimInterfaceConnectionsPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceConnectionsPartialUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceConnectionsPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/interface-connections/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceConnectionsPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableInterfaceConnectionInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceConnectionsPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->interfaceConnection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InterfaceConnection', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimInterfaceConnectionsRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceConnectionsReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceConnectionsReadResponse
     */
	public function dcimInterfaceConnectionsRead(
        \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceConnectionsReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceConnectionsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/interface-connections/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceConnectionsReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceConnectionsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->interfaceConnection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InterfaceConnection', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimInterfaceConnectionsUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceConnectionsUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceConnectionsUpdateResponse
     */
	public function dcimInterfaceConnectionsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceConnectionsUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceConnectionsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/interface-connections/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceConnectionsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableInterfaceConnectionInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceConnectionsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->interfaceConnection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InterfaceConnection', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimInterfaceTemplatesCreate
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\WritableInterfaceTemplateInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceTemplatesCreateResponse
     */
	public function dcimInterfaceTemplatesCreate(
        \OpenAPI\OpenAPI\Models\Shared\WritableInterfaceTemplateInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceTemplatesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/interface-templates/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceTemplatesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->interfaceTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InterfaceTemplate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimInterfaceTemplatesDelete
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceTemplatesDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceTemplatesDeleteResponse
     */
	public function dcimInterfaceTemplatesDelete(
        \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceTemplatesDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceTemplatesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/interface-templates/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceTemplatesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceTemplatesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * dcimInterfaceTemplatesList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceTemplatesListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceTemplatesListResponse
     */
	public function dcimInterfaceTemplatesList(
        \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceTemplatesListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceTemplatesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/interface-templates/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DcimInterfaceTemplatesListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceTemplatesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dcimInterfaceTemplatesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DcimInterfaceTemplatesList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimInterfaceTemplatesPartialUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceTemplatesPartialUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceTemplatesPartialUpdateResponse
     */
	public function dcimInterfaceTemplatesPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceTemplatesPartialUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceTemplatesPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/interface-templates/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceTemplatesPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableInterfaceTemplateInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceTemplatesPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->interfaceTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InterfaceTemplate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimInterfaceTemplatesRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceTemplatesReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceTemplatesReadResponse
     */
	public function dcimInterfaceTemplatesRead(
        \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceTemplatesReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceTemplatesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/interface-templates/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceTemplatesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceTemplatesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->interfaceTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InterfaceTemplate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimInterfaceTemplatesUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceTemplatesUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceTemplatesUpdateResponse
     */
	public function dcimInterfaceTemplatesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceTemplatesUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceTemplatesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/interface-templates/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceTemplatesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableInterfaceTemplateInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimInterfaceTemplatesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->interfaceTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InterfaceTemplate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimInterfacesCreate
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\WritableInterfaceInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimInterfacesCreateResponse
     */
	public function dcimInterfacesCreate(
        \OpenAPI\OpenAPI\Models\Shared\WritableInterfaceInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimInterfacesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/interfaces/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimInterfacesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->interface = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InterfaceT', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimInterfacesDelete
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimInterfacesDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimInterfacesDeleteResponse
     */
	public function dcimInterfacesDelete(
        \OpenAPI\OpenAPI\Models\Operations\DcimInterfacesDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimInterfacesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/interfaces/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimInterfacesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimInterfacesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * A convenience method for rendering graphs for a particular interface.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimInterfacesGraphsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimInterfacesGraphsResponse
     */
	public function dcimInterfacesGraphs(
        \OpenAPI\OpenAPI\Models\Operations\DcimInterfacesGraphsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimInterfacesGraphsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/interfaces/{id}/graphs/', \OpenAPI\OpenAPI\Models\Operations\DcimInterfacesGraphsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimInterfacesGraphsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->interface = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InterfaceT', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimInterfacesList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimInterfacesListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimInterfacesListResponse
     */
	public function dcimInterfacesList(
        \OpenAPI\OpenAPI\Models\Operations\DcimInterfacesListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimInterfacesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/interfaces/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DcimInterfacesListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimInterfacesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dcimInterfacesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DcimInterfacesList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimInterfacesPartialUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimInterfacesPartialUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimInterfacesPartialUpdateResponse
     */
	public function dcimInterfacesPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimInterfacesPartialUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimInterfacesPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/interfaces/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimInterfacesPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableInterfaceInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimInterfacesPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->interface = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InterfaceT', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimInterfacesRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimInterfacesReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimInterfacesReadResponse
     */
	public function dcimInterfacesRead(
        \OpenAPI\OpenAPI\Models\Operations\DcimInterfacesReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimInterfacesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/interfaces/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimInterfacesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimInterfacesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->interface = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InterfaceT', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimInterfacesUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimInterfacesUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimInterfacesUpdateResponse
     */
	public function dcimInterfacesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimInterfacesUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimInterfacesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/interfaces/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimInterfacesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableInterfaceInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimInterfacesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->interface = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InterfaceT', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimInventoryItemsCreate
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\WritableInventoryItemInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimInventoryItemsCreateResponse
     */
	public function dcimInventoryItemsCreate(
        \OpenAPI\OpenAPI\Models\Shared\WritableInventoryItemInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimInventoryItemsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/inventory-items/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimInventoryItemsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inventoryItem = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InventoryItem', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimInventoryItemsDelete
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimInventoryItemsDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimInventoryItemsDeleteResponse
     */
	public function dcimInventoryItemsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DcimInventoryItemsDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimInventoryItemsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/inventory-items/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimInventoryItemsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimInventoryItemsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * dcimInventoryItemsList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimInventoryItemsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimInventoryItemsListResponse
     */
	public function dcimInventoryItemsList(
        \OpenAPI\OpenAPI\Models\Operations\DcimInventoryItemsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimInventoryItemsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/inventory-items/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DcimInventoryItemsListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimInventoryItemsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dcimInventoryItemsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DcimInventoryItemsList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimInventoryItemsPartialUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimInventoryItemsPartialUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimInventoryItemsPartialUpdateResponse
     */
	public function dcimInventoryItemsPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimInventoryItemsPartialUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimInventoryItemsPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/inventory-items/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimInventoryItemsPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableInventoryItemInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimInventoryItemsPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inventoryItem = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InventoryItem', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimInventoryItemsRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimInventoryItemsReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimInventoryItemsReadResponse
     */
	public function dcimInventoryItemsRead(
        \OpenAPI\OpenAPI\Models\Operations\DcimInventoryItemsReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimInventoryItemsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/inventory-items/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimInventoryItemsReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimInventoryItemsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inventoryItem = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InventoryItem', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimInventoryItemsUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimInventoryItemsUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimInventoryItemsUpdateResponse
     */
	public function dcimInventoryItemsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimInventoryItemsUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimInventoryItemsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/inventory-items/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimInventoryItemsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableInventoryItemInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimInventoryItemsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inventoryItem = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InventoryItem', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimManufacturersCreate
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ManufacturerInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimManufacturersCreateResponse
     */
	public function dcimManufacturersCreate(
        \OpenAPI\OpenAPI\Models\Shared\ManufacturerInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimManufacturersCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/manufacturers/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimManufacturersCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->manufacturer = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Manufacturer', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimManufacturersDelete
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimManufacturersDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimManufacturersDeleteResponse
     */
	public function dcimManufacturersDelete(
        \OpenAPI\OpenAPI\Models\Operations\DcimManufacturersDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimManufacturersDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/manufacturers/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimManufacturersDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimManufacturersDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * dcimManufacturersList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimManufacturersListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimManufacturersListResponse
     */
	public function dcimManufacturersList(
        \OpenAPI\OpenAPI\Models\Operations\DcimManufacturersListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimManufacturersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/manufacturers/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DcimManufacturersListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimManufacturersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dcimManufacturersList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DcimManufacturersList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimManufacturersPartialUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimManufacturersPartialUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimManufacturersPartialUpdateResponse
     */
	public function dcimManufacturersPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimManufacturersPartialUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimManufacturersPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/manufacturers/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimManufacturersPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "manufacturerInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimManufacturersPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->manufacturer = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Manufacturer', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimManufacturersRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimManufacturersReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimManufacturersReadResponse
     */
	public function dcimManufacturersRead(
        \OpenAPI\OpenAPI\Models\Operations\DcimManufacturersReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimManufacturersReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/manufacturers/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimManufacturersReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimManufacturersReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->manufacturer = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Manufacturer', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimManufacturersUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimManufacturersUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimManufacturersUpdateResponse
     */
	public function dcimManufacturersUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimManufacturersUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimManufacturersUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/manufacturers/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimManufacturersUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "manufacturerInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimManufacturersUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->manufacturer = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Manufacturer', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimPlatformsCreate
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\WritablePlatformInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimPlatformsCreateResponse
     */
	public function dcimPlatformsCreate(
        \OpenAPI\OpenAPI\Models\Shared\WritablePlatformInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimPlatformsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/platforms/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimPlatformsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->platform = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Platform', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimPlatformsDelete
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimPlatformsDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimPlatformsDeleteResponse
     */
	public function dcimPlatformsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DcimPlatformsDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimPlatformsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/platforms/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimPlatformsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimPlatformsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * dcimPlatformsList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimPlatformsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimPlatformsListResponse
     */
	public function dcimPlatformsList(
        \OpenAPI\OpenAPI\Models\Operations\DcimPlatformsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimPlatformsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/platforms/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DcimPlatformsListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimPlatformsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dcimPlatformsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DcimPlatformsList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimPlatformsPartialUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimPlatformsPartialUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimPlatformsPartialUpdateResponse
     */
	public function dcimPlatformsPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimPlatformsPartialUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimPlatformsPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/platforms/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimPlatformsPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writablePlatformInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimPlatformsPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->platform = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Platform', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimPlatformsRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimPlatformsReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimPlatformsReadResponse
     */
	public function dcimPlatformsRead(
        \OpenAPI\OpenAPI\Models\Operations\DcimPlatformsReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimPlatformsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/platforms/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimPlatformsReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimPlatformsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->platform = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Platform', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimPlatformsUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimPlatformsUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimPlatformsUpdateResponse
     */
	public function dcimPlatformsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimPlatformsUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimPlatformsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/platforms/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimPlatformsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writablePlatformInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimPlatformsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->platform = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Platform', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimPowerConnectionsList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimPowerConnectionsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimPowerConnectionsListResponse
     */
	public function dcimPowerConnectionsList(
        \OpenAPI\OpenAPI\Models\Operations\DcimPowerConnectionsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimPowerConnectionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/power-connections/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DcimPowerConnectionsListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimPowerConnectionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dcimPowerConnectionsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DcimPowerConnectionsList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimPowerOutletTemplatesCreate
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\WritablePowerOutletTemplateInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletTemplatesCreateResponse
     */
	public function dcimPowerOutletTemplatesCreate(
        \OpenAPI\OpenAPI\Models\Shared\WritablePowerOutletTemplateInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletTemplatesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/power-outlet-templates/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletTemplatesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->powerOutletTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PowerOutletTemplate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimPowerOutletTemplatesDelete
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletTemplatesDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletTemplatesDeleteResponse
     */
	public function dcimPowerOutletTemplatesDelete(
        \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletTemplatesDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletTemplatesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/power-outlet-templates/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletTemplatesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletTemplatesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * dcimPowerOutletTemplatesList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletTemplatesListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletTemplatesListResponse
     */
	public function dcimPowerOutletTemplatesList(
        \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletTemplatesListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletTemplatesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/power-outlet-templates/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletTemplatesListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletTemplatesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dcimPowerOutletTemplatesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletTemplatesList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimPowerOutletTemplatesPartialUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletTemplatesPartialUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletTemplatesPartialUpdateResponse
     */
	public function dcimPowerOutletTemplatesPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletTemplatesPartialUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletTemplatesPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/power-outlet-templates/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletTemplatesPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writablePowerOutletTemplateInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletTemplatesPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->powerOutletTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PowerOutletTemplate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimPowerOutletTemplatesRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletTemplatesReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletTemplatesReadResponse
     */
	public function dcimPowerOutletTemplatesRead(
        \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletTemplatesReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletTemplatesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/power-outlet-templates/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletTemplatesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletTemplatesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->powerOutletTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PowerOutletTemplate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimPowerOutletTemplatesUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletTemplatesUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletTemplatesUpdateResponse
     */
	public function dcimPowerOutletTemplatesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletTemplatesUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletTemplatesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/power-outlet-templates/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletTemplatesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writablePowerOutletTemplateInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletTemplatesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->powerOutletTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PowerOutletTemplate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimPowerOutletsCreate
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\WritablePowerOutletInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletsCreateResponse
     */
	public function dcimPowerOutletsCreate(
        \OpenAPI\OpenAPI\Models\Shared\WritablePowerOutletInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/power-outlets/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->powerOutlet = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PowerOutlet', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimPowerOutletsDelete
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletsDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletsDeleteResponse
     */
	public function dcimPowerOutletsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletsDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/power-outlets/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * dcimPowerOutletsList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletsListResponse
     */
	public function dcimPowerOutletsList(
        \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/power-outlets/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletsListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dcimPowerOutletsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletsList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimPowerOutletsPartialUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletsPartialUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletsPartialUpdateResponse
     */
	public function dcimPowerOutletsPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletsPartialUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletsPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/power-outlets/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletsPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writablePowerOutletInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletsPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->powerOutlet = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PowerOutlet', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimPowerOutletsRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletsReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletsReadResponse
     */
	public function dcimPowerOutletsRead(
        \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletsReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/power-outlets/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletsReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->powerOutlet = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PowerOutlet', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimPowerOutletsUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletsUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletsUpdateResponse
     */
	public function dcimPowerOutletsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletsUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/power-outlets/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writablePowerOutletInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimPowerOutletsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->powerOutlet = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PowerOutlet', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimPowerPortTemplatesCreate
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\WritablePowerPortTemplateInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortTemplatesCreateResponse
     */
	public function dcimPowerPortTemplatesCreate(
        \OpenAPI\OpenAPI\Models\Shared\WritablePowerPortTemplateInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortTemplatesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/power-port-templates/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortTemplatesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->powerPortTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PowerPortTemplate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimPowerPortTemplatesDelete
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortTemplatesDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortTemplatesDeleteResponse
     */
	public function dcimPowerPortTemplatesDelete(
        \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortTemplatesDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortTemplatesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/power-port-templates/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortTemplatesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortTemplatesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * dcimPowerPortTemplatesList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortTemplatesListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortTemplatesListResponse
     */
	public function dcimPowerPortTemplatesList(
        \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortTemplatesListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortTemplatesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/power-port-templates/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DcimPowerPortTemplatesListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortTemplatesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dcimPowerPortTemplatesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DcimPowerPortTemplatesList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimPowerPortTemplatesPartialUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortTemplatesPartialUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortTemplatesPartialUpdateResponse
     */
	public function dcimPowerPortTemplatesPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortTemplatesPartialUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortTemplatesPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/power-port-templates/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortTemplatesPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writablePowerPortTemplateInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortTemplatesPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->powerPortTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PowerPortTemplate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimPowerPortTemplatesRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortTemplatesReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortTemplatesReadResponse
     */
	public function dcimPowerPortTemplatesRead(
        \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortTemplatesReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortTemplatesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/power-port-templates/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortTemplatesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortTemplatesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->powerPortTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PowerPortTemplate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimPowerPortTemplatesUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortTemplatesUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortTemplatesUpdateResponse
     */
	public function dcimPowerPortTemplatesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortTemplatesUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortTemplatesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/power-port-templates/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortTemplatesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writablePowerPortTemplateInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortTemplatesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->powerPortTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PowerPortTemplate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimPowerPortsCreate
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\WritablePowerPortInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortsCreateResponse
     */
	public function dcimPowerPortsCreate(
        \OpenAPI\OpenAPI\Models\Shared\WritablePowerPortInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/power-ports/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->powerPort = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PowerPort', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimPowerPortsDelete
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortsDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortsDeleteResponse
     */
	public function dcimPowerPortsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortsDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/power-ports/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * dcimPowerPortsList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortsListResponse
     */
	public function dcimPowerPortsList(
        \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/power-ports/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DcimPowerPortsListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dcimPowerPortsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DcimPowerPortsList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimPowerPortsPartialUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortsPartialUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortsPartialUpdateResponse
     */
	public function dcimPowerPortsPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortsPartialUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortsPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/power-ports/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortsPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writablePowerPortInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortsPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->powerPort = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PowerPort', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimPowerPortsRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortsReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortsReadResponse
     */
	public function dcimPowerPortsRead(
        \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortsReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/power-ports/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortsReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->powerPort = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PowerPort', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimPowerPortsUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortsUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortsUpdateResponse
     */
	public function dcimPowerPortsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortsUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/power-ports/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writablePowerPortInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimPowerPortsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->powerPort = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PowerPort', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimRackGroupsCreate
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\WritableRackGroupInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimRackGroupsCreateResponse
     */
	public function dcimRackGroupsCreate(
        \OpenAPI\OpenAPI\Models\Shared\WritableRackGroupInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimRackGroupsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/rack-groups/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimRackGroupsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rackGroup = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RackGroup', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimRackGroupsDelete
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimRackGroupsDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimRackGroupsDeleteResponse
     */
	public function dcimRackGroupsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DcimRackGroupsDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimRackGroupsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/rack-groups/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimRackGroupsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimRackGroupsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * dcimRackGroupsList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimRackGroupsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimRackGroupsListResponse
     */
	public function dcimRackGroupsList(
        \OpenAPI\OpenAPI\Models\Operations\DcimRackGroupsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimRackGroupsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/rack-groups/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DcimRackGroupsListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimRackGroupsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dcimRackGroupsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DcimRackGroupsList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimRackGroupsPartialUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimRackGroupsPartialUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimRackGroupsPartialUpdateResponse
     */
	public function dcimRackGroupsPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimRackGroupsPartialUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimRackGroupsPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/rack-groups/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimRackGroupsPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableRackGroupInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimRackGroupsPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rackGroup = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RackGroup', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimRackGroupsRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimRackGroupsReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimRackGroupsReadResponse
     */
	public function dcimRackGroupsRead(
        \OpenAPI\OpenAPI\Models\Operations\DcimRackGroupsReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimRackGroupsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/rack-groups/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimRackGroupsReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimRackGroupsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rackGroup = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RackGroup', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimRackGroupsUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimRackGroupsUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimRackGroupsUpdateResponse
     */
	public function dcimRackGroupsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimRackGroupsUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimRackGroupsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/rack-groups/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimRackGroupsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableRackGroupInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimRackGroupsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rackGroup = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RackGroup', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimRackReservationsCreate
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\WritableRackReservationInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimRackReservationsCreateResponse
     */
	public function dcimRackReservationsCreate(
        \OpenAPI\OpenAPI\Models\Shared\WritableRackReservationInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimRackReservationsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/rack-reservations/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimRackReservationsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rackReservation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RackReservation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimRackReservationsDelete
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimRackReservationsDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimRackReservationsDeleteResponse
     */
	public function dcimRackReservationsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DcimRackReservationsDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimRackReservationsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/rack-reservations/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimRackReservationsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimRackReservationsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * dcimRackReservationsList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimRackReservationsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimRackReservationsListResponse
     */
	public function dcimRackReservationsList(
        \OpenAPI\OpenAPI\Models\Operations\DcimRackReservationsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimRackReservationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/rack-reservations/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DcimRackReservationsListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimRackReservationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dcimRackReservationsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DcimRackReservationsList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimRackReservationsPartialUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimRackReservationsPartialUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimRackReservationsPartialUpdateResponse
     */
	public function dcimRackReservationsPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimRackReservationsPartialUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimRackReservationsPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/rack-reservations/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimRackReservationsPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableRackReservationInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimRackReservationsPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rackReservation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RackReservation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimRackReservationsRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimRackReservationsReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimRackReservationsReadResponse
     */
	public function dcimRackReservationsRead(
        \OpenAPI\OpenAPI\Models\Operations\DcimRackReservationsReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimRackReservationsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/rack-reservations/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimRackReservationsReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimRackReservationsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rackReservation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RackReservation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimRackReservationsUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimRackReservationsUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimRackReservationsUpdateResponse
     */
	public function dcimRackReservationsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimRackReservationsUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimRackReservationsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/rack-reservations/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimRackReservationsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableRackReservationInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimRackReservationsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rackReservation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RackReservation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimRackRolesCreate
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\RackRoleInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimRackRolesCreateResponse
     */
	public function dcimRackRolesCreate(
        \OpenAPI\OpenAPI\Models\Shared\RackRoleInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimRackRolesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/rack-roles/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimRackRolesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rackRole = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RackRole', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimRackRolesDelete
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimRackRolesDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimRackRolesDeleteResponse
     */
	public function dcimRackRolesDelete(
        \OpenAPI\OpenAPI\Models\Operations\DcimRackRolesDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimRackRolesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/rack-roles/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimRackRolesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimRackRolesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * dcimRackRolesList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimRackRolesListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimRackRolesListResponse
     */
	public function dcimRackRolesList(
        \OpenAPI\OpenAPI\Models\Operations\DcimRackRolesListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimRackRolesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/rack-roles/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DcimRackRolesListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimRackRolesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dcimRackRolesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DcimRackRolesList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimRackRolesPartialUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimRackRolesPartialUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimRackRolesPartialUpdateResponse
     */
	public function dcimRackRolesPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimRackRolesPartialUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimRackRolesPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/rack-roles/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimRackRolesPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "rackRoleInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimRackRolesPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rackRole = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RackRole', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimRackRolesRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimRackRolesReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimRackRolesReadResponse
     */
	public function dcimRackRolesRead(
        \OpenAPI\OpenAPI\Models\Operations\DcimRackRolesReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimRackRolesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/rack-roles/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimRackRolesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimRackRolesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rackRole = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RackRole', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimRackRolesUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimRackRolesUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimRackRolesUpdateResponse
     */
	public function dcimRackRolesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimRackRolesUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimRackRolesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/rack-roles/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimRackRolesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "rackRoleInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimRackRolesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rackRole = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RackRole', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimRacksCreate
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\WritableRackInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimRacksCreateResponse
     */
	public function dcimRacksCreate(
        \OpenAPI\OpenAPI\Models\Shared\WritableRackInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimRacksCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/racks/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimRacksCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rack = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Rack', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimRacksDelete
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimRacksDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimRacksDeleteResponse
     */
	public function dcimRacksDelete(
        \OpenAPI\OpenAPI\Models\Operations\DcimRacksDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimRacksDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/racks/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimRacksDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimRacksDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * dcimRacksList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimRacksListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimRacksListResponse
     */
	public function dcimRacksList(
        \OpenAPI\OpenAPI\Models\Operations\DcimRacksListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimRacksListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/racks/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DcimRacksListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimRacksListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dcimRacksList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DcimRacksList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimRacksPartialUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimRacksPartialUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimRacksPartialUpdateResponse
     */
	public function dcimRacksPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimRacksPartialUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimRacksPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/racks/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimRacksPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableRackInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimRacksPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rack = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Rack', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimRacksRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimRacksReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimRacksReadResponse
     */
	public function dcimRacksRead(
        \OpenAPI\OpenAPI\Models\Operations\DcimRacksReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimRacksReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/racks/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimRacksReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimRacksReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rack = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Rack', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List rack units (by rack)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimRacksUnitsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimRacksUnitsResponse
     */
	public function dcimRacksUnits(
        \OpenAPI\OpenAPI\Models\Operations\DcimRacksUnitsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimRacksUnitsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/racks/{id}/units/', \OpenAPI\OpenAPI\Models\Operations\DcimRacksUnitsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimRacksUnitsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rack = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Rack', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimRacksUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimRacksUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimRacksUpdateResponse
     */
	public function dcimRacksUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimRacksUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimRacksUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/racks/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimRacksUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableRackInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimRacksUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rack = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Rack', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimRegionsCreate
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\WritableRegionInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimRegionsCreateResponse
     */
	public function dcimRegionsCreate(
        \OpenAPI\OpenAPI\Models\Shared\WritableRegionInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimRegionsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/regions/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimRegionsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->region = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Region', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimRegionsDelete
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimRegionsDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimRegionsDeleteResponse
     */
	public function dcimRegionsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DcimRegionsDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimRegionsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/regions/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimRegionsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimRegionsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * dcimRegionsList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimRegionsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimRegionsListResponse
     */
	public function dcimRegionsList(
        \OpenAPI\OpenAPI\Models\Operations\DcimRegionsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimRegionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/regions/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DcimRegionsListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimRegionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dcimRegionsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DcimRegionsList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimRegionsPartialUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimRegionsPartialUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimRegionsPartialUpdateResponse
     */
	public function dcimRegionsPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimRegionsPartialUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimRegionsPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/regions/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimRegionsPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableRegionInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimRegionsPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->region = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Region', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimRegionsRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimRegionsReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimRegionsReadResponse
     */
	public function dcimRegionsRead(
        \OpenAPI\OpenAPI\Models\Operations\DcimRegionsReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimRegionsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/regions/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimRegionsReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimRegionsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->region = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Region', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimRegionsUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimRegionsUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimRegionsUpdateResponse
     */
	public function dcimRegionsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimRegionsUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimRegionsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/regions/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimRegionsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableRegionInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimRegionsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->region = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Region', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimSitesCreate
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\WritableSiteInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimSitesCreateResponse
     */
	public function dcimSitesCreate(
        \OpenAPI\OpenAPI\Models\Shared\WritableSiteInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimSitesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/sites/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimSitesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->site = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Site', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimSitesDelete
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimSitesDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimSitesDeleteResponse
     */
	public function dcimSitesDelete(
        \OpenAPI\OpenAPI\Models\Operations\DcimSitesDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimSitesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/sites/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimSitesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimSitesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * A convenience method for rendering graphs for a particular site.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimSitesGraphsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimSitesGraphsResponse
     */
	public function dcimSitesGraphs(
        \OpenAPI\OpenAPI\Models\Operations\DcimSitesGraphsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimSitesGraphsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/sites/{id}/graphs/', \OpenAPI\OpenAPI\Models\Operations\DcimSitesGraphsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimSitesGraphsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->site = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Site', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimSitesList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimSitesListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimSitesListResponse
     */
	public function dcimSitesList(
        \OpenAPI\OpenAPI\Models\Operations\DcimSitesListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimSitesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/sites/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DcimSitesListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimSitesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dcimSitesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DcimSitesList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimSitesPartialUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimSitesPartialUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimSitesPartialUpdateResponse
     */
	public function dcimSitesPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimSitesPartialUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimSitesPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/sites/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimSitesPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableSiteInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimSitesPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->site = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Site', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimSitesRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimSitesReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimSitesReadResponse
     */
	public function dcimSitesRead(
        \OpenAPI\OpenAPI\Models\Operations\DcimSitesReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimSitesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/sites/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimSitesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimSitesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->site = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Site', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimSitesUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimSitesUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimSitesUpdateResponse
     */
	public function dcimSitesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimSitesUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimSitesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/sites/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimSitesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableSiteInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimSitesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->site = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Site', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimVirtualChassisCreate
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\WritableVirtualChassisInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimVirtualChassisCreateResponse
     */
	public function dcimVirtualChassisCreate(
        \OpenAPI\OpenAPI\Models\Shared\WritableVirtualChassisInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimVirtualChassisCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/virtual-chassis/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimVirtualChassisCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->virtualChassis = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VirtualChassis', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimVirtualChassisDelete
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimVirtualChassisDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimVirtualChassisDeleteResponse
     */
	public function dcimVirtualChassisDelete(
        \OpenAPI\OpenAPI\Models\Operations\DcimVirtualChassisDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimVirtualChassisDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/virtual-chassis/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimVirtualChassisDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimVirtualChassisDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * dcimVirtualChassisList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimVirtualChassisListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimVirtualChassisListResponse
     */
	public function dcimVirtualChassisList(
        \OpenAPI\OpenAPI\Models\Operations\DcimVirtualChassisListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimVirtualChassisListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/virtual-chassis/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DcimVirtualChassisListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimVirtualChassisListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dcimVirtualChassisList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DcimVirtualChassisList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimVirtualChassisPartialUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimVirtualChassisPartialUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimVirtualChassisPartialUpdateResponse
     */
	public function dcimVirtualChassisPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimVirtualChassisPartialUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimVirtualChassisPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/virtual-chassis/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimVirtualChassisPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableVirtualChassisInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimVirtualChassisPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->virtualChassis = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VirtualChassis', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimVirtualChassisRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimVirtualChassisReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimVirtualChassisReadResponse
     */
	public function dcimVirtualChassisRead(
        \OpenAPI\OpenAPI\Models\Operations\DcimVirtualChassisReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimVirtualChassisReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/virtual-chassis/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimVirtualChassisReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimVirtualChassisReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->virtualChassis = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VirtualChassis', 'json');
            }
        }

        return $response;
    }
	
    /**
     * dcimVirtualChassisUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DcimVirtualChassisUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DcimVirtualChassisUpdateResponse
     */
	public function dcimVirtualChassisUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DcimVirtualChassisUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DcimVirtualChassisUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dcim/virtual-chassis/{id}/', \OpenAPI\OpenAPI\Models\Operations\DcimVirtualChassisUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "writableVirtualChassisInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DcimVirtualChassisUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->virtualChassis = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VirtualChassis', 'json');
            }
        }

        return $response;
    }
}