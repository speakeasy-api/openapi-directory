/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * VmEndpointNatMappingsInterfaceNatMappings - Contain information of Nat mapping for an interface of this endpoint.
 */
public class VmEndpointNatMappingsInterfaceNatMappings {
    /**
     * List of all drain IP:port-range mappings assigned to this interface. These ranges are inclusive, that is, both the first and the last ports can be used for NAT. Example: ["2.2.2.2:12345-12355", "1.1.1.1:2234-2234"].
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("drainNatIpPortRanges")
    public String[] drainNatIpPortRanges;
    public VmEndpointNatMappingsInterfaceNatMappings withDrainNatIpPortRanges(String[] drainNatIpPortRanges) {
        this.drainNatIpPortRanges = drainNatIpPortRanges;
        return this;
    }
    
    /**
     * A list of all IP:port-range mappings assigned to this interface. These ranges are inclusive, that is, both the first and the last ports can be used for NAT. Example: ["2.2.2.2:12345-12355", "1.1.1.1:2234-2234"].
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("natIpPortRanges")
    public String[] natIpPortRanges;
    public VmEndpointNatMappingsInterfaceNatMappings withNatIpPortRanges(String[] natIpPortRanges) {
        this.natIpPortRanges = natIpPortRanges;
        return this;
    }
    
    /**
     * Total number of drain ports across all NAT IPs allocated to this interface. It equals to the aggregated port number in the field drain_nat_ip_port_ranges.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numTotalDrainNatPorts")
    public Integer numTotalDrainNatPorts;
    public VmEndpointNatMappingsInterfaceNatMappings withNumTotalDrainNatPorts(Integer numTotalDrainNatPorts) {
        this.numTotalDrainNatPorts = numTotalDrainNatPorts;
        return this;
    }
    
    /**
     * Total number of ports across all NAT IPs allocated to this interface. It equals to the aggregated port number in the field nat_ip_port_ranges.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numTotalNatPorts")
    public Integer numTotalNatPorts;
    public VmEndpointNatMappingsInterfaceNatMappings withNumTotalNatPorts(Integer numTotalNatPorts) {
        this.numTotalNatPorts = numTotalNatPorts;
        return this;
    }
    
    /**
     * Information about mappings provided by rules in this NAT.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ruleMappings")
    public VmEndpointNatMappingsInterfaceNatMappingsNatRuleMappings[] ruleMappings;
    public VmEndpointNatMappingsInterfaceNatMappings withRuleMappings(VmEndpointNatMappingsInterfaceNatMappingsNatRuleMappings[] ruleMappings) {
        this.ruleMappings = ruleMappings;
        return this;
    }
    
    /**
     * Alias IP range for this interface endpoint. It will be a private (RFC 1918) IP range. Examples: "10.33.4.55/32", or "192.168.5.0/24".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceAliasIpRange")
    public String sourceAliasIpRange;
    public VmEndpointNatMappingsInterfaceNatMappings withSourceAliasIpRange(String sourceAliasIpRange) {
        this.sourceAliasIpRange = sourceAliasIpRange;
        return this;
    }
    
    /**
     * Primary IP of the VM for this NIC.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceVirtualIp")
    public String sourceVirtualIp;
    public VmEndpointNatMappingsInterfaceNatMappings withSourceVirtualIp(String sourceVirtualIp) {
        this.sourceVirtualIp = sourceVirtualIp;
        return this;
    }
    
}
