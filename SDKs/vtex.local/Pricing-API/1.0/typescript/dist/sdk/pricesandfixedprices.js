"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PricesAndFixedPrices = void 0;
var utils = __importStar(require("../internal/utils"));
var operations = __importStar(require("./models/operations"));
var shared = __importStar(require("./models/shared"));
var PricesAndFixedPrices = /** @class */ (function () {
    function PricesAndFixedPrices(defaultClient, securityClient, serverURL, language, sdkVersion, genVersion) {
        this._defaultClient = defaultClient;
        this._securityClient = securityClient;
        this._serverURL = serverURL;
        this._language = language;
        this._sdkVersion = sdkVersion;
        this._genVersion = genVersion;
    }
    /**
     * Create or Update Base Price or Fixed Prices
     *
     * @remarks
     * Creates or updates an SKU Base Price or Fixed Prices. The **base price** is the basic selling price of a product, it comprises the cost price and the markup wanted in the sale of the product. The **fixed price** is an optional price of the SKU for a specific trade policy with a specific minimum quantity to be activated.
     *
     *  <p> You may optionally set a list price. Additionally, you may set either a cost price or a markup value. By defining either one of them, the other will be calculated to conform to the formula <code>costPrice * (1 + markup) = basePrice</code>.</p> <h2>Request body example</h2>
     *
     * ```json
     * {
     *     "markup": 30,
     *     "basePrice": 100,
     *     "listPrice": 35,
     *     "fixedPrices": [
     *         {
     *             "tradePolicyId": "1",
     *             "value": 31,
     *             "listPrice": 32,
     *             "minQuantity": 1,
     *             "dateRange": {
     *                 "from": "2022-05-21T22:00:00Z",
     *                 "to": "2023-05-28T22:00:00Z"
     *             }
     *         },
     *         {
     *             "tradePolicyId": "1",
     *             "value": 31.5,
     *             "listPrice": 33,
     *             "minQuantity": 2
     *         }
     *     ]
     * }
     * ```
     */
    PricesAndFixedPrices.prototype.createUpdatePriceOrFixedPrice = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateUpdatePriceOrFixedPriceRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/pricing/prices/{itemId}", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateUpdatePriceOrFixedPriceResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    break;
            }
            return res;
        });
    };
    /**
     * Delete Price
     *
     * @remarks
     * Deletes the Base Price and all available Fixed Prices for an SKU in all trade policies.
     */
    PricesAndFixedPrices.prototype.deletePrice = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeletePriceRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/pricing/prices/{itemId}", req);
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign({}, utils.getHeadersFromRequest(req)), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "delete", headers: headers }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DeletePriceResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    break;
            }
            return res;
        });
    };
    /**
     * Delete Fixed Prices on a price table or trade policy
     *
     * @remarks
     * Deletes all Fixed Prices of an SKU in a specific Price Table or Trade Policy.
     */
    PricesAndFixedPrices.prototype.deletefixedpricesonapricetableortradepolicy = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeletefixedpricesonapricetableortradepolicyRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/pricing/prices/{itemId}/fixed/{priceTableId}", req);
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign({}, utils.getHeadersFromRequest(req)), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "delete", headers: headers }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DeletefixedpricesonapricetableortradepolicyResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    break;
            }
            return res;
        });
    };
    /**
     * Get Computed Price by price table or trade policy
     *
     * @remarks
     * Gets the Computed Price, which is the price after all the steps in the Pricing pipeline, for an SKU in a specific price table or trade policy.
     *
     * ## Response body example
     *
     * ```json
     * {
     *     "tradePolicyId": "1",
     *     "listPrice": 30,
     *     "costPrice": 76.92,
     *     "sellingPrice": 18.9,
     *     "priceValidUntil": "2018-12-20T18:12:14Z"
     * }
     * ```
     */
    PricesAndFixedPrices.prototype.getComputedPricebypricetable = function (req, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetComputedPricebypricetableRequest(req);
        }
        var baseURL = operations.GetComputedPricebypricetableServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/pricing/prices/{itemId}/computed/{priceTableId}", req);
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign({}, utils.getHeadersFromRequest(req)), config === null || config === void 0 ? void 0 : config.headers);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get", headers: headers }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetComputedPricebypricetableResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json; charset=utf-8")) {
                        res.getcomputedprice = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Getcomputedprice);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Get Fixed Prices
     *
     * @remarks
     * The **fixed price** is an optional price of the SKU for a specific trade policy with a specific minimum quantity to be activated. This method retrieves an array of Fixed Prices for an SKU in a Trade Policy with Minimum Quantities.
     *
     *  The default value for a Minimum Quantity is `1`. This means a Fixed Price will be valid for a SKU in a Trade Policy for orders containing the specified number of Minimum Quantity or above, unless a higher Minimum Quantity is specified.
     *
     *  Fixed prices may, optionally, be scheduled. If so, these objects will contain the `dateRange` object with `from` and `to` properties, indicating the start and end time of the scheduled fixed price in the RFC3339 timestamp format (`YYYY-MM-DDT23:59:60Z`).
     *
     *  Note that the 'Z', at the end, represents the UTC time (GMT+00:00). If it was in GMT-03:00, for example, it would be (`YYYY-MM-DDT23:59:60-03:00`).
     *
     *  ## Response body example
     *
     * ```json
     * [
     *     {
     *         "tradePolicyId": "6",
     *         "value": 20.9,
     *         "listPrice": 22.9,
     *         "minQuantity": 1,
     *         "dateRange": {
     *             "from": "2021-12-30T22:00:00-03:00",
     *             "to": "2021-12-30T22:00:00-03:00"
     *         }
     *     },
     *     {
     *         "tradePolicyId": "1",
     *         "value": 18.9,
     *         "listPrice": null,
     *         "minQuantity": 1,
     *         "dateRange": {
     *             "from": "2021-12-30T22:00:00-03:00",
     *             "to": "2021-12-30T22:00:00-03:00"
     *         }
     *     }
     * ]
     * ```
     */
    PricesAndFixedPrices.prototype.getFixedPrices = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetFixedPricesRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/pricing/prices/{itemId}/fixed", req);
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign({}, utils.getHeadersFromRequest(req)), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "get", headers: headers }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetFixedPricesResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json; charset=utf-8")) {
                        res.fixedPrices = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.fixedPrices = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FixedPrice, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Get Fixed Prices on a price table or trade policy
     *
     * @remarks
     * Retrieves all Fixed Prices on a price table or trade policy.
     *
     * ## Response body example
     *
     * ```json
     * [
     *     {
     *         "tradePolicyId": "6",
     *         "value": 20.9,
     *         "listPrice": 22.9,
     *         "minQuantity": 1,
     *         "dateRange": {
     *             "from": "2021-12-30T22:00:00-03:00",
     *             "to": "2021-12-30T22:00:00-04:00"
     *         }
     *     },
     *     {
     *         "tradePolicyId": "1",
     *         "value": 18.9,
     *         "listPrice": null,
     *         "minQuantity": 1
     *     }
     * ]
     * ```
     */
    PricesAndFixedPrices.prototype.getFixedPricesonapricetable = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetFixedPricesonapricetableRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/pricing/prices/{itemId}/fixed/{priceTableId}", req);
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign({}, utils.getHeadersFromRequest(req)), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "get", headers: headers }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetFixedPricesonapricetableResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json; charset=utf-8")) {
                        res.fixedPrices = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.fixedPrices = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.FixedPrice, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Get Price
     *
     * @remarks
     * Retrieves price data given a specific SKU ID. Within the `fixedPrices` object, there might be a list of prices for specific Trade Policies and Minimium Quantities of the SKU. Fixed Prices may also be scheduled.
     *
     *  ## Response body example
     *
     * ```json
     * {
     *     "itemId": "1",
     *     "listPrice": 50,
     *     "costPrice": 90,
     *     "markup": 30,
     *     "basePrice": 117,
     *     "fixedPrices": [
     *         {
     *             "tradePolicyId": "1",
     *             "value": 50.5,
     *             "listPrice": 50.5,
     *             "minQuantity": 2,
     *             "dateRange": {
     *                 "from": "2021-12-31T01:00:00Z",
     *                 "to": "2022-12-31T01:00:00Z"
     *             }
     *         },
     *         {
     *             "tradePolicyId": "2",
     *             "value": 30,
     *             "listPrice": 50,
     *             "minQuantity": 2
     *         }
     *     ]
     * }
     * ```
     */
    PricesAndFixedPrices.prototype.getPrice = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetPriceRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/pricing/prices/{itemId}", req);
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign({}, utils.getHeadersFromRequest(req)), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "get", headers: headers }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetPriceResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.getprice = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Getprice);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Create or Update Fixed Prices on a price table or trade policy
     *
     * @remarks
     * Creates or updates the fixed prices of an SKU for a specific price table or trade policy. You can add one or multiple fixed prices per SKU.
     *
     *  ## Request body example
     *
     * ```json
     * [
     *   {
     *     "value": 50.5,
     *     "listPrice": 50.5,
     *     "minQuantity": 2,
     *     "dateRange": {
     *       "from": "2021-12-30T22:00:00-03:00",
     *       "to": "2021-12-30T22:00:00-04:00"
     *     }
     *   }
     * ]
     * ```
     */
    PricesAndFixedPrices.prototype.createorupdatefixedpricesonpricetableortradepolicy = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req =
                new operations.CreateorupdatefixedpricesonpricetableortradepolicyRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/pricing/prices/{itemId}/fixed/{priceTableId}", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._securityClient || this._defaultClient;
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateorupdatefixedpricesonpricetableortradepolicyResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    break;
            }
            return res;
        });
    };
    return PricesAndFixedPrices;
}());
exports.PricesAndFixedPrices = PricesAndFixedPrices;
