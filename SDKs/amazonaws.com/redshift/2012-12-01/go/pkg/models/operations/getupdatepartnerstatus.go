// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETUpdatePartnerStatusActionEnum
type GETUpdatePartnerStatusActionEnum string

const (
	GETUpdatePartnerStatusActionEnumUpdatePartnerStatus GETUpdatePartnerStatusActionEnum = "UpdatePartnerStatus"
)

func (e *GETUpdatePartnerStatusActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UpdatePartnerStatus":
		*e = GETUpdatePartnerStatusActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETUpdatePartnerStatusActionEnum: %s", s)
	}
}

// GETUpdatePartnerStatusStatusEnum - The value of the updated status.
type GETUpdatePartnerStatusStatusEnum string

const (
	GETUpdatePartnerStatusStatusEnumActive            GETUpdatePartnerStatusStatusEnum = "Active"
	GETUpdatePartnerStatusStatusEnumInactive          GETUpdatePartnerStatusStatusEnum = "Inactive"
	GETUpdatePartnerStatusStatusEnumRuntimeFailure    GETUpdatePartnerStatusStatusEnum = "RuntimeFailure"
	GETUpdatePartnerStatusStatusEnumConnectionFailure GETUpdatePartnerStatusStatusEnum = "ConnectionFailure"
)

func (e *GETUpdatePartnerStatusStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Active":
		fallthrough
	case "Inactive":
		fallthrough
	case "RuntimeFailure":
		fallthrough
	case "ConnectionFailure":
		*e = GETUpdatePartnerStatusStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETUpdatePartnerStatusStatusEnum: %s", s)
	}
}

// GETUpdatePartnerStatusVersionEnum
type GETUpdatePartnerStatusVersionEnum string

const (
	GETUpdatePartnerStatusVersionEnumTwoThousandAndTwelve1201 GETUpdatePartnerStatusVersionEnum = "2012-12-01"
)

func (e *GETUpdatePartnerStatusVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2012-12-01":
		*e = GETUpdatePartnerStatusVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETUpdatePartnerStatusVersionEnum: %s", s)
	}
}

type GETUpdatePartnerStatusRequest struct {
	// The Amazon Web Services account ID that owns the cluster.
	AccountID string                           `queryParam:"style=form,explode=true,name=AccountId"`
	Action    GETUpdatePartnerStatusActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The cluster identifier of the cluster whose partner integration status is being updated.
	ClusterIdentifier string `queryParam:"style=form,explode=true,name=ClusterIdentifier"`
	// The name of the database whose partner integration status is being updated.
	DatabaseName string `queryParam:"style=form,explode=true,name=DatabaseName"`
	// The name of the partner whose integration status is being updated.
	PartnerName string `queryParam:"style=form,explode=true,name=PartnerName"`
	// The value of the updated status.
	Status GETUpdatePartnerStatusStatusEnum `queryParam:"style=form,explode=true,name=Status"`
	// The status message provided by the partner.
	StatusMessage     *string                           `queryParam:"style=form,explode=true,name=StatusMessage"`
	Version           GETUpdatePartnerStatusVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                           `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                           `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                           `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                           `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                           `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                           `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                           `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETUpdatePartnerStatusResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
