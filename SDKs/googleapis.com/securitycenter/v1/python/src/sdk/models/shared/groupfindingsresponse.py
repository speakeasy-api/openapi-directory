"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import groupresult as shared_groupresult
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GroupFindingsResponse:
    r"""Response message for group by findings."""
    
    group_by_results: Optional[list[shared_groupresult.GroupResult]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupByResults'), 'exclude': lambda f: f is None }})
    r"""Group results. There exists an element for each existing unique combination of property/values. The element contains a count for the number of times those specific property/values appear."""  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextPageToken'), 'exclude': lambda f: f is None }})
    r"""Token to retrieve the next page of results, or empty if there are no more results."""  
    read_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('readTime'), 'exclude': lambda f: f is None }})
    r"""Time used for executing the groupBy request."""  
    total_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalSize'), 'exclude': lambda f: f is None }})
    r"""The total number of results matching the query."""  
    