"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class ReportMeetingsTypeEnum(str, Enum):
    r"""The meeting types: <br>`past` - Past meetings.<br>`pastOne` - Past one user meetings."""
    PAST = 'past'
    PAST_ONE = 'pastOne'


@dataclasses.dataclass
class ReportMeetingsRequest:
    
    from_: date = dataclasses.field(metadata={'query_param': { 'field_name': 'from', 'style': 'form', 'explode': True }})
    r"""Start date in 'yyyy-mm-dd' format. The date range defined by the \\"from\\" and \\"to\\" parameters should only be one month as the report includes only one month worth of data at once."""  
    to: date = dataclasses.field(metadata={'query_param': { 'field_name': 'to', 'style': 'form', 'explode': True }})
    r"""End date."""  
    user_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'userId', 'style': 'simple', 'explode': False }})
    r"""The user ID or email address of the user. For user-level apps, pass `me` as the value for userId."""  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'next_page_token', 'style': 'form', 'explode': True }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': True }})
    r"""The number of records returned within a single API call."""  
    type: Optional[ReportMeetingsTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'type', 'style': 'form', 'explode': True }})
    r"""The meeting types: <br>`past` - Past meetings.<br>`pastOne` - Past one user meetings."""  
    

@dataclasses.dataclass
class ReportMeetings200ApplicationXMLMeetingsCustomKeys:
    
    key: Optional[str] = dataclasses.field(default=None)
    r"""Custom key associated with the user."""  
    value: Optional[str] = dataclasses.field(default=None)
    r"""Value of the custom key associated with the user."""  
    

@dataclasses.dataclass
class ReportMeetings200ApplicationXMLMeetings:
    
    custom_keys: Optional[list[ReportMeetings200ApplicationXMLMeetingsCustomKeys]] = dataclasses.field(default=None)
    r"""Custom keys and values assigned to the meeting."""  
    duration: Optional[int] = dataclasses.field(default=None)
    r"""Meeting duration."""  
    end_time: Optional[datetime] = dataclasses.field(default=None)
    r"""Meeting end time."""  
    id: Optional[int] = dataclasses.field(default=None)
    r"""[Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-):            Unique identifier of the meeting in \\"**long**\\" format(represented as int64
    data type in JSON), also known as the meeting number.
    """  
    participants_count: Optional[int] = dataclasses.field(default=None)
    r"""Number of meeting participants."""  
    source: Optional[str] = dataclasses.field(default=None)
    r"""Indicates whether the meeting was created directly through Zoom or through an API request."""  
    start_time: Optional[datetime] = dataclasses.field(default=None)
    r"""Meeting start time."""  
    topic: Optional[str] = dataclasses.field(default=None)
    r"""Meeting topic."""  
    total_minutes: Optional[int] = dataclasses.field(default=None)
    r"""Sum of meeting minutes from all participants in the meeting."""  
    type: Optional[int] = dataclasses.field(default=None)
    r"""Meeting Type:<br> `1` - Instant Meeting<br> `2` - Scheduled Meeting<br> `3` - Recurring Meeting with no fixed time.<br>
    `4` - This value is returned if the meeting was started using a Personal Meeting ID. <br>
    `8` - Recurring Meeting with a fixed time.
    """  
    user_email: Optional[str] = dataclasses.field(default=None)
    r"""User email."""  
    user_name: Optional[str] = dataclasses.field(default=None)
    r"""User display name."""  
    uuid: Optional[str] = dataclasses.field(default=None)
    r"""Meeting UUID. Each meeting instance will generate its own UUID(i.e., after a meeting ends, a new UUID will be generated for the next instance of the meeting). Please double encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it."""  
    

@dataclasses.dataclass
class ReportMeetings200ApplicationXML:
    r"""Pagination Object."""
    
    from_: Optional[date] = dataclasses.field(default=None)
    r"""Start date for this report."""  
    meetings: Optional[list[ReportMeetings200ApplicationXMLMeetings]] = dataclasses.field(default=None)
    r"""Array of meeting objects."""  
    next_page_token: Optional[str] = dataclasses.field(default=None)
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_count: Optional[int] = dataclasses.field(default=None)
    r"""The number of pages returned for the request made."""  
    page_number: Optional[int] = dataclasses.field(default=None)
    r"""**Deprecated**: This field has been deprecated. Please use the \\"next_page_token\\" field for pagination instead of this field.
    
    The page number of the current results.
    """  
    page_size: Optional[int] = dataclasses.field(default=None)
    r"""The number of records returned with a single API call."""  
    to: Optional[date] = dataclasses.field(default=None)
    r"""End date for this report."""  
    total_records: Optional[int] = dataclasses.field(default=None)
    r"""The total number of all the records available across pages."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReportMeetings200ApplicationJSONMeetingsCustomKeys:
    
    key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key'), 'exclude': lambda f: f is None }})
    r"""Custom key associated with the user."""  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Value of the custom key associated with the user."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReportMeetings200ApplicationJSONMeetings:
    
    custom_keys: Optional[list[ReportMeetings200ApplicationJSONMeetingsCustomKeys]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_keys'), 'exclude': lambda f: f is None }})
    r"""Custom keys and values assigned to the meeting."""  
    duration: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration'), 'exclude': lambda f: f is None }})
    r"""Meeting duration."""  
    end_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Meeting end time."""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""[Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-):            Unique identifier of the meeting in \\"**long**\\" format(represented as int64
    data type in JSON), also known as the meeting number.
    """  
    participants_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('participants_count'), 'exclude': lambda f: f is None }})
    r"""Number of meeting participants."""  
    source: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source'), 'exclude': lambda f: f is None }})
    r"""Indicates whether the meeting was created directly through Zoom or through an API request."""  
    start_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Meeting start time."""  
    topic: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topic'), 'exclude': lambda f: f is None }})
    r"""Meeting topic."""  
    total_minutes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_minutes'), 'exclude': lambda f: f is None }})
    r"""Sum of meeting minutes from all participants in the meeting."""  
    type: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Meeting Type:<br> `1` - Instant Meeting<br> `2` - Scheduled Meeting<br> `3` - Recurring Meeting with no fixed time.<br>
    `4` - This value is returned if the meeting was started using a Personal Meeting ID. <br>
    `8` - Recurring Meeting with a fixed time.
    """  
    user_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_email'), 'exclude': lambda f: f is None }})
    r"""User email."""  
    user_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_name'), 'exclude': lambda f: f is None }})
    r"""User display name."""  
    uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uuid'), 'exclude': lambda f: f is None }})
    r"""Meeting UUID. Each meeting instance will generate its own UUID(i.e., after a meeting ends, a new UUID will be generated for the next instance of the meeting). Please double encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReportMeetings200ApplicationJSON:
    r"""Pagination Object."""
    
    from_: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Start date for this report."""  
    meetings: Optional[list[ReportMeetings200ApplicationJSONMeetings]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meetings'), 'exclude': lambda f: f is None }})
    r"""Array of meeting objects."""  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page_token'), 'exclude': lambda f: f is None }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_count'), 'exclude': lambda f: f is None }})
    r"""The number of pages returned for the request made."""  
    page_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_number'), 'exclude': lambda f: f is None }})
    r"""**Deprecated**: This field has been deprecated. Please use the \\"next_page_token\\" field for pagination instead of this field.
    
    The page number of the current results.
    """  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_size'), 'exclude': lambda f: f is None }})
    r"""The number of records returned with a single API call."""  
    to: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""End date for this report."""  
    total_records: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_records'), 'exclude': lambda f: f is None }})
    r"""The total number of all the records available across pages."""  
    

@dataclasses.dataclass
class ReportMeetingsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    report_meetings_200_application_json_object: Optional[ReportMeetings200ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200`<br>
    Active or inactive hosts report returned.<br>
    """  
    