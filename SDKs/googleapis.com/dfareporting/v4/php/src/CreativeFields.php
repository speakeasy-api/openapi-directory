<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class CreativeFields 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes an existing creative field.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsDeleteResponse
     */
	public function dfareportingCreativeFieldsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/creativeFields/{id}', \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Gets one creative field by ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsGetResponse
     */
	public function dfareportingCreativeFieldsGet(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/creativeFields/{id}', \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->creativeField = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreativeField', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Inserts a new creative field.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsInsertResponse
     */
	public function dfareportingCreativeFieldsInsert(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/creativeFields', \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "creativeField", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->creativeField = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreativeField', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of creative fields, possibly filtered. This method supports paging.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsListResponse
     */
	public function dfareportingCreativeFieldsList(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/creativeFields', \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->creativeFieldsListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreativeFieldsListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing creative field. This method supports patch semantics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsPatchResponse
     */
	public function dfareportingCreativeFieldsPatch(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/creativeFields', \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "creativeField", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->creativeField = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreativeField', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing creative field.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsUpdateResponse
     */
	public function dfareportingCreativeFieldsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/creativeFields', \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "creativeField", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativeFieldsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->creativeField = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreativeField', 'json');
            }
        }

        return $response;
    }
}