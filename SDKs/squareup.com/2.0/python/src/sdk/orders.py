"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Orders:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def batch_retrieve_orders(self, request: shared.BatchRetrieveOrdersRequest, security: operations.BatchRetrieveOrdersSecurity) -> operations.BatchRetrieveOrdersResponse:
        r"""BatchRetrieveOrders
        Retrieves a set of [orders](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) by their IDs.
        
        If a given order ID does not exist, the ID is ignored instead of generating an error.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/orders/batch-retrieve'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BatchRetrieveOrdersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchRetrieveOrdersResponse])
                res.batch_retrieve_orders_response = out

        return res

    def calculate_order(self, request: shared.CalculateOrderRequest, security: operations.CalculateOrderSecurity) -> operations.CalculateOrderResponse:
        r"""CalculateOrder
        Enables applications to preview order pricing without creating an order.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/orders/calculate'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CalculateOrderResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CalculateOrderResponse])
                res.calculate_order_response = out

        return res

    def create_order(self, request: shared.CreateOrderRequest, security: operations.CreateOrderSecurity) -> operations.CreateOrderResponse:
        r"""CreateOrder
        Creates a new [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) that can include information about products for
        purchase and settings to apply to the purchase.
        
        To pay for a created order, see 
        [Pay for Orders](https://developer.squareup.com/docs/orders-api/pay-for-orders).
        
        You can modify open orders using the [UpdateOrder](https://developer.squareup.com/reference/square_2021-08-18/orders-api/update-order) endpoint.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/orders'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateOrderResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateOrderResponse])
                res.create_order_response = out

        return res

    def pay_order(self, request: operations.PayOrderRequest, security: operations.PayOrderSecurity) -> operations.PayOrderResponse:
        r"""PayOrder
        Pay for an [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) using one or more approved [payments](https://developer.squareup.com/reference/square_2021-08-18/objects/Payment)
        or settle an order with a total of `0`.
        
        The total of the `payment_ids` listed in the request must be equal to the order
        total. Orders with a total amount of `0` can be marked as paid by specifying an empty
        array of `payment_ids` in the request.
        
        To be used with `PayOrder`, a payment must:
        
        - Reference the order by specifying the `order_id` when [creating the payment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/create-payment).
        Any approved payments that reference the same `order_id` not specified in the
        `payment_ids` is canceled.
        - Be approved with [delayed capture](https://developer.squareup.com/docs/payments-api/take-payments#delayed-capture).
        Using a delayed capture payment with `PayOrder` completes the approved payment.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PayOrderRequest, base_url, '/v2/orders/{order_id}/pay', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "pay_order_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PayOrderResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PayOrderResponse])
                res.pay_order_response = out

        return res

    def search_orders(self, request: shared.SearchOrdersRequest, security: operations.SearchOrdersSecurity) -> operations.SearchOrdersResponse:
        r"""SearchOrders
        Search all orders for one or more locations. Orders include all sales,
        returns, and exchanges regardless of how or when they entered the Square
        ecosystem (such as Point of Sale, Invoices, and Connect APIs).
        
        `SearchOrders` requests need to specify which locations to search and define a
        [SearchOrdersQuery](https://developer.squareup.com/reference/square_2021-08-18/objects/SearchOrdersQuery) object that controls
        how to sort or filter the results. Your `SearchOrdersQuery` can:
        
          Set filter criteria.
          Set the sort order.
          Determine whether to return results as complete `Order` objects or as
        [OrderEntry](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderEntry) objects.
        
        Note that details for orders processed with Square Point of Sale while in
        offline mode might not be transmitted to Square for up to 72 hours. Offline
        orders have a `created_at` value that reflects the time the order was created,
        not the time it was subsequently transmitted to Square.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/orders/search'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SearchOrdersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SearchOrdersResponse])
                res.search_orders_response = out

        return res

    def get_v2_orders_order_id_(self, request: operations.GetV2OrdersOrderIDRequest, security: operations.GetV2OrdersOrderIDSecurity) -> operations.GetV2OrdersOrderIDResponse:
        r"""RetrieveOrder
        Retrieves an [Order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) by ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetV2OrdersOrderIDRequest, base_url, '/v2/orders/{order_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV2OrdersOrderIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RetrieveOrderResponse])
                res.retrieve_order_response = out

        return res

    def put_v2_orders_order_id_(self, request: operations.PutV2OrdersOrderIDRequest, security: operations.PutV2OrdersOrderIDSecurity) -> operations.PutV2OrdersOrderIDResponse:
        r"""UpdateOrder
        Updates an open [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) by adding, replacing, or deleting
        fields. Orders with a `COMPLETED` or `CANCELED` state cannot be updated.
        
        An `UpdateOrder` request requires the following:
        
        - The `order_id` in the endpoint path, identifying the order to update.
        - The latest `version` of the order to update.
        - The [sparse order](https://developer.squareup.com/docs/orders-api/manage-orders#sparse-order-objects)
        containing only the fields to update and the version to which the update is
        being applied.
        - If deleting fields, the [dot notation paths](https://developer.squareup.com/docs/orders-api/manage-orders#on-dot-notation)
        identifying the fields to clear.
        
        To pay for an order, see 
        [Pay for Orders](https://developer.squareup.com/docs/orders-api/pay-for-orders).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutV2OrdersOrderIDRequest, base_url, '/v2/orders/{order_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_order_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutV2OrdersOrderIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UpdateOrderResponse])
                res.update_order_response = out

        return res

    