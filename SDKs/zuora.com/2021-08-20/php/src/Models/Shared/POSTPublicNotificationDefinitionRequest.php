<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * POSTPublicNotificationDefinitionRequest - The request body used to create the notification definition.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class POSTPublicNotificationDefinitionRequest
{
    /**
     * The status of the notification definition. The default value is true.
     * 
     * @var ?bool $active
     */
	#[\JMS\Serializer\Annotation\SerializedName('active')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $active = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('callout')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\POSTPublicNotificationDefinitionRequestCallout')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?POSTPublicNotificationDefinitionRequestCallout $callout = null;
    
    /**
     * The status of the callout action. Default value is false.
     * 
     * @var ?bool $calloutActive
     */
	#[\JMS\Serializer\Annotation\SerializedName('calloutActive')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $calloutActive = null;
    
    /**
     * The profile that notification definition belongs to. 
     * 
     * 
     * You can use the [Query Action](https://www.zuora.com/developer/api-reference/#operation/Action_POSTquery) to get the communication profile Id. See the following request sample:
     * 
     * `{
     *     "queryString": "select Id, ProfileName from CommunicationProfile"
     *  }`
     * 
     * If you do not pass the communicationProfileId, notification service will be automatically added to the 'Default Profile'.
     * 
     * 
     * @var ?string $communicationProfileId
     */
	#[\JMS\Serializer\Annotation\SerializedName('communicationProfileId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $communicationProfileId = null;
    
    /**
     * The description of the notification definition.
     * 
     * @var ?string $description
     */
	#[\JMS\Serializer\Annotation\SerializedName('description')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $description = null;
    
    /**
     * The status of the email action. The default value is false.
     * 
     * @var ?bool $emailActive
     */
	#[\JMS\Serializer\Annotation\SerializedName('emailActive')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $emailActive = null;
    
    /**
     * The ID of the email template. If emailActive is true, an email template is required. And EventType of the email template MUST be the same as the eventType.
     * 
     * @var ?string $emailTemplateId
     */
	#[\JMS\Serializer\Annotation\SerializedName('emailTemplateId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $emailTemplateId = null;
    
    /**
     * The name of the event type. 
     * 
     * 
     * 
     * @var string $eventTypeName
     */
	#[\JMS\Serializer\Annotation\SerializedName('eventTypeName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $eventTypeName;
    
    /**
     * The namespace of the `eventTypeName` field. The `eventTypeName` has the `user.notification` namespace by default. 
     * 
     *           
     * For example, if you want to create a notification definition on the `OrderActionProcessed` event, you must specify `com.zuora.notification` for this field.
     * 
     * 
     * @var ?string $eventTypeNamespace
     */
	#[\JMS\Serializer\Annotation\SerializedName('eventTypeNamespace')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $eventTypeNamespace = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('filterRule')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\POSTPublicNotificationDefinitionRequestFilterRule')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?POSTPublicNotificationDefinitionRequestFilterRule $filterRule = null;
    
    /**
     * The parameter values used to configure the filter rule.
     * 
     * 
     * 
     * @var ?array<string, string> $filterRuleParams
     */
	#[\JMS\Serializer\Annotation\SerializedName('filterRuleParams')]
    #[\JMS\Serializer\Annotation\Type('array<string, string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $filterRuleParams = null;
    
    /**
     * The name of the notification definition, unique per communication profile.
     * 
     * @var string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $name;
    
	public function __construct()
	{
		$this->active = null;
		$this->callout = null;
		$this->calloutActive = null;
		$this->communicationProfileId = null;
		$this->description = null;
		$this->emailActive = null;
		$this->emailTemplateId = null;
		$this->eventTypeName = "";
		$this->eventTypeNamespace = null;
		$this->filterRule = null;
		$this->filterRuleParams = null;
		$this->name = "";
	}
}
