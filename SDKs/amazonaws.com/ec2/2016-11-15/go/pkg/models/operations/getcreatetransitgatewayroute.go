// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETCreateTransitGatewayRouteActionEnum
type GETCreateTransitGatewayRouteActionEnum string

const (
	GETCreateTransitGatewayRouteActionEnumCreateTransitGatewayRoute GETCreateTransitGatewayRouteActionEnum = "CreateTransitGatewayRoute"
)

func (e GETCreateTransitGatewayRouteActionEnum) ToPointer() *GETCreateTransitGatewayRouteActionEnum {
	return &e
}

func (e *GETCreateTransitGatewayRouteActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CreateTransitGatewayRoute":
		*e = GETCreateTransitGatewayRouteActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETCreateTransitGatewayRouteActionEnum: %v", v)
	}
}

// GETCreateTransitGatewayRouteVersionEnum
type GETCreateTransitGatewayRouteVersionEnum string

const (
	GETCreateTransitGatewayRouteVersionEnumTwoThousandAndSixteen1115 GETCreateTransitGatewayRouteVersionEnum = "2016-11-15"
)

func (e GETCreateTransitGatewayRouteVersionEnum) ToPointer() *GETCreateTransitGatewayRouteVersionEnum {
	return &e
}

func (e *GETCreateTransitGatewayRouteVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = GETCreateTransitGatewayRouteVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETCreateTransitGatewayRouteVersionEnum: %v", v)
	}
}

type GETCreateTransitGatewayRouteRequest struct {
	Action GETCreateTransitGatewayRouteActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Indicates whether to drop traffic that matches this route.
	Blackhole *bool `queryParam:"style=form,explode=true,name=Blackhole"`
	// The CIDR range used for destination matches. Routing decisions are based on the most specific match.
	DestinationCidrBlock string `queryParam:"style=form,explode=true,name=DestinationCidrBlock"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The ID of the attachment.
	TransitGatewayAttachmentID *string `queryParam:"style=form,explode=true,name=TransitGatewayAttachmentId"`
	// The ID of the transit gateway route table.
	TransitGatewayRouteTableID string                                  `queryParam:"style=form,explode=true,name=TransitGatewayRouteTableId"`
	Version                    GETCreateTransitGatewayRouteVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm              *string                                 `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256          *string                                 `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential             *string                                 `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                   *string                                 `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken          *string                                 `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature              *string                                 `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders          *string                                 `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETCreateTransitGatewayRouteResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
