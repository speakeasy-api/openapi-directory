/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * InApp Template Request.
 */
export class CreateInAppTemplateRequestBodyInAppTemplateRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: shared.InAppMessageContent })
  @Expose({ name: "Content" })
  @Type(() => shared.InAppMessageContent)
  content?: shared.InAppMessageContent[];

  @SpeakeasyMetadata()
  @Expose({ name: "CustomConfig" })
  customConfig?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "Layout" })
  layout?: shared.LayoutEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "TemplateDescription" })
  templateDescription?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;
}

export class CreateInAppTemplateRequestBody extends SpeakeasyBase {
  /**
   * InApp Template Request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "InAppTemplateRequest" })
  @Type(() => CreateInAppTemplateRequestBodyInAppTemplateRequest)
  inAppTemplateRequest: CreateInAppTemplateRequestBodyInAppTemplateRequest;
}

export class CreateInAppTemplateRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateInAppTemplateRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=template-name",
  })
  templateName: string;
}

export class CreateInAppTemplateResponse extends SpeakeasyBase {
  /**
   * BadRequestException
   */
  @SpeakeasyMetadata()
  badRequestException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createInAppTemplateResponse?: shared.CreateInAppTemplateResponse;

  /**
   * ForbiddenException
   */
  @SpeakeasyMetadata()
  forbiddenException?: any;

  /**
   * InternalServerErrorException
   */
  @SpeakeasyMetadata()
  internalServerErrorException?: any;

  /**
   * MethodNotAllowedException
   */
  @SpeakeasyMetadata()
  methodNotAllowedException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * TooManyRequestsException
   */
  @SpeakeasyMetadata()
  tooManyRequestsException?: any;
}
