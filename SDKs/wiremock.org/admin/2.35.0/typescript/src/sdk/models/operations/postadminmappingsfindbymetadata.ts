/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class PostAdminMappingsFindByMetadataRequestBodyXPathMatch extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "matchesXpath" })
  matchesXpath: string;

  @SpeakeasyMetadata()
  @Expose({ name: "namespaces" })
  namespaces?: Record<string, any>;

  @SpeakeasyMetadata()
  @Expose({ name: "valuePattern" })
  valuePattern?: Record<string, any>;
}

export class PostAdminMappingsFindByMetadataRequestBodyXMLEquality extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "equalToXml" })
  equalToXml: string;
}

export class PostAdminMappingsFindByMetadataRequestBodyJSONPathMatch extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "ignoreArrayOrder" })
  ignoreArrayOrder?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "ignoreExtraElements" })
  ignoreExtraElements?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "matchesJsonPath" })
  matchesJsonPath: string;
}

export class PostAdminMappingsFindByMetadataRequestBodyJSONEquals extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "equalToJson" })
  equalToJson: string;
}

export class PostAdminMappingsFindByMetadataRequestBodyNegativeRegularExpressionMatch extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "doesNotMatch" })
  doesNotMatch: string;
}

export class PostAdminMappingsFindByMetadataRequestBodyRegularExpressionMatch extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "matches" })
  matches: string;
}

export class PostAdminMappingsFindByMetadataRequestBodyStringContains extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "contains" })
  contains: string;
}

export class PostAdminMappingsFindByMetadataRequestBodyStringEquals extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "caseInsensitive" })
  caseInsensitive?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "equalTo" })
  equalTo: boolean;
}

/**
 * Pre-emptive basic auth credentials to match against
 */
export class PostAdminMappingsFindByMetadata200ApplicationJSONMappingsRequestBasicAuthCredentials extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "password" })
  password: string;

  @SpeakeasyMetadata()
  @Expose({ name: "username" })
  username: string;
}

export class PostAdminMappingsFindByMetadata200ApplicationJSONMappingsRequest extends SpeakeasyBase {
  /**
   * Pre-emptive basic auth credentials to match against
   */
  @SpeakeasyMetadata()
  @Expose({ name: "basicAuthCredentials" })
  @Type(
    () =>
      PostAdminMappingsFindByMetadata200ApplicationJSONMappingsRequestBasicAuthCredentials
  )
  basicAuthCredentials?: PostAdminMappingsFindByMetadata200ApplicationJSONMappingsRequestBasicAuthCredentials;

  /**
   * Request body patterns to match against in the <key>: { "<predicate>": "<value>" } form
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bodyPatterns" })
  bodyPatterns?: Record<string, any>[];

  /**
   * Cookie patterns to match against in the <key>: { "<predicate>": "<value>" } form
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cookies" })
  cookies?: Record<string, any>;

  /**
   * Header patterns to match against in the <key>: { "<predicate>": "<value>" } form
   */
  @SpeakeasyMetadata()
  @Expose({ name: "headers" })
  headers?: Record<string, any>;

  /**
   * The HTTP request method e.g. GET
   */
  @SpeakeasyMetadata()
  @Expose({ name: "method" })
  method?: string;

  /**
   * Query parameter patterns to match against in the <key>: { "<predicate>": "<value>" } form
   */
  @SpeakeasyMetadata()
  @Expose({ name: "queryParameters" })
  queryParameters?: Record<string, any>;

  /**
   * The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;

  /**
   * The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "urlPath" })
  urlPath?: string;

  /**
   * The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "urlPathPattern" })
  urlPathPattern?: string;

  /**
   * The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "urlPattern" })
  urlPattern?: string;
}

export enum PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionUniformTypeEnum {
  Uniform = "uniform",
}

/**
 * Uniformly distributed random response delay.
 */
export class PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionUniform extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "lower" })
  lower?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionUniformTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "upper" })
  upper?: number;
}

export enum PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionLogNormalTypeEnum {
  Lognormal = "lognormal",
}

/**
 * Log normal randomly distributed response delay.
 */
export class PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionLogNormal extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "median" })
  median?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "sigma" })
  sigma?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseDelayDistributionLogNormalTypeEnum;
}

/**
 * The fault to apply (instead of a full, valid response).
 */
export enum PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseFaultEnum {
  ConnectionResetByPeer = "CONNECTION_RESET_BY_PEER",
  EmptyResponse = "EMPTY_RESPONSE",
  MalformedResponseChunk = "MALFORMED_RESPONSE_CHUNK",
  RandomDataThenClose = "RANDOM_DATA_THEN_CLOSE",
}

export class PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponse extends SpeakeasyBase {
  /**
   * Extra request headers to send when proxying to another host.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "additionalProxyRequestHeaders" })
  additionalProxyRequestHeaders?: Record<string, any>;

  /**
   * The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "base64Body" })
  base64Body?: string;

  /**
   * The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "body" })
  body?: string;

  /**
   * The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bodyFileName" })
  bodyFileName?: string;

  /**
   * The delay distribution. Valid property configuration is either median/sigma/type or lower/type/upper.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "delayDistribution" })
  delayDistribution?: any;

  /**
   * The fault to apply (instead of a full, valid response).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fault" })
  fault?: PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponseFaultEnum;

  /**
   * Number of milliseconds to delay be before sending the response.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fixedDelayMilliseconds" })
  fixedDelayMilliseconds?: number;

  /**
   * Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fromConfiguredStub" })
  fromConfiguredStub?: boolean;

  /**
   * Map of response headers to send
   */
  @SpeakeasyMetadata()
  @Expose({ name: "headers" })
  headers?: Record<string, any>;

  /**
   * The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "jsonBody" })
  jsonBody?: Record<string, any>;

  /**
   * The base URL of the target to proxy matching requests to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "proxyBaseUrl" })
  proxyBaseUrl?: string;

  /**
   * The HTTP status code to be returned
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: number;

  /**
   * The HTTP status message to be returned
   */
  @SpeakeasyMetadata()
  @Expose({ name: "statusMessage" })
  statusMessage?: string;

  /**
   * Parameters to apply to response transformers.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transformerParameters" })
  transformerParameters?: Record<string, any>;

  /**
   * List of names of transformers to apply to this response.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transformers" })
  transformers?: string[];
}

export class PostAdminMappingsFindByMetadata200ApplicationJSONMappings extends SpeakeasyBase {
  /**
   * This stub mapping's unique identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Arbitrary metadata to be used for e.g. tagging, documentation. Can also be used to find and remove stubs.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  metadata?: Record<string, any>;

  /**
   * The stub mapping's name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * The new state for the scenario to be updated to after this stub is served.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "newScenarioState" })
  newScenarioState?: string;

  /**
   * Indicates that the stub mapping should be persisted immediately on create/update/delete and survive resets to default.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "persistent" })
  persistent?: boolean;

  /**
   * A map of the names of post serve action extensions to trigger and their parameters.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "postServeActions" })
  postServeActions?: Record<string, any>;

  /**
   * This stub mapping's priority relative to others. 1 is highest.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "priority" })
  priority?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "request" })
  @Type(() => PostAdminMappingsFindByMetadata200ApplicationJSONMappingsRequest)
  request?: PostAdminMappingsFindByMetadata200ApplicationJSONMappingsRequest;

  /**
   * The required state of the scenario in order for this stub to be matched.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "requiredScenarioState" })
  requiredScenarioState?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "response" })
  @Type(() => PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponse)
  response?: PostAdminMappingsFindByMetadata200ApplicationJSONMappingsResponse;

  /**
   * The name of the scenario that this stub mapping is part of
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scenarioName" })
  scenarioName?: string;

  /**
   * Alias for the id
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uuid" })
  uuid?: string;
}

export class PostAdminMappingsFindByMetadata200ApplicationJSONMeta extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;
}

/**
 * Matched stub mappings
 */
export class PostAdminMappingsFindByMetadata200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: PostAdminMappingsFindByMetadata200ApplicationJSONMappings,
  })
  @Expose({ name: "mappings" })
  @Type(() => PostAdminMappingsFindByMetadata200ApplicationJSONMappings)
  mappings?: PostAdminMappingsFindByMetadata200ApplicationJSONMappings[];

  @SpeakeasyMetadata()
  @Expose({ name: "meta" })
  @Type(() => PostAdminMappingsFindByMetadata200ApplicationJSONMeta)
  meta?: PostAdminMappingsFindByMetadata200ApplicationJSONMeta;
}

export class PostAdminMappingsFindByMetadataResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Matched stub mappings
   */
  @SpeakeasyMetadata()
  postAdminMappingsFindByMetadata200ApplicationJSONObject?: PostAdminMappingsFindByMetadata200ApplicationJSON;
}
