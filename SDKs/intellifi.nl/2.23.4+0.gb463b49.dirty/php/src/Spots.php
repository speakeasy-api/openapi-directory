<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Spots 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create spotset
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddSpotSetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AddSpotSetResponse
     */
	public function addSpotSet(
        \OpenAPI\OpenAPI\Models\Operations\AddSpotSetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AddSpotSetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spots/{id}/sets', \OpenAPI\OpenAPI\Models\Operations\AddSpotSetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddSpotSetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responseDefaultResource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponseDefaultResource', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get spot
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpotByIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpotByIdResponse
     */
	public function getSpotById(
        \OpenAPI\OpenAPI\Models\Operations\GetSpotByIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpotByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spots/{id}', \OpenAPI\OpenAPI\Models\Operations\GetSpotByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpotByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->spotGet = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get spotset
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpotSetByIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpotSetByIdResponse
     */
	public function getSpotSetById(
        \OpenAPI\OpenAPI\Models\Operations\GetSpotSetByIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpotSetByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spots/{id}/sets/{setId}', \OpenAPI\OpenAPI\Models\Operations\GetSpotSetByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpotSetByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->spotSet = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get spotsets
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpotSetsByIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpotSetsByIdResponse
     */
	public function getSpotSetsById(
        \OpenAPI\OpenAPI\Models\Operations\GetSpotSetsByIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpotSetsByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spots/{id}/sets', \OpenAPI\OpenAPI\Models\Operations\GetSpotSetsByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpotSetsByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->spotSet = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all spots
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSpotsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSpotsResponse
     */
	public function getSpots(
        \OpenAPI\OpenAPI\Models\Operations\GetSpotsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSpotsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spots');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSpotsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSpotsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSpots200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetSpots200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update existing spot
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSpotRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSpotResponse
     */
	public function updateSpot(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSpotRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSpotResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spots/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateSpotRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "spotUpdateInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSpotResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responseDefaultResource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponseDefaultResource', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update existing spotset
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSpotSetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSpotSetResponse
     */
	public function updateSpotSet(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSpotSetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSpotSetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spots/{id}/sets/{setId}', \OpenAPI\OpenAPI\Models\Operations\UpdateSpotSetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "spotSetUpdate", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSpotSetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responseDefaultResource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponseDefaultResource', 'json');
            }
        }

        return $response;
    }
}