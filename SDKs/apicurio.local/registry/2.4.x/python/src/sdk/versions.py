"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Versions:
    r"""When artifact content is updated, old versions of the artifact content are not lost.  All versions can be listed and accessed if necessary. This section describes the operations used to list and access all versions of an artifact's content and metadata."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_artifact_version_json(self, request: operations.CreateArtifactVersionJSONRequest) -> operations.CreateArtifactVersionJSONResponse:
        r"""Create artifact version
        Creates a new version of the artifact by uploading new content.  The configured rules for
        the artifact are applied, and if they all pass, the new content is added as the most recent 
        version of the artifact.  If any of the rules fail, an error is returned.
        
        The body of the request can be the raw content of the new artifact version, or the raw content 
        and a set of references pointing to other artifacts, and the type
        of that content should match the artifact's type (for example if the artifact type is `AVRO`
        then the content of the request should be an Apache Avro document).
        
        This operation can fail for the following reasons:
        
        * Provided content (request body) was empty (HTTP error `400`)
        * No artifact with this `artifactId` exists (HTTP error `404`)
        * The new content violates one of the rules configured for the artifact (HTTP error `409`)
        * A server error occurred (HTTP error `500`)
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateArtifactVersionJSONRequest, base_url, '/groups/{groupId}/artifacts/{artifactId}/versions', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "content_create_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateArtifactVersionJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.VersionMetaData])
                res.version_meta_data = out
        elif http_res.status_code in [404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 409:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RuleViolationError])
                res.rule_violation_error = out

        return res

    def create_artifact_version_raw(self, request: operations.CreateArtifactVersionRawRequest) -> operations.CreateArtifactVersionRawResponse:
        r"""Create artifact version
        Creates a new version of the artifact by uploading new content.  The configured rules for
        the artifact are applied, and if they all pass, the new content is added as the most recent 
        version of the artifact.  If any of the rules fail, an error is returned.
        
        The body of the request can be the raw content of the new artifact version, or the raw content 
        and a set of references pointing to other artifacts, and the type
        of that content should match the artifact's type (for example if the artifact type is `AVRO`
        then the content of the request should be an Apache Avro document).
        
        This operation can fail for the following reasons:
        
        * Provided content (request body) was empty (HTTP error `400`)
        * No artifact with this `artifactId` exists (HTTP error `404`)
        * The new content violates one of the rules configured for the artifact (HTTP error `409`)
        * A server error occurred (HTTP error `500`)
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateArtifactVersionRawRequest, base_url, '/groups/{groupId}/artifacts/{artifactId}/versions', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateArtifactVersionRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.VersionMetaData])
                res.version_meta_data = out
        elif http_res.status_code in [404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 409:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RuleViolationError])
                res.rule_violation_error = out

        return res

    def get_artifact_version(self, request: operations.GetArtifactVersionRequest) -> operations.GetArtifactVersionResponse:
        r"""Get artifact version
        Retrieves a single version of the artifact content.  Both the `artifactId` and the
        unique `version` number must be provided.  The `Content-Type` of the response depends 
        on the artifact type.  In most cases, this is `application/json`, but for some types 
        it may be different (for example, `PROTOBUF`).
        
        This operation can fail for the following reasons:
        
        * No artifact with this `artifactId` exists (HTTP error `404`)
        * No version with this `version` exists (HTTP error `404`)
        * A server error occurred (HTTP error `500`)
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetArtifactVersionRequest, base_url, '/groups/{groupId}/artifacts/{artifactId}/versions/{version}', request)
        
        query_params = utils.get_query_params(operations.GetArtifactVersionRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetArtifactVersionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.file_content = http_res.content
        elif http_res.status_code in [404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_artifact_version_references(self, request: operations.GetArtifactVersionReferencesRequest) -> operations.GetArtifactVersionReferencesResponse:
        r"""Get artifact version
        Retrieves a single version of the artifact content.  Both the `artifactId` and the
        unique `version` number must be provided.  The `Content-Type` of the response depends 
        on the artifact type.  In most cases, this is `application/json`, but for some types 
        it may be different (for example, `PROTOBUF`).
        
        This operation can fail for the following reasons:
        
        * No artifact with this `artifactId` exists (HTTP error `404`)
        * No version with this `version` exists (HTTP error `404`)
        * A server error occurred (HTTP error `500`)
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetArtifactVersionReferencesRequest, base_url, '/groups/{groupId}/artifacts/{artifactId}/versions/{version}/references', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetArtifactVersionReferencesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ArtifactReference]])
                res.artifact_references = out
        elif http_res.status_code in [404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def list_artifact_versions(self, request: operations.ListArtifactVersionsRequest) -> operations.ListArtifactVersionsResponse:
        r"""List artifact versions
        Returns a list of all versions of the artifact.  The result set is paged.
        
        This operation can fail for the following reasons:
        
        * No artifact with this `artifactId` exists (HTTP error `404`)
        * A server error occurred (HTTP error `500`)
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ListArtifactVersionsRequest, base_url, '/groups/{groupId}/artifacts/{artifactId}/versions', request)
        
        query_params = utils.get_query_params(operations.ListArtifactVersionsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListArtifactVersionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.VersionSearchResults])
                res.version_search_results = out
        elif http_res.status_code in [404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def update_artifact_version_state(self, request: operations.UpdateArtifactVersionStateRequest) -> operations.UpdateArtifactVersionStateResponse:
        r"""Update artifact version state
        Updates the state of a specific version of an artifact.  For example, you can use 
        this operation to disable a specific version.
        
        This operation can fail for the following reasons:
        
        * No artifact with this `artifactId` exists (HTTP error `404`)
        * No version with this `version` exists (HTTP error `404`)
        * A server error occurred (HTTP error `500`)
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateArtifactVersionStateRequest, base_url, '/groups/{groupId}/artifacts/{artifactId}/versions/{version}/state', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_state", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateArtifactVersionStateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    