"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import netlicensing as shared_netlicensing
from typing import Optional


@dataclasses.dataclass
class CreateLicenseTemplateSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    

@dataclasses.dataclass
class CreateLicenseTemplateRequestBody:
    
    active: bool = dataclasses.field(metadata={'form': { 'field_name': 'active' }})
    r"""If set to 'false', the License Template is disabled. Licensee can not obtain any new Licenses off this License Template."""  
    license_type: str = dataclasses.field(metadata={'form': { 'field_name': 'licenseType' }})
    r"""Type of Licenses created from this License Template. Supported types: FEATURE, TIMEVOLUME, FLOATING, QUANTITY"""  
    name: str = dataclasses.field(metadata={'form': { 'field_name': 'name' }})
    r"""License Template name to create License Template object"""  
    product_module_number: str = dataclasses.field(metadata={'form': { 'field_name': 'productModuleNumber' }})
    r"""Number of Product Module to create License Template object"""  
    automatic: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'automatic' }})
    r"""If set to 'true', every new Licensee automatically gets one License out of this License Template on creation. Automatic Licenses must have their price set to 0."""  
    currency: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'currency' }})
    r"""Specifies currency for the License price. Check data types to discover which currencies are supported."""  
    hidden: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'hidden' }})
    r"""If set to 'true', this License Template is not shown in NetLicensing Shop as offered for purchase."""  
    hide_licenses: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'hideLicenses' }})
    r"""If set to 'true', Licenses from this License Template are not visible to the end customer, but participate in validation."""  
    max_sessions: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'maxSessions' }})
    r"""Mandatory for 'FLOATING' License Type."""  
    number: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'number' }})
    r"""Unique number (across all Products of a Vendor) that identifies the License Template. Vendor can assign this number when creating a License Template or let NetLicensing generate one. Read-only after creation of the first License from this License Template."""  
    price: Optional[float] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'price' }})
    r"""Price for the License. If >0, it must always be accompanied by the currency specification."""  
    quantity: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'quantity' }})
    r"""Mandatory for 'Pay-per-Use' and 'Node-Locked' License Model."""  
    quota: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'quota' }})
    r"""Mandatory for 'Quota' License Model."""  
    time_volume: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'timeVolume' }})
    r"""Mandatory for 'TIMEVOLUME' License Type."""  
    time_volume_period: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'timeVolumePeriod' }})
    r"""For 'TIMEVOLUME' License Type."""  
    

@dataclasses.dataclass
class CreateLicenseTemplateResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    netlicensing: Optional[shared_netlicensing.Netlicensing] = dataclasses.field(default=None)
    r"""Successful request"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    