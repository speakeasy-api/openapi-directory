// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"time"
)

type ReportMeetingPollsSecurity struct {
	OAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type ReportMeetingPollsRequest struct {
	// The meeting ID or the meeting UUID.  If a meeting ID is provided in the request instead of a UUID, the response will be for the latest meeting instance.
	//
	// If a UUID starts with "/" or contains "//" (example: "/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request.
	MeetingID string `pathParam:"style=simple,explode=false,name=meetingId"`
}

type ReportMeetingPolls200ApplicationXMLQuestionsQuestionDetails struct {
	// Given answer.
	Answer *string
	// Date and time at which the answer to the poll was submitted.
	DateTime *time.Time
	// Unique identifier of the poll.
	PollingID *string
	// Asked question.
	Question *string
}

type ReportMeetingPolls200ApplicationXMLQuestions struct {
	// Participant email.
	Email *string
	// Participant display name.<br> If "anonymous" option is enabled for a [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meet), the participant's polling information will be kept anonymous and the value of `name` field will be "Anonymous Attendee".
	Name *string
	// Array of questions from user.
	QuestionDetails []ReportMeetingPolls200ApplicationXMLQuestionsQuestionDetails
}

// ReportMeetingPolls200ApplicationXML - **HTTP Status Code:** `200`<br>
// Meeting polls report returned.<br>
// This is only available for paid account:{accountId}.
type ReportMeetingPolls200ApplicationXML struct {
	// [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "**long**" format(represented as int64 data type in JSON), also known as the meeting number.
	ID *int64
	// Array of meeting question objects.
	Questions []ReportMeetingPolls200ApplicationXMLQuestions
	// Meeting start time.
	StartTime *time.Time
	// Meeting UUID. Each meeting instance will generate its own UUID(i.e., after a meeting ends, a new UUID will be generated for the next instance of the meeting). Please double encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it.
	UUID *string
}

type ReportMeetingPolls200ApplicationJSONQuestionsQuestionDetails struct {
	// Given answer.
	Answer *string `json:"answer,omitempty"`
	// Date and time at which the answer to the poll was submitted.
	DateTime *time.Time `json:"date_time,omitempty"`
	// Unique identifier of the poll.
	PollingID *string `json:"polling_id,omitempty"`
	// Asked question.
	Question *string `json:"question,omitempty"`
}

type ReportMeetingPolls200ApplicationJSONQuestions struct {
	// Participant email.
	Email *string `json:"email,omitempty"`
	// Participant display name.<br> If "anonymous" option is enabled for a [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meet), the participant's polling information will be kept anonymous and the value of `name` field will be "Anonymous Attendee".
	Name *string `json:"name,omitempty"`
	// Array of questions from user.
	QuestionDetails []ReportMeetingPolls200ApplicationJSONQuestionsQuestionDetails `json:"question_details,omitempty"`
}

// ReportMeetingPolls200ApplicationJSON - **HTTP Status Code:** `200`<br>
// Meeting polls report returned.<br>
// This is only available for paid account:{accountId}.
type ReportMeetingPolls200ApplicationJSON struct {
	// [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "**long**" format(represented as int64 data type in JSON), also known as the meeting number.
	ID *int64 `json:"id,omitempty"`
	// Array of meeting question objects.
	Questions []ReportMeetingPolls200ApplicationJSONQuestions `json:"questions,omitempty"`
	// Meeting start time.
	StartTime *time.Time `json:"start_time,omitempty"`
	// Meeting UUID. Each meeting instance will generate its own UUID(i.e., after a meeting ends, a new UUID will be generated for the next instance of the meeting). Please double encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it.
	UUID *string `json:"uuid,omitempty"`
}

type ReportMeetingPollsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200`<br>
	// Meeting polls report returned.<br>
	// This is only available for paid account:{accountId}.
	ReportMeetingPolls200ApplicationJSONObject *ReportMeetingPolls200ApplicationJSON
}
