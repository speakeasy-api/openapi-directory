"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import object as shared_object
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ComposeRequestSourceObjectsObjectPreconditions:
    r"""Conditions that must be met for this operation to execute."""
    
    if_generation_match: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ifGenerationMatch'), 'exclude': lambda f: f is None }})
    r"""Only perform the composition if the generation of the source object that would be used matches this value. If this value and a generation are both specified, they must be the same value or the call will fail."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ComposeRequestSourceObjects:
    
    generation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('generation'), 'exclude': lambda f: f is None }})
    r"""The generation of this object to use as the source."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The source object's name. All source objects must reside in the same bucket."""  
    object_preconditions: Optional[ComposeRequestSourceObjectsObjectPreconditions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('objectPreconditions'), 'exclude': lambda f: f is None }})
    r"""Conditions that must be met for this operation to execute."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ComposeRequest:
    r"""A Compose request."""
    
    destination: Optional[shared_object.Object] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destination'), 'exclude': lambda f: f is None }})
    r"""An object."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""The kind of item this is."""  
    source_objects: Optional[list[ComposeRequestSourceObjects]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceObjects'), 'exclude': lambda f: f is None }})
    r"""The list of source objects that will be concatenated into a single object."""  
    