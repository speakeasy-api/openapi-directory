/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Accounts {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get Auto ad code for a given ad client.
   */
  adsenseAccountsAdclientsGetAdCode(
    req: operations.AdsenseAccountsAdclientsGetAdCodeRequest,
    security: operations.AdsenseAccountsAdclientsGetAdCodeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdsenseAccountsAdclientsGetAdCodeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdsenseAccountsAdclientsGetAdCodeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{accountId}/adclients/{adClientId}/adcode",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdsenseAccountsAdclientsGetAdCodeSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdsenseAccountsAdclientsGetAdCodeResponse =
        new operations.AdsenseAccountsAdclientsGetAdCodeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.adCode = utils.objectToClass(httpRes?.data, shared.AdCode);
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all ad clients in the specified account.
   */
  adsenseAccountsAdclientsList(
    req: operations.AdsenseAccountsAdclientsListRequest,
    security: operations.AdsenseAccountsAdclientsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdsenseAccountsAdclientsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdsenseAccountsAdclientsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{accountId}/adclients",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdsenseAccountsAdclientsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdsenseAccountsAdclientsListResponse =
        new operations.AdsenseAccountsAdclientsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.adClients = utils.objectToClass(
              httpRes?.data,
              shared.AdClients
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all custom channels which the specified ad unit belongs to.
   */
  adsenseAccountsAdunitsCustomchannelsList(
    req: operations.AdsenseAccountsAdunitsCustomchannelsListRequest,
    security: operations.AdsenseAccountsAdunitsCustomchannelsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdsenseAccountsAdunitsCustomchannelsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdsenseAccountsAdunitsCustomchannelsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}/customchannels",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AdsenseAccountsAdunitsCustomchannelsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdsenseAccountsAdunitsCustomchannelsListResponse =
        new operations.AdsenseAccountsAdunitsCustomchannelsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.customChannels = utils.objectToClass(
              httpRes?.data,
              shared.CustomChannels
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the specified ad unit in the specified ad client for the specified account.
   */
  adsenseAccountsAdunitsGet(
    req: operations.AdsenseAccountsAdunitsGetRequest,
    security: operations.AdsenseAccountsAdunitsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdsenseAccountsAdunitsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdsenseAccountsAdunitsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdsenseAccountsAdunitsGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdsenseAccountsAdunitsGetResponse =
        new operations.AdsenseAccountsAdunitsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.adUnit = utils.objectToClass(httpRes?.data, shared.AdUnit);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get ad code for the specified ad unit.
   */
  adsenseAccountsAdunitsGetAdCode(
    req: operations.AdsenseAccountsAdunitsGetAdCodeRequest,
    security: operations.AdsenseAccountsAdunitsGetAdCodeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdsenseAccountsAdunitsGetAdCodeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdsenseAccountsAdunitsGetAdCodeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}/adcode",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdsenseAccountsAdunitsGetAdCodeSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdsenseAccountsAdunitsGetAdCodeResponse =
        new operations.AdsenseAccountsAdunitsGetAdCodeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.adCode = utils.objectToClass(httpRes?.data, shared.AdCode);
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all ad units in the specified ad client for the specified account.
   */
  adsenseAccountsAdunitsList(
    req: operations.AdsenseAccountsAdunitsListRequest,
    security: operations.AdsenseAccountsAdunitsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdsenseAccountsAdunitsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdsenseAccountsAdunitsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{accountId}/adclients/{adClientId}/adunits",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdsenseAccountsAdunitsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdsenseAccountsAdunitsListResponse =
        new operations.AdsenseAccountsAdunitsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.adUnits = utils.objectToClass(httpRes?.data, shared.AdUnits);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Dismiss (delete) the specified alert from the specified publisher AdSense account.
   */
  adsenseAccountsAlertsDelete(
    req: operations.AdsenseAccountsAlertsDeleteRequest,
    security: operations.AdsenseAccountsAlertsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdsenseAccountsAlertsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdsenseAccountsAlertsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{accountId}/alerts/{alertId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdsenseAccountsAlertsDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdsenseAccountsAlertsDeleteResponse =
        new operations.AdsenseAccountsAlertsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * List the alerts for the specified AdSense account.
   */
  adsenseAccountsAlertsList(
    req: operations.AdsenseAccountsAlertsListRequest,
    security: operations.AdsenseAccountsAlertsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdsenseAccountsAlertsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdsenseAccountsAlertsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{accountId}/alerts",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdsenseAccountsAlertsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdsenseAccountsAlertsListResponse =
        new operations.AdsenseAccountsAlertsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.alerts = utils.objectToClass(httpRes?.data, shared.Alerts);
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all ad units in the specified custom channel.
   */
  adsenseAccountsCustomchannelsAdunitsList(
    req: operations.AdsenseAccountsCustomchannelsAdunitsListRequest,
    security: operations.AdsenseAccountsCustomchannelsAdunitsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdsenseAccountsCustomchannelsAdunitsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdsenseAccountsCustomchannelsAdunitsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{accountId}/adclients/{adClientId}/customchannels/{customChannelId}/adunits",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AdsenseAccountsCustomchannelsAdunitsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdsenseAccountsCustomchannelsAdunitsListResponse =
        new operations.AdsenseAccountsCustomchannelsAdunitsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.adUnits = utils.objectToClass(httpRes?.data, shared.AdUnits);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the specified custom channel from the specified ad client for the specified account.
   */
  adsenseAccountsCustomchannelsGet(
    req: operations.AdsenseAccountsCustomchannelsGetRequest,
    security: operations.AdsenseAccountsCustomchannelsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdsenseAccountsCustomchannelsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdsenseAccountsCustomchannelsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{accountId}/adclients/{adClientId}/customchannels/{customChannelId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdsenseAccountsCustomchannelsGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdsenseAccountsCustomchannelsGetResponse =
        new operations.AdsenseAccountsCustomchannelsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.customChannel = utils.objectToClass(
              httpRes?.data,
              shared.CustomChannel
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all custom channels in the specified ad client for the specified account.
   */
  adsenseAccountsCustomchannelsList(
    req: operations.AdsenseAccountsCustomchannelsListRequest,
    security: operations.AdsenseAccountsCustomchannelsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdsenseAccountsCustomchannelsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdsenseAccountsCustomchannelsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{accountId}/adclients/{adClientId}/customchannels",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdsenseAccountsCustomchannelsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdsenseAccountsCustomchannelsListResponse =
        new operations.AdsenseAccountsCustomchannelsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.customChannels = utils.objectToClass(
              httpRes?.data,
              shared.CustomChannels
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get information about the selected AdSense account.
   */
  adsenseAccountsGet(
    req: operations.AdsenseAccountsGetRequest,
    security: operations.AdsenseAccountsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdsenseAccountsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdsenseAccountsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{accountId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdsenseAccountsGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdsenseAccountsGetResponse =
        new operations.AdsenseAccountsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.account = utils.objectToClass(httpRes?.data, shared.Account);
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all accounts available to this AdSense account.
   */
  adsenseAccountsList(
    req: operations.AdsenseAccountsListRequest,
    security: operations.AdsenseAccountsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdsenseAccountsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdsenseAccountsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/accounts";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdsenseAccountsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdsenseAccountsListResponse =
        new operations.AdsenseAccountsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accounts = utils.objectToClass(httpRes?.data, shared.Accounts);
          }
          break;
      }

      return res;
    });
  }

  /**
   * List the payments for the specified AdSense account.
   */
  adsenseAccountsPaymentsList(
    req: operations.AdsenseAccountsPaymentsListRequest,
    security: operations.AdsenseAccountsPaymentsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdsenseAccountsPaymentsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdsenseAccountsPaymentsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{accountId}/payments",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdsenseAccountsPaymentsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdsenseAccountsPaymentsListResponse =
        new operations.AdsenseAccountsPaymentsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.payments = utils.objectToClass(httpRes?.data, shared.Payments);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Generate an AdSense report based on the report request sent in the query parameters. Returns the result as JSON; to retrieve output in CSV format specify "alt=csv" as a query parameter.
   */
  adsenseAccountsReportsGenerate(
    req: operations.AdsenseAccountsReportsGenerateRequest,
    security: operations.AdsenseAccountsReportsGenerateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdsenseAccountsReportsGenerateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdsenseAccountsReportsGenerateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{accountId}/reports",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdsenseAccountsReportsGenerateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdsenseAccountsReportsGenerateResponse =
        new operations.AdsenseAccountsReportsGenerateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.adsenseReportsGenerateResponse = utils.objectToClass(
              httpRes?.data,
              shared.AdsenseReportsGenerateResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Generate an AdSense report based on the saved report ID sent in the query parameters.
   */
  adsenseAccountsReportsSavedGenerate(
    req: operations.AdsenseAccountsReportsSavedGenerateRequest,
    security: operations.AdsenseAccountsReportsSavedGenerateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdsenseAccountsReportsSavedGenerateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdsenseAccountsReportsSavedGenerateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{accountId}/reports/{savedReportId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdsenseAccountsReportsSavedGenerateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdsenseAccountsReportsSavedGenerateResponse =
        new operations.AdsenseAccountsReportsSavedGenerateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.adsenseReportsGenerateResponse = utils.objectToClass(
              httpRes?.data,
              shared.AdsenseReportsGenerateResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all saved reports in the specified AdSense account.
   */
  adsenseAccountsReportsSavedList(
    req: operations.AdsenseAccountsReportsSavedListRequest,
    security: operations.AdsenseAccountsReportsSavedListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdsenseAccountsReportsSavedListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdsenseAccountsReportsSavedListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{accountId}/reports/saved",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdsenseAccountsReportsSavedListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdsenseAccountsReportsSavedListResponse =
        new operations.AdsenseAccountsReportsSavedListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.savedReports = utils.objectToClass(
              httpRes?.data,
              shared.SavedReports
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List a specific saved ad style for the specified account.
   */
  adsenseAccountsSavedadstylesGet(
    req: operations.AdsenseAccountsSavedadstylesGetRequest,
    security: operations.AdsenseAccountsSavedadstylesGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdsenseAccountsSavedadstylesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdsenseAccountsSavedadstylesGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{accountId}/savedadstyles/{savedAdStyleId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdsenseAccountsSavedadstylesGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdsenseAccountsSavedadstylesGetResponse =
        new operations.AdsenseAccountsSavedadstylesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.savedAdStyle = utils.objectToClass(
              httpRes?.data,
              shared.SavedAdStyle
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all saved ad styles in the specified account.
   */
  adsenseAccountsSavedadstylesList(
    req: operations.AdsenseAccountsSavedadstylesListRequest,
    security: operations.AdsenseAccountsSavedadstylesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdsenseAccountsSavedadstylesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdsenseAccountsSavedadstylesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{accountId}/savedadstyles",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdsenseAccountsSavedadstylesListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdsenseAccountsSavedadstylesListResponse =
        new operations.AdsenseAccountsSavedadstylesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.savedAdStyles = utils.objectToClass(
              httpRes?.data,
              shared.SavedAdStyles
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all URL channels in the specified ad client for the specified account.
   */
  adsenseAccountsUrlchannelsList(
    req: operations.AdsenseAccountsUrlchannelsListRequest,
    security: operations.AdsenseAccountsUrlchannelsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AdsenseAccountsUrlchannelsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AdsenseAccountsUrlchannelsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{accountId}/adclients/{adClientId}/urlchannels",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AdsenseAccountsUrlchannelsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AdsenseAccountsUrlchannelsListResponse =
        new operations.AdsenseAccountsUrlchannelsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.urlChannels = utils.objectToClass(
              httpRes?.data,
              shared.UrlChannels
            );
          }
          break;
      }

      return res;
    });
  }
}
