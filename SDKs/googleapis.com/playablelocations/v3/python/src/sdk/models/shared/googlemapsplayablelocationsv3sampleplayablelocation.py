"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googletypelatlng as shared_googletypelatlng
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleMapsPlayablelocationsV3SamplePlayableLocation:
    r"""A geographical point suitable for placing game objects in location-based games."""
    
    center_point: Optional[shared_googletypelatlng.GoogleTypeLatLng] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('centerPoint'), 'exclude': lambda f: f is None }})
    r"""An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Required. The name of this playable location."""  
    place_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('placeId'), 'exclude': lambda f: f is None }})
    r"""A [place ID] (https://developers.google.com/places/place-id)"""  
    plus_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('plusCode'), 'exclude': lambda f: f is None }})
    r"""A [plus code] (http://openlocationcode.com)"""  
    snapped_point: Optional[shared_googletypelatlng.GoogleTypeLatLng] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('snappedPoint'), 'exclude': lambda f: f is None }})
    r"""An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges."""  
    types: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('types'), 'exclude': lambda f: f is None }})
    r"""A collection of [Playable Location Types](/maps/documentation/gaming/tt/types) for this playable location. The first type in the collection is the primary type. Type information might not be available for all playable locations."""  
    