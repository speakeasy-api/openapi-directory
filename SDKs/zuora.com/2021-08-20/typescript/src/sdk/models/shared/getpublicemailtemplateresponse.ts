/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

/**
 * Email cc type.
 */
export enum GETPublicEmailTemplateResponseCcEmailTypeEnum {
  BillToContact = "BillToContact",
  SoldToContact = "SoldToContact",
  SpecificEmails = "SpecificEmails",
  TenantAdmin = "TenantAdmin",
  BillToAndSoldToContacts = "BillToAndSoldToContacts",
  RunOwner = "RunOwner",
  AllContacts = "AllContacts",
  InvoiceOwnerBillToContact = "InvoiceOwnerBillToContact",
  InvoiceOwnerSoldToContact = "InvoiceOwnerSoldToContact",
  InvoiceOwnerBillToAndSoldToContacts = "InvoiceOwnerBillToAndSoldToContacts",
  InvoiceOwnerAllContacts = "InvoiceOwnerAllContacts",
}

/**
 * The endcode type of the email body.
 */
export enum GETPublicEmailTemplateResponseEncodingTypeEnum {
  Utf8 = "UTF8",
  ShiftJIS = "Shift_JIS",
  Iso2022Jp = "ISO_2022_JP",
  EucJp = "EUC_JP",
  XSjis0213 = "X_SJIS_0213",
}

/**
 * The from email type.
 */
export enum GETPublicEmailTemplateResponseFromEmailTypeEnum {
  TenantEmail = "TenantEmail",
  SpecificEmail = "SpecificEmail",
}

/**
 * The reply email type.
 */
export enum GETPublicEmailTemplateResponseReplyToEmailTypeEnum {
  TenantEmail = "TenantEmail",
  SpecificEmail = "SpecificEmail",
}

/**
 * Email receive type.
 */
export enum GETPublicEmailTemplateResponseToEmailTypeEnum {
  BillToContact = "BillToContact",
  SoldToContact = "SoldToContact",
  SpecificEmails = "SpecificEmails",
  TenantAdmin = "TenantAdmin",
  BillToAndSoldToContacts = "BillToAndSoldToContacts",
  RunOwner = "RunOwner",
  AllContacts = "AllContacts",
  InvoiceOwnerBillToContact = "InvoiceOwnerBillToContact",
  InvoiceOwnerSoldToContact = "InvoiceOwnerSoldToContact",
  InvoiceOwnerBillToAndSoldToContacts = "InvoiceOwnerBillToAndSoldToContacts",
  InvoiceOwnerAllContacts = "InvoiceOwnerAllContacts",
}

/**
 * OK
 */
export class GETPublicEmailTemplateResponse extends SpeakeasyBase {
  /**
   * The status of the email template.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "active" })
  active?: boolean;

  /**
   * Email BCC address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bccEmailAddress" })
  bccEmailAddress?: string;

  /**
   * Email CC address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ccEmailAddress" })
  ccEmailAddress?: string;

  /**
   * Email cc type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ccEmailType" })
  ccEmailType?: GETPublicEmailTemplateResponseCcEmailTypeEnum;

  /**
   * The ID of the user who created the notification definition.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdBy" })
  createdBy?: string;

  /**
   * The time when the notification definition was created. Specified in the UTC timezone in the ISO860 format (YYYY-MM-DDThh:mm:ss.sTZD). E.g. 1997-07-16T19:20:30.45+00:00
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdOn" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdOn?: Date;

  /**
   * The description of the email template.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * The email body. You can add merge fields in the email object using angle brackets.
   *
   * @remarks
   * User can also embed html tags if 'isHtml' is true.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "emailBody" })
  emailBody?: string;

  /**
   * The email subject. You can add merge fields in the email subject using angle brackets.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "emailSubject" })
  emailSubject?: string;

  /**
   * The endcode type of the email body.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "encodingType" })
  encodingType?: GETPublicEmailTemplateResponseEncodingTypeEnum;

  /**
   * The name of the event type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "eventTypeName" })
  eventTypeName?: string;

  /**
   * The namespace of the `eventTypeName` field.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "eventTypeNamespace" })
  eventTypeNamespace?: string;

  /**
   * If formEmailType is SpecificEmail, this field is required.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fromEmailAddress" })
  fromEmailAddress?: string;

  /**
   * The from email type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fromEmailType" })
  fromEmailType?: GETPublicEmailTemplateResponseFromEmailTypeEnum;

  /**
   * The name of email sender.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fromName" })
  fromName?: string;

  /**
   * The filter rule associated with this notification definition.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Specified whether the style of email body is HTML.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isHtml" })
  isHtml?: boolean;

  /**
   * The name of the email template.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * If replyToEmailType is SpecificEmail, this field is required
   */
  @SpeakeasyMetadata()
  @Expose({ name: "replyToEmailAddress" })
  replyToEmailAddress?: string;

  /**
   * The reply email type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "replyToEmailType" })
  replyToEmailType?: GETPublicEmailTemplateResponseReplyToEmailTypeEnum;

  /**
   * If toEmailType is SpecificEmail, this field is required.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "toEmailAddress" })
  toEmailAddress?: string;

  /**
   * Email receive type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "toEmailType" })
  toEmailType?: GETPublicEmailTemplateResponseToEmailTypeEnum;

  /**
   * The ID of the user who updated the notification definition.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updatedBy" })
  updatedBy?: string;

  /**
   * The time when the notification definition was updated. Specified in the UTC timezone in the ISO860 format (YYYY-MM-DDThh:mm:ss.sTZD). E.g. 1997-07-16T19:20:30.45+00:00
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updatedOn" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedOn?: Date;
}
