<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class RegionTargetHttpProxies 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes the specified TargetHttpProxy resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesDeleteResponse
     */
	public function computeRegionTargetHttpProxiesDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified TargetHttpProxy resource in the specified region.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesGetResponse
     */
	public function computeRegionTargetHttpProxiesGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->targetHttpProxy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TargetHttpProxy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a TargetHttpProxy resource in the specified project and region using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesInsertResponse
     */
	public function computeRegionTargetHttpProxiesInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/targetHttpProxies', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "targetHttpProxy", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the list of TargetHttpProxy resources available to the specified project in the specified region.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesListResponse
     */
	public function computeRegionTargetHttpProxiesList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/targetHttpProxies', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->targetHttpProxyList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TargetHttpProxyList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Changes the URL map for TargetHttpProxy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesSetUrlMapRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesSetUrlMapSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesSetUrlMapResponse
     */
	public function computeRegionTargetHttpProxiesSetUrlMap(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesSetUrlMapRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesSetUrlMapSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesSetUrlMapResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}/setUrlMap', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesSetUrlMapRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "urlMapReference", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesSetUrlMapRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpProxiesSetUrlMapResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}