/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { RecorderStatusEnum } from "./recorderstatusenum";
import { Expose, Transform } from "class-transformer";

/**
 * <p>The current status of the configuration recorder.</p> <note> <p>For a detailed status of recording events over time, add your Config events to CloudWatch metrics and use CloudWatch metrics.</p> </note>
 */
export class ConfigurationRecorderStatus extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "lastErrorCode" })
  lastErrorCode?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "lastErrorMessage" })
  lastErrorMessage?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "lastStartTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastStartTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "lastStatus" })
  lastStatus?: RecorderStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "lastStatusChangeTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastStatusChangeTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "lastStopTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastStopTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "recording" })
  recording?: boolean;
}
