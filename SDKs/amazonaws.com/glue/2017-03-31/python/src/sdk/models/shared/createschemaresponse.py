"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import compatibility_enum as shared_compatibility_enum
from ..shared import dataformat_enum as shared_dataformat_enum
from ..shared import schemastatus_enum as shared_schemastatus_enum
from ..shared import schemaversionstatus_enum as shared_schemaversionstatus_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateSchemaResponse:
    r"""Success"""
    
    compatibility: Optional[shared_compatibility_enum.CompatibilityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Compatibility'), 'exclude': lambda f: f is None }})  
    data_format: Optional[shared_dataformat_enum.DataFormatEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DataFormat'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})  
    latest_schema_version: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LatestSchemaVersion'), 'exclude': lambda f: f is None }})  
    next_schema_version: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NextSchemaVersion'), 'exclude': lambda f: f is None }})  
    registry_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RegistryArn'), 'exclude': lambda f: f is None }})  
    registry_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RegistryName'), 'exclude': lambda f: f is None }})  
    schema_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SchemaArn'), 'exclude': lambda f: f is None }})  
    schema_checkpoint: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SchemaCheckpoint'), 'exclude': lambda f: f is None }})  
    schema_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SchemaName'), 'exclude': lambda f: f is None }})  
    schema_status: Optional[shared_schemastatus_enum.SchemaStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SchemaStatus'), 'exclude': lambda f: f is None }})  
    schema_version_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SchemaVersionId'), 'exclude': lambda f: f is None }})  
    schema_version_status: Optional[shared_schemaversionstatus_enum.SchemaVersionStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SchemaVersionStatus'), 'exclude': lambda f: f is None }})  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    