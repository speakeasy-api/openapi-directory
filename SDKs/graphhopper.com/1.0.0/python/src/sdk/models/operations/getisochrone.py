"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import gherror as shared_gherror
from ..shared import isochroneresponse as shared_isochroneresponse
from ..shared import vehicleprofileid_enum as shared_vehicleprofileid_enum
from enum import Enum
from typing import Optional

class GetIsochroneWeightingEnum(str, Enum):
    r"""Use `\\"shortest\\"` to get an isodistance line instead of an isochrone."""
    FASTEST = 'fastest'
    SHORTEST = 'shortest'


@dataclasses.dataclass
class GetIsochroneRequest:
    
    point: str = dataclasses.field(metadata={'query_param': { 'field_name': 'point', 'style': 'form', 'explode': True }})
    r"""Specify the start coordinate"""  
    buckets: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'buckets', 'style': 'form', 'explode': True }})
    r"""Number by which to divide the given `time_limit` to create `buckets` nested isochrones of time intervals `time_limit-n*time_limit/buckets`. Applies analogously to `distance_limit`."""  
    distance_limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'distance_limit', 'style': 'form', 'explode': True }})
    r"""Specify which distance the vehicle should travel. In meters."""  
    reverse_flow: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'reverse_flow', 'style': 'form', 'explode': True }})
    r"""If `false` the flow goes from point to the polygon, if `true` the flow goes from the polygon \\"inside\\" to the point.
    Example use case for `false`&#58; *How many potential customer can be reached within 30min travel time from your store* vs. `true`&#58; *How many customers can reach your store within 30min travel time.*
    """  
    time_limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'time_limit', 'style': 'form', 'explode': True }})
    r"""Specify which time the vehicle should travel. In seconds."""  
    vehicle: Optional[shared_vehicleprofileid_enum.VehicleProfileIDEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'vehicle', 'style': 'form', 'explode': True }})
    r"""The vehicle profile for which the route should be calculated."""  
    weighting: Optional[GetIsochroneWeightingEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'weighting', 'style': 'form', 'explode': True }})
    r"""Use `\\"shortest\\"` to get an isodistance line instead of an isochrone."""  
    

@dataclasses.dataclass
class GetIsochroneResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    gh_error: Optional[shared_gherror.GHError] = dataclasses.field(default=None)
    r"""Unexpected Error"""  
    isochrone_response: Optional[shared_isochroneresponse.IsochroneResponse] = dataclasses.field(default=None)
    r"""Isochrone Result"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    