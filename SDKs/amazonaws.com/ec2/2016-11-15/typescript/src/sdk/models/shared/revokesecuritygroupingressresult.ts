/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";

/**
 * Describes an IPv4 range.
 */
export class RevokeSecurityGroupIngressResultUnknownIpPermissionsIpRanges extends SpeakeasyBase {
  @SpeakeasyMetadata()
  cidrIp?: string;

  @SpeakeasyMetadata()
  description?: string;
}

/**
 * [EC2-VPC only] Describes an IPv6 range.
 */
export class RevokeSecurityGroupIngressResultUnknownIpPermissionsIpv6Ranges extends SpeakeasyBase {
  @SpeakeasyMetadata()
  cidrIpv6?: string;

  @SpeakeasyMetadata()
  description?: string;
}

/**
 * Describes a prefix list ID.
 */
export class RevokeSecurityGroupIngressResultUnknownIpPermissionsPrefixListIds extends SpeakeasyBase {
  @SpeakeasyMetadata()
  description?: string;

  @SpeakeasyMetadata()
  prefixListId?: string;
}

/**
 * <p>Describes a security group and Amazon Web Services account ID pair.</p> <note> <p>We are retiring EC2-Classic. We recommend that you migrate from EC2-Classic to a VPC. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-migrate.html">Migrate from EC2-Classic to a VPC</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </note>
 */
export class RevokeSecurityGroupIngressResultUnknownIpPermissionsUserIdGroupPairs extends SpeakeasyBase {
  @SpeakeasyMetadata()
  description?: string;

  @SpeakeasyMetadata()
  groupId?: string;

  @SpeakeasyMetadata()
  groupName?: string;

  @SpeakeasyMetadata()
  peeringStatus?: string;

  @SpeakeasyMetadata()
  userId?: string;

  @SpeakeasyMetadata()
  vpcId?: string;

  @SpeakeasyMetadata()
  vpcPeeringConnectionId?: string;
}

/**
 * Describes a set of permissions for a security group rule.
 */
export class RevokeSecurityGroupIngressResultUnknownIpPermissions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  fromPort?: number;

  @SpeakeasyMetadata()
  ipProtocol?: string;

  @SpeakeasyMetadata({
    elemType: RevokeSecurityGroupIngressResultUnknownIpPermissionsIpRanges,
  })
  ipRanges?: RevokeSecurityGroupIngressResultUnknownIpPermissionsIpRanges[];

  @SpeakeasyMetadata({
    elemType: RevokeSecurityGroupIngressResultUnknownIpPermissionsIpv6Ranges,
  })
  ipv6Ranges?: RevokeSecurityGroupIngressResultUnknownIpPermissionsIpv6Ranges[];

  @SpeakeasyMetadata({
    elemType: RevokeSecurityGroupIngressResultUnknownIpPermissionsPrefixListIds,
  })
  prefixListIds?: RevokeSecurityGroupIngressResultUnknownIpPermissionsPrefixListIds[];

  @SpeakeasyMetadata()
  toPort?: number;

  @SpeakeasyMetadata({
    elemType:
      RevokeSecurityGroupIngressResultUnknownIpPermissionsUserIdGroupPairs,
  })
  userIdGroupPairs?: RevokeSecurityGroupIngressResultUnknownIpPermissionsUserIdGroupPairs[];
}

/**
 * Success
 */
export class RevokeSecurityGroupIngressResult extends SpeakeasyBase {
  @SpeakeasyMetadata()
  return?: boolean;

  @SpeakeasyMetadata({
    elemType: RevokeSecurityGroupIngressResultUnknownIpPermissions,
  })
  unknownIpPermissions?: RevokeSecurityGroupIngressResultUnknownIpPermissions[];
}
