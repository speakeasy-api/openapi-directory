"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Users:
    r"""SoundCloud Users Endpoints."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_users_user_id_(self, request: operations.GetUsersUserIDRequest, security: operations.GetUsersUserIDSecurity) -> operations.GetUsersUserIDResponse:
        r"""Returns a user."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUsersUserIDRequest, base_url, '/users/{user_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUsersUserIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CompleteUser])
                res.complete_user = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_users_user_id_comments(self, request: operations.GetUsersUserIDCommentsRequest, security: operations.GetUsersUserIDCommentsSecurity) -> operations.GetUsersUserIDCommentsResponse:
        r"""Returns a list of user's comments."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUsersUserIDCommentsRequest, base_url, '/users/{user_id}/comments', request)
        
        query_params = utils.get_query_params(operations.GetUsersUserIDCommentsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUsersUserIDCommentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Comment]])
                res.comments_list = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_users_user_id_favorites(self, request: operations.GetUsersUserIDFavoritesRequest, security: operations.GetUsersUserIDFavoritesSecurity) -> operations.GetUsersUserIDFavoritesResponse:
        r"""Returns a list of user's favorited or liked tracks. (use /users/:userId/likes/tracks instead, to fetch a user's likes)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUsersUserIDFavoritesRequest, base_url, '/users/{user_id}/favorites', request)
        
        query_params = utils.get_query_params(operations.GetUsersUserIDFavoritesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUsersUserIDFavoritesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.get_users_user_id_favorites_200_application_json_one_of = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_users_user_id_followers(self, request: operations.GetUsersUserIDFollowersRequest, security: operations.GetUsersUserIDFollowersSecurity) -> operations.GetUsersUserIDFollowersResponse:
        r"""Returns a list of user’s followers.
        Returns a list of users that follows (user_id).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUsersUserIDFollowersRequest, base_url, '/users/{user_id}/followers', request)
        
        query_params = utils.get_query_params(operations.GetUsersUserIDFollowersRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUsersUserIDFollowersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.get_users_user_id_followers_200_application_json_one_of = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_users_user_id_followings(self, request: operations.GetUsersUserIDFollowingsRequest, security: operations.GetUsersUserIDFollowingsSecurity) -> operations.GetUsersUserIDFollowingsResponse:
        r"""Returns a list of user’s followings.
        Returns list of users that (user_id) follows.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUsersUserIDFollowingsRequest, base_url, '/users/{user_id}/followings', request)
        
        query_params = utils.get_query_params(operations.GetUsersUserIDFollowingsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUsersUserIDFollowingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.get_users_user_id_followings_200_application_json_one_of = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_users_user_id_followings_following_id_(self, request: operations.GetUsersUserIDFollowingsFollowingIDRequest, security: operations.GetUsersUserIDFollowingsFollowingIDSecurity) -> operations.GetUsersUserIDFollowingsFollowingIDResponse:
        r"""Returns a user's following. (use /users/{user_id} instead, to fetch the user details)
        Returns (following_id) that is followed by (user_id).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUsersUserIDFollowingsFollowingIDRequest, base_url, '/users/{user_id}/followings/{following_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUsersUserIDFollowingsFollowingIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CompleteUser])
                res.complete_user = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_users_user_id_likes_tracks(self, request: operations.GetUsersUserIDLikesTracksRequest, security: operations.GetUsersUserIDLikesTracksSecurity) -> operations.GetUsersUserIDLikesTracksResponse:
        r"""Returns a list of user's liked tracks."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUsersUserIDLikesTracksRequest, base_url, '/users/{user_id}/likes/tracks', request)
        
        query_params = utils.get_query_params(operations.GetUsersUserIDLikesTracksRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUsersUserIDLikesTracksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.get_users_user_id_likes_tracks_200_application_json_one_of = out
        elif http_res.status_code in [400, 401]:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_users_user_id_playlists(self, request: operations.GetUsersUserIDPlaylistsRequest, security: operations.GetUsersUserIDPlaylistsSecurity) -> operations.GetUsersUserIDPlaylistsResponse:
        r"""Returns a list of user's playlists."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUsersUserIDPlaylistsRequest, base_url, '/users/{user_id}/playlists', request)
        
        query_params = utils.get_query_params(operations.GetUsersUserIDPlaylistsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUsersUserIDPlaylistsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.get_users_user_id_playlists_200_application_json_one_of = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_users_user_id_tracks(self, request: operations.GetUsersUserIDTracksRequest, security: operations.GetUsersUserIDTracksSecurity) -> operations.GetUsersUserIDTracksResponse:
        r"""Returns a list of user's tracks."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUsersUserIDTracksRequest, base_url, '/users/{user_id}/tracks', request)
        
        query_params = utils.get_query_params(operations.GetUsersUserIDTracksRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUsersUserIDTracksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.get_users_user_id_tracks_200_application_json_one_of = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_users_user_id_web_profiles(self, request: operations.GetUsersUserIDWebProfilesRequest, security: operations.GetUsersUserIDWebProfilesSecurity) -> operations.GetUsersUserIDWebProfilesResponse:
        r"""Returns list of user's links added to their profile (website, facebook, instagram)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUsersUserIDWebProfilesRequest, base_url, '/users/{user_id}/web-profiles', request)
        
        query_params = utils.get_query_params(operations.GetUsersUserIDWebProfilesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUsersUserIDWebProfilesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.WebProfiles]])
                res.web_profiles = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    