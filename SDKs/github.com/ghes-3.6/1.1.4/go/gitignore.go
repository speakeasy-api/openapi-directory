// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"context"
	"fmt"
	"net/http"
	"openapi/pkg/models/operations"
	"openapi/pkg/models/shared"
	"openapi/pkg/utils"
	"strings"
)

// gitignore - View gitignore templates
type gitignore struct {
	defaultClient  HTTPClient
	securityClient HTTPClient
	serverURL      string
	language       string
	sdkVersion     string
	genVersion     string
}

func newGitignore(defaultClient, securityClient HTTPClient, serverURL, language, sdkVersion, genVersion string) *gitignore {
	return &gitignore{
		defaultClient:  defaultClient,
		securityClient: securityClient,
		serverURL:      serverURL,
		language:       language,
		sdkVersion:     sdkVersion,
		genVersion:     genVersion,
	}
}

// GitignoreGetAllTemplates - Get all gitignore templates
// List all templates available to pass as an option when [creating a repository](https://docs.github.com/enterprise-server@3.6/rest/reference/repos#create-a-repository-for-the-authenticated-user).
// https://docs.github.com/enterprise-server@3.6/rest/reference/gitignore#get-all-gitignore-templates - API method documentation
func (s *gitignore) GitignoreGetAllTemplates(ctx context.Context) (*operations.GitignoreGetAllTemplatesResponse, error) {
	baseURL := s.serverURL
	url := strings.TrimSuffix(baseURL, "/") + "/gitignore/templates"

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	client := s.defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GitignoreGetAllTemplatesResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out []string
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.GitignoreGetAllTemplates200ApplicationJSONStrings = out
		}
	case httpRes.StatusCode == 304:
	}

	return res, nil
}

// GitignoreGetTemplate - Get a gitignore template
// The API also allows fetching the source of a single template.
// Use the raw [media type](https://docs.github.com/enterprise-server@3.6/rest/overview/media-types/) to get the raw contents.
// https://docs.github.com/enterprise-server@3.6/rest/reference/gitignore#get-a-gitignore-template - API method documentation
func (s *gitignore) GitignoreGetTemplate(ctx context.Context, request operations.GitignoreGetTemplateRequest) (*operations.GitignoreGetTemplateResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/gitignore/templates/{name}", request.PathParams, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	client := s.defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GitignoreGetTemplateResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.GitignoreTemplate
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.GitignoreTemplate = out
		}
	case httpRes.StatusCode == 304:
	}

	return res, nil
}
