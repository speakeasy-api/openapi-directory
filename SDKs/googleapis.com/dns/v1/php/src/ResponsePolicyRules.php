<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class ResponsePolicyRules 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a new Response Policy Rule.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesCreateResponse
     */
	public function dnsResponsePolicyRulesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dns/v1/projects/{project}/responsePolicies/{responsePolicy}/rules', \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "responsePolicyRule", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responsePolicyRule = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponsePolicyRule', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a previously created Response Policy Rule.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesDeleteResponse
     */
	public function dnsResponsePolicyRulesDelete(
        \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dns/v1/projects/{project}/responsePolicies/{responsePolicy}/rules/{responsePolicyRule}', \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Fetches the representation of an existing Response Policy Rule.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesGetResponse
     */
	public function dnsResponsePolicyRulesGet(
        \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dns/v1/projects/{project}/responsePolicies/{responsePolicy}/rules/{responsePolicyRule}', \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responsePolicyRule = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponsePolicyRule', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Enumerates all Response Policy Rules associated with a project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesListResponse
     */
	public function dnsResponsePolicyRulesList(
        \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dns/v1/projects/{project}/responsePolicies/{responsePolicy}/rules', \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responsePolicyRulesListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponsePolicyRulesListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Applies a partial update to an existing Response Policy Rule.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesPatchResponse
     */
	public function dnsResponsePolicyRulesPatch(
        \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dns/v1/projects/{project}/responsePolicies/{responsePolicy}/rules/{responsePolicyRule}', \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "responsePolicyRule1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responsePolicyRulesPatchResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponsePolicyRulesPatchResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing Response Policy Rule.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesUpdateResponse
     */
	public function dnsResponsePolicyRulesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dns/v1/projects/{project}/responsePolicies/{responsePolicy}/rules/{responsePolicyRule}', \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "responsePolicyRule1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DnsResponsePolicyRulesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responsePolicyRulesUpdateResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponsePolicyRulesUpdateResponse', 'json');
            }
        }

        return $response;
    }
}