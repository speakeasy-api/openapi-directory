// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UpdateParallelDataXAmzTargetEnum
type UpdateParallelDataXAmzTargetEnum string

const (
	UpdateParallelDataXAmzTargetEnumAwsShineFrontendService20170701UpdateParallelData UpdateParallelDataXAmzTargetEnum = "AWSShineFrontendService_20170701.UpdateParallelData"
)

func (e *UpdateParallelDataXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AWSShineFrontendService_20170701.UpdateParallelData":
		*e = UpdateParallelDataXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateParallelDataXAmzTargetEnum: %s", s)
	}
}

type UpdateParallelDataHeaders struct {
	XAmzAlgorithm     *string                          `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                          `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                          `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                          `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                          `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                          `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                          `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        UpdateParallelDataXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type UpdateParallelDataRequest struct {
	Headers UpdateParallelDataHeaders
	Request shared.UpdateParallelDataRequest `request:"mediaType=application/json"`
}

type UpdateParallelDataResponse struct {
	// ConcurrentModificationException
	ConcurrentModificationException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// InternalServerException
	InternalServerException interface{}
	// InvalidParameterValueException
	InvalidParameterValueException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	StatusCode             int
	RawResponse            *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// TooManyRequestsException
	TooManyRequestsException interface{}
	// Success
	UpdateParallelDataResponse *shared.UpdateParallelDataResponse
}
