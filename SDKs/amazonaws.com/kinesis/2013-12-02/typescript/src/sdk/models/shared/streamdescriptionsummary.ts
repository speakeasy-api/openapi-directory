/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { EncryptionTypeEnum } from "./encryptiontypeenum";
import { EnhancedMetrics } from "./enhancedmetrics";
import { StreamModeDetails } from "./streammodedetails";
import { StreamStatusEnum } from "./streamstatusenum";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Represents the output for <a>DescribeStreamSummary</a>
 */
export class StreamDescriptionSummary extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "ConsumerCount" })
  consumerCount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "EncryptionType" })
  encryptionType?: EncryptionTypeEnum;

  @SpeakeasyMetadata({ elemType: EnhancedMetrics })
  @Expose({ name: "EnhancedMonitoring" })
  @Type(() => EnhancedMetrics)
  enhancedMonitoring: EnhancedMetrics[];

  @SpeakeasyMetadata()
  @Expose({ name: "KeyId" })
  keyId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "OpenShardCount" })
  openShardCount: number;

  @SpeakeasyMetadata()
  @Expose({ name: "RetentionPeriodHours" })
  retentionPeriodHours: number;

  @SpeakeasyMetadata()
  @Expose({ name: "StreamARN" })
  streamARN: string;

  @SpeakeasyMetadata()
  @Expose({ name: "StreamCreationTimestamp" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  streamCreationTimestamp: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "StreamModeDetails" })
  @Type(() => StreamModeDetails)
  streamModeDetails?: StreamModeDetails;

  @SpeakeasyMetadata()
  @Expose({ name: "StreamName" })
  streamName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "StreamStatus" })
  streamStatus: StreamStatusEnum;
}
