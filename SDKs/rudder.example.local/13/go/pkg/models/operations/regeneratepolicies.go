// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// RegeneratePolicies200ApplicationJSONActionEnum - The id of the action
type RegeneratePolicies200ApplicationJSONActionEnum string

const (
	RegeneratePolicies200ApplicationJSONActionEnumRegeneratePolicies RegeneratePolicies200ApplicationJSONActionEnum = "regeneratePolicies"
)

func (e *RegeneratePolicies200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "regeneratePolicies":
		*e = RegeneratePolicies200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RegeneratePolicies200ApplicationJSONActionEnum: %s", s)
	}
}

type RegeneratePolicies200ApplicationJSONDataPoliciesEnum string

const (
	RegeneratePolicies200ApplicationJSONDataPoliciesEnumStarted RegeneratePolicies200ApplicationJSONDataPoliciesEnum = "Started"
)

func (e *RegeneratePolicies200ApplicationJSONDataPoliciesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Started":
		*e = RegeneratePolicies200ApplicationJSONDataPoliciesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RegeneratePolicies200ApplicationJSONDataPoliciesEnum: %s", s)
	}
}

type RegeneratePolicies200ApplicationJSONData struct {
	Policies RegeneratePolicies200ApplicationJSONDataPoliciesEnum `json:"policies"`
}

// RegeneratePolicies200ApplicationJSONResultEnum - Result of the request
type RegeneratePolicies200ApplicationJSONResultEnum string

const (
	RegeneratePolicies200ApplicationJSONResultEnumSuccess RegeneratePolicies200ApplicationJSONResultEnum = "success"
	RegeneratePolicies200ApplicationJSONResultEnumError   RegeneratePolicies200ApplicationJSONResultEnum = "error"
)

func (e *RegeneratePolicies200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = RegeneratePolicies200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RegeneratePolicies200ApplicationJSONResultEnum: %s", s)
	}
}

// RegeneratePolicies200ApplicationJSON - Success
type RegeneratePolicies200ApplicationJSON struct {
	// The id of the action
	Action RegeneratePolicies200ApplicationJSONActionEnum `json:"action"`
	Data   RegeneratePolicies200ApplicationJSONData       `json:"data"`
	// Result of the request
	Result RegeneratePolicies200ApplicationJSONResultEnum `json:"result"`
}

type RegeneratePoliciesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	RegeneratePolicies200ApplicationJSONObject *RegeneratePolicies200ApplicationJSON
}
