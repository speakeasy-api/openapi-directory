// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type AddNotificationHeaders struct {
	// Access token required to make the API call.
	EvAccessToken string `header:"style=simple,explode=false,name=ev-access-token"`
	// API Key required to make API call.
	EvAPIKey string `header:"style=simple,explode=false,name=ev-api-key"`
}

// AddNotificationAddNotificationRequestBodyActionEnum - Type of action be notified about. Notifications will only be fired for the given type of action. Valid choices are **upload**, **download**, **delete** or **all** (upload/download/delete)
type AddNotificationAddNotificationRequestBodyActionEnum string

const (
	AddNotificationAddNotificationRequestBodyActionEnumUpload   AddNotificationAddNotificationRequestBodyActionEnum = "upload"
	AddNotificationAddNotificationRequestBodyActionEnumDownload AddNotificationAddNotificationRequestBodyActionEnum = "download"
	AddNotificationAddNotificationRequestBodyActionEnumDelete   AddNotificationAddNotificationRequestBodyActionEnum = "delete"
	AddNotificationAddNotificationRequestBodyActionEnumAll      AddNotificationAddNotificationRequestBodyActionEnum = "all"
)

func (e *AddNotificationAddNotificationRequestBodyActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "upload":
		fallthrough
	case "download":
		fallthrough
	case "delete":
		fallthrough
	case "all":
		*e = AddNotificationAddNotificationRequestBodyActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AddNotificationAddNotificationRequestBodyActionEnum: %s", s)
	}
}

// AddNotificationAddNotificationRequestBodyTypeEnum - What kind of notification you're making. Valid choices are:
//
// - **file** to monitor activity for a file resource
// - **folder** to monitor activity for a folder resource
type AddNotificationAddNotificationRequestBodyTypeEnum string

const (
	AddNotificationAddNotificationRequestBodyTypeEnumFile   AddNotificationAddNotificationRequestBodyTypeEnum = "file"
	AddNotificationAddNotificationRequestBodyTypeEnumFolder AddNotificationAddNotificationRequestBodyTypeEnum = "folder"
)

func (e *AddNotificationAddNotificationRequestBodyTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "file":
		fallthrough
	case "folder":
		*e = AddNotificationAddNotificationRequestBodyTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AddNotificationAddNotificationRequestBodyTypeEnum: %s", s)
	}
}

type AddNotificationAddNotificationRequestBody struct {
	// Type of action be notified about. Notifications will only be fired for the given type of action. Valid choices are **upload**, **download**, **delete** or **all** (upload/download/delete)
	Action AddNotificationAddNotificationRequestBodyActionEnum `json:"action"`
	// Custom message to include in notification emails.
	Message *string `json:"message,omitempty"`
	// Email addresses to send notification emails to. If not specified, sends to the current user's email address.
	Recipients []string `json:"recipients,omitempty"`
	// Resources for this notification. See details on [how to specify resources](#section/Identifying-Resources) above.
	Resource string `json:"resource"`
	// Set to true if the user should be notified by email when the notification is triggered.
	SendEmail bool `json:"sendEmail"`
	// What kind of notification you're making. Valid choices are:
	//
	// - **file** to monitor activity for a file resource
	// - **folder** to monitor activity for a folder resource
	Type AddNotificationAddNotificationRequestBodyTypeEnum `json:"type"`
	// Determines which users' actions should trigger the notification.
	//
	// Rather than listing  individual users, you can also use 3 special options:
	//
	// - **notice\_user\_all** for activity by any user or share recipient
	// - **notice\_user\_all\_users** for activity only by user accounts
	// - **notice\_user\_all\_recipient** for activity only by share recipients
	Usernames []string `json:"usernames"`
}

type AddNotificationRequest struct {
	Headers AddNotificationHeaders
	Request *AddNotificationAddNotificationRequestBody `request:"mediaType=application/json"`
}

type AddNotificationResponse struct {
	ContentType string
	// Successful Operation
	NotificationResponse *shared.NotificationResponse
	StatusCode           int
	RawResponse          *http.Response
}
