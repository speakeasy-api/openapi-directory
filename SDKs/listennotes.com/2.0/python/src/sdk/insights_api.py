"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class InsightsAPI:
    r"""Endpoints to get insights of podcasts, e.g., audience demographics"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_podcast_audience(self, request: operations.GetPodcastAudienceRequest) -> operations.GetPodcastAudienceResponse:
        r"""Fetch audience demographics for a podcast
        Fetch audience demographics for a podcast - 1) directly measured on the Listen Notes platform; 2) only supports audience breakdown by regions for now; 3) not every podcast has data.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPodcastAudienceRequest, base_url, '/podcasts/{id}/audience', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPodcastAudienceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PodcastAudienceResponse])
                res.podcast_audience_response = out
        elif http_res.status_code == 401 or http_res.status_code == 404 or http_res.status_code == 429 or http_res.status_code >= 500 and http_res.status_code < 600:
            pass

        return res

    