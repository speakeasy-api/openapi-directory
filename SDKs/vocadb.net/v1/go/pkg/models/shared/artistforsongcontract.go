// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ArtistForSongContractCategoriesEnum string

const (
	ArtistForSongContractCategoriesEnumNothing     ArtistForSongContractCategoriesEnum = "Nothing"
	ArtistForSongContractCategoriesEnumVocalist    ArtistForSongContractCategoriesEnum = "Vocalist"
	ArtistForSongContractCategoriesEnumProducer    ArtistForSongContractCategoriesEnum = "Producer"
	ArtistForSongContractCategoriesEnumAnimator    ArtistForSongContractCategoriesEnum = "Animator"
	ArtistForSongContractCategoriesEnumLabel       ArtistForSongContractCategoriesEnum = "Label"
	ArtistForSongContractCategoriesEnumCircle      ArtistForSongContractCategoriesEnum = "Circle"
	ArtistForSongContractCategoriesEnumOther       ArtistForSongContractCategoriesEnum = "Other"
	ArtistForSongContractCategoriesEnumBand        ArtistForSongContractCategoriesEnum = "Band"
	ArtistForSongContractCategoriesEnumIllustrator ArtistForSongContractCategoriesEnum = "Illustrator"
	ArtistForSongContractCategoriesEnumSubject     ArtistForSongContractCategoriesEnum = "Subject"
)

func (e *ArtistForSongContractCategoriesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Nothing":
		fallthrough
	case "Vocalist":
		fallthrough
	case "Producer":
		fallthrough
	case "Animator":
		fallthrough
	case "Label":
		fallthrough
	case "Circle":
		fallthrough
	case "Other":
		fallthrough
	case "Band":
		fallthrough
	case "Illustrator":
		fallthrough
	case "Subject":
		*e = ArtistForSongContractCategoriesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ArtistForSongContractCategoriesEnum: %s", s)
	}
}

type ArtistForSongContractEffectiveRolesEnum string

const (
	ArtistForSongContractEffectiveRolesEnumDefault           ArtistForSongContractEffectiveRolesEnum = "Default"
	ArtistForSongContractEffectiveRolesEnumAnimator          ArtistForSongContractEffectiveRolesEnum = "Animator"
	ArtistForSongContractEffectiveRolesEnumArranger          ArtistForSongContractEffectiveRolesEnum = "Arranger"
	ArtistForSongContractEffectiveRolesEnumComposer          ArtistForSongContractEffectiveRolesEnum = "Composer"
	ArtistForSongContractEffectiveRolesEnumDistributor       ArtistForSongContractEffectiveRolesEnum = "Distributor"
	ArtistForSongContractEffectiveRolesEnumIllustrator       ArtistForSongContractEffectiveRolesEnum = "Illustrator"
	ArtistForSongContractEffectiveRolesEnumInstrumentalist   ArtistForSongContractEffectiveRolesEnum = "Instrumentalist"
	ArtistForSongContractEffectiveRolesEnumLyricist          ArtistForSongContractEffectiveRolesEnum = "Lyricist"
	ArtistForSongContractEffectiveRolesEnumMastering         ArtistForSongContractEffectiveRolesEnum = "Mastering"
	ArtistForSongContractEffectiveRolesEnumPublisher         ArtistForSongContractEffectiveRolesEnum = "Publisher"
	ArtistForSongContractEffectiveRolesEnumVocalist          ArtistForSongContractEffectiveRolesEnum = "Vocalist"
	ArtistForSongContractEffectiveRolesEnumVoiceManipulator  ArtistForSongContractEffectiveRolesEnum = "VoiceManipulator"
	ArtistForSongContractEffectiveRolesEnumOther             ArtistForSongContractEffectiveRolesEnum = "Other"
	ArtistForSongContractEffectiveRolesEnumMixer             ArtistForSongContractEffectiveRolesEnum = "Mixer"
	ArtistForSongContractEffectiveRolesEnumChorus            ArtistForSongContractEffectiveRolesEnum = "Chorus"
	ArtistForSongContractEffectiveRolesEnumEncoder           ArtistForSongContractEffectiveRolesEnum = "Encoder"
	ArtistForSongContractEffectiveRolesEnumVocalDataProvider ArtistForSongContractEffectiveRolesEnum = "VocalDataProvider"
)

func (e *ArtistForSongContractEffectiveRolesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Default":
		fallthrough
	case "Animator":
		fallthrough
	case "Arranger":
		fallthrough
	case "Composer":
		fallthrough
	case "Distributor":
		fallthrough
	case "Illustrator":
		fallthrough
	case "Instrumentalist":
		fallthrough
	case "Lyricist":
		fallthrough
	case "Mastering":
		fallthrough
	case "Publisher":
		fallthrough
	case "Vocalist":
		fallthrough
	case "VoiceManipulator":
		fallthrough
	case "Other":
		fallthrough
	case "Mixer":
		fallthrough
	case "Chorus":
		fallthrough
	case "Encoder":
		fallthrough
	case "VocalDataProvider":
		*e = ArtistForSongContractEffectiveRolesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ArtistForSongContractEffectiveRolesEnum: %s", s)
	}
}

type ArtistForSongContractRolesEnum string

const (
	ArtistForSongContractRolesEnumDefault           ArtistForSongContractRolesEnum = "Default"
	ArtistForSongContractRolesEnumAnimator          ArtistForSongContractRolesEnum = "Animator"
	ArtistForSongContractRolesEnumArranger          ArtistForSongContractRolesEnum = "Arranger"
	ArtistForSongContractRolesEnumComposer          ArtistForSongContractRolesEnum = "Composer"
	ArtistForSongContractRolesEnumDistributor       ArtistForSongContractRolesEnum = "Distributor"
	ArtistForSongContractRolesEnumIllustrator       ArtistForSongContractRolesEnum = "Illustrator"
	ArtistForSongContractRolesEnumInstrumentalist   ArtistForSongContractRolesEnum = "Instrumentalist"
	ArtistForSongContractRolesEnumLyricist          ArtistForSongContractRolesEnum = "Lyricist"
	ArtistForSongContractRolesEnumMastering         ArtistForSongContractRolesEnum = "Mastering"
	ArtistForSongContractRolesEnumPublisher         ArtistForSongContractRolesEnum = "Publisher"
	ArtistForSongContractRolesEnumVocalist          ArtistForSongContractRolesEnum = "Vocalist"
	ArtistForSongContractRolesEnumVoiceManipulator  ArtistForSongContractRolesEnum = "VoiceManipulator"
	ArtistForSongContractRolesEnumOther             ArtistForSongContractRolesEnum = "Other"
	ArtistForSongContractRolesEnumMixer             ArtistForSongContractRolesEnum = "Mixer"
	ArtistForSongContractRolesEnumChorus            ArtistForSongContractRolesEnum = "Chorus"
	ArtistForSongContractRolesEnumEncoder           ArtistForSongContractRolesEnum = "Encoder"
	ArtistForSongContractRolesEnumVocalDataProvider ArtistForSongContractRolesEnum = "VocalDataProvider"
)

func (e *ArtistForSongContractRolesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Default":
		fallthrough
	case "Animator":
		fallthrough
	case "Arranger":
		fallthrough
	case "Composer":
		fallthrough
	case "Distributor":
		fallthrough
	case "Illustrator":
		fallthrough
	case "Instrumentalist":
		fallthrough
	case "Lyricist":
		fallthrough
	case "Mastering":
		fallthrough
	case "Publisher":
		fallthrough
	case "Vocalist":
		fallthrough
	case "VoiceManipulator":
		fallthrough
	case "Other":
		fallthrough
	case "Mixer":
		fallthrough
	case "Chorus":
		fallthrough
	case "Encoder":
		fallthrough
	case "VocalDataProvider":
		*e = ArtistForSongContractRolesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ArtistForSongContractRolesEnum: %s", s)
	}
}

type ArtistForSongContract struct {
	Artist         *ArtistContract                          `json:"artist,omitempty"`
	Categories     *ArtistForSongContractCategoriesEnum     `json:"categories,omitempty"`
	EffectiveRoles *ArtistForSongContractEffectiveRolesEnum `json:"effectiveRoles,omitempty"`
	ID             *int                                     `json:"id,omitempty"`
	IsCustomName   *bool                                    `json:"isCustomName,omitempty"`
	IsSupport      *bool                                    `json:"isSupport,omitempty"`
	Name           *string                                  `json:"name,omitempty"`
	Roles          *ArtistForSongContractRolesEnum          `json:"roles,omitempty"`
}
