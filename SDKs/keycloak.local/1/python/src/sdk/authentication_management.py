"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class AuthenticationManagement:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_realm_authentication_config_id_(self, request: operations.DeleteRealmAuthenticationConfigIDRequest) -> operations.DeleteRealmAuthenticationConfigIDResponse:
        r"""Delete authenticator configuration"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRealmAuthenticationConfigIDRequest, base_url, '/{realm}/authentication/config/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRealmAuthenticationConfigIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_realm_authentication_executions_execution_id_(self, request: operations.DeleteRealmAuthenticationExecutionsExecutionIDRequest) -> operations.DeleteRealmAuthenticationExecutionsExecutionIDResponse:
        r"""Delete execution"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRealmAuthenticationExecutionsExecutionIDRequest, base_url, '/{realm}/authentication/executions/{executionId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRealmAuthenticationExecutionsExecutionIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_realm_authentication_flows_id_(self, request: operations.DeleteRealmAuthenticationFlowsIDRequest) -> operations.DeleteRealmAuthenticationFlowsIDResponse:
        r"""Delete an authentication flow"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRealmAuthenticationFlowsIDRequest, base_url, '/{realm}/authentication/flows/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRealmAuthenticationFlowsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_realm_authentication_required_actions_alias_(self, request: operations.DeleteRealmAuthenticationRequiredActionsAliasRequest) -> operations.DeleteRealmAuthenticationRequiredActionsAliasResponse:
        r"""Delete required action"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRealmAuthenticationRequiredActionsAliasRequest, base_url, '/{realm}/authentication/required-actions/{alias}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRealmAuthenticationRequiredActionsAliasResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_realm_authentication_authenticator_providers(self, request: operations.GetRealmAuthenticationAuthenticatorProvidersRequest) -> operations.GetRealmAuthenticationAuthenticatorProvidersResponse:
        r"""Get authenticator providers   Returns a list of authenticator providers."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmAuthenticationAuthenticatorProvidersRequest, base_url, '/{realm}/authentication/authenticator-providers', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmAuthenticationAuthenticatorProvidersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_realm_authentication_authenticator_providers_2_xx_application_json_objects = out

        return res

    def get_realm_authentication_client_authenticator_providers(self, request: operations.GetRealmAuthenticationClientAuthenticatorProvidersRequest) -> operations.GetRealmAuthenticationClientAuthenticatorProvidersResponse:
        r"""Get client authenticator providers   Returns a list of client authenticator providers."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmAuthenticationClientAuthenticatorProvidersRequest, base_url, '/{realm}/authentication/client-authenticator-providers', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmAuthenticationClientAuthenticatorProvidersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_realm_authentication_client_authenticator_providers_2_xx_application_json_objects = out

        return res

    def get_realm_authentication_config_description_provider_id_(self, request: operations.GetRealmAuthenticationConfigDescriptionProviderIDRequest) -> operations.GetRealmAuthenticationConfigDescriptionProviderIDResponse:
        r"""Get authenticator providerâ€™s configuration description"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmAuthenticationConfigDescriptionProviderIDRequest, base_url, '/{realm}/authentication/config-description/{providerId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmAuthenticationConfigDescriptionProviderIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AuthenticatorConfigInfoRepresentation])
                res.authenticator_config_info_representation = out

        return res

    def get_realm_authentication_config_id_(self, request: operations.GetRealmAuthenticationConfigIDRequest) -> operations.GetRealmAuthenticationConfigIDResponse:
        r"""Get authenticator configuration"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmAuthenticationConfigIDRequest, base_url, '/{realm}/authentication/config/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmAuthenticationConfigIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AuthenticatorConfigRepresentation])
                res.authenticator_config_representation = out

        return res

    def get_realm_authentication_executions_execution_id_(self, request: operations.GetRealmAuthenticationExecutionsExecutionIDRequest) -> operations.GetRealmAuthenticationExecutionsExecutionIDResponse:
        r"""Get Single Execution"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmAuthenticationExecutionsExecutionIDRequest, base_url, '/{realm}/authentication/executions/{executionId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmAuthenticationExecutionsExecutionIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_realm_authentication_flows(self, request: operations.GetRealmAuthenticationFlowsRequest) -> operations.GetRealmAuthenticationFlowsResponse:
        r"""Get authentication flows   Returns a list of authentication flows."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmAuthenticationFlowsRequest, base_url, '/{realm}/authentication/flows', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmAuthenticationFlowsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.AuthenticationFlowRepresentation]])
                res.authentication_flow_representations = out

        return res

    def get_realm_authentication_flows_flow_alias_executions(self, request: operations.GetRealmAuthenticationFlowsFlowAliasExecutionsRequest) -> operations.GetRealmAuthenticationFlowsFlowAliasExecutionsResponse:
        r"""Get authentication executions for a flow"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmAuthenticationFlowsFlowAliasExecutionsRequest, base_url, '/{realm}/authentication/flows/{flowAlias}/executions', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmAuthenticationFlowsFlowAliasExecutionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_realm_authentication_flows_id_(self, request: operations.GetRealmAuthenticationFlowsIDRequest) -> operations.GetRealmAuthenticationFlowsIDResponse:
        r"""Get authentication flow for id"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmAuthenticationFlowsIDRequest, base_url, '/{realm}/authentication/flows/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmAuthenticationFlowsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AuthenticationFlowRepresentation])
                res.authentication_flow_representation = out

        return res

    def get_realm_authentication_form_action_providers(self, request: operations.GetRealmAuthenticationFormActionProvidersRequest) -> operations.GetRealmAuthenticationFormActionProvidersResponse:
        r"""Get form action providers   Returns a list of form action providers."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmAuthenticationFormActionProvidersRequest, base_url, '/{realm}/authentication/form-action-providers', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmAuthenticationFormActionProvidersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_realm_authentication_form_action_providers_2_xx_application_json_objects = out

        return res

    def get_realm_authentication_form_providers(self, request: operations.GetRealmAuthenticationFormProvidersRequest) -> operations.GetRealmAuthenticationFormProvidersResponse:
        r"""Get form providers   Returns a list of form providers."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmAuthenticationFormProvidersRequest, base_url, '/{realm}/authentication/form-providers', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmAuthenticationFormProvidersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_realm_authentication_form_providers_2_xx_application_json_objects = out

        return res

    def get_realm_authentication_per_client_config_description(self, request: operations.GetRealmAuthenticationPerClientConfigDescriptionRequest) -> operations.GetRealmAuthenticationPerClientConfigDescriptionResponse:
        r"""Get configuration descriptions for all clients"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmAuthenticationPerClientConfigDescriptionRequest, base_url, '/{realm}/authentication/per-client-config-description', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmAuthenticationPerClientConfigDescriptionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_realm_authentication_per_client_config_description_2_xx_application_json_object = out

        return res

    def get_realm_authentication_required_actions(self, request: operations.GetRealmAuthenticationRequiredActionsRequest) -> operations.GetRealmAuthenticationRequiredActionsResponse:
        r"""Get required actions   Returns a list of required actions."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmAuthenticationRequiredActionsRequest, base_url, '/{realm}/authentication/required-actions', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmAuthenticationRequiredActionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RequiredActionProviderRepresentation]])
                res.required_action_provider_representations = out

        return res

    def get_realm_authentication_required_actions_alias_(self, request: operations.GetRealmAuthenticationRequiredActionsAliasRequest) -> operations.GetRealmAuthenticationRequiredActionsAliasResponse:
        r"""Get required action for alias"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmAuthenticationRequiredActionsAliasRequest, base_url, '/{realm}/authentication/required-actions/{alias}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmAuthenticationRequiredActionsAliasResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RequiredActionProviderRepresentation])
                res.required_action_provider_representation = out

        return res

    def get_realm_authentication_unregistered_required_actions(self, request: operations.GetRealmAuthenticationUnregisteredRequiredActionsRequest) -> operations.GetRealmAuthenticationUnregisteredRequiredActionsResponse:
        r"""Get unregistered required actions   Returns a list of unregistered required actions."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmAuthenticationUnregisteredRequiredActionsRequest, base_url, '/{realm}/authentication/unregistered-required-actions', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmAuthenticationUnregisteredRequiredActionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_realm_authentication_unregistered_required_actions_2_xx_application_json_objects = out

        return res

    def post_realm_authentication_executions(self, request: operations.PostRealmAuthenticationExecutionsRequest) -> operations.PostRealmAuthenticationExecutionsResponse:
        r"""Add new authentication execution"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmAuthenticationExecutionsRequest, base_url, '/{realm}/authentication/executions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "authentication_execution_representation", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmAuthenticationExecutionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_realm_authentication_executions_execution_id_config(self, request: operations.PostRealmAuthenticationExecutionsExecutionIDConfigRequest) -> operations.PostRealmAuthenticationExecutionsExecutionIDConfigResponse:
        r"""Update execution with new configuration"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmAuthenticationExecutionsExecutionIDConfigRequest, base_url, '/{realm}/authentication/executions/{executionId}/config', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "authenticator_config_representation", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmAuthenticationExecutionsExecutionIDConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_realm_authentication_executions_execution_id_lower_priority(self, request: operations.PostRealmAuthenticationExecutionsExecutionIDLowerPriorityRequest) -> operations.PostRealmAuthenticationExecutionsExecutionIDLowerPriorityResponse:
        r"""Lower executionâ€™s priority"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmAuthenticationExecutionsExecutionIDLowerPriorityRequest, base_url, '/{realm}/authentication/executions/{executionId}/lower-priority', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmAuthenticationExecutionsExecutionIDLowerPriorityResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_realm_authentication_executions_execution_id_raise_priority(self, request: operations.PostRealmAuthenticationExecutionsExecutionIDRaisePriorityRequest) -> operations.PostRealmAuthenticationExecutionsExecutionIDRaisePriorityResponse:
        r"""Raise executionâ€™s priority"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmAuthenticationExecutionsExecutionIDRaisePriorityRequest, base_url, '/{realm}/authentication/executions/{executionId}/raise-priority', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmAuthenticationExecutionsExecutionIDRaisePriorityResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_realm_authentication_flows(self, request: operations.PostRealmAuthenticationFlowsRequest) -> operations.PostRealmAuthenticationFlowsResponse:
        r"""Create a new authentication flow"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmAuthenticationFlowsRequest, base_url, '/{realm}/authentication/flows', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "authentication_flow_representation", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmAuthenticationFlowsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_realm_authentication_flows_flow_alias_copy(self, request: operations.PostRealmAuthenticationFlowsFlowAliasCopyRequest) -> operations.PostRealmAuthenticationFlowsFlowAliasCopyResponse:
        r"""Copy existing authentication flow under a new name   The new name is given as 'newName' attribute of the passed JSON object"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmAuthenticationFlowsFlowAliasCopyRequest, base_url, '/{realm}/authentication/flows/{flowAlias}/copy', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmAuthenticationFlowsFlowAliasCopyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_realm_authentication_flows_flow_alias_executions_execution(self, request: operations.PostRealmAuthenticationFlowsFlowAliasExecutionsExecutionRequest) -> operations.PostRealmAuthenticationFlowsFlowAliasExecutionsExecutionResponse:
        r"""Add new authentication execution to a flow"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmAuthenticationFlowsFlowAliasExecutionsExecutionRequest, base_url, '/{realm}/authentication/flows/{flowAlias}/executions/execution', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmAuthenticationFlowsFlowAliasExecutionsExecutionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_realm_authentication_flows_flow_alias_executions_flow(self, request: operations.PostRealmAuthenticationFlowsFlowAliasExecutionsFlowRequest) -> operations.PostRealmAuthenticationFlowsFlowAliasExecutionsFlowResponse:
        r"""Add new flow with new execution to existing flow"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmAuthenticationFlowsFlowAliasExecutionsFlowRequest, base_url, '/{realm}/authentication/flows/{flowAlias}/executions/flow', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmAuthenticationFlowsFlowAliasExecutionsFlowResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_realm_authentication_register_required_action(self, request: operations.PostRealmAuthenticationRegisterRequiredActionRequest) -> operations.PostRealmAuthenticationRegisterRequiredActionResponse:
        r"""Register a new required actions"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmAuthenticationRegisterRequiredActionRequest, base_url, '/{realm}/authentication/register-required-action', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmAuthenticationRegisterRequiredActionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_realm_authentication_required_actions_alias_lower_priority(self, request: operations.PostRealmAuthenticationRequiredActionsAliasLowerPriorityRequest) -> operations.PostRealmAuthenticationRequiredActionsAliasLowerPriorityResponse:
        r"""Lower required actionâ€™s priority"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmAuthenticationRequiredActionsAliasLowerPriorityRequest, base_url, '/{realm}/authentication/required-actions/{alias}/lower-priority', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmAuthenticationRequiredActionsAliasLowerPriorityResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_realm_authentication_required_actions_alias_raise_priority(self, request: operations.PostRealmAuthenticationRequiredActionsAliasRaisePriorityRequest) -> operations.PostRealmAuthenticationRequiredActionsAliasRaisePriorityResponse:
        r"""Raise required actionâ€™s priority"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmAuthenticationRequiredActionsAliasRaisePriorityRequest, base_url, '/{realm}/authentication/required-actions/{alias}/raise-priority', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmAuthenticationRequiredActionsAliasRaisePriorityResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def put_realm_authentication_config_id_(self, request: operations.PutRealmAuthenticationConfigIDRequest) -> operations.PutRealmAuthenticationConfigIDResponse:
        r"""Update authenticator configuration"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutRealmAuthenticationConfigIDRequest, base_url, '/{realm}/authentication/config/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "authenticator_config_representation", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutRealmAuthenticationConfigIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def put_realm_authentication_flows_flow_alias_executions(self, request: operations.PutRealmAuthenticationFlowsFlowAliasExecutionsRequest) -> operations.PutRealmAuthenticationFlowsFlowAliasExecutionsResponse:
        r"""Update authentication executions of a flow"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutRealmAuthenticationFlowsFlowAliasExecutionsRequest, base_url, '/{realm}/authentication/flows/{flowAlias}/executions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "authentication_execution_info_representation", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutRealmAuthenticationFlowsFlowAliasExecutionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def put_realm_authentication_flows_id_(self, request: operations.PutRealmAuthenticationFlowsIDRequest) -> operations.PutRealmAuthenticationFlowsIDResponse:
        r"""Update an authentication flow"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutRealmAuthenticationFlowsIDRequest, base_url, '/{realm}/authentication/flows/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "authentication_flow_representation", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutRealmAuthenticationFlowsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def put_realm_authentication_required_actions_alias_(self, request: operations.PutRealmAuthenticationRequiredActionsAliasRequest) -> operations.PutRealmAuthenticationRequiredActionsAliasResponse:
        r"""Update required action"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutRealmAuthenticationRequiredActionsAliasRequest, base_url, '/{realm}/authentication/required-actions/{alias}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "required_action_provider_representation", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutRealmAuthenticationRequiredActionsAliasResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    