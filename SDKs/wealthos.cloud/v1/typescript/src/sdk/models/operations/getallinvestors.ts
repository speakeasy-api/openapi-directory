/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

export class GetAllInvestorsSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=x-api-key",
  })
  apiSecretKey: string;
}

/**
 * Sorting order; results are sorted by creation time.
 */
export enum GetAllInvestorsSortEnum {
  Asc = "asc",
  Desc = "desc",
}

export class GetAllInvestorsRequest extends SpeakeasyBase {
  /**
   * Page number for the query. This end-point has paginations capabilities. This value should be a positive integer value. If this is not provided, both page_size and page_number will be defaulted to 1000 and 1. Results are sorted decending order of the created date & time.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=page_number",
  })
  pageNumber?: string;

  /**
   * Page size for the query. This end-point has paginations capabilities. This value should be a positive integer value. If this is not provided, both page_size and page_number will be defaulted to 1000 and 1. Results are sorted decending order of the created date & time.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=page_size",
  })
  pageSize?: string;

  /**
   * Sorting order; results are sorted by creation time.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: GetAllInvestorsSortEnum;

  /**
   * ApiSecretKey
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=x-api-key",
  })
  xApiKey: string;
}

/**
 * System error. Retry later. If the error persist, contact WOS support
 */
export class GetAllInvestors500ApplicationJSON extends SpeakeasyBase {
  /**
   * Optional error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error_code" })
  errorCode?: string;

  /**
   * Human readable description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
 */
export class GetAllInvestors429ApplicationJSON extends SpeakeasyBase {
  /**
   * Optional error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error_code" })
  errorCode?: string;

  /**
   * Human readable description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * Your authentication information is missing or invalid. Please check the keys are properly set and its correct
 */
export class GetAllInvestors403ApplicationJSON extends SpeakeasyBase {
  /**
   * Optional error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error_code" })
  errorCode?: string;

  /**
   * Human readable description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * You do not have permissions to access this resource.
 */
export class GetAllInvestors401ApplicationJSON extends SpeakeasyBase {
  /**
   * Optional error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error_code" })
  errorCode?: string;

  /**
   * Human readable description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * Request is not complete and may have one or more validations errors. Please check the error message and the code
 */
export class GetAllInvestors400ApplicationJSON extends SpeakeasyBase {
  /**
   * Optional error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error_code" })
  errorCode?: string;

  /**
   * Human readable description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

export class GetAllInvestors200ApplicationJSONRootTypeForInvestorAddress extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "address_line" })
  addressLine?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "city" })
  city?: string;

  /**
   * 3 character country code inline with ISO 3166-1 alpha-3
   */
  @SpeakeasyMetadata()
  @Expose({ name: "country" })
  country: string;

  @SpeakeasyMetadata()
  @Expose({ name: "postal_code" })
  postalCode: string;

  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "street_name" })
  streetName?: string;
}

export class GetAllInvestors200ApplicationJSONRootTypeForInvestorDateOfBirth extends SpeakeasyBase {
  /**
   * two digit string `DD`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "day" })
  day?: string;

  /**
   * two digit string `MM`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "month" })
  month?: string;

  /**
   * four digit string `YYYY`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "year" })
  year?: string;
}

export enum GetAllInvestors200ApplicationJSONRootTypeForInvestorDealingStatusEnum {
  Inactive = "inactive",
  Active = "active",
}

/**
 * Status of an investor best describes their personal circumstances.
 */
export enum GetAllInvestors200ApplicationJSONRootTypeForInvestorEmploymentStatusEnum {
  Employed = "employed",
  SelfEmployed = "self_employed",
  Pensioner = "pensioner",
  ChildUnder16 = "child_under_16",
  InFullTimeEducation = "in_full_time_education",
  Unemployed = "unemployed",
  CaringForAPersonOver16 = "caring_for_a_person_over_16",
  CaringForAPersonUnder16 = "caring_for_a_person_under_16",
  Other = "other",
}

export class GetAllInvestors200ApplicationJSONRootTypeForInvestorExpressionOfWishSippBeneficiaries extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "address" })
  address: string;

  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "first_name" })
  firstName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "last_name" })
  lastName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "percentage" })
  percentage: string;

  @SpeakeasyMetadata()
  @Expose({ name: "phone_number" })
  phoneNumber?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "tax_id" })
  taxId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;
}

export class GetAllInvestors200ApplicationJSONRootTypeForInvestorExpressionOfWishSippNominees extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "address" })
  address: string;

  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "first_name" })
  firstName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "last_name" })
  lastName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "percentage" })
  percentage: string;

  @SpeakeasyMetadata()
  @Expose({ name: "phone_number" })
  phoneNumber?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "tax_id" })
  taxId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;
}

/**
 * Beneficiary and nominee list of the expression of wish.
 */
export class GetAllInvestors200ApplicationJSONRootTypeForInvestorExpressionOfWish extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType:
      GetAllInvestors200ApplicationJSONRootTypeForInvestorExpressionOfWishSippBeneficiaries,
  })
  @Expose({ name: "sipp_beneficiaries" })
  @Type(
    () =>
      GetAllInvestors200ApplicationJSONRootTypeForInvestorExpressionOfWishSippBeneficiaries
  )
  sippBeneficiaries?: GetAllInvestors200ApplicationJSONRootTypeForInvestorExpressionOfWishSippBeneficiaries[];

  @SpeakeasyMetadata({
    elemType:
      GetAllInvestors200ApplicationJSONRootTypeForInvestorExpressionOfWishSippNominees,
  })
  @Expose({ name: "sipp_nominees" })
  @Type(
    () =>
      GetAllInvestors200ApplicationJSONRootTypeForInvestorExpressionOfWishSippNominees
  )
  sippNominees?: GetAllInvestors200ApplicationJSONRootTypeForInvestorExpressionOfWishSippNominees[];
}

export class GetAllInvestors200ApplicationJSONRootTypeForInvestorIdNumbers extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "id_number" })
  idNumber: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id_type" })
  idType: string;
}

export enum GetAllInvestors200ApplicationJSONRootTypeForInvestorKycAmlStatusEnum {
  Submitted = "submitted",
  KycFailedError = "kyc_failed_error",
  Pending = "pending",
  Clear = "clear",
  NotStarted = "not_started",
}

export enum GetAllInvestors200ApplicationJSONRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum {
  Primary = "primary",
  Enhanced = "enhanced",
  Fp12 = "fp12",
  Fp14 = "fp14",
  Ip14 = "ip14",
  Fp16 = "fp16",
  Ip16 = "ip16",
}

export class GetAllInvestors200ApplicationJSONRootTypeForInvestorLtaProtectionDetails extends SpeakeasyBase {
  /**
   * Required when the lta_protection_type is ip14 or ip16.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lta_individual_protection_amount" })
  ltaIndividualProtectionAmount?: string;

  /**
   * Required only when the lta_protection_type is primary
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lta_primary_protection_factor" })
  ltaPrimaryProtectionFactor?: string;

  /**
   * Required when the lta_protection_type is fp14 or ip16.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lta_protection_notification_number" })
  ltaProtectionNotificationNumber?: string;

  /**
   * Required when the lta_protection_type is fp14 or ip16.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lta_protection_scheme_administrator_reference" })
  ltaProtectionSchemeAdministratorReference?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "lta_protection_type" })
  ltaProtectionType: GetAllInvestors200ApplicationJSONRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum;
}

export enum GetAllInvestors200ApplicationJSONRootTypeForInvestorStatusEnum {
  KycPending = "kyc_pending",
  KycFailed = "kyc_failed",
  Inactive = "inactive",
  Active = "active",
}

/**
 * Residence of the investor for tax purposes. (for example, to claim relief at source) GB-ENG=England GB-NIR=Northern Ireland GB-SCT=Scotland GB-WLS=Wales
 */
export enum GetAllInvestors200ApplicationJSONRootTypeForInvestorTaxResidenceEnum {
  GbEng = "GB-ENG",
  GbNir = "GB-NIR",
  GbSct = "GB-SCT",
  GbWls = "GB-WLS",
}

/**
 * JSON for the Investor resource type
 */
export class GetAllInvestors200ApplicationJSONRootTypeForInvestor extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "address" })
  @Type(() => GetAllInvestors200ApplicationJSONRootTypeForInvestorAddress)
  address: GetAllInvestors200ApplicationJSONRootTypeForInvestorAddress;

  /**
   * Array of bank account IDs
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bank_accounts" })
  bankAccounts?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "date_of_birth" })
  @Type(() => GetAllInvestors200ApplicationJSONRootTypeForInvestorDateOfBirth)
  dateOfBirth: GetAllInvestors200ApplicationJSONRootTypeForInvestorDateOfBirth;

  @SpeakeasyMetadata()
  @Expose({ name: "dealing_status" })
  dealingStatus?: GetAllInvestors200ApplicationJSONRootTypeForInvestorDealingStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  /**
   * Status of an investor best describes their personal circumstances.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "employment_status" })
  employmentStatus?: GetAllInvestors200ApplicationJSONRootTypeForInvestorEmploymentStatusEnum;

  /**
   * Beneficiary and nominee list of the expression of wish.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expression_of_wish" })
  @Type(
    () => GetAllInvestors200ApplicationJSONRootTypeForInvestorExpressionOfWish
  )
  expressionOfWish?: GetAllInvestors200ApplicationJSONRootTypeForInvestorExpressionOfWish;

  @SpeakeasyMetadata()
  @Expose({ name: "first_name" })
  firstName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "gender" })
  gender?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "home_number" })
  homeNumber?: string;

  @SpeakeasyMetadata({
    elemType: GetAllInvestors200ApplicationJSONRootTypeForInvestorIdNumbers,
  })
  @Expose({ name: "id_numbers" })
  @Type(() => GetAllInvestors200ApplicationJSONRootTypeForInvestorIdNumbers)
  idNumbers?: GetAllInvestors200ApplicationJSONRootTypeForInvestorIdNumbers[];

  @SpeakeasyMetadata()
  @Expose({ name: "investor_id" })
  investorId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "kyc_aml_status" })
  kycAmlStatus?: GetAllInvestors200ApplicationJSONRootTypeForInvestorKycAmlStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "kyc_aml_status_last_updated" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  kycAmlStatusLastUpdated?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "last_name" })
  lastName: string;

  /**
   * Additional details of the lifetime allowance protections of the investor
   */
  @SpeakeasyMetadata({
    elemType:
      GetAllInvestors200ApplicationJSONRootTypeForInvestorLtaProtectionDetails,
  })
  @Expose({ name: "lta_protection_details" })
  @Type(
    () =>
      GetAllInvestors200ApplicationJSONRootTypeForInvestorLtaProtectionDetails
  )
  ltaProtectionDetails?: GetAllInvestors200ApplicationJSONRootTypeForInvestorLtaProtectionDetails[];

  @SpeakeasyMetadata()
  @Expose({ name: "mifid_tax_id" })
  mifidTaxId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "mobile_number" })
  mobileNumber?: string;

  /**
   * Whether the investor has triggered the Money Purchase Annual Allowance.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mpaa_triggered" })
  mpaaTriggered?: boolean;

  /**
   * Date of triggering the Money Purchase Annual Allowance. It is required if mpaa_triggered is true.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mpaa_triggered_date" })
  mpaaTriggeredDate?: string;

  /**
   * 3 character country code inline with ISO 3166-1 alpha-3
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nationality" })
  nationality: string;

  @SpeakeasyMetadata()
  @Expose({ name: "office_number" })
  officeNumber?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "reference_version" })
  referenceVersion?: number;

  /**
   * Intended retirement age of the investor
   */
  @SpeakeasyMetadata()
  @Expose({ name: "retirement_age" })
  retirementAge?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: GetAllInvestors200ApplicationJSONRootTypeForInvestorStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "tax_id" })
  taxId: string;

  /**
   * Residence of the investor for tax purposes. (for example, to claim relief at source) GB-ENG=England GB-NIR=Northern Ireland GB-SCT=Scotland GB-WLS=Wales
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tax_residence" })
  taxResidence?: GetAllInvestors200ApplicationJSONRootTypeForInvestorTaxResidenceEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "tax_residency_compliant" })
  taxResidencyCompliant: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt?: Date;
}

/**
 * Array of investors
 */
export class GetAllInvestors200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: GetAllInvestors200ApplicationJSONRootTypeForInvestor,
  })
  @Expose({ name: "investors" })
  @Type(() => GetAllInvestors200ApplicationJSONRootTypeForInvestor)
  investors: GetAllInvestors200ApplicationJSONRootTypeForInvestor[];

  /**
   * This indicates the availability of the next page
   */
  @SpeakeasyMetadata()
  @Expose({ name: "next_page_available" })
  nextPageAvailable: boolean;
}

export class GetAllInvestorsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * success
   */
  @SpeakeasyMetadata()
  getAllInvestors200ApplicationJSONObject?: GetAllInvestors200ApplicationJSON;

  /**
   * Request is not complete and may have one or more validations errors. Please check the error message and the code
   */
  @SpeakeasyMetadata()
  getAllInvestors400ApplicationJSONObject?: GetAllInvestors400ApplicationJSON;

  /**
   * You do not have permissions to access this resource.
   */
  @SpeakeasyMetadata()
  getAllInvestors401ApplicationJSONObject?: GetAllInvestors401ApplicationJSON;

  /**
   * Your authentication information is missing or invalid. Please check the keys are properly set and its correct
   */
  @SpeakeasyMetadata()
  getAllInvestors403ApplicationJSONObject?: GetAllInvestors403ApplicationJSON;

  /**
   * You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
   */
  @SpeakeasyMetadata()
  getAllInvestors429ApplicationJSONObject?: GetAllInvestors429ApplicationJSON;

  /**
   * System error. Retry later. If the error persist, contact WOS support
   */
  @SpeakeasyMetadata()
  getAllInvestors500ApplicationJSONObject?: GetAllInvestors500ApplicationJSON;
}
