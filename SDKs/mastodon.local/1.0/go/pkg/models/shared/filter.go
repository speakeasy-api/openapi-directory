// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type FilterContextEnum string

const (
	FilterContextEnumHome          FilterContextEnum = "home"
	FilterContextEnumNotifications FilterContextEnum = "notifications"
	FilterContextEnumPublic        FilterContextEnum = "public"
	FilterContextEnumThread        FilterContextEnum = "thread"
)

func (e FilterContextEnum) ToPointer() *FilterContextEnum {
	return &e
}

func (e *FilterContextEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "home":
		fallthrough
	case "notifications":
		fallthrough
	case "public":
		fallthrough
	case "thread":
		*e = FilterContextEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterContextEnum: %v", v)
	}
}

// Filter - Represents a user-defined filter for determining which statuses should not be shown to the user.
// https://docs.joinmastodon.org/entities/filter/
type Filter struct {
	// The contexts in which the filter should be applied.
	Context []FilterContextEnum `json:"context,omitempty"`
	// When the filter should no longer be applied. ISO 8601 Datetime, or null if the filter does not expire
	ExpiresAt *string `json:"expires_at,omitempty"`
	// The ID of the filter in the database. Cast from an integer, but not guaranteed to be a number.
	ID *string `json:"id,omitempty"`
	// Should matching entities in home and notifications be dropped by the server?
	Irreversible *bool `json:"irreversible,omitempty"`
	// The text to be filtered.
	Phrase *string `json:"phrase,omitempty"`
	// Should the filter consider word boundaries?
	WholeWord *bool `json:"whole_word,omitempty"`
}
