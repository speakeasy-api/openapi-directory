"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class WorkType:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def work_type_api_all(self, request: operations.WorkTypeAPIAllRequest) -> operations.WorkTypeAPIAllResponse:
        r"""Return all work types for the account"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/worktype/all'
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WorkTypeAPIAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.WorkTypeDetailsAPIModel]])
                res.work_type_details_api_models = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.WorkTypeDetailsAPIModel]])
                res.work_type_details_api_models = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def work_type_api_delete_form(self, request: operations.WorkTypeAPIDeleteFormRequest) -> operations.WorkTypeAPIDeleteFormResponse:
        r"""Delete an existing work type"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/worktype/delete'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "work_type_delete_api_model", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WorkTypeAPIDeleteFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.work_type_api_delete_form_200_application_json_int32_integer = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.work_type_api_delete_form_200_text_json_int32_integer = out

        return res

    def work_type_api_delete_json(self, request: operations.WorkTypeAPIDeleteJSONRequest) -> operations.WorkTypeAPIDeleteJSONResponse:
        r"""Delete an existing work type"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/worktype/delete'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "work_type_delete_api_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WorkTypeAPIDeleteJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.work_type_api_delete_json_200_application_json_int32_integer = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.work_type_api_delete_json_200_text_json_int32_integer = out

        return res

    def work_type_api_delete_raw(self, request: operations.WorkTypeAPIDeleteRawRequest) -> operations.WorkTypeAPIDeleteRawResponse:
        r"""Delete an existing work type"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/worktype/delete'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WorkTypeAPIDeleteRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.work_type_api_delete_raw_200_application_json_int32_integer = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.work_type_api_delete_raw_200_text_json_int32_integer = out

        return res

    def work_type_api_details(self, request: operations.WorkTypeAPIDetailsRequest) -> operations.WorkTypeAPIDetailsResponse:
        r"""Return work type details"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/worktype/details'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.WorkTypeAPIDetailsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WorkTypeAPIDetailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.WorkTypeDetailsAPIModel])
                res.work_type_details_api_model = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.WorkTypeDetailsAPIModel])
                res.work_type_details_api_model = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def work_type_api_new_form(self, request: operations.WorkTypeAPINewFormRequest) -> operations.WorkTypeAPINewFormResponse:
        r"""Create a work type"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/worktype/new'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "work_type_create_api_model", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WorkTypeAPINewFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.work_type_api_new_form_200_application_json_int32_integer = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.work_type_api_new_form_200_text_json_int32_integer = out

        return res

    def work_type_api_new_json(self, request: operations.WorkTypeAPINewJSONRequest) -> operations.WorkTypeAPINewJSONResponse:
        r"""Create a work type"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/worktype/new'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "work_type_create_api_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WorkTypeAPINewJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.work_type_api_new_json_200_application_json_int32_integer = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.work_type_api_new_json_200_text_json_int32_integer = out

        return res

    def work_type_api_new_raw(self, request: operations.WorkTypeAPINewRawRequest) -> operations.WorkTypeAPINewRawResponse:
        r"""Create a work type"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/worktype/new'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WorkTypeAPINewRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.work_type_api_new_raw_200_application_json_int32_integer = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.work_type_api_new_raw_200_text_json_int32_integer = out

        return res

    def work_type_api_search(self, request: operations.WorkTypeAPISearchRequest) -> operations.WorkTypeAPISearchResponse:
        r"""Return all work types for the account that match the query param"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/worktype/search'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.WorkTypeAPISearchRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WorkTypeAPISearchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.WorkTypeDetailsAPIModel]])
                res.work_type_details_api_models = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.WorkTypeDetailsAPIModel]])
                res.work_type_details_api_models = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def work_type_api_update_form(self, request: operations.WorkTypeAPIUpdateFormRequest) -> operations.WorkTypeAPIUpdateFormResponse:
        r"""Update an existing work type"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/worktype/update'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "work_type_update_api_model", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WorkTypeAPIUpdateFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def work_type_api_update_json(self, request: operations.WorkTypeAPIUpdateJSONRequest) -> operations.WorkTypeAPIUpdateJSONResponse:
        r"""Update an existing work type"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/worktype/update'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "work_type_update_api_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WorkTypeAPIUpdateJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def work_type_api_update_raw(self, request: operations.WorkTypeAPIUpdateRawRequest) -> operations.WorkTypeAPIUpdateRawResponse:
        r"""Update an existing work type"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/worktype/update'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WorkTypeAPIUpdateRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    