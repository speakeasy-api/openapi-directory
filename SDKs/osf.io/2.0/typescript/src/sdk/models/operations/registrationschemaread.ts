/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

export class RegistrationSchemaReadRequest extends SpeakeasyBase {
  /**
   * The unique identifier of the Registration Schema example `6176c9d45e01f100091d4f94`.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=registration_schema_id",
  })
  registrationSchemaId: string;
}

/**
 * The attributes of the Registration Schema.
 */
export class RegistrationSchemaReadRegistrationSchemaAttributes extends SpeakeasyBase {
  /**
   * Bool that represents whether the Registration Schema is active.
   */
  @SpeakeasyMetadata()
  active?: boolean;

  /**
   * The name of the Registration Schema
   */
  @SpeakeasyMetadata()
  name?: string;

  /**
   * This dictionary is the raw schema that originally defined the Registration Schema object and it's blocks.
   */
  @SpeakeasyMetadata()
  schema?: Record<string, Record<string, any>>;

  /**
   * The version of this Registration Schema
   */
  @SpeakeasyMetadata()
  schemaVersion?: number;
}

/**
 * URLs that link to alternative representations of the Registration Schema.
 */
export class RegistrationSchemaReadRegistrationSchemaLinks extends SpeakeasyBase {
  /**
   * A link to the detail page for a Registration Schema.
   */
  @SpeakeasyMetadata()
  self?: string;
}

/**
 * Links to other entities or entity collections that have a relationship to the Registration Schema.
 */
export class RegistrationSchemaReadRegistrationSchemaRelationships extends SpeakeasyBase {
  /**
   * A link to the list of schema blocks that contain the question prompt information for the Registration Schema.
   */
  @SpeakeasyMetadata()
  schemaBlocks?: string;
}

/**
 * OK
 */
export class RegistrationSchemaReadRegistrationSchema extends SpeakeasyBase {
  /**
   * The attributes of the Registration Schema.
   */
  @SpeakeasyMetadata()
  attributes?: RegistrationSchemaReadRegistrationSchemaAttributes;

  /**
   * The unique identifier of the Registration Schema.
   */
  @SpeakeasyMetadata()
  id?: string;

  /**
   * URLs that link to alternative representations of the Registration Schema.
   */
  @SpeakeasyMetadata()
  links?: RegistrationSchemaReadRegistrationSchemaLinks;

  /**
   * Links to other entities or entity collections that have a relationship to the Registration Schema.
   */
  @SpeakeasyMetadata()
  relationships?: RegistrationSchemaReadRegistrationSchemaRelationships;

  /**
   * The type identifier of the Registration Schema (`registration-schemas`).
   */
  @SpeakeasyMetadata()
  type?: string;
}

export class RegistrationSchemaReadResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
