/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The data that is input into Wisdom as a result of the assistant association.
 */
export class CreateAssistantAssociationRequestBodyAssociation extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "knowledgeBaseId" })
  knowledgeBaseId?: string;
}

/**
 * The type of association.
 */
export enum CreateAssistantAssociationRequestBodyAssociationTypeEnum {
  KnowledgeBase = "KNOWLEDGE_BASE",
}

export class CreateAssistantAssociationRequestBody extends SpeakeasyBase {
  /**
   * The data that is input into Wisdom as a result of the assistant association.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "association" })
  @Type(() => CreateAssistantAssociationRequestBodyAssociation)
  association: CreateAssistantAssociationRequestBodyAssociation;

  /**
   * The type of association.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "associationType" })
  associationType: CreateAssistantAssociationRequestBodyAssociationTypeEnum;

  /**
   * A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientToken" })
  clientToken?: string;

  /**
   * The tags used to organize, track, or control access for this resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;
}

export class CreateAssistantAssociationRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateAssistantAssociationRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=assistantId",
  })
  assistantId: string;
}

export class CreateAssistantAssociationResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createAssistantAssociationResponse?: shared.CreateAssistantAssociationResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
