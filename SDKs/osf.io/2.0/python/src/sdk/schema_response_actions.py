"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class SchemaResponseActions:
    r"""Schema Response Actions are objects that when created cause state transitions for Schema Responses. Users use state transitions to submit, approve, and revise new Schema Responses.
    
    Schema Response Actions have a  few different triggers to cause state transitions:
    
      - `submit` is a trigger to transition a Schema Response from an `in_progress` state to an `unapproved` state,
      this freezes edits for the Schema Response and allows all admin contributors to the Schema Response's
      Registration to either approved or reject the Schema Response.
    
      - `approve` is a trigger to transition a Schema Response from an `unapproved` state to an `approved` state, this
      makes the Schema Response changes public completing the update of the Schema Response. On Schema Responses that
      are associated with a Registration that has Registration Provider a moderated workflow the `approve` trigger
      will transition the Schema Response to `pending_moderation`.
    
      - `accept` is a trigger to transition a Schema Response from an `pending_moderation` state to an `approved`
      state. This trigger is only valid for Schema Responses that are associated with a Registration that has
      Registration Provider a moderated workflow and only possible for a user designated as moderator of a
      Registration Provider.
    
      - `admin_reject` is a trigger to transition a Schema Response from an `unapproved` state to an
      `in_progress`  state. This trigger allows users to reject purposed changes to a Schema Response.
    
      - `moderator_reject` is a trigger to transition a Schema Response from an `pending_moderation` state to an
      `in_progress`  state. This trigger is only valid for Schema Responses that are associated with a Registration
      that has Registration Provider a moderated workflow and only possible for a user designated as moderator of a
      Registration Provider.
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_schema_responses_schema_response_id_actions_schema_response_action_id_(self, request: operations.GetSchemaResponsesSchemaResponseIDActionsSchemaResponseActionIDRequest) -> operations.GetSchemaResponsesSchemaResponseIDActionsSchemaResponseActionIDResponse:
        r"""A Schema Response Action from a Schema Response
        Retrieves a Schema Response Action by it's ID.
        #### Returns
        Returns a JSON object with a `data` key containing the representation of the requested Schema Response Actions, if the request is successful.
        #### Errors
        If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSchemaResponsesSchemaResponseIDActionsSchemaResponseActionIDRequest, base_url, '/schema_responses/{schema_response_id}/actions/{schema_response_action_id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSchemaResponsesSchemaResponseIDActionsSchemaResponseActionIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def post_schema_responses_schema_response_id_actions_(self, request: operations.PostSchemaResponsesSchemaResponseIDActionsRequest) -> operations.PostSchemaResponsesSchemaResponseIDActionsResponse:
        r"""Create a new Schema Response Action
        This creates a new Schema Response Action in order to trigger a state transition for a Schema Response.
        #### Returns
        Returns a JSON object with a `data` key containing the representation of the requested Schema Response Actions, if the request is successful.
        #### Errors
        If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSchemaResponsesSchemaResponseIDActionsRequest, base_url, '/schema_responses/{schema_response_id}/actions/', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSchemaResponsesSchemaResponseIDActionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def schema_response_action_read(self, request: operations.SchemaResponseActionReadRequest) -> operations.SchemaResponseActionReadResponse:
        r"""Retrieve a list of Schema Response Actions for a Schema Response
        This retrieves a paginated list of all Schema Response Actions created for a Schema Response.
        #### Returns
        Returns a JSON object with a `data` key containing the representation of the requested Schema Response Actions, if the request is successful.
        #### Errors
        If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SchemaResponseActionReadRequest, base_url, '/schema_responses/{schema_response_id}/actions/', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SchemaResponseActionReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    