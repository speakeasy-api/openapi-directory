// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// WebhookCommunicationFormatEnum - Format or protocol for receiving webhooks. Possible values:
// * **soap**
// * **http**
// * **json**
type WebhookCommunicationFormatEnum string

const (
	WebhookCommunicationFormatEnumHTTP WebhookCommunicationFormatEnum = "http"
	WebhookCommunicationFormatEnumJSON WebhookCommunicationFormatEnum = "json"
	WebhookCommunicationFormatEnumSoap WebhookCommunicationFormatEnum = "soap"
)

func (e *WebhookCommunicationFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "http":
		fallthrough
	case "json":
		fallthrough
	case "soap":
		*e = WebhookCommunicationFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebhookCommunicationFormatEnum: %s", s)
	}
}

// WebhookFilterMerchantAccountTypeEnum - Shows how merchant accounts are included in company-level webhooks. Possible values:
// * **includeAccounts**
// * **excludeAccounts**
// * **allAccounts**: Includes all merchant accounts, and does not require specifying `filterMerchantAccounts`.
type WebhookFilterMerchantAccountTypeEnum string

const (
	WebhookFilterMerchantAccountTypeEnumAllAccounts     WebhookFilterMerchantAccountTypeEnum = "allAccounts"
	WebhookFilterMerchantAccountTypeEnumExcludeAccounts WebhookFilterMerchantAccountTypeEnum = "excludeAccounts"
	WebhookFilterMerchantAccountTypeEnumIncludeAccounts WebhookFilterMerchantAccountTypeEnum = "includeAccounts"
)

func (e *WebhookFilterMerchantAccountTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "allAccounts":
		fallthrough
	case "excludeAccounts":
		fallthrough
	case "includeAccounts":
		*e = WebhookFilterMerchantAccountTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebhookFilterMerchantAccountTypeEnum: %s", s)
	}
}

// WebhookNetworkTypeEnum - Network type for Terminal API details webhooks.
type WebhookNetworkTypeEnum string

const (
	WebhookNetworkTypeEnumLocal  WebhookNetworkTypeEnum = "LOCAL"
	WebhookNetworkTypeEnumPublic WebhookNetworkTypeEnum = "PUBLIC"
)

func (e *WebhookNetworkTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "LOCAL":
		fallthrough
	case "PUBLIC":
		*e = WebhookNetworkTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebhookNetworkTypeEnum: %s", s)
	}
}

// WebhookSslVersionEnum - SSL version to access the public webhook URL specified in the `url` field. Possible values:
// * **TLSv1.3**
// * **TLSv1.2**
// * **HTTP** - Only allowed on Test environment.
//
// If not specified, the webhook will use `sslVersion`: **TLSv1.2**.
type WebhookSslVersionEnum string

const (
	WebhookSslVersionEnumHTTP   WebhookSslVersionEnum = "HTTP"
	WebhookSslVersionEnumSsl    WebhookSslVersionEnum = "SSL"
	WebhookSslVersionEnumSsLv3  WebhookSslVersionEnum = "SSLv3"
	WebhookSslVersionEnumTLS    WebhookSslVersionEnum = "TLS"
	WebhookSslVersionEnumTlSv1  WebhookSslVersionEnum = "TLSv1"
	WebhookSslVersionEnumTlSv11 WebhookSslVersionEnum = "TLSv1.1"
	WebhookSslVersionEnumTlSv12 WebhookSslVersionEnum = "TLSv1.2"
	WebhookSslVersionEnumTlSv13 WebhookSslVersionEnum = "TLSv1.3"
)

func (e *WebhookSslVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "HTTP":
		fallthrough
	case "SSL":
		fallthrough
	case "SSLv3":
		fallthrough
	case "TLS":
		fallthrough
	case "TLSv1":
		fallthrough
	case "TLSv1.1":
		fallthrough
	case "TLSv1.2":
		fallthrough
	case "TLSv1.3":
		*e = WebhookSslVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebhookSslVersionEnum: %s", s)
	}
}

// Webhook - OK - the request has succeeded.
type Webhook struct {
	Links *WebhookLinks `json:"_links,omitempty"`
	// Indicates if expired SSL certificates are accepted. Default value: **false**.
	AcceptsExpiredCertificate *bool `json:"acceptsExpiredCertificate,omitempty"`
	// Indicates if self-signed SSL certificates are accepted. Default value: **false**.
	AcceptsSelfSignedCertificate *bool `json:"acceptsSelfSignedCertificate,omitempty"`
	// Indicates if untrusted SSL certificates are accepted. Default value: **false**.
	AcceptsUntrustedRootCertificate *bool `json:"acceptsUntrustedRootCertificate,omitempty"`
	// Reference to the account the webook is set on.
	AccountReference *string `json:"accountReference,omitempty"`
	// Indicates if the webhook configuration is active. The field must be **true** for you to receive webhooks about events related an account.
	Active             bool                        `json:"active"`
	AdditionalSettings *AdditionalSettingsResponse `json:"additionalSettings,omitempty"`
	// The alias of our SSL certificate. When you receive a notification from us, the alias from the HMAC signature will match this alias.
	CertificateAlias *string `json:"certificateAlias,omitempty"`
	// Format or protocol for receiving webhooks. Possible values:
	// * **soap**
	// * **http**
	// * **json**
	CommunicationFormat WebhookCommunicationFormatEnum `json:"communicationFormat"`
	// Your description for this webhook configuration.
	Description *string `json:"description,omitempty"`
	// Shows how merchant accounts are included in company-level webhooks. Possible values:
	// * **includeAccounts**
	// * **excludeAccounts**
	// * **allAccounts**: Includes all merchant accounts, and does not require specifying `filterMerchantAccounts`.
	FilterMerchantAccountType *WebhookFilterMerchantAccountTypeEnum `json:"filterMerchantAccountType,omitempty"`
	// A list of merchant account names that are included or excluded from receiving the webhook. Inclusion or exclusion is based on the value defined for `filterMerchantAccountType`.
	//
	// Required if `filterMerchantAccountType` is either:
	// * **includeAccounts**
	// * **excludeAccounts**
	//
	// Not needed for `filterMerchantAccountType`: **allAccounts**.
	FilterMerchantAccounts []string `json:"filterMerchantAccounts,omitempty"`
	// Indicates if the webhook configuration has errors that need troubleshooting. If the value is **true**, troubleshoot the configuration using the [testing endpoint](https://docs.adyen.com/api-explorer/#/ManagementService/v1/post/companies/{companyId}/webhooks/{webhookid}/test).
	HasError *bool `json:"hasError,omitempty"`
	// Indicates if the webhook is password protected.
	HasPassword *bool `json:"hasPassword,omitempty"`
	// The [checksum](https://en.wikipedia.org/wiki/Key_checksum_value) of the HMAC key generated for this webhook. You can use this value to uniquely identify the HMAC key configured for this webhook.
	HmacKeyCheckValue *string `json:"hmacKeyCheckValue,omitempty"`
	// Unique identifier for this webhook.
	ID *string `json:"id,omitempty"`
	// Network type for Terminal API details webhooks.
	NetworkType *WebhookNetworkTypeEnum `json:"networkType,omitempty"`
	// Indicates if the SOAP action header needs to be populated. Default value: **false**.
	//
	// Only applies if `communicationFormat`: **soap**.
	PopulateSoapActionHeader *bool `json:"populateSoapActionHeader,omitempty"`
	// SSL version to access the public webhook URL specified in the `url` field. Possible values:
	// * **TLSv1.3**
	// * **TLSv1.2**
	// * **HTTP** - Only allowed on Test environment.
	//
	// If not specified, the webhook will use `sslVersion`: **TLSv1.2**.
	SslVersion *WebhookSslVersionEnum `json:"sslVersion,omitempty"`
	// The type of webhook. Possible values are:
	//
	// - **standard**
	// - **account-settings-notification**
	// - **banktransfer-notification**
	// - **boletobancario-notification**
	// - **directdebit-notification**
	// - **pending-notification**
	// - **ideal-notification**
	// - **ideal-pending-notification**
	// - **report-notification**
	// - **terminal-api-notification**
	//
	// Find out more about [standard notification webhooks](https://docs.adyen.com/development-resources/webhooks/understand-notifications#event-codes) and [other types of notifications](https://docs.adyen.com/development-resources/webhooks/understand-notifications#other-notifications).
	Type string `json:"type"`
	// Public URL where webhooks will be sent, for example **https://www.domain.com/webhook-endpoint**.
	URL string `json:"url"`
	// Username to access the webhook URL.
	Username *string `json:"username,omitempty"`
}
