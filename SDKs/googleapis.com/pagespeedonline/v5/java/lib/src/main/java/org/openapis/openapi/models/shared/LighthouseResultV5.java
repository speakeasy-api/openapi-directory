/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * LighthouseResultV5 - The Lighthouse result object.
 */
public class LighthouseResultV5 {
    /**
     * Map of audits in the LHR.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audits")
    public java.util.Map<String, LighthouseAuditResultV5> audits;

    public LighthouseResultV5 withAudits(java.util.Map<String, LighthouseAuditResultV5> audits) {
        this.audits = audits;
        return this;
    }
    
    /**
     * The categories in a Lighthouse run.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("categories")
    public Categories categories;

    public LighthouseResultV5 withCategories(Categories categories) {
        this.categories = categories;
        return this;
    }
    
    /**
     * Map of category groups in the LHR.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("categoryGroups")
    public java.util.Map<String, CategoryGroupV5> categoryGroups;

    public LighthouseResultV5 withCategoryGroups(java.util.Map<String, CategoryGroupV5> categoryGroups) {
        this.categoryGroups = categoryGroups;
        return this;
    }
    
    /**
     * Message containing the configuration settings for the Lighthouse run.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("configSettings")
    public ConfigSettings configSettings;

    public LighthouseResultV5 withConfigSettings(ConfigSettings configSettings) {
        this.configSettings = configSettings;
        return this;
    }
    
    /**
     * Entity classification data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("entities")
    public LhrEntity[] entities;

    public LighthouseResultV5 withEntities(LhrEntity[] entities) {
        this.entities = entities;
        return this;
    }
    
    /**
     * Message containing environment configuration for a Lighthouse run.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("environment")
    public Environment environment;

    public LighthouseResultV5 withEnvironment(Environment environment) {
        this.environment = environment;
        return this;
    }
    
    /**
     * The time that this run was fetched.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fetchTime")
    public String fetchTime;

    public LighthouseResultV5 withFetchTime(String fetchTime) {
        this.fetchTime = fetchTime;
        return this;
    }
    
    /**
     * URL displayed on the page after Lighthouse finishes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("finalDisplayedUrl")
    public String finalDisplayedUrl;

    public LighthouseResultV5 withFinalDisplayedUrl(String finalDisplayedUrl) {
        this.finalDisplayedUrl = finalDisplayedUrl;
        return this;
    }
    
    /**
     * The final resolved url that was audited.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("finalUrl")
    public String finalUrl;

    public LighthouseResultV5 withFinalUrl(String finalUrl) {
        this.finalUrl = finalUrl;
        return this;
    }
    
    /**
     * Screenshot data of the full page, along with node rects relevant to the audit results.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fullPageScreenshot")
    public Object fullPageScreenshot;

    public LighthouseResultV5 withFullPageScreenshot(Object fullPageScreenshot) {
        this.fullPageScreenshot = fullPageScreenshot;
        return this;
    }
    
    /**
     * Message containing the i18n data for the LHR - Version 1.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("i18n")
    public I18n i18n;

    public LighthouseResultV5 withI18n(I18n i18n) {
        this.i18n = i18n;
        return this;
    }
    
    /**
     * The lighthouse version that was used to generate this LHR.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lighthouseVersion")
    public String lighthouseVersion;

    public LighthouseResultV5 withLighthouseVersion(String lighthouseVersion) {
        this.lighthouseVersion = lighthouseVersion;
        return this;
    }
    
    /**
     * URL of the main document request of the final navigation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mainDocumentUrl")
    public String mainDocumentUrl;

    public LighthouseResultV5 withMainDocumentUrl(String mainDocumentUrl) {
        this.mainDocumentUrl = mainDocumentUrl;
        return this;
    }
    
    /**
     * The original requested url.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestedUrl")
    public String requestedUrl;

    public LighthouseResultV5 withRequestedUrl(String requestedUrl) {
        this.requestedUrl = requestedUrl;
        return this;
    }
    
    /**
     * List of all run warnings in the LHR. Will always output to at least `[]`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runWarnings")
    public Object[] runWarnings;

    public LighthouseResultV5 withRunWarnings(Object[] runWarnings) {
        this.runWarnings = runWarnings;
        return this;
    }
    
    /**
     * Message containing a runtime error config.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runtimeError")
    public RuntimeError runtimeError;

    public LighthouseResultV5 withRuntimeError(RuntimeError runtimeError) {
        this.runtimeError = runtimeError;
        return this;
    }
    
    /**
     * The Stack Pack advice strings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stackPacks")
    public StackPack[] stackPacks;

    public LighthouseResultV5 withStackPacks(StackPack[] stackPacks) {
        this.stackPacks = stackPacks;
        return this;
    }
    
    /**
     * Message containing the performance timing data for the Lighthouse run.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timing")
    public Timing timing;

    public LighthouseResultV5 withTiming(Timing timing) {
        this.timing = timing;
        return this;
    }
    
    /**
     * The user agent that was used to run this LHR.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userAgent")
    public String userAgent;

    public LighthouseResultV5 withUserAgent(String userAgent) {
        this.userAgent = userAgent;
        return this;
    }
    
    public LighthouseResultV5(){}
}
