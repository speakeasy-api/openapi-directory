"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import settingmetadata as shared_settingmetadata
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class OrganizationJurisdictionEnum(str, Enum):
    NATIONAL = 'National'
    STATE = 'State'
    COUNTY = 'County'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OrganizationInput:
    r"""An organization connected to data hub"""
    
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""the displayable description of the organization"""  
    jurisdiction: OrganizationJurisdictionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jurisdiction') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""the unique id for the organization"""  
    county_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('countyName'), 'exclude': lambda f: f is None }})
    r"""the county name (must match FIPS name)"""  
    state_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stateCode'), 'exclude': lambda f: f is None }})
    r"""the two letter code for the organization"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Organization:
    r"""An organization connected to data hub"""
    
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""the displayable description of the organization"""  
    jurisdiction: OrganizationJurisdictionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jurisdiction') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""the unique id for the organization"""  
    county_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('countyName'), 'exclude': lambda f: f is None }})
    r"""the county name (must match FIPS name)"""  
    meta: Optional[shared_settingmetadata.SettingMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta'), 'exclude': lambda f: f is None }})
    r"""The metadata associated with an setting"""  
    state_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stateCode'), 'exclude': lambda f: f is None }})
    r"""the two letter code for the organization"""  
    