"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import link as shared_link
from ..shared import pagination as shared_pagination
from ..shared import persona as shared_persona
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetPersonasRequest:
    
    count: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'count', 'style': 'form', 'explode': True }})
    r"""Amount of items to return"""  
    expand: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'expand', 'style': 'form', 'explode': True }})
    r"""Allows to select extra fields"""  
    fields_: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fields', 'style': 'form', 'explode': True }})
    r"""Allows to select only needed fields"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'name', 'style': 'form', 'explode': True }})
    r"""Filter by Persona name"""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Offset, used together with count"""  
    

@dataclasses.dataclass
class GetPersonas200ApplicationXMLLinks:
    
    self_: Optional[shared_link.Link] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class GetPersonas200ApplicationXML:
    r"""The personas"""
    
    links: Optional[GetPersonas200ApplicationXMLLinks] = dataclasses.field(default=None)  
    meta: Optional[shared_pagination.Pagination] = dataclasses.field(default=None)  
    items: Optional[list[shared_persona.Persona]] = dataclasses.field(default=None)  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPersonas200ApplicationJSONLinks:
    
    self_: Optional[shared_link.Link] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('self'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPersonas200ApplicationJSON:
    r"""The personas"""
    
    links: Optional[GetPersonas200ApplicationJSONLinks] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_links'), 'exclude': lambda f: f is None }})  
    meta: Optional[shared_pagination.Pagination] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_meta'), 'exclude': lambda f: f is None }})  
    items: Optional[list[shared_persona.Persona]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('items'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetPersonasResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    get_personas_200_application_json_object: Optional[GetPersonas200ApplicationJSON] = dataclasses.field(default=None)
    r"""The personas"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    