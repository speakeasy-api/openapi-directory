"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import getpayoutsresponsev3 as shared_getpayoutsresponsev3
from ..shared import inline_response_400 as shared_inline_response_400
from ..shared import inline_response_401 as shared_inline_response_401
from ..shared import inline_response_403 as shared_inline_response_403
from ..shared import inline_response_404 as shared_inline_response_404
from datetime import date
from enum import Enum
from typing import Optional

class GetPayoutsForPayorV3StatusEnum(str, Enum):
    r"""Payout Status"""
    ACCEPTED = 'ACCEPTED'
    REJECTED = 'REJECTED'
    SUBMITTED = 'SUBMITTED'
    QUOTED = 'QUOTED'
    INSTRUCTED = 'INSTRUCTED'
    COMPLETED = 'COMPLETED'
    INCOMPLETE = 'INCOMPLETE'
    CONFIRMED = 'CONFIRMED'
    WITHDRAWN = 'WITHDRAWN'


@dataclasses.dataclass
class GetPayoutsForPayorV3Request:
    
    payor_id: str = dataclasses.field(metadata={'query_param': { 'field_name': 'payorId', 'style': 'form', 'explode': True }})
    r"""The account owner Payor ID"""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Page number. Default is 1."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'pageSize', 'style': 'form', 'explode': True }})
    r"""The number of results to return in a page"""  
    payout_memo: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'payoutMemo', 'style': 'form', 'explode': True }})
    r"""Payout Memo filter - case insensitive sub-string match"""  
    sort: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""List of sort fields (e.g. ?sort=submittedDateTime:asc,instructedDateTime:asc,status:asc)
    Default is submittedDateTime:asc
    The supported sort fields are: submittedDateTime, instructedDateTime, status.
    """  
    status: Optional[GetPayoutsForPayorV3StatusEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'status', 'style': 'form', 'explode': True }})
    r"""Payout Status"""  
    submitted_date_from: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'submittedDateFrom', 'style': 'form', 'explode': True }})
    r"""The submitted date from range filter. Format is yyyy-MM-dd."""  
    submitted_date_to: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'submittedDateTo', 'style': 'form', 'explode': True }})
    r"""The submitted date to range filter. Format is yyyy-MM-dd."""  
    

@dataclasses.dataclass
class GetPayoutsForPayorV3Response:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_payouts_response_v3: Optional[shared_getpayoutsresponsev3.GetPayoutsResponseV3] = dataclasses.field(default=None)
    r"""Payor data found"""  
    inline_response_400: Optional[shared_inline_response_400.InlineResponse400] = dataclasses.field(default=None)
    r"""Invalid request. See Error message payload for details of failure"""  
    inline_response_401: Optional[shared_inline_response_401.InlineResponse401] = dataclasses.field(default=None)
    r"""Invalid access token. May be expired or invalid"""  
    inline_response_403: Optional[shared_inline_response_403.InlineResponse403] = dataclasses.field(default=None)
    r"""The authentication does not have permissions to access the resource
    This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions
    """  
    inline_response_404: Optional[shared_inline_response_404.InlineResponse404] = dataclasses.field(default=None)
    r"""The resource was not found or is no longer available"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    