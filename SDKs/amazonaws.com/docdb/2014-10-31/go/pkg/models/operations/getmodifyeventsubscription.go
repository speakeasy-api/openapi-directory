// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETModifyEventSubscriptionActionEnum
type GETModifyEventSubscriptionActionEnum string

const (
	GETModifyEventSubscriptionActionEnumModifyEventSubscription GETModifyEventSubscriptionActionEnum = "ModifyEventSubscription"
)

func (e GETModifyEventSubscriptionActionEnum) ToPointer() *GETModifyEventSubscriptionActionEnum {
	return &e
}

func (e *GETModifyEventSubscriptionActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ModifyEventSubscription":
		*e = GETModifyEventSubscriptionActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyEventSubscriptionActionEnum: %v", v)
	}
}

// GETModifyEventSubscriptionVersionEnum
type GETModifyEventSubscriptionVersionEnum string

const (
	GETModifyEventSubscriptionVersionEnumTwoThousandAndFourteen1031 GETModifyEventSubscriptionVersionEnum = "2014-10-31"
)

func (e GETModifyEventSubscriptionVersionEnum) ToPointer() *GETModifyEventSubscriptionVersionEnum {
	return &e
}

func (e *GETModifyEventSubscriptionVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2014-10-31":
		*e = GETModifyEventSubscriptionVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyEventSubscriptionVersionEnum: %v", v)
	}
}

type GETModifyEventSubscriptionRequest struct {
	Action GETModifyEventSubscriptionActionEnum `queryParam:"style=form,explode=true,name=Action"`
	//  A Boolean value; set to <code>true</code> to activate the subscription.
	Enabled *bool `queryParam:"style=form,explode=true,name=Enabled"`
	//  A list of event categories for a <code>SourceType</code> that you want to subscribe to.
	EventCategories []string `queryParam:"style=form,explode=true,name=EventCategories"`
	// The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
	SnsTopicArn *string `queryParam:"style=form,explode=true,name=SnsTopicArn"`
	// <p>The type of source that is generating the events. For example, if you want to be notified of events generated by an instance, set this parameter to <code>db-instance</code>. If this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code>, <code>db-parameter-group</code>, <code>db-security-group</code> </p>
	SourceType *string `queryParam:"style=form,explode=true,name=SourceType"`
	// The name of the Amazon DocumentDB event notification subscription.
	SubscriptionName  string                                `queryParam:"style=form,explode=true,name=SubscriptionName"`
	Version           GETModifyEventSubscriptionVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                               `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                               `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                               `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                               `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                               `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                               `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                               `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETModifyEventSubscriptionResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
