"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import addressfamily_enum as shared_addressfamily_enum
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NewPrivateVirtualInterface:
    r"""Information about a private virtual interface."""
    
    asn: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('asn') }})  
    virtual_interface_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('virtualInterfaceName') }})  
    vlan: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vlan') }})  
    address_family: Optional[shared_addressfamily_enum.AddressFamilyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addressFamily'), 'exclude': lambda f: f is None }})  
    amazon_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amazonAddress'), 'exclude': lambda f: f is None }})  
    auth_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authKey'), 'exclude': lambda f: f is None }})  
    customer_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customerAddress'), 'exclude': lambda f: f is None }})  
    direct_connect_gateway_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('directConnectGatewayId'), 'exclude': lambda f: f is None }})  
    enable_site_link: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enableSiteLink'), 'exclude': lambda f: f is None }})  
    mtu: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mtu'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    virtual_gateway_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('virtualGatewayId'), 'exclude': lambda f: f is None }})  
    