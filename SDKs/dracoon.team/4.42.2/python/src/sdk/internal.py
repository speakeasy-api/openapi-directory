"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Internal:
    r"""Internal non-public APIs"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def internal_request_subscription_plan(self, request: operations.InternalRequestSubscriptionPlanRequest) -> operations.InternalRequestSubscriptionPlanResponse:
        r"""Request subscription plan
        <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.36.0</h3>
        
        ### Description:
        Get the subscription plan id of the current tenant
        
        ### Precondition:
        Valid `X-SDS-Service-Token` Header
        
        ### Postcondition:
        Returns SubscriptionPlanResponse model that includes subscription plan id.
        
        ### Further Information:
        None.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v4/internal/tenant/subscription_plan'
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InternalRequestSubscriptionPlanResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SubscriptionPlanResponse])
                res.subscription_plan_response = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def internal_set_subscription_plan(self, request: operations.InternalSetSubscriptionPlanRequest) -> operations.InternalSetSubscriptionPlanResponse:
        r"""Set subscription plan
        <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.36.0</h3>
        
        ### Description: 
        Change the subscription plan id of the current tenant
        
        ### Precondition:
        Valid `X-SDS-Service-Token` Header
        
        ### Postcondition:
        The subscription plan of the current tenant is set to the given value.  
        Returns SubscriptionPlanResponse model that includes subscription plan id.
        
        ### Further Information:
        None.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v4/internal/tenant/subscription_plan'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "subscription_plan_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InternalSetSubscriptionPlanResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SubscriptionPlanResponse])
                res.subscription_plan_response = out
        elif http_res.status_code in [400, 401]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    