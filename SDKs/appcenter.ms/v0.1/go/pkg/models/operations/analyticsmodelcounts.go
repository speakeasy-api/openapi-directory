// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type AnalyticsModelCountsSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type AnalyticsModelCountsRequest struct {
	// The maximum number of results to return. (0 will fetch all results)
	DollarTop *int64 `queryParam:"style=form,explode=true,name=$top"`
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// Last date time in data in ISO 8601 date time format.
	End *time.Time `queryParam:"style=form,explode=true,name=end"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// Start date time in data in ISO 8601 date time format.
	Start time.Time `queryParam:"style=form,explode=true,name=start"`
	// To select specific application versions
	Versions []string `queryParam:"style=pipeDelimited,explode=true,name=versions"`
}

// AnalyticsModelCountsDefaultApplicationJSONErrorCodeEnum - The status code return by the API. It can be 400 or 403 or 500.
type AnalyticsModelCountsDefaultApplicationJSONErrorCodeEnum int64

const (
	AnalyticsModelCountsDefaultApplicationJSONErrorCodeEnumFourHundred         AnalyticsModelCountsDefaultApplicationJSONErrorCodeEnum = 400
	AnalyticsModelCountsDefaultApplicationJSONErrorCodeEnumFourHundredAndThree AnalyticsModelCountsDefaultApplicationJSONErrorCodeEnum = 403
	AnalyticsModelCountsDefaultApplicationJSONErrorCodeEnumFiveHundred         AnalyticsModelCountsDefaultApplicationJSONErrorCodeEnum = 500
)

func (e AnalyticsModelCountsDefaultApplicationJSONErrorCodeEnum) ToPointer() *AnalyticsModelCountsDefaultApplicationJSONErrorCodeEnum {
	return &e
}

func (e *AnalyticsModelCountsDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 400:
		fallthrough
	case 403:
		fallthrough
	case 500:
		*e = AnalyticsModelCountsDefaultApplicationJSONErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AnalyticsModelCountsDefaultApplicationJSONErrorCodeEnum: %v", v)
	}
}

type AnalyticsModelCountsDefaultApplicationJSONError struct {
	// The status code return by the API. It can be 400 or 403 or 500.
	Code *AnalyticsModelCountsDefaultApplicationJSONErrorCodeEnum `json:"code,omitempty"`
	// The reason for the request failed.
	Message *string `json:"message,omitempty"`
}

// AnalyticsModelCountsDefaultApplicationJSON - Error
type AnalyticsModelCountsDefaultApplicationJSON struct {
	Error *AnalyticsModelCountsDefaultApplicationJSONError `json:"error,omitempty"`
}

type AnalyticsModelCounts200ApplicationJSONModels struct {
	// Count current of model.
	Count *int64 `json:"count,omitempty"`
	// Model's name.
	ModelName *string `json:"model_name,omitempty"`
	// Count of previous model.
	PreviousCount *int64 `json:"previous_count,omitempty"`
}

// AnalyticsModelCounts200ApplicationJSON - Models with count during the time range in descending order.
type AnalyticsModelCounts200ApplicationJSON struct {
	Models []AnalyticsModelCounts200ApplicationJSONModels `json:"models,omitempty"`
	Total  *int64                                         `json:"total,omitempty"`
}

type AnalyticsModelCountsResponse struct {
	// Models with count during the time range in descending order.
	AnalyticsModelCounts200ApplicationJSONObject *AnalyticsModelCounts200ApplicationJSON
	// Error code with reason.
	AnalyticsModelCountsDefaultApplicationJSONObject *AnalyticsModelCountsDefaultApplicationJSON
	ContentType                                      string
	StatusCode                                       int
	RawResponse                                      *http.Response
}
