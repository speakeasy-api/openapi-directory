// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// JobStateEnum - Output only. State of the job.
type JobStateEnum string

const (
	JobStateEnumStateUnspecified JobStateEnum = "STATE_UNSPECIFIED"
	JobStateEnumEnabled          JobStateEnum = "ENABLED"
	JobStateEnumPaused           JobStateEnum = "PAUSED"
	JobStateEnumDisabled         JobStateEnum = "DISABLED"
	JobStateEnumUpdateFailed     JobStateEnum = "UPDATE_FAILED"
)

func (e *JobStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "ENABLED":
		fallthrough
	case "PAUSED":
		fallthrough
	case "DISABLED":
		fallthrough
	case "UPDATE_FAILED":
		*e = JobStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for JobStateEnum: %s", s)
	}
}

// Job - Configuration for a job. The maximum allowed size for a job is 1MB.
type Job struct {
	// App Engine target. The job will be pushed to a job handler by means of an HTTP request via an http_method such as HTTP POST, HTTP GET, etc. The job is acknowledged by means of an HTTP response code in the range [200 - 299]. Error 503 is considered an App Engine system error instead of an application error. Requests returning error 503 will be retried regardless of retry configuration and not counted against retry counts. Any other response code, or a failure to receive a response before the deadline, constitutes a failed attempt.
	AppEngineHTTPTarget *AppEngineHTTPTarget `json:"appEngineHttpTarget,omitempty"`
	// The deadline for job attempts. If the request handler does not respond by this deadline then the request is cancelled and the attempt is marked as a `DEADLINE_EXCEEDED` failure. The failed attempt can be viewed in execution logs. Cloud Scheduler will retry the job according to the RetryConfig. The default and the allowed values depend on the type of target: * For HTTP targets, the default is 3 minutes. The deadline must be in the interval [15 seconds, 30 minutes]. * For App Engine HTTP targets, 0 indicates that the request has the default deadline. The default deadline depends on the scaling type of the service: 10 minutes for standard apps with automatic scaling, 24 hours for standard apps with manual and basic scaling, and 60 minutes for flex apps. If the request deadline is set, it must be in the interval [15 seconds, 24 hours 15 seconds]. * For Pub/Sub targets, this field is ignored.
	AttemptDeadline *string `json:"attemptDeadline,omitempty"`
	// Optionally caller-specified in CreateJob or UpdateJob. A human-readable description for the job. This string must not contain more than 500 characters.
	Description *string `json:"description,omitempty"`
	// Http target. The job will be pushed to the job handler by means of an HTTP request via an http_method such as HTTP POST, HTTP GET, etc. The job is acknowledged by means of an HTTP response code in the range [200 - 299]. A failure to receive a response constitutes a failed execution. For a redirected request, the response returned by the redirected request is considered.
	HTTPTarget *HTTPTarget `json:"httpTarget,omitempty"`
	// Output only. The time the last job attempt started.
	LastAttemptTime *string `json:"lastAttemptTime,omitempty"`
	// Immutable. This field is used to manage the legacy App Engine Cron jobs using the Cloud Scheduler API. If the field is set to true, the job will be considered a legacy job. Note that App Engine Cron jobs have fewer features than Cloud Scheduler jobs, e.g., are only limited to App Engine targets.
	LegacyAppEngineCron *bool `json:"legacyAppEngineCron,omitempty"`
	// Optionally caller-specified in CreateJob, after which it becomes output only. The job name. For example: `projects/PROJECT_ID/locations/LOCATION_ID/jobs/JOB_ID`. * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects) * `LOCATION_ID` is the canonical ID for the job's location. The list of available locations can be obtained by calling ListLocations. For more information, see https://cloud.google.com/about/locations/. * `JOB_ID` can contain only letters ([A-Za-z]), numbers ([0-9]), hyphens (-), or underscores (_). The maximum length is 500 characters.
	Name *string `json:"name,omitempty"`
	// Pub/Sub target. The job will be delivered by publishing a message to the given Pub/Sub topic.
	PubsubTarget *PubsubTarget `json:"pubsubTarget,omitempty"`
	// Settings that determine the retry behavior. By default, if a job does not complete successfully (meaning that an acknowledgement is not received from the handler, then it will be retried with exponential backoff according to the settings in RetryConfig.
	RetryConfig *RetryConfig `json:"retryConfig,omitempty"`
	// Required, except when used with UpdateJob. Describes the schedule on which the job will be executed. The schedule can be either of the following types: * [Crontab](https://en.wikipedia.org/wiki/Cron#Overview) * English-like [schedule](https://cloud.google.com/scheduler/docs/configuring/cron-job-schedules) As a general rule, execution `n + 1` of a job will not begin until execution `n` has finished. Cloud Scheduler will never allow two simultaneously outstanding executions. For example, this implies that if the `n+1`th execution is scheduled to run at 16:00 but the `n`th execution takes until 16:15, the `n+1`th execution will not start until `16:15`. A scheduled start time will be delayed if the previous execution has not ended when its scheduled time occurs. If retry_count > 0 and a job attempt fails, the job will be tried a total of retry_count times, with exponential backoff, until the next scheduled start time.
	Schedule *string `json:"schedule,omitempty"`
	// Output only. The next time the job is scheduled. Note that this may be a retry of a previously failed attempt or the next execution time according to the schedule.
	ScheduleTime *string `json:"scheduleTime,omitempty"`
	// Output only. State of the job.
	State *JobStateEnum `json:"state,omitempty"`
	// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	Status *Status `json:"status,omitempty"`
	// Specifies the time zone to be used in interpreting schedule. The value of this field must be a time zone name from the [tz database](http://en.wikipedia.org/wiki/Tz_database). Note that some time zones include a provision for daylight savings time. The rules for daylight saving time are determined by the chosen tz. For UTC use the string "utc". If a time zone is not specified, the default will be in UTC (also known as GMT).
	TimeZone *string `json:"timeZone,omitempty"`
	// Output only. The creation time of the job.
	UserUpdateTime *string `json:"userUpdateTime,omitempty"`
}
