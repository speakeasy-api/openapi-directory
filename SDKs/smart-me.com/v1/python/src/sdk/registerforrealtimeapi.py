"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class RegisterForRealtimeAPI:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def register_for_realtime_api_delete(self, request: operations.RegisterForRealtimeAPIDeleteRequest) -> operations.RegisterForRealtimeAPIDeleteResponse:
        r"""Deletes a realtime API registration.
        Deletes a realtime API registration.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RegisterForRealtimeAPIDeleteRequest, base_url, '/api/RegisterForRealtimeApi/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegisterForRealtimeAPIDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def register_for_realtime_api_get(self) -> operations.RegisterForRealtimeAPIGetResponse:
        r"""Gets all registrations for the Realtime API.
        Gets all registrations for the Realtime API.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/RegisterForRealtimeApi'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegisterForRealtimeAPIGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RegisterRealtimeAPIData]])
                res.register_realtime_api_data = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RegisterRealtimeAPIData]])
                res.register_realtime_api_data = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def register_for_realtime_api_post_form(self, request: shared.RegisterRealtimeAPIData) -> operations.RegisterForRealtimeAPIPostFormResponse:
        r"""Creates a new registration for the realtime API. The Realtime API sends you the data of the registred devices as soon as we have them on the cloud.
                     More Information about the realtime API: https://www.smart-me.com/Description/api/realtimeapi.aspx
        Creates a new registration for the realtime API. The Realtime API sends you the data of the registred devices as soon as we have them on the cloud. More Information about the realtime API: https://www.smart-me.com/Description/api/realtimeapi.aspx
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/RegisterForRealtimeApi'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegisterForRealtimeAPIPostFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def register_for_realtime_api_post_json(self, request: shared.RegisterRealtimeAPIData) -> operations.RegisterForRealtimeAPIPostJSONResponse:
        r"""Creates a new registration for the realtime API. The Realtime API sends you the data of the registred devices as soon as we have them on the cloud.
                     More Information about the realtime API: https://www.smart-me.com/Description/api/realtimeapi.aspx
        Creates a new registration for the realtime API. The Realtime API sends you the data of the registred devices as soon as we have them on the cloud. More Information about the realtime API: https://www.smart-me.com/Description/api/realtimeapi.aspx
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/RegisterForRealtimeApi'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegisterForRealtimeAPIPostJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def register_for_realtime_api_post_raw(self, request: bytes) -> operations.RegisterForRealtimeAPIPostRawResponse:
        r"""Creates a new registration for the realtime API. The Realtime API sends you the data of the registred devices as soon as we have them on the cloud.
                     More Information about the realtime API: https://www.smart-me.com/Description/api/realtimeapi.aspx
        Creates a new registration for the realtime API. The Realtime API sends you the data of the registred devices as soon as we have them on the cloud. More Information about the realtime API: https://www.smart-me.com/Description/api/realtimeapi.aspx
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/RegisterForRealtimeApi'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegisterForRealtimeAPIPostRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    