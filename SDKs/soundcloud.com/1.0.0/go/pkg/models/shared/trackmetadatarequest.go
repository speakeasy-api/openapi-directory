// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TrackMetadataRequestTrackEmbeddableByEnum - who can embed this track "all", "me", or "none"
type TrackMetadataRequestTrackEmbeddableByEnum string

const (
	TrackMetadataRequestTrackEmbeddableByEnumAll  TrackMetadataRequestTrackEmbeddableByEnum = "all"
	TrackMetadataRequestTrackEmbeddableByEnumMe   TrackMetadataRequestTrackEmbeddableByEnum = "me"
	TrackMetadataRequestTrackEmbeddableByEnumNone TrackMetadataRequestTrackEmbeddableByEnum = "none"
)

func (e *TrackMetadataRequestTrackEmbeddableByEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "all":
		fallthrough
	case "me":
		fallthrough
	case "none":
		*e = TrackMetadataRequestTrackEmbeddableByEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TrackMetadataRequestTrackEmbeddableByEnum: %s", s)
	}
}

// TrackMetadataRequestTrackLicenseEnum - Possible values: no-rights-reserved, all-rights-reserved, cc-by, cc-by-nc, cc-by-nd, cc-by-sa, cc-by-nc-nd, cc-by-nc-sa
type TrackMetadataRequestTrackLicenseEnum string

const (
	TrackMetadataRequestTrackLicenseEnumNoRightsReserved  TrackMetadataRequestTrackLicenseEnum = "no-rights-reserved"
	TrackMetadataRequestTrackLicenseEnumAllRightsReserved TrackMetadataRequestTrackLicenseEnum = "all-rights-reserved"
	TrackMetadataRequestTrackLicenseEnumCcBy              TrackMetadataRequestTrackLicenseEnum = "cc-by"
	TrackMetadataRequestTrackLicenseEnumCcByNc            TrackMetadataRequestTrackLicenseEnum = "cc-by-nc"
	TrackMetadataRequestTrackLicenseEnumCcByNd            TrackMetadataRequestTrackLicenseEnum = "cc-by-nd"
	TrackMetadataRequestTrackLicenseEnumCcBySa            TrackMetadataRequestTrackLicenseEnum = "cc-by-sa"
	TrackMetadataRequestTrackLicenseEnumCcByNcNd          TrackMetadataRequestTrackLicenseEnum = "cc-by-nc-nd"
	TrackMetadataRequestTrackLicenseEnumCcByNcSa          TrackMetadataRequestTrackLicenseEnum = "cc-by-nc-sa"
)

func (e *TrackMetadataRequestTrackLicenseEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "no-rights-reserved":
		fallthrough
	case "all-rights-reserved":
		fallthrough
	case "cc-by":
		fallthrough
	case "cc-by-nc":
		fallthrough
	case "cc-by-nd":
		fallthrough
	case "cc-by-sa":
		fallthrough
	case "cc-by-nc-nd":
		fallthrough
	case "cc-by-nc-sa":
		*e = TrackMetadataRequestTrackLicenseEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TrackMetadataRequestTrackLicenseEnum: %s", s)
	}
}

type TrackMetadataRequestTrackSharingEnum string

const (
	TrackMetadataRequestTrackSharingEnumPublic  TrackMetadataRequestTrackSharingEnum = "public"
	TrackMetadataRequestTrackSharingEnumPrivate TrackMetadataRequestTrackSharingEnum = "private"
)

func (e *TrackMetadataRequestTrackSharingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "public":
		fallthrough
	case "private":
		*e = TrackMetadataRequestTrackSharingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TrackMetadataRequestTrackSharingEnum: %s", s)
	}
}

type TrackMetadataRequestTrack struct {
	Commentable  *bool   `json:"commentable,omitempty"`
	Description  *string `json:"description,omitempty"`
	Downloadable *bool   `json:"downloadable,omitempty"`
	// who can embed this track "all", "me", or "none"
	EmbeddableBy *TrackMetadataRequestTrackEmbeddableByEnum `json:"embeddable_by,omitempty"`
	Genre        *string                                    `json:"genre,omitempty"`
	Isrc         *string                                    `json:"isrc,omitempty"`
	LabelName    *string                                    `json:"label_name,omitempty"`
	// Possible values: no-rights-reserved, all-rights-reserved, cc-by, cc-by-nc, cc-by-nd, cc-by-sa, cc-by-nc-nd, cc-by-nc-sa
	License     *TrackMetadataRequestTrackLicenseEnum `json:"license,omitempty"`
	Permalink   *string                               `json:"permalink,omitempty"`
	PurchaseURL *string                               `json:"purchase_url,omitempty"`
	Release     *string                               `json:"release,omitempty"`
	// string, formatted as yyyy-mm-dd, representing release date
	ReleaseDate *string                               `json:"release_date,omitempty"`
	Sharing     *TrackMetadataRequestTrackSharingEnum `json:"sharing,omitempty"`
	Streamable  *bool                                 `json:"streamable,omitempty"`
	// The tag_list property contains a list of tags separated by spaces. Multiword tags are quoted in double quotes. We also support machine tags that follow the pattern NAMESPACE:KEY=VALUE. For example: geo:lat=43.555 camel:size=medium “machine:tag=with space” Machine tags are not revealed to the user on the track pages.
	TagList *string `json:"tag_list,omitempty"`
	Title   *string `json:"title,omitempty"`
}

// TrackMetadataRequest - Track payload
type TrackMetadataRequest struct {
	Track *TrackMetadataRequestTrack `json:"track,omitempty"`
}
