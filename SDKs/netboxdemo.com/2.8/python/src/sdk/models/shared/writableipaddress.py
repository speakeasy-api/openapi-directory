"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class WritableIPAddressRoleEnum(str, Enum):
    r"""The functional role of this IP"""
    LOOPBACK = 'loopback'
    SECONDARY = 'secondary'
    ANYCAST = 'anycast'
    VIP = 'vip'
    VRRP = 'vrrp'
    HSRP = 'hsrp'
    GLBP = 'glbp'
    CARP = 'carp'

class WritableIPAddressStatusEnum(str, Enum):
    r"""The operational status of this IP"""
    ACTIVE = 'active'
    RESERVED = 'reserved'
    DEPRECATED = 'deprecated'
    DHCP = 'dhcp'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WritableIPAddressInput:
    
    address: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address') }})
    r"""IPv4 or IPv6 address (with mask)"""  
    nat_outside: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nat_outside') }})  
    custom_fields: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_fields'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    dns_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dns_name'), 'exclude': lambda f: f is None }})
    r"""Hostname or FQDN (not case-sensitive)"""  
    interface: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interface'), 'exclude': lambda f: f is None }})  
    nat_inside: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nat_inside'), 'exclude': lambda f: f is None }})
    r"""The IP for which this address is the \\"outside\\" IP"""  
    role: Optional[WritableIPAddressRoleEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role'), 'exclude': lambda f: f is None }})
    r"""The functional role of this IP"""  
    status: Optional[WritableIPAddressStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The operational status of this IP"""  
    tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    tenant: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tenant'), 'exclude': lambda f: f is None }})  
    vrf: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vrf'), 'exclude': lambda f: f is None }})  
    