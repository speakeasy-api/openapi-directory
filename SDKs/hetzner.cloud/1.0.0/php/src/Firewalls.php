<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Firewalls 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete a Firewall
     * 
     * Deletes a Firewall.
     * 
     * #### Call specific error codes
     * 
     * | Code                 | Description                               |
     * |--------------------- |-------------------------------------------|
     * | `resource_in_use`    | Firewall must not be in use to be deleted |
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteFirewallsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteFirewallsIdResponse
     */
	public function deleteFirewallsId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteFirewallsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteFirewallsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/firewalls/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteFirewallsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteFirewallsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Get all Firewalls
     * 
     * Returns all Firewall objects.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFirewallsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFirewallsResponse
     */
	public function getFirewalls(
        \OpenAPI\OpenAPI\Models\Operations\GetFirewallsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFirewallsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/firewalls');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetFirewallsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFirewallsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->firewallsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetFirewallsFirewallsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a Firewall
     * 
     * Gets a specific Firewall object.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFirewallsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFirewallsIdResponse
     */
	public function getFirewallsId(
        \OpenAPI\OpenAPI\Models\Operations\GetFirewallsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFirewallsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/firewalls/{id}', \OpenAPI\OpenAPI\Models\Operations\GetFirewallsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFirewallsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->firewallResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetFirewallsIdFirewallResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a Firewall
     * 
     * Creates a new Firewall.
     * 
     * #### Call specific error codes
     * 
     * | Code                          | Description                                                   |
     * |------------------------------ |-------------------------------------------------------------- |
     * | `server_already_added`        | Server added more than one time to resource                   |
     * | `incompatible_network_type`   | The Network type is incompatible for the given resource       |
     * | `firewall_resource_not_found` | The resource the Firewall should be attached to was not found |
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostFirewallsCreateFirewallRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostFirewallsResponse
     */
	public function postFirewalls(
        \OpenAPI\OpenAPI\Models\Operations\PostFirewallsCreateFirewallRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostFirewallsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/firewalls');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostFirewallsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createFirewallResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostFirewallsCreateFirewallResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a Firewall
     * 
     * Updates the Firewall.
     * 
     * Note that when updating labels, the Firewall's current set of labels will be replaced with the labels provided in the request body. So, for example, if you want to add a new label, you have to provide all existing labels plus the new label in the request body.
     * 
     * Note: if the Firewall object changes during the request, the response will be a “conflict” error.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutFirewallsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutFirewallsIdResponse
     */
	public function putFirewallsId(
        \OpenAPI\OpenAPI\Models\Operations\PutFirewallsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutFirewallsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/firewalls/{id}', \OpenAPI\OpenAPI\Models\Operations\PutFirewallsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutFirewallsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->firewallResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PutFirewallsIdFirewallResponse', 'json');
            }
        }

        return $response;
    }
}