"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReservationAggregates:
    r"""The aggregated numbers for your reservation usage."""
    
    amortized_recurring_fee: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AmortizedRecurringFee'), 'exclude': lambda f: f is None }})  
    amortized_upfront_fee: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AmortizedUpfrontFee'), 'exclude': lambda f: f is None }})  
    net_ri_savings: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NetRISavings'), 'exclude': lambda f: f is None }})  
    on_demand_cost_of_ri_hours_used: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OnDemandCostOfRIHoursUsed'), 'exclude': lambda f: f is None }})  
    purchased_hours: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PurchasedHours'), 'exclude': lambda f: f is None }})  
    purchased_units: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PurchasedUnits'), 'exclude': lambda f: f is None }})  
    realized_savings: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RealizedSavings'), 'exclude': lambda f: f is None }})  
    ri_cost_for_unused_hours: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RICostForUnusedHours'), 'exclude': lambda f: f is None }})  
    total_actual_hours: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TotalActualHours'), 'exclude': lambda f: f is None }})  
    total_actual_units: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TotalActualUnits'), 'exclude': lambda f: f is None }})  
    total_amortized_fee: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TotalAmortizedFee'), 'exclude': lambda f: f is None }})  
    total_potential_ri_savings: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TotalPotentialRISavings'), 'exclude': lambda f: f is None }})  
    unrealized_savings: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UnrealizedSavings'), 'exclude': lambda f: f is None }})  
    unused_hours: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UnusedHours'), 'exclude': lambda f: f is None }})  
    unused_units: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UnusedUnits'), 'exclude': lambda f: f is None }})  
    utilization_percentage: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UtilizationPercentage'), 'exclude': lambda f: f is None }})  
    utilization_percentage_in_units: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UtilizationPercentageInUnits'), 'exclude': lambda f: f is None }})  
    