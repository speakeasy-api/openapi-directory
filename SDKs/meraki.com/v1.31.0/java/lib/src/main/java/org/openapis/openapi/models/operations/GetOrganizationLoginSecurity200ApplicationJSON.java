/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GetOrganizationLoginSecurity200ApplicationJSON - Successful operation
 */
public class GetOrganizationLoginSecurity200ApplicationJSON {
    /**
     * Number of consecutive failed login attempts after which users' accounts will be locked.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountLockoutAttempts")
    public Long accountLockoutAttempts;
    public GetOrganizationLoginSecurity200ApplicationJSON withAccountLockoutAttempts(Long accountLockoutAttempts) {
        this.accountLockoutAttempts = accountLockoutAttempts;
        return this;
    }
    
    /**
     * Details for indicating whether organization will restrict access to API (but not Dashboard) to certain IP addresses.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("apiAuthentication")
    public GetOrganizationLoginSecurity200ApplicationJSONApiAuthentication apiAuthentication;
    public GetOrganizationLoginSecurity200ApplicationJSON withApiAuthentication(GetOrganizationLoginSecurity200ApplicationJSONApiAuthentication apiAuthentication) {
        this.apiAuthentication = apiAuthentication;
        return this;
    }
    
    /**
     * Boolean indicating whether users' Dashboard accounts will be locked out after a specified number of consecutive failed login attempts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enforceAccountLockout")
    public Boolean enforceAccountLockout;
    public GetOrganizationLoginSecurity200ApplicationJSON withEnforceAccountLockout(Boolean enforceAccountLockout) {
        this.enforceAccountLockout = enforceAccountLockout;
        return this;
    }
    
    /**
     * Boolean indicating whether users, when setting a new password, are forced to choose a new password that is different from any past passwords.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enforceDifferentPasswords")
    public Boolean enforceDifferentPasswords;
    public GetOrganizationLoginSecurity200ApplicationJSON withEnforceDifferentPasswords(Boolean enforceDifferentPasswords) {
        this.enforceDifferentPasswords = enforceDifferentPasswords;
        return this;
    }
    
    /**
     * Boolean indicating whether users will be logged out after being idle for the specified number of minutes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enforceIdleTimeout")
    public Boolean enforceIdleTimeout;
    public GetOrganizationLoginSecurity200ApplicationJSON withEnforceIdleTimeout(Boolean enforceIdleTimeout) {
        this.enforceIdleTimeout = enforceIdleTimeout;
        return this;
    }
    
    /**
     * Boolean indicating whether organization will restrict access to Dashboard (including the API) from certain IP addresses.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enforceLoginIpRanges")
    public Boolean enforceLoginIpRanges;
    public GetOrganizationLoginSecurity200ApplicationJSON withEnforceLoginIpRanges(Boolean enforceLoginIpRanges) {
        this.enforceLoginIpRanges = enforceLoginIpRanges;
        return this;
    }
    
    /**
     * Boolean indicating whether users are forced to change their password every X number of days.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enforcePasswordExpiration")
    public Boolean enforcePasswordExpiration;
    public GetOrganizationLoginSecurity200ApplicationJSON withEnforcePasswordExpiration(Boolean enforcePasswordExpiration) {
        this.enforcePasswordExpiration = enforcePasswordExpiration;
        return this;
    }
    
    /**
     * Boolean indicating whether users will be forced to choose strong passwords for their accounts. Strong passwords are at least 8 characters that contain 3 of the following: number, uppercase letter, lowercase letter, and symbol
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enforceStrongPasswords")
    public Boolean enforceStrongPasswords;
    public GetOrganizationLoginSecurity200ApplicationJSON withEnforceStrongPasswords(Boolean enforceStrongPasswords) {
        this.enforceStrongPasswords = enforceStrongPasswords;
        return this;
    }
    
    /**
     * Boolean indicating whether users in this organization will be required to use an extra verification code when logging in to Dashboard. This code will be sent to their mobile phone via SMS, or can be generated by the authenticator application.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enforceTwoFactorAuth")
    public Boolean enforceTwoFactorAuth;
    public GetOrganizationLoginSecurity200ApplicationJSON withEnforceTwoFactorAuth(Boolean enforceTwoFactorAuth) {
        this.enforceTwoFactorAuth = enforceTwoFactorAuth;
        return this;
    }
    
    /**
     * Number of minutes users can remain idle before being logged out of their accounts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idleTimeoutMinutes")
    public Long idleTimeoutMinutes;
    public GetOrganizationLoginSecurity200ApplicationJSON withIdleTimeoutMinutes(Long idleTimeoutMinutes) {
        this.idleTimeoutMinutes = idleTimeoutMinutes;
        return this;
    }
    
    /**
     * List of acceptable IP ranges. Entries can be single IP addresses, IP address ranges, and CIDR subnets.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("loginIpRanges")
    public String[] loginIpRanges;
    public GetOrganizationLoginSecurity200ApplicationJSON withLoginIpRanges(String[] loginIpRanges) {
        this.loginIpRanges = loginIpRanges;
        return this;
    }
    
    /**
     * Number of recent passwords that new password must be distinct from.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numDifferentPasswords")
    public Long numDifferentPasswords;
    public GetOrganizationLoginSecurity200ApplicationJSON withNumDifferentPasswords(Long numDifferentPasswords) {
        this.numDifferentPasswords = numDifferentPasswords;
        return this;
    }
    
    /**
     * Number of days after which users will be forced to change their password.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("passwordExpirationDays")
    public Long passwordExpirationDays;
    public GetOrganizationLoginSecurity200ApplicationJSON withPasswordExpirationDays(Long passwordExpirationDays) {
        this.passwordExpirationDays = passwordExpirationDays;
        return this;
    }
    
}
