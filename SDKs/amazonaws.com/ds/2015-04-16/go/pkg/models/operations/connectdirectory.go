// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ConnectDirectoryXAmzTargetEnum
type ConnectDirectoryXAmzTargetEnum string

const (
	ConnectDirectoryXAmzTargetEnumDirectoryService20150416ConnectDirectory ConnectDirectoryXAmzTargetEnum = "DirectoryService_20150416.ConnectDirectory"
)

func (e ConnectDirectoryXAmzTargetEnum) ToPointer() *ConnectDirectoryXAmzTargetEnum {
	return &e
}

func (e *ConnectDirectoryXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DirectoryService_20150416.ConnectDirectory":
		*e = ConnectDirectoryXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectDirectoryXAmzTargetEnum: %v", v)
	}
}

type ConnectDirectoryRequest struct {
	ConnectDirectoryRequest shared.ConnectDirectoryRequest `request:"mediaType=application/json"`
	XAmzAlgorithm           *string                        `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256       *string                        `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential          *string                        `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                *string                        `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken       *string                        `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature           *string                        `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders       *string                        `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget              ConnectDirectoryXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ConnectDirectoryResponse struct {
	// ClientException
	ClientException interface{}
	// Success
	ConnectDirectoryResult *shared.ConnectDirectoryResult
	ContentType            string
	// DirectoryLimitExceededException
	DirectoryLimitExceededException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// ServiceException
	ServiceException interface{}
	StatusCode       int
	RawResponse      *http.Response
}
