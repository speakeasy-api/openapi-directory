"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import disksnapshotinfo as shared_disksnapshotinfo
from ..shared import exportsnapshotrecordsourcetype_enum as shared_exportsnapshotrecordsourcetype_enum
from ..shared import instancesnapshotinfo as shared_instancesnapshotinfo
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ExportSnapshotRecordSourceInfo:
    r"""Describes the source of an export snapshot record."""
    
    arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('arn'), 'exclude': lambda f: f is None }})  
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    disk_snapshot_info: Optional[shared_disksnapshotinfo.DiskSnapshotInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('diskSnapshotInfo'), 'exclude': lambda f: f is None }})  
    from_resource_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fromResourceArn'), 'exclude': lambda f: f is None }})  
    from_resource_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fromResourceName'), 'exclude': lambda f: f is None }})  
    instance_snapshot_info: Optional[shared_instancesnapshotinfo.InstanceSnapshotInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instanceSnapshotInfo'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    resource_type: Optional[shared_exportsnapshotrecordsourcetype_enum.ExportSnapshotRecordSourceTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceType'), 'exclude': lambda f: f is None }})  
    