<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Show 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Returns scheduled shows optionally filtered by {start} and/or {end} datetimes
     * 
     * **Terminology**: Spinitron defines a *show* as a radio program. A show can have one or more *schedules*,
     * each of which may specify either an *occurence* or a *repetition*, which represents a set of occurences.
     * Thus scheduled shows have occurences that, for example, may be displayed in a calendar.
     * 
     * In the response, `items` is an array of objects representing occurences of scheduled shows.
     * 
     * You may optionally filter `items` to a datetime *range* by including in the request {start} and/or {end}
     * parameters, both of which must be no more than one hour in the past. An occurence starting at {end} is
     * included in the reponse.
     * 
     * `itmes` can include occurences that begin *or* end within the filter range. A show that goes on air before
     * {start} appears in `items` if it ends *after* but not *at* {start}. An occurence starting at or before {end}
     * is included.
     * 
     * If the request omits the {start} parameter, the server sets its value to the current time so that the filter
     * range's start is always defined. If the request specifies {end} then the requested range is *bounded*,
     * otherwise it is *unbounded*.
     * 
     * For a bounded request, `items` includes *every* occurence of all shows occuring in the range. The only
     * difference between objects in `items` representing a given show will be the `start` field value.
     * 
     * For an unbounded request, `items` includes *only one* occurence per show, specifically, the
     * next occurrence after {start} of all shows occuring after {start}.
     * 
     * Use an unbounded request to get a straight list all shows. Use a bounded request to get a calendar/agenda
     * of shows expanded into occurrences by thir shedules and repetitions.
     * 
     * Objects in `items` are ordered first by `datetime` and then by `id`.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetShowsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetShowsResponse
     */
	public function getShows(
        \OpenAPI\OpenAPI\Models\Operations\GetShowsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetShowsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/shows');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetShowsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetShowsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getShows200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetShows200ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a Show by id
     * 
     * The response object represents the next occurence of the show specified by {id}.
     * 
     * Status 404 is returned if a show with {id} does not exist or if it does but all its scheduled occurences elapsed in the past.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetShowsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetShowsIdResponse
     */
	public function getShowsId(
        \OpenAPI\OpenAPI\Models\Operations\GetShowsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetShowsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/shows/{id}', \OpenAPI\OpenAPI\Models\Operations\GetShowsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetShowsIdRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetShowsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->show = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Show', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
}