// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListEventSourcesXAmzTargetEnum
type ListEventSourcesXAmzTargetEnum string

const (
	ListEventSourcesXAmzTargetEnumAwsEventsListEventSources ListEventSourcesXAmzTargetEnum = "AWSEvents.ListEventSources"
)

func (e ListEventSourcesXAmzTargetEnum) ToPointer() *ListEventSourcesXAmzTargetEnum {
	return &e
}

func (e *ListEventSourcesXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWSEvents.ListEventSources":
		*e = ListEventSourcesXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListEventSourcesXAmzTargetEnum: %v", v)
	}
}

type ListEventSourcesRequest struct {
	ListEventSourcesRequest shared.ListEventSourcesRequest `request:"mediaType=application/json"`
	XAmzAlgorithm           *string                        `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256       *string                        `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential          *string                        `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                *string                        `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken       *string                        `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature           *string                        `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders       *string                        `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget              ListEventSourcesXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListEventSourcesResponse struct {
	ContentType string
	// InternalException
	InternalException interface{}
	// Success
	ListEventSourcesResponse *shared.ListEventSourcesResponse
	// OperationDisabledException
	OperationDisabledException interface{}
	StatusCode                 int
	RawResponse                *http.Response
}
