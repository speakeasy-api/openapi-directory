// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ActionCategoryEnum string

const (
	ActionCategoryEnumDisasterRecovery       ActionCategoryEnum = "DISASTER_RECOVERY"
	ActionCategoryEnumOperatingSystem        ActionCategoryEnum = "OPERATING_SYSTEM"
	ActionCategoryEnumLicenseAndSubscription ActionCategoryEnum = "LICENSE_AND_SUBSCRIPTION"
	ActionCategoryEnumValidation             ActionCategoryEnum = "VALIDATION"
	ActionCategoryEnumObservability          ActionCategoryEnum = "OBSERVABILITY"
	ActionCategoryEnumSecurity               ActionCategoryEnum = "SECURITY"
	ActionCategoryEnumNetworking             ActionCategoryEnum = "NETWORKING"
	ActionCategoryEnumConfiguration          ActionCategoryEnum = "CONFIGURATION"
	ActionCategoryEnumBackup                 ActionCategoryEnum = "BACKUP"
	ActionCategoryEnumOther                  ActionCategoryEnum = "OTHER"
)

func (e ActionCategoryEnum) ToPointer() *ActionCategoryEnum {
	return &e
}

func (e *ActionCategoryEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DISASTER_RECOVERY":
		fallthrough
	case "OPERATING_SYSTEM":
		fallthrough
	case "LICENSE_AND_SUBSCRIPTION":
		fallthrough
	case "VALIDATION":
		fallthrough
	case "OBSERVABILITY":
		fallthrough
	case "SECURITY":
		fallthrough
	case "NETWORKING":
		fallthrough
	case "CONFIGURATION":
		fallthrough
	case "BACKUP":
		fallthrough
	case "OTHER":
		*e = ActionCategoryEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActionCategoryEnum: %v", v)
	}
}
