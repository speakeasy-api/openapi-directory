"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import size as shared_size
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ObaIcon:
    r"""Online Behavioral Advertiser icon."""
    
    icon_click_through_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iconClickThroughUrl'), 'exclude': lambda f: f is None }})
    r"""URL to redirect to when an OBA icon is clicked."""  
    icon_click_tracking_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iconClickTrackingUrl'), 'exclude': lambda f: f is None }})
    r"""URL to track click when an OBA icon is clicked."""  
    icon_view_tracking_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iconViewTrackingUrl'), 'exclude': lambda f: f is None }})
    r"""URL to track view when an OBA icon is clicked."""  
    program: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('program'), 'exclude': lambda f: f is None }})
    r"""Identifies the industry initiative that the icon supports. For example, AdChoices."""  
    resource_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceUrl'), 'exclude': lambda f: f is None }})
    r"""OBA icon resource URL. Campaign Manager only supports image and JavaScript icons. Learn more"""  
    size: Optional[shared_size.Size] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size'), 'exclude': lambda f: f is None }})
    r"""Represents the dimensions of ads, placements, creatives, or creative assets."""  
    x_position: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('xPosition'), 'exclude': lambda f: f is None }})
    r"""OBA icon x coordinate position. Accepted values are left or right."""  
    y_position: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('yPosition'), 'exclude': lambda f: f is None }})
    r"""OBA icon y coordinate position. Accepted values are top or bottom."""  
    