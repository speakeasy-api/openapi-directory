<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Settings 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a datasource. **Note:** This API requires an admin account to execute.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsDatasourcesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsDatasourcesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsDatasourcesCreateResponse
     */
	public function cloudsearchSettingsDatasourcesCreate(
        \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsDatasourcesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsDatasourcesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsDatasourcesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/settings/datasources');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "dataSource", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsDatasourcesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsDatasourcesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists datasources. **Note:** This API requires an admin account to execute.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsDatasourcesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsDatasourcesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsDatasourcesListResponse
     */
	public function cloudsearchSettingsDatasourcesList(
        \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsDatasourcesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsDatasourcesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsDatasourcesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/settings/datasources');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsDatasourcesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsDatasourcesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDataSourceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListDataSourceResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get customer settings. **Note:** This API requires an admin account to execute.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsGetCustomerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsGetCustomerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsGetCustomerResponse
     */
	public function cloudsearchSettingsGetCustomer(
        \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsGetCustomerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsGetCustomerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsGetCustomerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/settings/customer');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsGetCustomerRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsGetCustomerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customerSettings = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomerSettings', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a search application. **Note:** This API requires an admin account to execute.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsCreateResponse
     */
	public function cloudsearchSettingsSearchapplicationsCreate(
        \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/settings/searchapplications');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "searchApplicationInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a search application. **Note:** This API requires an admin account to execute.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsDeleteResponse
     */
	public function cloudsearchSettingsSearchapplicationsDelete(
        \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/settings/{name}', \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the specified search application. **Note:** This API requires an admin account to execute.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsGetResponse
     */
	public function cloudsearchSettingsSearchapplicationsGet(
        \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/settings/{name}', \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->searchApplication = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SearchApplication', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all search applications. **Note:** This API requires an admin account to execute.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsListResponse
     */
	public function cloudsearchSettingsSearchapplicationsList(
        \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/settings/searchapplications');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSearchApplicationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListSearchApplicationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a search application. **Note:** This API requires an admin account to execute.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsPatchResponse
     */
	public function cloudsearchSettingsSearchapplicationsPatch(
        \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/settings/{name}', \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "searchApplicationInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Resets a search application to default settings. This will return an empty response. **Note:** This API requires an admin account to execute.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsResetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsResetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsResetResponse
     */
	public function cloudsearchSettingsSearchapplicationsReset(
        \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsResetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsResetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsResetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/settings/{name}:reset', \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsResetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "resetSearchApplicationRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsResetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsResetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a search application. **Note:** This API requires an admin account to execute.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsUpdateResponse
     */
	public function cloudsearchSettingsSearchapplicationsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/settings/{name}', \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "searchApplicationInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsSearchapplicationsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update customer settings. **Note:** This API requires an admin account to execute.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsUpdateCustomerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsUpdateCustomerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsUpdateCustomerResponse
     */
	public function cloudsearchSettingsUpdateCustomer(
        \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsUpdateCustomerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsUpdateCustomerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsUpdateCustomerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/settings/customer');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "customerSettings", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsUpdateCustomerRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudsearchSettingsUpdateCustomerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}