<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class ActionsListWorkflowRunsRequest
{
    /**
     * Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
     * 
     * @var ?string $actor
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=actor')]
    public ?string $actor = null;
    
    /**
     * Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
     * 
     * @var ?string $branch
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=branch')]
    public ?string $branch = null;
    
    /**
     * Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/github-ae@latest/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
     * 
     * @var ?\DateTime $created
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=created,dateTimeFormat=Y-m-d\TH:i:s.up')]
    public ?\DateTime $created = null;
    
    /**
     * Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/github-ae@latest/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)."
     * 
     * @var ?string $event
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=event')]
    public ?string $event = null;
    
    /**
     * If `true` pull requests are omitted from the response (empty array).
     * 
     * @var ?bool $excludePullRequests
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=exclude_pull_requests')]
    public ?bool $excludePullRequests = null;
    
    /**
     * The account owner of the repository. The name is not case sensitive.
     * 
     * @var string $owner
     */
	#[SpeakeasyMetadata('pathParam:style=simple,explode=false,name=owner')]
    public string $owner;
    
    /**
     * Page number of the results to fetch.
     * 
     * @var ?int $page
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=page')]
    public ?int $page = null;
    
    /**
     * The number of results per page (max 100).
     * 
     * @var ?int $perPage
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=per_page')]
    public ?int $perPage = null;
    
    /**
     * The name of the repository. The name is not case sensitive.
     * 
     * @var string $repo
     */
	#[SpeakeasyMetadata('pathParam:style=simple,explode=false,name=repo')]
    public string $repo;
    
    /**
     * Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\WorkflowRunStatusEnum $status
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=status')]
    public ?\OpenAPI\OpenAPI\Models\Shared\WorkflowRunStatusEnum $status = null;
    
    /**
     * The ID of the workflow. You can also pass the workflow file name as a string.
     * 
     * @var mixed $workflowId
     */
	#[SpeakeasyMetadata('pathParam:style=simple,explode=false,name=workflow_id')]
    public mixed $workflowId;
    
	public function __construct()
	{
		$this->actor = null;
		$this->branch = null;
		$this->created = null;
		$this->event = null;
		$this->excludePullRequests = null;
		$this->owner = "";
		$this->page = null;
		$this->perPage = null;
		$this->repo = "";
		$this->status = null;
		$this->workflowId = null;
	}
}
