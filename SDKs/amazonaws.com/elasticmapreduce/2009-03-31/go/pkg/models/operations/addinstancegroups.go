// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// AddInstanceGroupsXAmzTargetEnum
type AddInstanceGroupsXAmzTargetEnum string

const (
	AddInstanceGroupsXAmzTargetEnumElasticMapReduceAddInstanceGroups AddInstanceGroupsXAmzTargetEnum = "ElasticMapReduce.AddInstanceGroups"
)

func (e AddInstanceGroupsXAmzTargetEnum) ToPointer() *AddInstanceGroupsXAmzTargetEnum {
	return &e
}

func (e *AddInstanceGroupsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ElasticMapReduce.AddInstanceGroups":
		*e = AddInstanceGroupsXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AddInstanceGroupsXAmzTargetEnum: %v", v)
	}
}

type AddInstanceGroupsRequest struct {
	AddInstanceGroupsInput shared.AddInstanceGroupsInput   `request:"mediaType=application/json"`
	XAmzAlgorithm          *string                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256      *string                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential         *string                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate               *string                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken      *string                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature          *string                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders      *string                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget             AddInstanceGroupsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type AddInstanceGroupsResponse struct {
	// Success
	AddInstanceGroupsOutput *shared.AddInstanceGroupsOutput
	ContentType             string
	// InternalServerError
	InternalServerError interface{}
	StatusCode          int
	RawResponse         *http.Response
}
