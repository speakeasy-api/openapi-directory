// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ProjectsListForRepoStateEnum - Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.
type ProjectsListForRepoStateEnum string

const (
	ProjectsListForRepoStateEnumOpen   ProjectsListForRepoStateEnum = "open"
	ProjectsListForRepoStateEnumClosed ProjectsListForRepoStateEnum = "closed"
	ProjectsListForRepoStateEnumAll    ProjectsListForRepoStateEnum = "all"
)

func (e *ProjectsListForRepoStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "open":
		fallthrough
	case "closed":
		fallthrough
	case "all":
		*e = ProjectsListForRepoStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ProjectsListForRepoStateEnum: %s", s)
	}
}

type ProjectsListForRepoRequest struct {
	Owner string `pathParam:"style=simple,explode=false,name=owner"`
	// Page number of the results to fetch.
	Page *int64 `queryParam:"style=form,explode=true,name=page"`
	// Results per page (max 100)
	PerPage *int64 `queryParam:"style=form,explode=true,name=per_page"`
	Repo    string `pathParam:"style=simple,explode=false,name=repo"`
	// Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.
	State *ProjectsListForRepoStateEnum `queryParam:"style=form,explode=true,name=state"`
}

type ProjectsListForRepoResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Requires authentication
	BasicError *shared.BasicError
	// Response
	Projects []shared.Project
	// Validation failed
	ValidationErrorSimple *shared.ValidationErrorSimple
}
