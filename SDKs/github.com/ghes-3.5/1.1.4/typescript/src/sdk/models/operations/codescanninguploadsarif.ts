/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform } from "class-transformer";

export class CodeScanningUploadSarifRequestBody extends SpeakeasyBase {
  /**
   * The base directory used in the analysis, as it appears in the SARIF file.
   *
   * @remarks
   * This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "checkout_uri" })
  checkoutUri?: string;

  /**
   * The SHA of the commit to which the analysis you are uploading relates.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "commit_sha" })
  commitSha: string;

  /**
   * The full Git reference, formatted as `refs/heads/<branch name>`,
   *
   * @remarks
   * `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ref" })
  ref: string;

  /**
   * A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see "[SARIF support for code scanning](https://docs.github.com/enterprise-server@3.5/code-security/secure-coding/sarif-support-for-code-scanning)."
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sarif" })
  sarif: string;

  /**
   * The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "started_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startedAt?: Date;

  /**
   * The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to "API". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tool_name" })
  toolName?: string;
}

export class CodeScanningUploadSarifRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CodeScanningUploadSarifRequestBody;

  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner",
  })
  owner: string;

  /**
   * The name of the repository. The name is not case sensitive.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=repo",
  })
  repo: string;
}

/**
 * Service unavailable
 */
export class CodeScanningUploadSarif503ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "documentation_url" })
  documentationUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message?: string;
}

export class CodeScanningUploadSarifResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Response if the repository is archived or if GitHub Advanced Security is not enabled for this repository
   */
  @SpeakeasyMetadata()
  basicError?: shared.BasicError;

  /**
   * Response
   */
  @SpeakeasyMetadata()
  codeScanningSarifsReceipt?: shared.CodeScanningSarifsReceipt;

  /**
   * Service unavailable
   */
  @SpeakeasyMetadata()
  codeScanningUploadSarif503ApplicationJSONObject?: CodeScanningUploadSarif503ApplicationJSON;
}
