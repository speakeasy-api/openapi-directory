// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type FmcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type FmcerRequestBodyCertificateParameters struct {
	// Certificate Number
	CertificateNumber string `json:"CertificateNumber"`
}

// FmcerRequestBodyFormatEnum - The format of the certificate in response.
type FmcerRequestBodyFormatEnum string

const (
	FmcerRequestBodyFormatEnumPdf FmcerRequestBodyFormatEnum = "pdf"
)

func (e *FmcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = FmcerRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FmcerRequestBodyFormatEnum: %s", s)
	}
}

// FmcerRequestBody - Request format
type FmcerRequestBody struct {
	CertificateParameters *FmcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format FmcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Fmcer504ApplicationJSONErrorEnum string

const (
	Fmcer504ApplicationJSONErrorEnumGatewayTimeout Fmcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Fmcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Fmcer504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Fmcer504ApplicationJSONErrorEnum: %s", s)
	}
}

type Fmcer504ApplicationJSONErrorDescriptionEnum string

const (
	Fmcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Fmcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Fmcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Fmcer504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Fmcer504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Fmcer504ApplicationJSON - Gateway timeout
type Fmcer504ApplicationJSON struct {
	Error            *Fmcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Fmcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Fmcer503ApplicationJSONErrorEnum string

const (
	Fmcer503ApplicationJSONErrorEnumServiceUnavailable Fmcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Fmcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Fmcer503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Fmcer503ApplicationJSONErrorEnum: %s", s)
	}
}

type Fmcer503ApplicationJSONErrorDescriptionEnum string

const (
	Fmcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Fmcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Fmcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Fmcer503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Fmcer503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Fmcer503ApplicationJSON - Service unavailable
type Fmcer503ApplicationJSON struct {
	Error            *Fmcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Fmcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Fmcer502ApplicationJSONErrorEnum string

const (
	Fmcer502ApplicationJSONErrorEnumBadGatewy Fmcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Fmcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Fmcer502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Fmcer502ApplicationJSONErrorEnum: %s", s)
	}
}

type Fmcer502ApplicationJSONErrorDescriptionEnum string

const (
	Fmcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Fmcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Fmcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Fmcer502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Fmcer502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Fmcer502ApplicationJSON - Bad gateway
type Fmcer502ApplicationJSON struct {
	Error            *Fmcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Fmcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Fmcer500ApplicationJSONErrorEnum string

const (
	Fmcer500ApplicationJSONErrorEnumInternalServerError Fmcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Fmcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Fmcer500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Fmcer500ApplicationJSONErrorEnum: %s", s)
	}
}

type Fmcer500ApplicationJSONErrorDescriptionEnum string

const (
	Fmcer500ApplicationJSONErrorDescriptionEnumInternalServerError Fmcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Fmcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Fmcer500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Fmcer500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Fmcer500ApplicationJSON - Internal server error
type Fmcer500ApplicationJSON struct {
	Error            *Fmcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Fmcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Fmcer404ApplicationJSONErrorEnum string

const (
	Fmcer404ApplicationJSONErrorEnumRecordNotFound Fmcer404ApplicationJSONErrorEnum = "record_not_found"
	Fmcer404ApplicationJSONErrorEnumURLNotFound    Fmcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Fmcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Fmcer404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Fmcer404ApplicationJSONErrorEnum: %s", s)
	}
}

type Fmcer404ApplicationJSONErrorDescriptionEnum string

const (
	Fmcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Fmcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Fmcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Fmcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Fmcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Fmcer404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Fmcer404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Fmcer404ApplicationJSON - No record found
type Fmcer404ApplicationJSON struct {
	Error            *Fmcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Fmcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Fmcer401ApplicationJSONErrorEnum string

const (
	Fmcer401ApplicationJSONErrorEnumInvalidAuthentication Fmcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Fmcer401ApplicationJSONErrorEnumInvalidAuthorization  Fmcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Fmcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Fmcer401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Fmcer401ApplicationJSONErrorEnum: %s", s)
	}
}

type Fmcer401ApplicationJSONErrorDescriptionEnum string

const (
	Fmcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Fmcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Fmcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Fmcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Fmcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Fmcer401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Fmcer401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Fmcer401ApplicationJSON - Unauthorized access
type Fmcer401ApplicationJSON struct {
	Error            *Fmcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Fmcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Fmcer400ApplicationJSONErrorEnum string

const (
	Fmcer400ApplicationJSONErrorEnumMissingParameter Fmcer400ApplicationJSONErrorEnum = "missing_parameter"
	Fmcer400ApplicationJSONErrorEnumInvalidParameter Fmcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Fmcer400ApplicationJSONErrorEnumInvalidFormat    Fmcer400ApplicationJSONErrorEnum = "invalid_format"
	Fmcer400ApplicationJSONErrorEnumInvalidTxnid     Fmcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Fmcer400ApplicationJSONErrorEnumInvalidConsentid Fmcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Fmcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Fmcer400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Fmcer400ApplicationJSONErrorEnum: %s", s)
	}
}

type Fmcer400ApplicationJSONErrorDescriptionEnum string

const (
	Fmcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Fmcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Fmcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Fmcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Fmcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Fmcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Fmcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Fmcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Fmcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Fmcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Fmcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Fmcer400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Fmcer400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Fmcer400ApplicationJSON - Bad request
type Fmcer400ApplicationJSON struct {
	Error            *Fmcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Fmcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type FmcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Fmcer400ApplicationJSONObject *Fmcer400ApplicationJSON
	// Unauthorized access
	Fmcer401ApplicationJSONObject *Fmcer401ApplicationJSON
	// No record found
	Fmcer404ApplicationJSONObject *Fmcer404ApplicationJSON
	// Internal server error
	Fmcer500ApplicationJSONObject *Fmcer500ApplicationJSON
	// Bad gateway
	Fmcer502ApplicationJSONObject *Fmcer502ApplicationJSON
	// Service unavailable
	Fmcer503ApplicationJSONObject *Fmcer503ApplicationJSON
	// Gateway timeout
	Fmcer504ApplicationJSONObject *Fmcer504ApplicationJSON
}
