// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type AppInvitationsUpdatePermissionsSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type AppInvitationsUpdatePermissionsRequestBodyPermissionsEnum string

const (
	AppInvitationsUpdatePermissionsRequestBodyPermissionsEnumManager   AppInvitationsUpdatePermissionsRequestBodyPermissionsEnum = "manager"
	AppInvitationsUpdatePermissionsRequestBodyPermissionsEnumDeveloper AppInvitationsUpdatePermissionsRequestBodyPermissionsEnum = "developer"
	AppInvitationsUpdatePermissionsRequestBodyPermissionsEnumViewer    AppInvitationsUpdatePermissionsRequestBodyPermissionsEnum = "viewer"
)

func (e AppInvitationsUpdatePermissionsRequestBodyPermissionsEnum) ToPointer() *AppInvitationsUpdatePermissionsRequestBodyPermissionsEnum {
	return &e
}

func (e *AppInvitationsUpdatePermissionsRequestBodyPermissionsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "manager":
		fallthrough
	case "developer":
		fallthrough
	case "viewer":
		*e = AppInvitationsUpdatePermissionsRequestBodyPermissionsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppInvitationsUpdatePermissionsRequestBodyPermissionsEnum: %v", v)
	}
}

// AppInvitationsUpdatePermissionsRequestBody - The value to update the user permission in the invite.
type AppInvitationsUpdatePermissionsRequestBody struct {
	// The permissions the user has for the app in the invitation
	Permissions []AppInvitationsUpdatePermissionsRequestBodyPermissionsEnum `json:"permissions"`
}

type AppInvitationsUpdatePermissionsRequest struct {
	// The value to update the user permission in the invite.
	RequestBody AppInvitationsUpdatePermissionsRequestBody `request:"mediaType=application/json"`
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// The email of the user to invite
	UserEmail string `pathParam:"style=simple,explode=false,name=user_email"`
}

type AppInvitationsUpdatePermissionsDefaultApplicationJSONErrorCodeEnum string

const (
	AppInvitationsUpdatePermissionsDefaultApplicationJSONErrorCodeEnumBadRequest          AppInvitationsUpdatePermissionsDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	AppInvitationsUpdatePermissionsDefaultApplicationJSONErrorCodeEnumConflict            AppInvitationsUpdatePermissionsDefaultApplicationJSONErrorCodeEnum = "Conflict"
	AppInvitationsUpdatePermissionsDefaultApplicationJSONErrorCodeEnumNotAcceptable       AppInvitationsUpdatePermissionsDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	AppInvitationsUpdatePermissionsDefaultApplicationJSONErrorCodeEnumNotFound            AppInvitationsUpdatePermissionsDefaultApplicationJSONErrorCodeEnum = "NotFound"
	AppInvitationsUpdatePermissionsDefaultApplicationJSONErrorCodeEnumInternalServerError AppInvitationsUpdatePermissionsDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	AppInvitationsUpdatePermissionsDefaultApplicationJSONErrorCodeEnumUnauthorized        AppInvitationsUpdatePermissionsDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	AppInvitationsUpdatePermissionsDefaultApplicationJSONErrorCodeEnumTooManyRequests     AppInvitationsUpdatePermissionsDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e AppInvitationsUpdatePermissionsDefaultApplicationJSONErrorCodeEnum) ToPointer() *AppInvitationsUpdatePermissionsDefaultApplicationJSONErrorCodeEnum {
	return &e
}

func (e *AppInvitationsUpdatePermissionsDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = AppInvitationsUpdatePermissionsDefaultApplicationJSONErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppInvitationsUpdatePermissionsDefaultApplicationJSONErrorCodeEnum: %v", v)
	}
}

type AppInvitationsUpdatePermissionsDefaultApplicationJSONError struct {
	Code    AppInvitationsUpdatePermissionsDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                                             `json:"message"`
}

// AppInvitationsUpdatePermissionsDefaultApplicationJSON - Error
type AppInvitationsUpdatePermissionsDefaultApplicationJSON struct {
	Error AppInvitationsUpdatePermissionsDefaultApplicationJSONError `json:"error"`
}

type AppInvitationsUpdatePermissionsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Error
	AppInvitationsUpdatePermissionsDefaultApplicationJSONObject *AppInvitationsUpdatePermissionsDefaultApplicationJSON
}
