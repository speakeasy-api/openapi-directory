// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CancelScheduledHangupResponseMessageEnum - Response message
type CancelScheduledHangupResponseMessageEnum string

const (
	CancelScheduledHangupResponseMessageEnumScheduledHangupCancelationExecuted         CancelScheduledHangupResponseMessageEnum = "Scheduled Hangup Cancelation Executed"
	CancelScheduledHangupResponseMessageEnumSchedHangupIDParameterMustBePresent        CancelScheduledHangupResponseMessageEnum = "SchedHangupId Parameter must be present"
	CancelScheduledHangupResponseMessageEnumScheduledHangupCancelationFailedIDNotFound CancelScheduledHangupResponseMessageEnum = "Scheduled Hangup Cancelation Failed -- ID not found"
	CancelScheduledHangupResponseMessageEnumScheduledHangupCancelationFailed           CancelScheduledHangupResponseMessageEnum = "Scheduled Hangup Cancelation Failed"
)

func (e CancelScheduledHangupResponseMessageEnum) ToPointer() *CancelScheduledHangupResponseMessageEnum {
	return &e
}

func (e *CancelScheduledHangupResponseMessageEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Scheduled Hangup Cancelation Executed":
		fallthrough
	case "SchedHangupId Parameter must be present":
		fallthrough
	case "Scheduled Hangup Cancelation Failed -- ID not found":
		fallthrough
	case "Scheduled Hangup Cancelation Failed":
		*e = CancelScheduledHangupResponseMessageEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelScheduledHangupResponseMessageEnum: %v", v)
	}
}

// CancelScheduledHangupResponse - Response
type CancelScheduledHangupResponse struct {
	// Response message
	Message CancelScheduledHangupResponseMessageEnum `json:"Message"`
	// Whether the request was successful or not
	Success bool `json:"Success"`
}
