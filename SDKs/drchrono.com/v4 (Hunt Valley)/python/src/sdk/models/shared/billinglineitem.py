"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class BillingLineItemBillingStatusEnum(str, Enum):
    r"""One of `\\"\\"`, `\\"Incomplete Information\\"`, `\\"In Process Emdeon\\"`, `\\"In Process iHCFA\\"`, `\\"In Process Gateway\\"`, `\\"Rejected Emdeon\\"`, `\\"Rejected iHCFA\\"`, `\\"Rejected Gateway\\"`, `\\"In Process Payer\\"`, `\\"Payer Acknowledged\\"`, `\\"Rejected Payer\\"`, `\\"Paid in Full\\"`,  `\\"Partially Paid\\"`,  `\\"Coordination of Benefits\\"`,  `\\"ERA Received\\"`,  `\\"ERA Denied\\"`"""
    UNKNOWN = ''
    INCOMPLETE_INFORMATION = 'Incomplete Information'
    IN_PROCESS_EMDEON = 'In Process Emdeon'
    IN_PROCESS_I_HCFA = 'In Process iHCFA'
    IN_PROCESS_GATEWAY = 'In Process Gateway'
    IN_PROCESS_JOPARI = 'In Process Jopari'
    IN_PROCESS_WAYSTAR = 'In Process Waystar'
    REJECTED_EMDEON = 'Rejected Emdeon'
    REJECTED_I_HCFA = 'Rejected iHCFA'
    REJECTED_GATEWAY = 'Rejected Gateway'
    REJECTED_JOPARI = 'Rejected Jopari'
    REJECTED_WAYSTAR = 'Rejected Waystar'
    IN_PROCESS_PAYER = 'In Process Payer'
    PAYER_ACKNOWLEDGED = 'Payer Acknowledged'
    REJECTED_PAYER = 'Rejected Payer'
    PAID_IN_FULL = 'Paid in Full'
    PARTIALLY_PAID = 'Partially Paid'
    COORDINATION_OF_BENEFITS = 'Coordination of Benefits'
    ERA_RECEIVED = 'ERA Received'
    ERA_DENIED = 'ERA Denied'

class BillingLineItemProcedureTypeEnum(str, Enum):
    r"""One of `\\"CPT(C)\\"`, `\\"HCPCS(H)\\"`, `\\"Custom(U)\\"`, use 1 character identifier when using `POST`"""
    C = 'C'
    H = 'H'
    U = 'U'
    S = 'S'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BillingLineItem:
    r"""Created"""
    
    appointment: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appointment') }})
    r"""Appointment ID"""  
    code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    diagnosis_pointers: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('diagnosis_pointers') }})
    r"""List of 4 diagnosis pointers"""  
    procedure_type: BillingLineItemProcedureTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('procedure_type') }})
    r"""One of `\\"CPT(C)\\"`, `\\"HCPCS(H)\\"`, `\\"Custom(U)\\"`, use 1 character identifier when using `POST`"""  
    adjustment: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adjustment'), 'exclude': lambda f: f is None }})
    r"""Adjustment from total billed"""  
    allowed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowed'), 'exclude': lambda f: f is None }})
    r"""Amount allowed by insurance"""  
    balance_ins: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('balance_ins'), 'exclude': lambda f: f is None }})
    r"""Insurance balance"""  
    balance_pt: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('balance_pt'), 'exclude': lambda f: f is None }})
    r"""Patient balance"""  
    balance_total: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('balance_total'), 'exclude': lambda f: f is None }})
    r"""Total balance"""  
    billed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billed'), 'exclude': lambda f: f is None }})
    r"""Total billed"""  
    billing_status: Optional[BillingLineItemBillingStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billing_status'), 'exclude': lambda f: f is None }})
    r"""One of `\\"\\"`, `\\"Incomplete Information\\"`, `\\"In Process Emdeon\\"`, `\\"In Process iHCFA\\"`, `\\"In Process Gateway\\"`, `\\"Rejected Emdeon\\"`, `\\"Rejected iHCFA\\"`, `\\"Rejected Gateway\\"`, `\\"In Process Payer\\"`, `\\"Payer Acknowledged\\"`, `\\"Rejected Payer\\"`, `\\"Paid in Full\\"`,  `\\"Partially Paid\\"`,  `\\"Coordination of Benefits\\"`,  `\\"ERA Received\\"`,  `\\"ERA Denied\\"`"""  
    denied_flag: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('denied_flag'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    doctor: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('doctor'), 'exclude': lambda f: f is None }})
    r"""Doctor ID"""  
    expected_reimbursement: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expected_reimbursement'), 'exclude': lambda f: f is None }})  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    ins_total: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ins_total'), 'exclude': lambda f: f is None }})
    r"""Total amount paid by patient's insurers"""  
    ins1_paid: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ins1_paid'), 'exclude': lambda f: f is None }})
    r"""Amount paid by patient's primary insurer"""  
    ins2_paid: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ins2_paid'), 'exclude': lambda f: f is None }})
    r"""Amount paid by patient's secondary insurer"""  
    ins3_paid: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ins3_paid'), 'exclude': lambda f: f is None }})
    r"""Amount paid by patinet's tertiary insurer"""  
    insurance_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insurance_status'), 'exclude': lambda f: f is None }})
    r"""This corresponds to the \\"Status/Adj Type\\" from billing detail screen"""  
    modifiers: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modifiers'), 'exclude': lambda f: f is None }})
    r"""List of 4 code modifiers"""  
    paid_total: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paid_total'), 'exclude': lambda f: f is None }})
    r"""Total amount paid"""  
    patient: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('patient'), 'exclude': lambda f: f is None }})
    r"""Patient ID"""  
    posted_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('posted_date'), 'exclude': lambda f: f is None }})  
    price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})
    r"""Price of procedure"""  
    pt_paid: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pt_paid'), 'exclude': lambda f: f is None }})
    r"""Amount paid by patient"""  
    quantity: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity'), 'exclude': lambda f: f is None }})  
    service_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('service_date'), 'exclude': lambda f: f is None }})
    r"""Date on which the service was rendered"""  
    units: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('units'), 'exclude': lambda f: f is None }})
    r"""Default to \\"UN\\" """  
    updated_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'exclude': lambda f: f is None }})  
    