// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// InvoiceCreateAPIModelStatusEnum - Indicate the status of the invoice (paid/unpaid/overdue)
type InvoiceCreateAPIModelStatusEnum string

const (
	InvoiceCreateAPIModelStatusEnumDraft   InvoiceCreateAPIModelStatusEnum = "Draft"
	InvoiceCreateAPIModelStatusEnumPaid    InvoiceCreateAPIModelStatusEnum = "Paid"
	InvoiceCreateAPIModelStatusEnumUnpaid  InvoiceCreateAPIModelStatusEnum = "Unpaid"
	InvoiceCreateAPIModelStatusEnumOverdue InvoiceCreateAPIModelStatusEnum = "Overdue"
	InvoiceCreateAPIModelStatusEnumVoid    InvoiceCreateAPIModelStatusEnum = "Void"
)

func (e InvoiceCreateAPIModelStatusEnum) ToPointer() *InvoiceCreateAPIModelStatusEnum {
	return &e
}

func (e *InvoiceCreateAPIModelStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Draft":
		fallthrough
	case "Paid":
		fallthrough
	case "Unpaid":
		fallthrough
	case "Overdue":
		fallthrough
	case "Void":
		*e = InvoiceCreateAPIModelStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InvoiceCreateAPIModelStatusEnum: %v", v)
	}
}

type InvoiceCreateAPIModel struct {
	// List of invoice attachments
	Attachments []InvoiceCreateAttachmentAPIModel `json:"Attachments,omitempty" form:"name=Attachments,json"`
	// The client to whom this invoice is assigned
	ClientID *int `json:"ClientId,omitempty" form:"name=ClientId"`
	// Indicate from which invoice this invoice has been cloned from
	ClonedFromID *int `json:"ClonedFromId,omitempty" form:"name=ClonedFromId"`
	// Id of the currency for the invoice amounts
	CurrencyID *int `json:"CurrencyId,omitempty" form:"name=CurrencyId"`
	// Indicates when the invoice will be proclamed as due
	Duedate *time.Time `json:"Duedate,omitempty" form:"name=Duedate"`
	// Hold the id of the invoice category
	InvoiceCategoryID *int `json:"InvoiceCategoryId,omitempty" form:"name=InvoiceCategoryId"`
	// Indicates when the invoice was issued
	IssuedOn *time.Time `json:"IssuedOn,omitempty" form:"name=IssuedOn"`
	// List of invoice items
	Items []InvoiceCreateItemAPIModel `json:"Items,omitempty" form:"name=Items,json"`
	// Internal note regarding the invoice
	Notes *string `json:"Notes,omitempty" form:"name=Notes"`
	// Unique invoice number
	Number *string `json:"Number,omitempty" form:"name=Number"`
	// List of enabled payment gateways for this invoice
	PaymentGateways []InvoiceGatewayAPIModel `json:"PaymentGateways,omitempty" form:"name=PaymentGateways,json"`
	// Unique number generated by the buyer
	PoNumber *string `json:"PoNumber,omitempty" form:"name=PoNumber"`
	// Definition of invoice recurring profile
	RecurringProfile *InvoiceRecurringAPIModel `json:"RecurringProfile,omitempty" form:"name=RecurringProfile,json"`
	// Hold the id of the recurring profile
	RecurringProfileID *int `json:"RecurringProfileId,omitempty" form:"name=RecurringProfileId"`
	// Should send email reminders to client?
	ShouldSendReminders *bool `json:"ShouldSendReminders,omitempty" form:"name=ShouldSendReminders"`
	// Indicate the status of the invoice (paid/unpaid/overdue)
	Status *InvoiceCreateAPIModelStatusEnum `json:"Status,omitempty" form:"name=Status"`
	// Terms of agreement
	Terms *string `json:"Terms,omitempty" form:"name=Terms"`
}
