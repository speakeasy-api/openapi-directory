/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.
 */
export class OwnerReference extends SpeakeasyBase {
  /**
   * API version of the referent.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "apiVersion" })
  apiVersion?: string;

  /**
   * If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned. +optional
   */
  @SpeakeasyMetadata()
  @Expose({ name: "blockOwnerDeletion" })
  blockOwnerDeletion?: boolean;

  /**
   * If true, this reference points to the managing controller. +optional
   */
  @SpeakeasyMetadata()
  @Expose({ name: "controller" })
  controller?: boolean;

  /**
   * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/user-guide/identifiers#names
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * UID of the referent. More info: https://kubernetes.io/docs/user-guide/identifiers#uids
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uid" })
  uid?: string;
}
