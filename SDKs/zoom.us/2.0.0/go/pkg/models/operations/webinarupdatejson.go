// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

type WebinarUpdateJSONSecurity struct {
	OAuth shared.SchemeOAuth `security:"scheme,type=oauth2"`
}

type WebinarUpdateJSONPathParams struct {
	// The webinar ID in "**long**" format(represented as int64 data type in JSON).
	WebinarID int64 `pathParam:"style=simple,explode=false,name=webinarId"`
}

type WebinarUpdateJSONQueryParams struct {
	// Webinar occurrence id. Support change of agenda, start_time, duration, settings: {host_video, panelist_video, hd_video, watermark, auto_recording}
	OccurrenceID *string `queryParam:"style=form,explode=true,name=occurrence_id"`
}

// WebinarUpdateApplicationJSONRecurrenceMonthlyWeekEnum - Use this field **only if you're scheduling a recurring meeting of type** `3` to state the week of the month when the meeting should recur. If you use this field, **you must also use the `monthly_week_day` field to state the day of the week when the meeting should recur.** <br>`-1` - Last week of the month.<br>`1` - First week of the month.<br>`2` - Second week of the month.<br>`3` - Third week of the month.<br>`4` - Fourth week of the month.
type WebinarUpdateApplicationJSONRecurrenceMonthlyWeekEnum string

const (
	WebinarUpdateApplicationJSONRecurrenceMonthlyWeekEnumMinus1 WebinarUpdateApplicationJSONRecurrenceMonthlyWeekEnum = "-1"
	WebinarUpdateApplicationJSONRecurrenceMonthlyWeekEnumOne    WebinarUpdateApplicationJSONRecurrenceMonthlyWeekEnum = "1"
	WebinarUpdateApplicationJSONRecurrenceMonthlyWeekEnumTwo    WebinarUpdateApplicationJSONRecurrenceMonthlyWeekEnum = "2"
	WebinarUpdateApplicationJSONRecurrenceMonthlyWeekEnumThree  WebinarUpdateApplicationJSONRecurrenceMonthlyWeekEnum = "3"
	WebinarUpdateApplicationJSONRecurrenceMonthlyWeekEnumFour   WebinarUpdateApplicationJSONRecurrenceMonthlyWeekEnum = "4"
)

func (e *WebinarUpdateApplicationJSONRecurrenceMonthlyWeekEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "-1":
		fallthrough
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		*e = WebinarUpdateApplicationJSONRecurrenceMonthlyWeekEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarUpdateApplicationJSONRecurrenceMonthlyWeekEnum: %s", s)
	}
}

// WebinarUpdateApplicationJSONRecurrenceMonthlyWeekDayEnum - Use this field **only if you're scheduling a recurring meeting of type** `3` to state a specific day in a week when the monthly meeting should recur. To use this field, you must also use the `monthly_week` field.
//
// <br>`1` - Sunday.<br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` - Thursday.<br>`6` - Friday.<br>`7` - Saturday.
type WebinarUpdateApplicationJSONRecurrenceMonthlyWeekDayEnum string

const (
	WebinarUpdateApplicationJSONRecurrenceMonthlyWeekDayEnumOne   WebinarUpdateApplicationJSONRecurrenceMonthlyWeekDayEnum = "1"
	WebinarUpdateApplicationJSONRecurrenceMonthlyWeekDayEnumTwo   WebinarUpdateApplicationJSONRecurrenceMonthlyWeekDayEnum = "2"
	WebinarUpdateApplicationJSONRecurrenceMonthlyWeekDayEnumThree WebinarUpdateApplicationJSONRecurrenceMonthlyWeekDayEnum = "3"
	WebinarUpdateApplicationJSONRecurrenceMonthlyWeekDayEnumFour  WebinarUpdateApplicationJSONRecurrenceMonthlyWeekDayEnum = "4"
	WebinarUpdateApplicationJSONRecurrenceMonthlyWeekDayEnumFive  WebinarUpdateApplicationJSONRecurrenceMonthlyWeekDayEnum = "5"
	WebinarUpdateApplicationJSONRecurrenceMonthlyWeekDayEnumSix   WebinarUpdateApplicationJSONRecurrenceMonthlyWeekDayEnum = "6"
	WebinarUpdateApplicationJSONRecurrenceMonthlyWeekDayEnumSeven WebinarUpdateApplicationJSONRecurrenceMonthlyWeekDayEnum = "7"
)

func (e *WebinarUpdateApplicationJSONRecurrenceMonthlyWeekDayEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		*e = WebinarUpdateApplicationJSONRecurrenceMonthlyWeekDayEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarUpdateApplicationJSONRecurrenceMonthlyWeekDayEnum: %s", s)
	}
}

// WebinarUpdateApplicationJSONRecurrenceTypeEnum - Recurrence meeting types:<br>`1` - Daily.<br>`2` - Weekly.<br>`3` - Monthly.
type WebinarUpdateApplicationJSONRecurrenceTypeEnum string

const (
	WebinarUpdateApplicationJSONRecurrenceTypeEnumOne   WebinarUpdateApplicationJSONRecurrenceTypeEnum = "1"
	WebinarUpdateApplicationJSONRecurrenceTypeEnumTwo   WebinarUpdateApplicationJSONRecurrenceTypeEnum = "2"
	WebinarUpdateApplicationJSONRecurrenceTypeEnumThree WebinarUpdateApplicationJSONRecurrenceTypeEnum = "3"
)

func (e *WebinarUpdateApplicationJSONRecurrenceTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		*e = WebinarUpdateApplicationJSONRecurrenceTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarUpdateApplicationJSONRecurrenceTypeEnum: %s", s)
	}
}

// WebinarUpdateApplicationJSONRecurrenceWeeklyDaysEnum - This field is required **if you're scheduling a recurring meeting of type** `2` to state which day(s) of the week the meeting should repeat. <br> <br> The value for this field could be a number between `1` to `7` in string format. For instance, if the meeting should recur on Sunday, provide `"1"` as the value of this field.<br><br> **Note:** If you would like the meeting to occur on multiple days of a week, you should provide comma separated values for this field. For instance, if the meeting should recur on Sundays and Tuesdays provide `"1,3"` as the value of this field.
//
//	<br>`1`  - Sunday. <br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` -  Thursday.<br>`6` - Friday.<br>`7` - Saturday.
type WebinarUpdateApplicationJSONRecurrenceWeeklyDaysEnum string

const (
	WebinarUpdateApplicationJSONRecurrenceWeeklyDaysEnumOne   WebinarUpdateApplicationJSONRecurrenceWeeklyDaysEnum = "1"
	WebinarUpdateApplicationJSONRecurrenceWeeklyDaysEnumTwo   WebinarUpdateApplicationJSONRecurrenceWeeklyDaysEnum = "2"
	WebinarUpdateApplicationJSONRecurrenceWeeklyDaysEnumThree WebinarUpdateApplicationJSONRecurrenceWeeklyDaysEnum = "3"
	WebinarUpdateApplicationJSONRecurrenceWeeklyDaysEnumFour  WebinarUpdateApplicationJSONRecurrenceWeeklyDaysEnum = "4"
	WebinarUpdateApplicationJSONRecurrenceWeeklyDaysEnumFive  WebinarUpdateApplicationJSONRecurrenceWeeklyDaysEnum = "5"
	WebinarUpdateApplicationJSONRecurrenceWeeklyDaysEnumSix   WebinarUpdateApplicationJSONRecurrenceWeeklyDaysEnum = "6"
	WebinarUpdateApplicationJSONRecurrenceWeeklyDaysEnumSeven WebinarUpdateApplicationJSONRecurrenceWeeklyDaysEnum = "7"
)

func (e *WebinarUpdateApplicationJSONRecurrenceWeeklyDaysEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		*e = WebinarUpdateApplicationJSONRecurrenceWeeklyDaysEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarUpdateApplicationJSONRecurrenceWeeklyDaysEnum: %s", s)
	}
}

// WebinarUpdateApplicationJSONRecurrence - Recurrence object. Use this object only for a meeting with type `8` i.e., a recurring meeting with fixed time.
type WebinarUpdateApplicationJSONRecurrence struct {
	// Select the final date on which the meeting will recur before it is canceled. Should be in UTC time, such as 2017-11-25T12:00:00Z. (Cannot be used with "end_times".)
	EndDateTime *time.Time `json:"end_date_time,omitempty"`
	// Select how many times the meeting should recur before it is canceled. (Cannot be used with "end_date_time".)
	EndTimes *int64 `json:"end_times,omitempty"`
	// Use this field **only if you're scheduling a recurring meeting of type** `3` to state which day in a month, the meeting should recur. The value range is from 1 to 31.
	//
	// For instance, if you would like the meeting to recur on 23rd of each month, provide `23` as the value of this field and `1` as the value of the `repeat_interval` field. Instead, if you would like the meeting to recur every three months, on 23rd of the month, change the value of the `repeat_interval` field to `3`.
	MonthlyDay *int64 `json:"monthly_day,omitempty"`
	// Use this field **only if you're scheduling a recurring meeting of type** `3` to state the week of the month when the meeting should recur. If you use this field, **you must also use the `monthly_week_day` field to state the day of the week when the meeting should recur.** <br>`-1` - Last week of the month.<br>`1` - First week of the month.<br>`2` - Second week of the month.<br>`3` - Third week of the month.<br>`4` - Fourth week of the month.
	MonthlyWeek *WebinarUpdateApplicationJSONRecurrenceMonthlyWeekEnum `json:"monthly_week,omitempty"`
	// Use this field **only if you're scheduling a recurring meeting of type** `3` to state a specific day in a week when the monthly meeting should recur. To use this field, you must also use the `monthly_week` field.
	//
	// <br>`1` - Sunday.<br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` - Thursday.<br>`6` - Friday.<br>`7` - Saturday.
	MonthlyWeekDay *WebinarUpdateApplicationJSONRecurrenceMonthlyWeekDayEnum `json:"monthly_week_day,omitempty"`
	// Define the interval at which the meeting should recur. For instance, if you would like to schedule a meeting that recurs every two months, you must set the value of this field as `2` and the value of the `type` parameter as `3`.
	//
	// For a daily meeting, the maximum interval you can set is `90` days. For a weekly meeting the maximum interval that you can set is  of `12` weeks. For a monthly meeting, there is a maximum of `3` months.
	//
	//
	RepeatInterval *int64 `json:"repeat_interval,omitempty"`
	// Recurrence meeting types:<br>`1` - Daily.<br>`2` - Weekly.<br>`3` - Monthly.
	Type WebinarUpdateApplicationJSONRecurrenceTypeEnum `json:"type"`
	// This field is required **if you're scheduling a recurring meeting of type** `2` to state which day(s) of the week the meeting should repeat. <br> <br> The value for this field could be a number between `1` to `7` in string format. For instance, if the meeting should recur on Sunday, provide `"1"` as the value of this field.<br><br> **Note:** If you would like the meeting to occur on multiple days of a week, you should provide comma separated values for this field. For instance, if the meeting should recur on Sundays and Tuesdays provide `"1,3"` as the value of this field.
	//
	//  <br>`1`  - Sunday. <br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` -  Thursday.<br>`6` - Friday.<br>`7` - Saturday.
	WeeklyDays *WebinarUpdateApplicationJSONRecurrenceWeeklyDaysEnum `json:"weekly_days,omitempty"`
}

// WebinarUpdateApplicationJSONSettingsApprovalTypeEnum - `0` - Automatically approve.<br>`1` - Manually approve.<br>`2` - No registration required.
type WebinarUpdateApplicationJSONSettingsApprovalTypeEnum string

const (
	WebinarUpdateApplicationJSONSettingsApprovalTypeEnumZero WebinarUpdateApplicationJSONSettingsApprovalTypeEnum = "0"
	WebinarUpdateApplicationJSONSettingsApprovalTypeEnumOne  WebinarUpdateApplicationJSONSettingsApprovalTypeEnum = "1"
	WebinarUpdateApplicationJSONSettingsApprovalTypeEnumTwo  WebinarUpdateApplicationJSONSettingsApprovalTypeEnum = "2"
)

func (e *WebinarUpdateApplicationJSONSettingsApprovalTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "2":
		*e = WebinarUpdateApplicationJSONSettingsApprovalTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarUpdateApplicationJSONSettingsApprovalTypeEnum: %s", s)
	}
}

// WebinarUpdateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum - `0` - No plan.<br>`1` - Send 1 hour before webinar.<br>`2` - Send 1 day before webinar.<br>`3` - Send 1 hour and 1 day before webinar.<br>`4` - Send 1 week before webinar.<br>`5` - Send 1 hour and 1 week before webinar.<br>`6` - Send 1 day and 1 week before webinar.<br>`7` - Send 1 hour, 1 day and 1 week before webinar.
type WebinarUpdateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum string

const (
	WebinarUpdateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumZero  WebinarUpdateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "0"
	WebinarUpdateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumOne   WebinarUpdateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "1"
	WebinarUpdateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumTwo   WebinarUpdateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "2"
	WebinarUpdateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumThree WebinarUpdateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "3"
	WebinarUpdateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumFour  WebinarUpdateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "4"
	WebinarUpdateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumFive  WebinarUpdateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "5"
	WebinarUpdateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumSix   WebinarUpdateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "6"
	WebinarUpdateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnumSeven WebinarUpdateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum = "7"
)

func (e *WebinarUpdateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		*e = WebinarUpdateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarUpdateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum: %s", s)
	}
}

// WebinarUpdateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotification - Send reminder email to attendees and panelists.
type WebinarUpdateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotification struct {
	// * `true`: Send reminder email to attendees and panelists.
	//
	// * `false`: Do not send reminder email to attendees and panelists.
	Enable *bool `json:"enable,omitempty"`
	// `0` - No plan.<br>`1` - Send 1 hour before webinar.<br>`2` - Send 1 day before webinar.<br>`3` - Send 1 hour and 1 day before webinar.<br>`4` - Send 1 week before webinar.<br>`5` - Send 1 hour and 1 week before webinar.<br>`6` - Send 1 day and 1 week before webinar.<br>`7` - Send 1 hour, 1 day and 1 week before webinar.
	Type *WebinarUpdateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotificationTypeEnum `json:"type,omitempty"`
}

// WebinarUpdateApplicationJSONSettingsAudioEnum - Determine how participants can join the audio portion of the webinar.
type WebinarUpdateApplicationJSONSettingsAudioEnum string

const (
	WebinarUpdateApplicationJSONSettingsAudioEnumBoth      WebinarUpdateApplicationJSONSettingsAudioEnum = "both"
	WebinarUpdateApplicationJSONSettingsAudioEnumTelephony WebinarUpdateApplicationJSONSettingsAudioEnum = "telephony"
	WebinarUpdateApplicationJSONSettingsAudioEnumVoip      WebinarUpdateApplicationJSONSettingsAudioEnum = "voip"
)

func (e *WebinarUpdateApplicationJSONSettingsAudioEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "both":
		fallthrough
	case "telephony":
		fallthrough
	case "voip":
		*e = WebinarUpdateApplicationJSONSettingsAudioEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarUpdateApplicationJSONSettingsAudioEnum: %s", s)
	}
}

// WebinarUpdateApplicationJSONSettingsAutoRecordingEnum - Automatic recording:<br>`local` - Record on local.<br>`cloud` -  Record on cloud.<br>`none` - Disabled.
type WebinarUpdateApplicationJSONSettingsAutoRecordingEnum string

const (
	WebinarUpdateApplicationJSONSettingsAutoRecordingEnumLocal WebinarUpdateApplicationJSONSettingsAutoRecordingEnum = "local"
	WebinarUpdateApplicationJSONSettingsAutoRecordingEnumCloud WebinarUpdateApplicationJSONSettingsAutoRecordingEnum = "cloud"
	WebinarUpdateApplicationJSONSettingsAutoRecordingEnumNone  WebinarUpdateApplicationJSONSettingsAutoRecordingEnum = "none"
)

func (e *WebinarUpdateApplicationJSONSettingsAutoRecordingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "local":
		fallthrough
	case "cloud":
		fallthrough
	case "none":
		*e = WebinarUpdateApplicationJSONSettingsAutoRecordingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarUpdateApplicationJSONSettingsAutoRecordingEnum: %s", s)
	}
}

// WebinarUpdateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum - `0` - No plan.<br>`1` - Send 1 days after the scheduled end date.<br>`2` - Send 2 days after the scheduled end date.<br>`3` - Send 3 days after the scheduled end date.<br>`4` - Send 4 days after the scheduled end date.<br>`5` - Send 5 days after the scheduled end date.<br>`6` - Send 6 days after the scheduled end date.<br>`7` - Send 7 days after the scheduled end date.
type WebinarUpdateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum string

const (
	WebinarUpdateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnumZero  WebinarUpdateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "0"
	WebinarUpdateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnumOne   WebinarUpdateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "1"
	WebinarUpdateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnumTwo   WebinarUpdateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "2"
	WebinarUpdateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnumThree WebinarUpdateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "3"
	WebinarUpdateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnumFour  WebinarUpdateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "4"
	WebinarUpdateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnumFive  WebinarUpdateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "5"
	WebinarUpdateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnumSix   WebinarUpdateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "6"
	WebinarUpdateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnumSeven WebinarUpdateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum = "7"
)

func (e *WebinarUpdateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		*e = WebinarUpdateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarUpdateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum: %s", s)
	}
}

// WebinarUpdateApplicationJSONSettingsFollowUpAbsenteesEmailNotification - Send follow-up email to absentees.
type WebinarUpdateApplicationJSONSettingsFollowUpAbsenteesEmailNotification struct {
	// * `true`: Send follow-up email to absentees.
	//
	// * `false`: Do not send follow-up email to absentees.
	Enable *bool `json:"enable,omitempty"`
	// `0` - No plan.<br>`1` - Send 1 days after the scheduled end date.<br>`2` - Send 2 days after the scheduled end date.<br>`3` - Send 3 days after the scheduled end date.<br>`4` - Send 4 days after the scheduled end date.<br>`5` - Send 5 days after the scheduled end date.<br>`6` - Send 6 days after the scheduled end date.<br>`7` - Send 7 days after the scheduled end date.
	Type *WebinarUpdateApplicationJSONSettingsFollowUpAbsenteesEmailNotificationTypeEnum `json:"type,omitempty"`
}

// WebinarUpdateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum - `0` - No plan.<br>`1` - Send 1 day after the scheduled end date.<br>`2` - Send 2 days after the scheduled end date.<br>`3` - Send 3 days after the scheduled end date.<br>`4` - Send 4 days after the scheduled end date.<br>`5` - Send 5 days after the scheduled end date.<br>`6` - Send 6 days after the scheduled end date.<br>`7` - Send 7 days after the scheduled end date.
type WebinarUpdateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum string

const (
	WebinarUpdateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnumZero  WebinarUpdateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum = "0"
	WebinarUpdateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnumOne   WebinarUpdateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum = "1"
	WebinarUpdateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnumTwo   WebinarUpdateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum = "2"
	WebinarUpdateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnumThree WebinarUpdateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum = "3"
	WebinarUpdateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnumFour  WebinarUpdateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum = "4"
	WebinarUpdateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnumFive  WebinarUpdateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum = "5"
	WebinarUpdateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnumSix   WebinarUpdateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum = "6"
	WebinarUpdateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnumSeven WebinarUpdateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum = "7"
)

func (e *WebinarUpdateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		*e = WebinarUpdateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarUpdateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum: %s", s)
	}
}

// WebinarUpdateApplicationJSONSettingsFollowUpAttendeesEmailNotification - Send follow-up email to attendees.
type WebinarUpdateApplicationJSONSettingsFollowUpAttendeesEmailNotification struct {
	// * `true`: Send follow-up email to attendees.
	//
	// * `false`: Do not send follow-up email to attendees.
	Enable *bool `json:"enable,omitempty"`
	// `0` - No plan.<br>`1` - Send 1 day after the scheduled end date.<br>`2` - Send 2 days after the scheduled end date.<br>`3` - Send 3 days after the scheduled end date.<br>`4` - Send 4 days after the scheduled end date.<br>`5` - Send 5 days after the scheduled end date.<br>`6` - Send 6 days after the scheduled end date.<br>`7` - Send 7 days after the scheduled end date.
	Type *WebinarUpdateApplicationJSONSettingsFollowUpAttendeesEmailNotificationTypeEnum `json:"type,omitempty"`
}

// WebinarUpdateApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnum - Indicate whether you want attendees to be able to view answered questions only or view all questions.
//
// * `only`: Attendees are able to view answered questions only.
//
// *  `all`: Attendees are able to view all questions submitted in the Q&A.
type WebinarUpdateApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnum string

const (
	WebinarUpdateApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnumOnly WebinarUpdateApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnum = "only"
	WebinarUpdateApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnumAll  WebinarUpdateApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnum = "all"
)

func (e *WebinarUpdateApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "only":
		fallthrough
	case "all":
		*e = WebinarUpdateApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarUpdateApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnum: %s", s)
	}
}

// WebinarUpdateApplicationJSONSettingsQuestionAndAnswer - [Q&A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar.
type WebinarUpdateApplicationJSONSettingsQuestionAndAnswer struct {
	// * `true`: Allow participants to send questions without providing their name to the host, co-host, and panelists..
	//
	// * `false`: Do not allow anonymous questions.
	AllowAnonymousQuestions *bool `json:"allow_anonymous_questions,omitempty"`
	// Indicate whether you want attendees to be able to view answered questions only or view all questions.
	//
	// * `only`: Attendees are able to view answered questions only.
	//
	// *  `all`: Attendees are able to view all questions submitted in the Q&A.
	AnswerQuestions *WebinarUpdateApplicationJSONSettingsQuestionAndAnswerAnswerQuestionsEnum `json:"answer_questions,omitempty"`
	// * `true`: Attendees can answer questions or leave a comment in the question thread.
	//
	// * `false`: Attendees can not answer questions or leave a comment in the question thread
	AttendeesCanComment *bool `json:"attendees_can_comment,omitempty"`
	// * `true`: Attendees can click the thumbs up button to bring popular questions to the top of the Q&A window.
	//
	// * `false`: Attendees can not click the thumbs up butoon on questions.
	AttendeesCanUpvote *bool `json:"attendees_can_upvote,omitempty"`
	// * `true`: Enable [Q&A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar.
	//
	// * `false`: Disable Q&A for webinar.
	Enable *bool `json:"enable,omitempty"`
}

// WebinarUpdateApplicationJSONSettingsRegistrationTypeEnum - Registration types. Only used for recurring webinars with a fixed time.<br>`1` - Attendees register once and can attend any of the webinar sessions.<br>`2` - Attendees need to register for each session in order to attend.<br>`3` - Attendees register once and can choose one or more sessions to attend.
type WebinarUpdateApplicationJSONSettingsRegistrationTypeEnum string

const (
	WebinarUpdateApplicationJSONSettingsRegistrationTypeEnumOne   WebinarUpdateApplicationJSONSettingsRegistrationTypeEnum = "1"
	WebinarUpdateApplicationJSONSettingsRegistrationTypeEnumTwo   WebinarUpdateApplicationJSONSettingsRegistrationTypeEnum = "2"
	WebinarUpdateApplicationJSONSettingsRegistrationTypeEnumThree WebinarUpdateApplicationJSONSettingsRegistrationTypeEnum = "3"
)

func (e *WebinarUpdateApplicationJSONSettingsRegistrationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		*e = WebinarUpdateApplicationJSONSettingsRegistrationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarUpdateApplicationJSONSettingsRegistrationTypeEnum: %s", s)
	}
}

// WebinarUpdateApplicationJSONSettings - Webinar settings.
type WebinarUpdateApplicationJSONSettings struct {
	// Allow attendees to join from multiple devices.
	AllowMultipleDevices *bool `json:"allow_multiple_devices,omitempty"`
	// Alternative host emails or IDs. Multiple values separated by comma.
	AlternativeHosts *string `json:"alternative_hosts,omitempty"`
	// `0` - Automatically approve.<br>`1` - Manually approve.<br>`2` - No registration required.
	ApprovalType *WebinarUpdateApplicationJSONSettingsApprovalTypeEnum `json:"approval_type,omitempty"`
	// Send reminder email to attendees and panelists.
	AttendeesAndPanelistsReminderEmailNotification *WebinarUpdateApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotification `json:"attendees_and_panelists_reminder_email_notification,omitempty"`
	// Determine how participants can join the audio portion of the webinar.
	Audio *WebinarUpdateApplicationJSONSettingsAudioEnum `json:"audio,omitempty"`
	// If user has configured ["Sign Into Zoom with Specified Domains"](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f) option, this will list the domains that are authenticated.
	AuthenticationDomains *string `json:"authentication_domains,omitempty"`
	// Authentication name set in the [authentication profile](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f).
	AuthenticationName *string `json:"authentication_name,omitempty"`
	// Webinar authentication option id.
	AuthenticationOption *string `json:"authentication_option,omitempty"`
	// Automatic recording:<br>`local` - Record on local.<br>`cloud` -  Record on cloud.<br>`none` - Disabled.
	AutoRecording *WebinarUpdateApplicationJSONSettingsAutoRecordingEnum `json:"auto_recording,omitempty"`
	// Close registration after event date.
	CloseRegistration *bool `json:"close_registration,omitempty"`
	// Contact email for registration
	ContactEmail *string `json:"contact_email,omitempty"`
	// Contact name for registration
	ContactName *string `json:"contact_name,omitempty"`
	// Set the email language to one of the following:
	// `en-US`,`de-DE`,`es-ES`,`fr-FR`,`jp-JP`,`pt-PT`,`ru-RU`,`zh-CN`, `zh-TW`, `ko-KO`, `it-IT`, `vi-VN`.
	EmailLanguage *string `json:"email_language,omitempty"`
	// Only signed in users can join this meeting.
	//
	// **This field is deprecated and will not be supported in the future.**  <br><br>As an alternative, use the "meeting_authentication", "authentication_option" and "authentication_domains" fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the Webinar.
	EnforceLogin *bool `json:"enforce_login,omitempty"`
	// Only signed in users with specified domains can join meetings.
	//
	// **This field is deprecated and will not be supported in the future.**  <br><br>As an alternative, use the "meeting_authentication", "authentication_option" and "authentication_domains" fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the Webinar.
	EnforceLoginDomains *string `json:"enforce_login_domains,omitempty"`
	// Send follow-up email to absentees.
	FollowUpAbsenteesEmailNotification *WebinarUpdateApplicationJSONSettingsFollowUpAbsenteesEmailNotification `json:"follow_up_absentees_email_notification,omitempty"`
	// Send follow-up email to attendees.
	FollowUpAttendeesEmailNotification *WebinarUpdateApplicationJSONSettingsFollowUpAttendeesEmailNotification `json:"follow_up_attendees_email_notification,omitempty"`
	// List of global dial-in countries
	GlobalDialInCountries []string `json:"global_dial_in_countries,omitempty"`
	// Default to HD video.
	HdVideo *bool `json:"hd_video,omitempty"`
	// Start video when host joins webinar.
	HostVideo *bool `json:"host_video,omitempty"`
	// `true`- Only authenticated users can join Webinar.
	MeetingAuthentication *bool `json:"meeting_authentication,omitempty"`
	// Send notification email to registrants when the host updates a webinar.
	NotifyRegistrants *bool `json:"notify_registrants,omitempty"`
	// Make the webinar on-demand
	OnDemand *bool `json:"on_demand,omitempty"`
	// * `true`: Send invitation email to panelists.
	//
	// * `false`: Do not send invitation email to panelists.
	PanelistsInvitationEmailNotification *bool `json:"panelists_invitation_email_notification,omitempty"`
	// Start video when panelists join webinar.
	PanelistsVideo *bool `json:"panelists_video,omitempty"`
	// Zoom will open a survey page in attendees' browsers after leaving the webinar
	PostWebinarSurvey *bool `json:"post_webinar_survey,omitempty"`
	// Enable practice session.
	PracticeSession *bool `json:"practice_session,omitempty"`
	// [Q&A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar.
	QuestionAndAnswer *WebinarUpdateApplicationJSONSettingsQuestionAndAnswer `json:"question_and_answer,omitempty"`
	// Send confirmation email to registrants.
	RegistrantsConfirmationEmail *bool `json:"registrants_confirmation_email,omitempty"`
	// Send email notifications to registrants about approval, cancellation, denial of the registration. The value of this field must be set to true in order to use the `registrants_confirmation_email` field.
	RegistrantsEmailNotification *bool `json:"registrants_email_notification,omitempty"`
	// Restrict number of registrants for a webinar. By default, it is set to `0`. A `0` value means that the restriction option is disabled. Provide a number higher than 0 to restrict the webinar registrants by the that number.
	RegistrantsRestrictNumber *int64 `json:"registrants_restrict_number,omitempty"`
	// Registration types. Only used for recurring webinars with a fixed time.<br>`1` - Attendees register once and can attend any of the webinar sessions.<br>`2` - Attendees need to register for each session in order to attend.<br>`3` - Attendees register once and can choose one or more sessions to attend.
	RegistrationType *WebinarUpdateApplicationJSONSettingsRegistrationTypeEnum `json:"registration_type,omitempty"`
	// Show social share buttons on the registration page.
	ShowShareButton *bool `json:"show_share_button,omitempty"`
	// Survey url for post webinar survey
	SurveyURL *string `json:"survey_url,omitempty"`
}

type WebinarUpdateApplicationJSONTrackingFields struct {
	// Tracking fields type
	Field *string `json:"field,omitempty"`
	// Tracking fields value
	Value *string `json:"value,omitempty"`
}

// WebinarUpdateApplicationJSONTypeEnum - Webinar Types:<br>`5` - webinar.<br>`6` - Recurring webinar with no fixed time.<br>`9` - Recurring webinar with a fixed time.
type WebinarUpdateApplicationJSONTypeEnum string

const (
	WebinarUpdateApplicationJSONTypeEnumFive WebinarUpdateApplicationJSONTypeEnum = "5"
	WebinarUpdateApplicationJSONTypeEnumSix  WebinarUpdateApplicationJSONTypeEnum = "6"
	WebinarUpdateApplicationJSONTypeEnumNine WebinarUpdateApplicationJSONTypeEnum = "9"
)

func (e *WebinarUpdateApplicationJSONTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "9":
		*e = WebinarUpdateApplicationJSONTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarUpdateApplicationJSONTypeEnum: %s", s)
	}
}

// WebinarUpdateApplicationJSON - Base webinar object for sessions.
type WebinarUpdateApplicationJSON struct {
	// Webinar description.
	Agenda *string `json:"agenda,omitempty"`
	// Webinar duration (minutes). Used for scheduled webinar only.
	Duration *int64 `json:"duration,omitempty"`
	// [Webinar passcode](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords). By default, passcode may only contain the following characters: [a-z A-Z 0-9 @ - _ * !] and can have a maximum of 10 characters.
	//
	// **Note:** If the account owner or the admin has configured [minimum passcode requirement settings](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604), the passcode value provided here must meet those requirements. <br><br>If the requirements are enabled, you can view those requirements by calling either the [Get User Settings API](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usersettings) or the  [Get Account Settings](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/accountsettings) API.
	//
	// If "**Require a passcode when scheduling new meetings**" setting has been **enabled** **and** [locked](https://support.zoom.us/hc/en-us/articles/115005269866-Using-Tiered-Settings#locked) for the user, the passcode field will be autogenerated for the Webinar in the response even if it is not provided in the API request. <br><br>
	//
	//
	//
	//
	//
	//
	//
	//
	Password *string `json:"password,omitempty"`
	// Recurrence object. Use this object only for a meeting with type `8` i.e., a recurring meeting with fixed time.
	Recurrence *WebinarUpdateApplicationJSONRecurrence `json:"recurrence,omitempty"`
	Settings   *WebinarUpdateApplicationJSONSettings   `json:"settings,omitempty"`
	// Webinar start time, in the format "yyyy-MM-dd'T'HH:mm:ss'Z'." Should be in GMT time. In the format "yyyy-MM-dd'T'HH:mm:ss." This should be in local time and the timezone should be specified. Only used for scheduled webinars and recurring webinars with a fixed time.
	StartTime *time.Time `json:"start_time,omitempty"`
	// Time zone to format start_time. For example, "America/Los_Angeles". For scheduled meetings only. Please reference our [time zone](#timezones) list for supported time zones and their formats.
	Timezone *string `json:"timezone,omitempty"`
	// Webinar topic.
	Topic *string `json:"topic,omitempty"`
	// Tracking fields
	TrackingFields []WebinarUpdateApplicationJSONTrackingFields `json:"tracking_fields,omitempty"`
	// Webinar Types:<br>`5` - webinar.<br>`6` - Recurring webinar with no fixed time.<br>`9` - Recurring webinar with a fixed time.
	Type *WebinarUpdateApplicationJSONTypeEnum `json:"type,omitempty"`
}

type WebinarUpdateJSONRequest struct {
	PathParams  WebinarUpdateJSONPathParams
	QueryParams WebinarUpdateJSONQueryParams
	// Webinar.
	Request  WebinarUpdateApplicationJSON `request:"mediaType=application/json"`
	Security WebinarUpdateJSONSecurity
}

type WebinarUpdateJSONResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
