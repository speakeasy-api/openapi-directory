/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class GetResourcesMediaIdSyndicateFormatRequest extends SpeakeasyBase {
  /**
   * If content is a video, the embeded video will auto play when loaded.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=autoplay",
  })
  autoplay?: boolean;

  /**
   * The css class to target for extraction.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=cssClass",
  })
  cssClass?: string;

  /**
   * Set font size (in points) of p, div, and span tags.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=font-size",
  })
  fontSize?: number;

  /**
   * Automatically added
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=format",
  })
  format: string;

  /**
   * The id of the media to show embed code for.
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=id" })
  id: number;

  /**
   * Accepts valid CSS float options, such as 'left' or 'right'. Will inject a style into the content before rendering.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=imageFloat",
  })
  imageFloat?: string;

  /**
   * Accepts 4 CSV values representing pixel sizes of margin similar to CSS. Default format is 'north,east,south,west' - for example '0,10,10,0' would put a 10 pixel margin on the right and bottom sides of an image. Will inject a style into the content before rendering.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=imageMargin",
  })
  imageMargin?: string;

  /**
   * If content is a video, related items will be shown at the end of playback.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=false;name=rel" })
  rel?: boolean;

  /**
   * Remove break tags from content.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=stripBreaks",
  })
  stripBreaks?: boolean;

  /**
   * Remove class attributes from content (except 'syndicate').
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=stripClasses",
  })
  stripClasses?: boolean;

  /**
   * Remove image tags from content.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=stripImages",
  })
  stripImages?: boolean;

  /**
   * Remove script tags from content.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=stripScripts",
  })
  stripScripts?: boolean;

  /**
   * Remove in-line styles from content.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=stripStyles",
  })
  stripStyles?: boolean;
}

export class GetResourcesMediaIdSyndicateFormatResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Returns the syndicated content for a given MediaItem in the specified 'format' (HTML or JSON).
   */
  @SpeakeasyMetadata()
  syndicateMarshallerWrapped?: shared.SyndicateMarshallerWrapped;
}
