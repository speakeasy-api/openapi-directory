<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Wells 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * list files found for the well identified in the uri
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WellsFilesListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\WellsFilesListResponse
     */
	public function wellsFilesList(
        \OpenAPI\OpenAPI\Models\Operations\WellsFilesListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\WellsFilesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/wells/{tag}/files', \OpenAPI\OpenAPI\Models\Operations\WellsFilesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WellsFilesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->wellsFilesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\WellsFilesList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * returns a list of wells
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WellsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\WellsListResponse
     */
	public function wellsList(
        \OpenAPI\OpenAPI\Models\Operations\WellsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\WellsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/wells/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WellsListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WellsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->wellsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\WellsList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return well detail.
     * This view is open to all, and has no permissions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WellsReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\WellsReadResponse
     */
	public function wellsRead(
        \OpenAPI\OpenAPI\Models\Operations\WellsReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\WellsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/wells/{well_tag_number}', \OpenAPI\OpenAPI\Models\Operations\WellsReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WellsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->wellDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\WellDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * seach for wells by tag or owner
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WellsTagsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\WellsTagsListResponse
     */
	public function wellsTagsList(
        \OpenAPI\OpenAPI\Models\Operations\WellsTagsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\WellsTagsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/wells/tags/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WellsTagsListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WellsTagsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->wellTagSearches = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\WellTagSearch>', 'json');
            }
        }

        return $response;
    }
}