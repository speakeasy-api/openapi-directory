// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ChcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type ChcerRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// Certificate Reference No
	RefNo string `json:"RefNo"`
	// Token No
	TokenNo string `json:"TokenNo"`
}

// ChcerRequestBodyFormatEnum - The format of the certificate in response.
type ChcerRequestBodyFormatEnum string

const (
	ChcerRequestBodyFormatEnumPdf ChcerRequestBodyFormatEnum = "pdf"
)

func (e ChcerRequestBodyFormatEnum) ToPointer() *ChcerRequestBodyFormatEnum {
	return &e
}

func (e *ChcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = ChcerRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChcerRequestBodyFormatEnum: %v", v)
	}
}

// ChcerRequestBody - Request format
type ChcerRequestBody struct {
	CertificateParameters *ChcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format ChcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Chcer504ApplicationJSONErrorEnum string

const (
	Chcer504ApplicationJSONErrorEnumGatewayTimeout Chcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Chcer504ApplicationJSONErrorEnum) ToPointer() *Chcer504ApplicationJSONErrorEnum {
	return &e
}

func (e *Chcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Chcer504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Chcer504ApplicationJSONErrorEnum: %v", v)
	}
}

type Chcer504ApplicationJSONErrorDescriptionEnum string

const (
	Chcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Chcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Chcer504ApplicationJSONErrorDescriptionEnum) ToPointer() *Chcer504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Chcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Chcer504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Chcer504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Chcer504ApplicationJSON - Gateway timeout
type Chcer504ApplicationJSON struct {
	Error            *Chcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Chcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Chcer503ApplicationJSONErrorEnum string

const (
	Chcer503ApplicationJSONErrorEnumServiceUnavailable Chcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Chcer503ApplicationJSONErrorEnum) ToPointer() *Chcer503ApplicationJSONErrorEnum {
	return &e
}

func (e *Chcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Chcer503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Chcer503ApplicationJSONErrorEnum: %v", v)
	}
}

type Chcer503ApplicationJSONErrorDescriptionEnum string

const (
	Chcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Chcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Chcer503ApplicationJSONErrorDescriptionEnum) ToPointer() *Chcer503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Chcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Chcer503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Chcer503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Chcer503ApplicationJSON - Service unavailable
type Chcer503ApplicationJSON struct {
	Error            *Chcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Chcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Chcer502ApplicationJSONErrorEnum string

const (
	Chcer502ApplicationJSONErrorEnumBadGatewy Chcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Chcer502ApplicationJSONErrorEnum) ToPointer() *Chcer502ApplicationJSONErrorEnum {
	return &e
}

func (e *Chcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Chcer502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Chcer502ApplicationJSONErrorEnum: %v", v)
	}
}

type Chcer502ApplicationJSONErrorDescriptionEnum string

const (
	Chcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Chcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Chcer502ApplicationJSONErrorDescriptionEnum) ToPointer() *Chcer502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Chcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Chcer502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Chcer502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Chcer502ApplicationJSON - Bad gateway
type Chcer502ApplicationJSON struct {
	Error            *Chcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Chcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Chcer500ApplicationJSONErrorEnum string

const (
	Chcer500ApplicationJSONErrorEnumInternalServerError Chcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Chcer500ApplicationJSONErrorEnum) ToPointer() *Chcer500ApplicationJSONErrorEnum {
	return &e
}

func (e *Chcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Chcer500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Chcer500ApplicationJSONErrorEnum: %v", v)
	}
}

type Chcer500ApplicationJSONErrorDescriptionEnum string

const (
	Chcer500ApplicationJSONErrorDescriptionEnumInternalServerError Chcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Chcer500ApplicationJSONErrorDescriptionEnum) ToPointer() *Chcer500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Chcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Chcer500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Chcer500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Chcer500ApplicationJSON - Internal server error
type Chcer500ApplicationJSON struct {
	Error            *Chcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Chcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Chcer404ApplicationJSONErrorEnum string

const (
	Chcer404ApplicationJSONErrorEnumRecordNotFound Chcer404ApplicationJSONErrorEnum = "record_not_found"
	Chcer404ApplicationJSONErrorEnumURLNotFound    Chcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Chcer404ApplicationJSONErrorEnum) ToPointer() *Chcer404ApplicationJSONErrorEnum {
	return &e
}

func (e *Chcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Chcer404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Chcer404ApplicationJSONErrorEnum: %v", v)
	}
}

type Chcer404ApplicationJSONErrorDescriptionEnum string

const (
	Chcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Chcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Chcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Chcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Chcer404ApplicationJSONErrorDescriptionEnum) ToPointer() *Chcer404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Chcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Chcer404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Chcer404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Chcer404ApplicationJSON - No record found
type Chcer404ApplicationJSON struct {
	Error            *Chcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Chcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Chcer401ApplicationJSONErrorEnum string

const (
	Chcer401ApplicationJSONErrorEnumInvalidAuthentication Chcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Chcer401ApplicationJSONErrorEnumInvalidAuthorization  Chcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Chcer401ApplicationJSONErrorEnum) ToPointer() *Chcer401ApplicationJSONErrorEnum {
	return &e
}

func (e *Chcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Chcer401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Chcer401ApplicationJSONErrorEnum: %v", v)
	}
}

type Chcer401ApplicationJSONErrorDescriptionEnum string

const (
	Chcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Chcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Chcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Chcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Chcer401ApplicationJSONErrorDescriptionEnum) ToPointer() *Chcer401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Chcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Chcer401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Chcer401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Chcer401ApplicationJSON - Unauthorized access
type Chcer401ApplicationJSON struct {
	Error            *Chcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Chcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Chcer400ApplicationJSONErrorEnum string

const (
	Chcer400ApplicationJSONErrorEnumMissingParameter Chcer400ApplicationJSONErrorEnum = "missing_parameter"
	Chcer400ApplicationJSONErrorEnumInvalidParameter Chcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Chcer400ApplicationJSONErrorEnumInvalidFormat    Chcer400ApplicationJSONErrorEnum = "invalid_format"
	Chcer400ApplicationJSONErrorEnumInvalidTxnid     Chcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Chcer400ApplicationJSONErrorEnumInvalidConsentid Chcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Chcer400ApplicationJSONErrorEnum) ToPointer() *Chcer400ApplicationJSONErrorEnum {
	return &e
}

func (e *Chcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Chcer400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Chcer400ApplicationJSONErrorEnum: %v", v)
	}
}

type Chcer400ApplicationJSONErrorDescriptionEnum string

const (
	Chcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Chcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Chcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Chcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Chcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Chcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Chcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Chcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Chcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Chcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Chcer400ApplicationJSONErrorDescriptionEnum) ToPointer() *Chcer400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Chcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Chcer400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Chcer400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Chcer400ApplicationJSON - Bad request
type Chcer400ApplicationJSON struct {
	Error            *Chcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Chcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type ChcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Chcer400ApplicationJSONObject *Chcer400ApplicationJSON
	// Unauthorized access
	Chcer401ApplicationJSONObject *Chcer401ApplicationJSON
	// No record found
	Chcer404ApplicationJSONObject *Chcer404ApplicationJSON
	// Internal server error
	Chcer500ApplicationJSONObject *Chcer500ApplicationJSON
	// Bad gateway
	Chcer502ApplicationJSONObject *Chcer502ApplicationJSON
	// Service unavailable
	Chcer503ApplicationJSONObject *Chcer503ApplicationJSON
	// Gateway timeout
	Chcer504ApplicationJSONObject *Chcer504ApplicationJSON
}
