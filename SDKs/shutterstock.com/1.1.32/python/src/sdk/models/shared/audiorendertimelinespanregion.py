"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class AudioRenderTimelineSpanRegionEndTypeEventEnum(str, Enum):
    r"""The type of event"""
    ENDING = 'ending'
    TRANSITION = 'transition'

class AudioRenderTimelineSpanRegionEndTypeTypeEnum(str, Enum):
    r"""The specific action to perform; if the event type is \\"ending\\" then this must be \\"ringout\\" and if event type is \\"transition\\" this must be \\"cut\\" """
    RINGOUT = 'ringout'
    CUT = 'cut'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AudioRenderTimelineSpanRegionEndType:
    r"""A high-level description of how a region ends"""
    
    beat: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beat') }})
    r"""The beat, relative to the start of the active region, at which the end_type begins; in other words, the ending starts on this beat of the region"""  
    event: AudioRenderTimelineSpanRegionEndTypeEventEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('event') }})
    r"""The type of event"""  
    type: AudioRenderTimelineSpanRegionEndTypeTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The specific action to perform; if the event type is \\"ending\\" then this must be \\"ringout\\" and if event type is \\"transition\\" this must be \\"cut\\" """  
    
class AudioRenderTimelineSpanRegionKeyTonicAccidentalEnum(str, Enum):
    r"""A text representation of the accidental; if this field is specified, the tonic_note field should also be specified"""
    DOUBLE_FLAT = 'double flat'
    FLAT = 'flat'
    NATURAL = 'natural'
    SHARP = 'sharp'
    DOUBLE_SHARP = 'double sharp'

class AudioRenderTimelineSpanRegionKeyTonicNoteEnum(str, Enum):
    r"""A text representation of the musical note; if this field is specified, the tonic_accidental field should also be specified"""
    C = 'c'
    D = 'd'
    E = 'e'
    F = 'f'
    G = 'g'
    A = 'a'
    B = 'b'

class AudioRenderTimelineSpanRegionKeyTonicQualityEnum(str, Enum):
    r"""The scale quality; if this field is not specified, the API selects the quality automatically"""
    MAJOR = 'major'
    NATURAL_MINOR = 'natural_minor'
    HARMONIC_MINOR = 'harmonic_minor'
    MELODIC_MINOR = 'melodic_minor'
    IONIAN = 'ionian'
    DORIAN = 'dorian'
    PHRYGIAN = 'phrygian'
    LYDIAN = 'lydian'
    MIXOLYDIAN = 'mixolydian'
    AEOLIAN = 'aeolian'
    LOCRIAN = 'locrian'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AudioRenderTimelineSpanRegionKey:
    r"""The key signature active at the beginning of the region"""
    
    tonic_accidental: Optional[AudioRenderTimelineSpanRegionKeyTonicAccidentalEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tonic_accidental'), 'exclude': lambda f: f is None }})
    r"""A text representation of the accidental; if this field is specified, the tonic_note field should also be specified"""  
    tonic_note: Optional[AudioRenderTimelineSpanRegionKeyTonicNoteEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tonic_note'), 'exclude': lambda f: f is None }})
    r"""A text representation of the musical note; if this field is specified, the tonic_accidental field should also be specified"""  
    tonic_quality: Optional[AudioRenderTimelineSpanRegionKeyTonicQualityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tonic_quality'), 'exclude': lambda f: f is None }})
    r"""The scale quality; if this field is not specified, the API selects the quality automatically"""  
    
class AudioRenderTimelineSpanRegionRegionEnum(str, Enum):
    r"""The type of region"""
    MUSIC = 'music'
    SILENCE = 'silence'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AudioRenderTimelineSpanRegion:
    r"""A period of music or silence, measured in beats"""
    
    beat: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beat') }})
    r"""The beat, relative to the span, at which the region object's music begins"""  
    descriptor: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('descriptor') }})
    r"""The descriptor ID needed to compose the music"""  
    id: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""An identifier which must be unique within the parent span"""  
    region: AudioRenderTimelineSpanRegionRegionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('region') }})
    r"""The type of region"""  
    end_type: Optional[AudioRenderTimelineSpanRegionEndType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_type'), 'exclude': lambda f: f is None }})
    r"""A high-level description of how a region ends"""  
    key: Optional[AudioRenderTimelineSpanRegionKey] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key'), 'exclude': lambda f: f is None }})
    r"""The key signature active at the beginning of the region"""  
    