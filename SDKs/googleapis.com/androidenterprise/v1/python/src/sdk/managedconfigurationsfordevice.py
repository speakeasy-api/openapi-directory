"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Managedconfigurationsfordevice:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def androidenterprise_managedconfigurationsfordevice_delete(self, request: operations.AndroidenterpriseManagedconfigurationsfordeviceDeleteRequest, security: operations.AndroidenterpriseManagedconfigurationsfordeviceDeleteSecurity) -> operations.AndroidenterpriseManagedconfigurationsfordeviceDeleteResponse:
        r"""Removes a per-device managed configuration for an app for the specified device."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AndroidenterpriseManagedconfigurationsfordeviceDeleteRequest, base_url, '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}', request)
        
        query_params = utils.get_query_params(operations.AndroidenterpriseManagedconfigurationsfordeviceDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AndroidenterpriseManagedconfigurationsfordeviceDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def androidenterprise_managedconfigurationsfordevice_get(self, request: operations.AndroidenterpriseManagedconfigurationsfordeviceGetRequest, security: operations.AndroidenterpriseManagedconfigurationsfordeviceGetSecurity) -> operations.AndroidenterpriseManagedconfigurationsfordeviceGetResponse:
        r"""Retrieves details of a per-device managed configuration."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AndroidenterpriseManagedconfigurationsfordeviceGetRequest, base_url, '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}', request)
        
        query_params = utils.get_query_params(operations.AndroidenterpriseManagedconfigurationsfordeviceGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AndroidenterpriseManagedconfigurationsfordeviceGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ManagedConfiguration])
                res.managed_configuration = out

        return res

    def androidenterprise_managedconfigurationsfordevice_list(self, request: operations.AndroidenterpriseManagedconfigurationsfordeviceListRequest, security: operations.AndroidenterpriseManagedconfigurationsfordeviceListSecurity) -> operations.AndroidenterpriseManagedconfigurationsfordeviceListResponse:
        r"""Lists all the per-device managed configurations for the specified device. Only the ID is set."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AndroidenterpriseManagedconfigurationsfordeviceListRequest, base_url, '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice', request)
        
        query_params = utils.get_query_params(operations.AndroidenterpriseManagedconfigurationsfordeviceListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AndroidenterpriseManagedconfigurationsfordeviceListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ManagedConfigurationsForDeviceListResponse])
                res.managed_configurations_for_device_list_response = out

        return res

    def androidenterprise_managedconfigurationsfordevice_update(self, request: operations.AndroidenterpriseManagedconfigurationsfordeviceUpdateRequest, security: operations.AndroidenterpriseManagedconfigurationsfordeviceUpdateSecurity) -> operations.AndroidenterpriseManagedconfigurationsfordeviceUpdateResponse:
        r"""Adds or updates a per-device managed configuration for an app for the specified device."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AndroidenterpriseManagedconfigurationsfordeviceUpdateRequest, base_url, '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "managed_configuration", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AndroidenterpriseManagedconfigurationsfordeviceUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AndroidenterpriseManagedconfigurationsfordeviceUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ManagedConfiguration])
                res.managed_configuration = out

        return res

    