"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class FormFieldEntityFieldTypeEnum(str, Enum):
    r"""Type of Field"""
    TEXT = 'text'
    TEXT_AREA = 'text_area'
    DROPDOWN = 'dropdown'
    RADIO = 'radio'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FormFieldEntity:
    
    default_option: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('default_option'), 'exclude': lambda f: f is None }})
    r"""Default option for radio and dropdown"""  
    field_type: Optional[FormFieldEntityFieldTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('field_type'), 'exclude': lambda f: f is None }})
    r"""Type of Field"""  
    form_field_set_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('form_field_set_id'), 'exclude': lambda f: f is None }})
    r"""Form field set id"""  
    help_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('help_text'), 'exclude': lambda f: f is None }})
    r"""Help text to be displayed"""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Form field id"""  
    label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label'), 'exclude': lambda f: f is None }})
    r"""Label to be displayed"""  
    options_for_select: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options_for_select'), 'exclude': lambda f: f is None }})
    r"""Options to display for radio and dropdown"""  
    required: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('required'), 'exclude': lambda f: f is None }})
    r"""Is this a required field?"""  
    