/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ContainerDependency } from "./containerdependency";
import { EnvironmentFile } from "./environmentfile";
import { FirelensConfiguration } from "./firelensconfiguration";
import { HealthCheck } from "./healthcheck";
import { HostEntry } from "./hostentry";
import { KeyValuePair } from "./keyvaluepair";
import { LinuxParameters } from "./linuxparameters";
import { LogConfiguration } from "./logconfiguration";
import { MountPoint } from "./mountpoint";
import { PortMapping } from "./portmapping";
import { RepositoryCredentials } from "./repositorycredentials";
import { ResourceRequirement } from "./resourcerequirement";
import { Secret } from "./secret";
import { SystemControl } from "./systemcontrol";
import { Ulimit } from "./ulimit";
import { VolumeFrom } from "./volumefrom";
import { Expose, Type } from "class-transformer";

/**
 * Container definitions are used in task definitions to describe the different containers that are launched as part of a task.
 */
export class ContainerDefinition extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "command" })
  command?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "cpu" })
  cpu?: number;

  @SpeakeasyMetadata({ elemType: ContainerDependency })
  @Expose({ name: "dependsOn" })
  @Type(() => ContainerDependency)
  dependsOn?: ContainerDependency[];

  @SpeakeasyMetadata()
  @Expose({ name: "disableNetworking" })
  disableNetworking?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "dnsSearchDomains" })
  dnsSearchDomains?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "dnsServers" })
  dnsServers?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "dockerLabels" })
  dockerLabels?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "dockerSecurityOptions" })
  dockerSecurityOptions?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "entryPoint" })
  entryPoint?: string[];

  @SpeakeasyMetadata({ elemType: KeyValuePair })
  @Expose({ name: "environment" })
  @Type(() => KeyValuePair)
  environment?: KeyValuePair[];

  @SpeakeasyMetadata({ elemType: EnvironmentFile })
  @Expose({ name: "environmentFiles" })
  @Type(() => EnvironmentFile)
  environmentFiles?: EnvironmentFile[];

  @SpeakeasyMetadata()
  @Expose({ name: "essential" })
  essential?: boolean;

  @SpeakeasyMetadata({ elemType: HostEntry })
  @Expose({ name: "extraHosts" })
  @Type(() => HostEntry)
  extraHosts?: HostEntry[];

  @SpeakeasyMetadata()
  @Expose({ name: "firelensConfiguration" })
  @Type(() => FirelensConfiguration)
  firelensConfiguration?: FirelensConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "healthCheck" })
  @Type(() => HealthCheck)
  healthCheck?: HealthCheck;

  @SpeakeasyMetadata()
  @Expose({ name: "hostname" })
  hostname?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "image" })
  image?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "interactive" })
  interactive?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "links" })
  links?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "linuxParameters" })
  @Type(() => LinuxParameters)
  linuxParameters?: LinuxParameters;

  @SpeakeasyMetadata()
  @Expose({ name: "logConfiguration" })
  @Type(() => LogConfiguration)
  logConfiguration?: LogConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "memory" })
  memory?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "memoryReservation" })
  memoryReservation?: number;

  @SpeakeasyMetadata({ elemType: MountPoint })
  @Expose({ name: "mountPoints" })
  @Type(() => MountPoint)
  mountPoints?: MountPoint[];

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata({ elemType: PortMapping })
  @Expose({ name: "portMappings" })
  @Type(() => PortMapping)
  portMappings?: PortMapping[];

  @SpeakeasyMetadata()
  @Expose({ name: "privileged" })
  privileged?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "pseudoTerminal" })
  pseudoTerminal?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "readonlyRootFilesystem" })
  readonlyRootFilesystem?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "repositoryCredentials" })
  @Type(() => RepositoryCredentials)
  repositoryCredentials?: RepositoryCredentials;

  @SpeakeasyMetadata({ elemType: ResourceRequirement })
  @Expose({ name: "resourceRequirements" })
  @Type(() => ResourceRequirement)
  resourceRequirements?: ResourceRequirement[];

  @SpeakeasyMetadata({ elemType: Secret })
  @Expose({ name: "secrets" })
  @Type(() => Secret)
  secrets?: Secret[];

  @SpeakeasyMetadata()
  @Expose({ name: "startTimeout" })
  startTimeout?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "stopTimeout" })
  stopTimeout?: number;

  @SpeakeasyMetadata({ elemType: SystemControl })
  @Expose({ name: "systemControls" })
  @Type(() => SystemControl)
  systemControls?: SystemControl[];

  @SpeakeasyMetadata({ elemType: Ulimit })
  @Expose({ name: "ulimits" })
  @Type(() => Ulimit)
  ulimits?: Ulimit[];

  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  user?: string;

  @SpeakeasyMetadata({ elemType: VolumeFrom })
  @Expose({ name: "volumesFrom" })
  @Type(() => VolumeFrom)
  volumesFrom?: VolumeFrom[];

  @SpeakeasyMetadata()
  @Expose({ name: "workingDirectory" })
  workingDirectory?: string;
}
