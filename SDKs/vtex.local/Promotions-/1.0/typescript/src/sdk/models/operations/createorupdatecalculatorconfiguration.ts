/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Object with information of the affiliate.
 */
export class CreateOrUpdateCalculatorConfigurationRequestBodyAffiliates extends SpeakeasyBase {
  /**
   * Affiliate ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Affiliate Name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

/**
 * Object with information of the brand.
 */
export class CreateOrUpdateCalculatorConfigurationRequestBodyBrands extends SpeakeasyBase {
  /**
   * Brand ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Brand Name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

/**
 * Object with information of the category.
 */
export class CreateOrUpdateCalculatorConfigurationRequestBodyCategories extends SpeakeasyBase {
  /**
   * Category ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Category Name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

/**
 * Object with information of the collection.
 */
export class CreateOrUpdateCalculatorConfigurationRequestBodyCollections extends SpeakeasyBase {
  /**
   * Collection ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Collection Name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

/**
 * Object with information of the Payment Method.
 */
export class CreateOrUpdateCalculatorConfigurationRequestBodyPaymentsMethods extends SpeakeasyBase {
  /**
   * Payment Method ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Payment Method Name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

/**
 * Object with information of the product.
 */
export class CreateOrUpdateCalculatorConfigurationRequestBodyProducts extends SpeakeasyBase {
  /**
   * Product ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Product Name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

/**
 * Object with information of the SKU.
 */
export class CreateOrUpdateCalculatorConfigurationRequestBodySkus extends SpeakeasyBase {
  /**
   * SKU ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * SKU Name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

/**
 * SKU Gift Object. Total discount on the product value set as a gift.
 */
export class CreateOrUpdateCalculatorConfigurationRequestBodySkusGift extends SpeakeasyBase {
  /**
   * Array with SKU Gifts IDs.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gifts" })
  gifts?: any[];

  /**
   * Quantity of SKU Gifts.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "quantitySelectable" })
  quantitySelectable?: number;
}

/**
 * Zip code that applies the promotion.
 */
export class CreateOrUpdateCalculatorConfigurationRequestBodyZipCodeRanges extends SpeakeasyBase {
  /**
   * Defines if the zip code applies the promotion.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "inclusive" })
  inclusive?: boolean;
}

export class CreateOrUpdateCalculatorConfigurationRequestBody extends SpeakeasyBase {
  /**
   * Maximum shipping value.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "absoluteShippingDiscountValue" })
  absoluteShippingDiscountValue?: number;

  /**
   * Allows the promotion to apply to products whose prices have been manually added by a call-center operator.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accumulateWithManualPrice" })
  accumulateWithManualPrice?: boolean;

  /**
   * If set as `true`, it activates gifts Multiplier.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "activateGiftsMultiplier" })
  activateGiftsMultiplier?: boolean;

  /**
   * Defines which days of the week the Promotion or Tax will applied.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "activeDaysOfWeek" })
  activeDaysOfWeek?: string[];

  /**
   * Marketplace order identifier. The discount will apply to selected affiliates.
   */
  @SpeakeasyMetadata({
    elemType: CreateOrUpdateCalculatorConfigurationRequestBodyAffiliates,
  })
  @Expose({ name: "affiliates" })
  @Type(() => CreateOrUpdateCalculatorConfigurationRequestBodyAffiliates)
  affiliates?: CreateOrUpdateCalculatorConfigurationRequestBodyAffiliates[];

  /**
   * Promotion or Tax will be applied to all kind of shipping.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "applyToAllShippings" })
  applyToAllShippings?: boolean;

  /**
   * If set to `false`, this Promotion or Tax will be applied to any trade policies present on the `idsSalesChannel` field. If set to `true`, trade policies present on that field will make this Promotion or Tax not to be applied.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "areSalesChannelIdsExclusive" })
  areSalesChannelIdsExclusive?: boolean;

  /**
   * Promotion or Tax Begin Date (UTC).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "beginDateUtc" })
  beginDateUtc?: string;

  /**
   * Object composed by the brands that will activate or deactivate the Promotion or Tax.
   */
  @SpeakeasyMetadata({
    elemType: CreateOrUpdateCalculatorConfigurationRequestBodyBrands,
  })
  @Expose({ name: "brands" })
  @Type(() => CreateOrUpdateCalculatorConfigurationRequestBodyBrands)
  brands?: CreateOrUpdateCalculatorConfigurationRequestBodyBrands[];

  /**
   * If set to `true`, this Promotion or Tax will be applied to any brand present on the `brands` field. If set to `false`, brands present on that field will make this Promotion or Tax not to be applied.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "brandsAreInclusive" })
  brandsAreInclusive?: boolean;

  /**
   * Campaign Audiences that activate this Promotion or Tax.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "campaigns" })
  campaigns?: any[];

  @SpeakeasyMetadata()
  @Expose({ name: "cardIssuers" })
  cardIssuers?: any[];

  /**
   * Object composed by the categories that will activate or deactivate the Promotion or Tax.
   */
  @SpeakeasyMetadata({
    elemType: CreateOrUpdateCalculatorConfigurationRequestBodyCategories,
  })
  @Expose({ name: "categories" })
  @Type(() => CreateOrUpdateCalculatorConfigurationRequestBodyCategories)
  categories?: CreateOrUpdateCalculatorConfigurationRequestBodyCategories[];

  /**
   * If set to `true`, this Promotion or Tax will be applied to any category present on the `categories` field. If set to `false`, categories present on that field will make this Promotion or Tax not to be applied.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "categoriesAreInclusive" })
  categoriesAreInclusive?: boolean;

  /**
   * An expression to use with clusters.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clusterExpressions" })
  clusterExpressions?: string[];

  /**
   * Object composed by the collections that will activate or deactivate the Promotion or Tax.
   */
  @SpeakeasyMetadata({
    elemType: CreateOrUpdateCalculatorConfigurationRequestBodyCollections,
  })
  @Expose({ name: "collections" })
  @Type(() => CreateOrUpdateCalculatorConfigurationRequestBodyCollections)
  collections?: CreateOrUpdateCalculatorConfigurationRequestBodyCollections[];

  /**
   * Collections that will generate the Promotion, type **Buy Together**, **More for less**, **Progressive Discount**, **Buy One Get One**.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "collections1BuyTogether" })
  collections1BuyTogether?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "collections2BuyTogether" })
  collections2BuyTogether?: any[];

  /**
   * If set to `true`, this Promotion or Tax will be applied to any collection present on the `collections` field. If set to `false`, collections present on that field will make this Promotion or Tax not to be applied.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "collectionsIsInclusive" })
  collectionsIsInclusive?: boolean;

  /**
   * If the **List Price** and **Price** are the same.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "compareListPriceAndPrice" })
  compareListPriceAndPrice?: boolean;

  /**
   * Array with conditions IDs.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "conditionsIds" })
  conditionsIds?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "coupon" })
  coupon?: any[];

  /**
   * Defines if a Promotion or Tax can accumulate with another one. (`true`) or not (`false`).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cumulative" })
  cumulative?: boolean;

  /**
   * Number of days that are considered to add the purchase history.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "daysAgoOfPurchases" })
  daysAgoOfPurchases?: number;

  /**
   * Internal description of the Promotion or Tax.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "disableDeal" })
  disableDeal?: boolean;

  /**
   * The type of discount that will apply to the promotion.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "discountType" })
  discountType?: string;

  /**
   * Enable **Buy Together** per SKU.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enableBuyTogetherPerSku" })
  enableBuyTogetherPerSku?: boolean;

  /**
   * Promotion or Tax End Date (UTC).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "endDateUtc" })
  endDateUtc?: string;

  /**
   * Applies the discount even if the user is not logged.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firstBuyIsProfileOptimistic" })
  firstBuyIsProfileOptimistic?: boolean;

  /**
   * Gifts List Type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "giftListTypes" })
  giftListTypes?: string[];

  /**
   * Promotion ID or Tax ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "idCalculatorConfiguration" })
  idCalculatorConfiguration?: string;

  /**
   * Seller Name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "idSeller" })
  idSeller?: string;

  /**
   * If set to `true`, this Promotion or Tax will be applied to any seller present on the `idSeller` field. If set to `false`, sellers present on that field will make this Promotion or Tax not to be applied.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "idSellerIsInclusive" })
  idSellerIsInclusive?: boolean;

  /**
   * List of Trade Policies that activate this Promotion or Tax.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "idsSalesChannel" })
  idsSalesChannel?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "installment" })
  installment?: number;

  /**
   * If set as `true` the Promotion or Tax is activated. If set as `false` the Promotion or Tax is deactivated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isActive" })
  isActive?: boolean;

  /**
   * If set as `true` the Promotion or Tax is archived. If set as `false` the Promotion or Tax is not archived.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isArchived" })
  isArchived?: boolean;

  /**
   * Applies the Promotion or Tax only if the list price and price is different.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isDifferentListPriceAndPrice" })
  isDifferentListPriceAndPrice?: boolean;

  /**
   * Insert a flag with the promotion name used in the product's window display and page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isFeatured" })
  isFeatured?: boolean;

  /**
   * Applies the discount only if it's a first buy.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isFirstBuy" })
  isFirstBuy?: boolean;

  /**
   * Set if the Promotion or Tax will be applied considering a minimum and maximum values for installments.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isMinMaxInstallments" })
  isMinMaxInstallments?: boolean;

  /**
   * Applies selected discount only when one of the defined shipping method is selected by the customer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isSlaSelected" })
  isSlaSelected?: boolean;

  /**
   * Maximum price of the item.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "itemMaxPrice" })
  itemMaxPrice?: number;

  /**
   * Minimum price of the item.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "itemMinPrice" })
  itemMinPrice?: number;

  /**
   * Date when the Promotion or Tax was last modified.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastModified" })
  lastModified?: string;

  /**
   * SKU first list for the promotion **Buy Together**.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "listSku1BuyTogether" })
  listSku1BuyTogether?: any[];

  /**
   * SKU second list for the promotion **Buy Together**.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "listSku2BuyTogether" })
  listSku2BuyTogether?: any[];

  /**
   * Promotion or Tax Marketing tags.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "marketingTags" })
  marketingTags?: string[];

  /**
   * If set to `false`, this Promotion or Tax will be applied to any marketing tag present on the `marketingTags` field. If set to `true`, marketing tags present on that field will make this Promotion or Tax not to be applied.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "marketingTagsAreNotInclusive" })
  marketingTagsAreNotInclusive?: boolean;

  /**
   * Maximum value for installment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxInstallment" })
  maxInstallment?: number;

  /**
   * The maximum number of affected items for a promotion.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxNumberOfAffectedItems" })
  maxNumberOfAffectedItems?: number;

  /**
   * The maximum number of affected items by group key for a promotion.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxNumberOfAffectedItemsGroupKey" })
  maxNumberOfAffectedItemsGroupKey?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "maxPricesPerItems" })
  maxPricesPerItems?: any[];

  /**
   * Defines how many times the Promotion or Tax can be used.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxUsage" })
  maxUsage?: number;

  /**
   * Defines if the promotion can be used multiple times per client.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxUsagePerClient" })
  maxUsagePerClient?: number;

  /**
   * The maximum price for each item of the purchase will be the price set up.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maximumUnitPriceDiscount" })
  maximumUnitPriceDiscount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "merchants" })
  merchants?: any[];

  /**
   * Minimum value for installment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "minInstallment" })
  minInstallment?: number;

  /**
   * Minimum quantity for **Buy Together** promotion.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "minimumQuantityBuyTogether" })
  minimumQuantityBuyTogether?: number;

  /**
   * Defines if the promotion can be used multiple times per client.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "multipleUsePerClient" })
  multipleUsePerClient?: boolean;

  /**
   * Promotion name or Tax name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * New time offset from UTC in seconds.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "newOffset" })
  newOffset?: number;

  /**
   * Exact discount to be applied for the total purchase value.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nominalDiscountValue" })
  nominalDiscountValue?: number;

  /**
   * Nominal value for rewards program.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nominalRewardValue" })
  nominalRewardValue?: number;

  /**
   * Exact discount to be applied for the shipping value.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nominalShippingDiscountValue" })
  nominalShippingDiscountValue?: number;

  /**
   * Nominal Tax.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nominalTax" })
  nominalTax?: number;

  /**
   * Time offset from UTC in seconds.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "offset" })
  offset?: number;

  /**
   * Order status reward value.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "orderStatusRewardValue" })
  orderStatusRewardValue?: string;

  /**
   * Origin of the Promotion or Tax, `marketplace` or `Fulfillment`.  Read [Difference between orders with marketplace and fulfillment sources](https://help.vtex.com/en/tutorial/what-are-orders-with-marketplace-source-and-orders-with-fulfillment-source--6eVYrmUAwMOeKICU2KuG06) for more information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "origin" })
  origin?: string;

  /**
   * Array composed by all the Payments Methods that activate this Promotion or Tax.
   */
  @SpeakeasyMetadata({
    elemType: CreateOrUpdateCalculatorConfigurationRequestBodyPaymentsMethods,
  })
  @Expose({ name: "paymentsMethods" })
  @Type(() => CreateOrUpdateCalculatorConfigurationRequestBodyPaymentsMethods)
  paymentsMethods?: CreateOrUpdateCalculatorConfigurationRequestBodyPaymentsMethods[];

  @SpeakeasyMetadata()
  @Expose({ name: "paymentsRules" })
  paymentsRules?: any[];

  /**
   * Percentage discount to be applied for total purchase value.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "percentualDiscountValue" })
  percentualDiscountValue?: number;

  /**
   * Percentual discount value list.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "percentualDiscountValueList" })
  percentualDiscountValueList?: number[];

  /**
   * Valid discounts for the SKUs in `listSku1BuyTogether`, discount list used for Buy Together Promotions.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "percentualDiscountValueList1" })
  percentualDiscountValueList1?: number;

  /**
   * Equivalent to `percentualDiscountValueList1`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "percentualDiscountValueList2" })
  percentualDiscountValueList2?: number;

  /**
   * Percentage value for rewards program.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "percentualRewardValue" })
  percentualRewardValue?: number;

  /**
   * Percentage discount to be applied for shipping value.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "percentualShippingDiscountValue" })
  percentualShippingDiscountValue?: number;

  /**
   * Percentual Tax over purchase total value.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "percentualTax" })
  percentualTax?: number;

  /**
   * Object composed by the products that will activate or deactivate the Promotion or Tax.
   */
  @SpeakeasyMetadata({
    elemType: CreateOrUpdateCalculatorConfigurationRequestBodyProducts,
  })
  @Expose({ name: "products" })
  @Type(() => CreateOrUpdateCalculatorConfigurationRequestBodyProducts)
  products?: CreateOrUpdateCalculatorConfigurationRequestBodyProducts[];

  /**
   * If set to `true`, this Promotion or Tax will be applied to any product present on the `products` field. If set to `false`, products present on that field will make this Promotion or Tax not to be applied.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "productsAreInclusive" })
  productsAreInclusive?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "productsSpecifications" })
  productsSpecifications?: any[];

  /**
   * Quantity to affect **Buy Together** promotion.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "quantityToAffectBuyTogether" })
  quantityToAffectBuyTogether?: number;

  /**
   * Percentual Shipping Discount Value.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rebatePercentualDiscountValue" })
  rebatePercentualDiscountValue?: number;

  /**
   * The discount will be granted if the card's BIN is given.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "restrictionsBins" })
  restrictionsBins?: string[];

  /**
   * Shipping Percentual Tax over purchase total value.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shippingPercentualTax" })
  shippingPercentualTax?: number;

  /**
   * Should distribute discount among matched items.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shouldDistributeDiscountAmongMatchedItems" })
  shouldDistributeDiscountAmongMatchedItems?: boolean;

  /**
   * Object composed by the SKUs that will activate or deactivate the Promotion or Tax.
   */
  @SpeakeasyMetadata({
    elemType: CreateOrUpdateCalculatorConfigurationRequestBodySkus,
  })
  @Expose({ name: "skus" })
  @Type(() => CreateOrUpdateCalculatorConfigurationRequestBodySkus)
  skus?: CreateOrUpdateCalculatorConfigurationRequestBodySkus[];

  /**
   * If set to `true`, this Promotion or Tax will be applied to any SKU present on the `skus` field. If set to `false`, SKUs present on that field will make this Promotion or Tax not to be applied.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "skusAreInclusive" })
  skusAreInclusive?: boolean;

  /**
   * SKU Gift Object. Total discount on the product value set as a gift.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "skusGift" })
  @Type(() => CreateOrUpdateCalculatorConfigurationRequestBodySkusGift)
  skusGift?: CreateOrUpdateCalculatorConfigurationRequestBodySkusGift;

  /**
   * The discount will be granted if the shipping method is the same as the one given.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "slasIds" })
  slasIds?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "stores" })
  stores?: any[];

  @SpeakeasyMetadata()
  @Expose({ name: "storesAreInclusive" })
  storesAreInclusive?: boolean;

  /**
   * Maximum chart value to activate the Promotion or Tax.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalValueCeling" })
  totalValueCeling?: number;

  /**
   * Minimum chart value to activate the Promotion or Tax.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalValueFloor" })
  totalValueFloor?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "totalValueIncludeAllItems" })
  totalValueIncludeAllItems?: boolean;

  /**
   * Defines if products that already are receiving a promotion will be considered on the chart total value. There are three options available: `IncludeMatchedItems`, `ExcludeMatchedItems`, `AllItems`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalValueMode" })
  totalValueMode?: string;

  /**
   * Total value a client must have in past orders to activate the Promotion or Tax.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalValuePurchase" })
  totalValuePurchase?: number;

  /**
   * Defines what is the type of the promotion or indicates if it is a tax. Possible values: `regular` ([Regular Promotion](https://help.vtex.com/tutorial/regular-promotion--tutorials_327)), `combo` ([Buy Together](https://help.vtex.com/en/tutorial/buy-together--tutorials_323)), `forThePriceOf` ([More for Less](https://help.vtex.com/en/tutorial/creating-a-more-for-less-promotion--tutorials_325)), `progressive` ([Progressive Discount](https://help.vtex.com/en/tutorial/progressive-discount--tutorials_324)), `buyAndWin` ([Buy One Get One](https://help.vtex.com/en/tutorial/buy-one-get-one--tutorials_322)), `maxPricePerItem` (Deprecated), `campaign` ([Campaign Promotion](https://help.vtex.com/en/tutorial/campaign-promotion--1ChYXhK2AQGuS6wAqS8Ume)), `tax` (Tax), `multipleEffects` (Multiple Effects).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;

  /**
   * Use new progressive algorithm.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "useNewProgressiveAlgorithm" })
  useNewProgressiveAlgorithm?: boolean;

  /**
   * Coupon utmCampaign code.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "utmCampaign" })
  utmCampaign?: string;

  /**
   * Coupon utmSource code.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "utmSource" })
  utmSource?: string;

  /**
   * Range of the zip code that applies the promotion.
   */
  @SpeakeasyMetadata({
    elemType: CreateOrUpdateCalculatorConfigurationRequestBodyZipCodeRanges,
  })
  @Expose({ name: "zipCodeRanges" })
  @Type(() => CreateOrUpdateCalculatorConfigurationRequestBodyZipCodeRanges)
  zipCodeRanges?: CreateOrUpdateCalculatorConfigurationRequestBodyZipCodeRanges[];
}

export class CreateOrUpdateCalculatorConfigurationRequest extends SpeakeasyBase {
  /**
   * HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
   */
  @SpeakeasyMetadata({ data: "header, style=simple;explode=false;name=Accept" })
  accept: string;

  /**
   * Type of the content being sent.
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=Content-Type",
  })
  contentType: string;

  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateOrUpdateCalculatorConfigurationRequestBody;
}

/**
 * Object with information of the affiliate.
 */
export class CreateOrUpdateCalculatorConfiguration200ApplicationJSONAffiliates extends SpeakeasyBase {
  /**
   * Affiliate ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Affiliate Name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

/**
 * Object with information of the brand.
 */
export class CreateOrUpdateCalculatorConfiguration200ApplicationJSONBrands extends SpeakeasyBase {
  /**
   * Brand ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Brand Name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

/**
 * Object with information of the category.
 */
export class CreateOrUpdateCalculatorConfiguration200ApplicationJSONCategories extends SpeakeasyBase {
  /**
   * Category ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Category Name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

/**
 * Object with information of the collection.
 */
export class CreateOrUpdateCalculatorConfiguration200ApplicationJSONCollections extends SpeakeasyBase {
  /**
   * Collection ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Collection Name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

/**
 * Object with information of the Payment Method.
 */
export class CreateOrUpdateCalculatorConfiguration200ApplicationJSONPaymentsMethods extends SpeakeasyBase {
  /**
   * Payment Method ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Payment Method Name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

/**
 * Object with information of the product.
 */
export class CreateOrUpdateCalculatorConfiguration200ApplicationJSONProducts extends SpeakeasyBase {
  /**
   * Product ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Product Name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

/**
 * Object with information of the SKU.
 */
export class CreateOrUpdateCalculatorConfiguration200ApplicationJSONSkus extends SpeakeasyBase {
  /**
   * SKU ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * SKU Name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

/**
 * SKU Gift Object. Total discount on the product value set as a gift.
 */
export class CreateOrUpdateCalculatorConfiguration200ApplicationJSONSkusGift extends SpeakeasyBase {
  /**
   * Array with SKU Gifts IDs.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gifts" })
  gifts?: number;

  /**
   * Quantity of SKU Gifts.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "quantitySelectable" })
  quantitySelectable?: number;
}

/**
 * OK
 */
export class CreateOrUpdateCalculatorConfiguration200ApplicationJSON extends SpeakeasyBase {
  /**
   * Maximum shipping value.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "absoluteShippingDiscountValue" })
  absoluteShippingDiscountValue?: number;

  /**
   * Allows the promotion to apply to products whose prices have been manually added by a call-center operator.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accumulateWithManualPrice" })
  accumulateWithManualPrice?: boolean;

  /**
   * If set as `true`, it activates gifts Multiplier.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "activateGiftsMultiplier" })
  activateGiftsMultiplier?: boolean;

  /**
   * Defines which days of the week the promotion will applied.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "activeDaysOfWeek" })
  activeDaysOfWeek?: string[];

  /**
   * Marketplace order identifier. The discount will apply to selected affiliates.
   */
  @SpeakeasyMetadata({
    elemType: CreateOrUpdateCalculatorConfiguration200ApplicationJSONAffiliates,
  })
  @Expose({ name: "affiliates" })
  @Type(() => CreateOrUpdateCalculatorConfiguration200ApplicationJSONAffiliates)
  affiliates?: CreateOrUpdateCalculatorConfiguration200ApplicationJSONAffiliates[];

  /**
   * Promotion will be applied to all kind of shipping.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "applyToAllShippings" })
  applyToAllShippings?: boolean;

  /**
   * If set to `false`, this promotion will be applied to any trade policies present on the `idsSalesChannel` field. If set to `true`, trade policies present on that field will make this promotion not to be applied.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "areSalesChannelIdsExclusive" })
  areSalesChannelIdsExclusive?: boolean;

  /**
   * Promotion Begin Date (UTC).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "beginDateUtc" })
  beginDateUtc?: string;

  /**
   * Object composed by the brands that will activate or deactivate the promotion.
   */
  @SpeakeasyMetadata({
    elemType: CreateOrUpdateCalculatorConfiguration200ApplicationJSONBrands,
  })
  @Expose({ name: "brands" })
  @Type(() => CreateOrUpdateCalculatorConfiguration200ApplicationJSONBrands)
  brands?: CreateOrUpdateCalculatorConfiguration200ApplicationJSONBrands[];

  /**
   * If set to `true`, this promotion will be applied to any brand present on the `brands` field. If set to `false`, brands present on that field will make this promotion not to be applied.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "brandsAreInclusive" })
  brandsAreInclusive?: boolean;

  /**
   * Campaign Audiences that activate this promotion.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "campaigns" })
  campaigns?: any[];

  @SpeakeasyMetadata()
  @Expose({ name: "cardIssuers" })
  cardIssuers?: any[];

  /**
   * Object composed by the categories that will activate or deactivate the promotion.
   */
  @SpeakeasyMetadata({
    elemType: CreateOrUpdateCalculatorConfiguration200ApplicationJSONCategories,
  })
  @Expose({ name: "categories" })
  @Type(() => CreateOrUpdateCalculatorConfiguration200ApplicationJSONCategories)
  categories?: CreateOrUpdateCalculatorConfiguration200ApplicationJSONCategories[];

  /**
   * If set to `true`, this promotion will be applied to any category present on the `categories` field. If set to `false`, categories present on that field will make this promotion not to be applied.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "categoriesAreInclusive" })
  categoriesAreInclusive?: boolean;

  /**
   * An expression to use with clusters.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clusterExpressions" })
  clusterExpressions?: string[];

  /**
   * Object composed by the collections that will activate or deactivate the promotion.
   */
  @SpeakeasyMetadata({
    elemType:
      CreateOrUpdateCalculatorConfiguration200ApplicationJSONCollections,
  })
  @Expose({ name: "collections" })
  @Type(
    () => CreateOrUpdateCalculatorConfiguration200ApplicationJSONCollections
  )
  collections?: CreateOrUpdateCalculatorConfiguration200ApplicationJSONCollections[];

  /**
   * Collections that will generate the promotion, type **Buy Together**, **More for less**, **Progressive Discount**, **Buy One Get One**.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "collections1BuyTogether" })
  collections1BuyTogether?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "collections2BuyTogether" })
  collections2BuyTogether?: any[];

  /**
   * If set to `true`, this promotion will be applied to any collection present on the `collections` field. If set to `false`, collections present on that field will make this promotion not to be applied.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "collectionsIsInclusive" })
  collectionsIsInclusive?: boolean;

  /**
   * If the **List Price** and **Price** are the same.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "compareListPriceAndPrice" })
  compareListPriceAndPrice?: boolean;

  /**
   * Array with conditions IDs.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "conditionsIds" })
  conditionsIds?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "coupon" })
  coupon?: any[];

  /**
   * Defines if a promotion can accumulate with another one. (`true`) or not (`false`).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cumulative" })
  cumulative?: boolean;

  /**
   * Number of days that are considered to add the purchase history.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "daysAgoOfPurchases" })
  daysAgoOfPurchases?: number;

  /**
   * Promotion internal description.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "disableDeal" })
  disableDeal?: boolean;

  /**
   * The type of discount that will apply to the promotion.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "discountType" })
  discountType?: string;

  /**
   * Enable **Buy Together** per SKU.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enableBuyTogetherPerSku" })
  enableBuyTogetherPerSku?: boolean;

  /**
   * Promotion End Date (UTC).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "endDateUtc" })
  endDateUtc?: string;

  /**
   * Applies the discount even if the user is not logged.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firstBuyIsProfileOptimistic" })
  firstBuyIsProfileOptimistic?: boolean;

  /**
   * Gifts List Type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "giftListTypes" })
  giftListTypes?: string[];

  /**
   * Promotion ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "idCalculatorConfiguration" })
  idCalculatorConfiguration?: string;

  /**
   * Seller Name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "idSeller" })
  idSeller?: string;

  /**
   * If set to `true`, this promotion will be applied to any seller present on the `idSeller` field. If set to `false`, sellers present on that field will make this promotion not to be applied.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "idSellerIsInclusive" })
  idSellerIsInclusive?: boolean;

  /**
   * List of Trade Policies that activate this promotion.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "idsSalesChannel" })
  idsSalesChannel?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "installment" })
  installment?: number;

  /**
   * If set as `true` the Promotion is activated. If set as `false` the Promotion is deactivated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isActive" })
  isActive?: boolean;

  /**
   * If set as `true` the Promotion is archived. If set as `false` the Promotion is not archived.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isArchived" })
  isArchived?: boolean;

  /**
   * Applies the promotion only if the list price and price is different.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isDifferentListPriceAndPrice" })
  isDifferentListPriceAndPrice?: boolean;

  /**
   * Insert a flag with the promotion name used in the product's window display and page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isFeatured" })
  isFeatured?: boolean;

  /**
   * Applies the discount only if it's a first buy.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isFirstBuy" })
  isFirstBuy?: boolean;

  /**
   * Set if the promotion will be applied considering a minimum and maximum values for installments.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isMinMaxInstallments" })
  isMinMaxInstallments?: boolean;

  /**
   * Applies selected discount only when one of the defined shipping method is selected by the customer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isSlaSelected" })
  isSlaSelected?: boolean;

  /**
   * Maximum price of the item.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "itemMaxPrice" })
  itemMaxPrice?: number;

  /**
   * Minimum price of the item.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "itemMinPrice" })
  itemMinPrice?: number;

  /**
   * When the Promotion was last modified.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastModified" })
  lastModified?: string;

  /**
   * SKU first list for the promotion **Buy Together**.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "listSku1BuyTogether" })
  listSku1BuyTogether?: any[];

  /**
   * SKU second list for the promotion **Buy Together**.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "listSku2BuyTogether" })
  listSku2BuyTogether?: any[];

  /**
   * Promotion Marketing tags.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "marketingTags" })
  marketingTags?: string[];

  /**
   * If set to `false`, this promotion will be applied to any marketing tag present on the `marketingTags` field. If set to `true`, marketing tags present on that field will make this promotion not to be applied.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "marketingTagsAreNotInclusive" })
  marketingTagsAreNotInclusive?: boolean;

  /**
   * Maximum value for installment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxInstallment" })
  maxInstallment?: number;

  /**
   * The maximum number of affected items for a promotion.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxNumberOfAffectedItems" })
  maxNumberOfAffectedItems?: number;

  /**
   * The maximum number of affected items by group key for a promotion.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxNumberOfAffectedItemsGroupKey" })
  maxNumberOfAffectedItemsGroupKey?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "maxPricesPerItems" })
  maxPricesPerItems?: any[];

  /**
   * Defines how many times the promotion can be used.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxUsage" })
  maxUsage?: number;

  /**
   * Defines if the promotion can be used multiple times per client.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxUsagePerClient" })
  maxUsagePerClient?: number;

  /**
   * The maximum price for each item of the purchase will be the price set up.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maximumUnitPriceDiscount" })
  maximumUnitPriceDiscount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "merchants" })
  merchants?: any[];

  /**
   * Minimum value for installment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "minInstallment" })
  minInstallment?: number;

  /**
   * Minimum quantity for **Buy Together** promotion.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "minimumQuantityBuyTogether" })
  minimumQuantityBuyTogether?: number;

  /**
   * Defines if the promotion can be used multiple times per client.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "multipleUsePerClient" })
  multipleUsePerClient?: boolean;

  /**
   * Promotion Name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * New time offset from UTC in seconds.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "newOffset" })
  newOffset?: number;

  /**
   * Exact discount to be applied for the total purchase value.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nominalDiscountValue" })
  nominalDiscountValue?: number;

  /**
   * Nominal value for rewards program.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nominalRewardValue" })
  nominalRewardValue?: number;

  /**
   * Exact discount to be applied for the shipping value.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nominalShippingDiscountValue" })
  nominalShippingDiscountValue?: number;

  /**
   * Nominal Tax.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nominalTax" })
  nominalTax?: number;

  /**
   * Time offset from UTC in seconds.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "offset" })
  offset?: number;

  /**
   * Order status reward value.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "orderStatusRewardValue" })
  orderStatusRewardValue?: string;

  /**
   * Origin of the promotion, `marketplace` or `Fulfillment`.  Read [Difference between orders with marketplace and fulfillment sources](https://help.vtex.com/en/tutorial/what-are-orders-with-marketplace-source-and-orders-with-fulfillment-source--6eVYrmUAwMOeKICU2KuG06) for more information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "origin" })
  origin?: string;

  /**
   * Array composed by all the Payments Methods.
   */
  @SpeakeasyMetadata({
    elemType:
      CreateOrUpdateCalculatorConfiguration200ApplicationJSONPaymentsMethods,
  })
  @Expose({ name: "paymentsMethods" })
  @Type(
    () => CreateOrUpdateCalculatorConfiguration200ApplicationJSONPaymentsMethods
  )
  paymentsMethods?: CreateOrUpdateCalculatorConfiguration200ApplicationJSONPaymentsMethods[];

  @SpeakeasyMetadata()
  @Expose({ name: "paymentsRules" })
  paymentsRules?: any[];

  /**
   * Percentage discount to be applied for total purchase value.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "percentualDiscountValue" })
  percentualDiscountValue?: number;

  /**
   * Percentual discount value list.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "percentualDiscountValueList" })
  percentualDiscountValueList?: number[];

  /**
   * Valid discounts for the SKUs in `listSku1BuyTogether`, discount list used for Buy Together Promotions.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "percentualDiscountValueList1" })
  percentualDiscountValueList1?: number;

  /**
   * Equivalent to `percentualDiscountValueList1`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "percentualDiscountValueList2" })
  percentualDiscountValueList2?: number;

  /**
   * Percentage value for rewards program.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "percentualRewardValue" })
  percentualRewardValue?: number;

  /**
   * Percentage discount to be applied for shipping value.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "percentualShippingDiscountValue" })
  percentualShippingDiscountValue?: number;

  /**
   * Percentual Tax over purchase total value.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "percentualTax" })
  percentualTax?: number;

  /**
   * Object composed by the products that will activate or deactivate the promotion.
   */
  @SpeakeasyMetadata({
    elemType: CreateOrUpdateCalculatorConfiguration200ApplicationJSONProducts,
  })
  @Expose({ name: "products" })
  @Type(() => CreateOrUpdateCalculatorConfiguration200ApplicationJSONProducts)
  products?: CreateOrUpdateCalculatorConfiguration200ApplicationJSONProducts[];

  /**
   * If set to `true`, this promotion will be applied to any product present on the `products` field. If set to `false`, products present on that field will make this promotion not to be applied.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "productsAreInclusive" })
  productsAreInclusive?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "productsSpecifications" })
  productsSpecifications?: any[];

  /**
   * Quantity to affect **Buy Together** promotion.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "quantityToAffectBuyTogether" })
  quantityToAffectBuyTogether?: number;

  /**
   * Percentual Shipping Discount Value.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rebatePercentualDiscountValue" })
  rebatePercentualDiscountValue?: number;

  /**
   * The discount will be granted if the card's BIN is given.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "restrictionsBins" })
  restrictionsBins?: string[];

  /**
   * Shipping Percentual Tax over purchase total value.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shippingPercentualTax" })
  shippingPercentualTax?: number;

  /**
   * Should distribute discount among matched items.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shouldDistributeDiscountAmongMatchedItems" })
  shouldDistributeDiscountAmongMatchedItems?: boolean;

  /**
   * Object composed by the SKUs that will activate or deactivate the promotion.
   */
  @SpeakeasyMetadata({
    elemType: CreateOrUpdateCalculatorConfiguration200ApplicationJSONSkus,
  })
  @Expose({ name: "skus" })
  @Type(() => CreateOrUpdateCalculatorConfiguration200ApplicationJSONSkus)
  skus?: CreateOrUpdateCalculatorConfiguration200ApplicationJSONSkus[];

  /**
   * If set to `true`, this promotion will be applied to any SKU present on the `skus` field. If set to `false`, SKUs present on that field will make this promotion not to be applied.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "skusAreInclusive" })
  skusAreInclusive?: boolean;

  /**
   * SKU Gift Object. Total discount on the product value set as a gift.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "skusGift" })
  @Type(() => CreateOrUpdateCalculatorConfiguration200ApplicationJSONSkusGift)
  skusGift?: CreateOrUpdateCalculatorConfiguration200ApplicationJSONSkusGift;

  /**
   * The discount will be granted if the shipping method is the same as the one given.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "slasIds" })
  slasIds?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "stores" })
  stores?: any[];

  @SpeakeasyMetadata()
  @Expose({ name: "storesAreInclusive" })
  storesAreInclusive?: boolean;

  /**
   * Maximum chart value to activate the promotion.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalValueCeling" })
  totalValueCeling?: number;

  /**
   * Minimum chart value to activate the promotion.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalValueFloor" })
  totalValueFloor?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "totalValueIncludeAllItems" })
  totalValueIncludeAllItems?: boolean;

  /**
   * Defines if products that already are receiving a promotion will be considered on the chart total value. There are three options available: `IncludeMatchedItems`, `ExcludeMatchedItems`, `AllItems`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalValueMode" })
  totalValueMode?: string;

  /**
   * Total value a client must have in past orders to active the promotion.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalValuePurchase" })
  totalValuePurchase?: number;

  /**
   * Defines what is the type of the promotion or indicates if it is a tax. Possible values: `regular` ([Regular Promotion](https://help.vtex.com/tutorial/regular-promotion--tutorials_327)), `combo` ([Buy Together](https://help.vtex.com/en/tutorial/buy-together--tutorials_323)), `forThePriceOf` ([More for Less](https://help.vtex.com/en/tutorial/creating-a-more-for-less-promotion--tutorials_325)), `progressive` ([Progressive Discount](https://help.vtex.com/en/tutorial/progressive-discount--tutorials_324)), `buyAndWin` ([Buy One Get One](https://help.vtex.com/en/tutorial/buy-one-get-one--tutorials_322)), `maxPricePerItem` (Deprecated), `campaign` ([Campaign Promotion](https://help.vtex.com/en/tutorial/campaign-promotion--1ChYXhK2AQGuS6wAqS8Ume)), `tax` (Tax), `multipleEffects` (Multiple Effects).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;

  /**
   * Use new progressive algorithm.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "useNewProgressiveAlgorithm" })
  useNewProgressiveAlgorithm?: boolean;

  /**
   * Coupon utmCampaign code.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "utmCampaign" })
  utmCampaign?: string;

  /**
   * Coupon utmSource code.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "utmSource" })
  utmSource?: string;

  /**
   * Range of the zip code that applies the promotion.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "zipCodeRanges" })
  zipCodeRanges?: any[];
}

export class CreateOrUpdateCalculatorConfigurationResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  createOrUpdateCalculatorConfiguration200ApplicationJSONObject?: CreateOrUpdateCalculatorConfiguration200ApplicationJSON;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
