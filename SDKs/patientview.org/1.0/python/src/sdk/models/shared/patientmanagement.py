"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import fhircondition as shared_fhircondition
from ..shared import fhirencounter as shared_fhirencounter
from ..shared import fhirobservation as shared_fhirobservation
from ..shared import fhirpatient as shared_fhirpatient
from ..shared import fhirpractitioner as shared_fhirpractitioner
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientManagement:
    r"""patientManagement"""
    
    condition: Optional[shared_fhircondition.FhirCondition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('condition'), 'exclude': lambda f: f is None }})  
    encounters: Optional[list[shared_fhirencounter.FhirEncounter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encounters'), 'exclude': lambda f: f is None }})  
    group_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupCode'), 'exclude': lambda f: f is None }})  
    identifier: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identifier'), 'exclude': lambda f: f is None }})  
    observations: Optional[list[shared_fhirobservation.FhirObservation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('observations'), 'exclude': lambda f: f is None }})  
    patient: Optional[shared_fhirpatient.FhirPatient] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('patient'), 'exclude': lambda f: f is None }})  
    practitioners: Optional[list[shared_fhirpractitioner.FhirPractitioner]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('practitioners'), 'exclude': lambda f: f is None }})  
    