/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Initialize Identity Platform for a Cloud project. Identity Platform is an end-to-end authentication system for third-party users to access your apps and services. These could include mobile/web apps, games, APIs and beyond. This is the publicly available variant of EnableIdentityPlatform that is only available to billing-enabled projects.
   */
  identitytoolkitProjectsIdentityPlatformInitializeAuth(
    req: operations.IdentitytoolkitProjectsIdentityPlatformInitializeAuthRequest,
    security: operations.IdentitytoolkitProjectsIdentityPlatformInitializeAuthSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.IdentitytoolkitProjectsIdentityPlatformInitializeAuthResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.IdentitytoolkitProjectsIdentityPlatformInitializeAuthRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/{project}/identityPlatform:initializeAuth",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.IdentitytoolkitProjectsIdentityPlatformInitializeAuthSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.IdentitytoolkitProjectsIdentityPlatformInitializeAuthResponse =
        new operations.IdentitytoolkitProjectsIdentityPlatformInitializeAuthResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudIdentitytoolkitAdminV2InitializeIdentityPlatformResponse =
              utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a tenant. Requires write permission on the Agent project.
   */
  identitytoolkitProjectsTenantsCreate(
    req: operations.IdentitytoolkitProjectsTenantsCreateRequest,
    security: operations.IdentitytoolkitProjectsTenantsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.IdentitytoolkitProjectsTenantsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.IdentitytoolkitProjectsTenantsCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2/{parent}/tenants", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudIdentitytoolkitAdminV2TenantInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.IdentitytoolkitProjectsTenantsCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.IdentitytoolkitProjectsTenantsCreateResponse =
        new operations.IdentitytoolkitProjectsTenantsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudIdentitytoolkitAdminV2Tenant = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudIdentitytoolkitAdminV2Tenant
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a default supported Idp configuration for an Identity Toolkit project.
   */
  identitytoolkitProjectsTenantsDefaultSupportedIdpConfigsCreate(
    req: operations.IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsCreateRequest,
    security: operations.IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/{parent}/defaultSupportedIdpConfigs",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsCreateResponse =
        new operations.IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all default supported Idp configurations for an Identity Toolkit project.
   */
  identitytoolkitProjectsTenantsDefaultSupportedIdpConfigsList(
    req: operations.IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsListRequest,
    security: operations.IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/{parent}/defaultSupportedIdpConfigs",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsListResponse =
        new operations.IdentitytoolkitProjectsTenantsDefaultSupportedIdpConfigsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudIdentitytoolkitAdminV2ListDefaultSupportedIdpConfigsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudIdentitytoolkitAdminV2ListDefaultSupportedIdpConfigsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the access control policy for a resource. An error is returned if the resource does not exist. An empty policy is returned if the resource exists but does not have a policy set on it. Caller must have the right Google IAM permission on the resource.
   */
  identitytoolkitProjectsTenantsGetIamPolicy(
    req: operations.IdentitytoolkitProjectsTenantsGetIamPolicyRequest,
    security: operations.IdentitytoolkitProjectsTenantsGetIamPolicySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.IdentitytoolkitProjectsTenantsGetIamPolicyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.IdentitytoolkitProjectsTenantsGetIamPolicyRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/{resource}:getIamPolicy",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleIamV1GetIamPolicyRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.IdentitytoolkitProjectsTenantsGetIamPolicySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.IdentitytoolkitProjectsTenantsGetIamPolicyResponse =
        new operations.IdentitytoolkitProjectsTenantsGetIamPolicyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleIamV1Policy = utils.objectToClass(
              httpRes?.data,
              shared.GoogleIamV1Policy
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create an inbound SAML configuration for an Identity Toolkit project.
   */
  identitytoolkitProjectsTenantsInboundSamlConfigsCreate(
    req: operations.IdentitytoolkitProjectsTenantsInboundSamlConfigsCreateRequest,
    security: operations.IdentitytoolkitProjectsTenantsInboundSamlConfigsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.IdentitytoolkitProjectsTenantsInboundSamlConfigsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.IdentitytoolkitProjectsTenantsInboundSamlConfigsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/{parent}/inboundSamlConfigs",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudIdentitytoolkitAdminV2InboundSamlConfigInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.IdentitytoolkitProjectsTenantsInboundSamlConfigsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.IdentitytoolkitProjectsTenantsInboundSamlConfigsCreateResponse =
        new operations.IdentitytoolkitProjectsTenantsInboundSamlConfigsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudIdentitytoolkitAdminV2InboundSamlConfig =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudIdentitytoolkitAdminV2InboundSamlConfig
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all inbound SAML configurations for an Identity Toolkit project.
   */
  identitytoolkitProjectsTenantsInboundSamlConfigsList(
    req: operations.IdentitytoolkitProjectsTenantsInboundSamlConfigsListRequest,
    security: operations.IdentitytoolkitProjectsTenantsInboundSamlConfigsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.IdentitytoolkitProjectsTenantsInboundSamlConfigsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.IdentitytoolkitProjectsTenantsInboundSamlConfigsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/{parent}/inboundSamlConfigs",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.IdentitytoolkitProjectsTenantsInboundSamlConfigsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.IdentitytoolkitProjectsTenantsInboundSamlConfigsListResponse =
        new operations.IdentitytoolkitProjectsTenantsInboundSamlConfigsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudIdentitytoolkitAdminV2ListInboundSamlConfigsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudIdentitytoolkitAdminV2ListInboundSamlConfigsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List tenants under the given agent project. Requires read permission on the Agent project.
   */
  identitytoolkitProjectsTenantsList(
    req: operations.IdentitytoolkitProjectsTenantsListRequest,
    security: operations.IdentitytoolkitProjectsTenantsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.IdentitytoolkitProjectsTenantsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.IdentitytoolkitProjectsTenantsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2/{parent}/tenants", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.IdentitytoolkitProjectsTenantsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.IdentitytoolkitProjectsTenantsListResponse =
        new operations.IdentitytoolkitProjectsTenantsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudIdentitytoolkitAdminV2ListTenantsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudIdentitytoolkitAdminV2ListTenantsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create an Oidc Idp configuration for an Identity Toolkit project.
   */
  identitytoolkitProjectsTenantsOauthIdpConfigsCreate(
    req: operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsCreateRequest,
    security: operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/{parent}/oauthIdpConfigs",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudIdentitytoolkitAdminV2OAuthIdpConfig",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsCreateResponse =
        new operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudIdentitytoolkitAdminV2OAuthIdpConfig =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete an Oidc Idp configuration for an Identity Toolkit project.
   */
  identitytoolkitProjectsTenantsOauthIdpConfigsDelete(
    req: operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsDeleteRequest,
    security: operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsDeleteRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsDeleteResponse =
        new operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsDeleteResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleProtobufEmpty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve an Oidc Idp configuration for an Identity Toolkit project.
   */
  identitytoolkitProjectsTenantsOauthIdpConfigsGet(
    req: operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsGetRequest,
    security: operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsGetRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsGetResponse =
        new operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsGetResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudIdentitytoolkitAdminV2OAuthIdpConfig =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all Oidc Idp configurations for an Identity Toolkit project.
   */
  identitytoolkitProjectsTenantsOauthIdpConfigsList(
    req: operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsListRequest,
    security: operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/{parent}/oauthIdpConfigs",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsListResponse =
        new operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudIdentitytoolkitAdminV2ListOAuthIdpConfigsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudIdentitytoolkitAdminV2ListOAuthIdpConfigsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update an Oidc Idp configuration for an Identity Toolkit project.
   */
  identitytoolkitProjectsTenantsOauthIdpConfigsPatch(
    req: operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsPatchRequest,
    security: operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsPatchRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudIdentitytoolkitAdminV2OAuthIdpConfig",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsPatchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsPatchResponse =
        new operations.IdentitytoolkitProjectsTenantsOauthIdpConfigsPatchResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudIdentitytoolkitAdminV2OAuthIdpConfig =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Sets the access control policy for a resource. If the policy exists, it is replaced. Caller must have the right Google IAM permission on the resource.
   */
  identitytoolkitProjectsTenantsSetIamPolicy(
    req: operations.IdentitytoolkitProjectsTenantsSetIamPolicyRequest,
    security: operations.IdentitytoolkitProjectsTenantsSetIamPolicySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.IdentitytoolkitProjectsTenantsSetIamPolicyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.IdentitytoolkitProjectsTenantsSetIamPolicyRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/{resource}:setIamPolicy",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleIamV1SetIamPolicyRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.IdentitytoolkitProjectsTenantsSetIamPolicySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.IdentitytoolkitProjectsTenantsSetIamPolicyResponse =
        new operations.IdentitytoolkitProjectsTenantsSetIamPolicyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleIamV1Policy = utils.objectToClass(
              httpRes?.data,
              shared.GoogleIamV1Policy
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the caller's permissions on a resource. An error is returned if the resource does not exist. A caller is not required to have Google IAM permission to make this request.
   */
  identitytoolkitProjectsTenantsTestIamPermissions(
    req: operations.IdentitytoolkitProjectsTenantsTestIamPermissionsRequest,
    security: operations.IdentitytoolkitProjectsTenantsTestIamPermissionsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.IdentitytoolkitProjectsTenantsTestIamPermissionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.IdentitytoolkitProjectsTenantsTestIamPermissionsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/{resource}:testIamPermissions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleIamV1TestIamPermissionsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.IdentitytoolkitProjectsTenantsTestIamPermissionsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.IdentitytoolkitProjectsTenantsTestIamPermissionsResponse =
        new operations.IdentitytoolkitProjectsTenantsTestIamPermissionsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleIamV1TestIamPermissionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.GoogleIamV1TestIamPermissionsResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
