"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ScanOptionsScanFrequencyEnum(str, Enum):
    ONCE = 'once'
    HOURLY = 'hourly'
    DAILY = 'daily'
    WEEKLY = 'weekly'
    MONTHLY = 'monthly'
    CONTINUOUS = 'continuous'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ScanOptions:
    
    targets: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targets') }})  
    agent: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('agent'), 'exclude': lambda f: f is None }})  
    excludes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('excludes'), 'exclude': lambda f: f is None }})  
    host_ping: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('host-ping'), 'exclude': lambda f: f is None }})  
    max_attempts: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max-attempts'), 'exclude': lambda f: f is None }})  
    max_group_size: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max-group-size'), 'exclude': lambda f: f is None }})  
    max_host_rate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max-host-rate'), 'exclude': lambda f: f is None }})  
    max_sockets: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max-sockets'), 'exclude': lambda f: f is None }})  
    max_ttl: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max-ttl'), 'exclude': lambda f: f is None }})  
    nameservers: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nameservers'), 'exclude': lambda f: f is None }})  
    passes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('passes'), 'exclude': lambda f: f is None }})  
    probes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('probes'), 'exclude': lambda f: f is None }})
    r"""Optional probe list, otherwise all probes are used"""  
    rate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rate'), 'exclude': lambda f: f is None }})  
    scan_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scan-description'), 'exclude': lambda f: f is None }})  
    scan_frequency: Optional[ScanOptionsScanFrequencyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scan-frequency'), 'exclude': lambda f: f is None }})  
    scan_grace_period: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scan-grace-period'), 'exclude': lambda f: f is None }})  
    scan_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scan-name'), 'exclude': lambda f: f is None }})  
    scan_start: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scan-start'), 'exclude': lambda f: f is None }})  
    scan_tags: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scan-tags'), 'exclude': lambda f: f is None }})  
    screenshots: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('screenshots'), 'exclude': lambda f: f is None }})  
    subnet_ping: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subnet-ping'), 'exclude': lambda f: f is None }})  
    subnet_ping_net_size: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subnet-ping-net-size'), 'exclude': lambda f: f is None }})  
    subnet_ping_sample_rate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subnet-ping-sample-rate'), 'exclude': lambda f: f is None }})  
    tcp_excludes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tcp-excludes'), 'exclude': lambda f: f is None }})  
    tcp_ports: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tcp-ports'), 'exclude': lambda f: f is None }})  
    