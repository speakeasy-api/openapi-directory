// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type DgmstSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type DgmstRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// Student Roll Number
	Rroll string `json:"RROLL"`
	// Semester / Year
	Sem string `json:"SEM"`
}

// DgmstRequestBodyFormatEnum - The format of the certificate in response.
type DgmstRequestBodyFormatEnum string

const (
	DgmstRequestBodyFormatEnumPdf DgmstRequestBodyFormatEnum = "pdf"
)

func (e DgmstRequestBodyFormatEnum) ToPointer() *DgmstRequestBodyFormatEnum {
	return &e
}

func (e *DgmstRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = DgmstRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DgmstRequestBodyFormatEnum: %v", v)
	}
}

// DgmstRequestBody - Request format
type DgmstRequestBody struct {
	CertificateParameters *DgmstRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format DgmstRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Dgmst504ApplicationJSONErrorEnum string

const (
	Dgmst504ApplicationJSONErrorEnumGatewayTimeout Dgmst504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Dgmst504ApplicationJSONErrorEnum) ToPointer() *Dgmst504ApplicationJSONErrorEnum {
	return &e
}

func (e *Dgmst504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Dgmst504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dgmst504ApplicationJSONErrorEnum: %v", v)
	}
}

type Dgmst504ApplicationJSONErrorDescriptionEnum string

const (
	Dgmst504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Dgmst504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Dgmst504ApplicationJSONErrorDescriptionEnum) ToPointer() *Dgmst504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Dgmst504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Dgmst504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dgmst504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Dgmst504ApplicationJSON - Gateway timeout
type Dgmst504ApplicationJSON struct {
	Error            *Dgmst504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dgmst504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dgmst503ApplicationJSONErrorEnum string

const (
	Dgmst503ApplicationJSONErrorEnumServiceUnavailable Dgmst503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Dgmst503ApplicationJSONErrorEnum) ToPointer() *Dgmst503ApplicationJSONErrorEnum {
	return &e
}

func (e *Dgmst503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Dgmst503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dgmst503ApplicationJSONErrorEnum: %v", v)
	}
}

type Dgmst503ApplicationJSONErrorDescriptionEnum string

const (
	Dgmst503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Dgmst503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Dgmst503ApplicationJSONErrorDescriptionEnum) ToPointer() *Dgmst503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Dgmst503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Dgmst503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dgmst503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Dgmst503ApplicationJSON - Service unavailable
type Dgmst503ApplicationJSON struct {
	Error            *Dgmst503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dgmst503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dgmst502ApplicationJSONErrorEnum string

const (
	Dgmst502ApplicationJSONErrorEnumBadGatewy Dgmst502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Dgmst502ApplicationJSONErrorEnum) ToPointer() *Dgmst502ApplicationJSONErrorEnum {
	return &e
}

func (e *Dgmst502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Dgmst502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dgmst502ApplicationJSONErrorEnum: %v", v)
	}
}

type Dgmst502ApplicationJSONErrorDescriptionEnum string

const (
	Dgmst502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Dgmst502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Dgmst502ApplicationJSONErrorDescriptionEnum) ToPointer() *Dgmst502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Dgmst502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Dgmst502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dgmst502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Dgmst502ApplicationJSON - Bad gateway
type Dgmst502ApplicationJSON struct {
	Error            *Dgmst502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dgmst502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dgmst500ApplicationJSONErrorEnum string

const (
	Dgmst500ApplicationJSONErrorEnumInternalServerError Dgmst500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Dgmst500ApplicationJSONErrorEnum) ToPointer() *Dgmst500ApplicationJSONErrorEnum {
	return &e
}

func (e *Dgmst500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Dgmst500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dgmst500ApplicationJSONErrorEnum: %v", v)
	}
}

type Dgmst500ApplicationJSONErrorDescriptionEnum string

const (
	Dgmst500ApplicationJSONErrorDescriptionEnumInternalServerError Dgmst500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Dgmst500ApplicationJSONErrorDescriptionEnum) ToPointer() *Dgmst500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Dgmst500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Dgmst500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dgmst500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Dgmst500ApplicationJSON - Internal server error
type Dgmst500ApplicationJSON struct {
	Error            *Dgmst500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dgmst500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dgmst404ApplicationJSONErrorEnum string

const (
	Dgmst404ApplicationJSONErrorEnumRecordNotFound Dgmst404ApplicationJSONErrorEnum = "record_not_found"
	Dgmst404ApplicationJSONErrorEnumURLNotFound    Dgmst404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Dgmst404ApplicationJSONErrorEnum) ToPointer() *Dgmst404ApplicationJSONErrorEnum {
	return &e
}

func (e *Dgmst404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Dgmst404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dgmst404ApplicationJSONErrorEnum: %v", v)
	}
}

type Dgmst404ApplicationJSONErrorDescriptionEnum string

const (
	Dgmst404ApplicationJSONErrorDescriptionEnumNoRecordFound               Dgmst404ApplicationJSONErrorDescriptionEnum = "No record found"
	Dgmst404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Dgmst404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Dgmst404ApplicationJSONErrorDescriptionEnum) ToPointer() *Dgmst404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Dgmst404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Dgmst404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dgmst404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Dgmst404ApplicationJSON - No record found
type Dgmst404ApplicationJSON struct {
	Error            *Dgmst404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dgmst404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dgmst401ApplicationJSONErrorEnum string

const (
	Dgmst401ApplicationJSONErrorEnumInvalidAuthentication Dgmst401ApplicationJSONErrorEnum = "invalid_authentication"
	Dgmst401ApplicationJSONErrorEnumInvalidAuthorization  Dgmst401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Dgmst401ApplicationJSONErrorEnum) ToPointer() *Dgmst401ApplicationJSONErrorEnum {
	return &e
}

func (e *Dgmst401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Dgmst401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dgmst401ApplicationJSONErrorEnum: %v", v)
	}
}

type Dgmst401ApplicationJSONErrorDescriptionEnum string

const (
	Dgmst401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Dgmst401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Dgmst401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Dgmst401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Dgmst401ApplicationJSONErrorDescriptionEnum) ToPointer() *Dgmst401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Dgmst401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Dgmst401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dgmst401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Dgmst401ApplicationJSON - Unauthorized access
type Dgmst401ApplicationJSON struct {
	Error            *Dgmst401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dgmst401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dgmst400ApplicationJSONErrorEnum string

const (
	Dgmst400ApplicationJSONErrorEnumMissingParameter Dgmst400ApplicationJSONErrorEnum = "missing_parameter"
	Dgmst400ApplicationJSONErrorEnumInvalidParameter Dgmst400ApplicationJSONErrorEnum = "invalid_parameter"
	Dgmst400ApplicationJSONErrorEnumInvalidFormat    Dgmst400ApplicationJSONErrorEnum = "invalid_format"
	Dgmst400ApplicationJSONErrorEnumInvalidTxnid     Dgmst400ApplicationJSONErrorEnum = "invalid_txnid"
	Dgmst400ApplicationJSONErrorEnumInvalidConsentid Dgmst400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Dgmst400ApplicationJSONErrorEnum) ToPointer() *Dgmst400ApplicationJSONErrorEnum {
	return &e
}

func (e *Dgmst400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Dgmst400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dgmst400ApplicationJSONErrorEnum: %v", v)
	}
}

type Dgmst400ApplicationJSONErrorDescriptionEnum string

const (
	Dgmst400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Dgmst400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Dgmst400ApplicationJSONErrorDescriptionEnumBadRequest                              Dgmst400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Dgmst400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Dgmst400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Dgmst400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Dgmst400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Dgmst400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Dgmst400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Dgmst400ApplicationJSONErrorDescriptionEnum) ToPointer() *Dgmst400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Dgmst400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Dgmst400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dgmst400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Dgmst400ApplicationJSON - Bad request
type Dgmst400ApplicationJSON struct {
	Error            *Dgmst400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dgmst400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type DgmstResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Dgmst400ApplicationJSONObject *Dgmst400ApplicationJSON
	// Unauthorized access
	Dgmst401ApplicationJSONObject *Dgmst401ApplicationJSON
	// No record found
	Dgmst404ApplicationJSONObject *Dgmst404ApplicationJSON
	// Internal server error
	Dgmst500ApplicationJSONObject *Dgmst500ApplicationJSON
	// Bad gateway
	Dgmst502ApplicationJSONObject *Dgmst502ApplicationJSON
	// Service unavailable
	Dgmst503ApplicationJSONObject *Dgmst503ApplicationJSON
	// Gateway timeout
	Dgmst504ApplicationJSONObject *Dgmst504ApplicationJSON
}
