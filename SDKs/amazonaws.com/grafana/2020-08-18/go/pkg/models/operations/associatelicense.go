// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// AssociateLicenseLicenseTypeEnum - The type of license to associate with the workspace.
type AssociateLicenseLicenseTypeEnum string

const (
	AssociateLicenseLicenseTypeEnumEnterprise          AssociateLicenseLicenseTypeEnum = "ENTERPRISE"
	AssociateLicenseLicenseTypeEnumEnterpriseFreeTrial AssociateLicenseLicenseTypeEnum = "ENTERPRISE_FREE_TRIAL"
)

func (e *AssociateLicenseLicenseTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ENTERPRISE":
		fallthrough
	case "ENTERPRISE_FREE_TRIAL":
		*e = AssociateLicenseLicenseTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AssociateLicenseLicenseTypeEnum: %s", s)
	}
}

type AssociateLicensePathParams struct {
	// The type of license to associate with the workspace.
	LicenseType AssociateLicenseLicenseTypeEnum `pathParam:"style=simple,explode=false,name=licenseType"`
	// The ID of the workspace to associate the license with.
	WorkspaceID string `pathParam:"style=simple,explode=false,name=workspaceId"`
}

type AssociateLicenseHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type AssociateLicenseRequest struct {
	PathParams AssociateLicensePathParams
	Headers    AssociateLicenseHeaders
}

type AssociateLicenseResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// Success
	AssociateLicenseResponse *shared.AssociateLicenseResponse
	ContentType              string
	// InternalServerException
	InternalServerException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
