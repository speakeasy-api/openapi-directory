/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { AttributeDimension } from "./attributedimension";
import { MetricDimension } from "./metricdimension";
import { SegmentBehaviors } from "./segmentbehaviors";
import { SegmentDemographics } from "./segmentdemographics";
import { SegmentLocation } from "./segmentlocation";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Specifies the dimension settings for a segment.
 */
export class SegmentDimensions extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: AttributeDimension })
  @Expose({ name: "Attributes" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, AttributeDimension> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], AttributeDimension);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  attributes?: Record<string, AttributeDimension>;

  @SpeakeasyMetadata()
  @Expose({ name: "Behavior" })
  @Type(() => SegmentBehaviors)
  behavior?: SegmentBehaviors;

  @SpeakeasyMetadata()
  @Expose({ name: "Demographic" })
  @Type(() => SegmentDemographics)
  demographic?: SegmentDemographics;

  @SpeakeasyMetadata()
  @Expose({ name: "Location" })
  @Type(() => SegmentLocation)
  location?: SegmentLocation;

  @SpeakeasyMetadata({ elemType: MetricDimension })
  @Expose({ name: "Metrics" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, MetricDimension> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], MetricDimension);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  metrics?: Record<string, MetricDimension>;

  @SpeakeasyMetadata({ elemType: AttributeDimension })
  @Expose({ name: "UserAttributes" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, AttributeDimension> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], AttributeDimension);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  userAttributes?: Record<string, AttributeDimension>;
}
