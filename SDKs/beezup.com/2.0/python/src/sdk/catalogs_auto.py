"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class CatalogsAuto:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def auto_configure_auto_import_interval(self, request: operations.AutoConfigureAutoImportIntervalRequest) -> operations.AutoConfigureAutoImportIntervalResponse:
        r"""Configure Auto Import Interval"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AutoConfigureAutoImportIntervalRequest, base_url, '/v2/user/catalogs/{storeId}/autoImport/scheduling/interval', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "configure_auto_import_interval_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AutoConfigureAutoImportIntervalResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def auto_delete_auto_import(self, request: operations.AutoDeleteAutoImportRequest) -> operations.AutoDeleteAutoImportResponse:
        r"""Delete Auto Import"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AutoDeleteAutoImportRequest, base_url, '/v2/user/catalogs/{storeId}/autoImport', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AutoDeleteAutoImportResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def auto_get_auto_import_configuration(self, request: operations.AutoGetAutoImportConfigurationRequest) -> operations.AutoGetAutoImportConfigurationResponse:
        r"""Get the auto import configuration"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AutoGetAutoImportConfigurationRequest, base_url, '/v2/user/catalogs/{storeId}/autoImport', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AutoGetAutoImportConfigurationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AutoImportConfiguration])
                res.auto_import_configuration = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def auto_pause_auto_import(self, request: operations.AutoPauseAutoImportRequest) -> operations.AutoPauseAutoImportResponse:
        r"""Pause Auto Import"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AutoPauseAutoImportRequest, base_url, '/v2/user/catalogs/{storeId}/autoImport/pause', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AutoPauseAutoImportResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def auto_resume_auto_import(self, request: operations.AutoResumeAutoImportRequest) -> operations.AutoResumeAutoImportResponse:
        r"""Resume Auto Import"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AutoResumeAutoImportRequest, base_url, '/v2/user/catalogs/{storeId}/autoImport/resume', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AutoResumeAutoImportResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def auto_schedule_auto_import(self, request: operations.AutoScheduleAutoImportRequest) -> operations.AutoScheduleAutoImportResponse:
        r"""Configure Auto Import Schedules"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AutoScheduleAutoImportRequest, base_url, '/v2/user/catalogs/{storeId}/autoImport/scheduling/schedules', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "schedule_auto_import_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AutoScheduleAutoImportResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def auto_start_auto_import(self, request: operations.AutoStartAutoImportRequest) -> operations.AutoStartAutoImportResponse:
        r"""Start Auto Import Manually"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AutoStartAutoImportRequest, base_url, '/v2/user/catalogs/{storeId}/autoImport/start', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AutoStartAutoImportResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinksImportationGetImportationMonitoringLink])
                res.links_importation_get_importation_monitoring_link = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def importation_activate_auto_import(self, request: operations.ImportationActivateAutoImportRequest) -> operations.ImportationActivateAutoImportResponse:
        r"""Activate the auto importation of the last successful manual catalog importation.
        Once you have made your fist manual catalog importation with success, you can call this operation to import it automatically. No parameter required, we know which one it is.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ImportationActivateAutoImportRequest, base_url, '/v2/user/catalogs/{storeId}/autoImport/activate', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ImportationActivateAutoImportResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    