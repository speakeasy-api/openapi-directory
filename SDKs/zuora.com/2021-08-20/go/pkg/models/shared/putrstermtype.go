// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
)

// PUTRSTermTypeDistributionTypeEnum - How you want to distribute the revenue.
//
// * Daily Distribution: Distributes revenue evenly across each day between the recognitionStart and recognitionEnd dates.
// * Monthly Distribution (Back Load): Back loads the revenue so you distribute the monthly amount in the partial month in the end only.
// * Monthly Distribution (Front Load): Front loads the revenue so you distribute the monthly amount in the partial month in the beginning only.
// * Monthly Distribution (Proration by Days): Splits the revenue amount between the two partial months.
//
// **Note:** To use any of the Monthly Distribution options, you must have the "Monthly recognition over time" model enabled in **Settings > Finance > Manage Revenue Recognition Models** in the Zuora UI.
type PUTRSTermTypeDistributionTypeEnum string

const (
	PUTRSTermTypeDistributionTypeEnumDailyDistribution                  PUTRSTermTypeDistributionTypeEnum = "Daily Distribution"
	PUTRSTermTypeDistributionTypeEnumMonthlyDistributionBackLoad        PUTRSTermTypeDistributionTypeEnum = "Monthly Distribution (Back Load)"
	PUTRSTermTypeDistributionTypeEnumMonthlyDistributionFrontLoad       PUTRSTermTypeDistributionTypeEnum = "Monthly Distribution (Front Load)"
	PUTRSTermTypeDistributionTypeEnumMonthlyDistributionProrationByDays PUTRSTermTypeDistributionTypeEnum = "Monthly Distribution (Proration by Days)"
)

func (e *PUTRSTermTypeDistributionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Daily Distribution":
		fallthrough
	case "Monthly Distribution (Back Load)":
		fallthrough
	case "Monthly Distribution (Front Load)":
		fallthrough
	case "Monthly Distribution (Proration by Days)":
		*e = PUTRSTermTypeDistributionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PUTRSTermTypeDistributionTypeEnum: %s", s)
	}
}

// PUTRSTermTypeEventTypeEnum - Label of the revenue event type. Revenue event type labels can be duplicated. You can configure your revenue event type labels by navigating to **Settings > Finance > Configure Revenue Event Types** in the Zuora UI.
//
// Note that `Credit Memo Posted` and `Debit Memo Posted` are only available if you enable the Invoice Settlement feature.
type PUTRSTermTypeEventTypeEnum string

const (
	PUTRSTermTypeEventTypeEnumInvoicePosted                 PUTRSTermTypeEventTypeEnum = "Invoice Posted"
	PUTRSTermTypeEventTypeEnumInvoiceItemAdjustmentCreated  PUTRSTermTypeEventTypeEnum = "Invoice Item Adjustment Created"
	PUTRSTermTypeEventTypeEnumInvoiceCanceled               PUTRSTermTypeEventTypeEnum = "Invoice Canceled"
	PUTRSTermTypeEventTypeEnumInvoiceItemAdjustmentCanceled PUTRSTermTypeEventTypeEnum = "Invoice Item Adjustment Canceled"
	PUTRSTermTypeEventTypeEnumRevenueDistributed            PUTRSTermTypeEventTypeEnum = "Revenue Distributed"
	PUTRSTermTypeEventTypeEnumCreditMemoPosted              PUTRSTermTypeEventTypeEnum = "Credit Memo Posted"
	PUTRSTermTypeEventTypeEnumDebitMemoPosted               PUTRSTermTypeEventTypeEnum = "Debit Memo Posted"
)

func (e *PUTRSTermTypeEventTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Invoice Posted":
		fallthrough
	case "Invoice Item Adjustment Created":
		fallthrough
	case "Invoice Canceled":
		fallthrough
	case "Invoice Item Adjustment Canceled":
		fallthrough
	case "Revenue Distributed":
		fallthrough
	case "Credit Memo Posted":
		fallthrough
	case "Debit Memo Posted":
		*e = PUTRSTermTypeEventTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PUTRSTermTypeEventTypeEnum: %s", s)
	}
}

// PUTRSTermType - Container for custom fields of a Revenue Event object.
type PUTRSTermType struct {
	// How you want to distribute the revenue.
	//
	//
	// * Daily Distribution: Distributes revenue evenly across each day between the recognitionStart and recognitionEnd dates.
	// * Monthly Distribution (Back Load): Back loads the revenue so you distribute the monthly amount in the partial month in the end only.
	// * Monthly Distribution (Front Load): Front loads the revenue so you distribute the monthly amount in the partial month in the beginning only.
	// * Monthly Distribution (Proration by Days): Splits the revenue amount between the two partial months.
	//
	// **Note:** To use any of the Monthly Distribution options, you must have the "Monthly recognition over time" model enabled in **Settings > Finance > Manage Revenue Recognition Models** in the Zuora UI.
	//
	DistributionType *PUTRSTermTypeDistributionTypeEnum `json:"distributionType,omitempty"`
	// Label of the revenue event type. Revenue event type labels can be duplicated. You can configure your revenue event type labels by navigating to **Settings > Finance > Configure Revenue Event Types** in the Zuora UI.
	//
	// Note that `Credit Memo Posted` and `Debit Memo Posted` are only available if you enable the Invoice Settlement feature.
	//
	EventType *PUTRSTermTypeEventTypeEnum `json:"eventType,omitempty"`
	// System ID of the revenue event type. Each eventType has a unique system ID. You can configure your revenue event type system IDs by navigating to **Settings > Finance > Configure Revenue Event Types** in the Zuora UI.
	//
	EventTypeSystemID *string `json:"eventTypeSystemId,omitempty"`
	// Additional information about this record.
	//
	Notes *string `json:"notes,omitempty"`
	// The end date of a recognition period in `yyyy-mm-dd` format.
	//
	// The maximum difference between the `recognitionStart` and `recognitionEnd` date fields is equal to 250 multiplied by the length of an accounting period.
	//
	RecognitionEnd types.Date `json:"recognitionEnd"`
	// The start date of a recognition period in `yyyy-mm-dd` format.
	//
	// If there is a closed accounting period between the `recognitionStart` and `recognitionEnd` dates, the revenue that would be placed in the closed accounting period is instead placed in the next open accounting period.
	//
	RecognitionStart types.Date `json:"recognitionStart"`
}
