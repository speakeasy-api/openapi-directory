/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Organization - A person's past or current organization. Overlapping date ranges are permitted.
 */
public class Organization {
    /**
     * The person's cost center at the organization.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("costCenter")
    public String costCenter;

    public Organization withCostCenter(String costCenter) {
        this.costCenter = costCenter;
        return this;
    }
    
    /**
     * True if the organization is the person's current organization; false if the organization is a past organization.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("current")
    public Boolean current;

    public Organization withCurrent(Boolean current) {
        this.current = current;
        return this;
    }
    
    /**
     * The person's department at the organization.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("department")
    public String department;

    public Organization withDepartment(String department) {
        this.department = department;
        return this;
    }
    
    /**
     * The domain name associated with the organization; for example, `google.com`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domain")
    public String domain;

    public Organization withDomain(String domain) {
        this.domain = domain;
        return this;
    }
    
    /**
     * Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endDate")
    public Date endDate;

    public Organization withEndDate(Date endDate) {
        this.endDate = endDate;
        return this;
    }
    
    /**
     * Output only. The type of the organization translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("formattedType")
    public String formattedType;

    public Organization withFormattedType(String formattedType) {
        this.formattedType = formattedType;
        return this;
    }
    
    /**
     * The person's full-time equivalent millipercent within the organization (100000 = 100%).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fullTimeEquivalentMillipercent")
    public Integer fullTimeEquivalentMillipercent;

    public Organization withFullTimeEquivalentMillipercent(Integer fullTimeEquivalentMillipercent) {
        this.fullTimeEquivalentMillipercent = fullTimeEquivalentMillipercent;
        return this;
    }
    
    /**
     * The person's job description at the organization.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jobDescription")
    public String jobDescription;

    public Organization withJobDescription(String jobDescription) {
        this.jobDescription = jobDescription;
        return this;
    }
    
    /**
     * The location of the organization office the person works at.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    public String location;

    public Organization withLocation(String location) {
        this.location = location;
        return this;
    }
    
    /**
     * Metadata about a field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    public FieldMetadata metadata;

    public Organization withMetadata(FieldMetadata metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * The name of the organization.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Organization withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The phonetic name of the organization.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phoneticName")
    public String phoneticName;

    public Organization withPhoneticName(String phoneticName) {
        this.phoneticName = phoneticName;
        return this;
    }
    
    /**
     * Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startDate")
    public Date startDate;

    public Organization withStartDate(Date startDate) {
        this.startDate = startDate;
        return this;
    }
    
    /**
     * The symbol associated with the organization; for example, a stock ticker symbol, abbreviation, or acronym.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("symbol")
    public String symbol;

    public Organization withSymbol(String symbol) {
        this.symbol = symbol;
        return this;
    }
    
    /**
     * The person's job title at the organization.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;

    public Organization withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * The type of the organization. The type can be custom or one of these predefined values: * `work` * `school`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;

    public Organization withType(String type) {
        this.type = type;
        return this;
    }
    
    public Organization(){}
}
