"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Loyaltyobject:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def walletobjects_loyaltyobject_addmessage(self, request: operations.WalletobjectsLoyaltyobjectAddmessageRequest, security: operations.WalletobjectsLoyaltyobjectAddmessageSecurity) -> operations.WalletobjectsLoyaltyobjectAddmessageResponse:
        r"""Adds a message to the loyalty object referenced by the given object ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WalletobjectsLoyaltyobjectAddmessageRequest, base_url, '/walletobjects/v1/loyaltyObject/{resourceId}/addMessage', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "add_message_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WalletobjectsLoyaltyobjectAddmessageRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsLoyaltyobjectAddmessageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LoyaltyObjectAddMessageResponse])
                res.loyalty_object_add_message_response = out

        return res

    def walletobjects_loyaltyobject_get(self, request: operations.WalletobjectsLoyaltyobjectGetRequest, security: operations.WalletobjectsLoyaltyobjectGetSecurity) -> operations.WalletobjectsLoyaltyobjectGetResponse:
        r"""Returns the loyalty object with the given object ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WalletobjectsLoyaltyobjectGetRequest, base_url, '/walletobjects/v1/loyaltyObject/{resourceId}', request)
        
        query_params = utils.get_query_params(operations.WalletobjectsLoyaltyobjectGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsLoyaltyobjectGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LoyaltyObject])
                res.loyalty_object = out

        return res

    def walletobjects_loyaltyobject_insert(self, request: operations.WalletobjectsLoyaltyobjectInsertRequest, security: operations.WalletobjectsLoyaltyobjectInsertSecurity) -> operations.WalletobjectsLoyaltyobjectInsertResponse:
        r"""Inserts an loyalty object with the given ID and properties."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/walletobjects/v1/loyaltyObject'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "loyalty_object", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WalletobjectsLoyaltyobjectInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsLoyaltyobjectInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LoyaltyObject])
                res.loyalty_object = out

        return res

    def walletobjects_loyaltyobject_list(self, request: operations.WalletobjectsLoyaltyobjectListRequest, security: operations.WalletobjectsLoyaltyobjectListSecurity) -> operations.WalletobjectsLoyaltyobjectListResponse:
        r"""Returns a list of all loyalty objects for a given issuer ID."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/walletobjects/v1/loyaltyObject'
        
        query_params = utils.get_query_params(operations.WalletobjectsLoyaltyobjectListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsLoyaltyobjectListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LoyaltyObjectListResponse])
                res.loyalty_object_list_response = out

        return res

    def walletobjects_loyaltyobject_modifylinkedofferobjects(self, request: operations.WalletobjectsLoyaltyobjectModifylinkedofferobjectsRequest, security: operations.WalletobjectsLoyaltyobjectModifylinkedofferobjectsSecurity) -> operations.WalletobjectsLoyaltyobjectModifylinkedofferobjectsResponse:
        r"""Modifies linked offer objects for the loyalty object with the given ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WalletobjectsLoyaltyobjectModifylinkedofferobjectsRequest, base_url, '/walletobjects/v1/loyaltyObject/{resourceId}/modifyLinkedOfferObjects', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "modify_linked_offer_objects_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WalletobjectsLoyaltyobjectModifylinkedofferobjectsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsLoyaltyobjectModifylinkedofferobjectsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LoyaltyObject])
                res.loyalty_object = out

        return res

    def walletobjects_loyaltyobject_patch(self, request: operations.WalletobjectsLoyaltyobjectPatchRequest, security: operations.WalletobjectsLoyaltyobjectPatchSecurity) -> operations.WalletobjectsLoyaltyobjectPatchResponse:
        r"""Updates the loyalty object referenced by the given object ID. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WalletobjectsLoyaltyobjectPatchRequest, base_url, '/walletobjects/v1/loyaltyObject/{resourceId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "loyalty_object", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WalletobjectsLoyaltyobjectPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsLoyaltyobjectPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LoyaltyObject])
                res.loyalty_object = out

        return res

    def walletobjects_loyaltyobject_update(self, request: operations.WalletobjectsLoyaltyobjectUpdateRequest, security: operations.WalletobjectsLoyaltyobjectUpdateSecurity) -> operations.WalletobjectsLoyaltyobjectUpdateResponse:
        r"""Updates the loyalty object referenced by the given object ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WalletobjectsLoyaltyobjectUpdateRequest, base_url, '/walletobjects/v1/loyaltyObject/{resourceId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "loyalty_object", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WalletobjectsLoyaltyobjectUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsLoyaltyobjectUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LoyaltyObject])
                res.loyalty_object = out

        return res

    