"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class SuggestTagsAndRegionsAPI:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def suggest_tags_and_regions(self, request: operations.SuggestTagsAndRegionsRequest) -> operations.SuggestTagsAndRegionsResponse:
        r"""Suggest tags and regions for an array/batch of untagged images. Returns empty array if no tags are found.
        This API will get suggested tags and regions for an array/batch of untagged images along with confidences for the tags. It returns an empty array if no tags are found.
        There is a limit of 64 images in the batch.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SuggestTagsAndRegionsRequest, base_url, '/projects/{projectId}/tagsandregions/suggestions', request)
        
        query_params = utils.get_query_params(operations.SuggestTagsAndRegionsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SuggestTagsAndRegionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.SuggestedTagAndRegion]])
                res.suggested_tag_and_regions = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomVisionError])
                res.custom_vision_error = out

        return res

    