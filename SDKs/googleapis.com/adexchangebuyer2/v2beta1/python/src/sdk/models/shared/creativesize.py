"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import size as shared_size
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CreativeSizeAllowedFormatsEnum(str, Enum):
    UNKNOWN = 'UNKNOWN'
    AUDIO = 'AUDIO'

class CreativeSizeCreativeSizeTypeEnum(str, Enum):
    r"""The creative size type."""
    CREATIVE_SIZE_TYPE_UNSPECIFIED = 'CREATIVE_SIZE_TYPE_UNSPECIFIED'
    REGULAR = 'REGULAR'
    INTERSTITIAL = 'INTERSTITIAL'
    VIDEO = 'VIDEO'
    NATIVE = 'NATIVE'

class CreativeSizeNativeTemplateEnum(str, Enum):
    r"""Output only. The native template for this creative. It will have a value only if creative_size_type = CreativeSizeType.NATIVE."""
    UNKNOWN_NATIVE_TEMPLATE = 'UNKNOWN_NATIVE_TEMPLATE'
    NATIVE_CONTENT_AD = 'NATIVE_CONTENT_AD'
    NATIVE_APP_INSTALL_AD = 'NATIVE_APP_INSTALL_AD'
    NATIVE_VIDEO_CONTENT_AD = 'NATIVE_VIDEO_CONTENT_AD'
    NATIVE_VIDEO_APP_INSTALL_AD = 'NATIVE_VIDEO_APP_INSTALL_AD'

class CreativeSizeSkippableAdTypeEnum(str, Enum):
    r"""The type of skippable ad for this creative. It will have a value only if creative_size_type = CreativeSizeType.VIDEO."""
    SKIPPABLE_AD_TYPE_UNSPECIFIED = 'SKIPPABLE_AD_TYPE_UNSPECIFIED'
    GENERIC = 'GENERIC'
    INSTREAM_SELECT = 'INSTREAM_SELECT'
    NOT_SKIPPABLE = 'NOT_SKIPPABLE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreativeSize:
    r"""Specifies the size of the creative."""
    
    allowed_formats: Optional[list[CreativeSizeAllowedFormatsEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowedFormats'), 'exclude': lambda f: f is None }})
    r"""What formats are allowed by the publisher. If this repeated field is empty then all formats are allowed. For example, if this field contains AllowedFormatType.AUDIO then the publisher only allows an audio ad (without any video)."""  
    companion_sizes: Optional[list[shared_size.Size]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('companionSizes'), 'exclude': lambda f: f is None }})
    r"""For video creatives specifies the sizes of companion ads (if present). Companion sizes may be filled in only when creative_size_type = VIDEO"""  
    creative_size_type: Optional[CreativeSizeCreativeSizeTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creativeSizeType'), 'exclude': lambda f: f is None }})
    r"""The creative size type."""  
    native_template: Optional[CreativeSizeNativeTemplateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nativeTemplate'), 'exclude': lambda f: f is None }})
    r"""Output only. The native template for this creative. It will have a value only if creative_size_type = CreativeSizeType.NATIVE."""  
    size: Optional[shared_size.Size] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size'), 'exclude': lambda f: f is None }})
    r"""Message depicting the size of the creative. The units of width and height depend on the type of the targeting."""  
    skippable_ad_type: Optional[CreativeSizeSkippableAdTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skippableAdType'), 'exclude': lambda f: f is None }})
    r"""The type of skippable ad for this creative. It will have a value only if creative_size_type = CreativeSizeType.VIDEO."""  
    