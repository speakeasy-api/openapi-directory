/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * NodeInfo - NodeInfo contains standardized way of exposing metadata about a server running one of the distributed social networks
 */
public class NodeInfo {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    public java.util.Map<String, Object> metadata;

    public NodeInfo withMetadata(java.util.Map<String, Object> metadata) {
        this.metadata = metadata;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("openRegistrations")
    public Boolean openRegistrations;

    public NodeInfo withOpenRegistrations(Boolean openRegistrations) {
        this.openRegistrations = openRegistrations;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("protocols")
    public String[] protocols;

    public NodeInfo withProtocols(String[] protocols) {
        this.protocols = protocols;
        return this;
    }
    
    /**
     * NodeInfoServices contains the third party sites this server can connect to via their application API
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("services")
    public NodeInfoServices services;

    public NodeInfo withServices(NodeInfoServices services) {
        this.services = services;
        return this;
    }
    
    /**
     * NodeInfoSoftware contains Metadata about server software in use
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("software")
    public NodeInfoSoftware software;

    public NodeInfo withSoftware(NodeInfoSoftware software) {
        this.software = software;
        return this;
    }
    
    /**
     * NodeInfoUsage contains usage statistics for this server
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("usage")
    public NodeInfoUsage usage;

    public NodeInfo withUsage(NodeInfoUsage usage) {
        this.usage = usage;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    public String version;

    public NodeInfo withVersion(String version) {
        this.version = version;
        return this;
    }
    
    public NodeInfo(){}
}
