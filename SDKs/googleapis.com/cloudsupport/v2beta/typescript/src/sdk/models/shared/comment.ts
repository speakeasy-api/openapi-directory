/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Actor, ActorInput } from "./actor";
import { Expose, Type } from "class-transformer";

/**
 * A comment associated with a support case.
 */
export class Comment extends SpeakeasyBase {
  /**
   * The full comment body. Maximum of 12800 characters. This can contain rich text syntax.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "body" })
  body?: string;

  /**
   * Output only. The time when this comment was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createTime" })
  createTime?: string;

  /**
   * An object containing information about the effective user and authenticated principal responsible for an action.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "creator" })
  @Type(() => Actor)
  creator?: Actor;

  /**
   * Output only. The resource name for the comment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Output only. An automatically generated plain text version of body with all rich text syntax stripped.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "plainTextBody" })
  plainTextBody?: string;
}

/**
 * A comment associated with a support case.
 */
export class CommentInput extends SpeakeasyBase {
  /**
   * The full comment body. Maximum of 12800 characters. This can contain rich text syntax.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "body" })
  body?: string;

  /**
   * An object containing information about the effective user and authenticated principal responsible for an action.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "creator" })
  @Type(() => ActorInput)
  creator?: ActorInput;
}
