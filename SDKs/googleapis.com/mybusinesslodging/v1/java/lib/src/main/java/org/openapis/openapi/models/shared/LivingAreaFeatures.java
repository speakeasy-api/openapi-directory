/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * LivingAreaFeatures - Features in the living area.
 */
public class LivingAreaFeatures {
    /**
     * Air conditioning. An electrical machine used to cool the temperature of the guestroom.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("airConditioning")
    public Boolean airConditioning;

    public LivingAreaFeatures withAirConditioning(Boolean airConditioning) {
        this.airConditioning = airConditioning;
        return this;
    }
    
    /**
     * Air conditioning exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("airConditioningException")
    public LivingAreaFeaturesAirConditioningExceptionEnum airConditioningException;

    public LivingAreaFeatures withAirConditioningException(LivingAreaFeaturesAirConditioningExceptionEnum airConditioningException) {
        this.airConditioningException = airConditioningException;
        return this;
    }
    
    /**
     * Bathtub. A fixed plumbing feature set on the floor and consisting of a large container that accommodates the body of an adult for the purpose of seated bathing. Includes knobs or fixtures to control the temperature of the water, a faucet through which the water flows, and a drain that can be closed for filling and opened for draining.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bathtub")
    public Boolean bathtub;

    public LivingAreaFeatures withBathtub(Boolean bathtub) {
        this.bathtub = bathtub;
        return this;
    }
    
    /**
     * Bathtub exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bathtubException")
    public LivingAreaFeaturesBathtubExceptionEnum bathtubException;

    public LivingAreaFeatures withBathtubException(LivingAreaFeaturesBathtubExceptionEnum bathtubException) {
        this.bathtubException = bathtubException;
        return this;
    }
    
    /**
     * Bidet. A plumbing fixture attached to a toilet or a low, fixed sink designed for the purpose of washing after toilet use.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bidet")
    public Boolean bidet;

    public LivingAreaFeatures withBidet(Boolean bidet) {
        this.bidet = bidet;
        return this;
    }
    
    /**
     * Bidet exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bidetException")
    public LivingAreaFeaturesBidetExceptionEnum bidetException;

    public LivingAreaFeatures withBidetException(LivingAreaFeaturesBidetExceptionEnum bidetException) {
        this.bidetException = bidetException;
        return this;
    }
    
    /**
     * Dryer. An electrical machine designed to dry clothing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dryer")
    public Boolean dryer;

    public LivingAreaFeatures withDryer(Boolean dryer) {
        this.dryer = dryer;
        return this;
    }
    
    /**
     * Dryer exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dryerException")
    public LivingAreaFeaturesDryerExceptionEnum dryerException;

    public LivingAreaFeatures withDryerException(LivingAreaFeaturesDryerExceptionEnum dryerException) {
        this.dryerException = dryerException;
        return this;
    }
    
    /**
     * Electronic room key. A card coded by the check-in computer that is read by the lock on the hotel guestroom door to allow for entry.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("electronicRoomKey")
    public Boolean electronicRoomKey;

    public LivingAreaFeatures withElectronicRoomKey(Boolean electronicRoomKey) {
        this.electronicRoomKey = electronicRoomKey;
        return this;
    }
    
    /**
     * Electronic room key exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("electronicRoomKeyException")
    public LivingAreaFeaturesElectronicRoomKeyExceptionEnum electronicRoomKeyException;

    public LivingAreaFeatures withElectronicRoomKeyException(LivingAreaFeaturesElectronicRoomKeyExceptionEnum electronicRoomKeyException) {
        this.electronicRoomKeyException = electronicRoomKeyException;
        return this;
    }
    
    /**
     * Fireplace. A framed opening (aka hearth) at the base of a chimney in which logs or an electrical fire feature are burned to provide a relaxing ambiance or to heat the room. Often made of bricks or stone.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fireplace")
    public Boolean fireplace;

    public LivingAreaFeatures withFireplace(Boolean fireplace) {
        this.fireplace = fireplace;
        return this;
    }
    
    /**
     * Fireplace exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fireplaceException")
    public LivingAreaFeaturesFireplaceExceptionEnum fireplaceException;

    public LivingAreaFeatures withFireplaceException(LivingAreaFeaturesFireplaceExceptionEnum fireplaceException) {
        this.fireplaceException = fireplaceException;
        return this;
    }
    
    /**
     * Hairdryer. A handheld electric appliance that blows temperature-controlled air for the purpose of drying wet hair. Can be mounted to a bathroom wall or a freestanding device stored in the guestroom's bathroom or closet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hairdryer")
    public Boolean hairdryer;

    public LivingAreaFeatures withHairdryer(Boolean hairdryer) {
        this.hairdryer = hairdryer;
        return this;
    }
    
    /**
     * Hairdryer exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hairdryerException")
    public LivingAreaFeaturesHairdryerExceptionEnum hairdryerException;

    public LivingAreaFeatures withHairdryerException(LivingAreaFeaturesHairdryerExceptionEnum hairdryerException) {
        this.hairdryerException = hairdryerException;
        return this;
    }
    
    /**
     * Heating. An electrical machine used to warm the temperature of the guestroom.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("heating")
    public Boolean heating;

    public LivingAreaFeatures withHeating(Boolean heating) {
        this.heating = heating;
        return this;
    }
    
    /**
     * Heating exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("heatingException")
    public LivingAreaFeaturesHeatingExceptionEnum heatingException;

    public LivingAreaFeatures withHeatingException(LivingAreaFeaturesHeatingExceptionEnum heatingException) {
        this.heatingException = heatingException;
        return this;
    }
    
    /**
     * In-unit safe. A strong fireproof cabinet with a programmable lock, used for the protected storage of valuables in a guestroom. Often built into a closet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inunitSafe")
    public Boolean inunitSafe;

    public LivingAreaFeatures withInunitSafe(Boolean inunitSafe) {
        this.inunitSafe = inunitSafe;
        return this;
    }
    
    /**
     * In-unit safe exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inunitSafeException")
    public LivingAreaFeaturesInunitSafeExceptionEnum inunitSafeException;

    public LivingAreaFeatures withInunitSafeException(LivingAreaFeaturesInunitSafeExceptionEnum inunitSafeException) {
        this.inunitSafeException = inunitSafeException;
        return this;
    }
    
    /**
     * In-unit Wifi available. Guests can wirelessly connect to the Internet in the guestroom. Can be free or for a fee.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inunitWifiAvailable")
    public Boolean inunitWifiAvailable;

    public LivingAreaFeatures withInunitWifiAvailable(Boolean inunitWifiAvailable) {
        this.inunitWifiAvailable = inunitWifiAvailable;
        return this;
    }
    
    /**
     * In-unit Wifi available exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inunitWifiAvailableException")
    public LivingAreaFeaturesInunitWifiAvailableExceptionEnum inunitWifiAvailableException;

    public LivingAreaFeatures withInunitWifiAvailableException(LivingAreaFeaturesInunitWifiAvailableExceptionEnum inunitWifiAvailableException) {
        this.inunitWifiAvailableException = inunitWifiAvailableException;
        return this;
    }
    
    /**
     * Ironing equipment. A device, usually with a flat metal base, that is heated to smooth, finish, or press clothes and a flat, padded, cloth-covered surface on which the clothes are worked.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ironingEquipment")
    public Boolean ironingEquipment;

    public LivingAreaFeatures withIroningEquipment(Boolean ironingEquipment) {
        this.ironingEquipment = ironingEquipment;
        return this;
    }
    
    /**
     * Ironing equipment exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ironingEquipmentException")
    public LivingAreaFeaturesIroningEquipmentExceptionEnum ironingEquipmentException;

    public LivingAreaFeatures withIroningEquipmentException(LivingAreaFeaturesIroningEquipmentExceptionEnum ironingEquipmentException) {
        this.ironingEquipmentException = ironingEquipmentException;
        return this;
    }
    
    /**
     * Pay per view movies. Televisions with channels that offer films that can be viewed for a fee, and have an interface to allow the viewer to accept the terms and approve payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payPerViewMovies")
    public Boolean payPerViewMovies;

    public LivingAreaFeatures withPayPerViewMovies(Boolean payPerViewMovies) {
        this.payPerViewMovies = payPerViewMovies;
        return this;
    }
    
    /**
     * Pay per view movies exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payPerViewMoviesException")
    public LivingAreaFeaturesPayPerViewMoviesExceptionEnum payPerViewMoviesException;

    public LivingAreaFeatures withPayPerViewMoviesException(LivingAreaFeaturesPayPerViewMoviesExceptionEnum payPerViewMoviesException) {
        this.payPerViewMoviesException = payPerViewMoviesException;
        return this;
    }
    
    /**
     * Private bathroom. A bathroom designated for the express use of the guests staying in a specific guestroom.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("privateBathroom")
    public Boolean privateBathroom;

    public LivingAreaFeatures withPrivateBathroom(Boolean privateBathroom) {
        this.privateBathroom = privateBathroom;
        return this;
    }
    
    /**
     * Private bathroom exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("privateBathroomException")
    public LivingAreaFeaturesPrivateBathroomExceptionEnum privateBathroomException;

    public LivingAreaFeatures withPrivateBathroomException(LivingAreaFeaturesPrivateBathroomExceptionEnum privateBathroomException) {
        this.privateBathroomException = privateBathroomException;
        return this;
    }
    
    /**
     * Shower. A fixed plumbing fixture for standing bathing that features a tall spray spout or faucet through which water flows, a knob or knobs that control the water's temperature, and a drain in the floor.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shower")
    public Boolean shower;

    public LivingAreaFeatures withShower(Boolean shower) {
        this.shower = shower;
        return this;
    }
    
    /**
     * Shower exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("showerException")
    public LivingAreaFeaturesShowerExceptionEnum showerException;

    public LivingAreaFeatures withShowerException(LivingAreaFeaturesShowerExceptionEnum showerException) {
        this.showerException = showerException;
        return this;
    }
    
    /**
     * Toilet. A fixed bathroom feature connected to a sewer or septic system and consisting of a water-flushed bowl with a seat, as well as a device that elicites the water-flushing action. Used for the process and disposal of human waste.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("toilet")
    public Boolean toilet;

    public LivingAreaFeatures withToilet(Boolean toilet) {
        this.toilet = toilet;
        return this;
    }
    
    /**
     * Toilet exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("toiletException")
    public LivingAreaFeaturesToiletExceptionEnum toiletException;

    public LivingAreaFeatures withToiletException(LivingAreaFeaturesToiletExceptionEnum toiletException) {
        this.toiletException = toiletException;
        return this;
    }
    
    /**
     * TV. A television is available in the guestroom.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tv")
    public Boolean tv;

    public LivingAreaFeatures withTv(Boolean tv) {
        this.tv = tv;
        return this;
    }
    
    /**
     * TV casting. A television equipped with a device through which the video entertainment accessed on a personal computer, phone or tablet can be wirelessly delivered to and viewed on the guestroom's television.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tvCasting")
    public Boolean tvCasting;

    public LivingAreaFeatures withTvCasting(Boolean tvCasting) {
        this.tvCasting = tvCasting;
        return this;
    }
    
    /**
     * TV exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tvCastingException")
    public LivingAreaFeaturesTvCastingExceptionEnum tvCastingException;

    public LivingAreaFeatures withTvCastingException(LivingAreaFeaturesTvCastingExceptionEnum tvCastingException) {
        this.tvCastingException = tvCastingException;
        return this;
    }
    
    /**
     * TV exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tvException")
    public LivingAreaFeaturesTvExceptionEnum tvException;

    public LivingAreaFeatures withTvException(LivingAreaFeaturesTvExceptionEnum tvException) {
        this.tvException = tvException;
        return this;
    }
    
    /**
     * TV streaming. Televisions that embed a range of web-based apps to allow for watching media from those apps.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tvStreaming")
    public Boolean tvStreaming;

    public LivingAreaFeatures withTvStreaming(Boolean tvStreaming) {
        this.tvStreaming = tvStreaming;
        return this;
    }
    
    /**
     * TV streaming exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tvStreamingException")
    public LivingAreaFeaturesTvStreamingExceptionEnum tvStreamingException;

    public LivingAreaFeatures withTvStreamingException(LivingAreaFeaturesTvStreamingExceptionEnum tvStreamingException) {
        this.tvStreamingException = tvStreamingException;
        return this;
    }
    
    /**
     * Universal power adapters. A power supply for electronic devices which plugs into a wall for the purpose of converting AC to a single DC voltage. Also know as AC adapter or charger.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("universalPowerAdapters")
    public Boolean universalPowerAdapters;

    public LivingAreaFeatures withUniversalPowerAdapters(Boolean universalPowerAdapters) {
        this.universalPowerAdapters = universalPowerAdapters;
        return this;
    }
    
    /**
     * Universal power adapters exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("universalPowerAdaptersException")
    public LivingAreaFeaturesUniversalPowerAdaptersExceptionEnum universalPowerAdaptersException;

    public LivingAreaFeatures withUniversalPowerAdaptersException(LivingAreaFeaturesUniversalPowerAdaptersExceptionEnum universalPowerAdaptersException) {
        this.universalPowerAdaptersException = universalPowerAdaptersException;
        return this;
    }
    
    /**
     * Washer. An electrical machine connected to a running water source designed to launder clothing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("washer")
    public Boolean washer;

    public LivingAreaFeatures withWasher(Boolean washer) {
        this.washer = washer;
        return this;
    }
    
    /**
     * Washer exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("washerException")
    public LivingAreaFeaturesWasherExceptionEnum washerException;

    public LivingAreaFeatures withWasherException(LivingAreaFeaturesWasherExceptionEnum washerException) {
        this.washerException = washerException;
        return this;
    }
    
    public LivingAreaFeatures(){}
}
