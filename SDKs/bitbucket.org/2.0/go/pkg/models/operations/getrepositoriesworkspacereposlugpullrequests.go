// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetRepositoriesWorkspaceRepoSlugPullrequestsSecurity struct {
	APIKey *shared.SchemeAPIKey `security:"scheme,type=apiKey,subtype=header"`
	Basic  *shared.SchemeBasic  `security:"scheme,type=http,subtype=basic"`
	Oauth2 *shared.SchemeOauth2 `security:"scheme,type=oauth2"`
}

type GetRepositoriesWorkspaceRepoSlugPullrequestsPathParams struct {
	// This can either be the repository slug or the UUID of the repository,
	// surrounded by curly-braces, for example: `{repository UUID}`.
	//
	RepoSlug string `pathParam:"style=simple,explode=false,name=repo_slug"`
	// This can either be the workspace ID (slug) or the workspace UUID
	// surrounded by curly-braces, for example: `{workspace UUID}`.
	//
	Workspace string `pathParam:"style=simple,explode=false,name=workspace"`
}

// GetRepositoriesWorkspaceRepoSlugPullrequestsStateEnum - Only return pull requests that are in this state. This parameter can be repeated.
type GetRepositoriesWorkspaceRepoSlugPullrequestsStateEnum string

const (
	GetRepositoriesWorkspaceRepoSlugPullrequestsStateEnumMerged     GetRepositoriesWorkspaceRepoSlugPullrequestsStateEnum = "MERGED"
	GetRepositoriesWorkspaceRepoSlugPullrequestsStateEnumSuperseded GetRepositoriesWorkspaceRepoSlugPullrequestsStateEnum = "SUPERSEDED"
	GetRepositoriesWorkspaceRepoSlugPullrequestsStateEnumOpen       GetRepositoriesWorkspaceRepoSlugPullrequestsStateEnum = "OPEN"
	GetRepositoriesWorkspaceRepoSlugPullrequestsStateEnumDeclined   GetRepositoriesWorkspaceRepoSlugPullrequestsStateEnum = "DECLINED"
)

func (e *GetRepositoriesWorkspaceRepoSlugPullrequestsStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "MERGED":
		fallthrough
	case "SUPERSEDED":
		fallthrough
	case "OPEN":
		fallthrough
	case "DECLINED":
		*e = GetRepositoriesWorkspaceRepoSlugPullrequestsStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRepositoriesWorkspaceRepoSlugPullrequestsStateEnum: %s", s)
	}
}

type GetRepositoriesWorkspaceRepoSlugPullrequestsQueryParams struct {
	// Only return pull requests that are in this state. This parameter can be repeated.
	State *GetRepositoriesWorkspaceRepoSlugPullrequestsStateEnum `queryParam:"style=form,explode=true,name=state"`
}

type GetRepositoriesWorkspaceRepoSlugPullrequestsRequest struct {
	PathParams  GetRepositoriesWorkspaceRepoSlugPullrequestsPathParams
	QueryParams GetRepositoriesWorkspaceRepoSlugPullrequestsQueryParams
	Security    GetRepositoriesWorkspaceRepoSlugPullrequestsSecurity
}

type GetRepositoriesWorkspaceRepoSlugPullrequestsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// If the specified repository does not exist.
	Error map[string]interface{}
	// All pull requests on the specified repository.
	PaginatedPullrequests *shared.PaginatedPullrequests
}
