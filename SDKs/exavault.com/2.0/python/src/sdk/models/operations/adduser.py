"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import userresponse as shared_userresponse
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddUserAddUserRequestBodyPermissions:
    r"""An object containing name/value pairs for each permission. Any permission that is not passed will be set to `false` by default. Note that users will be unable to see any files in the account unless you include `list` permission.
    When creating a user with the `role` **admin**, you should set all of the permissions to `true`
    """
    
    change_password: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('changePassword'), 'exclude': lambda f: f is None }})  
    delete: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delete'), 'exclude': lambda f: f is None }})  
    delete_form_data: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deleteFormData'), 'exclude': lambda f: f is None }})  
    download: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('download'), 'exclude': lambda f: f is None }})  
    list_: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('list'), 'exclude': lambda f: f is None }})  
    modify: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modify'), 'exclude': lambda f: f is None }})  
    notification: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notification'), 'exclude': lambda f: f is None }})  
    share: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('share'), 'exclude': lambda f: f is None }})  
    upload: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upload'), 'exclude': lambda f: f is None }})  
    view_form_data: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('viewFormData'), 'exclude': lambda f: f is None }})  
    
class AddUserAddUserRequestBodyRoleEnum(str, Enum):
    r"""The type of user to create, either **user** or **admin**."""
    USER = 'user'
    ADMIN = 'admin'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddUserAddUserRequestBody:
    
    email: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email') }})
    r"""Email address for the user"""  
    home_resource: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('homeResource') }})
    r"""Resource identifier for the user's home folder. See details on [how to specify resources](#section/Identifying-Resources) above.
    
    The user will be locked to this directory and unable to move 'up' in the account. If the folder does not exist in the account, it will be created when the user is created. 
    
    Users with the `role` **admin** should have their homeResource set to '/'
    """  
    password: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password') }})
    r"""Password for the user"""  
    permissions: AddUserAddUserRequestBodyPermissions = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permissions') }})
    r"""An object containing name/value pairs for each permission. Any permission that is not passed will be set to `false` by default. Note that users will be unable to see any files in the account unless you include `list` permission.
    When creating a user with the `role` **admin**, you should set all of the permissions to `true`
    """  
    role: AddUserAddUserRequestBodyRoleEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role') }})
    r"""The type of user to create, either **user** or **admin**."""  
    time_zone: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeZone') }})
    r"""Time zone, used for accurate time display within the application. See <a href='https://php.net/manual/en/timezones.php' target='blank'>this page</a> for allowed values."""  
    username: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('username') }})
    r"""Username of the user to create. This should follow standard username conventions - spaces are not allowed, etc. We do allow email addresses as usernames.
    
    **Note** Usernames must be unique across all ExaVault accounts.
    """  
    expiration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiration'), 'exclude': lambda f: f is None }})
    r"""Optional timestamp when the user should expire, formatted in date-time."""  
    locked: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locked'), 'exclude': lambda f: f is None }})
    r"""If true, the user will not be able to log in"""  
    nickname: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nickname'), 'exclude': lambda f: f is None }})
    r"""An optional nickname (e.g. 'David from Sales')."""  
    onboarding: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('onboarding'), 'exclude': lambda f: f is None }})
    r"""Set this to **true** to enable extra help popups in the web file manager for this user."""  
    welcome_email: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('welcomeEmail'), 'exclude': lambda f: f is None }})
    r"""If **true**, send this new user a welcome email upon creation. The content of the welcome email can be configured with the [PATCH /accounts](#operation/updateAccount) method."""  
    

@dataclasses.dataclass
class AddUserRequest:
    
    ev_access_token: str = dataclasses.field(metadata={'header': { 'field_name': 'ev-access-token', 'style': 'simple', 'explode': False }})
    r"""Access token required to make the API call."""  
    ev_api_key: str = dataclasses.field(metadata={'header': { 'field_name': 'ev-api-key', 'style': 'simple', 'explode': False }})
    r"""API key required to make the API call"""  
    request_body: Optional[AddUserAddUserRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class AddUserResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    user_response: Optional[shared_userresponse.UserResponse] = dataclasses.field(default=None)
    r"""Successful Operation"""  
    