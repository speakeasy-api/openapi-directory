/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import java.net.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.SerializedBody;

public class Routing {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Routing(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Reachable Range
     * Calculates a set of locations that can be reached from the origin point.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRoutingVersionNumberCalculateReachableRangeOriginContentTypeResponse getRoutingVersionNumberCalculateReachableRangeOriginContentType(org.openapis.openapi.models.operations.GetRoutingVersionNumberCalculateReachableRangeOriginContentTypeRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRoutingVersionNumberCalculateReachableRangeOriginContentTypeRequest.class, baseUrl, "/routing/{versionNumber}/calculateReachableRange/{origin}/{contentType}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetRoutingVersionNumberCalculateReachableRangeOriginContentTypeRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRoutingVersionNumberCalculateReachableRangeOriginContentTypeResponse res = new org.openapis.openapi.models.operations.GetRoutingVersionNumberCalculateReachableRangeOriginContentTypeResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 400 || httpRes.statusCode() == 403 || httpRes.statusCode() == 404 || httpRes.statusCode() == 405 || httpRes.statusCode() == 408 || httpRes.statusCode() == 414 || httpRes.statusCode() == 500 || httpRes.statusCode() == 502 || httpRes.statusCode() == 503 || httpRes.statusCode() == 504 || httpRes.statusCode() == 596) {
        }

        return res;
    }

    /**
     * Calculate Route
     * Calculates a route between an origin and a destination.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRoutingVersionNumberCalculateRouteLocationsContentTypeResponse getRoutingVersionNumberCalculateRouteLocationsContentType(org.openapis.openapi.models.operations.GetRoutingVersionNumberCalculateRouteLocationsContentTypeRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRoutingVersionNumberCalculateRouteLocationsContentTypeRequest.class, baseUrl, "/routing/{versionNumber}/calculateRoute/{locations}/{contentType}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetRoutingVersionNumberCalculateRouteLocationsContentTypeRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRoutingVersionNumberCalculateRouteLocationsContentTypeResponse res = new org.openapis.openapi.models.operations.GetRoutingVersionNumberCalculateRouteLocationsContentTypeResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 400 || httpRes.statusCode() == 403 || httpRes.statusCode() == 404 || httpRes.statusCode() == 405 || httpRes.statusCode() == 408 || httpRes.statusCode() == 414 || httpRes.statusCode() == 500 || httpRes.statusCode() == 502 || httpRes.statusCode() == 503 || httpRes.statusCode() == 504 || httpRes.statusCode() == 596) {
        }

        return res;
    }

    /**
     * Reachable Range
     * Calculates a set of locations that can be reached from the origin point. POST method handles additionally parameters: &lt;em&gt;supportingPoints&lt;/em&gt;, &lt;em&gt;allowVignette&lt;/em&gt;, &lt;em&gt;avoidVignette&lt;/em&gt;, &lt;em&gt;avoidAreas&lt;/em&gt;.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonResponse postRoutingVersionNumberCalculateReachableRangeOriginContentTypeJson(org.openapis.openapi.models.operations.PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest.class, baseUrl, "/routing/{versionNumber}/calculateReachableRange/{origin}/{contentType}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "calculateReachableRangePostDataParameters", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonResponse res = new org.openapis.openapi.models.operations.PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 400 || httpRes.statusCode() == 403 || httpRes.statusCode() == 404 || httpRes.statusCode() == 405 || httpRes.statusCode() == 408 || httpRes.statusCode() == 414 || httpRes.statusCode() == 500 || httpRes.statusCode() == 502 || httpRes.statusCode() == 503 || httpRes.statusCode() == 504 || httpRes.statusCode() == 596) {
        }

        return res;
    }

    /**
     * Reachable Range
     * Calculates a set of locations that can be reached from the origin point. POST method handles additionally parameters: &lt;em&gt;supportingPoints&lt;/em&gt;, &lt;em&gt;allowVignette&lt;/em&gt;, &lt;em&gt;avoidVignette&lt;/em&gt;, &lt;em&gt;avoidAreas&lt;/em&gt;.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeRawResponse postRoutingVersionNumberCalculateReachableRangeOriginContentTypeRaw(org.openapis.openapi.models.operations.PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeRawRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeRawRequest.class, baseUrl, "/routing/{versionNumber}/calculateReachableRange/{origin}/{contentType}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "raw");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeRawRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeRawResponse res = new org.openapis.openapi.models.operations.PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeRawResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 400 || httpRes.statusCode() == 403 || httpRes.statusCode() == 404 || httpRes.statusCode() == 405 || httpRes.statusCode() == 408 || httpRes.statusCode() == 414 || httpRes.statusCode() == 500 || httpRes.statusCode() == 502 || httpRes.statusCode() == 503 || httpRes.statusCode() == 504 || httpRes.statusCode() == 596) {
        }

        return res;
    }

    /**
     * Calculate Route
     * Calculates a route between an origin and a destination. POST method handles additionally parameters: &lt;em&gt;supportingPoints&lt;/em&gt;, &lt;em&gt;allowVignette&lt;/em&gt;, &lt;em&gt;avoidVignette&lt;/em&gt;, &lt;em&gt;avoidAreas&lt;/em&gt;.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRoutingVersionNumberCalculateRouteLocationsContentTypeJsonResponse postRoutingVersionNumberCalculateRouteLocationsContentTypeJson(org.openapis.openapi.models.operations.PostRoutingVersionNumberCalculateRouteLocationsContentTypeJsonRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRoutingVersionNumberCalculateRouteLocationsContentTypeJsonRequest.class, baseUrl, "/routing/{versionNumber}/calculateRoute/{locations}/{contentType}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "calculateRoutePostDataParameters", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.PostRoutingVersionNumberCalculateRouteLocationsContentTypeJsonRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRoutingVersionNumberCalculateRouteLocationsContentTypeJsonResponse res = new org.openapis.openapi.models.operations.PostRoutingVersionNumberCalculateRouteLocationsContentTypeJsonResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 400 || httpRes.statusCode() == 403 || httpRes.statusCode() == 404 || httpRes.statusCode() == 405 || httpRes.statusCode() == 408 || httpRes.statusCode() == 414 || httpRes.statusCode() == 500 || httpRes.statusCode() == 502 || httpRes.statusCode() == 503 || httpRes.statusCode() == 504 || httpRes.statusCode() == 596) {
        }

        return res;
    }

    /**
     * Calculate Route
     * Calculates a route between an origin and a destination. POST method handles additionally parameters: &lt;em&gt;supportingPoints&lt;/em&gt;, &lt;em&gt;allowVignette&lt;/em&gt;, &lt;em&gt;avoidVignette&lt;/em&gt;, &lt;em&gt;avoidAreas&lt;/em&gt;.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRoutingVersionNumberCalculateRouteLocationsContentTypeRawResponse postRoutingVersionNumberCalculateRouteLocationsContentTypeRaw(org.openapis.openapi.models.operations.PostRoutingVersionNumberCalculateRouteLocationsContentTypeRawRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRoutingVersionNumberCalculateRouteLocationsContentTypeRawRequest.class, baseUrl, "/routing/{versionNumber}/calculateRoute/{locations}/{contentType}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "raw");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.PostRoutingVersionNumberCalculateRouteLocationsContentTypeRawRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRoutingVersionNumberCalculateRouteLocationsContentTypeRawResponse res = new org.openapis.openapi.models.operations.PostRoutingVersionNumberCalculateRouteLocationsContentTypeRawResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 400 || httpRes.statusCode() == 403 || httpRes.statusCode() == 404 || httpRes.statusCode() == 405 || httpRes.statusCode() == 408 || httpRes.statusCode() == 414 || httpRes.statusCode() == 500 || httpRes.statusCode() == 502 || httpRes.statusCode() == 503 || httpRes.statusCode() == 504 || httpRes.statusCode() == 596) {
        }

        return res;
    }
}