// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ClusterStatusStateEnum - Output only. The cluster's state.
type ClusterStatusStateEnum string

const (
	ClusterStatusStateEnumUnknown          ClusterStatusStateEnum = "UNKNOWN"
	ClusterStatusStateEnumCreating         ClusterStatusStateEnum = "CREATING"
	ClusterStatusStateEnumRunning          ClusterStatusStateEnum = "RUNNING"
	ClusterStatusStateEnumError            ClusterStatusStateEnum = "ERROR"
	ClusterStatusStateEnumErrorDueToUpdate ClusterStatusStateEnum = "ERROR_DUE_TO_UPDATE"
	ClusterStatusStateEnumDeleting         ClusterStatusStateEnum = "DELETING"
	ClusterStatusStateEnumUpdating         ClusterStatusStateEnum = "UPDATING"
	ClusterStatusStateEnumStopping         ClusterStatusStateEnum = "STOPPING"
	ClusterStatusStateEnumStopped          ClusterStatusStateEnum = "STOPPED"
	ClusterStatusStateEnumStarting         ClusterStatusStateEnum = "STARTING"
	ClusterStatusStateEnumRepairing        ClusterStatusStateEnum = "REPAIRING"
)

func (e ClusterStatusStateEnum) ToPointer() *ClusterStatusStateEnum {
	return &e
}

func (e *ClusterStatusStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "CREATING":
		fallthrough
	case "RUNNING":
		fallthrough
	case "ERROR":
		fallthrough
	case "ERROR_DUE_TO_UPDATE":
		fallthrough
	case "DELETING":
		fallthrough
	case "UPDATING":
		fallthrough
	case "STOPPING":
		fallthrough
	case "STOPPED":
		fallthrough
	case "STARTING":
		fallthrough
	case "REPAIRING":
		*e = ClusterStatusStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ClusterStatusStateEnum: %v", v)
	}
}

// ClusterStatusSubstateEnum - Output only. Additional state information that includes status reported by the agent.
type ClusterStatusSubstateEnum string

const (
	ClusterStatusSubstateEnumUnspecified ClusterStatusSubstateEnum = "UNSPECIFIED"
	ClusterStatusSubstateEnumUnhealthy   ClusterStatusSubstateEnum = "UNHEALTHY"
	ClusterStatusSubstateEnumStaleStatus ClusterStatusSubstateEnum = "STALE_STATUS"
)

func (e ClusterStatusSubstateEnum) ToPointer() *ClusterStatusSubstateEnum {
	return &e
}

func (e *ClusterStatusSubstateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNSPECIFIED":
		fallthrough
	case "UNHEALTHY":
		fallthrough
	case "STALE_STATUS":
		*e = ClusterStatusSubstateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ClusterStatusSubstateEnum: %v", v)
	}
}

// ClusterStatus - The status of a cluster and its instances.
type ClusterStatus struct {
	// Optional. Output only. Details of cluster's state.
	Detail *string `json:"detail,omitempty"`
	// Output only. The cluster's state.
	State *ClusterStatusStateEnum `json:"state,omitempty"`
	// Output only. Time when this state was entered (see JSON representation of Timestamp (https://developers.google.com/protocol-buffers/docs/proto3#json)).
	StateStartTime *string `json:"stateStartTime,omitempty"`
	// Output only. Additional state information that includes status reported by the agent.
	Substate *ClusterStatusSubstateEnum `json:"substate,omitempty"`
}
