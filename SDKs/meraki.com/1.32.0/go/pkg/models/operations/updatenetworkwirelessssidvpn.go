// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UpdateNetworkWirelessSsidVpnRequestBodyConcentrator - The VPN concentrator settings for this SSID.
type UpdateNetworkWirelessSsidVpnRequestBodyConcentrator struct {
	// The NAT ID of the concentrator that should be set.
	NetworkID *string `json:"networkId,omitempty"`
	// The VLAN that should be tagged for the concentrator.
	VlanID *int64 `json:"vlanId,omitempty"`
}

// UpdateNetworkWirelessSsidVpnRequestBodyFailover - Secondary VPN concentrator settings. This is only used when two VPN concentrators are configured on the SSID.
type UpdateNetworkWirelessSsidVpnRequestBodyFailover struct {
	// Idle timer interval in seconds.
	HeartbeatInterval *int64 `json:"heartbeatInterval,omitempty"`
	// Idle timer timeout in seconds.
	IdleTimeout *int64 `json:"idleTimeout,omitempty"`
	// IP addressed reserved on DHCP server where SSID will terminate.
	RequestIP *string `json:"requestIp,omitempty"`
}

// UpdateNetworkWirelessSsidVpnRequestBodySplitTunnelRulesProtocolEnum - Protocol for this split tunnel rule.
type UpdateNetworkWirelessSsidVpnRequestBodySplitTunnelRulesProtocolEnum string

const (
	UpdateNetworkWirelessSsidVpnRequestBodySplitTunnelRulesProtocolEnumAny UpdateNetworkWirelessSsidVpnRequestBodySplitTunnelRulesProtocolEnum = "Any"
	UpdateNetworkWirelessSsidVpnRequestBodySplitTunnelRulesProtocolEnumTCP UpdateNetworkWirelessSsidVpnRequestBodySplitTunnelRulesProtocolEnum = "TCP"
	UpdateNetworkWirelessSsidVpnRequestBodySplitTunnelRulesProtocolEnumUDP UpdateNetworkWirelessSsidVpnRequestBodySplitTunnelRulesProtocolEnum = "UDP"
)

func (e UpdateNetworkWirelessSsidVpnRequestBodySplitTunnelRulesProtocolEnum) ToPointer() *UpdateNetworkWirelessSsidVpnRequestBodySplitTunnelRulesProtocolEnum {
	return &e
}

func (e *UpdateNetworkWirelessSsidVpnRequestBodySplitTunnelRulesProtocolEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Any":
		fallthrough
	case "TCP":
		fallthrough
	case "UDP":
		*e = UpdateNetworkWirelessSsidVpnRequestBodySplitTunnelRulesProtocolEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessSsidVpnRequestBodySplitTunnelRulesProtocolEnum: %v", v)
	}
}

type UpdateNetworkWirelessSsidVpnRequestBodySplitTunnelRules struct {
	// Description for this split tunnel rule (optional).
	Comment *string `json:"comment,omitempty"`
	// Destination for this split tunnel rule. IP address, fully-qualified domain names (FQDN) or 'any'.
	DestCidr string `json:"destCidr"`
	// Destination port for this split tunnel rule, (integer in the range 1-65535), or 'any'.
	DestPort *string `json:"destPort,omitempty"`
	// Traffic policy specified for this split tunnel rule, 'allow' or 'deny'.
	Policy string `json:"policy"`
	// Protocol for this split tunnel rule.
	Protocol *UpdateNetworkWirelessSsidVpnRequestBodySplitTunnelRulesProtocolEnum `json:"protocol,omitempty"`
}

// UpdateNetworkWirelessSsidVpnRequestBodySplitTunnel - The VPN split tunnel settings for this SSID.
type UpdateNetworkWirelessSsidVpnRequestBodySplitTunnel struct {
	// If true, VPN split tunnel is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// List of VPN split tunnel rules.
	Rules []UpdateNetworkWirelessSsidVpnRequestBodySplitTunnelRules `json:"rules,omitempty"`
}

type UpdateNetworkWirelessSsidVpnRequestBody struct {
	// The VPN concentrator settings for this SSID.
	Concentrator *UpdateNetworkWirelessSsidVpnRequestBodyConcentrator `json:"concentrator,omitempty"`
	// Secondary VPN concentrator settings. This is only used when two VPN concentrators are configured on the SSID.
	Failover *UpdateNetworkWirelessSsidVpnRequestBodyFailover `json:"failover,omitempty"`
	// The VPN split tunnel settings for this SSID.
	SplitTunnel *UpdateNetworkWirelessSsidVpnRequestBodySplitTunnel `json:"splitTunnel,omitempty"`
}

type UpdateNetworkWirelessSsidVpnRequest struct {
	RequestBody *UpdateNetworkWirelessSsidVpnRequestBody `request:"mediaType=application/json"`
	NetworkID   string                                   `pathParam:"style=simple,explode=false,name=networkId"`
	Number      string                                   `pathParam:"style=simple,explode=false,name=number"`
}

type UpdateNetworkWirelessSsidVpnResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateNetworkWirelessSsidVpn200ApplicationJSONObject map[string]interface{}
}
