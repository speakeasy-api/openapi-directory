// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ComputeEngineTargetDetailsBootOptionEnum - The VM Boot Option, as set in the source vm.
type ComputeEngineTargetDetailsBootOptionEnum string

const (
	ComputeEngineTargetDetailsBootOptionEnumComputeEngineBootOptionUnspecified ComputeEngineTargetDetailsBootOptionEnum = "COMPUTE_ENGINE_BOOT_OPTION_UNSPECIFIED"
	ComputeEngineTargetDetailsBootOptionEnumComputeEngineBootOptionEfi         ComputeEngineTargetDetailsBootOptionEnum = "COMPUTE_ENGINE_BOOT_OPTION_EFI"
	ComputeEngineTargetDetailsBootOptionEnumComputeEngineBootOptionBios        ComputeEngineTargetDetailsBootOptionEnum = "COMPUTE_ENGINE_BOOT_OPTION_BIOS"
)

func (e ComputeEngineTargetDetailsBootOptionEnum) ToPointer() *ComputeEngineTargetDetailsBootOptionEnum {
	return &e
}

func (e *ComputeEngineTargetDetailsBootOptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "COMPUTE_ENGINE_BOOT_OPTION_UNSPECIFIED":
		fallthrough
	case "COMPUTE_ENGINE_BOOT_OPTION_EFI":
		fallthrough
	case "COMPUTE_ENGINE_BOOT_OPTION_BIOS":
		*e = ComputeEngineTargetDetailsBootOptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ComputeEngineTargetDetailsBootOptionEnum: %v", v)
	}
}

// ComputeEngineTargetDetailsDiskTypeEnum - The disk type to use in the VM.
type ComputeEngineTargetDetailsDiskTypeEnum string

const (
	ComputeEngineTargetDetailsDiskTypeEnumComputeEngineDiskTypeUnspecified ComputeEngineTargetDetailsDiskTypeEnum = "COMPUTE_ENGINE_DISK_TYPE_UNSPECIFIED"
	ComputeEngineTargetDetailsDiskTypeEnumComputeEngineDiskTypeStandard    ComputeEngineTargetDetailsDiskTypeEnum = "COMPUTE_ENGINE_DISK_TYPE_STANDARD"
	ComputeEngineTargetDetailsDiskTypeEnumComputeEngineDiskTypeSsd         ComputeEngineTargetDetailsDiskTypeEnum = "COMPUTE_ENGINE_DISK_TYPE_SSD"
	ComputeEngineTargetDetailsDiskTypeEnumComputeEngineDiskTypeBalanced    ComputeEngineTargetDetailsDiskTypeEnum = "COMPUTE_ENGINE_DISK_TYPE_BALANCED"
)

func (e ComputeEngineTargetDetailsDiskTypeEnum) ToPointer() *ComputeEngineTargetDetailsDiskTypeEnum {
	return &e
}

func (e *ComputeEngineTargetDetailsDiskTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "COMPUTE_ENGINE_DISK_TYPE_UNSPECIFIED":
		fallthrough
	case "COMPUTE_ENGINE_DISK_TYPE_STANDARD":
		fallthrough
	case "COMPUTE_ENGINE_DISK_TYPE_SSD":
		fallthrough
	case "COMPUTE_ENGINE_DISK_TYPE_BALANCED":
		*e = ComputeEngineTargetDetailsDiskTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ComputeEngineTargetDetailsDiskTypeEnum: %v", v)
	}
}

// ComputeEngineTargetDetailsLicenseTypeEnum - The license type to use in OS adaptation.
type ComputeEngineTargetDetailsLicenseTypeEnum string

const (
	ComputeEngineTargetDetailsLicenseTypeEnumComputeEngineLicenseTypeDefault ComputeEngineTargetDetailsLicenseTypeEnum = "COMPUTE_ENGINE_LICENSE_TYPE_DEFAULT"
	ComputeEngineTargetDetailsLicenseTypeEnumComputeEngineLicenseTypePayg    ComputeEngineTargetDetailsLicenseTypeEnum = "COMPUTE_ENGINE_LICENSE_TYPE_PAYG"
	ComputeEngineTargetDetailsLicenseTypeEnumComputeEngineLicenseTypeByol    ComputeEngineTargetDetailsLicenseTypeEnum = "COMPUTE_ENGINE_LICENSE_TYPE_BYOL"
)

func (e ComputeEngineTargetDetailsLicenseTypeEnum) ToPointer() *ComputeEngineTargetDetailsLicenseTypeEnum {
	return &e
}

func (e *ComputeEngineTargetDetailsLicenseTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "COMPUTE_ENGINE_LICENSE_TYPE_DEFAULT":
		fallthrough
	case "COMPUTE_ENGINE_LICENSE_TYPE_PAYG":
		fallthrough
	case "COMPUTE_ENGINE_LICENSE_TYPE_BYOL":
		*e = ComputeEngineTargetDetailsLicenseTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ComputeEngineTargetDetailsLicenseTypeEnum: %v", v)
	}
}

// ComputeEngineTargetDetails - ComputeEngineTargetDetails is a collection of details for creating a VM in a target Compute Engine project.
type ComputeEngineTargetDetails struct {
	// Additional licenses to assign to the VM.
	AdditionalLicenses []string `json:"additionalLicenses,omitempty"`
	// AppliedLicense holds the license data returned by adaptation module report.
	AppliedLicense *AppliedLicense `json:"appliedLicense,omitempty"`
	// The VM Boot Option, as set in the source vm.
	BootOption *ComputeEngineTargetDetailsBootOptionEnum `json:"bootOption,omitempty"`
	// Scheduling information for VM on maintenance/restart behaviour and node allocation in sole tenant nodes.
	ComputeScheduling *ComputeScheduling `json:"computeScheduling,omitempty"`
	// The disk type to use in the VM.
	DiskType *ComputeEngineTargetDetailsDiskTypeEnum `json:"diskType,omitempty"`
	// The hostname to assign to the VM.
	Hostname *string `json:"hostname,omitempty"`
	// A map of labels to associate with the VM.
	Labels map[string]string `json:"labels,omitempty"`
	// The license type to use in OS adaptation.
	LicenseType *ComputeEngineTargetDetailsLicenseTypeEnum `json:"licenseType,omitempty"`
	// The machine type to create the VM with.
	MachineType *string `json:"machineType,omitempty"`
	// The machine type series to create the VM with.
	MachineTypeSeries *string `json:"machineTypeSeries,omitempty"`
	// The metadata key/value pairs to assign to the VM.
	Metadata map[string]string `json:"metadata,omitempty"`
	// List of NICs connected to this VM.
	NetworkInterfaces []NetworkInterface `json:"networkInterfaces,omitempty"`
	// A map of network tags to associate with the VM.
	NetworkTags []string `json:"networkTags,omitempty"`
	// The Google Cloud target project ID or project name.
	Project *string `json:"project,omitempty"`
	// Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI.
	SecureBoot *bool `json:"secureBoot,omitempty"`
	// The service account to associate the VM with.
	ServiceAccount *string `json:"serviceAccount,omitempty"`
	// The name of the VM to create.
	VMName *string `json:"vmName,omitempty"`
	// The zone in which to create the VM.
	Zone *string `json:"zone,omitempty"`
}
