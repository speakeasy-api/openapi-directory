// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ProfileTokenRequestCookieTypeEnum - If you specify a cookie type then a content filter cookie will be returned
// along with the token(s). This is only intended for web based clients which
// need to pass the cookies to a server to render a page based on the user's
// content filters e.g subscription code.
//
// If type `Session` the cookie will be session based.
// If type `Persistent` the cookie will have a medium term lifespan.
// If undefined no cookies will be set.
type ProfileTokenRequestCookieTypeEnum string

const (
	ProfileTokenRequestCookieTypeEnumSession    ProfileTokenRequestCookieTypeEnum = "Session"
	ProfileTokenRequestCookieTypeEnumPersistent ProfileTokenRequestCookieTypeEnum = "Persistent"
)

func (e *ProfileTokenRequestCookieTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Session":
		fallthrough
	case "Persistent":
		*e = ProfileTokenRequestCookieTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ProfileTokenRequestCookieTypeEnum: %s", s)
	}
}

type ProfileTokenRequestScopesEnum string

const (
	ProfileTokenRequestScopesEnumCatalog  ProfileTokenRequestScopesEnum = "Catalog"
	ProfileTokenRequestScopesEnumCommerce ProfileTokenRequestScopesEnum = "Commerce"
	ProfileTokenRequestScopesEnumSettings ProfileTokenRequestScopesEnum = "Settings"
)

func (e *ProfileTokenRequestScopesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Catalog":
		fallthrough
	case "Commerce":
		fallthrough
	case "Settings":
		*e = ProfileTokenRequestScopesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ProfileTokenRequestScopesEnum: %s", s)
	}
}

// ProfileTokenRequest - The profile id and optional pin with required token scope.
type ProfileTokenRequest struct {
	// If you specify a cookie type then a content filter cookie will be returned
	// along with the token(s). This is only intended for web based clients which
	// need to pass the cookies to a server to render a page based on the user's
	// content filters e.g subscription code.
	//
	// If type `Session` the cookie will be session based.
	// If type `Persistent` the cookie will have a medium term lifespan.
	// If undefined no cookies will be set.
	//
	CookieType *ProfileTokenRequestCookieTypeEnum `json:"cookieType,omitempty"`
	// The pin associated with this profile, if any.
	Pin *string `json:"pin,omitempty"`
	// The id of the profile the token should grant access rights to.
	ProfileID string `json:"profileId"`
	// The scope(s) of the token(s) required.
	Scopes []ProfileTokenRequestScopesEnum `json:"scopes"`
}
