// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

type ListDocumentsCategoryInEnum string

const (
	ListDocumentsCategoryInEnumForm1099Int ListDocumentsCategoryInEnum = "form_1099_int"
)

func (e *ListDocumentsCategoryInEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "form_1099_int":
		*e = ListDocumentsCategoryInEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDocumentsCategoryInEnum: %s", s)
	}
}

type ListDocumentsQueryParams struct {
	CategoryIn          []ListDocumentsCategoryInEnum `queryParam:"style=form,explode=true,name=category.in"`
	CreatedAtAfter      *time.Time                    `queryParam:"style=form,explode=true,name=created_at.after"`
	CreatedAtBefore     *time.Time                    `queryParam:"style=form,explode=true,name=created_at.before"`
	CreatedAtOnOrAfter  *time.Time                    `queryParam:"style=form,explode=true,name=created_at.on_or_after"`
	CreatedAtOnOrBefore *time.Time                    `queryParam:"style=form,explode=true,name=created_at.on_or_before"`
	Cursor              *string                       `queryParam:"style=form,explode=true,name=cursor"`
	EntityID            *string                       `queryParam:"style=form,explode=true,name=entity_id"`
	Limit               *int64                        `queryParam:"style=form,explode=true,name=limit"`
}

type ListDocumentsRequest struct {
	QueryParams ListDocumentsQueryParams
}

type ListDocumentsDefaultApplicationJSON13StatusEnum string

const (
	ListDocumentsDefaultApplicationJSON13StatusEnumFourHundredAndTwentyNine ListDocumentsDefaultApplicationJSON13StatusEnum = "429"
)

func (e *ListDocumentsDefaultApplicationJSON13StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "429":
		*e = ListDocumentsDefaultApplicationJSON13StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDocumentsDefaultApplicationJSON13StatusEnum: %s", s)
	}
}

type ListDocumentsDefaultApplicationJSON13TypeEnum string

const (
	ListDocumentsDefaultApplicationJSON13TypeEnumRateLimitedError ListDocumentsDefaultApplicationJSON13TypeEnum = "rate_limited_error"
)

func (e *ListDocumentsDefaultApplicationJSON13TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "rate_limited_error":
		*e = ListDocumentsDefaultApplicationJSON13TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDocumentsDefaultApplicationJSON13TypeEnum: %s", s)
	}
}

type ListDocumentsDefaultApplicationJSON13 struct {
	Detail     string                                          `json:"detail"`
	RetryAfter *int64                                          `json:"retry_after,omitempty"`
	Status     ListDocumentsDefaultApplicationJSON13StatusEnum `json:"status"`
	Title      string                                          `json:"title"`
	Type       ListDocumentsDefaultApplicationJSON13TypeEnum   `json:"type"`
}

type ListDocumentsDefaultApplicationJSON12StatusEnum string

const (
	ListDocumentsDefaultApplicationJSON12StatusEnumFourHundredAndThree ListDocumentsDefaultApplicationJSON12StatusEnum = "403"
)

func (e *ListDocumentsDefaultApplicationJSON12StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "403":
		*e = ListDocumentsDefaultApplicationJSON12StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDocumentsDefaultApplicationJSON12StatusEnum: %s", s)
	}
}

type ListDocumentsDefaultApplicationJSON12TypeEnum string

const (
	ListDocumentsDefaultApplicationJSON12TypeEnumPrivateFeatureError ListDocumentsDefaultApplicationJSON12TypeEnum = "private_feature_error"
)

func (e *ListDocumentsDefaultApplicationJSON12TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "private_feature_error":
		*e = ListDocumentsDefaultApplicationJSON12TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDocumentsDefaultApplicationJSON12TypeEnum: %s", s)
	}
}

type ListDocumentsDefaultApplicationJSON12 struct {
	Detail string                                          `json:"detail"`
	Status ListDocumentsDefaultApplicationJSON12StatusEnum `json:"status"`
	Title  string                                          `json:"title"`
	Type   ListDocumentsDefaultApplicationJSON12TypeEnum   `json:"type"`
}

type ListDocumentsDefaultApplicationJSON11StatusEnum string

const (
	ListDocumentsDefaultApplicationJSON11StatusEnumFourHundredAndFour ListDocumentsDefaultApplicationJSON11StatusEnum = "404"
)

func (e *ListDocumentsDefaultApplicationJSON11StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "404":
		*e = ListDocumentsDefaultApplicationJSON11StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDocumentsDefaultApplicationJSON11StatusEnum: %s", s)
	}
}

type ListDocumentsDefaultApplicationJSON11TypeEnum string

const (
	ListDocumentsDefaultApplicationJSON11TypeEnumObjectNotFoundError ListDocumentsDefaultApplicationJSON11TypeEnum = "object_not_found_error"
)

func (e *ListDocumentsDefaultApplicationJSON11TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "object_not_found_error":
		*e = ListDocumentsDefaultApplicationJSON11TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDocumentsDefaultApplicationJSON11TypeEnum: %s", s)
	}
}

type ListDocumentsDefaultApplicationJSON11 struct {
	Detail string                                          `json:"detail"`
	Status ListDocumentsDefaultApplicationJSON11StatusEnum `json:"status"`
	Title  string                                          `json:"title"`
	Type   ListDocumentsDefaultApplicationJSON11TypeEnum   `json:"type"`
}

type ListDocumentsDefaultApplicationJSON10StatusEnum string

const (
	ListDocumentsDefaultApplicationJSON10StatusEnumFourHundred ListDocumentsDefaultApplicationJSON10StatusEnum = "400"
)

func (e *ListDocumentsDefaultApplicationJSON10StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "400":
		*e = ListDocumentsDefaultApplicationJSON10StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDocumentsDefaultApplicationJSON10StatusEnum: %s", s)
	}
}

type ListDocumentsDefaultApplicationJSON10TypeEnum string

const (
	ListDocumentsDefaultApplicationJSON10TypeEnumMalformedRequestError ListDocumentsDefaultApplicationJSON10TypeEnum = "malformed_request_error"
)

func (e *ListDocumentsDefaultApplicationJSON10TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "malformed_request_error":
		*e = ListDocumentsDefaultApplicationJSON10TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDocumentsDefaultApplicationJSON10TypeEnum: %s", s)
	}
}

type ListDocumentsDefaultApplicationJSON10 struct {
	Detail string                                          `json:"detail"`
	Status ListDocumentsDefaultApplicationJSON10StatusEnum `json:"status"`
	Title  string                                          `json:"title"`
	Type   ListDocumentsDefaultApplicationJSON10TypeEnum   `json:"type"`
}

type ListDocumentsDefaultApplicationJSON9StatusEnum string

const (
	ListDocumentsDefaultApplicationJSON9StatusEnumFourHundred ListDocumentsDefaultApplicationJSON9StatusEnum = "400"
)

func (e *ListDocumentsDefaultApplicationJSON9StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "400":
		*e = ListDocumentsDefaultApplicationJSON9StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDocumentsDefaultApplicationJSON9StatusEnum: %s", s)
	}
}

type ListDocumentsDefaultApplicationJSON9TypeEnum string

const (
	ListDocumentsDefaultApplicationJSON9TypeEnumInvalidParametersError ListDocumentsDefaultApplicationJSON9TypeEnum = "invalid_parameters_error"
)

func (e *ListDocumentsDefaultApplicationJSON9TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_parameters_error":
		*e = ListDocumentsDefaultApplicationJSON9TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDocumentsDefaultApplicationJSON9TypeEnum: %s", s)
	}
}

type ListDocumentsDefaultApplicationJSON9 struct {
	Detail string `json:"detail"`
	// All errors related to parsing the request parameters.
	Errors []map[string]interface{}                       `json:"errors,omitempty"`
	Status ListDocumentsDefaultApplicationJSON9StatusEnum `json:"status"`
	Title  string                                         `json:"title"`
	Type   ListDocumentsDefaultApplicationJSON9TypeEnum   `json:"type"`
}

type ListDocumentsDefaultApplicationJSON8StatusEnum string

const (
	ListDocumentsDefaultApplicationJSON8StatusEnumFourHundredAndNine ListDocumentsDefaultApplicationJSON8StatusEnum = "409"
)

func (e *ListDocumentsDefaultApplicationJSON8StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "409":
		*e = ListDocumentsDefaultApplicationJSON8StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDocumentsDefaultApplicationJSON8StatusEnum: %s", s)
	}
}

type ListDocumentsDefaultApplicationJSON8TypeEnum string

const (
	ListDocumentsDefaultApplicationJSON8TypeEnumInvalidOperationError ListDocumentsDefaultApplicationJSON8TypeEnum = "invalid_operation_error"
)

func (e *ListDocumentsDefaultApplicationJSON8TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_operation_error":
		*e = ListDocumentsDefaultApplicationJSON8TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDocumentsDefaultApplicationJSON8TypeEnum: %s", s)
	}
}

type ListDocumentsDefaultApplicationJSON8 struct {
	Detail string                                         `json:"detail"`
	Status ListDocumentsDefaultApplicationJSON8StatusEnum `json:"status"`
	Title  string                                         `json:"title"`
	Type   ListDocumentsDefaultApplicationJSON8TypeEnum   `json:"type"`
}

type ListDocumentsDefaultApplicationJSON7StatusEnum string

const (
	ListDocumentsDefaultApplicationJSON7StatusEnumFourHundredAndOne ListDocumentsDefaultApplicationJSON7StatusEnum = "401"
)

func (e *ListDocumentsDefaultApplicationJSON7StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "401":
		*e = ListDocumentsDefaultApplicationJSON7StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDocumentsDefaultApplicationJSON7StatusEnum: %s", s)
	}
}

type ListDocumentsDefaultApplicationJSON7TypeEnum string

const (
	ListDocumentsDefaultApplicationJSON7TypeEnumInvalidAPIKeyError ListDocumentsDefaultApplicationJSON7TypeEnum = "invalid_api_key_error"
)

func (e *ListDocumentsDefaultApplicationJSON7TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_api_key_error":
		*e = ListDocumentsDefaultApplicationJSON7TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDocumentsDefaultApplicationJSON7TypeEnum: %s", s)
	}
}

type ListDocumentsDefaultApplicationJSON7 struct {
	Detail string                                         `json:"detail"`
	Status ListDocumentsDefaultApplicationJSON7StatusEnum `json:"status"`
	Title  string                                         `json:"title"`
	Type   ListDocumentsDefaultApplicationJSON7TypeEnum   `json:"type"`
}

type ListDocumentsDefaultApplicationJSON6StatusEnum string

const (
	ListDocumentsDefaultApplicationJSON6StatusEnumFiveHundred ListDocumentsDefaultApplicationJSON6StatusEnum = "500"
)

func (e *ListDocumentsDefaultApplicationJSON6StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "500":
		*e = ListDocumentsDefaultApplicationJSON6StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDocumentsDefaultApplicationJSON6StatusEnum: %s", s)
	}
}

type ListDocumentsDefaultApplicationJSON6TypeEnum string

const (
	ListDocumentsDefaultApplicationJSON6TypeEnumInternalServerError ListDocumentsDefaultApplicationJSON6TypeEnum = "internal_server_error"
)

func (e *ListDocumentsDefaultApplicationJSON6TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = ListDocumentsDefaultApplicationJSON6TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDocumentsDefaultApplicationJSON6TypeEnum: %s", s)
	}
}

type ListDocumentsDefaultApplicationJSON6 struct {
	Detail string                                         `json:"detail"`
	Status ListDocumentsDefaultApplicationJSON6StatusEnum `json:"status"`
	Title  string                                         `json:"title"`
	Type   ListDocumentsDefaultApplicationJSON6TypeEnum   `json:"type"`
}

type ListDocumentsDefaultApplicationJSON5StatusEnum string

const (
	ListDocumentsDefaultApplicationJSON5StatusEnumFourHundredAndThree ListDocumentsDefaultApplicationJSON5StatusEnum = "403"
)

func (e *ListDocumentsDefaultApplicationJSON5StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "403":
		*e = ListDocumentsDefaultApplicationJSON5StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDocumentsDefaultApplicationJSON5StatusEnum: %s", s)
	}
}

type ListDocumentsDefaultApplicationJSON5TypeEnum string

const (
	ListDocumentsDefaultApplicationJSON5TypeEnumInsufficientPermissionsError ListDocumentsDefaultApplicationJSON5TypeEnum = "insufficient_permissions_error"
)

func (e *ListDocumentsDefaultApplicationJSON5TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "insufficient_permissions_error":
		*e = ListDocumentsDefaultApplicationJSON5TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDocumentsDefaultApplicationJSON5TypeEnum: %s", s)
	}
}

type ListDocumentsDefaultApplicationJSON5 struct {
	Detail string                                         `json:"detail"`
	Status ListDocumentsDefaultApplicationJSON5StatusEnum `json:"status"`
	Title  string                                         `json:"title"`
	Type   ListDocumentsDefaultApplicationJSON5TypeEnum   `json:"type"`
}

type ListDocumentsDefaultApplicationJSON4StatusEnum string

const (
	ListDocumentsDefaultApplicationJSON4StatusEnumFourHundredAndTwentyTwo ListDocumentsDefaultApplicationJSON4StatusEnum = "422"
)

func (e *ListDocumentsDefaultApplicationJSON4StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "422":
		*e = ListDocumentsDefaultApplicationJSON4StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDocumentsDefaultApplicationJSON4StatusEnum: %s", s)
	}
}

type ListDocumentsDefaultApplicationJSON4TypeEnum string

const (
	ListDocumentsDefaultApplicationJSON4TypeEnumIdempotencyUnprocessableError ListDocumentsDefaultApplicationJSON4TypeEnum = "idempotency_unprocessable_error"
)

func (e *ListDocumentsDefaultApplicationJSON4TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "idempotency_unprocessable_error":
		*e = ListDocumentsDefaultApplicationJSON4TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDocumentsDefaultApplicationJSON4TypeEnum: %s", s)
	}
}

type ListDocumentsDefaultApplicationJSON4 struct {
	Detail string                                         `json:"detail"`
	Status ListDocumentsDefaultApplicationJSON4StatusEnum `json:"status"`
	Title  string                                         `json:"title"`
	Type   ListDocumentsDefaultApplicationJSON4TypeEnum   `json:"type"`
}

type ListDocumentsDefaultApplicationJSON3StatusEnum string

const (
	ListDocumentsDefaultApplicationJSON3StatusEnumFourHundredAndNine ListDocumentsDefaultApplicationJSON3StatusEnum = "409"
)

func (e *ListDocumentsDefaultApplicationJSON3StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "409":
		*e = ListDocumentsDefaultApplicationJSON3StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDocumentsDefaultApplicationJSON3StatusEnum: %s", s)
	}
}

type ListDocumentsDefaultApplicationJSON3TypeEnum string

const (
	ListDocumentsDefaultApplicationJSON3TypeEnumIdempotencyConflictError ListDocumentsDefaultApplicationJSON3TypeEnum = "idempotency_conflict_error"
)

func (e *ListDocumentsDefaultApplicationJSON3TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "idempotency_conflict_error":
		*e = ListDocumentsDefaultApplicationJSON3TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDocumentsDefaultApplicationJSON3TypeEnum: %s", s)
	}
}

type ListDocumentsDefaultApplicationJSON3 struct {
	Detail string                                         `json:"detail"`
	Status ListDocumentsDefaultApplicationJSON3StatusEnum `json:"status"`
	Title  string                                         `json:"title"`
	Type   ListDocumentsDefaultApplicationJSON3TypeEnum   `json:"type"`
}

type ListDocumentsDefaultApplicationJSON2StatusEnum string

const (
	ListDocumentsDefaultApplicationJSON2StatusEnumFourHundredAndThree ListDocumentsDefaultApplicationJSON2StatusEnum = "403"
)

func (e *ListDocumentsDefaultApplicationJSON2StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "403":
		*e = ListDocumentsDefaultApplicationJSON2StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDocumentsDefaultApplicationJSON2StatusEnum: %s", s)
	}
}

type ListDocumentsDefaultApplicationJSON2TypeEnum string

const (
	ListDocumentsDefaultApplicationJSON2TypeEnumEnvironmentMismatchError ListDocumentsDefaultApplicationJSON2TypeEnum = "environment_mismatch_error"
)

func (e *ListDocumentsDefaultApplicationJSON2TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "environment_mismatch_error":
		*e = ListDocumentsDefaultApplicationJSON2TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDocumentsDefaultApplicationJSON2TypeEnum: %s", s)
	}
}

type ListDocumentsDefaultApplicationJSON2 struct {
	Detail string                                         `json:"detail"`
	Status ListDocumentsDefaultApplicationJSON2StatusEnum `json:"status"`
	Title  string                                         `json:"title"`
	Type   ListDocumentsDefaultApplicationJSON2TypeEnum   `json:"type"`
}

type ListDocumentsDefaultApplicationJSON1StatusEnum string

const (
	ListDocumentsDefaultApplicationJSON1StatusEnumFourHundredAndFour ListDocumentsDefaultApplicationJSON1StatusEnum = "404"
)

func (e *ListDocumentsDefaultApplicationJSON1StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "404":
		*e = ListDocumentsDefaultApplicationJSON1StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDocumentsDefaultApplicationJSON1StatusEnum: %s", s)
	}
}

type ListDocumentsDefaultApplicationJSON1TypeEnum string

const (
	ListDocumentsDefaultApplicationJSON1TypeEnumAPIMethodNotFoundError ListDocumentsDefaultApplicationJSON1TypeEnum = "api_method_not_found_error"
)

func (e *ListDocumentsDefaultApplicationJSON1TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "api_method_not_found_error":
		*e = ListDocumentsDefaultApplicationJSON1TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDocumentsDefaultApplicationJSON1TypeEnum: %s", s)
	}
}

type ListDocumentsDefaultApplicationJSON1 struct {
	Detail string                                         `json:"detail"`
	Status ListDocumentsDefaultApplicationJSON1StatusEnum `json:"status"`
	Title  string                                         `json:"title"`
	Type   ListDocumentsDefaultApplicationJSON1TypeEnum   `json:"type"`
}

type ListDocumentsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Document List
	DocumentList *shared.DocumentList
	// Error
	Error interface{}
}
