// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type RepositoryConfigurationsListSecurity struct {
	APIToken shared.SchemeAPIToken `security:"scheme,type=apiKey,subtype=header"`
}

type RepositoryConfigurationsListPathParams struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type RepositoryConfigurationsListQueryParams struct {
	// Include inactive configurations if none are active
	IncludeInactive *bool `queryParam:"style=form,explode=true,name=includeInactive"`
}

type RepositoryConfigurationsListRequest struct {
	PathParams  RepositoryConfigurationsListPathParams
	QueryParams RepositoryConfigurationsListQueryParams
	Security    RepositoryConfigurationsListSecurity
}

// RepositoryConfigurationsListDefaultApplicationJSON - Bad Request
type RepositoryConfigurationsListDefaultApplicationJSON struct {
	Code    string `json:"code"`
	ID      string `json:"id"`
	Message string `json:"message"`
}

// RepositoryConfigurationsList200ApplicationJSONStateEnum - State of the configuration
type RepositoryConfigurationsList200ApplicationJSONStateEnum string

const (
	RepositoryConfigurationsList200ApplicationJSONStateEnumUnauthorized RepositoryConfigurationsList200ApplicationJSONStateEnum = "unauthorized"
	RepositoryConfigurationsList200ApplicationJSONStateEnumInactive     RepositoryConfigurationsList200ApplicationJSONStateEnum = "inactive"
	RepositoryConfigurationsList200ApplicationJSONStateEnumActive       RepositoryConfigurationsList200ApplicationJSONStateEnum = "active"
)

func (e *RepositoryConfigurationsList200ApplicationJSONStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "unauthorized":
		fallthrough
	case "inactive":
		fallthrough
	case "active":
		*e = RepositoryConfigurationsList200ApplicationJSONStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RepositoryConfigurationsList200ApplicationJSONStateEnum: %s", s)
	}
}

type RepositoryConfigurationsList200ApplicationJSON struct {
	// The external user id from the repository provider. Required for GitLab.com repositories
	ExternalUserID *string `json:"external_user_id,omitempty"`
	// Repository configuration identifier
	ID string `json:"id"`
	// The GitHub App Installation id. Required for repositories connected from GitHub App
	InstallationID *string `json:"installation_id,omitempty"`
	// The repository id from the repository provider. Required for repositories connected from GitHub App and GitLab.com
	RepoID *string `json:"repo_id,omitempty"`
	// The repository's git url, must be a HTTPS URL
	RepoURL string `json:"repo_url"`
	// The id of the service connection (private). Required for GitLab self-hosted repositories
	ServiceConnectionID *string `json:"service_connection_id,omitempty"`
	// State of the configuration
	State RepositoryConfigurationsList200ApplicationJSONStateEnum `json:"state"`
	// Type of repository
	Type string `json:"type"`
	// Email of the user who linked the repository
	UserEmail *string `json:"user_email,omitempty"`
}

type RepositoryConfigurationsListResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// List of repository configurations
	RepositoryConfigurationsList200ApplicationJSONAnies []RepositoryConfigurationsList200ApplicationJSON
	// Bad Request
	RepositoryConfigurationsListDefaultApplicationJSONObject *RepositoryConfigurationsListDefaultApplicationJSON
}
