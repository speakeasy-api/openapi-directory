"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import conflictresolvingmodel_enum as shared_conflictresolvingmodel_enum
from ..shared import getautomergingpreviewresponse as shared_getautomergingpreviewresponse
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAutoMergingPreviewRequestBodyConflictResolution:
    r"""How the auto-merging process should resolve conflicts between different profiles."""
    
    conflict_resolving_model: Optional[shared_conflictresolvingmodel_enum.ConflictResolvingModelEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConflictResolvingModel'), 'exclude': lambda f: f is None }})  
    source_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SourceName'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAutoMergingPreviewRequestBodyConsolidation:
    r"""The matching criteria to be used during the auto-merging process."""
    
    matching_attributes_list: Optional[list[list[str]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MatchingAttributesList'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAutoMergingPreviewRequestBody:
    
    conflict_resolution: GetAutoMergingPreviewRequestBodyConflictResolution = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConflictResolution') }})
    r"""How the auto-merging process should resolve conflicts between different profiles."""  
    consolidation: GetAutoMergingPreviewRequestBodyConsolidation = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Consolidation') }})
    r"""The matching criteria to be used during the auto-merging process."""  
    min_allowed_confidence_score_for_merging: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MinAllowedConfidenceScoreForMerging'), 'exclude': lambda f: f is None }})
    r"""Minimum confidence score required for profiles within a matching group to be merged during the auto-merge process."""  
    

@dataclasses.dataclass
class GetAutoMergingPreviewRequest:
    
    domain_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'DomainName', 'style': 'simple', 'explode': False }})
    r"""The unique name of the domain."""  
    request_body: GetAutoMergingPreviewRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GetAutoMergingPreviewResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    bad_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""BadRequestException"""  
    get_auto_merging_preview_response: Optional[shared_getautomergingpreviewresponse.GetAutoMergingPreviewResponse] = dataclasses.field(default=None)
    r"""Success"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    