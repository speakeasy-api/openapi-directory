/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Tender - Represents a tender (i.e., a method of payment) used in a Square transaction.
 */
public class Tender {
    /**
     * Additional recipients (other than the merchant) receiving a portion of this tender.
     * For example, fees assessed on the purchase by a third party integration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additional_recipients")
    public AdditionalRecipient[] additionalRecipients;
    public Tender withAdditionalRecipients(AdditionalRecipient[] additionalRecipients) {
        this.additionalRecipients = additionalRecipients;
        return this;
    }
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount_money")
    public Money amountMoney;
    public Tender withAmountMoney(Money amountMoney) {
        this.amountMoney = amountMoney;
        return this;
    }
    
    /**
     * Represents additional details of a tender with `type` `CARD` or `SQUARE_GIFT_CARD`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("card_details")
    public TenderCardDetails cardDetails;
    public Tender withCardDetails(TenderCardDetails cardDetails) {
        this.cardDetails = cardDetails;
        return this;
    }
    
    /**
     * Represents the details of a tender with `type` `CASH`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cash_details")
    public TenderCashDetails cashDetails;
    public Tender withCashDetails(TenderCashDetails cashDetails) {
        this.cashDetails = cashDetails;
        return this;
    }
    
    /**
     * The timestamp for when the tender was created, in RFC 3339 format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    public String createdAt;
    public Tender withCreatedAt(String createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * If the tender is associated with a customer or represents a customer's card on file,
     * this is the ID of the associated customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer_id")
    public String customerId;
    public Tender withCustomerId(String customerId) {
        this.customerId = customerId;
        return this;
    }
    
    /**
     * The tender's unique ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public Tender withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The ID of the transaction's associated location.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location_id")
    public String locationId;
    public Tender withLocationId(String locationId) {
        this.locationId = locationId;
        return this;
    }
    
    /**
     * An optional note associated with the tender at the time of payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("note")
    public String note;
    public Tender withNote(String note) {
        this.note = note;
        return this;
    }
    
    /**
     * The ID of the [Payment](https://developer.squareup.com/reference/square_2021-08-18/objects/Payment) that corresponds to this tender.
     * This value is only present for payments created with the v2 Payments API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_id")
    public String paymentId;
    public Tender withPaymentId(String paymentId) {
        this.paymentId = paymentId;
        return this;
    }
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("processing_fee_money")
    public Money processingFeeMoney;
    public Tender withProcessingFeeMoney(Money processingFeeMoney) {
        this.processingFeeMoney = processingFeeMoney;
        return this;
    }
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tip_money")
    public Money tipMoney;
    public Tender withTipMoney(Money tipMoney) {
        this.tipMoney = tipMoney;
        return this;
    }
    
    /**
     * The ID of the tender's associated transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transaction_id")
    public String transactionId;
    public Tender withTransactionId(String transactionId) {
        this.transactionId = transactionId;
        return this;
    }
    
    /**
     * The type of tender, such as `CARD` or `CASH`.
     */
    @JsonProperty("type")
    public String type;
    public Tender withType(String type) {
        this.type = type;
        return this;
    }
    
}
