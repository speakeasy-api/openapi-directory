<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class ReposUpdateBranchProtectionRequestBody
{
    /**
     * Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/enterprise-server@3.3/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation.
     * 
     * @var ?bool $allowDeletions
     */
	#[\JMS\Serializer\Annotation\SerializedName('allow_deletions')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $allowDeletions = null;
    
    /**
     * Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/enterprise-server@3.3/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation."
     * 
     * @var ?bool $allowForcePushes
     */
	#[\JMS\Serializer\Annotation\SerializedName('allow_force_pushes')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $allowForcePushes = null;
    
    /**
     * If set to `true`, the `restrictions` branch protection settings which limits who can push will also block pushes which create new branches, unless the push is initiated by a user, team, or app which has the ability to push. Set to `true` to restrict new branch creation. Default: `false`.
     * 
     * @var ?bool $blockCreations
     */
	#[\JMS\Serializer\Annotation\SerializedName('block_creations')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $blockCreations = null;
    
    /**
     * The list of status checks to require in order to merge into this branch.
     * 
     * @var ?array<string> $contexts
     */
	#[\JMS\Serializer\Annotation\SerializedName('contexts')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $contexts = null;
    
    /**
     * Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable.
     * 
     * @var bool $enforceAdmins
     */
	#[\JMS\Serializer\Annotation\SerializedName('enforce_admins')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $enforceAdmins;
    
    /**
     * Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to `false` to disable. Default: `false`.
     * 
     * @var ?bool $requiredConversationResolution
     */
	#[\JMS\Serializer\Annotation\SerializedName('required_conversation_resolution')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $requiredConversationResolution = null;
    
    /**
     * Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see "[Requiring a linear commit history](https://docs.github.com/enterprise-server@3.3/github/administering-a-repository/requiring-a-linear-commit-history)" in the GitHub Help documentation.
     * 
     * @var ?bool $requiredLinearHistory
     */
	#[\JMS\Serializer\Annotation\SerializedName('required_linear_history')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $requiredLinearHistory = null;
    
    /**
     * Require at least one approving review on a pull request, before merging. Set to `null` to disable.
     * 
     * @var \OpenAPI\OpenAPI\Models\Operations\ReposUpdateBranchProtectionRequestBodyRequiredPullRequestReviews $requiredPullRequestReviews
     */
	#[\JMS\Serializer\Annotation\SerializedName('required_pull_request_reviews')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Operations\ReposUpdateBranchProtectionRequestBodyRequiredPullRequestReviews')]
    public ReposUpdateBranchProtectionRequestBodyRequiredPullRequestReviews $requiredPullRequestReviews;
    
    /**
     * Require status checks to pass before merging. Set to `null` to disable.
     * 
     * @var \OpenAPI\OpenAPI\Models\Operations\ReposUpdateBranchProtectionRequestBodyRequiredStatusChecks $requiredStatusChecks
     */
	#[\JMS\Serializer\Annotation\SerializedName('required_status_checks')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Operations\ReposUpdateBranchProtectionRequestBodyRequiredStatusChecks')]
    public ReposUpdateBranchProtectionRequestBodyRequiredStatusChecks $requiredStatusChecks;
    
    /**
     * Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable.
     * 
     * @var \OpenAPI\OpenAPI\Models\Operations\ReposUpdateBranchProtectionRequestBodyRestrictions $restrictions
     */
	#[\JMS\Serializer\Annotation\SerializedName('restrictions')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Operations\ReposUpdateBranchProtectionRequestBodyRestrictions')]
    public ReposUpdateBranchProtectionRequestBodyRestrictions $restrictions;
    
	public function __construct()
	{
		$this->allowDeletions = null;
		$this->allowForcePushes = null;
		$this->blockCreations = null;
		$this->contexts = null;
		$this->enforceAdmins = false;
		$this->requiredConversationResolution = null;
		$this->requiredLinearHistory = null;
		$this->requiredPullRequestReviews = new \OpenAPI\OpenAPI\Models\Operations\ReposUpdateBranchProtectionRequestBodyRequiredPullRequestReviews();
		$this->requiredStatusChecks = new \OpenAPI\OpenAPI\Models\Operations\ReposUpdateBranchProtectionRequestBodyRequiredStatusChecks();
		$this->restrictions = new \OpenAPI\OpenAPI\Models\Operations\ReposUpdateBranchProtectionRequestBodyRestrictions();
	}
}
