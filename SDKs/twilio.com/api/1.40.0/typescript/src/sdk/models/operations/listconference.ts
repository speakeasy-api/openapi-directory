/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";
export const ListConferenceServerList = ["https://api.twilio.com"] as const;

export class ListConferenceSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

export class ListConferenceRequest extends SpeakeasyBase {
  /**
   * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference resource(s) to read.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=AccountSid",
  })
  accountSid: string;

  /**
   * The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that started on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify  conferences that started on or after midnight on a date, use `>=YYYY-MM-DD`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=DateCreated;dateTimeFormat=YYYY-MM-DD",
  })
  dateCreated?: Date;

  /**
   * The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that started on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify  conferences that started on or after midnight on a date, use `>=YYYY-MM-DD`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=DateCreated<;dateTimeFormat=YYYY-MM-DD",
  })
  dateCreatedLessThan?: Date;

  /**
   * The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that started on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify  conferences that started on or after midnight on a date, use `>=YYYY-MM-DD`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=DateCreated>;dateTimeFormat=YYYY-MM-DD",
  })
  dateCreatedGreaterThan?: Date;

  /**
   * The `date_updated` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that were last updated on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify conferences that were last updated on or after midnight on a given date, use  `>=YYYY-MM-DD`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=DateUpdated;dateTimeFormat=YYYY-MM-DD",
  })
  dateUpdated?: Date;

  /**
   * The `date_updated` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that were last updated on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify conferences that were last updated on or after midnight on a given date, use  `>=YYYY-MM-DD`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=DateUpdated<;dateTimeFormat=YYYY-MM-DD",
  })
  dateUpdatedLessThan?: Date;

  /**
   * The `date_updated` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that were last updated on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify conferences that were last updated on or after midnight on a given date, use  `>=YYYY-MM-DD`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=DateUpdated>;dateTimeFormat=YYYY-MM-DD",
  })
  dateUpdatedGreaterThan?: Date;

  /**
   * The string that identifies the Conference resources to read.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=FriendlyName",
  })
  friendlyName?: string;

  /**
   * The page index. This value is simply for client state.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=Page" })
  page?: number;

  /**
   * How many resources to return in each list page. The default is 50, and the maximum is 1000.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=PageSize",
  })
  pageSize?: number;

  /**
   * The page token. This is provided by the API.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=PageToken",
  })
  pageToken?: string;

  /**
   * The status of the resources to read. Can be: `init`, `in-progress`, or `completed`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=Status",
  })
  status?: shared.ConferenceEnumStatusEnum;
}

/**
 * OK
 */
export class ListConferenceListConferenceResponse extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: shared.ApiV2010AccountConference })
  @Expose({ name: "conferences" })
  @Type(() => shared.ApiV2010AccountConference)
  conferences?: shared.ApiV2010AccountConference[];

  @SpeakeasyMetadata()
  @Expose({ name: "end" })
  end?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "first_page_uri" })
  firstPageUri?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "next_page_uri" })
  nextPageUri?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "page" })
  page?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "page_size" })
  pageSize?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "previous_page_uri" })
  previousPageUri?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "start" })
  start?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri?: string;
}

export class ListConferenceResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  listConferenceResponse?: ListConferenceListConferenceResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
