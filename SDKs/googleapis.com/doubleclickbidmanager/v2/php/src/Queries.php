<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Queries 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a query.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesCreateResponse
     */
	public function doubleclickbidmanagerQueriesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/queries');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "queryInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->query = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Query', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a query as well as the associated reports.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesDeleteResponse
     */
	public function doubleclickbidmanagerQueriesDelete(
        \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/queries/{queryId}', \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Retrieves a query.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesGetResponse
     */
	public function doubleclickbidmanagerQueriesGet(
        \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/queries/{queryId}', \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->query = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Query', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists queries created by the current user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesListResponse
     */
	public function doubleclickbidmanagerQueriesList(
        \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/queries');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listQueriesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListQueriesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a report.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesReportsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesReportsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesReportsGetResponse
     */
	public function doubleclickbidmanagerQueriesReportsGet(
        \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesReportsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesReportsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesReportsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/queries/{queryId}/reports/{reportId}', \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesReportsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesReportsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesReportsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->report = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Report', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists reports associated with a query.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesReportsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesReportsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesReportsListResponse
     */
	public function doubleclickbidmanagerQueriesReportsList(
        \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesReportsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesReportsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesReportsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/queries/{queryId}/reports', \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesReportsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesReportsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesReportsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listReportsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListReportsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Runs a stored query to generate a report.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesRunRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesRunSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesRunResponse
     */
	public function doubleclickbidmanagerQueriesRun(
        \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesRunRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesRunSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesRunResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/queries/{queryId}:run', \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesRunRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "runQueryRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesRunRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DoubleclickbidmanagerQueriesRunResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->report = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Report', 'json');
            }
        }

        return $response;
    }
}