"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPortfolioAnalysisBetaRequestBody2Portfolios:
    
    portfolio_returns: list[float] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portfolioReturns') }})
    r"""portfolioReturns[t] is the return of the portfolio at the time t, all the portfolioReturns arrays must have the same length, equal to the length of the benchmarkReturns array"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPortfolioAnalysisBetaRequestBody2:
    
    benchmark_returns: list[float] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('benchmarkReturns') }})
    r"""benchmarkReturns[t] is the return of the benchmark at the time t; the benchmarkReturns array must have the same length as all the portfolioReturns arrays"""  
    portfolios: list[PostPortfolioAnalysisBetaRequestBody2Portfolios] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portfolios') }})  
    risk_free_returns: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('riskFreeReturns'), 'exclude': lambda f: f is None }})
    r"""riskFreeReturns[t] is the risk free return at the time t; the riskFreeReturns array must have the same length as all the portfolioReturns arrays"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPortfolioAnalysisBetaRequestBody1Portfolios:
    
    portfolio_returns: list[float] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portfolioReturns') }})
    r"""portfolioReturns[t] is the return of the portfolio at the time t, all the portfolioReturns arrays must have the same length, equal to the length of the benchmarkReturns array"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPortfolioAnalysisBetaRequestBody1:
    
    benchmark_returns: list[float] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('benchmarkReturns') }})
    r"""benchmarkReturns[t] is the return of the benchmark at the time t; the benchmarkReturns array must have the same length as all the portfolioReturns arrays"""  
    portfolios: list[PostPortfolioAnalysisBetaRequestBody1Portfolios] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portfolios') }})  
    risk_free_rate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('riskFreeRate'), 'exclude': lambda f: f is None }})
    r"""The risk free rate, assumed to be constant for any time t"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPortfolioAnalysisBeta200ApplicationJSONPortfolios:
    
    portfolio_beta: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portfolioBeta') }})
    r"""The portfolio beta, which correponds to the portfolio systematic risk in the Capital Asset Pricing Model (CAPM)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPortfolioAnalysisBeta200ApplicationJSON:
    r"""OK"""
    
    portfolios: list[PostPortfolioAnalysisBeta200ApplicationJSONPortfolios] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portfolios') }})  
    

@dataclasses.dataclass
class PostPortfolioAnalysisBetaResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    post_portfolio_analysis_beta_200_application_json_object: Optional[PostPortfolioAnalysisBeta200ApplicationJSON] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    