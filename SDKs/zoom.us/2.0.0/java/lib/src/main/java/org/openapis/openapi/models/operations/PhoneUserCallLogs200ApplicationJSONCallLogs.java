/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class PhoneUserCallLogs200ApplicationJSONCallLogs {
    /**
     * Indicates who accepted the call.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accepted_by")
    public PhoneUserCallLogs200ApplicationJSONCallLogsAcceptedBy acceptedBy;
    public PhoneUserCallLogs200ApplicationJSONCallLogs withAcceptedBy(PhoneUserCallLogs200ApplicationJSONCallLogsAcceptedBy acceptedBy) {
        this.acceptedBy = acceptedBy;
        return this;
    }
    
    /**
     * Unique identifier of the phone call.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("call_id")
    public String callId;
    public PhoneUserCallLogs200ApplicationJSONCallLogs withCallId(String callId) {
        this.callId = callId;
        return this;
    }
    
    /**
     * Contact name of callee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("callee_name")
    public String calleeName;
    public PhoneUserCallLogs200ApplicationJSONCallLogs withCalleeName(String calleeName) {
        this.calleeName = calleeName;
        return this;
    }
    
    /**
     * Number of callee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("callee_number")
    public String calleeNumber;
    public PhoneUserCallLogs200ApplicationJSONCallLogs withCalleeNumber(String calleeNumber) {
        this.calleeNumber = calleeNumber;
        return this;
    }
    
    /**
     * Type of callee's number. 1 - internal | 2 - external
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("callee_number_type")
    public String calleeNumberType;
    public PhoneUserCallLogs200ApplicationJSONCallLogs withCalleeNumberType(String calleeNumberType) {
        this.calleeNumberType = calleeNumberType;
        return this;
    }
    
    /**
     * Contact name of caller
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("caller_name")
    public String callerName;
    public PhoneUserCallLogs200ApplicationJSONCallLogs withCallerName(String callerName) {
        this.callerName = callerName;
        return this;
    }
    
    /**
     * Number of caller
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("caller_number")
    public String callerNumber;
    public PhoneUserCallLogs200ApplicationJSONCallLogs withCallerNumber(String callerNumber) {
        this.callerNumber = callerNumber;
        return this;
    }
    
    /**
     * Type of caller's number. 1 - internal | 2 - external
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("caller_number_type")
    public String callerNumberType;
    public PhoneUserCallLogs200ApplicationJSONCallLogs withCallerNumberType(String callerNumberType) {
        this.callerNumberType = callerNumberType;
        return this;
    }
    
    /**
     * Billing charge for the call.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("charge")
    public String charge;
    public PhoneUserCallLogs200ApplicationJSONCallLogs withCharge(String charge) {
        this.charge = charge;
        return this;
    }
    
    /**
     * Client code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("client_code")
    public String clientCode;
    public PhoneUserCallLogs200ApplicationJSONCallLogs withClientCode(String clientCode) {
        this.clientCode = clientCode;
        return this;
    }
    
    /**
     * Start time of the call
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date_time")
    public String dateTime;
    public PhoneUserCallLogs200ApplicationJSONCallLogs withDateTime(String dateTime) {
        this.dateTime = dateTime;
        return this;
    }
    
    /**
     * Direction of the call. "inbound" | "outbound"
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("direction")
    public String direction;
    public PhoneUserCallLogs200ApplicationJSONCallLogs withDirection(String direction) {
        this.direction = direction;
        return this;
    }
    
    /**
     * Duration of the call in seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration")
    public Long duration;
    public PhoneUserCallLogs200ApplicationJSONCallLogs withDuration(Long duration) {
        this.duration = duration;
        return this;
    }
    
    /**
     * Indicates where the call was forwarded from.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("forwarded_by")
    public PhoneUserCallLogs200ApplicationJSONCallLogsForwardedBy forwardedBy;
    public PhoneUserCallLogs200ApplicationJSONCallLogs withForwardedBy(PhoneUserCallLogs200ApplicationJSONCallLogsForwardedBy forwardedBy) {
        this.forwardedBy = forwardedBy;
        return this;
    }
    
    /**
     * Indicates who the call was forwarded to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("forwarded_to")
    public PhoneUserCallLogs200ApplicationJSONCallLogsForwardedTo forwardedTo;
    public PhoneUserCallLogs200ApplicationJSONCallLogs withForwardedTo(PhoneUserCallLogs200ApplicationJSONCallLogsForwardedTo forwardedTo) {
        this.forwardedTo = forwardedTo;
        return this;
    }
    
    /**
     * Whether the call has a recording or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_recording")
    public Boolean hasRecording;
    public PhoneUserCallLogs200ApplicationJSONCallLogs withHasRecording(Boolean hasRecording) {
        this.hasRecording = hasRecording;
        return this;
    }
    
    /**
     * Whether the call has voicemail or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_voicemail")
    public Boolean hasVoicemail;
    public PhoneUserCallLogs200ApplicationJSONCallLogs withHasVoicemail(Boolean hasVoicemail) {
        this.hasVoicemail = hasVoicemail;
        return this;
    }
    
    /**
     * Call Log ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public PhoneUserCallLogs200ApplicationJSONCallLogs withId(String id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("outgoing_by")
    public PhoneUserCallLogs200ApplicationJSONCallLogsOutgoingBy outgoingBy;
    public PhoneUserCallLogs200ApplicationJSONCallLogs withOutgoingBy(PhoneUserCallLogs200ApplicationJSONCallLogsOutgoingBy outgoingBy) {
        this.outgoingBy = outgoingBy;
        return this;
    }
    
    /**
     * Path of the call log.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("path")
    public String path;
    public PhoneUserCallLogs200ApplicationJSONCallLogs withPath(String path) {
        this.path = path;
        return this;
    }
    
    /**
     * Billing rate for the call.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rate")
    public String rate;
    public PhoneUserCallLogs200ApplicationJSONCallLogs withRate(String rate) {
        this.rate = rate;
        return this;
    }
    
    /**
     * Recording type. &lt;br&gt;
     * * `1` - On-demand recording.&lt;br&gt;
     * * `2` - Automatic recording.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recording_type")
    public String recordingType;
    public PhoneUserCallLogs200ApplicationJSONCallLogs withRecordingType(String recordingType) {
        this.recordingType = recordingType;
        return this;
    }
    
    /**
     * Result of the call. "call_connected" | "recorded" | "no_answer"
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("result")
    public String result;
    public PhoneUserCallLogs200ApplicationJSONCallLogs withResult(String result) {
        this.result = result;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("site")
    public PhoneUserCallLogs200ApplicationJSONCallLogsSite site;
    public PhoneUserCallLogs200ApplicationJSONCallLogs withSite(PhoneUserCallLogs200ApplicationJSONCallLogsSite site) {
        this.site = site;
        return this;
    }
    
    /**
     * User ID or user email.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_id")
    public String userId;
    public PhoneUserCallLogs200ApplicationJSONCallLogs withUserId(String userId) {
        this.userId = userId;
        return this;
    }
    
    /**
     * Waiting time for the call, in seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("waiting_time")
    public Long waitingTime;
    public PhoneUserCallLogs200ApplicationJSONCallLogs withWaitingTime(Long waitingTime) {
        this.waitingTime = waitingTime;
        return this;
    }
    
}
