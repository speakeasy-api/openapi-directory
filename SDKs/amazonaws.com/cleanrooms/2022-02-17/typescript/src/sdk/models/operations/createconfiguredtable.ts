/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The analysis method for the configured tables. The only valid value is currently `DIRECT_QUERY`.
 */
export enum CreateConfiguredTableRequestBodyAnalysisMethodEnum {
  DirectQuery = "DIRECT_QUERY",
}

/**
 * A pointer to the dataset that underlies this table. Currently, this can only be an AWS Glue table.
 */
export class CreateConfiguredTableRequestBodyTableReference extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "glue" })
  @Type(() => shared.GlueTableReference)
  glue?: shared.GlueTableReference;
}

export class CreateConfiguredTableRequestBody extends SpeakeasyBase {
  /**
   * The columns of the underlying table that can be used by collaborations or analysis rules.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allowedColumns" })
  allowedColumns: string[];

  /**
   * The analysis method for the configured tables. The only valid value is currently `DIRECT_QUERY`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "analysisMethod" })
  analysisMethod: CreateConfiguredTableRequestBodyAnalysisMethodEnum;

  /**
   * A description for the configured table.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * The name of the configured table.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * A pointer to the dataset that underlies this table. Currently, this can only be an AWS Glue table.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tableReference" })
  @Type(() => CreateConfiguredTableRequestBodyTableReference)
  tableReference: CreateConfiguredTableRequestBodyTableReference;

  /**
   * Map of tags assigned to a resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;
}

export class CreateConfiguredTableRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateConfiguredTableRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateConfiguredTableResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createConfiguredTableOutput?: shared.CreateConfiguredTableOutput;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
