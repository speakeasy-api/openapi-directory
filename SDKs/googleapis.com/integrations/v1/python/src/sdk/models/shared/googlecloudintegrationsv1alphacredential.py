"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googlecloudintegrationsv1alphaauthtoken as shared_googlecloudintegrationsv1alphaauthtoken
from ..shared import googlecloudintegrationsv1alphajwt as shared_googlecloudintegrationsv1alphajwt
from ..shared import googlecloudintegrationsv1alphaoauth2authorizationcode as shared_googlecloudintegrationsv1alphaoauth2authorizationcode
from ..shared import googlecloudintegrationsv1alphaoauth2clientcredentials as shared_googlecloudintegrationsv1alphaoauth2clientcredentials
from ..shared import googlecloudintegrationsv1alphaoauth2resourceownercredentials as shared_googlecloudintegrationsv1alphaoauth2resourceownercredentials
from ..shared import googlecloudintegrationsv1alphaoidctoken as shared_googlecloudintegrationsv1alphaoidctoken
from ..shared import googlecloudintegrationsv1alphaserviceaccountcredentials as shared_googlecloudintegrationsv1alphaserviceaccountcredentials
from ..shared import googlecloudintegrationsv1alphausernameandpassword as shared_googlecloudintegrationsv1alphausernameandpassword
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleCloudIntegrationsV1alphaCredentialCredentialTypeEnum(str, Enum):
    r"""Credential type associated with auth config."""
    CREDENTIAL_TYPE_UNSPECIFIED = 'CREDENTIAL_TYPE_UNSPECIFIED'
    USERNAME_AND_PASSWORD = 'USERNAME_AND_PASSWORD'
    API_KEY = 'API_KEY'
    OAUTH2_AUTHORIZATION_CODE = 'OAUTH2_AUTHORIZATION_CODE'
    OAUTH2_IMPLICIT = 'OAUTH2_IMPLICIT'
    OAUTH2_CLIENT_CREDENTIALS = 'OAUTH2_CLIENT_CREDENTIALS'
    OAUTH2_RESOURCE_OWNER_CREDENTIALS = 'OAUTH2_RESOURCE_OWNER_CREDENTIALS'
    JWT = 'JWT'
    AUTH_TOKEN = 'AUTH_TOKEN'
    SERVICE_ACCOUNT = 'SERVICE_ACCOUNT'
    CLIENT_CERTIFICATE_ONLY = 'CLIENT_CERTIFICATE_ONLY'
    OIDC_TOKEN = 'OIDC_TOKEN'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudIntegrationsV1alphaCredential:
    r"""Defines parameters for a single, canonical credential."""
    
    auth_token: Optional[shared_googlecloudintegrationsv1alphaauthtoken.GoogleCloudIntegrationsV1alphaAuthToken] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authToken'), 'exclude': lambda f: f is None }})
    r"""The credentials to authenticate a user agent with a server that is put in HTTP Authorization request header."""  
    credential_type: Optional[GoogleCloudIntegrationsV1alphaCredentialCredentialTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('credentialType'), 'exclude': lambda f: f is None }})
    r"""Credential type associated with auth config."""  
    jwt: Optional[shared_googlecloudintegrationsv1alphajwt.GoogleCloudIntegrationsV1alphaJwt] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jwt'), 'exclude': lambda f: f is None }})
    r"""Represents JSON web token(JWT), which is a compact, URL-safe means of representing claims to be transferred between two parties, enabling the claims to be digitally signed or integrity protected."""  
    oauth2_authorization_code: Optional[shared_googlecloudintegrationsv1alphaoauth2authorizationcode.GoogleCloudIntegrationsV1alphaOAuth2AuthorizationCode] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('oauth2AuthorizationCode'), 'exclude': lambda f: f is None }})
    r"""The OAuth Type where the client sends request with the client id and requested scopes to auth endpoint. User sees a consent screen and auth code is received at specified redirect url afterwards. The auth code is then combined with the client id and secret and sent to the token endpoint in exchange for the access and refresh token. The refresh token can be used to fetch new access tokens."""  
    oauth2_client_credentials: Optional[shared_googlecloudintegrationsv1alphaoauth2clientcredentials.GoogleCloudIntegrationsV1alphaOAuth2ClientCredentials] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('oauth2ClientCredentials'), 'exclude': lambda f: f is None }})
    r"""For client credentials grant, the client sends a POST request with grant_type as 'client_credentials' to the authorization server. The authorization server will respond with a JSON object containing the access token."""  
    oauth2_resource_owner_credentials: Optional[shared_googlecloudintegrationsv1alphaoauth2resourceownercredentials.GoogleCloudIntegrationsV1alphaOAuth2ResourceOwnerCredentials] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('oauth2ResourceOwnerCredentials'), 'exclude': lambda f: f is None }})
    r"""For resource owner credentials grant, the client will ask the user for their authorization credentials (ususally a username and password) and send a POST request to the authorization server. The authorization server will respond with a JSON object containing the access token."""  
    oidc_token: Optional[shared_googlecloudintegrationsv1alphaoidctoken.GoogleCloudIntegrationsV1alphaOidcToken] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('oidcToken'), 'exclude': lambda f: f is None }})
    r"""OIDC Token"""  
    service_account_credentials: Optional[shared_googlecloudintegrationsv1alphaserviceaccountcredentials.GoogleCloudIntegrationsV1alphaServiceAccountCredentials] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceAccountCredentials'), 'exclude': lambda f: f is None }})
    r"""Represents the service account which can be used to generate access token for authenticating the service call."""  
    username_and_password: Optional[shared_googlecloudintegrationsv1alphausernameandpassword.GoogleCloudIntegrationsV1alphaUsernameAndPassword] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('usernameAndPassword'), 'exclude': lambda f: f is None }})
    r"""Username and password pair."""  
    