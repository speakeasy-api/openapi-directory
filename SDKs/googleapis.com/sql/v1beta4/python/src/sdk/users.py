"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Users:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def sql_users_delete(self, request: operations.SQLUsersDeleteRequest, security: operations.SQLUsersDeleteSecurity) -> operations.SQLUsersDeleteResponse:
        r"""Deletes a user from a Cloud SQL instance."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SQLUsersDeleteRequest, base_url, '/sql/v1beta4/projects/{project}/instances/{instance}/users', request)
        
        query_params = utils.get_query_params(operations.SQLUsersDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SQLUsersDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def sql_users_get(self, request: operations.SQLUsersGetRequest, security: operations.SQLUsersGetSecurity) -> operations.SQLUsersGetResponse:
        r"""Retrieves a resource containing information about a user."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SQLUsersGetRequest, base_url, '/sql/v1beta4/projects/{project}/instances/{instance}/users/{name}', request)
        
        query_params = utils.get_query_params(operations.SQLUsersGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SQLUsersGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.User])
                res.user = out

        return res

    def sql_users_insert(self, request: operations.SQLUsersInsertRequest, security: operations.SQLUsersInsertSecurity) -> operations.SQLUsersInsertResponse:
        r"""Creates a new user in a Cloud SQL instance."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SQLUsersInsertRequest, base_url, '/sql/v1beta4/projects/{project}/instances/{instance}/users', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "user", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SQLUsersInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SQLUsersInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def sql_users_list(self, request: operations.SQLUsersListRequest, security: operations.SQLUsersListSecurity) -> operations.SQLUsersListResponse:
        r"""Lists users in the specified Cloud SQL instance."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SQLUsersListRequest, base_url, '/sql/v1beta4/projects/{project}/instances/{instance}/users', request)
        
        query_params = utils.get_query_params(operations.SQLUsersListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SQLUsersListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UsersListResponse])
                res.users_list_response = out

        return res

    def sql_users_update(self, request: operations.SQLUsersUpdateRequest, security: operations.SQLUsersUpdateSecurity) -> operations.SQLUsersUpdateResponse:
        r"""Updates an existing user in a Cloud SQL instance."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SQLUsersUpdateRequest, base_url, '/sql/v1beta4/projects/{project}/instances/{instance}/users', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "user", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SQLUsersUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SQLUsersUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    