"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaxReportingClassification = exports.TaxReportingClassificationTypeEnum = exports.TaxReportingClassificationMainSourceOfIncomeEnum = exports.TaxReportingClassificationBusinessTypeEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * The organization's business type.
 *
 * @remarks
 *
 * Possible values: **other**, **listedPublicCompany**, **subsidiaryOfListedPublicCompany**, **governmentalOrganization**, **internationalOrganization**, **financialInstitution**.
 */
var TaxReportingClassificationBusinessTypeEnum;
(function (TaxReportingClassificationBusinessTypeEnum) {
    TaxReportingClassificationBusinessTypeEnum["Other"] = "other";
    TaxReportingClassificationBusinessTypeEnum["ListedPublicCompany"] = "listedPublicCompany";
    TaxReportingClassificationBusinessTypeEnum["SubsidiaryOfListedPublicCompany"] = "subsidiaryOfListedPublicCompany";
    TaxReportingClassificationBusinessTypeEnum["GovernmentalOrganization"] = "governmentalOrganization";
    TaxReportingClassificationBusinessTypeEnum["InternationalOrganization"] = "internationalOrganization";
    TaxReportingClassificationBusinessTypeEnum["FinancialInstitution"] = "financialInstitution.";
})(TaxReportingClassificationBusinessTypeEnum = exports.TaxReportingClassificationBusinessTypeEnum || (exports.TaxReportingClassificationBusinessTypeEnum = {}));
/**
 * The organization's main source of income.
 *
 * @remarks
 *
 * Possible values: **businessOperation**, **realEstateSales**, **investmentInterestOrRoyalty**, **propertyRental**, **other**.
 */
var TaxReportingClassificationMainSourceOfIncomeEnum;
(function (TaxReportingClassificationMainSourceOfIncomeEnum) {
    TaxReportingClassificationMainSourceOfIncomeEnum["BusinessOperation"] = "businessOperation";
    TaxReportingClassificationMainSourceOfIncomeEnum["RealEstateSales"] = "realEstateSales";
    TaxReportingClassificationMainSourceOfIncomeEnum["InvestmentInterestOrRoyalty"] = "investmentInterestOrRoyalty";
    TaxReportingClassificationMainSourceOfIncomeEnum["PropertyRental"] = "propertyRental";
    TaxReportingClassificationMainSourceOfIncomeEnum["Other"] = "other";
})(TaxReportingClassificationMainSourceOfIncomeEnum = exports.TaxReportingClassificationMainSourceOfIncomeEnum || (exports.TaxReportingClassificationMainSourceOfIncomeEnum = {}));
/**
 * The tax reporting classification type.
 *
 * @remarks
 *
 * Possible values: **nonFinancialNonReportable**, **financialNonReportable**, **nonFinancialActive**, **nonFinancialPassive**.
 */
var TaxReportingClassificationTypeEnum;
(function (TaxReportingClassificationTypeEnum) {
    TaxReportingClassificationTypeEnum["NonFinancialNonReportable"] = "nonFinancialNonReportable";
    TaxReportingClassificationTypeEnum["FinancialNonReportable"] = "financialNonReportable";
    TaxReportingClassificationTypeEnum["NonFinancialActive"] = "nonFinancialActive";
    TaxReportingClassificationTypeEnum["NonFinancialPassive"] = "nonFinancialPassive";
})(TaxReportingClassificationTypeEnum = exports.TaxReportingClassificationTypeEnum || (exports.TaxReportingClassificationTypeEnum = {}));
var TaxReportingClassification = /** @class */ (function (_super) {
    __extends(TaxReportingClassification, _super);
    function TaxReportingClassification() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "businessType" }),
        __metadata("design:type", String)
    ], TaxReportingClassification.prototype, "businessType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "financialInstitutionNumber" }),
        __metadata("design:type", String)
    ], TaxReportingClassification.prototype, "financialInstitutionNumber", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "mainSourceOfIncome" }),
        __metadata("design:type", String)
    ], TaxReportingClassification.prototype, "mainSourceOfIncome", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], TaxReportingClassification.prototype, "type", void 0);
    return TaxReportingClassification;
}(utils_1.SpeakeasyBase));
exports.TaxReportingClassification = TaxReportingClassification;
