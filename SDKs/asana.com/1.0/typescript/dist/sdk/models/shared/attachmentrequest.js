"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttachmentRequest = exports.AttachmentRequestResourceSubtypeEnum = exports.AttachmentRequestFile = void 0;
var utils_1 = require("../../../internal/utils");
var AttachmentRequestFile = /** @class */ (function (_super) {
    __extends(AttachmentRequestFile, _super);
    function AttachmentRequestFile() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "multipart_form, content=true" }),
        __metadata("design:type", Uint8Array)
    ], AttachmentRequestFile.prototype, "content", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "multipart_form, name=file" }),
        __metadata("design:type", String)
    ], AttachmentRequestFile.prototype, "file", void 0);
    return AttachmentRequestFile;
}(utils_1.SpeakeasyBase));
exports.AttachmentRequestFile = AttachmentRequestFile;
/**
 * The type of the attachment. Must be one of the given values. If not specified, a file attachment of type `asana` will be assumed. Note that if the value of `resource_subtype` is `external`, a `parent`, `name`, and `url` must also be provided.
 *
 * @remarks
 *
 */
var AttachmentRequestResourceSubtypeEnum;
(function (AttachmentRequestResourceSubtypeEnum) {
    AttachmentRequestResourceSubtypeEnum["Asana"] = "asana";
    AttachmentRequestResourceSubtypeEnum["Dropbox"] = "dropbox";
    AttachmentRequestResourceSubtypeEnum["Gdrive"] = "gdrive";
    AttachmentRequestResourceSubtypeEnum["Onedrive"] = "onedrive";
    AttachmentRequestResourceSubtypeEnum["Box"] = "box";
    AttachmentRequestResourceSubtypeEnum["Vimeo"] = "vimeo";
    AttachmentRequestResourceSubtypeEnum["External"] = "external";
})(AttachmentRequestResourceSubtypeEnum = exports.AttachmentRequestResourceSubtypeEnum || (exports.AttachmentRequestResourceSubtypeEnum = {}));
/**
 * The file you want to upload.
 *
 * @remarks
 *
 * *Note when using curl:*
 *
 * Be sure to add an `‘@’` before the file path, and use the `--form`
 * option instead of the `-d` option.
 *
 * When uploading PDFs with curl, force the content-type to be pdf by
 * appending the content type to the file path: `--form
 * "file=@file.pdf;type=application/pdf"`.
 */
var AttachmentRequest = /** @class */ (function (_super) {
    __extends(AttachmentRequest, _super);
    function AttachmentRequest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "multipart_form, name=connect_to_app" }),
        __metadata("design:type", Boolean)
    ], AttachmentRequest.prototype, "connectToApp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "multipart_form, file=true" }),
        __metadata("design:type", AttachmentRequestFile)
    ], AttachmentRequest.prototype, "file", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "multipart_form, name=name" }),
        __metadata("design:type", String)
    ], AttachmentRequest.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "multipart_form, name=parent" }),
        __metadata("design:type", String)
    ], AttachmentRequest.prototype, "parent", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "multipart_form, name=resource_subtype" }),
        __metadata("design:type", String)
    ], AttachmentRequest.prototype, "resourceSubtype", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "multipart_form, name=url" }),
        __metadata("design:type", String)
    ], AttachmentRequest.prototype, "url", void 0);
    return AttachmentRequest;
}(utils_1.SpeakeasyBase));
exports.AttachmentRequest = AttachmentRequest;
