"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Teams:
    r"""Team information"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_fbs_teams(self, request: operations.GetFbsTeamsRequest) -> operations.GetFbsTeamsResponse:
        r"""FBS team list
        Information on major division teams
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/teams/fbs'
        
        query_params = utils.get_query_params(operations.GetFbsTeamsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFbsTeamsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Team]])
                res.teams = out
        elif http_res.status_code == 400:
            pass

        return res

    def get_roster(self, request: operations.GetRosterRequest) -> operations.GetRosterResponse:
        r"""Team rosters
        Roster data
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/roster'
        
        query_params = utils.get_query_params(operations.GetRosterRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRosterResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Player]])
                res.players = out
        elif http_res.status_code == 400:
            pass

        return res

    def get_talent(self, request: operations.GetTalentRequest) -> operations.GetTalentResponse:
        r"""Team talent composite rankings
        Team talent composite
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/talent'
        
        query_params = utils.get_query_params(operations.GetTalentRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTalentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TeamTalent]])
                res.team_talents = out
        elif http_res.status_code == 400:
            pass

        return res

    def get_team_matchup(self, request: operations.GetTeamMatchupRequest) -> operations.GetTeamMatchupResponse:
        r"""Team matchup history
        Matchup history
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/teams/matchup'
        
        query_params = utils.get_query_params(operations.GetTeamMatchupRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamMatchupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TeamMatchup])
                res.team_matchup = out
        elif http_res.status_code == 400:
            pass

        return res

    def get_teams(self, request: operations.GetTeamsRequest) -> operations.GetTeamsResponse:
        r"""Team information
        Get team information
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/teams'
        
        query_params = utils.get_query_params(operations.GetTeamsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Team]])
                res.teams = out
        elif http_res.status_code == 400:
            pass

        return res

    