// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// VerifySoftwareTokenXAmzTargetEnum
type VerifySoftwareTokenXAmzTargetEnum string

const (
	VerifySoftwareTokenXAmzTargetEnumAwsCognitoIdentityProviderServiceVerifySoftwareToken VerifySoftwareTokenXAmzTargetEnum = "AWSCognitoIdentityProviderService.VerifySoftwareToken"
)

func (e VerifySoftwareTokenXAmzTargetEnum) ToPointer() *VerifySoftwareTokenXAmzTargetEnum {
	return &e
}

func (e *VerifySoftwareTokenXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWSCognitoIdentityProviderService.VerifySoftwareToken":
		*e = VerifySoftwareTokenXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VerifySoftwareTokenXAmzTargetEnum: %v", v)
	}
}

type VerifySoftwareTokenRequest struct {
	VerifySoftwareTokenRequest shared.VerifySoftwareTokenRequest `request:"mediaType=application/json"`
	XAmzAlgorithm              *string                           `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256          *string                           `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential             *string                           `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                   *string                           `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken          *string                           `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature              *string                           `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders          *string                           `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                 VerifySoftwareTokenXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type VerifySoftwareTokenResponse struct {
	// CodeMismatchException
	CodeMismatchException interface{}
	ContentType           string
	// EnableSoftwareTokenMFAException
	EnableSoftwareTokenMFAException interface{}
	// ForbiddenException
	ForbiddenException interface{}
	// InternalErrorException
	InternalErrorException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// InvalidUserPoolConfigurationException
	InvalidUserPoolConfigurationException interface{}
	// NotAuthorizedException
	NotAuthorizedException interface{}
	// PasswordResetRequiredException
	PasswordResetRequiredException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// SoftwareTokenMFANotFoundException
	SoftwareTokenMFANotFoundException interface{}
	// TooManyRequestsException
	TooManyRequestsException interface{}
	// UserNotConfirmedException
	UserNotConfirmedException interface{}
	// UserNotFoundException
	UserNotFoundException interface{}
	// Success
	VerifySoftwareTokenResponse *shared.VerifySoftwareTokenResponse
}
