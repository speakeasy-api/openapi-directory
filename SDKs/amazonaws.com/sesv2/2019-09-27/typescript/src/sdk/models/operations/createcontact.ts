/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class CreateContactRequestBody extends SpeakeasyBase {
  /**
   * The attribute data attached to a contact.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AttributesData" })
  attributesData?: string;

  /**
   * The contact's email address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "EmailAddress" })
  emailAddress: string;

  /**
   * The contact's preferences for being opted-in to or opted-out of topics.
   */
  @SpeakeasyMetadata({ elemType: shared.TopicPreference })
  @Expose({ name: "TopicPreferences" })
  @Type(() => shared.TopicPreference)
  topicPreferences?: shared.TopicPreference[];

  /**
   * A boolean value status noting if the contact is unsubscribed from all contact list topics.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "UnsubscribeAll" })
  unsubscribeAll?: boolean;
}

export class CreateContactRequest extends SpeakeasyBase {
  /**
   * The name of the contact list to which the contact should be added.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=ContactListName",
  })
  contactListName: string;

  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateContactRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateContactResponse extends SpeakeasyBase {
  /**
   * AlreadyExistsException
   */
  @SpeakeasyMetadata()
  alreadyExistsException?: any;

  /**
   * BadRequestException
   */
  @SpeakeasyMetadata()
  badRequestException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createContactResponse?: Record<string, any>;

  /**
   * NotFoundException
   */
  @SpeakeasyMetadata()
  notFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * TooManyRequestsException
   */
  @SpeakeasyMetadata()
  tooManyRequestsException?: any;
}
