"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import floatunit as shared_floatunit
from ..shared import voluntarynutritionfact as shared_voluntarynutritionfact
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Nutrition:
    
    added_sugars: Optional[shared_floatunit.FloatUnit] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addedSugars'), 'exclude': lambda f: f is None }})
    r"""Combination of float amount and unit."""  
    added_sugars_daily_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addedSugarsDailyPercentage'), 'exclude': lambda f: f is None }})
    r"""Added sugars daily percentage."""  
    calcium: Optional[shared_floatunit.FloatUnit] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('calcium'), 'exclude': lambda f: f is None }})
    r"""Combination of float amount and unit."""  
    calcium_daily_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('calciumDailyPercentage'), 'exclude': lambda f: f is None }})
    r"""Calcium daily percentage."""  
    cholesterol: Optional[shared_floatunit.FloatUnit] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cholesterol'), 'exclude': lambda f: f is None }})
    r"""Combination of float amount and unit."""  
    cholesterol_daily_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cholesterolDailyPercentage'), 'exclude': lambda f: f is None }})
    r"""Cholesterol daily percentage."""  
    dietary_fiber: Optional[shared_floatunit.FloatUnit] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dietaryFiber'), 'exclude': lambda f: f is None }})
    r"""Combination of float amount and unit."""  
    dietary_fiber_daily_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dietaryFiberDailyPercentage'), 'exclude': lambda f: f is None }})
    r"""Dietary fiber daily percentage."""  
    energy: Optional[shared_floatunit.FloatUnit] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('energy'), 'exclude': lambda f: f is None }})
    r"""Combination of float amount and unit."""  
    energy_from_fat: Optional[shared_floatunit.FloatUnit] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('energyFromFat'), 'exclude': lambda f: f is None }})
    r"""Combination of float amount and unit."""  
    folate_daily_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('folateDailyPercentage'), 'exclude': lambda f: f is None }})
    r"""Folate daily percentage."""  
    folate_folic_acid: Optional[shared_floatunit.FloatUnit] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('folateFolicAcid'), 'exclude': lambda f: f is None }})
    r"""Combination of float amount and unit."""  
    folate_mcg_dfe: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('folateMcgDfe'), 'exclude': lambda f: f is None }})
    r"""Folate mcg DFE."""  
    iron: Optional[shared_floatunit.FloatUnit] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iron'), 'exclude': lambda f: f is None }})
    r"""Combination of float amount and unit."""  
    iron_daily_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ironDailyPercentage'), 'exclude': lambda f: f is None }})
    r"""Iron daily percentage."""  
    monounsaturated_fat: Optional[shared_floatunit.FloatUnit] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('monounsaturatedFat'), 'exclude': lambda f: f is None }})
    r"""Combination of float amount and unit."""  
    nutrition_fact_measure: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nutritionFactMeasure'), 'exclude': lambda f: f is None }})
    r"""Nutrition fact measure."""  
    polyols: Optional[shared_floatunit.FloatUnit] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('polyols'), 'exclude': lambda f: f is None }})
    r"""Combination of float amount and unit."""  
    polyunsaturated_fat: Optional[shared_floatunit.FloatUnit] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('polyunsaturatedFat'), 'exclude': lambda f: f is None }})
    r"""Combination of float amount and unit."""  
    potassium: Optional[shared_floatunit.FloatUnit] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('potassium'), 'exclude': lambda f: f is None }})
    r"""Combination of float amount and unit."""  
    potassium_daily_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('potassiumDailyPercentage'), 'exclude': lambda f: f is None }})
    r"""Potassium daily percentage."""  
    prepared_size_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preparedSizeDescription'), 'exclude': lambda f: f is None }})
    r"""Prepared size description."""  
    protein: Optional[shared_floatunit.FloatUnit] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protein'), 'exclude': lambda f: f is None }})
    r"""Combination of float amount and unit."""  
    protein_daily_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('proteinDailyPercentage'), 'exclude': lambda f: f is None }})
    r"""Protein daily percentage."""  
    saturated_fat: Optional[shared_floatunit.FloatUnit] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('saturatedFat'), 'exclude': lambda f: f is None }})
    r"""Combination of float amount and unit."""  
    saturated_fat_daily_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('saturatedFatDailyPercentage'), 'exclude': lambda f: f is None }})
    r"""Saturated fat daily percentage."""  
    serving_size_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('servingSizeDescription'), 'exclude': lambda f: f is None }})
    r"""Food Serving Size. Serving size description."""  
    serving_size_measure: Optional[shared_floatunit.FloatUnit] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('servingSizeMeasure'), 'exclude': lambda f: f is None }})
    r"""Combination of float amount and unit."""  
    servings_per_container: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('servingsPerContainer'), 'exclude': lambda f: f is None }})
    r"""Servings per container."""  
    sodium: Optional[shared_floatunit.FloatUnit] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sodium'), 'exclude': lambda f: f is None }})
    r"""Combination of float amount and unit."""  
    sodium_daily_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sodiumDailyPercentage'), 'exclude': lambda f: f is None }})
    r"""Sodium daily percentage."""  
    starch: Optional[shared_floatunit.FloatUnit] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('starch'), 'exclude': lambda f: f is None }})
    r"""Combination of float amount and unit."""  
    total_carbohydrate: Optional[shared_floatunit.FloatUnit] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalCarbohydrate'), 'exclude': lambda f: f is None }})
    r"""Combination of float amount and unit."""  
    total_carbohydrate_daily_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalCarbohydrateDailyPercentage'), 'exclude': lambda f: f is None }})
    r"""Total carbohydrate daily percentage."""  
    total_fat: Optional[shared_floatunit.FloatUnit] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalFat'), 'exclude': lambda f: f is None }})
    r"""Combination of float amount and unit."""  
    total_fat_daily_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalFatDailyPercentage'), 'exclude': lambda f: f is None }})
    r"""Total fat daily percentage."""  
    total_sugars: Optional[shared_floatunit.FloatUnit] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalSugars'), 'exclude': lambda f: f is None }})
    r"""Combination of float amount and unit."""  
    total_sugars_daily_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalSugarsDailyPercentage'), 'exclude': lambda f: f is None }})
    r"""Total sugars daily percentage."""  
    trans_fat: Optional[shared_floatunit.FloatUnit] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transFat'), 'exclude': lambda f: f is None }})
    r"""Combination of float amount and unit."""  
    trans_fat_daily_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transFatDailyPercentage'), 'exclude': lambda f: f is None }})
    r"""Trans fat daily percentage."""  
    vitamin_d: Optional[shared_floatunit.FloatUnit] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vitaminD'), 'exclude': lambda f: f is None }})
    r"""Combination of float amount and unit."""  
    vitamin_d_daily_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vitaminDDailyPercentage'), 'exclude': lambda f: f is None }})
    r"""Vitamin D daily percentage."""  
    voluntary_nutrition_fact: Optional[list[shared_voluntarynutritionfact.VoluntaryNutritionFact]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voluntaryNutritionFact'), 'exclude': lambda f: f is None }})
    r"""Voluntary nutrition fact."""  
    