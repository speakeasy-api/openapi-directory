/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Tags are custom labels that can be associated with transactions
 *
 * @remarks
 * on Up. Within the Up application, tags provide additional insight
 * into spending. For example, you could have a "Take Away" tag that
 * you apply to purchases from food delivery services. The Up API
 * allows you to manage the tags associated with transactions. Each
 * transaction may have up to 6 tags.
 *
 * Tags are identified by their labels, which are unique strings,
 * so the tag "Holiday" has also the `id` `"Holiday"`.
 *
 */
export class Tags {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Remove tags from transaction
   *
   * @remarks
   * Disassociates one or more tags from a specific transaction. Tags that are
   * not associated are silently ignored. An HTTP `204` is returned on
   * success. The associated tags, along with this request URL, are also
   * exposed via the `tags` relationship on the transaction resource returned
   * from `/transactions/{id}`.
   *
   */
  deleteTransactionsTransactionIdRelationshipsTags(
    req: operations.DeleteTransactionsTransactionIdRelationshipsTagsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteTransactionsTransactionIdRelationshipsTagsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DeleteTransactionsTransactionIdRelationshipsTagsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/transactions/{transactionId}/relationships/tags",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "updateTransactionTagsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteTransactionsTransactionIdRelationshipsTagsResponse =
        new operations.DeleteTransactionsTransactionIdRelationshipsTagsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * List tags
   *
   * @remarks
   * Retrieve a list of all tags currently in use. The returned list is
   * [paginated](#pagination) and can be scrolled by following the `next`
   * and `prev` links where present. Results are ordered lexicographically.
   * The `transactions` relationship for each tag exposes a link
   * to get the transactions with the given tag.
   *
   */
  getTags(
    req: operations.GetTagsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTagsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTagsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/tags";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTagsResponse = new operations.GetTagsResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listTagsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListTagsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Add tags to transaction
   *
   * @remarks
   * Associates one or more tags with a specific transaction. No more than 6
   * tags may be present on any single transaction. Duplicate tags are
   * silently ignored. An HTTP `204` is returned on success. The associated
   * tags, along with this request URL, are also exposed via the `tags`
   * relationship on the transaction resource returned from
   * `/transactions/{id}`.
   *
   */
  postTransactionsTransactionIdRelationshipsTags(
    req: operations.PostTransactionsTransactionIdRelationshipsTagsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostTransactionsTransactionIdRelationshipsTagsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PostTransactionsTransactionIdRelationshipsTagsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/transactions/{transactionId}/relationships/tags",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "updateTransactionTagsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostTransactionsTransactionIdRelationshipsTagsResponse =
        new operations.PostTransactionsTransactionIdRelationshipsTagsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }
}
