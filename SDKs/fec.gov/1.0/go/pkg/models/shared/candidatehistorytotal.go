// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"openapi/pkg/types"
	"time"
)

type CandidateHistoryTotal struct {
	// Last year a candidate was active. This field is specific to the candidate_id so if the same person runs for another office, there may be a different record for them.
	ActiveThrough *int `json:"active_through,omitempty"`
	// City of candidate's address, as reported on their Form 2.
	AddressCity *string `json:"address_city,omitempty"`
	// State of candidate's address, as reported on their Form 2.
	AddressState *string `json:"address_state,omitempty"`
	// Street of candidate's address, as reported on their Form 2.
	AddressStreet1 *string `json:"address_street_1,omitempty"`
	// Additional street information of candidate's address, as reported on their Form 2.
	AddressStreet2 *string `json:"address_street_2,omitempty"`
	// Zip code of candidate's address, as reported on their Form 2.
	AddressZip *string `json:"address_zip,omitempty"`
	// The last year of the cycle for this election.
	CandidateElectionYear *int `json:"candidate_election_year,omitempty"`
	// A unique identifier assigned to each candidate registered with the FEC.
	// If a person runs for several offices, that person will have separate candidate IDs for each office.
	//
	CandidateID string `json:"candidate_id"`
	// True indicates that a candidate is inactive.
	//
	CandidateInactive *bool `json:"candidate_inactive,omitempty"`
	// One-letter code explaining if the candidate is:
	//         - C present candidate
	//         - F future candidate
	//         - N not yet a candidate
	//         - P prior candidate
	//
	CandidateStatus *string `json:"candidate_status,omitempty"`
	// Ending cash balance on the most recent filing
	CashOnHandEndPeriod *float64 `json:"cash_on_hand_end_period,omitempty"`
	// Ending date of the reporting period
	CoverageEndDate *types.Date `json:"coverage_end_date,omitempty"`
	// Beginning date of the reporting period
	CoverageStartDate *types.Date `json:"coverage_start_date,omitempty"`
	// Filter records to only those that are applicable to a given two-year
	// period. This cycle follows the traditional House election cycle and
	// subdivides the presidential and Senate elections into comparable
	// two-year blocks. The cycle begins with an odd year and is named for its
	// ending, even year.
	//
	Cycle int `json:"cycle"`
	// Two-year election cycle in which a candidate runs for office.
	// Calculated from Form 2. The cycle begins with
	// an odd year and is named for its ending, even year. This cycle follows
	// the traditional house election cycle and subdivides the presidential
	// and Senate elections into comparable two-year blocks. To retrieve data for
	// the entire four years of a presidential term or six years of a senatorial term,
	// you will need the `election_full` flag.
	//
	Cycles []int `json:"cycles,omitempty"`
	// Debts owed by the committee
	DebtsOwedByCommittee *float64 `json:"debts_owed_by_committee,omitempty"`
	Disbursements        *float64 `json:"disbursements,omitempty"`
	// Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
	District *string `json:"district,omitempty"`
	// One-letter code explaining if the candidate is:
	//         - C present candidate
	//         - F future candidate
	//         - N not yet a candidate
	//         - P prior candidate
	//
	DistrictNumber *int `json:"district_number,omitempty"`
	// Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
	ElectionDistricts []string `json:"election_districts,omitempty"`
	// Year of election
	ElectionYear *int `json:"election_year,omitempty"`
	// Years in which a candidate ran for office.
	ElectionYears []int `json:"election_years,omitempty"`
	// FEC cycles are included in candidate election years.
	FecCyclesInElection []int `json:"fec_cycles_in_election,omitempty"`
	// A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
	FederalFundsFlag *bool `json:"federal_funds_flag,omitempty"`
	// The day the FEC received the candidate's first filing. This is a F2 candidate registration.
	FirstFileDate *types.Date `json:"first_file_date,omitempty"`
	Flags         *string     `json:"flags,omitempty"`
	// A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
	HasRaisedFunds *bool `json:"has_raised_funds,omitempty"`
	// One-letter code ('I', 'C', 'O') explaining if the candidate is an incumbent, a challenger, or if the seat is open.
	IncumbentChallenge *string `json:"incumbent_challenge,omitempty"`
	// Explains if the candidate is an incumbent, a challenger, or if the seat is open.
	IncumbentChallengeFull *string `json:"incumbent_challenge_full,omitempty"`
	// Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less.
	IndividualItemizedContributions *float64 `json:"individual_itemized_contributions,omitempty"`
	IsElection                      bool     `json:"is_election"`
	// The day the FEC received the candidate's most recent Form 2
	LastF2Date *types.Date `json:"last_f2_date,omitempty"`
	// The day the FEC received the candidate's most recent filing
	LastFileDate *types.Date `json:"last_file_date,omitempty"`
	// Date the information was loaded into the FEC systems. This can be affected by reseting systems and other factors, refer to receipt_date for the day that the FEC received the paper or electronic document. Keep in mind that paper filings take more time to process and there can be a lag between load_date and receipt_date. This field can be helpful to identify paper records that have been processed recently.
	LoadDate *time.Time `json:"load_date,omitempty"`
	// Name of candidate running for office
	Name *string `json:"name,omitempty"`
	// Federal office candidate runs for: H, S or P
	Office *string `json:"office,omitempty"`
	// Federal office candidate runs for: House, Senate or presidential
	OfficeFull *string `json:"office_full,omitempty"`
	// Other committees contributions
	OtherPoliticalCommitteeContributions *float64 `json:"other_political_committee_contributions,omitempty"`
	// Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
	Party *string `json:"party,omitempty"`
	// Party affiliated with a candidate or committee
	PartyFull *string  `json:"party_full,omitempty"`
	Receipts  *float64 `json:"receipts,omitempty"`
	// Rounded election years in which a candidate ran for office
	RoundedElectionYears []int `json:"rounded_election_years,omitempty"`
	// US state or territory where a candidate runs for office
	State *string `json:"state,omitempty"`
	// Transfers from authorized committees
	TransfersFromOtherAuthorizedCommittee *float64 `json:"transfers_from_other_authorized_committee,omitempty"`
	// Two-year election cycle in which a candidate runs for office.
	// Calculated from Form 2. The cycle begins with
	// an odd year and is named for its ending, even year. This cycle follows
	// the traditional house election cycle and subdivides the presidential
	// and Senate elections into comparable two-year blocks. To retrieve data for
	// the entire four years of a presidential term or six years of a senatorial term,
	// you will need the `election_full` flag.
	//
	TwoYearPeriod int `json:"two_year_period"`
}
