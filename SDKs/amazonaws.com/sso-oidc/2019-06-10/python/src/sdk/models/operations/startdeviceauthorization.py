"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import startdeviceauthorizationresponse as shared_startdeviceauthorizationresponse
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StartDeviceAuthorizationRequestBody:
    
    client_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientId') }})
    r"""The unique identifier string for the client that is registered with IAM Identity Center. This value should come from the persisted result of the <a>RegisterClient</a> API operation."""  
    client_secret: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientSecret') }})
    r"""A secret string that is generated for the client. This value should come from the persisted result of the <a>RegisterClient</a> API operation."""  
    start_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startUrl') }})
    r"""The URL for the AWS access portal. For more information, see <a href=\\"https://docs.aws.amazon.com/singlesignon/latest/userguide/using-the-portal.html\\">Using the AWS access portal</a> in the <i>IAM Identity Center User Guide</i>."""  
    

@dataclasses.dataclass
class StartDeviceAuthorizationRequest:
    
    request_body: StartDeviceAuthorizationRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class StartDeviceAuthorizationResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    invalid_client_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidClientException"""  
    invalid_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRequestException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    slow_down_exception: Optional[Any] = dataclasses.field(default=None)
    r"""SlowDownException"""  
    start_device_authorization_response: Optional[shared_startdeviceauthorizationresponse.StartDeviceAuthorizationResponse] = dataclasses.field(default=None)
    r"""Success"""  
    unauthorized_client_exception: Optional[Any] = dataclasses.field(default=None)
    r"""UnauthorizedClientException"""  
    