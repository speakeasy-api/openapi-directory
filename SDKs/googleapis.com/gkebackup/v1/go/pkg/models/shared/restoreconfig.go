// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RestoreConfigClusterResourceConflictPolicyEnum - Defines the behavior for handling the situation where cluster-scoped resources being restored already exist in the target cluster. This MUST be set to a value other than CLUSTER_RESOURCE_CONFLICT_POLICY_UNSPECIFIED if cluster_resource_restore_scope is not empty.
type RestoreConfigClusterResourceConflictPolicyEnum string

const (
	RestoreConfigClusterResourceConflictPolicyEnumClusterResourceConflictPolicyUnspecified RestoreConfigClusterResourceConflictPolicyEnum = "CLUSTER_RESOURCE_CONFLICT_POLICY_UNSPECIFIED"
	RestoreConfigClusterResourceConflictPolicyEnumUseExistingVersion                       RestoreConfigClusterResourceConflictPolicyEnum = "USE_EXISTING_VERSION"
	RestoreConfigClusterResourceConflictPolicyEnumUseBackupVersion                         RestoreConfigClusterResourceConflictPolicyEnum = "USE_BACKUP_VERSION"
)

func (e *RestoreConfigClusterResourceConflictPolicyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CLUSTER_RESOURCE_CONFLICT_POLICY_UNSPECIFIED":
		fallthrough
	case "USE_EXISTING_VERSION":
		fallthrough
	case "USE_BACKUP_VERSION":
		*e = RestoreConfigClusterResourceConflictPolicyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RestoreConfigClusterResourceConflictPolicyEnum: %s", s)
	}
}

// RestoreConfigNamespacedResourceRestoreModeEnum - Defines the behavior for handling the situation where sets of namespaced resources being restored already exist in the target cluster. This MUST be set to a value other than NAMESPACED_RESOURCE_RESTORE_MODE_UNSPECIFIED.
type RestoreConfigNamespacedResourceRestoreModeEnum string

const (
	RestoreConfigNamespacedResourceRestoreModeEnumNamespacedResourceRestoreModeUnspecified RestoreConfigNamespacedResourceRestoreModeEnum = "NAMESPACED_RESOURCE_RESTORE_MODE_UNSPECIFIED"
	RestoreConfigNamespacedResourceRestoreModeEnumDeleteAndRestore                         RestoreConfigNamespacedResourceRestoreModeEnum = "DELETE_AND_RESTORE"
	RestoreConfigNamespacedResourceRestoreModeEnumFailOnConflict                           RestoreConfigNamespacedResourceRestoreModeEnum = "FAIL_ON_CONFLICT"
)

func (e *RestoreConfigNamespacedResourceRestoreModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NAMESPACED_RESOURCE_RESTORE_MODE_UNSPECIFIED":
		fallthrough
	case "DELETE_AND_RESTORE":
		fallthrough
	case "FAIL_ON_CONFLICT":
		*e = RestoreConfigNamespacedResourceRestoreModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RestoreConfigNamespacedResourceRestoreModeEnum: %s", s)
	}
}

// RestoreConfigVolumeDataRestorePolicyEnum - Specifies the mechanism to be used to restore volume data. Default: VOLUME_DATA_RESTORE_POLICY_UNSPECIFIED (will be treated as NO_VOLUME_DATA_RESTORATION).
type RestoreConfigVolumeDataRestorePolicyEnum string

const (
	RestoreConfigVolumeDataRestorePolicyEnumVolumeDataRestorePolicyUnspecified RestoreConfigVolumeDataRestorePolicyEnum = "VOLUME_DATA_RESTORE_POLICY_UNSPECIFIED"
	RestoreConfigVolumeDataRestorePolicyEnumRestoreVolumeDataFromBackup        RestoreConfigVolumeDataRestorePolicyEnum = "RESTORE_VOLUME_DATA_FROM_BACKUP"
	RestoreConfigVolumeDataRestorePolicyEnumReuseVolumeHandleFromBackup        RestoreConfigVolumeDataRestorePolicyEnum = "REUSE_VOLUME_HANDLE_FROM_BACKUP"
	RestoreConfigVolumeDataRestorePolicyEnumNoVolumeDataRestoration            RestoreConfigVolumeDataRestorePolicyEnum = "NO_VOLUME_DATA_RESTORATION"
)

func (e *RestoreConfigVolumeDataRestorePolicyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "VOLUME_DATA_RESTORE_POLICY_UNSPECIFIED":
		fallthrough
	case "RESTORE_VOLUME_DATA_FROM_BACKUP":
		fallthrough
	case "REUSE_VOLUME_HANDLE_FROM_BACKUP":
		fallthrough
	case "NO_VOLUME_DATA_RESTORATION":
		*e = RestoreConfigVolumeDataRestorePolicyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RestoreConfigVolumeDataRestorePolicyEnum: %s", s)
	}
}

// RestoreConfig - Configuration of a restore. Next id: 9
type RestoreConfig struct {
	// Restore all namespaced resources in the Backup if set to "True". Specifying this field to "False" is an error.
	AllNamespaces *bool `json:"allNamespaces,omitempty"`
	// Defines the behavior for handling the situation where cluster-scoped resources being restored already exist in the target cluster. This MUST be set to a value other than CLUSTER_RESOURCE_CONFLICT_POLICY_UNSPECIFIED if cluster_resource_restore_scope is not empty.
	ClusterResourceConflictPolicy *RestoreConfigClusterResourceConflictPolicyEnum `json:"clusterResourceConflictPolicy,omitempty"`
	// Identifies the cluster-scoped resources to restore from the Backup.
	ClusterResourceRestoreScope *ClusterResourceRestoreScope `json:"clusterResourceRestoreScope,omitempty"`
	// Defines the behavior for handling the situation where sets of namespaced resources being restored already exist in the target cluster. This MUST be set to a value other than NAMESPACED_RESOURCE_RESTORE_MODE_UNSPECIFIED.
	NamespacedResourceRestoreMode *RestoreConfigNamespacedResourceRestoreModeEnum `json:"namespacedResourceRestoreMode,omitempty"`
	// A list of namespaced Kubernetes resources.
	SelectedApplications *NamespacedNames `json:"selectedApplications,omitempty"`
	// A list of Kubernetes Namespaces
	SelectedNamespaces *Namespaces `json:"selectedNamespaces,omitempty"`
	// A list of transformation rules to be applied against Kubernetes resources as they are selected for restoration from a Backup. Rules are executed in order defined - this order matters, as changes made by a rule may impact the filtering logic of subsequent rules. An empty list means no substitution will occur.
	SubstitutionRules []SubstitutionRule `json:"substitutionRules,omitempty"`
	// Specifies the mechanism to be used to restore volume data. Default: VOLUME_DATA_RESTORE_POLICY_UNSPECIFIED (will be treated as NO_VOLUME_DATA_RESTORATION).
	VolumeDataRestorePolicy *RestoreConfigVolumeDataRestorePolicyEnum `json:"volumeDataRestorePolicy,omitempty"`
}
