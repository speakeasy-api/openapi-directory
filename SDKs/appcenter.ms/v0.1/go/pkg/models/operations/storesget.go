// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type StoresGetSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type StoresGetRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// The name of the store
	StoreName string `pathParam:"style=simple,explode=false,name=store_name"`
}

type StoresGetDefaultApplicationJSONCodeEnum string

const (
	StoresGetDefaultApplicationJSONCodeEnumBadRequest          StoresGetDefaultApplicationJSONCodeEnum = "BadRequest"
	StoresGetDefaultApplicationJSONCodeEnumConflict            StoresGetDefaultApplicationJSONCodeEnum = "Conflict"
	StoresGetDefaultApplicationJSONCodeEnumNotAcceptable       StoresGetDefaultApplicationJSONCodeEnum = "NotAcceptable"
	StoresGetDefaultApplicationJSONCodeEnumNotFound            StoresGetDefaultApplicationJSONCodeEnum = "NotFound"
	StoresGetDefaultApplicationJSONCodeEnumInternalServerError StoresGetDefaultApplicationJSONCodeEnum = "InternalServerError"
	StoresGetDefaultApplicationJSONCodeEnumUnauthorized        StoresGetDefaultApplicationJSONCodeEnum = "Unauthorized"
	StoresGetDefaultApplicationJSONCodeEnumTooManyRequests     StoresGetDefaultApplicationJSONCodeEnum = "TooManyRequests"
)

func (e StoresGetDefaultApplicationJSONCodeEnum) ToPointer() *StoresGetDefaultApplicationJSONCodeEnum {
	return &e
}

func (e *StoresGetDefaultApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = StoresGetDefaultApplicationJSONCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StoresGetDefaultApplicationJSONCodeEnum: %v", v)
	}
}

// StoresGetDefaultApplicationJSON - Error
type StoresGetDefaultApplicationJSON struct {
	Code    StoresGetDefaultApplicationJSONCodeEnum `json:"code"`
	Message string                                  `json:"message"`
}

type StoresGet200ApplicationJSONIntuneDetailsAppCategory struct {
	// ID for the category.
	ID *string `json:"id,omitempty"`
	// display name for the app category
	Name *string `json:"name,omitempty"`
}

type StoresGet200ApplicationJSONIntuneDetailsTargetAudience struct {
	// ID for the target audience/group.
	ID *string `json:"id,omitempty"`
	// display name for the target audience/group
	Name *string `json:"name,omitempty"`
}

// StoresGet200ApplicationJSONIntuneDetails - Store details for intune
type StoresGet200ApplicationJSONIntuneDetails struct {
	AppCategory    *StoresGet200ApplicationJSONIntuneDetailsAppCategory    `json:"app_category,omitempty"`
	TargetAudience *StoresGet200ApplicationJSONIntuneDetailsTargetAudience `json:"target_audience,omitempty"`
}

// StoresGet200ApplicationJSONTrackEnum - Store track
type StoresGet200ApplicationJSONTrackEnum string

const (
	StoresGet200ApplicationJSONTrackEnumProduction         StoresGet200ApplicationJSONTrackEnum = "production"
	StoresGet200ApplicationJSONTrackEnumAlpha              StoresGet200ApplicationJSONTrackEnum = "alpha"
	StoresGet200ApplicationJSONTrackEnumBeta               StoresGet200ApplicationJSONTrackEnum = "beta"
	StoresGet200ApplicationJSONTrackEnumTestflightInternal StoresGet200ApplicationJSONTrackEnum = "testflight-internal"
	StoresGet200ApplicationJSONTrackEnumTestflightExternal StoresGet200ApplicationJSONTrackEnum = "testflight-external"
)

func (e StoresGet200ApplicationJSONTrackEnum) ToPointer() *StoresGet200ApplicationJSONTrackEnum {
	return &e
}

func (e *StoresGet200ApplicationJSONTrackEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "alpha":
		fallthrough
	case "beta":
		fallthrough
	case "testflight-internal":
		fallthrough
	case "testflight-external":
		*e = StoresGet200ApplicationJSONTrackEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StoresGet200ApplicationJSONTrackEnum: %v", v)
	}
}

// StoresGet200ApplicationJSON - ExternalStoreResponse
type StoresGet200ApplicationJSON struct {
	// The ID of the principal that created the store.
	CreatedBy *string `json:"created_by,omitempty"`
	// The type of the principal that created the store.
	CreatedByPrincipalType *string `json:"created_by_principal_type,omitempty"`
	// Store id
	ID *string `json:"id,omitempty"`
	// Store details for intune
	IntuneDetails *StoresGet200ApplicationJSONIntuneDetails `json:"intune_details,omitempty"`
	// Store Name
	Name *string `json:"name,omitempty"`
	// Id for the shared service connection. In case of Apple / GooglePlay stores, this connection will be used to connect to the Apple / Google stores in App Center.
	ServiceConnectionID *string `json:"service_connection_id,omitempty"`
	// Store track
	Track *StoresGet200ApplicationJSONTrackEnum `json:"track,omitempty"`
	// Store Type
	Type *string `json:"type,omitempty"`
}

type StoresGetResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	StoresGet200ApplicationJSONObject *StoresGet200ApplicationJSON
	// Error
	StoresGetDefaultApplicationJSONObject *StoresGetDefaultApplicationJSON
}
