/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Application - The Application resource.
 */
public class Application {
    /**
     * The number of achievements visible to the currently authenticated player.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("achievement_count")
    public Integer achievementCount;

    public Application withAchievementCount(Integer achievementCount) {
        this.achievementCount = achievementCount;
        return this;
    }
    
    /**
     * The assets of the application.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assets")
    public ImageAsset[] assets;

    public Application withAssets(ImageAsset[] assets) {
        this.assets = assets;
        return this;
    }
    
    /**
     * The author of the application.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("author")
    public String author;

    public Application withAuthor(String author) {
        this.author = author;
        return this;
    }
    
    /**
     * An application category object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("category")
    public ApplicationCategory category;

    public Application withCategory(ApplicationCategory category) {
        this.category = category;
        return this;
    }
    
    /**
     * The description of the application.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public Application withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * A list of features that have been enabled for the application.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enabledFeatures")
    public ApplicationEnabledFeaturesEnum[] enabledFeatures;

    public Application withEnabledFeatures(ApplicationEnabledFeaturesEnum[] enabledFeatures) {
        this.enabledFeatures = enabledFeatures;
        return this;
    }
    
    /**
     * The ID of the application.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public Application withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The instances of the application.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instances")
    public Instance[] instances;

    public Application withInstances(Instance[] instances) {
        this.instances = instances;
        return this;
    }
    
    /**
     * Uniquely identifies the type of this resource. Value is always the fixed string `games#application`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;

    public Application withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * The last updated timestamp of the application.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastUpdatedTimestamp")
    public String lastUpdatedTimestamp;

    public Application withLastUpdatedTimestamp(String lastUpdatedTimestamp) {
        this.lastUpdatedTimestamp = lastUpdatedTimestamp;
        return this;
    }
    
    /**
     * The number of leaderboards visible to the currently authenticated player.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("leaderboard_count")
    public Integer leaderboardCount;

    public Application withLeaderboardCount(Integer leaderboardCount) {
        this.leaderboardCount = leaderboardCount;
        return this;
    }
    
    /**
     * The name of the application.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Application withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * A hint to the client UI for what color to use as an app-themed color. The color is given as an RGB triplet (e.g. "E0E0E0").
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("themeColor")
    public String themeColor;

    public Application withThemeColor(String themeColor) {
        this.themeColor = themeColor;
        return this;
    }
    
    public Application(){}
}
