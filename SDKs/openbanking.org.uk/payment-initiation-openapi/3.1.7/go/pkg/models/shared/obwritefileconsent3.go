// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// OBWriteFileConsent3DataAuthorisationAuthorisationTypeEnum - Type of authorisation flow requested.
type OBWriteFileConsent3DataAuthorisationAuthorisationTypeEnum string

const (
	OBWriteFileConsent3DataAuthorisationAuthorisationTypeEnumAny    OBWriteFileConsent3DataAuthorisationAuthorisationTypeEnum = "Any"
	OBWriteFileConsent3DataAuthorisationAuthorisationTypeEnumSingle OBWriteFileConsent3DataAuthorisationAuthorisationTypeEnum = "Single"
)

func (e *OBWriteFileConsent3DataAuthorisationAuthorisationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Any":
		fallthrough
	case "Single":
		*e = OBWriteFileConsent3DataAuthorisationAuthorisationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OBWriteFileConsent3DataAuthorisationAuthorisationTypeEnum: %s", s)
	}
}

// OBWriteFileConsent3DataAuthorisation - The authorisation type request from the TPP.
type OBWriteFileConsent3DataAuthorisation struct {
	// Type of authorisation flow requested.
	AuthorisationType OBWriteFileConsent3DataAuthorisationAuthorisationTypeEnum `json:"AuthorisationType"`
	// Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	CompletionDateTime *time.Time `json:"CompletionDateTime,omitempty"`
}

// OBWriteFileConsent3DataInitiationDebtorAccount - Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
type OBWriteFileConsent3DataInitiationDebtorAccount struct {
	// Identification assigned by an institution to identify an account. This identification is known by the account owner.
	Identification string `json:"Identification"`
	// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
	// Note, the account name is not the product name or the nickname of the account.
	Name *string `json:"Name,omitempty"`
	// Name of the identification scheme, in a coded form as published in an external list.
	SchemeName string `json:"SchemeName"`
	// This is secondary identification of the account, as assigned by the account servicing institution.
	// This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
	SecondaryIdentification *string `json:"SecondaryIdentification,omitempty"`
}

// OBWriteFileConsent3DataInitiationRemittanceInformation - Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.
type OBWriteFileConsent3DataInitiationRemittanceInformation struct {
	// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
	// Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
	// If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
	// OB: The Faster Payments Scheme can only accept 18 characters for the ReferenceInformation field - which is where this ISO field will be mapped.
	Reference *string `json:"Reference,omitempty"`
	// Information supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.
	Unstructured *string `json:"Unstructured,omitempty"`
}

// OBWriteFileConsent3DataInitiation - The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds using a payment file.
type OBWriteFileConsent3DataInitiation struct {
	// Total of all individual amounts included in the group, irrespective of currencies.
	ControlSum *float64 `json:"ControlSum,omitempty"`
	// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
	DebtorAccount *OBWriteFileConsent3DataInitiationDebtorAccount `json:"DebtorAccount,omitempty"`
	// A base64 encoding of a SHA256 hash of the file to be uploaded.
	FileHash string `json:"FileHash"`
	// Reference for the file.
	FileReference *string `json:"FileReference,omitempty"`
	// Specifies the payment file type.
	FileType string `json:"FileType"`
	// User community specific instrument.
	// Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
	LocalInstrument *string `json:"LocalInstrument,omitempty"`
	// Number of individual transactions contained in the payment information group.
	NumberOfTransactions *string `json:"NumberOfTransactions,omitempty"`
	// Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.
	RemittanceInformation *OBWriteFileConsent3DataInitiationRemittanceInformation `json:"RemittanceInformation,omitempty"`
	// Date at which the initiating party requests the clearing agent to process the payment.
	// Usage: This is the date on which the debtor's account is to be debited.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	RequestedExecutionDateTime *time.Time `json:"RequestedExecutionDateTime,omitempty"`
	// Additional information that can not be captured in the structured fields and/or any other specific block.
	SupplementaryData map[string]interface{} `json:"SupplementaryData,omitempty"`
}

type OBWriteFileConsent3Data struct {
	// The authorisation type request from the TPP.
	Authorisation *OBWriteFileConsent3DataAuthorisation `json:"Authorisation,omitempty"`
	// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds using a payment file.
	Initiation OBWriteFileConsent3DataInitiation `json:"Initiation"`
	// Supporting Data provided by TPP, when requesting SCA Exemption.
	SCASupportData *OBSCASupportData1 `json:"SCASupportData,omitempty"`
}

type OBWriteFileConsent3 struct {
	Data OBWriteFileConsent3Data `json:"Data"`
}
