// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type UpdatePotSecurity struct {
	APISecretKey string `security:"scheme,type=apiKey,subtype=header,name=x-api-key"`
}

type UpdatePotUpdateRequestBodyForPotStatusEnum string

const (
	UpdatePotUpdateRequestBodyForPotStatusEnumActive   UpdatePotUpdateRequestBodyForPotStatusEnum = "active"
	UpdatePotUpdateRequestBodyForPotStatusEnumInactive UpdatePotUpdateRequestBodyForPotStatusEnum = "inactive"
)

func (e UpdatePotUpdateRequestBodyForPotStatusEnum) ToPointer() *UpdatePotUpdateRequestBodyForPotStatusEnum {
	return &e
}

func (e *UpdatePotUpdateRequestBodyForPotStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "inactive":
		*e = UpdatePotUpdateRequestBodyForPotStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePotUpdateRequestBodyForPotStatusEnum: %v", v)
	}
}

// UpdatePotUpdateRequestBodyForPot - JSON for the Update pot resource type
type UpdatePotUpdateRequestBodyForPot struct {
	CustodianAccountReference *string                                     `json:"custodian_account_reference,omitempty"`
	CustodianClientRef        *string                                     `json:"custodian_client_ref,omitempty"`
	CustodianID               *string                                     `json:"custodian_id,omitempty"`
	PortfolioTemplateID       *string                                     `json:"portfolio_template_id,omitempty"`
	PotName                   *string                                     `json:"pot_name,omitempty"`
	ReferenceVersion          int64                                       `json:"reference_version"`
	RegulatorAdvisorID        *string                                     `json:"regulator_advisor_id,omitempty"`
	Status                    *UpdatePotUpdateRequestBodyForPotStatusEnum `json:"status,omitempty"`
}

type UpdatePotRequest struct {
	RequestBody UpdatePotUpdateRequestBodyForPot `request:"mediaType=application/json"`
	// Pot Id
	PotID string `pathParam:"style=simple,explode=false,name=pot_id"`
	// ApiSecretKey
	XAPIKey string `header:"style=simple,explode=false,name=x-api-key"`
}

// UpdatePot500ApplicationJSON - System error. Retry later. If the error persist, contact WOS support
type UpdatePot500ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// UpdatePot429ApplicationJSON - You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
type UpdatePot429ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// UpdatePot409ApplicationJSONStatusEnum - Current status of the original request
type UpdatePot409ApplicationJSONStatusEnum string

const (
	UpdatePot409ApplicationJSONStatusEnumProcessing UpdatePot409ApplicationJSONStatusEnum = "PROCESSING"
	UpdatePot409ApplicationJSONStatusEnumComplete   UpdatePot409ApplicationJSONStatusEnum = "COMPLETE"
)

func (e UpdatePot409ApplicationJSONStatusEnum) ToPointer() *UpdatePot409ApplicationJSONStatusEnum {
	return &e
}

func (e *UpdatePot409ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PROCESSING":
		fallthrough
	case "COMPLETE":
		*e = UpdatePot409ApplicationJSONStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePot409ApplicationJSONStatusEnum: %v", v)
	}
}

// UpdatePot409ApplicationJSON - Duplicate request
type UpdatePot409ApplicationJSON struct {
	// Human readable description of the error
	Message string `json:"message"`
	// Stringified original response body if status is `COMPLETE`
	Response map[string]interface{} `json:"response,omitempty"`
	// Current status of the original request
	Status UpdatePot409ApplicationJSONStatusEnum `json:"status"`
}

// UpdatePot404ApplicationJSON - The specified resource was not found
type UpdatePot404ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// UpdatePot403ApplicationJSON - Your authentication information is missing or invalid. Please check the keys are properly set and its correct
type UpdatePot403ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// UpdatePot401ApplicationJSON - You do not have permissions to access this resource.
type UpdatePot401ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// UpdatePot400ApplicationJSON - Request is not complete and may have one or more validations errors. Please check the error message and the code
type UpdatePot400ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// UpdatePot200ApplicationJSONPotCurrencyEnum - If not populated, will be defaulted to tenancy currency
type UpdatePot200ApplicationJSONPotCurrencyEnum string

const (
	UpdatePot200ApplicationJSONPotCurrencyEnumGbp UpdatePot200ApplicationJSONPotCurrencyEnum = "GBP"
	UpdatePot200ApplicationJSONPotCurrencyEnumCad UpdatePot200ApplicationJSONPotCurrencyEnum = "CAD"
	UpdatePot200ApplicationJSONPotCurrencyEnumUsd UpdatePot200ApplicationJSONPotCurrencyEnum = "USD"
)

func (e UpdatePot200ApplicationJSONPotCurrencyEnum) ToPointer() *UpdatePot200ApplicationJSONPotCurrencyEnum {
	return &e
}

func (e *UpdatePot200ApplicationJSONPotCurrencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GBP":
		fallthrough
	case "CAD":
		fallthrough
	case "USD":
		*e = UpdatePot200ApplicationJSONPotCurrencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePot200ApplicationJSONPotCurrencyEnum: %v", v)
	}
}

type UpdatePot200ApplicationJSONStatusEnum string

const (
	UpdatePot200ApplicationJSONStatusEnumActive   UpdatePot200ApplicationJSONStatusEnum = "active"
	UpdatePot200ApplicationJSONStatusEnumInactive UpdatePot200ApplicationJSONStatusEnum = "inactive"
)

func (e UpdatePot200ApplicationJSONStatusEnum) ToPointer() *UpdatePot200ApplicationJSONStatusEnum {
	return &e
}

func (e *UpdatePot200ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "inactive":
		*e = UpdatePot200ApplicationJSONStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePot200ApplicationJSONStatusEnum: %v", v)
	}
}

// UpdatePot200ApplicationJSON - success
type UpdatePot200ApplicationJSON struct {
	AccountID                 *string    `json:"account_id,omitempty"`
	CreatedAt                 *time.Time `json:"created_at,omitempty"`
	CustodianAccountReference *string    `json:"custodian_account_reference,omitempty"`
	CustodianClientRef        *string    `json:"custodian_client_ref,omitempty"`
	CustodianID               *string    `json:"custodian_id,omitempty"`
	FinancialProductID        string     `json:"financial_product_id"`
	InvestorID                []string   `json:"investor_id"`
	PortfolioTemplateID       *string    `json:"portfolio_template_id,omitempty"`
	// If not populated, will be defaulted to tenancy currency
	PotCurrency *UpdatePot200ApplicationJSONPotCurrencyEnum `json:"pot_currency,omitempty"`
	// system generated id
	PotID              *string                               `json:"pot_id,omitempty"`
	PotName            string                                `json:"pot_name"`
	ReferenceVersion   *int64                                `json:"reference_version,omitempty"`
	RegulatorAdvisorID *string                               `json:"regulator_advisor_id,omitempty"`
	Status             UpdatePot200ApplicationJSONStatusEnum `json:"status"`
	UpdatedAt          *time.Time                            `json:"updated_at,omitempty"`
}

type UpdatePotResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// success
	UpdatePot200ApplicationJSONObject *UpdatePot200ApplicationJSON
	// Request is not complete and may have one or more validations errors. Please check the error message and the code
	UpdatePot400ApplicationJSONObject *UpdatePot400ApplicationJSON
	// You do not have permissions to access this resource.
	UpdatePot401ApplicationJSONObject *UpdatePot401ApplicationJSON
	// Your authentication information is missing or invalid. Please check the keys are properly set and its correct
	UpdatePot403ApplicationJSONObject *UpdatePot403ApplicationJSON
	// The specified resource was not found
	UpdatePot404ApplicationJSONObject *UpdatePot404ApplicationJSON
	// Duplicate request
	UpdatePot409ApplicationJSONObject *UpdatePot409ApplicationJSON
	// You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
	UpdatePot429ApplicationJSONObject *UpdatePot429ApplicationJSON
	// System error. Retry later. If the error persist, contact WOS support
	UpdatePot500ApplicationJSONObject *UpdatePot500ApplicationJSON
}
