// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// QueryComputeClusterSnappableStatusEnum - Determines whether to fetch Compute Clusters with additional privilege checks.
type QueryComputeClusterSnappableStatusEnum string

const (
	QueryComputeClusterSnappableStatusEnumProtectable QueryComputeClusterSnappableStatusEnum = "Protectable"
)

func (e QueryComputeClusterSnappableStatusEnum) ToPointer() *QueryComputeClusterSnappableStatusEnum {
	return &e
}

func (e *QueryComputeClusterSnappableStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Protectable":
		*e = QueryComputeClusterSnappableStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryComputeClusterSnappableStatusEnum: %v", v)
	}
}

type QueryComputeClusterRequest struct {
	// Filter clusters on data center ID.
	DatacenterID *string `queryParam:"style=form,explode=true,name=datacenter_id"`
	// Filter on a primary cluster ID. Also accepts value 'local'.
	PrimaryClusterID *string `queryParam:"style=form,explode=true,name=primary_cluster_id"`
	// Determines whether to fetch Compute Clusters with additional privilege checks.
	SnappableStatus *QueryComputeClusterSnappableStatusEnum `queryParam:"style=form,explode=true,name=snappable_status"`
}

type QueryComputeClusterResponse struct {
	// Returns list of compute clusters subject to provided filters.
	ComputeClusterSummaryListResponse *shared.ComputeClusterSummaryListResponse
	ContentType                       string
	StatusCode                        int
	RawResponse                       *http.Response
}
