<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class ForwardingRules 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieves an aggregated list of forwarding rules.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesAggregatedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesAggregatedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesAggregatedListResponse
     */
	public function computeForwardingRulesAggregatedList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesAggregatedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesAggregatedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesAggregatedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/aggregated/forwardingRules', \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesAggregatedListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesAggregatedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesAggregatedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->forwardingRuleAggregatedList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ForwardingRuleAggregatedList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified ForwardingRule resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesDeleteResponse
     */
	public function computeForwardingRulesDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}', \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified ForwardingRule resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesGetResponse
     */
	public function computeForwardingRulesGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}', \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->forwardingRule = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ForwardingRule', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a ForwardingRule resource in the specified project and region using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesInsertResponse
     */
	public function computeForwardingRulesInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/forwardingRules', \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "forwardingRule", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of ForwardingRule resources available to the specified project and region.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesListResponse
     */
	public function computeForwardingRulesList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/forwardingRules', \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->forwardingRuleList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ForwardingRuleList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the specified forwarding rule with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules. Currently, you can only patch the network_tier field.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesPatchResponse
     */
	public function computeForwardingRulesPatch(
        \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}', \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "forwardingRule1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the labels on the specified resource. To learn more about labels, read the Labeling Resources documentation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesSetLabelsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesSetLabelsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesSetLabelsResponse
     */
	public function computeForwardingRulesSetLabels(
        \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesSetLabelsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesSetLabelsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesSetLabelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/forwardingRules/{resource}/setLabels', \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesSetLabelsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "regionSetLabelsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesSetLabelsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesSetLabelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Changes target URL for forwarding rule. The new target should be of the same type as the old target.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesSetTargetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesSetTargetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesSetTargetResponse
     */
	public function computeForwardingRulesSetTarget(
        \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesSetTargetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesSetTargetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesSetTargetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}/setTarget', \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesSetTargetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "targetReference", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesSetTargetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesSetTargetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesTestIamPermissionsResponse
     */
	public function computeForwardingRulesTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/forwardingRules/{resource}/testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeForwardingRulesTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}