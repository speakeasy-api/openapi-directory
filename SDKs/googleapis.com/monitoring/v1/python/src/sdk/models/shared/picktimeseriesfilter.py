"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PickTimeSeriesFilterDirectionEnum(str, Enum):
    r"""How to use the ranking to select time series that pass through the filter."""
    DIRECTION_UNSPECIFIED = 'DIRECTION_UNSPECIFIED'
    TOP = 'TOP'
    BOTTOM = 'BOTTOM'

class PickTimeSeriesFilterRankingMethodEnum(str, Enum):
    r"""ranking_method is applied to each time series independently to produce the value which will be used to compare the time series to other time series."""
    METHOD_UNSPECIFIED = 'METHOD_UNSPECIFIED'
    METHOD_MEAN = 'METHOD_MEAN'
    METHOD_MAX = 'METHOD_MAX'
    METHOD_MIN = 'METHOD_MIN'
    METHOD_SUM = 'METHOD_SUM'
    METHOD_LATEST = 'METHOD_LATEST'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PickTimeSeriesFilter:
    r"""Describes a ranking-based time series filter. Each input time series is ranked with an aligner. The filter will allow up to num_time_series time series to pass through it, selecting them based on the relative ranking.For example, if ranking_method is METHOD_MEAN,direction is BOTTOM, and num_time_series is 3, then the 3 times series with the lowest mean values will pass through the filter."""
    
    direction: Optional[PickTimeSeriesFilterDirectionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('direction'), 'exclude': lambda f: f is None }})
    r"""How to use the ranking to select time series that pass through the filter."""  
    num_time_series: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numTimeSeries'), 'exclude': lambda f: f is None }})
    r"""How many time series to allow to pass through the filter."""  
    ranking_method: Optional[PickTimeSeriesFilterRankingMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rankingMethod'), 'exclude': lambda f: f is None }})
    r"""ranking_method is applied to each time series independently to produce the value which will be used to compare the time series to other time series."""  
    