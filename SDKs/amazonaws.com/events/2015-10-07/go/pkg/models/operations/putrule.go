// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// PutRuleXAmzTargetEnum
type PutRuleXAmzTargetEnum string

const (
	PutRuleXAmzTargetEnumAwsEventsPutRule PutRuleXAmzTargetEnum = "AWSEvents.PutRule"
)

func (e *PutRuleXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AWSEvents.PutRule":
		*e = PutRuleXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutRuleXAmzTargetEnum: %s", s)
	}
}

type PutRuleRequest struct {
	PutRuleRequest    shared.PutRuleRequest `request:"mediaType=application/json"`
	XAmzAlgorithm     *string               `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string               `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string               `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string               `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string               `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string               `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string               `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        PutRuleXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type PutRuleResponse struct {
	// ConcurrentModificationException
	ConcurrentModificationException interface{}
	ContentType                     string
	// InternalException
	InternalException interface{}
	// InvalidEventPatternException
	InvalidEventPatternException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// ManagedRuleException
	ManagedRuleException interface{}
	// Success
	PutRuleResponse *shared.PutRuleResponse
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
