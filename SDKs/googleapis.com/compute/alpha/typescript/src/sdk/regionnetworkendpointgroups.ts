/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class RegionNetworkEndpointGroups {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Attach a list of network endpoints to the specified network endpoint group.
   */
  computeRegionNetworkEndpointGroupsAttachNetworkEndpoints(
    req: operations.ComputeRegionNetworkEndpointGroupsAttachNetworkEndpointsRequest,
    security: operations.ComputeRegionNetworkEndpointGroupsAttachNetworkEndpointsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeRegionNetworkEndpointGroupsAttachNetworkEndpointsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ComputeRegionNetworkEndpointGroupsAttachNetworkEndpointsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/regions/{region}/networkEndpointGroups/{networkEndpointGroup}/attachNetworkEndpoints",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "regionNetworkEndpointGroupsAttachEndpointsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ComputeRegionNetworkEndpointGroupsAttachNetworkEndpointsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeRegionNetworkEndpointGroupsAttachNetworkEndpointsResponse =
        new operations.ComputeRegionNetworkEndpointGroupsAttachNetworkEndpointsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes the specified network endpoint group. Note that the NEG cannot be deleted if it is configured as a backend of a backend service.
   */
  computeRegionNetworkEndpointGroupsDelete(
    req: operations.ComputeRegionNetworkEndpointGroupsDeleteRequest,
    security: operations.ComputeRegionNetworkEndpointGroupsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeRegionNetworkEndpointGroupsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputeRegionNetworkEndpointGroupsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/regions/{region}/networkEndpointGroups/{networkEndpointGroup}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ComputeRegionNetworkEndpointGroupsDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeRegionNetworkEndpointGroupsDeleteResponse =
        new operations.ComputeRegionNetworkEndpointGroupsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Detach the network endpoint from the specified network endpoint group.
   */
  computeRegionNetworkEndpointGroupsDetachNetworkEndpoints(
    req: operations.ComputeRegionNetworkEndpointGroupsDetachNetworkEndpointsRequest,
    security: operations.ComputeRegionNetworkEndpointGroupsDetachNetworkEndpointsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeRegionNetworkEndpointGroupsDetachNetworkEndpointsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ComputeRegionNetworkEndpointGroupsDetachNetworkEndpointsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/regions/{region}/networkEndpointGroups/{networkEndpointGroup}/detachNetworkEndpoints",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "regionNetworkEndpointGroupsDetachEndpointsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ComputeRegionNetworkEndpointGroupsDetachNetworkEndpointsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeRegionNetworkEndpointGroupsDetachNetworkEndpointsResponse =
        new operations.ComputeRegionNetworkEndpointGroupsDetachNetworkEndpointsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the specified network endpoint group.
   */
  computeRegionNetworkEndpointGroupsGet(
    req: operations.ComputeRegionNetworkEndpointGroupsGetRequest,
    security: operations.ComputeRegionNetworkEndpointGroupsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeRegionNetworkEndpointGroupsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputeRegionNetworkEndpointGroupsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/regions/{region}/networkEndpointGroups/{networkEndpointGroup}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ComputeRegionNetworkEndpointGroupsGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeRegionNetworkEndpointGroupsGetResponse =
        new operations.ComputeRegionNetworkEndpointGroupsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.networkEndpointGroup = utils.objectToClass(
              httpRes?.data,
              shared.NetworkEndpointGroup
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a network endpoint group in the specified project using the parameters that are included in the request.
   */
  computeRegionNetworkEndpointGroupsInsert(
    req: operations.ComputeRegionNetworkEndpointGroupsInsertRequest,
    security: operations.ComputeRegionNetworkEndpointGroupsInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeRegionNetworkEndpointGroupsInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputeRegionNetworkEndpointGroupsInsertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/regions/{region}/networkEndpointGroups",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "networkEndpointGroup",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ComputeRegionNetworkEndpointGroupsInsertSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeRegionNetworkEndpointGroupsInsertResponse =
        new operations.ComputeRegionNetworkEndpointGroupsInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves the list of regional network endpoint groups available to the specified project in the given region.
   */
  computeRegionNetworkEndpointGroupsList(
    req: operations.ComputeRegionNetworkEndpointGroupsListRequest,
    security: operations.ComputeRegionNetworkEndpointGroupsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeRegionNetworkEndpointGroupsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputeRegionNetworkEndpointGroupsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/regions/{region}/networkEndpointGroups",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ComputeRegionNetworkEndpointGroupsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeRegionNetworkEndpointGroupsListResponse =
        new operations.ComputeRegionNetworkEndpointGroupsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.networkEndpointGroupList = utils.objectToClass(
              httpRes?.data,
              shared.NetworkEndpointGroupList
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists the network endpoints in the specified network endpoint group.
   */
  computeRegionNetworkEndpointGroupsListNetworkEndpoints(
    req: operations.ComputeRegionNetworkEndpointGroupsListNetworkEndpointsRequest,
    security: operations.ComputeRegionNetworkEndpointGroupsListNetworkEndpointsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeRegionNetworkEndpointGroupsListNetworkEndpointsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ComputeRegionNetworkEndpointGroupsListNetworkEndpointsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/regions/{region}/networkEndpointGroups/{networkEndpointGroup}/listNetworkEndpoints",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ComputeRegionNetworkEndpointGroupsListNetworkEndpointsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeRegionNetworkEndpointGroupsListNetworkEndpointsResponse =
        new operations.ComputeRegionNetworkEndpointGroupsListNetworkEndpointsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.networkEndpointGroupsListNetworkEndpoints = utils.objectToClass(
              httpRes?.data,
              shared.NetworkEndpointGroupsListNetworkEndpoints
            );
          }
          break;
      }

      return res;
    });
  }
}
