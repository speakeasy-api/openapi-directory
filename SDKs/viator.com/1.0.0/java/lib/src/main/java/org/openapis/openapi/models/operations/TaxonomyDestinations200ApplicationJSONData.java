/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class TaxonomyDestinations200ApplicationJSONData {
    /**
     * **currency code** for the currency in which pricing is displayed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultCurrencyCode")
    public String defaultCurrencyCode;

    public TaxonomyDestinations200ApplicationJSONData withDefaultCurrencyCode(String defaultCurrencyCode) {
        this.defaultCurrencyCode = defaultCurrencyCode;
        return this;
    }
    
    /**
     * **unique numeric identifier** of the destination
     * - use this value as the `destId` input field for other Viator API services
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destinationId")
    public Long destinationId;

    public TaxonomyDestinations200ApplicationJSONData withDestinationId(Long destinationId) {
        this.destinationId = destinationId;
        return this;
    }
    
    /**
     * **natural-language name** of the destination
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destinationName")
    public String destinationName;

    public TaxonomyDestinations200ApplicationJSONData withDestinationName(String destinationName) {
        this.destinationName = destinationName;
        return this;
    }
    
    /**
     * **destination type specifier**
     * - `"COUNTRY"`: destination is a country
     * - `"REGION"`: destination is a recognized region of a country, such as a state, island within a country, stretch of coastline, etc.
     * - `"CITY"`: destination is a city
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destinationType")
    public org.openapis.openapi.models.shared.DestinationTypeEnum destinationType;

    public TaxonomyDestinations200ApplicationJSONData withDestinationType(org.openapis.openapi.models.shared.DestinationTypeEnum destinationType) {
        this.destinationType = destinationType;
        return this;
    }
    
    /**
     * ignore - (Viator only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destinationUrlName")
    public String destinationUrlName;

    public TaxonomyDestinations200ApplicationJSONData withDestinationUrlName(String destinationUrlName) {
        this.destinationUrlName = destinationUrlName;
        return this;
    }
    
    /**
     * **IATA airport code** for the destination
     * - a three-letter code defined by the International Air Transport Association (IATA) used to identify many airports around the world
     * - the IATA code is also known as an 'IATA location identifier', 'IATA station code' or simply a 'location identifier'
     * - the IATA code is &amp;lt;u&amp;gt;not available&amp;lt;/u&amp;gt; for destinations with a destination type of `'COUNTRY'` or `'REGION'`, as there could be more than one airport within a destination
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("iataCode")
    public String iataCode;

    public TaxonomyDestinations200ApplicationJSONData withIataCode(String iataCode) {
        this.iataCode = iataCode;
        return this;
    }
    
    /**
     * **latitude component** of the destination's geolocation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("latitude")
    public Double latitude;

    public TaxonomyDestinations200ApplicationJSONData withLatitude(Double latitude) {
        this.latitude = latitude;
        return this;
    }
    
    /**
     * **longitude component** of the destination's geolocation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("longitude")
    public Double longitude;

    public TaxonomyDestinations200ApplicationJSONData withLongitude(Double longitude) {
        this.longitude = longitude;
        return this;
    }
    
    /**
     * **hierarchy location specifier** for the destination that is a concatenation of all `parentId` and `destinationId` codes
     * - e.g. `'8.77.673'` for Chicago
     * - format: [top level `parentId`].[any additional `parentId`].[`destinationId`]
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lookupId")
    public String lookupId;

    public TaxonomyDestinations200ApplicationJSONData withLookupId(String lookupId) {
        this.lookupId = lookupId;
        return this;
    }
    
    /**
     * **unique numeric identifier** of the destination's parent destination
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentId")
    public Long parentId;

    public TaxonomyDestinations200ApplicationJSONData withParentId(Long parentId) {
        this.parentId = parentId;
        return this;
    }
    
    /**
     * ignore - (Viator only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selectable")
    public Boolean selectable;

    public TaxonomyDestinations200ApplicationJSONData withSelectable(Boolean selectable) {
        this.selectable = selectable;
        return this;
    }
    
    /**
     * **sort order** for this response
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sortOrder")
    public Long sortOrder;

    public TaxonomyDestinations200ApplicationJSONData withSortOrder(Long sortOrder) {
        this.sortOrder = sortOrder;
        return this;
    }
    
    /**
     * **time zone** of the destination
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeZone")
    public String timeZone;

    public TaxonomyDestinations200ApplicationJSONData withTimeZone(String timeZone) {
        this.timeZone = timeZone;
        return this;
    }
    
    public TaxonomyDestinations200ApplicationJSONData(){}
}
