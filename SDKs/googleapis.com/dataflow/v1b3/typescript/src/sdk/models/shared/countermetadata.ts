/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * Counter aggregation kind.
 */
export enum CounterMetadataKindEnum {
  Invalid = "INVALID",
  Sum = "SUM",
  Max = "MAX",
  Min = "MIN",
  Mean = "MEAN",
  Or = "OR",
  And = "AND",
  Set = "SET",
  Distribution = "DISTRIBUTION",
  LatestValue = "LATEST_VALUE",
}

/**
 * System defined Units, see above enum.
 */
export enum CounterMetadataStandardUnitsEnum {
  Bytes = "BYTES",
  BytesPerSec = "BYTES_PER_SEC",
  Milliseconds = "MILLISECONDS",
  Microseconds = "MICROSECONDS",
  Nanoseconds = "NANOSECONDS",
  TimestampMsec = "TIMESTAMP_MSEC",
  TimestampUsec = "TIMESTAMP_USEC",
  TimestampNsec = "TIMESTAMP_NSEC",
}

/**
 * CounterMetadata includes all static non-name non-value counter attributes.
 */
export class CounterMetadata extends SpeakeasyBase {
  /**
   * Human-readable description of the counter semantics.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Counter aggregation kind.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: CounterMetadataKindEnum;

  /**
   * A string referring to the unit type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "otherUnits" })
  otherUnits?: string;

  /**
   * System defined Units, see above enum.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "standardUnits" })
  standardUnits?: CounterMetadataStandardUnitsEnum;
}
