/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class RetailProjectsLocationsCatalogsCompleteQueryRequest {
    /**
     * V1 error format.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=$.xgafv")
    public org.openapis.openapi.models.shared.XgafvEnum dollarXgafv;

    public RetailProjectsLocationsCatalogsCompleteQueryRequest withDollarXgafv(org.openapis.openapi.models.shared.XgafvEnum dollarXgafv) {
        this.dollarXgafv = dollarXgafv;
        return this;
    }
    
    /**
     * OAuth access token.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=access_token")
    public String accessToken;

    public RetailProjectsLocationsCatalogsCompleteQueryRequest withAccessToken(String accessToken) {
        this.accessToken = accessToken;
        return this;
    }
    
    /**
     * Data format for response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=alt")
    public org.openapis.openapi.models.shared.AltEnum alt;

    public RetailProjectsLocationsCatalogsCompleteQueryRequest withAlt(org.openapis.openapi.models.shared.AltEnum alt) {
        this.alt = alt;
        return this;
    }
    
    /**
     * JSONP
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=callback")
    public String callback;

    public RetailProjectsLocationsCatalogsCompleteQueryRequest withCallback(String callback) {
        this.callback = callback;
        return this;
    }
    
    /**
     * Required. Catalog for which the completion is performed. Full resource name of catalog, such as `projects/* /locations/global/catalogs/default_catalog`.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=catalog")
    public String catalog;

    public RetailProjectsLocationsCatalogsCompleteQueryRequest withCatalog(String catalog) {
        this.catalog = catalog;
        return this;
    }
    
    /**
     * Determines which dataset to use for fetching completion. "user-data" will use the imported dataset through CompletionService.ImportCompletionData. "cloud-retail" will use the dataset generated by cloud retail based on user events. If leave empty, it will use the "user-data". Current supported values: * user-data * cloud-retail: This option requires enabling auto-learning function first. See [guidelines](https://cloud.google.com/retail/docs/completion-overview#generated-completion-dataset).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=dataset")
    public String dataset;

    public RetailProjectsLocationsCatalogsCompleteQueryRequest withDataset(String dataset) {
        this.dataset = dataset;
        return this;
    }
    
    /**
     * The device type context for completion suggestions. We recommend that you leave this field empty. It can apply different suggestions on different device types, e.g. `DESKTOP`, `MOBILE`. If it is empty, the suggestions are across all device types. Supported formats: * `UNKNOWN_DEVICE_TYPE` * `DESKTOP` * `MOBILE` * A customized string starts with `OTHER_`, e.g. `OTHER_IPHONE`.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=deviceType")
    public String deviceType;

    public RetailProjectsLocationsCatalogsCompleteQueryRequest withDeviceType(String deviceType) {
        this.deviceType = deviceType;
        return this;
    }
    
    /**
     * The entity for customers who run multiple entities, domains, sites, or regions, for example, `Google US`, `Google Ads`, `Waymo`, `google.com`, `youtube.com`, etc. If this is set, it must be an exact match with UserEvent.entity to get per-entity autocomplete results.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=entity")
    public String entity;

    public RetailProjectsLocationsCatalogsCompleteQueryRequest withEntity(String entity) {
        this.entity = entity;
        return this;
    }
    
    /**
     * Selector specifying which fields to include in a partial response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=fields")
    public String fields;

    public RetailProjectsLocationsCatalogsCompleteQueryRequest withFields(String fields) {
        this.fields = fields;
        return this;
    }
    
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=key")
    public String key;

    public RetailProjectsLocationsCatalogsCompleteQueryRequest withKey(String key) {
        this.key = key;
        return this;
    }
    
    /**
     * Note that this field applies for `user-data` dataset only. For requests with `cloud-retail` dataset, setting this field has no effect. The language filters applied to the output suggestions. If set, it should contain the language of the query. If not set, suggestions are returned without considering language restrictions. This is the BCP-47 language code, such as "en-US" or "sr-Latn". For more information, see [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47). The maximum number of language codes is 3.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=languageCodes")
    public String[] languageCodes;

    public RetailProjectsLocationsCatalogsCompleteQueryRequest withLanguageCodes(String[] languageCodes) {
        this.languageCodes = languageCodes;
        return this;
    }
    
    /**
     * Completion max suggestions. If left unset or set to 0, then will fallback to the configured value CompletionConfig.max_suggestions. The maximum allowed max suggestions is 20. If it is set higher, it will be capped by 20.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=maxSuggestions")
    public Long maxSuggestions;

    public RetailProjectsLocationsCatalogsCompleteQueryRequest withMaxSuggestions(Long maxSuggestions) {
        this.maxSuggestions = maxSuggestions;
        return this;
    }
    
    /**
     * OAuth 2.0 token for the current user.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=oauth_token")
    public String oauthToken;

    public RetailProjectsLocationsCatalogsCompleteQueryRequest withOauthToken(String oauthToken) {
        this.oauthToken = oauthToken;
        return this;
    }
    
    /**
     * Returns response with indentations and line breaks.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=prettyPrint")
    public Boolean prettyPrint;

    public RetailProjectsLocationsCatalogsCompleteQueryRequest withPrettyPrint(Boolean prettyPrint) {
        this.prettyPrint = prettyPrint;
        return this;
    }
    
    /**
     * Required. The query used to generate suggestions. The maximum number of allowed characters is 255.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=query")
    public String query;

    public RetailProjectsLocationsCatalogsCompleteQueryRequest withQuery(String query) {
        this.query = query;
        return this;
    }
    
    /**
     * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=quotaUser")
    public String quotaUser;

    public RetailProjectsLocationsCatalogsCompleteQueryRequest withQuotaUser(String quotaUser) {
        this.quotaUser = quotaUser;
        return this;
    }
    
    /**
     * Legacy upload protocol for media (e.g. "media", "multipart").
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=uploadType")
    public String uploadType;

    public RetailProjectsLocationsCatalogsCompleteQueryRequest withUploadType(String uploadType) {
        this.uploadType = uploadType;
        return this;
    }
    
    /**
     * Upload protocol for media (e.g. "raw", "multipart").
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=upload_protocol")
    public String uploadProtocol;

    public RetailProjectsLocationsCatalogsCompleteQueryRequest withUploadProtocol(String uploadProtocol) {
        this.uploadProtocol = uploadProtocol;
        return this;
    }
    
    /**
     * Required field. A unique identifier for tracking visitors. For example, this could be implemented with an HTTP cookie, which should be able to uniquely identify a visitor on a single device. This unique identifier should not change if the visitor logs in or out of the website. The field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=visitorId")
    public String visitorId;

    public RetailProjectsLocationsCatalogsCompleteQueryRequest withVisitorId(String visitorId) {
        this.visitorId = visitorId;
        return this;
    }
    
    public RetailProjectsLocationsCatalogsCompleteQueryRequest(@JsonProperty("catalog") String catalog) {
        this.catalog = catalog;
  }
}
