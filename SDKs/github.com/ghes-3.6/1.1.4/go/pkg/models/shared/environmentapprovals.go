// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type EnvironmentApprovalsEnvironments struct {
	// The time that the environment was created, in ISO 8601 format.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	HTMLURL   *string    `json:"html_url,omitempty"`
	// The id of the environment.
	ID *int64 `json:"id,omitempty"`
	// The name of the environment.
	Name   *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	// The time that the environment was last updated, in ISO 8601 format.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	URL       *string    `json:"url,omitempty"`
}

// EnvironmentApprovalsStateEnum - Whether deployment to the environment(s) was approved or rejected or pending (with comments)
type EnvironmentApprovalsStateEnum string

const (
	EnvironmentApprovalsStateEnumApproved EnvironmentApprovalsStateEnum = "approved"
	EnvironmentApprovalsStateEnumRejected EnvironmentApprovalsStateEnum = "rejected"
	EnvironmentApprovalsStateEnumPending  EnvironmentApprovalsStateEnum = "pending"
)

func (e *EnvironmentApprovalsStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "approved":
		fallthrough
	case "rejected":
		fallthrough
	case "pending":
		*e = EnvironmentApprovalsStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EnvironmentApprovalsStateEnum: %s", s)
	}
}

// EnvironmentApprovals - An entry in the reviews log for environment deployments
type EnvironmentApprovals struct {
	// The comment submitted with the deployment review
	Comment string `json:"comment"`
	// The list of environments that were approved or rejected
	Environments []EnvironmentApprovalsEnvironments `json:"environments"`
	// Whether deployment to the environment(s) was approved or rejected or pending (with comments)
	State EnvironmentApprovalsStateEnum `json:"state"`
	// A GitHub user.
	User SimpleUser `json:"user"`
}
