"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetNetworkWirelessSsidSplashSettingsRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    number: str = dataclasses.field(metadata={'path_param': { 'field_name': 'number', 'style': 'simple', 'explode': False }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkWirelessSsidSplashSettings200ApplicationJSONBillingFreeAccess:
    r"""Details associated with a free access plan with limits"""
    
    duration_in_minutes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('durationInMinutes'), 'exclude': lambda f: f is None }})
    r"""How long a device can use a network for free."""  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Whether or not free access is enabled."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkWirelessSsidSplashSettings200ApplicationJSONBilling:
    r"""Details associated with billing splash"""
    
    free_access: Optional[GetNetworkWirelessSsidSplashSettings200ApplicationJSONBillingFreeAccess] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('freeAccess'), 'exclude': lambda f: f is None }})
    r"""Details associated with a free access plan with limits"""  
    prepaid_access_fast_login_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prepaidAccessFastLoginEnabled'), 'exclude': lambda f: f is None }})
    r"""Whether or not billing uses the fast login prepaid access option."""  
    reply_to_email_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('replyToEmailAddress'), 'exclude': lambda f: f is None }})
    r"""The email address that reeceives replies from clients"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkWirelessSsidSplashSettings200ApplicationJSONGuestSponsorship:
    r"""Details associated with guest sponsored splash"""
    
    duration_in_minutes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('durationInMinutes'), 'exclude': lambda f: f is None }})
    r"""Duration in minutes of sponsored guest authorization."""  
    guest_can_request_timeframe: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('guestCanRequestTimeframe'), 'exclude': lambda f: f is None }})
    r"""Whether or not guests can specify how much time they are requesting."""  
    
class GetNetworkWirelessSsidSplashSettings200ApplicationJSONSelfRegistrationAuthorizationTypeEnum(str, Enum):
    r"""How created user accounts should be authorized."""
    ADMIN = 'admin'
    AUTO = 'auto'
    SELF_EMAIL = 'self_email'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkWirelessSsidSplashSettings200ApplicationJSONSelfRegistration:
    r"""Self-registration for splash with Meraki authentication."""
    
    authorization_type: Optional[GetNetworkWirelessSsidSplashSettings200ApplicationJSONSelfRegistrationAuthorizationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authorizationType'), 'exclude': lambda f: f is None }})
    r"""How created user accounts should be authorized."""  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Whether or not to allow users to create their own account on the network."""  
    
class GetNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollmentStrengthEnum(str, Enum):
    r"""The strength of the enforcement of selected system types."""
    CLICK_THROUGH = 'click-through'
    FOCUSED = 'focused'
    STRICT = 'strict'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollmentSystemsManagerNetwork:
    r"""Systems Manager network targeted for sentry enrollment."""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The network ID of the Systems Manager network."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollment:
    r"""Systems Manager sentry enrollment splash settings."""
    
    enforced_systems: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enforcedSystems'), 'exclude': lambda f: f is None }})
    r"""The system types that the Sentry enforces."""  
    strength: Optional[GetNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollmentStrengthEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('strength'), 'exclude': lambda f: f is None }})
    r"""The strength of the enforcement of selected system types."""  
    systems_manager_network: Optional[GetNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollmentSystemsManagerNetwork] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('systemsManagerNetwork'), 'exclude': lambda f: f is None }})
    r"""Systems Manager network targeted for sentry enrollment."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkWirelessSsidSplashSettings200ApplicationJSONSplashImage:
    r"""The image used in the splash page."""
    
    extension: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extension'), 'exclude': lambda f: f is None }})
    r"""The extension of the image file."""  
    md5: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('md5'), 'exclude': lambda f: f is None }})
    r"""The MD5 value of the image file."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkWirelessSsidSplashSettings200ApplicationJSONSplashLogo:
    r"""The logo used in the splash page."""
    
    extension: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extension'), 'exclude': lambda f: f is None }})
    r"""The extension of the logo file."""  
    md5: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('md5'), 'exclude': lambda f: f is None }})
    r"""The MD5 value of the logo file."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkWirelessSsidSplashSettings200ApplicationJSONSplashPrepaidFront:
    r"""The prepaid front image used in the splash page."""
    
    extension: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extension'), 'exclude': lambda f: f is None }})
    r"""The extension of the prepaid front image file."""  
    md5: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('md5'), 'exclude': lambda f: f is None }})
    r"""The MD5 value of the prepaid front image file."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkWirelessSsidSplashSettings200ApplicationJSON:
    r"""Successful operation"""
    
    allow_simultaneous_logins: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowSimultaneousLogins'), 'exclude': lambda f: f is None }})
    r"""Whether or not to allow simultaneous logins from different devices."""  
    billing: Optional[GetNetworkWirelessSsidSplashSettings200ApplicationJSONBilling] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billing'), 'exclude': lambda f: f is None }})
    r"""Details associated with billing splash"""  
    block_all_traffic_before_sign_on: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blockAllTrafficBeforeSignOn'), 'exclude': lambda f: f is None }})
    r"""How restricted allowing traffic should be. If true, all traffic types are blocked until the splash page is acknowledged. If false, all non-HTTP traffic is allowed before the splash page is acknowledged."""  
    controller_disconnection_behavior: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('controllerDisconnectionBehavior'), 'exclude': lambda f: f is None }})
    r"""How login attempts should be handled when the controller is unreachable."""  
    guest_sponsorship: Optional[GetNetworkWirelessSsidSplashSettings200ApplicationJSONGuestSponsorship] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('guestSponsorship'), 'exclude': lambda f: f is None }})
    r"""Details associated with guest sponsored splash"""  
    redirect_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('redirectUrl'), 'exclude': lambda f: f is None }})
    r"""The custom redirect URL where the users will go after the splash page."""  
    self_registration: Optional[GetNetworkWirelessSsidSplashSettings200ApplicationJSONSelfRegistration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selfRegistration'), 'exclude': lambda f: f is None }})
    r"""Self-registration for splash with Meraki authentication."""  
    sentry_enrollment: Optional[GetNetworkWirelessSsidSplashSettings200ApplicationJSONSentryEnrollment] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sentryEnrollment'), 'exclude': lambda f: f is None }})
    r"""Systems Manager sentry enrollment splash settings."""  
    splash_image: Optional[GetNetworkWirelessSsidSplashSettings200ApplicationJSONSplashImage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('splashImage'), 'exclude': lambda f: f is None }})
    r"""The image used in the splash page."""  
    splash_logo: Optional[GetNetworkWirelessSsidSplashSettings200ApplicationJSONSplashLogo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('splashLogo'), 'exclude': lambda f: f is None }})
    r"""The logo used in the splash page."""  
    splash_page: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('splashPage'), 'exclude': lambda f: f is None }})
    r"""The type of splash page for this SSID"""  
    splash_prepaid_front: Optional[GetNetworkWirelessSsidSplashSettings200ApplicationJSONSplashPrepaidFront] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('splashPrepaidFront'), 'exclude': lambda f: f is None }})
    r"""The prepaid front image used in the splash page."""  
    splash_timeout: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('splashTimeout'), 'exclude': lambda f: f is None }})
    r"""Splash timeout in minutes."""  
    splash_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('splashUrl'), 'exclude': lambda f: f is None }})
    r"""The custom splash URL of the click-through splash page."""  
    ssid_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ssidNumber'), 'exclude': lambda f: f is None }})
    r"""SSID number"""  
    use_redirect_url: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('useRedirectUrl'), 'exclude': lambda f: f is None }})
    r"""The Boolean indicating whether the the user will be redirected to the custom redirect URL after the splash page."""  
    use_splash_url: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('useSplashUrl'), 'exclude': lambda f: f is None }})
    r"""Boolean indicating whether the users will be redirected to the custom splash url"""  
    welcome_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('welcomeMessage'), 'exclude': lambda f: f is None }})
    r"""The welcome message for the users on the splash page."""  
    

@dataclasses.dataclass
class GetNetworkWirelessSsidSplashSettingsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_network_wireless_ssid_splash_settings_200_application_json_object: Optional[GetNetworkWirelessSsidSplashSettings200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    