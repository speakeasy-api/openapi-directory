"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Calls:
    r"""Fetch, Create and Modify voice calls"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_call(self, request: Any, security: operations.CreateCallSecurity) -> operations.CreateCallResponse:
        r"""Create an outbound call
        Create an outbound Call
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateCallResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateCallResponse])
                res.create_call_response = out

        return res

    def get_call(self, request: operations.GetCallRequest, security: operations.GetCallSecurity) -> operations.GetCallResponse:
        r"""Get detail of a specific call
        Get detail of a specific call
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCallRequest, base_url, '/{uuid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCallResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetCallResponse])
                res.get_call_response = out

        return res

    def get_calls(self, request: operations.GetCallsRequest, security: operations.GetCallsSecurity) -> operations.GetCallsResponse:
        r"""Get details of your calls
        Get details of your calls
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/'
        
        query_params = utils.get_query_params(operations.GetCallsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCallsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetCallsResponse])
                res.get_calls_response = out

        return res

    def update_call(self, request: operations.UpdateCallRequest, security: operations.UpdateCallSecurity) -> operations.UpdateCallResponse:
        r"""Modify an in progress call
        Modify an in progress call
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateCallRequest, base_url, '/{uuid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateCallResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    