/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { TranslateTextGlossaryConfig } from "./translatetextglossaryconfig";
import { Expose, Type } from "class-transformer";

/**
 * A single translation response.
 */
export class Translation extends SpeakeasyBase {
  /**
   * The BCP-47 language code of source text in the initial request, detected automatically, if no source language was passed within the initial request. If the source language was passed, auto-detection of the language does not occur and this field is empty.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "detectedLanguageCode" })
  detectedLanguageCode?: string;

  /**
   * Configures which glossary should be used for a specific target language, and defines options for applying that glossary.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "glossaryConfig" })
  @Type(() => TranslateTextGlossaryConfig)
  glossaryConfig?: TranslateTextGlossaryConfig;

  /**
   * Only present when `model` is present in the request. `model` here is normalized to have project number. For example: If the `model` requested in TranslationTextRequest is `projects/{project-id}/locations/{location-id}/models/general/nmt` then `model` here would be normalized to `projects/{project-number}/locations/{location-id}/models/general/nmt`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "model" })
  model?: string;

  /**
   * Text translated into the target language. If an error occurs during translation, this field might be excluded from the response.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "translatedText" })
  translatedText?: string;
}
