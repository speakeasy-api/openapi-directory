/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;

/**
 * differents requests to filter cards
 */
public class Filters {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Filters(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    public org.openapis.openapi.models.operations.GetCategoriesResponse getCategories() throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/categories");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetCategoriesResponse res = new org.openapis.openapi.models.operations.GetCategoriesResponse(contentType, httpRes.statusCode()) {{
            getCategories200ApplicationJSONStrings = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                String[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), String[].class);
                res.getCategories200ApplicationJSONStrings = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.GetCategoriesCategoryResponse getCategoriesCategory(org.openapis.openapi.models.operations.GetCategoriesCategoryRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetCategoriesCategoryRequest.class, baseUrl, "/categories/{category}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetCategoriesCategoryResponse res = new org.openapis.openapi.models.operations.GetCategoriesCategoryResponse(contentType, httpRes.statusCode()) {{
            stringEndpoint = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.StringEndpoint out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.StringEndpoint.class);
                res.stringEndpoint = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.GetDexIdsResponse getDexIds() throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/dex-ids");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetDexIdsResponse res = new org.openapis.openapi.models.operations.GetDexIdsResponse(contentType, httpRes.statusCode()) {{
            getDexIds200ApplicationJSONStrings = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                String[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), String[].class);
                res.getDexIds200ApplicationJSONStrings = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.GetDexIdsDexIdResponse getDexIdsDexId(org.openapis.openapi.models.operations.GetDexIdsDexIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetDexIdsDexIdRequest.class, baseUrl, "/dex-ids/{dexId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetDexIdsDexIdResponse res = new org.openapis.openapi.models.operations.GetDexIdsDexIdResponse(contentType, httpRes.statusCode()) {{
            cardResumes = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CardResume[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CardResume[].class);
                res.cardResumes = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.GetEnergyTypesResponse getEnergyTypes() throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/energy-types");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetEnergyTypesResponse res = new org.openapis.openapi.models.operations.GetEnergyTypesResponse(contentType, httpRes.statusCode()) {{
            getEnergyTypes200ApplicationJSONStrings = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                String[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), String[].class);
                res.getEnergyTypes200ApplicationJSONStrings = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.GetEnergyTypesEnergyTypeResponse getEnergyTypesEnergyType(org.openapis.openapi.models.operations.GetEnergyTypesEnergyTypeRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetEnergyTypesEnergyTypeRequest.class, baseUrl, "/energy-types/{energy-type}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetEnergyTypesEnergyTypeResponse res = new org.openapis.openapi.models.operations.GetEnergyTypesEnergyTypeResponse(contentType, httpRes.statusCode()) {{
            cardResumes = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CardResume[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CardResume[].class);
                res.cardResumes = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.GetHpResponse getHp() throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/hp");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetHpResponse res = new org.openapis.openapi.models.operations.GetHpResponse(contentType, httpRes.statusCode()) {{
            getHp200ApplicationJSONStrings = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                String[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), String[].class);
                res.getHp200ApplicationJSONStrings = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.GetHpHpResponse getHpHp(org.openapis.openapi.models.operations.GetHpHpRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetHpHpRequest.class, baseUrl, "/hp/{hp}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetHpHpResponse res = new org.openapis.openapi.models.operations.GetHpHpResponse(contentType, httpRes.statusCode()) {{
            stringEndpoint = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.StringEndpoint out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.StringEndpoint.class);
                res.stringEndpoint = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.GetIllustratorsResponse getIllustrators() throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/illustrators");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetIllustratorsResponse res = new org.openapis.openapi.models.operations.GetIllustratorsResponse(contentType, httpRes.statusCode()) {{
            getIllustrators200ApplicationJSONStrings = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                String[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), String[].class);
                res.getIllustrators200ApplicationJSONStrings = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.GetIllustratorsIllustratorResponse getIllustratorsIllustrator(org.openapis.openapi.models.operations.GetIllustratorsIllustratorRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetIllustratorsIllustratorRequest.class, baseUrl, "/illustrators/{illustrator}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetIllustratorsIllustratorResponse res = new org.openapis.openapi.models.operations.GetIllustratorsIllustratorResponse(contentType, httpRes.statusCode()) {{
            stringEndpoint = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.StringEndpoint out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.StringEndpoint.class);
                res.stringEndpoint = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.GetRaritiesResponse getRarities() throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/rarities");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRaritiesResponse res = new org.openapis.openapi.models.operations.GetRaritiesResponse(contentType, httpRes.statusCode()) {{
            getRarities200ApplicationJSONStrings = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                String[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), String[].class);
                res.getRarities200ApplicationJSONStrings = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.GetRaritiesRarityResponse getRaritiesRarity(org.openapis.openapi.models.operations.GetRaritiesRarityRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRaritiesRarityRequest.class, baseUrl, "/rarities/{rarity}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRaritiesRarityResponse res = new org.openapis.openapi.models.operations.GetRaritiesRarityResponse(contentType, httpRes.statusCode()) {{
            stringEndpoint = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.StringEndpoint out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.StringEndpoint.class);
                res.stringEndpoint = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.GetRegulationMarksResponse getRegulationMarks() throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/regulation-marks");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRegulationMarksResponse res = new org.openapis.openapi.models.operations.GetRegulationMarksResponse(contentType, httpRes.statusCode()) {{
            getRegulationMarks200ApplicationJSONStrings = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                String[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), String[].class);
                res.getRegulationMarks200ApplicationJSONStrings = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.GetRegulationMarksRegulationMarkResponse getRegulationMarksRegulationMark(org.openapis.openapi.models.operations.GetRegulationMarksRegulationMarkRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRegulationMarksRegulationMarkRequest.class, baseUrl, "/regulation-marks/{regulation-mark}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRegulationMarksRegulationMarkResponse res = new org.openapis.openapi.models.operations.GetRegulationMarksRegulationMarkResponse(contentType, httpRes.statusCode()) {{
            cardResumes = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CardResume[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CardResume[].class);
                res.cardResumes = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.GetRetreatsResponse getRetreats() throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/retreats");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRetreatsResponse res = new org.openapis.openapi.models.operations.GetRetreatsResponse(contentType, httpRes.statusCode()) {{
            getRetreats200ApplicationJSONStrings = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                String[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), String[].class);
                res.getRetreats200ApplicationJSONStrings = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.GetRetreatsRetreatResponse getRetreatsRetreat(org.openapis.openapi.models.operations.GetRetreatsRetreatRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRetreatsRetreatRequest.class, baseUrl, "/retreats/{retreat}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRetreatsRetreatResponse res = new org.openapis.openapi.models.operations.GetRetreatsRetreatResponse(contentType, httpRes.statusCode()) {{
            stringEndpoint = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.StringEndpoint out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.StringEndpoint.class);
                res.stringEndpoint = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.GetSeriesResponse getSeries() throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/series");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSeriesResponse res = new org.openapis.openapi.models.operations.GetSeriesResponse(contentType, httpRes.statusCode()) {{
            serieResumes = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SerieResume[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SerieResume[].class);
                res.serieResumes = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.GetSeriesSerieResponse getSeriesSerie(org.openapis.openapi.models.operations.GetSeriesSerieRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSeriesSerieRequest.class, baseUrl, "/series/{serie}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSeriesSerieResponse res = new org.openapis.openapi.models.operations.GetSeriesSerieResponse(contentType, httpRes.statusCode()) {{
            serie = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Serie out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Serie.class);
                res.serie = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.GetSetsResponse getSets() throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/sets");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSetsResponse res = new org.openapis.openapi.models.operations.GetSetsResponse(contentType, httpRes.statusCode()) {{
            setResumes = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SetResume[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SetResume[].class);
                res.setResumes = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.GetSetsSetResponse getSetsSet(org.openapis.openapi.models.operations.GetSetsSetRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSetsSetRequest.class, baseUrl, "/sets/{set}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSetsSetResponse res = new org.openapis.openapi.models.operations.GetSetsSetResponse(contentType, httpRes.statusCode()) {{
            set = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Set out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Set.class);
                res.set = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.GetStagesResponse getStages() throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/stages");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetStagesResponse res = new org.openapis.openapi.models.operations.GetStagesResponse(contentType, httpRes.statusCode()) {{
            getStages200ApplicationJSONStrings = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                String[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), String[].class);
                res.getStages200ApplicationJSONStrings = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.GetStagesStageResponse getStagesStage(org.openapis.openapi.models.operations.GetStagesStageRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetStagesStageRequest.class, baseUrl, "/stages/{stage}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetStagesStageResponse res = new org.openapis.openapi.models.operations.GetStagesStageResponse(contentType, httpRes.statusCode()) {{
            cardResumes = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CardResume[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CardResume[].class);
                res.cardResumes = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.GetSuffixesResponse getSuffixes() throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/suffixes");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSuffixesResponse res = new org.openapis.openapi.models.operations.GetSuffixesResponse(contentType, httpRes.statusCode()) {{
            getSuffixes200ApplicationJSONStrings = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                String[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), String[].class);
                res.getSuffixes200ApplicationJSONStrings = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.GetSuffixesSuffixResponse getSuffixesSuffix(org.openapis.openapi.models.operations.GetSuffixesSuffixRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSuffixesSuffixRequest.class, baseUrl, "/suffixes/{suffix}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSuffixesSuffixResponse res = new org.openapis.openapi.models.operations.GetSuffixesSuffixResponse(contentType, httpRes.statusCode()) {{
            cardResumes = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CardResume[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CardResume[].class);
                res.cardResumes = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.GetTrainerTypesResponse getTrainerTypes() throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/trainer-types");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetTrainerTypesResponse res = new org.openapis.openapi.models.operations.GetTrainerTypesResponse(contentType, httpRes.statusCode()) {{
            getTrainerTypes200ApplicationJSONStrings = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                String[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), String[].class);
                res.getTrainerTypes200ApplicationJSONStrings = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.GetTrainerTypesTrainerTypeResponse getTrainerTypesTrainerType(org.openapis.openapi.models.operations.GetTrainerTypesTrainerTypeRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetTrainerTypesTrainerTypeRequest.class, baseUrl, "/trainer-types/{trainer-type}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetTrainerTypesTrainerTypeResponse res = new org.openapis.openapi.models.operations.GetTrainerTypesTrainerTypeResponse(contentType, httpRes.statusCode()) {{
            cardResumes = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CardResume[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CardResume[].class);
                res.cardResumes = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.GetTypesResponse getTypes() throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/types");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetTypesResponse res = new org.openapis.openapi.models.operations.GetTypesResponse(contentType, httpRes.statusCode()) {{
            getTypes200ApplicationJSONStrings = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                String[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), String[].class);
                res.getTypes200ApplicationJSONStrings = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.GetTypesTypeResponse getTypesType(org.openapis.openapi.models.operations.GetTypesTypeRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetTypesTypeRequest.class, baseUrl, "/types/{type}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetTypesTypeResponse res = new org.openapis.openapi.models.operations.GetTypesTypeResponse(contentType, httpRes.statusCode()) {{
            cardResumes = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CardResume[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CardResume[].class);
                res.cardResumes = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.GetVariantsResponse getVariants() throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/variants");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetVariantsResponse res = new org.openapis.openapi.models.operations.GetVariantsResponse(contentType, httpRes.statusCode()) {{
            getVariants200ApplicationJSONStrings = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                String[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), String[].class);
                res.getVariants200ApplicationJSONStrings = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.GetVariantsVariantResponse getVariantsVariant(org.openapis.openapi.models.operations.GetVariantsVariantRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetVariantsVariantRequest.class, baseUrl, "/variants/{variant}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetVariantsVariantResponse res = new org.openapis.openapi.models.operations.GetVariantsVariantResponse(contentType, httpRes.statusCode()) {{
            cardResumes = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CardResume[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CardResume[].class);
                res.cardResumes = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
        }

        return res;
    }
}