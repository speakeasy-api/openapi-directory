"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class NodeTaintEffectEnum(str, Enum):
    r"""Effect for taint."""
    EFFECT_UNSPECIFIED = 'EFFECT_UNSPECIFIED'
    NO_SCHEDULE = 'NO_SCHEDULE'
    PREFER_NO_SCHEDULE = 'PREFER_NO_SCHEDULE'
    NO_EXECUTE = 'NO_EXECUTE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NodeTaint:
    r"""Kubernetes taint is composed of three fields: key, value, and effect. Effect can only be one of three types: NoSchedule, PreferNoSchedule or NoExecute. See [here](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration) for more information, including usage and the valid values."""
    
    effect: Optional[NodeTaintEffectEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('effect'), 'exclude': lambda f: f is None }})
    r"""Effect for taint."""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key'), 'exclude': lambda f: f is None }})
    r"""Key for taint."""  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Value for taint."""  
    