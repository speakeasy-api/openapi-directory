/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * SourceSplitRequest - Represents the operation to split a high-level Source specification into bundles (parts for parallel processing). At a high level, splitting of a source into bundles happens as follows: SourceSplitRequest is applied to the source. If it returns SOURCE_SPLIT_OUTCOME_USE_CURRENT, no further splitting happens and the source is used "as is". Otherwise, splitting is applied recursively to each produced DerivedSource. As an optimization, for any Source, if its does_not_need_splitting is true, the framework assumes that splitting this source would return SOURCE_SPLIT_OUTCOME_USE_CURRENT, and doesn't initiate a SourceSplitRequest. This applies both to the initial source being split and to bundles produced from it.
 */
public class SourceSplitRequest {
    /**
     * Hints for splitting a Source into bundles (parts for parallel processing) using SourceSplitRequest.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("options")
    public SourceSplitOptions options;
    public SourceSplitRequest withOptions(SourceSplitOptions options) {
        this.options = options;
        return this;
    }
    
    /**
     * A source that records can be read and decoded from.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source")
    public Source source;
    public SourceSplitRequest withSource(Source source) {
        this.source = source;
        return this;
    }
    
}
