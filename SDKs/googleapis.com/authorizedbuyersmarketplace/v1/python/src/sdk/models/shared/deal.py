"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import creativerequirements as shared_creativerequirements
from ..shared import deliverycontrol as shared_deliverycontrol
from ..shared import marketplacetargeting as shared_marketplacetargeting
from ..shared import money as shared_money
from ..shared import preferreddealterms as shared_preferreddealterms
from ..shared import privateauctionterms as shared_privateauctionterms
from ..shared import programmaticguaranteedterms as shared_programmaticguaranteedterms
from ..shared import timezone as shared_timezone
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DealInput:
    r"""A deal represents a segment of inventory for displaying ads that contains the terms and targeting information that is used for serving as well as the deal stats and status. Note: A proposal may contain multiple deals."""
    
    estimated_gross_spend: Optional[shared_money.Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('estimatedGrossSpend'), 'exclude': lambda f: f is None }})
    r"""Represents an amount of money with its currency type."""  
    flight_end_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flightEndTime'), 'exclude': lambda f: f is None }})
    r"""Proposed flight end time of the deal. This will generally be stored in a granularity of a second. A value is not necessary for Private Auction deals."""  
    flight_start_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flightStartTime'), 'exclude': lambda f: f is None }})
    r"""Proposed flight start time of the deal. This will generally be stored in the granularity of one second since deal serving starts at seconds boundary. Any time specified with more granularity (for example, in milliseconds) will be truncated towards the start of time in seconds."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Immutable. The unique identifier of the deal. Auto-generated by the server when a deal is created. Format: buyers/{accountId}/proposals/{proposalId}/deals/{dealId}"""  
    preferred_deal_terms: Optional[shared_preferreddealterms.PreferredDealTerms] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preferredDealTerms'), 'exclude': lambda f: f is None }})
    r"""Pricing terms for Preferred Deals."""  
    private_auction_terms: Optional[shared_privateauctionterms.PrivateAuctionTermsInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privateAuctionTerms'), 'exclude': lambda f: f is None }})
    r"""Pricing terms for Private Auctions."""  
    programmatic_guaranteed_terms: Optional[shared_programmaticguaranteedterms.ProgrammaticGuaranteedTerms] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('programmaticGuaranteedTerms'), 'exclude': lambda f: f is None }})
    r"""Pricing terms for Programmatic Guaranteed Deals."""  
    publisher_profile: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publisherProfile'), 'exclude': lambda f: f is None }})
    r"""Immutable. Reference to the seller on the deal. Format: `buyers/{buyerAccountId}/publisherProfiles/{publisherProfileId}`"""  
    seller_time_zone: Optional[shared_timezone.TimeZone] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sellerTimeZone'), 'exclude': lambda f: f is None }})
    r"""Represents a time zone from the [IANA Time Zone Database](https://www.iana.org/time-zones)."""  
    targeting: Optional[shared_marketplacetargeting.MarketplaceTargeting] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targeting'), 'exclude': lambda f: f is None }})
    r"""Targeting represents different criteria that can be used to target inventory. For example, they can choose to target inventory only if the user is in the US. Multiple types of targeting are always applied as a logical AND, unless noted otherwise."""  
    
class DealDealTypeEnum(str, Enum):
    r"""Output only. Type of deal."""
    DEAL_TYPE_UNSPECIFIED = 'DEAL_TYPE_UNSPECIFIED'
    PREFERRED_DEAL = 'PREFERRED_DEAL'
    PRIVATE_AUCTION = 'PRIVATE_AUCTION'
    PROGRAMMATIC_GUARANTEED = 'PROGRAMMATIC_GUARANTEED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Deal:
    r"""A deal represents a segment of inventory for displaying ads that contains the terms and targeting information that is used for serving as well as the deal stats and status. Note: A proposal may contain multiple deals."""
    
    billed_buyer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billedBuyer'), 'exclude': lambda f: f is None }})
    r"""Output only. When the client field is populated, this field refers to the buyer who creates and manages the client buyer and gets billed on behalf of the client buyer; when the buyer field is populated, this field is the same value as buyer. Format : `buyers/{buyerAccountId}`"""  
    buyer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buyer'), 'exclude': lambda f: f is None }})
    r"""Output only. Refers to a buyer in The Realtime-bidding API. Format: `buyers/{buyerAccountId}`"""  
    client: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client'), 'exclude': lambda f: f is None }})
    r"""Output only. Refers to a Client. Format: `buyers/{buyerAccountId}/clients/{clientAccountid}`"""  
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The time of the deal creation."""  
    creative_requirements: Optional[shared_creativerequirements.CreativeRequirements] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creativeRequirements'), 'exclude': lambda f: f is None }})
    r"""Message captures data about the creatives in the deal."""  
    deal_type: Optional[DealDealTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dealType'), 'exclude': lambda f: f is None }})
    r"""Output only. Type of deal."""  
    delivery_control: Optional[shared_deliverycontrol.DeliveryControl] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deliveryControl'), 'exclude': lambda f: f is None }})
    r"""Message contains details about how the deal will be paced."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Output only. Free text description for the deal terms."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Output only. The name of the deal. Maximum length of 255 unicode characters is allowed. Control characters are not allowed. Buyers cannot update this field. Note: Not to be confused with name, which is a unique identifier of the deal."""  
    estimated_gross_spend: Optional[shared_money.Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('estimatedGrossSpend'), 'exclude': lambda f: f is None }})
    r"""Represents an amount of money with its currency type."""  
    flight_end_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flightEndTime'), 'exclude': lambda f: f is None }})
    r"""Proposed flight end time of the deal. This will generally be stored in a granularity of a second. A value is not necessary for Private Auction deals."""  
    flight_start_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flightStartTime'), 'exclude': lambda f: f is None }})
    r"""Proposed flight start time of the deal. This will generally be stored in the granularity of one second since deal serving starts at seconds boundary. Any time specified with more granularity (for example, in milliseconds) will be truncated towards the start of time in seconds."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Immutable. The unique identifier of the deal. Auto-generated by the server when a deal is created. Format: buyers/{accountId}/proposals/{proposalId}/deals/{dealId}"""  
    preferred_deal_terms: Optional[shared_preferreddealterms.PreferredDealTerms] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preferredDealTerms'), 'exclude': lambda f: f is None }})
    r"""Pricing terms for Preferred Deals."""  
    private_auction_terms: Optional[shared_privateauctionterms.PrivateAuctionTerms] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privateAuctionTerms'), 'exclude': lambda f: f is None }})
    r"""Pricing terms for Private Auctions."""  
    programmatic_guaranteed_terms: Optional[shared_programmaticguaranteedterms.ProgrammaticGuaranteedTerms] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('programmaticGuaranteedTerms'), 'exclude': lambda f: f is None }})
    r"""Pricing terms for Programmatic Guaranteed Deals."""  
    proposal_revision: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('proposalRevision'), 'exclude': lambda f: f is None }})
    r"""Output only. The revision number for the proposal and is the same value as proposal.proposal_revision. Each update to deal causes the proposal revision number to auto-increment. The buyer keeps track of the last revision number they know of and pass it in when making an update. If the head revision number on the server has since incremented, then an ABORTED error is returned during the update operation to let the buyer know that a subsequent update was made."""  
    publisher_profile: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publisherProfile'), 'exclude': lambda f: f is None }})
    r"""Immutable. Reference to the seller on the deal. Format: `buyers/{buyerAccountId}/publisherProfiles/{publisherProfileId}`"""  
    seller_time_zone: Optional[shared_timezone.TimeZone] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sellerTimeZone'), 'exclude': lambda f: f is None }})
    r"""Represents a time zone from the [IANA Time Zone Database](https://www.iana.org/time-zones)."""  
    targeting: Optional[shared_marketplacetargeting.MarketplaceTargeting] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targeting'), 'exclude': lambda f: f is None }})
    r"""Targeting represents different criteria that can be used to target inventory. For example, they can choose to target inventory only if the user is in the US. Multiple types of targeting are always applied as a logical AND, unless noted otherwise."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The time when the deal was last updated."""  
    