// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

type GETListsFormatSecurity struct {
	APIKey shared.SchemeAPIKey `security:"scheme,type=apiKey,subtype=query"`
}

// GETListsFormatFormatEnum
type GETListsFormatFormatEnum string

const (
	GETListsFormatFormatEnumJSON  GETListsFormatFormatEnum = "json"
	GETListsFormatFormatEnumJsonp GETListsFormatFormatEnum = "jsonp"
)

func (e *GETListsFormatFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "json":
		fallthrough
	case "jsonp":
		*e = GETListsFormatFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETListsFormatFormatEnum: %s", s)
	}
}

type GETListsFormatPathParams struct {
	Format GETListsFormatFormatEnum `pathParam:"style=simple,explode=false,name=format"`
}

// GETListsFormatSortOrderEnum - Sets the sort order of the result set
type GETListsFormatSortOrderEnum string

const (
	GETListsFormatSortOrderEnumAsc  GETListsFormatSortOrderEnum = "ASC"
	GETListsFormatSortOrderEnumDesc GETListsFormatSortOrderEnum = "DESC"
)

func (e *GETListsFormatSortOrderEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ASC":
		fallthrough
	case "DESC":
		*e = GETListsFormatSortOrderEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETListsFormatSortOrderEnum: %s", s)
	}
}

type GETListsFormatQueryParams struct {
	// YYYY-MM-DD
	//
	// The week-ending date for the sales reflected on list-name. Times best-seller lists are compiled using available book sale data. The bestsellers-date may be significantly earlier than published-date. For additional information, see the explanation at the bottom of any best-seller list page on NYTimes.com (example: Hardcover Fiction, published Dec. 5 but reflecting sales to Nov. 29).
	BestsellersDate *time.Time `queryParam:"style=form,explode=true,name=bestsellers-date"`
	// YYYY-MM-DD  The date the best-seller list was published on NYTimes.com (compare bestsellers-date)
	Date *string `queryParam:"style=form,explode=true,name=date"`
	// International Standard Book Number, 10 or 13 digits
	Isbn *string `queryParam:"style=form,explode=true,name=isbn"`
	// The name of the Times best-seller list. To get valid values, use a list names request.
	//
	// Be sure to replace spaces with hyphens (e.g., e-book-fiction or hardcover-fiction, not E-Book Fiction or Hardcover Fiction). (The parameter is not case sensitive.)
	List *string `queryParam:"style=form,explode=true,name=list"`
	// Sets the starting point of the result set
	Offset *int64 `queryParam:"style=form,explode=true,name=offset"`
	// YYYY-MM-DD
	//
	// The date the best-seller list was published on NYTimes.com (compare bestsellers-date)
	PublishedDate *string `queryParam:"style=form,explode=true,name=published-date"`
	// The rank of the best seller on list-name as of bestsellers-date
	Rank *int64 `queryParam:"style=form,explode=true,name=rank"`
	// The rank of the best seller on list-name one week prior to bestsellers-date
	RankLastWeek *int64 `queryParam:"style=form,explode=true,name=rank-last-week"`
	// Sets the sort order of the result set
	SortOrder *GETListsFormatSortOrderEnum `queryParam:"style=form,explode=true,name=sort-order"`
	// The number of weeks that the best seller has been on list-name, as of bestsellers-date
	WeeksOnList *int64 `queryParam:"style=form,explode=true,name=weeks-on-list"`
}

type GETListsFormatRequest struct {
	PathParams  GETListsFormatPathParams
	QueryParams GETListsFormatQueryParams
	Security    GETListsFormatSecurity
}

type GETListsFormat200ApplicationJSONResultsBookDetails struct {
	AgeGroup        *string `json:"age_group,omitempty"`
	Author          *string `json:"author,omitempty"`
	Contributor     *string `json:"contributor,omitempty"`
	ContributorNote *string `json:"contributor_note,omitempty"`
	Description     *string `json:"description,omitempty"`
	Price           *int64  `json:"price,omitempty"`
	PrimaryIsbn10   *string `json:"primary_isbn10,omitempty"`
	PrimaryIsbn13   *string `json:"primary_isbn13,omitempty"`
	Publisher       *string `json:"publisher,omitempty"`
	Title           *string `json:"title,omitempty"`
}

type GETListsFormat200ApplicationJSONResultsIsbns struct {
	Isbn10 *string `json:"isbn10,omitempty"`
	Isbn13 *string `json:"isbn13,omitempty"`
}

type GETListsFormat200ApplicationJSONResultsReviews struct {
	ArticleChapterLink *string `json:"article_chapter_link,omitempty"`
	BookReviewLink     *string `json:"book_review_link,omitempty"`
	FirstChapterLink   *string `json:"first_chapter_link,omitempty"`
	SundayReviewLink   *string `json:"sunday_review_link,omitempty"`
}

type GETListsFormat200ApplicationJSONResults struct {
	AmazonProductURL *string                                              `json:"amazon_product_url,omitempty"`
	Asterisk         *int64                                               `json:"asterisk,omitempty"`
	BestsellersDate  *string                                              `json:"bestsellers_date,omitempty"`
	BookDetails      []GETListsFormat200ApplicationJSONResultsBookDetails `json:"book_details,omitempty"`
	Dagger           *int64                                               `json:"dagger,omitempty"`
	DisplayName      *string                                              `json:"display_name,omitempty"`
	Isbns            []GETListsFormat200ApplicationJSONResultsIsbns       `json:"isbns,omitempty"`
	ListName         *string                                              `json:"list_name,omitempty"`
	PublishedDate    *string                                              `json:"published_date,omitempty"`
	Rank             *int64                                               `json:"rank,omitempty"`
	RankLastWeek     *int64                                               `json:"rank_last_week,omitempty"`
	Reviews          []GETListsFormat200ApplicationJSONResultsReviews     `json:"reviews,omitempty"`
	WeeksOnList      *int64                                               `json:"weeks_on_list,omitempty"`
}

type GETListsFormat200ApplicationJSON struct {
	Copyright    *string                                   `json:"copyright,omitempty"`
	LastModified *string                                   `json:"last_modified,omitempty"`
	NumResults   *int64                                    `json:"num_results,omitempty"`
	Results      []GETListsFormat200ApplicationJSONResults `json:"results,omitempty"`
	Status       *string                                   `json:"status,omitempty"`
}

type GETListsFormatResponse struct {
	ContentType                            string
	GETListsFormat200ApplicationJSONObject *GETListsFormat200ApplicationJSON
	StatusCode                             int
	RawResponse                            *http.Response
}
