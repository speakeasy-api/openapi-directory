/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class GetChannels200ApplicationJSONChannels {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("channels_settings")
    public GetChannels200ApplicationJSONChannelsChannelsSettings channelsSettings;
    public GetChannels200ApplicationJSONChannels withChannelsSettings(GetChannels200ApplicationJSONChannelsChannelsSettings channelsSettings) {
        this.channelsSettings = channelsSettings;
        return this;
    }
    
    /**
     * Channel ID: Unique identifier of the Channel.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public GetChannels200ApplicationJSONChannels withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Name of the channel.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public GetChannels200ApplicationJSONChannels withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Type of the channel. The value can be one of the following:&lt;br&gt;
     * `1`: **Private channel.** In this type of channel, members must be invited to join a channel.&lt;br&gt;
     * `2`: **Private channel with users that belong to the same Zoom account**. Members in this channel should be invited and the members should be from the same organization.&lt;br&gt;
     * `3`: **Public channel.** Anyone can search for this channel and join the channel. External members cannot be invited.&lt;br&gt;
     * `4`: **New chat**. This is an instant channel which can be created by adding members to a new chat.&lt;br&gt;
     * `5`: **Public channel**, similar to above, except members can invite members of other accounts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public Long type;
    public GetChannels200ApplicationJSONChannels withType(Long type) {
        this.type = type;
        return this;
    }
    
}
