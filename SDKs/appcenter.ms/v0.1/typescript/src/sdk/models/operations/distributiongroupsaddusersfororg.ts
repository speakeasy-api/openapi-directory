/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class DistributionGroupsAddUsersForOrgSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=X-API-Token",
  })
  apiToken: string;
}

/**
 * list of user email addresses that should get added as members to the specified group
 */
export class DistributionGroupsAddUsersForOrgRequestBody extends SpeakeasyBase {
  /**
   * The list of emails of the users
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user_emails" })
  userEmails?: string[];
}

export class DistributionGroupsAddUsersForOrgRequest extends SpeakeasyBase {
  /**
   * list of user email addresses that should get added as members to the specified group
   */
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: DistributionGroupsAddUsersForOrgRequestBody;

  /**
   * The name of the distribution group
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=distribution_group_name",
  })
  distributionGroupName: string;

  /**
   * The organization's name
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=org_name",
  })
  orgName: string;
}

export enum DistributionGroupsAddUsersForOrgDefaultApplicationJSONErrorCodeEnum {
  BadRequest = "BadRequest",
  Conflict = "Conflict",
  NotAcceptable = "NotAcceptable",
  NotFound = "NotFound",
  InternalServerError = "InternalServerError",
  Unauthorized = "Unauthorized",
  TooManyRequests = "TooManyRequests",
}

export class DistributionGroupsAddUsersForOrgDefaultApplicationJSONError extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: DistributionGroupsAddUsersForOrgDefaultApplicationJSONErrorCodeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * Error
 */
export class DistributionGroupsAddUsersForOrgDefaultApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  @Type(() => DistributionGroupsAddUsersForOrgDefaultApplicationJSONError)
  error: DistributionGroupsAddUsersForOrgDefaultApplicationJSONError;
}

export class DistributionGroupsAddUsersForOrg200ApplicationJSON extends SpeakeasyBase {
  /**
   * The code of the result
   */
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code?: string;

  /**
   * Whether the has accepted the invite. Available when an invite is pending, and the value will be "true".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "invite_pending" })
  invitePending?: boolean;

  /**
   * The message of the result
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message?: string;

  /**
   * The status code of the result
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: number;

  /**
   * The email of the user
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user_email" })
  userEmail?: string;
}

export class DistributionGroupsAddUsersForOrgResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Success
   */
  @SpeakeasyMetadata({
    elemType: DistributionGroupsAddUsersForOrg200ApplicationJSON,
  })
  distributionGroupsAddUsersForOrg200ApplicationJSONObjects?: DistributionGroupsAddUsersForOrg200ApplicationJSON[];

  /**
   * Error
   */
  @SpeakeasyMetadata()
  distributionGroupsAddUsersForOrgDefaultApplicationJSONObject?: DistributionGroupsAddUsersForOrgDefaultApplicationJSON;
}
