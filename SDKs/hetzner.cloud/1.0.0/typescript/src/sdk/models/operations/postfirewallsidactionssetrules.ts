/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Select traffic direction on which rule should be applied. Use `source_ips` for direction `in` and `destination_ips` for direction `out`.
 */
export enum PostFirewallsIdActionsSetRulesSetRulesRequestRuleDirectionEnum {
  In = "in",
  Out = "out",
}

/**
 * Type of traffic to allow
 */
export enum PostFirewallsIdActionsSetRulesSetRulesRequestRuleProtocolEnum {
  Tcp = "tcp",
  Udp = "udp",
  Icmp = "icmp",
  Esp = "esp",
  Gre = "gre",
}

export class PostFirewallsIdActionsSetRulesSetRulesRequestRule extends SpeakeasyBase {
  /**
   * Description of the Rule
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * List of permitted IPv4/IPv6 addresses in CIDR notation. Use `0.0.0.0/0` to allow all IPv4 addresses and `::/0` to allow all IPv6 addresses. You can specify 100 CIDRs at most.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destination_ips" })
  destinationIps?: string[];

  /**
   * Select traffic direction on which rule should be applied. Use `source_ips` for direction `in` and `destination_ips` for direction `out`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "direction" })
  direction: PostFirewallsIdActionsSetRulesSetRulesRequestRuleDirectionEnum;

  /**
   * Port or port range to which traffic will be allowed, only applicable for protocols TCP and UDP. A port range can be specified by separating two ports with a dash, e.g `1024-5000`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "port" })
  port?: string;

  /**
   * Type of traffic to allow
   */
  @SpeakeasyMetadata()
  @Expose({ name: "protocol" })
  protocol: PostFirewallsIdActionsSetRulesSetRulesRequestRuleProtocolEnum;

  /**
   * List of permitted IPv4/IPv6 addresses in CIDR notation. Use `0.0.0.0/0` to allow all IPv4 addresses and `::/0` to allow all IPv6 addresses. You can specify 100 CIDRs at most.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "source_ips" })
  sourceIps?: string[];
}

export class PostFirewallsIdActionsSetRulesSetRulesRequest extends SpeakeasyBase {
  /**
   * Array of rules
   */
  @SpeakeasyMetadata({
    elemType: PostFirewallsIdActionsSetRulesSetRulesRequestRule,
  })
  @Expose({ name: "rules" })
  @Type(() => PostFirewallsIdActionsSetRulesSetRulesRequestRule)
  rules: PostFirewallsIdActionsSetRulesSetRulesRequestRule[];
}

export class PostFirewallsIdActionsSetRulesRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: PostFirewallsIdActionsSetRulesSetRulesRequest;

  /**
   * ID of the Firewall
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=id" })
  id: number;
}

/**
 * Error message for the Action if error occurred, otherwise null
 */
export class PostFirewallsIdActionsSetRulesActionsResponseActionError extends SpeakeasyBase {
  /**
   * Fixed machine readable code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: string;

  /**
   * Humanized error message
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

export class PostFirewallsIdActionsSetRulesActionsResponseActionResources extends SpeakeasyBase {
  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Type of resource referenced
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;
}

/**
 * Status of the Action
 */
export enum PostFirewallsIdActionsSetRulesActionsResponseActionStatusEnum {
  Success = "success",
  Running = "running",
  Error = "error",
}

export class PostFirewallsIdActionsSetRulesActionsResponseAction extends SpeakeasyBase {
  /**
   * Command executed in the Action
   */
  @SpeakeasyMetadata()
  @Expose({ name: "command" })
  command: string;

  /**
   * Error message for the Action if error occurred, otherwise null
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  @Type(() => PostFirewallsIdActionsSetRulesActionsResponseActionError)
  error: PostFirewallsIdActionsSetRulesActionsResponseActionError;

  /**
   * Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "finished" })
  finished: string;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Progress of Action in percent
   */
  @SpeakeasyMetadata()
  @Expose({ name: "progress" })
  progress: number;

  /**
   * Resources the Action relates to
   */
  @SpeakeasyMetadata({
    elemType: PostFirewallsIdActionsSetRulesActionsResponseActionResources,
  })
  @Expose({ name: "resources" })
  @Type(() => PostFirewallsIdActionsSetRulesActionsResponseActionResources)
  resources: PostFirewallsIdActionsSetRulesActionsResponseActionResources[];

  /**
   * Point in time when the Action was started (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "started" })
  started: string;

  /**
   * Status of the Action
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: PostFirewallsIdActionsSetRulesActionsResponseActionStatusEnum;
}

export class PostFirewallsIdActionsSetRulesActionsResponseMetaPagination extends SpeakeasyBase {
  /**
   * ID of the last page available. Can be null if the current page is the last one.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_page" })
  lastPage: number;

  /**
   * ID of the next page. Can be null if the current page is the last one.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "next_page" })
  nextPage: number;

  /**
   * Current page number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "page" })
  page: number;

  /**
   * Maximum number of items shown per page in the response
   */
  @SpeakeasyMetadata()
  @Expose({ name: "per_page" })
  perPage: number;

  /**
   * ID of the previous page. Can be null if the current page is the first one.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "previous_page" })
  previousPage: number;

  /**
   * The total number of entries that exist in the database for this query. Nullable if unknown.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_entries" })
  totalEntries: number;
}

export class PostFirewallsIdActionsSetRulesActionsResponseMeta extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "pagination" })
  @Type(() => PostFirewallsIdActionsSetRulesActionsResponseMetaPagination)
  pagination: PostFirewallsIdActionsSetRulesActionsResponseMetaPagination;
}

/**
 * The `action` key contains one `set_firewall_rules` Action plus one `apply_firewall` Action per resource where the Firewall is active
 */
export class PostFirewallsIdActionsSetRulesActionsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: PostFirewallsIdActionsSetRulesActionsResponseAction,
  })
  @Expose({ name: "actions" })
  @Type(() => PostFirewallsIdActionsSetRulesActionsResponseAction)
  actions: PostFirewallsIdActionsSetRulesActionsResponseAction[];

  @SpeakeasyMetadata()
  @Expose({ name: "meta" })
  @Type(() => PostFirewallsIdActionsSetRulesActionsResponseMeta)
  meta?: PostFirewallsIdActionsSetRulesActionsResponseMeta;
}

export class PostFirewallsIdActionsSetRulesResponse extends SpeakeasyBase {
  /**
   * The `action` key contains one `set_firewall_rules` Action plus one `apply_firewall` Action per resource where the Firewall is active
   */
  @SpeakeasyMetadata()
  actionsResponse?: PostFirewallsIdActionsSetRulesActionsResponse;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
