// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// MessageStatusMessengerChannelEnum - The channel sending to.
type MessageStatusMessengerChannelEnum string

const (
	MessageStatusMessengerChannelEnumMessenger MessageStatusMessengerChannelEnum = "messenger"
)

func (e MessageStatusMessengerChannelEnum) ToPointer() *MessageStatusMessengerChannelEnum {
	return &e
}

func (e *MessageStatusMessengerChannelEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "messenger":
		*e = MessageStatusMessengerChannelEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MessageStatusMessengerChannelEnum: %v", v)
	}
}

// MessageStatusMessengerError - If the message encountered a problem a descriptive error will be supplied in this object.
type MessageStatusMessengerError struct {
	// Text describing the error. See [our errors list](https://developer.nexmo.com/api-errors/messages-olympus) for a list of possible errors
	Detail *string `json:"detail,omitempty"`
	// The record id of this error's occurrence.
	Instance *string `json:"instance,omitempty"`
	// The error code encountered when sending the message. See [our errors list](https://developer.nexmo.com/api-errors/messages-olympus) for a list of possible errors
	Title *string `json:"title,omitempty"`
	// The type of error encountered, follow URL for more details
	Type *string `json:"type,omitempty"`
}

type MessageStatusMessengerStatusEnum string

const (
	MessageStatusMessengerStatusEnumSubmitted     MessageStatusMessengerStatusEnum = "submitted"
	MessageStatusMessengerStatusEnumDelivered     MessageStatusMessengerStatusEnum = "delivered"
	MessageStatusMessengerStatusEnumRejected      MessageStatusMessengerStatusEnum = "rejected"
	MessageStatusMessengerStatusEnumUndeliverable MessageStatusMessengerStatusEnum = "undeliverable"
	MessageStatusMessengerStatusEnumRead          MessageStatusMessengerStatusEnum = "read"
)

func (e MessageStatusMessengerStatusEnum) ToPointer() *MessageStatusMessengerStatusEnum {
	return &e
}

func (e *MessageStatusMessengerStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "submitted":
		fallthrough
	case "delivered":
		fallthrough
	case "rejected":
		fallthrough
	case "undeliverable":
		fallthrough
	case "read":
		*e = MessageStatusMessengerStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MessageStatusMessengerStatusEnum: %v", v)
	}
}

// MessageStatusMessengerUsageCurrencyEnum - The charge currency in ISO 4217 format.
type MessageStatusMessengerUsageCurrencyEnum string

const (
	MessageStatusMessengerUsageCurrencyEnumEur MessageStatusMessengerUsageCurrencyEnum = "EUR"
)

func (e MessageStatusMessengerUsageCurrencyEnum) ToPointer() *MessageStatusMessengerUsageCurrencyEnum {
	return &e
}

func (e *MessageStatusMessengerUsageCurrencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EUR":
		*e = MessageStatusMessengerUsageCurrencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MessageStatusMessengerUsageCurrencyEnum: %v", v)
	}
}

type MessageStatusMessengerUsage struct {
	// The charge currency in ISO 4217 format.
	Currency *MessageStatusMessengerUsageCurrencyEnum `json:"currency,omitempty"`
	// The charge amount as a stringified number.
	Price *string `json:"price,omitempty"`
}

// MessageStatusMessenger - Messenger
type MessageStatusMessenger struct {
	// The channel sending to.
	Channel MessageStatusMessengerChannelEnum `json:"channel"`
	// Client reference of up to 100 characters. The reference will be present in every message status.
	ClientRef *string `json:"client_ref,omitempty"`
	// If the message encountered a problem a descriptive error will be supplied in this object.
	Error *MessageStatusMessengerError `json:"error,omitempty"`
	// The ID of the message sender
	//
	From string `json:"from"`
	// The UUID of the message
	MessageUUID string                           `json:"message_uuid"`
	Status      MessageStatusMessengerStatusEnum `json:"status"`
	// The datetime of when the event occurred, in `ISO 8601` format.
	Timestamp string `json:"timestamp"`
	// The ID of the message recipient
	//
	To    string                       `json:"to"`
	Usage *MessageStatusMessengerUsage `json:"usage,omitempty"`
}
