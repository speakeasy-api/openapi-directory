/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Bookings {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * CancelBooking
   *
   * @remarks
   * Cancels an existing booking.
   */
  cancelBooking(
    req: operations.CancelBookingRequest,
    security: operations.CancelBookingSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CancelBookingResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CancelBookingRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/bookings/{booking_id}/cancel",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "cancelBookingRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CancelBookingSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CancelBookingResponse =
        new operations.CancelBookingResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cancelBookingResponse = utils.objectToClass(
              httpRes?.data,
              shared.CancelBookingResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * CreateBooking
   *
   * @remarks
   * Creates a booking.
   */
  createBooking(
    req: shared.CreateBookingRequest,
    security: operations.CreateBookingSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateBookingResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.CreateBookingRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/bookings";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateBookingSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateBookingResponse =
        new operations.CreateBookingResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createBookingResponse = utils.objectToClass(
              httpRes?.data,
              shared.CreateBookingResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * ListTeamMemberBookingProfiles
   *
   * @remarks
   * Lists booking profiles for team members.
   */
  listTeamMemberBookingProfiles(
    req: operations.ListTeamMemberBookingProfilesRequest,
    security: operations.ListTeamMemberBookingProfilesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ListTeamMemberBookingProfilesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListTeamMemberBookingProfilesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v2/bookings/team-member-booking-profiles";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ListTeamMemberBookingProfilesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListTeamMemberBookingProfilesResponse =
        new operations.ListTeamMemberBookingProfilesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listTeamMemberBookingProfilesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListTeamMemberBookingProfilesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * RetrieveBooking
   *
   * @remarks
   * Retrieves a booking.
   */
  retrieveBooking(
    req: operations.RetrieveBookingRequest,
    security: operations.RetrieveBookingSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RetrieveBookingResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RetrieveBookingRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/bookings/{booking_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RetrieveBookingSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RetrieveBookingResponse =
        new operations.RetrieveBookingResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retrieveBookingResponse = utils.objectToClass(
              httpRes?.data,
              shared.RetrieveBookingResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * RetrieveBusinessBookingProfile
   *
   * @remarks
   * Retrieves a seller's booking profile.
   */
  retrieveBusinessBookingProfile(
    config?: AxiosRequestConfig
  ): Promise<operations.RetrieveBusinessBookingProfileResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v2/bookings/business-booking-profile";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RetrieveBusinessBookingProfileResponse =
        new operations.RetrieveBusinessBookingProfileResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retrieveBusinessBookingProfileResponse = utils.objectToClass(
              httpRes?.data,
              shared.RetrieveBusinessBookingProfileResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * RetrieveTeamMemberBookingProfile
   *
   * @remarks
   * Retrieves a team member's booking profile.
   */
  retrieveTeamMemberBookingProfile(
    req: operations.RetrieveTeamMemberBookingProfileRequest,
    security: operations.RetrieveTeamMemberBookingProfileSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RetrieveTeamMemberBookingProfileResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RetrieveTeamMemberBookingProfileRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/bookings/team-member-booking-profiles/{team_member_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RetrieveTeamMemberBookingProfileSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RetrieveTeamMemberBookingProfileResponse =
        new operations.RetrieveTeamMemberBookingProfileResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retrieveTeamMemberBookingProfileResponse = utils.objectToClass(
              httpRes?.data,
              shared.RetrieveTeamMemberBookingProfileResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * SearchAvailability
   *
   * @remarks
   * Searches for availabilities for booking.
   */
  searchAvailability(
    req: shared.SearchAvailabilityRequest,
    security: operations.SearchAvailabilitySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SearchAvailabilityResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.SearchAvailabilityRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v2/bookings/availability/search";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SearchAvailabilitySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SearchAvailabilityResponse =
        new operations.SearchAvailabilityResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.searchAvailabilityResponse = utils.objectToClass(
              httpRes?.data,
              shared.SearchAvailabilityResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * UpdateBooking
   *
   * @remarks
   * Updates a booking.
   */
  updateBooking(
    req: operations.UpdateBookingRequest,
    security: operations.UpdateBookingSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateBookingResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateBookingRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/bookings/{booking_id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "updateBookingRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdateBookingSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateBookingResponse =
        new operations.UpdateBookingResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateBookingResponse = utils.objectToClass(
              httpRes?.data,
              shared.UpdateBookingResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
