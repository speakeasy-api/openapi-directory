"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import algorithmspecification as shared_algorithmspecification
from ..shared import deviceconfig as shared_deviceconfig
from ..shared import inputfileconfig as shared_inputfileconfig
from ..shared import instanceconfig as shared_instanceconfig
from ..shared import jobcheckpointconfig as shared_jobcheckpointconfig
from ..shared import jobeventdetails as shared_jobeventdetails
from ..shared import joboutputdataconfig as shared_joboutputdataconfig
from ..shared import jobprimarystatus_enum as shared_jobprimarystatus_enum
from ..shared import jobstoppingcondition as shared_jobstoppingcondition
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetJobResponse:
    r"""Success"""
    
    algorithm_specification: shared_algorithmspecification.AlgorithmSpecification = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('algorithmSpecification') }})  
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdAt'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    instance_config: shared_instanceconfig.InstanceConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instanceConfig') }})  
    job_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobArn') }})  
    job_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobName') }})  
    output_data_config: shared_joboutputdataconfig.JobOutputDataConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outputDataConfig') }})  
    role_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roleArn') }})  
    status: shared_jobprimarystatus_enum.JobPrimaryStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    billable_duration: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billableDuration'), 'exclude': lambda f: f is None }})  
    checkpoint_config: Optional[shared_jobcheckpointconfig.JobCheckpointConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('checkpointConfig'), 'exclude': lambda f: f is None }})  
    device_config: Optional[shared_deviceconfig.DeviceConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceConfig'), 'exclude': lambda f: f is None }})  
    ended_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    events: Optional[list[shared_jobeventdetails.JobEventDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('events'), 'exclude': lambda f: f is None }})  
    failure_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failureReason'), 'exclude': lambda f: f is None }})  
    hyper_parameters: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hyperParameters'), 'exclude': lambda f: f is None }})  
    input_data_config: Optional[list[shared_inputfileconfig.InputFileConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inputDataConfig'), 'exclude': lambda f: f is None }})  
    started_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    stopping_condition: Optional[shared_jobstoppingcondition.JobStoppingCondition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stoppingCondition'), 'exclude': lambda f: f is None }})  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    