/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Technische Sicherheitseinrichtung - use in context of strom-quittungen to get digitaly signed receipts.
 */
export class Tse {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Retrieve TSE (Technische Sicherheitseinrichtung) Data for a given receipt (Strom-Quittung).
   *
   * @remarks
   * Allows to retrieve all relevant data assiciated to a TSE service call. E.q. Input parameters, public key and signature.
   *
   */
  quittungTSE(
    req: operations.QuittungTSERequest,
    config?: AxiosRequestConfig
  ): Promise<operations.QuittungTSEResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.QuittungTSERequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/quittung/tse";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.QuittungTSEResponse =
        new operations.QuittungTSEResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.quittungTSE200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.QuittungTse200ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve TSE (Technische Sicherheitseinrichtung) raw data  only for a given receipt (Strom-Quittung).
   *
   * @remarks
   * Allows to retrieve input string for a signing process.
   *
   */
  quittungTSEData(
    req: operations.QuittungTSEDataRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.QuittungTSEDataResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.QuittungTSEDataRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/quittung/tsedata";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.QuittungTSEDataResponse =
        new operations.QuittungTSEDataResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve TSE (Technische Sicherheitseinrichtung) Signature only for a given receipt (Strom-Quittung).
   *
   * @remarks
   * Allows to retrieve digital signature for a given receipt.
   *
   */
  quittungTSEsignature(
    req: operations.QuittungTSEsignatureRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.QuittungTSEsignatureResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.QuittungTSEsignatureRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/quittung/tsesignature";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.QuittungTSEsignatureResponse =
        new operations.QuittungTSEsignatureResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve Zugferd XML for a given receipt (Strom-Quittung).
   *
   * @remarks
   * Allows to retrieve XML of the zugferd invoice.
   *
   */
  quittungZugferd(
    req: operations.QuittungZugferdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.QuittungZugferdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.QuittungZugferdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/quittung/zugferd";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.QuittungZugferdResponse =
        new operations.QuittungZugferdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }
}
