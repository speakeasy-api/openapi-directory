"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import beezup_common_catalogcategoryfilter as shared_beezup_common_catalogcategoryfilter
from ..shared import beezup_common_channelcategoryfilter as shared_beezup_common_channelcategoryfilter
from ..shared import channelcatalogproductfilters as shared_channelcatalogproductfilters
from ..shared import productsetvisibilitycriteria as shared_productsetvisibilitycriteria
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetChannelCatalogProductInfoListRequest:
    r"""The channel catalog product list filter"""
    
    criteria: shared_productsetvisibilitycriteria.ProductSetVisibilityCriteria = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('criteria') }})  
    page_number: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pageNumber') }})  
    page_size: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pageSize') }})  
    catalog_category_filter: Optional[shared_beezup_common_catalogcategoryfilter.BeezUPCommonCatalogCategoryFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('catalogCategoryFilter'), 'exclude': lambda f: f is None }})  
    channel_category_filter: Optional[shared_beezup_common_channelcategoryfilter.BeezUPCommonChannelCategoryFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelCategoryFilter'), 'exclude': lambda f: f is None }})  
    overridden: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('overridden'), 'exclude': lambda f: f is None }})
    r"""Search overridden products. If null the filter will not be taken in account."""  
    product_filters: Optional[shared_channelcatalogproductfilters.ChannelCatalogProductFilters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productFilters'), 'exclude': lambda f: f is None }})  
    