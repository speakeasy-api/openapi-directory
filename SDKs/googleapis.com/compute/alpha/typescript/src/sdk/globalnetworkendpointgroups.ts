/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class GlobalNetworkEndpointGroups {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Attach a network endpoint to the specified network endpoint group.
   */
  computeGlobalNetworkEndpointGroupsAttachNetworkEndpoints(
    req: operations.ComputeGlobalNetworkEndpointGroupsAttachNetworkEndpointsRequest,
    security: operations.ComputeGlobalNetworkEndpointGroupsAttachNetworkEndpointsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeGlobalNetworkEndpointGroupsAttachNetworkEndpointsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ComputeGlobalNetworkEndpointGroupsAttachNetworkEndpointsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}/attachNetworkEndpoints",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "globalNetworkEndpointGroupsAttachEndpointsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ComputeGlobalNetworkEndpointGroupsAttachNetworkEndpointsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeGlobalNetworkEndpointGroupsAttachNetworkEndpointsResponse =
        new operations.ComputeGlobalNetworkEndpointGroupsAttachNetworkEndpointsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes the specified network endpoint group.Note that the NEG cannot be deleted if there are backend services referencing it.
   */
  computeGlobalNetworkEndpointGroupsDelete(
    req: operations.ComputeGlobalNetworkEndpointGroupsDeleteRequest,
    security: operations.ComputeGlobalNetworkEndpointGroupsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeGlobalNetworkEndpointGroupsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputeGlobalNetworkEndpointGroupsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ComputeGlobalNetworkEndpointGroupsDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeGlobalNetworkEndpointGroupsDeleteResponse =
        new operations.ComputeGlobalNetworkEndpointGroupsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Detach the network endpoint from the specified network endpoint group.
   */
  computeGlobalNetworkEndpointGroupsDetachNetworkEndpoints(
    req: operations.ComputeGlobalNetworkEndpointGroupsDetachNetworkEndpointsRequest,
    security: operations.ComputeGlobalNetworkEndpointGroupsDetachNetworkEndpointsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeGlobalNetworkEndpointGroupsDetachNetworkEndpointsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ComputeGlobalNetworkEndpointGroupsDetachNetworkEndpointsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}/detachNetworkEndpoints",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "globalNetworkEndpointGroupsDetachEndpointsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ComputeGlobalNetworkEndpointGroupsDetachNetworkEndpointsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeGlobalNetworkEndpointGroupsDetachNetworkEndpointsResponse =
        new operations.ComputeGlobalNetworkEndpointGroupsDetachNetworkEndpointsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the specified network endpoint group.
   */
  computeGlobalNetworkEndpointGroupsGet(
    req: operations.ComputeGlobalNetworkEndpointGroupsGetRequest,
    security: operations.ComputeGlobalNetworkEndpointGroupsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeGlobalNetworkEndpointGroupsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputeGlobalNetworkEndpointGroupsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ComputeGlobalNetworkEndpointGroupsGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeGlobalNetworkEndpointGroupsGetResponse =
        new operations.ComputeGlobalNetworkEndpointGroupsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.networkEndpointGroup = utils.objectToClass(
              httpRes?.data,
              shared.NetworkEndpointGroup
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a network endpoint group in the specified project using the parameters that are included in the request.
   */
  computeGlobalNetworkEndpointGroupsInsert(
    req: operations.ComputeGlobalNetworkEndpointGroupsInsertRequest,
    security: operations.ComputeGlobalNetworkEndpointGroupsInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeGlobalNetworkEndpointGroupsInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputeGlobalNetworkEndpointGroupsInsertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/global/networkEndpointGroups",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "networkEndpointGroup",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ComputeGlobalNetworkEndpointGroupsInsertSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeGlobalNetworkEndpointGroupsInsertResponse =
        new operations.ComputeGlobalNetworkEndpointGroupsInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves the list of network endpoint groups that are located in the specified project.
   */
  computeGlobalNetworkEndpointGroupsList(
    req: operations.ComputeGlobalNetworkEndpointGroupsListRequest,
    security: operations.ComputeGlobalNetworkEndpointGroupsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeGlobalNetworkEndpointGroupsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputeGlobalNetworkEndpointGroupsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/global/networkEndpointGroups",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ComputeGlobalNetworkEndpointGroupsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeGlobalNetworkEndpointGroupsListResponse =
        new operations.ComputeGlobalNetworkEndpointGroupsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.networkEndpointGroupList = utils.objectToClass(
              httpRes?.data,
              shared.NetworkEndpointGroupList
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists the network endpoints in the specified network endpoint group.
   */
  computeGlobalNetworkEndpointGroupsListNetworkEndpoints(
    req: operations.ComputeGlobalNetworkEndpointGroupsListNetworkEndpointsRequest,
    security: operations.ComputeGlobalNetworkEndpointGroupsListNetworkEndpointsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeGlobalNetworkEndpointGroupsListNetworkEndpointsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ComputeGlobalNetworkEndpointGroupsListNetworkEndpointsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}/listNetworkEndpoints",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ComputeGlobalNetworkEndpointGroupsListNetworkEndpointsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeGlobalNetworkEndpointGroupsListNetworkEndpointsResponse =
        new operations.ComputeGlobalNetworkEndpointGroupsListNetworkEndpointsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.networkEndpointGroupsListNetworkEndpoints = utils.objectToClass(
              httpRes?.data,
              shared.NetworkEndpointGroupsListNetworkEndpoints
            );
          }
          break;
      }

      return res;
    });
  }
}
