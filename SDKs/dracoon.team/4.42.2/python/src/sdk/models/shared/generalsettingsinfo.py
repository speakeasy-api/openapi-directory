"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import authtokenrestrictions as shared_authtokenrestrictions
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GeneralSettingsInfo:
    r"""General settings"""
    
    home_rooms_active: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('homeRoomsActive') }})
    r"""&#128640; Since v4.10.0
    
    Homerooms active
    """  
    subscription_plan: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriptionPlan') }})
    r"""&#128640; Since v4.30.0
    
    Subscription Plan
    """  
    auth_token_restrictions: Optional[shared_authtokenrestrictions.AuthTokenRestrictions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authTokenRestrictions'), 'exclude': lambda f: f is None }})
    r"""Auth token restrictions"""  
    crypto_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cryptoEnabled'), 'exclude': lambda f: f is None }})
    r"""Activation status of client-side encryption.
    
    Can only be enabled once; disabling is not possible.
    """  
    email_notification_button_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emailNotificationButtonEnabled'), 'exclude': lambda f: f is None }})
    r"""Enable email notification button"""  
    eula_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eulaEnabled'), 'exclude': lambda f: f is None }})
    r"""Each user has to confirm the EULA at first login."""  
    hide_login_input_fields: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hideLoginInputFields'), 'exclude': lambda f: f is None }})
    r"""&#128679; Deprecated since v4.42.0
    
    Defines if login fields should be hidden
    """  
    home_room_parent_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('homeRoomParentId'), 'exclude': lambda f: f is None }})
    r"""&#128640; Since v4.10.0
    
    Homeroom Parent ID
    """  
    media_server_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mediaServerEnabled'), 'exclude': lambda f: f is None }})
    r"""&#128679; Deprecated since v4.12.0
    
    Determines if the media server is enabled
    """  
    s3_tags_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('s3TagsEnabled'), 'exclude': lambda f: f is None }})
    r"""&#128640; Since v4.9.0
    
    Defines if S3 tags are enabled
    """  
    share_password_sms_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sharePasswordSmsEnabled'), 'exclude': lambda f: f is None }})
    r"""Allow sending of share passwords via SMS"""  
    use_s3_storage: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('useS3Storage'), 'exclude': lambda f: f is None }})
    r"""Defines if S3 is used as storage backend"""  
    weak_password_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('weakPasswordEnabled'), 'exclude': lambda f: f is None }})
    r"""&#128679; Deprecated since v4.14.0
    
    Allow weak password
    
    * A weak password has to fulfill the following criteria:
    
       * is at least 8 characters long
    
       * contains letters and numbers
    
    * A strong password has to fulfill the following criteria in addition:
    
       * contains at least one special character
    
       * contains upper and lower case characters
    
    Please use `GET /system/config/policies/passwords` API to get configured password policies.
    """  
    