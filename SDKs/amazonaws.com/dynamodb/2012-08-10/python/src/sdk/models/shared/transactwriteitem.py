"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import conditioncheck as shared_conditioncheck
from ..shared import delete as shared_delete
from ..shared import put as shared_put
from ..shared import update as shared_update
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TransactWriteItem:
    r"""A list of requests that can perform update, put, delete, or check operations on multiple items in one or more tables atomically."""
    
    condition_check: Optional[shared_conditioncheck.ConditionCheck] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConditionCheck'), 'exclude': lambda f: f is None }})  
    delete: Optional[shared_delete.Delete] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Delete'), 'exclude': lambda f: f is None }})  
    put: Optional[shared_put.Put] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Put'), 'exclude': lambda f: f is None }})  
    update: Optional[shared_update.Update] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Update'), 'exclude': lambda f: f is None }})  
    