<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - This is the public Twilio REST API.
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'https://routes.twilio.com',
	];
	
	public const FETCH_PHONE_NUMBER_SERVERS = [
		'https://routes.twilio.com',
	];
	
	public const FETCH_SIP_DOMAIN_SERVERS = [
		'https://routes.twilio.com',
	];
	
	public const FETCH_TRUNKS_SERVERS = [
		'https://routes.twilio.com',
	];
	
	public const UPDATE_PHONE_NUMBER_SERVERS = [
		'https://routes.twilio.com',
	];
	
	public const UPDATE_SIP_DOMAIN_SERVERS = [
		'https://routes.twilio.com',
	];
	
	public const UPDATE_TRUNKS_SERVERS = [
		'https://routes.twilio.com',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * Fetch the Inbound Processing Region assigned to a phone number.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchPhoneNumberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchPhoneNumberSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchPhoneNumberResponse
     */
	public function fetchPhoneNumber(
        \OpenAPI\OpenAPI\Models\Operations\FetchPhoneNumberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchPhoneNumberSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchPhoneNumberResponse
    {
        $baseUrl = SDK::FETCH_PHONE_NUMBER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/PhoneNumbers/{PhoneNumber}', \OpenAPI\OpenAPI\Models\Operations\FetchPhoneNumberRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchPhoneNumberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->routesV2PhoneNumber = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RoutesV2PhoneNumber', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchSipDomain
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSipDomainRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSipDomainSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchSipDomainResponse
     */
	public function fetchSipDomain(
        \OpenAPI\OpenAPI\Models\Operations\FetchSipDomainRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchSipDomainSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchSipDomainResponse
    {
        $baseUrl = SDK::FETCH_SIP_DOMAIN_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/SipDomains/{SipDomain}', \OpenAPI\OpenAPI\Models\Operations\FetchSipDomainRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchSipDomainResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->routesV2SipDomain = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RoutesV2SipDomain', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch the Inbound Processing Region assigned to a SIP Trunk.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchTrunksRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchTrunksSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchTrunksResponse
     */
	public function fetchTrunks(
        \OpenAPI\OpenAPI\Models\Operations\FetchTrunksRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchTrunksSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchTrunksResponse
    {
        $baseUrl = SDK::FETCH_TRUNKS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Trunks/{SipTrunkDomain}', \OpenAPI\OpenAPI\Models\Operations\FetchTrunksRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchTrunksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->routesV2Trunks = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RoutesV2Trunks', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Assign an Inbound Processing Region to a phone number.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatePhoneNumberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatePhoneNumberSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdatePhoneNumberResponse
     */
	public function updatePhoneNumber(
        \OpenAPI\OpenAPI\Models\Operations\UpdatePhoneNumberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdatePhoneNumberSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdatePhoneNumberResponse
    {
        $baseUrl = SDK::UPDATE_PHONE_NUMBER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/PhoneNumbers/{PhoneNumber}', \OpenAPI\OpenAPI\Models\Operations\UpdatePhoneNumberRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdatePhoneNumberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->routesV2PhoneNumber = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RoutesV2PhoneNumber', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateSipDomain
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSipDomainRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSipDomainSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSipDomainResponse
     */
	public function updateSipDomain(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSipDomainRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateSipDomainSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSipDomainResponse
    {
        $baseUrl = SDK::UPDATE_SIP_DOMAIN_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/SipDomains/{SipDomain}', \OpenAPI\OpenAPI\Models\Operations\UpdateSipDomainRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSipDomainResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->routesV2SipDomain = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RoutesV2SipDomain', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Assign an Inbound Processing Region to a SIP Trunk
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateTrunksRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateTrunksSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateTrunksResponse
     */
	public function updateTrunks(
        \OpenAPI\OpenAPI\Models\Operations\UpdateTrunksRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateTrunksSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateTrunksResponse
    {
        $baseUrl = SDK::UPDATE_TRUNKS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/Trunks/{SipTrunkDomain}', \OpenAPI\OpenAPI\Models\Operations\UpdateTrunksRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateTrunksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->routesV2Trunks = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RoutesV2Trunks', 'json');
            }
        }

        return $response;
    }
}