"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import member_state_enum as shared_member_state_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetuserConversationsRequest:
    
    user_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'user_id', 'style': 'simple', 'explode': False }})
    r"""User ID"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetuserConversations200ApplicationJSONTimestamp:
    
    created: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created'), 'exclude': lambda f: f is None }})
    r"""Timestamp"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetuserConversations200ApplicationJSON:
    
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display_name'), 'exclude': lambda f: f is None }})
    r"""The display name for the conversation. It does not have to be unique"""  
    href: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('href'), 'exclude': lambda f: f is None }})
    r"""A link towards a resources included in Conversation API"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The unique identifier for this conversation"""  
    image_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image_url'), 'exclude': lambda f: f is None }})
    r"""A link to an image for conversations' and users' avatars"""  
    member_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('member_id'), 'exclude': lambda f: f is None }})
    r"""Member ID"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Unique name for a conversation"""  
    sequence_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sequence_number'), 'exclude': lambda f: f is None }})
    r"""the id of the last event of the conversation (event's id is an incremental number"""  
    state: Optional[shared_member_state_enum.MemberStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""The state that the member is in. Possible values are `invited`, `joined`, `left`, or `unknown`"""  
    timestamp: Optional[GetuserConversations200ApplicationJSONTimestamp] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetuserConversationsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    getuser_conversations_200_application_json_objects: Optional[list[GetuserConversations200ApplicationJSON]] = dataclasses.field(default=None)
    r"""List user conversations"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    