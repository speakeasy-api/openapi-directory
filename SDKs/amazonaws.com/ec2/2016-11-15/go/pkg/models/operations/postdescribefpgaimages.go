// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTDescribeFpgaImagesActionEnum
type POSTDescribeFpgaImagesActionEnum string

const (
	POSTDescribeFpgaImagesActionEnumDescribeFpgaImages POSTDescribeFpgaImagesActionEnum = "DescribeFpgaImages"
)

func (e POSTDescribeFpgaImagesActionEnum) ToPointer() *POSTDescribeFpgaImagesActionEnum {
	return &e
}

func (e *POSTDescribeFpgaImagesActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DescribeFpgaImages":
		*e = POSTDescribeFpgaImagesActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTDescribeFpgaImagesActionEnum: %v", v)
	}
}

// POSTDescribeFpgaImagesVersionEnum
type POSTDescribeFpgaImagesVersionEnum string

const (
	POSTDescribeFpgaImagesVersionEnumTwoThousandAndSixteen1115 POSTDescribeFpgaImagesVersionEnum = "2016-11-15"
)

func (e POSTDescribeFpgaImagesVersionEnum) ToPointer() *POSTDescribeFpgaImagesVersionEnum {
	return &e
}

func (e *POSTDescribeFpgaImagesVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = POSTDescribeFpgaImagesVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTDescribeFpgaImagesVersionEnum: %v", v)
	}
}

type POSTDescribeFpgaImagesRequest struct {
	Action POSTDescribeFpgaImagesActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=MaxResults"`
	// Pagination token
	NextToken         *string                           `queryParam:"style=form,explode=true,name=NextToken"`
	RequestBody       []byte                            `request:"mediaType=text/xml"`
	Version           POSTDescribeFpgaImagesVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                           `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                           `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                           `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                           `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                           `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                           `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                           `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type POSTDescribeFpgaImagesResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
