/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class OauthAuthorizationsGetOrCreateAuthorizationForAppRequestBody extends SpeakeasyBase {
  /**
   * The OAuth app client secret for which to create the token.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "client_secret" })
  clientSecret: string;

  /**
   * A unique string to distinguish an authorization from others created for the same client ID and user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fingerprint" })
  fingerprint?: string;

  /**
   * A note to remind you what the OAuth token is for.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "note" })
  note?: string;

  /**
   * A URL to remind you what app the OAuth token is for.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "note_url" })
  noteUrl?: string;

  /**
   * A list of scopes that this authorization is in.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scopes" })
  scopes?: string[];
}

export class OauthAuthorizationsGetOrCreateAuthorizationForAppRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: OauthAuthorizationsGetOrCreateAuthorizationForAppRequestBody;

  /**
   * The client ID of the OAuth app.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=client_id",
  })
  clientId: string;
}

export class OauthAuthorizationsGetOrCreateAuthorizationForAppResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  headers?: Record<string, string[]>;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * if returning an existing token
   */
  @SpeakeasyMetadata()
  authorization?: shared.Authorization;

  /**
   * Requires authentication
   */
  @SpeakeasyMetadata()
  basicError?: shared.BasicError;

  /**
   * Validation failed, or the endpoint has been spammed.
   */
  @SpeakeasyMetadata()
  validationError?: shared.ValidationError;
}
