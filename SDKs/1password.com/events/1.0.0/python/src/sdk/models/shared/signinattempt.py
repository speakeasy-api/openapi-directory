"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import client as shared_client
from ..shared import details as shared_details
from ..shared import user as shared_user
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class SignInAttemptCategoryEnum(str, Enum):
    SUCCESS = 'success'
    CREDENTIALS_FAILED = 'credentials_failed'
    MFA_FAILED = 'mfa_failed'
    MODERN_VERSION_FAILED = 'modern_version_failed'
    FIREWALL_FAILED = 'firewall_failed'
    FIREWALL_REPORTED_SUCCESS = 'firewall_reported_success'

class SignInAttemptTypeEnum(str, Enum):
    CREDENTIALS_OK = 'credentials_ok'
    MFA_OK = 'mfa_ok'
    PASSWORD_SECRET_BAD = 'password_secret_bad'
    MFA_MISSING = 'mfa_missing'
    TOTP_DISABLED = 'totp_disabled'
    TOTP_BAD = 'totp_bad'
    TOTP_TIMEOUT = 'totp_timeout'
    U2F_DISABLED = 'u2f_disabled'
    U2F_BAD = 'u2f_bad'
    U2F_TIMOUT = 'u2f_timout'
    DUO_DISABLED = 'duo_disabled'
    DUO_BAD = 'duo_bad'
    DUO_TIMEOUT = 'duo_timeout'
    DUO_NATIVE_BAD = 'duo_native_bad'
    PLATFORM_SECRET_DISABLED = 'platform_secret_disabled'
    PLATFORM_SECRET_BAD = 'platform_secret_bad'
    PLATFORM_SECRET_PROXY = 'platform_secret_proxy'
    CODE_DISABLED = 'code_disabled'
    CODE_BAD = 'code_bad'
    CODE_TIMEOUT = 'code_timeout'
    IP_BLOCKED = 'ip_blocked'
    CONTINENT_BLOCKED = 'continent_blocked'
    COUNTRY_BLOCKED = 'country_blocked'
    ANONYMOUS_BLOCKED = 'anonymous_blocked'
    ALL_BLOCKED = 'all_blocked'
    MODERN_VERSION_MISSING = 'modern_version_missing'
    MODERN_VERSION_OLD = 'modern_version_old'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SignInAttempt:
    r"""A single sign-in attempt object"""
    
    category: Optional[SignInAttemptCategoryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})  
    client: Optional[shared_client.Client] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client'), 'exclude': lambda f: f is None }})
    r"""Metadata gathered about the client"""  
    country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country'), 'exclude': lambda f: f is None }})
    r"""Country ISO Code"""  
    details: Optional[shared_details.Details] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('details'), 'exclude': lambda f: f is None }})
    r"""Additional information about the sign-in attempt"""  
    session_uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('session_uuid'), 'exclude': lambda f: f is None }})  
    target_user: Optional[shared_user.User] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('target_user'), 'exclude': lambda f: f is None }})
    r"""User object"""  
    timestamp: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    type: Optional[SignInAttemptTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uuid'), 'exclude': lambda f: f is None }})  
    