<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class GetAuditCaseRequest
{
    /**
     * 
     * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
     * 
     * 
     * @var string $apiKey
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=api_key')]
    public string $apiKey;
    
    /**
     * 
     * Primary/foreign key for audit tables
     * 
     * 
     * @var ?array<string> $auditCaseId
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=audit_case_id')]
    public ?array $auditCaseId = null;
    
    /**
     * 
     * The audit issue. Each subcategory has an unique ID
     * 
     * 
     * @var ?array<int> $auditId
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=audit_id')]
    public ?array $auditId = null;
    
    /**
     * 
     * A unique identifier assigned to each candidate registered with the FEC.
     * If a person runs for several offices, that person will have separate candidate IDs for each office.
     * 
     * 
     * @var ?array<string> $candidateId
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=candidate_id')]
    public ?array $candidateId = null;
    
    /**
     * Type of committee:
     * 
     *         - H or S - Congressional
     *         - P - Presidential
     *         - X or Y or Z - Party
     *         - N or Q - PAC
     *         - I - Independent expenditure
     *         - O - Super PAC 
     * 
     * 
     * @var ?string $committeeDesignation
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=committee_designation')]
    public ?string $committeeDesignation = null;
    
    /**
     * 
     * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
     * 
     * 
     * @var ?array<string> $committeeId
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=committee_id')]
    public ?array $committeeId = null;
    
    /**
     * The one-letter type code of the organization:
     * 
     *         - C communication cost
     *         - D delegate
     *         - E electioneering communication
     *         - H House
     *         - I independent expenditure filer (not a committee)
     *         - N PAC - nonqualified
     *         - O independent expenditure-only (super PACs)
     *         - P presidential
     *         - Q PAC - qualified
     *         - S Senate
     *         - U single candidate independent expenditure
     *         - V PAC with non-contribution account, nonqualified
     *         - W PAC with non-contribution account, qualified
     *         - X party, nonqualified
     *         - Y party, qualified
     *         - Z national party non-federal account
     * 
     * 
     * @var ?array<string> $committeeType
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=committee_type')]
    public ?array $committeeType = null;
    
    /**
     * 
     * Filter records to only those that are applicable to a given two-year
     * period. This cycle follows the traditional House election cycle and
     * subdivides the presidential and Senate elections into comparable
     * two-year blocks. The cycle begins with an odd year and is named for its
     * ending, even year.
     * 
     * 
     * @var ?array<int> $cycle
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=cycle')]
    public ?array $cycle = null;
    
    /**
     * 
     * Filter records to only those that are applicable to a given two-year
     * period. This cycle follows the traditional House election cycle and
     * subdivides the presidential and Senate elections into comparable
     * two-year blocks. The cycle begins with an odd year and is named for its
     * ending, even year.
     * 
     * 
     * @var ?int $maxElectionCycle
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=max_election_cycle')]
    public ?int $maxElectionCycle = null;
    
    /**
     * 
     * Filter records to only those that are applicable to a given two-year
     * period. This cycle follows the traditional House election cycle and
     * subdivides the presidential and Senate elections into comparable
     * two-year blocks. The cycle begins with an odd year and is named for its
     * ending, even year.
     * 
     * 
     * @var ?int $minElectionCycle
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=min_election_cycle')]
    public ?int $minElectionCycle = null;
    
    /**
     * For paginating through results, starting at page 1
     * 
     * @var ?int $page
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=page')]
    public ?int $page = null;
    
    /**
     * The number of results returned per page. Defaults to 20.
     * 
     * @var ?int $perPage
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=per_page')]
    public ?int $perPage = null;
    
    /**
     * 
     * Audit category ID (table PK)
     * 
     * 
     * @var ?string $primaryCategoryId
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=primary_category_id')]
    public ?string $primaryCategoryId = null;
    
    /**
     * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
     * 
     * @var ?array<string> $q
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=q')]
    public ?array $q = null;
    
    /**
     * Name of candidate running for office
     * 
     * @var ?array<string> $qq
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=qq')]
    public ?array $qq = null;
    
    /**
     * 
     * Provide a field to sort by. Use `-` for descending order. ex: `-case_no`
     * 
     * 
     * @var ?array<string> $sort
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=sort')]
    public ?array $sort = null;
    
    /**
     * Hide null values on sorted column(s).
     * 
     * @var ?bool $sortHideNull
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=sort_hide_null')]
    public ?bool $sortHideNull = null;
    
    /**
     * Toggle that filters out all rows having sort column that is non-null
     * 
     * @var ?bool $sortNullOnly
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=sort_null_only')]
    public ?bool $sortNullOnly = null;
    
    /**
     * Toggle that sorts null values last
     * 
     * @var ?bool $sortNullsLast
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=sort_nulls_last')]
    public ?bool $sortNullsLast = null;
    
    /**
     * 
     * The finding id of an audit. Finding are a category of broader issues. Each category has an unique ID.
     * 
     * 
     * @var ?string $subCategoryId
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=sub_category_id')]
    public ?string $subCategoryId = null;
    
	public function __construct()
	{
		$this->apiKey = "";
		$this->auditCaseId = null;
		$this->auditId = null;
		$this->candidateId = null;
		$this->committeeDesignation = null;
		$this->committeeId = null;
		$this->committeeType = null;
		$this->cycle = null;
		$this->maxElectionCycle = null;
		$this->minElectionCycle = null;
		$this->page = null;
		$this->perPage = null;
		$this->primaryCategoryId = null;
		$this->q = null;
		$this->qq = null;
		$this->sort = null;
		$this->sortHideNull = null;
		$this->sortNullOnly = null;
		$this->sortNullsLast = null;
		$this->subCategoryId = null;
	}
}
