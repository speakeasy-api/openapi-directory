// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type DisallowedResourceProblemResourceTypeEnum string

const (
	DisallowedResourceProblemResourceTypeEnumTweet DisallowedResourceProblemResourceTypeEnum = "tweet"
	DisallowedResourceProblemResourceTypeEnumMedia DisallowedResourceProblemResourceTypeEnum = "media"
)

func (e *DisallowedResourceProblemResourceTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "tweet":
		fallthrough
	case "media":
		*e = DisallowedResourceProblemResourceTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DisallowedResourceProblemResourceTypeEnum: %s", s)
	}
}

type DisallowedResourceProblemSectionEnum string

const (
	DisallowedResourceProblemSectionEnumData     DisallowedResourceProblemSectionEnum = "data"
	DisallowedResourceProblemSectionEnumIncludes DisallowedResourceProblemSectionEnum = "includes"
)

func (e *DisallowedResourceProblemSectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "data":
		fallthrough
	case "includes":
		*e = DisallowedResourceProblemSectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DisallowedResourceProblemSectionEnum: %s", s)
	}
}

// DisallowedResourceProblem - A problem that indicates that the resource requested violates the precepts of this API.
type DisallowedResourceProblem struct {
	Detail       string                                    `json:"detail"`
	ResourceID   string                                    `json:"resource_id"`
	ResourceType DisallowedResourceProblemResourceTypeEnum `json:"resource_type"`
	Section      DisallowedResourceProblemSectionEnum      `json:"section"`
	Title        string                                    `json:"title"`
	Type         string                                    `json:"type"`
}
