<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * MessagingV1BrandRegistrations - Created
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class MessagingV1BrandRegistrations
{
    /**
     * A2P Messaging Profile Bundle BundleSid.
     * 
     * @var ?string $a2pProfileBundleSid
     */
	#[\JMS\Serializer\Annotation\SerializedName('a2p_profile_bundle_sid')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $a2pProfileBundleSid = null;
    
    /**
     * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Brand Registration resource.
     * 
     * @var ?string $accountSid
     */
	#[\JMS\Serializer\Annotation\SerializedName('account_sid')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $accountSid = null;
    
    /**
     * Feedback on how to improve brand score
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\BrandRegistrationsEnumBrandFeedbackEnum> $brandFeedback
     */
	#[\JMS\Serializer\Annotation\SerializedName('brand_feedback')]
    #[\JMS\Serializer\Annotation\Type('array<enum<OpenAPI\OpenAPI\Models\Shared\BrandRegistrationsEnumBrandFeedbackEnum>>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $brandFeedback = null;
    
    /**
     * The secondary vetting score if it was done. Otherwise, it will be the brand score if it's returned from TCR. It may be null if no score is available.
     * 
     * @var ?int $brandScore
     */
	#[\JMS\Serializer\Annotation\SerializedName('brand_score')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $brandScore = null;
    
    /**
     * Type of brand. One of: "STANDARD", "SOLE_PROPRIETOR". SOLE_PROPRIETOR is for the low volume, SOLE_PROPRIETOR campaign use case. There can only be one SOLE_PROPRIETOR campaign created per SOLE_PROPRIETOR brand. STANDARD is for all other campaign use cases. Multiple campaign use cases can be created per STANDARD brand.
     * 
     * @var ?string $brandType
     */
	#[\JMS\Serializer\Annotation\SerializedName('brand_type')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $brandType = null;
    
    /**
     * A2P Messaging Profile Bundle BundleSid.
     * 
     * @var ?string $customerProfileBundleSid
     */
	#[\JMS\Serializer\Annotation\SerializedName('customer_profile_bundle_sid')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $customerProfileBundleSid = null;
    
    /**
     * The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     * 
     * @var ?\DateTime $dateCreated
     */
	#[\JMS\Serializer\Annotation\SerializedName('date_created')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $dateCreated = null;
    
    /**
     * The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     * 
     * @var ?\DateTime $dateUpdated
     */
	#[\JMS\Serializer\Annotation\SerializedName('date_updated')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $dateUpdated = null;
    
    /**
     * A reason why brand registration has failed. Only applicable when status is FAILED.
     * 
     * @var ?string $failureReason
     */
	#[\JMS\Serializer\Annotation\SerializedName('failure_reason')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $failureReason = null;
    
    /**
     * Identified as a government entity
     * 
     * @var ?bool $governmentEntity
     */
	#[\JMS\Serializer\Annotation\SerializedName('government_entity')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $governmentEntity = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('identity_status')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\BrandRegistrationsEnumIdentityStatusEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?BrandRegistrationsEnumIdentityStatusEnum $identityStatus = null;
    
    /**
     * $links
     * 
     * @var ?array<string, mixed> $links
     */
	#[\JMS\Serializer\Annotation\SerializedName('links')]
    #[\JMS\Serializer\Annotation\Type('array<string, mixed>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $links = null;
    
    /**
     * A boolean that specifies whether brand should be a mock or not. If true, brand will be registered as a mock brand. Defaults to false if no value is provided.
     * 
     * @var ?bool $mock
     */
	#[\JMS\Serializer\Annotation\SerializedName('mock')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $mock = null;
    
    /**
     * Publicly traded company identified in the Russell 3000 Index
     * 
     * @var ?bool $russell3000
     */
	#[\JMS\Serializer\Annotation\SerializedName('russell_3000')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $russell3000 = null;
    
    /**
     * The unique string to identify Brand Registration.
     * 
     * @var ?string $sid
     */
	#[\JMS\Serializer\Annotation\SerializedName('sid')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $sid = null;
    
    /**
     * A flag to disable automatic secondary vetting for brands which it would otherwise be done.
     * 
     * @var ?bool $skipAutomaticSecVet
     */
	#[\JMS\Serializer\Annotation\SerializedName('skip_automatic_sec_vet')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $skipAutomaticSecVet = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('status')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\BrandRegistrationsEnumStatusEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?BrandRegistrationsEnumStatusEnum $status = null;
    
    /**
     * Nonprofit organization tax-exempt status per section 501 of the U.S. tax code.
     * 
     * @var ?string $taxExemptStatus
     */
	#[\JMS\Serializer\Annotation\SerializedName('tax_exempt_status')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $taxExemptStatus = null;
    
    /**
     * Campaign Registry (TCR) Brand ID. Assigned only after successful brand registration.
     * 
     * @var ?string $tcrId
     */
	#[\JMS\Serializer\Annotation\SerializedName('tcr_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $tcrId = null;
    
    /**
     * The absolute URL of the Brand Registration resource.
     * 
     * @var ?string $url
     */
	#[\JMS\Serializer\Annotation\SerializedName('url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $url = null;
    
	public function __construct()
	{
		$this->a2pProfileBundleSid = null;
		$this->accountSid = null;
		$this->brandFeedback = null;
		$this->brandScore = null;
		$this->brandType = null;
		$this->customerProfileBundleSid = null;
		$this->dateCreated = null;
		$this->dateUpdated = null;
		$this->failureReason = null;
		$this->governmentEntity = null;
		$this->identityStatus = null;
		$this->links = null;
		$this->mock = null;
		$this->russell3000 = null;
		$this->sid = null;
		$this->skipAutomaticSecVet = null;
		$this->status = null;
		$this->taxExemptStatus = null;
		$this->tcrId = null;
		$this->url = null;
	}
}
