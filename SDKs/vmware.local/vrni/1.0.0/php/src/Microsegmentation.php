<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Microsegmentation 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Export recommended rules for NSX-V
     * 
     * Export recommended firewall rules based on the flow data gathered by vRealize Network Insight in NSX-V compatible
     * format
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\RecommendedRulesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportNsxRecommendedRulesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportNsxRecommendedRulesResponse
     */
	public function exportNsxRecommendedRules(
        \OpenAPI\OpenAPI\Models\Shared\RecommendedRulesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ExportNsxRecommendedRulesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ExportNsxRecommendedRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/micro-seg/recommended-rules/nsx');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportNsxRecommendedRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/octet-stream')) {
                $response->exportNsxRecommendedRules200ApplicationOctetStreamBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/octet-stream')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Get logical recommended rules
     * 
     * Get recommended firewall rules based on the flow data gathered by vRealize Network Insight.
     * This API provides service to retrieve recommended rules based on flow traffic that is observed between
     * two groups OR for a single group based on all the inbound and outboud traffic for that group.
     * In case two groups are provided, both the groups should be of same type.
     * Currently supported groups are Application, Tier, NSXSecurityGroup, EC2SecurityGroup.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\RecommendedRulesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListRecommendedRulesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListRecommendedRulesResponse
     */
	public function listRecommendedRules(
        \OpenAPI\OpenAPI\Models\Shared\RecommendedRulesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListRecommendedRulesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListRecommendedRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/micro-seg/recommended-rules');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListRecommendedRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->recommendedRules = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RecommendedRules', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
}