"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import addonrequest as shared_addonrequest
from ..shared import ipaddresstype_enum as shared_ipaddresstype_enum
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateInstancesRequest:
    
    availability_zone: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availabilityZone') }})  
    blueprint_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blueprintId') }})  
    bundle_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bundleId') }})  
    instance_names: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instanceNames') }})  
    add_ons: Optional[list[shared_addonrequest.AddOnRequest]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addOns'), 'exclude': lambda f: f is None }})  
    custom_image_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customImageName'), 'exclude': lambda f: f is None }})  
    ip_address_type: Optional[shared_ipaddresstype_enum.IPAddressTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipAddressType'), 'exclude': lambda f: f is None }})  
    key_pair_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keyPairName'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    user_data: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userData'), 'exclude': lambda f: f is None }})  
    