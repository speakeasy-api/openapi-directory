"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Optional


@dataclasses.dataclass
class StorageGetFilePreviewSecurity:
    
    jwt: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-Appwrite-JWT' }})  
    key: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-Appwrite-Key' }})  
    project: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-Appwrite-Project' }})  
    

@dataclasses.dataclass
class StorageGetFilePreviewRequest:
    
    file_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'fileId', 'style': 'simple', 'explode': False }})
    r"""File unique ID"""  
    background: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'background', 'style': 'form', 'explode': True }})
    r"""Preview image background color. Only works with transparent images (png). Use a valid HEX color, no # is needed for prefix."""  
    border_color: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'borderColor', 'style': 'form', 'explode': True }})
    r"""Preview image border color. Use a valid HEX color, no # is needed for prefix."""  
    border_radius: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'borderRadius', 'style': 'form', 'explode': True }})
    r"""Preview image border radius in pixels. Pass an integer between 0 to 4000."""  
    border_width: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'borderWidth', 'style': 'form', 'explode': True }})
    r"""Preview image border in pixels. Pass an integer between 0 to 100. Defaults to 0."""  
    gravity: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'gravity', 'style': 'form', 'explode': True }})
    r"""Image crop gravity. Can be one of center,top-left,top,top-right,left,right,bottom-left,bottom,bottom-right"""  
    height: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'height', 'style': 'form', 'explode': True }})
    r"""Resize preview image height, Pass an integer between 0 to 4000."""  
    opacity: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'opacity', 'style': 'form', 'explode': True }})
    r"""Preview image opacity. Only works with images having an alpha channel (like png). Pass a number between 0 to 1."""  
    output: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'output', 'style': 'form', 'explode': True }})
    r"""Output format type (jpeg, jpg, png, gif and webp)."""  
    quality: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'quality', 'style': 'form', 'explode': True }})
    r"""Preview image quality. Pass an integer between 0 to 100. Defaults to 100."""  
    rotation: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'rotation', 'style': 'form', 'explode': True }})
    r"""Preview image rotation in degrees. Pass an integer between 0 and 360."""  
    width: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'width', 'style': 'form', 'explode': True }})
    r"""Resize preview image width, Pass an integer between 0 to 4000."""  
    

@dataclasses.dataclass
class StorageGetFilePreviewResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    