"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackendAPIAuthType = exports.BackendAPIAuthTypeSettings = exports.BackendAPIAuthTypeModeEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * Describes the authentication mode.
 */
var BackendAPIAuthTypeModeEnum;
(function (BackendAPIAuthTypeModeEnum) {
    BackendAPIAuthTypeModeEnum["ApiKey"] = "API_KEY";
    BackendAPIAuthTypeModeEnum["AwsIam"] = "AWS_IAM";
    BackendAPIAuthTypeModeEnum["AmazonCognitoUserPools"] = "AMAZON_COGNITO_USER_POOLS";
    BackendAPIAuthTypeModeEnum["OpenidConnect"] = "OPENID_CONNECT";
})(BackendAPIAuthTypeModeEnum = exports.BackendAPIAuthTypeModeEnum || (exports.BackendAPIAuthTypeModeEnum = {}));
/**
 * Describes settings for the authentication mode.
 */
var BackendAPIAuthTypeSettings = /** @class */ (function (_super) {
    __extends(BackendAPIAuthTypeSettings, _super);
    function BackendAPIAuthTypeSettings() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "CognitoUserPoolId" }),
        __metadata("design:type", String)
    ], BackendAPIAuthTypeSettings.prototype, "cognitoUserPoolId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "Description" }),
        __metadata("design:type", String)
    ], BackendAPIAuthTypeSettings.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ExpirationTime" }),
        __metadata("design:type", Number)
    ], BackendAPIAuthTypeSettings.prototype, "expirationTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "OpenIDAuthTTL" }),
        __metadata("design:type", String)
    ], BackendAPIAuthTypeSettings.prototype, "openIDAuthTTL", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "OpenIDClientId" }),
        __metadata("design:type", String)
    ], BackendAPIAuthTypeSettings.prototype, "openIDClientID", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "OpenIDIatTTL" }),
        __metadata("design:type", String)
    ], BackendAPIAuthTypeSettings.prototype, "openIDIatTTL", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "OpenIDIssueURL" }),
        __metadata("design:type", String)
    ], BackendAPIAuthTypeSettings.prototype, "openIDIssueURL", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "OpenIDProviderName" }),
        __metadata("design:type", String)
    ], BackendAPIAuthTypeSettings.prototype, "openIDProviderName", void 0);
    return BackendAPIAuthTypeSettings;
}(utils_1.SpeakeasyBase));
exports.BackendAPIAuthTypeSettings = BackendAPIAuthTypeSettings;
/**
 * Describes the auth types for your configured data models.
 */
var BackendAPIAuthType = /** @class */ (function (_super) {
    __extends(BackendAPIAuthType, _super);
    function BackendAPIAuthType() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "Mode" }),
        __metadata("design:type", String)
    ], BackendAPIAuthType.prototype, "mode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "Settings" }),
        (0, class_transformer_1.Type)(function () { return BackendAPIAuthTypeSettings; }),
        __metadata("design:type", BackendAPIAuthTypeSettings)
    ], BackendAPIAuthType.prototype, "settings", void 0);
    return BackendAPIAuthType;
}(utils_1.SpeakeasyBase));
exports.BackendAPIAuthType = BackendAPIAuthType;
