"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetglobaltimeRequest:
    
    license: str = dataclasses.field(metadata={'query_param': { 'field_name': 'license', 'style': 'form', 'explode': True }})
    r"""Your Interzoid license API key. Register at www.interzoid.com/register"""  
    locale: str = dataclasses.field(metadata={'query_param': { 'field_name': 'locale', 'style': 'form', 'explode': True }})
    r"""Geographic locale to get the current time for"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Getglobaltime200ApplicationJSON:
    r"""Current global time in many forms and related information"""
    
    clock_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClockTime'), 'exclude': lambda f: f is None }})  
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Code'), 'exclude': lambda f: f is None }})  
    credits: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Credits'), 'exclude': lambda f: f is None }})  
    current_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CurrentDate'), 'exclude': lambda f: f is None }})  
    current_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CurrentTime'), 'exclude': lambda f: f is None }})  
    day: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Day'), 'exclude': lambda f: f is None }})  
    hour: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Hour'), 'exclude': lambda f: f is None }})  
    locale: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Locale'), 'exclude': lambda f: f is None }})  
    minute: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Minute'), 'exclude': lambda f: f is None }})  
    month: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Month'), 'exclude': lambda f: f is None }})  
    month_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MonthNumber'), 'exclude': lambda f: f is None }})  
    second: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Second'), 'exclude': lambda f: f is None }})  
    time_stamp: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TimeStamp'), 'exclude': lambda f: f is None }})  
    weekday: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Weekday'), 'exclude': lambda f: f is None }})  
    year: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Year'), 'exclude': lambda f: f is None }})  
    zone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Zone'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetglobaltimeResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    getglobaltime_200_application_json_object: Optional[Getglobaltime200ApplicationJSON] = dataclasses.field(default=None)
    r"""Current global time in many forms and related information"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    