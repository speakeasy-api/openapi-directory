// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDescribeVpcAttributeActionEnum
type GETDescribeVpcAttributeActionEnum string

const (
	GETDescribeVpcAttributeActionEnumDescribeVpcAttribute GETDescribeVpcAttributeActionEnum = "DescribeVpcAttribute"
)

func (e GETDescribeVpcAttributeActionEnum) ToPointer() *GETDescribeVpcAttributeActionEnum {
	return &e
}

func (e *GETDescribeVpcAttributeActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DescribeVpcAttribute":
		*e = GETDescribeVpcAttributeActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeVpcAttributeActionEnum: %v", v)
	}
}

// GETDescribeVpcAttributeAttributeEnum - The VPC attribute.
type GETDescribeVpcAttributeAttributeEnum string

const (
	GETDescribeVpcAttributeAttributeEnumEnableDNSSupport                 GETDescribeVpcAttributeAttributeEnum = "enableDnsSupport"
	GETDescribeVpcAttributeAttributeEnumEnableDNSHostnames               GETDescribeVpcAttributeAttributeEnum = "enableDnsHostnames"
	GETDescribeVpcAttributeAttributeEnumEnableNetworkAddressUsageMetrics GETDescribeVpcAttributeAttributeEnum = "enableNetworkAddressUsageMetrics"
)

func (e GETDescribeVpcAttributeAttributeEnum) ToPointer() *GETDescribeVpcAttributeAttributeEnum {
	return &e
}

func (e *GETDescribeVpcAttributeAttributeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enableDnsSupport":
		fallthrough
	case "enableDnsHostnames":
		fallthrough
	case "enableNetworkAddressUsageMetrics":
		*e = GETDescribeVpcAttributeAttributeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeVpcAttributeAttributeEnum: %v", v)
	}
}

// GETDescribeVpcAttributeVersionEnum
type GETDescribeVpcAttributeVersionEnum string

const (
	GETDescribeVpcAttributeVersionEnumTwoThousandAndSixteen1115 GETDescribeVpcAttributeVersionEnum = "2016-11-15"
)

func (e GETDescribeVpcAttributeVersionEnum) ToPointer() *GETDescribeVpcAttributeVersionEnum {
	return &e
}

func (e *GETDescribeVpcAttributeVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = GETDescribeVpcAttributeVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeVpcAttributeVersionEnum: %v", v)
	}
}

type GETDescribeVpcAttributeRequest struct {
	Action GETDescribeVpcAttributeActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The VPC attribute.
	Attribute GETDescribeVpcAttributeAttributeEnum `queryParam:"style=form,explode=true,name=Attribute"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun  *bool                              `queryParam:"style=form,explode=true,name=DryRun"`
	Version GETDescribeVpcAttributeVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	// The ID of the VPC.
	VpcID             string  `queryParam:"style=form,explode=true,name=VpcId"`
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDescribeVpcAttributeResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
