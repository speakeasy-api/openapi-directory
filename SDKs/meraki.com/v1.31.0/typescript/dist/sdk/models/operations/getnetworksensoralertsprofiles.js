"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetNetworkSensorAlertsProfilesResponse = exports.GetNetworkSensorAlertsProfiles200ApplicationJSON = exports.GetNetworkSensorAlertsProfiles200ApplicationJSONSchedule = exports.GetNetworkSensorAlertsProfiles200ApplicationJSONRecipients = exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditions = exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThreshold = exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdWater = exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTvoc = exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTvocQualityEnum = exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTemperature = exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTemperatureQualityEnum = exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdPm25 = exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdPm25QualityEnum = exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoise = exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoiseAmbient = exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum = exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdIndoorAirQuality = exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum = exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdHumidity = exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdHumidityQualityEnum = exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdDoor = exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDurationEnum = exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDirectionEnum = exports.GetNetworkSensorAlertsProfilesRequest = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
var GetNetworkSensorAlertsProfilesRequest = /** @class */ (function (_super) {
    __extends(GetNetworkSensorAlertsProfilesRequest, _super);
    function GetNetworkSensorAlertsProfilesRequest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "pathParam, style=simple;explode=false;name=networkId",
        }),
        __metadata("design:type", String)
    ], GetNetworkSensorAlertsProfilesRequest.prototype, "networkId", void 0);
    return GetNetworkSensorAlertsProfilesRequest;
}(utils_1.SpeakeasyBase));
exports.GetNetworkSensorAlertsProfilesRequest = GetNetworkSensorAlertsProfilesRequest;
/**
 * If 'above', an alert will be sent when a sensor reads above the threshold. If 'below', an alert will be sent when a sensor reads below the threshold. Only applicable for temperature and humidity thresholds.
 */
var GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDirectionEnum;
(function (GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDirectionEnum) {
    GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDirectionEnum["Above"] = "above";
    GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDirectionEnum["Below"] = "below";
})(GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDirectionEnum = exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDirectionEnum || (exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDirectionEnum = {}));
/**
 * Length of time in seconds that the triggering state must persist before an alert is sent. Available options are 0 seconds, 1 minute, 2 minutes, 3 minutes, 4 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, and 1 hour. Default is 0.
 */
var GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDurationEnum;
(function (GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDurationEnum) {
    GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDurationEnum["Zero"] = "0";
    GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDurationEnum["Sixty"] = "60";
    GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDurationEnum["OneHundredAndTwenty"] = "120";
    GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDurationEnum["OneHundredAndEighty"] = "180";
    GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDurationEnum["TwoHundredAndForty"] = "240";
    GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDurationEnum["ThreeHundred"] = "300";
    GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDurationEnum["SixHundred"] = "600";
    GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDurationEnum["NineHundred"] = "900";
    GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDurationEnum["OneThousandEightHundred"] = "1800";
    GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDurationEnum["ThreeThousandSixHundred"] = "3600";
})(GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDurationEnum = exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDurationEnum || (exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDurationEnum = {}));
/**
 * Door open threshold. 'open' must be provided and set to true.
 */
var GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdDoor = /** @class */ (function (_super) {
    __extends(GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdDoor, _super);
    function GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdDoor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "open" }),
        __metadata("design:type", Boolean)
    ], GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdDoor.prototype, "open", void 0);
    return GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdDoor;
}(utils_1.SpeakeasyBase));
exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdDoor = GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdDoor;
/**
 * Alerting threshold as a qualitative humidity level.
 */
var GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdHumidityQualityEnum;
(function (GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdHumidityQualityEnum) {
    GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdHumidityQualityEnum["Fair"] = "fair";
    GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdHumidityQualityEnum["Good"] = "good";
    GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdHumidityQualityEnum["Inadequate"] = "inadequate";
    GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdHumidityQualityEnum["Poor"] = "poor";
})(GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdHumidityQualityEnum = exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdHumidityQualityEnum || (exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdHumidityQualityEnum = {}));
/**
 * Humidity threshold. One of 'relativePercentage' or 'quality' must be provided.
 */
var GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdHumidity = /** @class */ (function (_super) {
    __extends(GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdHumidity, _super);
    function GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdHumidity() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "quality" }),
        __metadata("design:type", String)
    ], GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdHumidity.prototype, "quality", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "relativePercentage" }),
        __metadata("design:type", Number)
    ], GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdHumidity.prototype, "relativePercentage", void 0);
    return GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdHumidity;
}(utils_1.SpeakeasyBase));
exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdHumidity = GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdHumidity;
/**
 * Alerting threshold as a qualitative indoor air quality level.
 */
var GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum;
(function (GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum) {
    GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum["Fair"] = "fair";
    GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum["Good"] = "good";
    GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum["Inadequate"] = "inadequate";
    GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum["Poor"] = "poor";
})(GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum = exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum || (exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum = {}));
/**
 * Indoor air quality score threshold. One of 'score' or 'quality' must be provided.
 */
var GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdIndoorAirQuality = /** @class */ (function (_super) {
    __extends(GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdIndoorAirQuality, _super);
    function GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdIndoorAirQuality() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "quality" }),
        __metadata("design:type", String)
    ], GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdIndoorAirQuality.prototype, "quality", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "score" }),
        __metadata("design:type", Number)
    ], GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdIndoorAirQuality.prototype, "score", void 0);
    return GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdIndoorAirQuality;
}(utils_1.SpeakeasyBase));
exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdIndoorAirQuality = GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdIndoorAirQuality;
/**
 * Alerting threshold as a qualitative ambient noise level.
 */
var GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum;
(function (GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum) {
    GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum["Fair"] = "fair";
    GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum["Good"] = "good";
    GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum["Inadequate"] = "inadequate";
    GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum["Poor"] = "poor";
})(GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum = exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum || (exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum = {}));
/**
 * Ambient noise threshold. One of 'level' or 'quality' must be provided.
 */
var GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoiseAmbient = /** @class */ (function (_super) {
    __extends(GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoiseAmbient, _super);
    function GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoiseAmbient() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "level" }),
        __metadata("design:type", Number)
    ], GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoiseAmbient.prototype, "level", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "quality" }),
        __metadata("design:type", String)
    ], GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoiseAmbient.prototype, "quality", void 0);
    return GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoiseAmbient;
}(utils_1.SpeakeasyBase));
exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoiseAmbient = GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoiseAmbient;
/**
 * Noise threshold. 'ambient' must be provided.
 */
var GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoise = /** @class */ (function (_super) {
    __extends(GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoise, _super);
    function GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoise() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ambient" }),
        (0, class_transformer_1.Type)(function () {
            return GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoiseAmbient;
        }),
        __metadata("design:type", GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoiseAmbient)
    ], GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoise.prototype, "ambient", void 0);
    return GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoise;
}(utils_1.SpeakeasyBase));
exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoise = GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoise;
/**
 * Alerting threshold as a qualitative PM2.5 level.
 */
var GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdPm25QualityEnum;
(function (GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdPm25QualityEnum) {
    GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdPm25QualityEnum["Fair"] = "fair";
    GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdPm25QualityEnum["Good"] = "good";
    GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdPm25QualityEnum["Inadequate"] = "inadequate";
    GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdPm25QualityEnum["Poor"] = "poor";
})(GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdPm25QualityEnum = exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdPm25QualityEnum || (exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdPm25QualityEnum = {}));
/**
 * PM2.5 concentration threshold. One of 'concentration' or 'quality' must be provided.
 */
var GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdPm25 = /** @class */ (function (_super) {
    __extends(GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdPm25, _super);
    function GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdPm25() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "concentration" }),
        __metadata("design:type", Number)
    ], GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdPm25.prototype, "concentration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "quality" }),
        __metadata("design:type", String)
    ], GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdPm25.prototype, "quality", void 0);
    return GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdPm25;
}(utils_1.SpeakeasyBase));
exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdPm25 = GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdPm25;
/**
 * Alerting threshold as a qualitative temperature level.
 */
var GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTemperatureQualityEnum;
(function (GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTemperatureQualityEnum) {
    GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTemperatureQualityEnum["Fair"] = "fair";
    GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTemperatureQualityEnum["Good"] = "good";
    GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTemperatureQualityEnum["Inadequate"] = "inadequate";
    GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTemperatureQualityEnum["Poor"] = "poor";
})(GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTemperatureQualityEnum = exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTemperatureQualityEnum || (exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTemperatureQualityEnum = {}));
/**
 * Temperature threshold. One of 'celsius', 'fahrenheit', or 'quality' must be provided.
 */
var GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTemperature = /** @class */ (function (_super) {
    __extends(GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTemperature, _super);
    function GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTemperature() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "celsius" }),
        __metadata("design:type", Number)
    ], GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTemperature.prototype, "celsius", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "fahrenheit" }),
        __metadata("design:type", Number)
    ], GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTemperature.prototype, "fahrenheit", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "quality" }),
        __metadata("design:type", String)
    ], GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTemperature.prototype, "quality", void 0);
    return GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTemperature;
}(utils_1.SpeakeasyBase));
exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTemperature = GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTemperature;
/**
 * Alerting threshold as a qualitative TVOC level.
 */
var GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTvocQualityEnum;
(function (GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTvocQualityEnum) {
    GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTvocQualityEnum["Fair"] = "fair";
    GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTvocQualityEnum["Good"] = "good";
    GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTvocQualityEnum["Inadequate"] = "inadequate";
    GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTvocQualityEnum["Poor"] = "poor";
})(GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTvocQualityEnum = exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTvocQualityEnum || (exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTvocQualityEnum = {}));
/**
 * TVOC concentration threshold. One of 'concentration' or 'quality' must be provided.
 */
var GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTvoc = /** @class */ (function (_super) {
    __extends(GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTvoc, _super);
    function GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTvoc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "concentration" }),
        __metadata("design:type", Number)
    ], GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTvoc.prototype, "concentration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "quality" }),
        __metadata("design:type", String)
    ], GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTvoc.prototype, "quality", void 0);
    return GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTvoc;
}(utils_1.SpeakeasyBase));
exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTvoc = GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTvoc;
/**
 * Water detection threshold. 'present' must be provided and set to true.
 */
var GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdWater = /** @class */ (function (_super) {
    __extends(GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdWater, _super);
    function GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdWater() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "present" }),
        __metadata("design:type", Boolean)
    ], GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdWater.prototype, "present", void 0);
    return GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdWater;
}(utils_1.SpeakeasyBase));
exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdWater = GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdWater;
/**
 * Threshold for sensor readings that will cause an alert to be sent. This object should contain a single property key matching the condition's 'metric' value.
 */
var GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThreshold = /** @class */ (function (_super) {
    __extends(GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThreshold, _super);
    function GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThreshold() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "door" }),
        (0, class_transformer_1.Type)(function () {
            return GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdDoor;
        }),
        __metadata("design:type", GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdDoor)
    ], GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThreshold.prototype, "door", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "humidity" }),
        (0, class_transformer_1.Type)(function () {
            return GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdHumidity;
        }),
        __metadata("design:type", GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdHumidity)
    ], GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThreshold.prototype, "humidity", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "indoorAirQuality" }),
        (0, class_transformer_1.Type)(function () {
            return GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdIndoorAirQuality;
        }),
        __metadata("design:type", GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdIndoorAirQuality)
    ], GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThreshold.prototype, "indoorAirQuality", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "noise" }),
        (0, class_transformer_1.Type)(function () {
            return GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoise;
        }),
        __metadata("design:type", GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoise)
    ], GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThreshold.prototype, "noise", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "pm25" }),
        (0, class_transformer_1.Type)(function () {
            return GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdPm25;
        }),
        __metadata("design:type", GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdPm25)
    ], GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThreshold.prototype, "pm25", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "temperature" }),
        (0, class_transformer_1.Type)(function () {
            return GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTemperature;
        }),
        __metadata("design:type", GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTemperature)
    ], GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThreshold.prototype, "temperature", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "tvoc" }),
        (0, class_transformer_1.Type)(function () {
            return GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTvoc;
        }),
        __metadata("design:type", GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTvoc)
    ], GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThreshold.prototype, "tvoc", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "water" }),
        (0, class_transformer_1.Type)(function () {
            return GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdWater;
        }),
        __metadata("design:type", GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdWater)
    ], GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThreshold.prototype, "water", void 0);
    return GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThreshold;
}(utils_1.SpeakeasyBase));
exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThreshold = GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThreshold;
var GetNetworkSensorAlertsProfiles200ApplicationJSONConditions = /** @class */ (function (_super) {
    __extends(GetNetworkSensorAlertsProfiles200ApplicationJSONConditions, _super);
    function GetNetworkSensorAlertsProfiles200ApplicationJSONConditions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "direction" }),
        __metadata("design:type", String)
    ], GetNetworkSensorAlertsProfiles200ApplicationJSONConditions.prototype, "direction", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "duration" }),
        __metadata("design:type", String)
    ], GetNetworkSensorAlertsProfiles200ApplicationJSONConditions.prototype, "duration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "metric" }),
        __metadata("design:type", String)
    ], GetNetworkSensorAlertsProfiles200ApplicationJSONConditions.prototype, "metric", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "threshold" }),
        (0, class_transformer_1.Type)(function () { return GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThreshold; }),
        __metadata("design:type", GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThreshold)
    ], GetNetworkSensorAlertsProfiles200ApplicationJSONConditions.prototype, "threshold", void 0);
    return GetNetworkSensorAlertsProfiles200ApplicationJSONConditions;
}(utils_1.SpeakeasyBase));
exports.GetNetworkSensorAlertsProfiles200ApplicationJSONConditions = GetNetworkSensorAlertsProfiles200ApplicationJSONConditions;
/**
 * List of recipients that will recieve the alert.
 */
var GetNetworkSensorAlertsProfiles200ApplicationJSONRecipients = /** @class */ (function (_super) {
    __extends(GetNetworkSensorAlertsProfiles200ApplicationJSONRecipients, _super);
    function GetNetworkSensorAlertsProfiles200ApplicationJSONRecipients() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "emails" }),
        __metadata("design:type", Array)
    ], GetNetworkSensorAlertsProfiles200ApplicationJSONRecipients.prototype, "emails", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "httpServerIds" }),
        __metadata("design:type", Array)
    ], GetNetworkSensorAlertsProfiles200ApplicationJSONRecipients.prototype, "httpServerIds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "smsNumbers" }),
        __metadata("design:type", Array)
    ], GetNetworkSensorAlertsProfiles200ApplicationJSONRecipients.prototype, "smsNumbers", void 0);
    return GetNetworkSensorAlertsProfiles200ApplicationJSONRecipients;
}(utils_1.SpeakeasyBase));
exports.GetNetworkSensorAlertsProfiles200ApplicationJSONRecipients = GetNetworkSensorAlertsProfiles200ApplicationJSONRecipients;
/**
 * The sensor schedule to use with the alert profile.
 */
var GetNetworkSensorAlertsProfiles200ApplicationJSONSchedule = /** @class */ (function (_super) {
    __extends(GetNetworkSensorAlertsProfiles200ApplicationJSONSchedule, _super);
    function GetNetworkSensorAlertsProfiles200ApplicationJSONSchedule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], GetNetworkSensorAlertsProfiles200ApplicationJSONSchedule.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], GetNetworkSensorAlertsProfiles200ApplicationJSONSchedule.prototype, "name", void 0);
    return GetNetworkSensorAlertsProfiles200ApplicationJSONSchedule;
}(utils_1.SpeakeasyBase));
exports.GetNetworkSensorAlertsProfiles200ApplicationJSONSchedule = GetNetworkSensorAlertsProfiles200ApplicationJSONSchedule;
var GetNetworkSensorAlertsProfiles200ApplicationJSON = /** @class */ (function (_super) {
    __extends(GetNetworkSensorAlertsProfiles200ApplicationJSON, _super);
    function GetNetworkSensorAlertsProfiles200ApplicationJSON() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: GetNetworkSensorAlertsProfiles200ApplicationJSONConditions,
        }),
        (0, class_transformer_1.Expose)({ name: "conditions" }),
        (0, class_transformer_1.Type)(function () { return GetNetworkSensorAlertsProfiles200ApplicationJSONConditions; }),
        __metadata("design:type", Array)
    ], GetNetworkSensorAlertsProfiles200ApplicationJSON.prototype, "conditions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], GetNetworkSensorAlertsProfiles200ApplicationJSON.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "profileId" }),
        __metadata("design:type", String)
    ], GetNetworkSensorAlertsProfiles200ApplicationJSON.prototype, "profileId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "recipients" }),
        (0, class_transformer_1.Type)(function () { return GetNetworkSensorAlertsProfiles200ApplicationJSONRecipients; }),
        __metadata("design:type", GetNetworkSensorAlertsProfiles200ApplicationJSONRecipients)
    ], GetNetworkSensorAlertsProfiles200ApplicationJSON.prototype, "recipients", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "schedule" }),
        (0, class_transformer_1.Type)(function () { return GetNetworkSensorAlertsProfiles200ApplicationJSONSchedule; }),
        __metadata("design:type", GetNetworkSensorAlertsProfiles200ApplicationJSONSchedule)
    ], GetNetworkSensorAlertsProfiles200ApplicationJSON.prototype, "schedule", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "serials" }),
        __metadata("design:type", Array)
    ], GetNetworkSensorAlertsProfiles200ApplicationJSON.prototype, "serials", void 0);
    return GetNetworkSensorAlertsProfiles200ApplicationJSON;
}(utils_1.SpeakeasyBase));
exports.GetNetworkSensorAlertsProfiles200ApplicationJSON = GetNetworkSensorAlertsProfiles200ApplicationJSON;
var GetNetworkSensorAlertsProfilesResponse = /** @class */ (function (_super) {
    __extends(GetNetworkSensorAlertsProfilesResponse, _super);
    function GetNetworkSensorAlertsProfilesResponse() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetNetworkSensorAlertsProfilesResponse.prototype, "contentType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], GetNetworkSensorAlertsProfilesResponse.prototype, "statusCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], GetNetworkSensorAlertsProfilesResponse.prototype, "rawResponse", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: GetNetworkSensorAlertsProfiles200ApplicationJSON,
        }),
        __metadata("design:type", Array)
    ], GetNetworkSensorAlertsProfilesResponse.prototype, "getNetworkSensorAlertsProfiles200ApplicationJSONObjects", void 0);
    return GetNetworkSensorAlertsProfilesResponse;
}(utils_1.SpeakeasyBase));
exports.GetNetworkSensorAlertsProfilesResponse = GetNetworkSensorAlertsProfilesResponse;
