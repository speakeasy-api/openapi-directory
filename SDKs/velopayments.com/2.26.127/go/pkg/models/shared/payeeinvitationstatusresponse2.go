// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
)

type PayeeInvitationStatusResponse2InvitationStatusEnum string

const (
	PayeeInvitationStatusResponse2InvitationStatusEnumAccepted PayeeInvitationStatusResponse2InvitationStatusEnum = "ACCEPTED"
	PayeeInvitationStatusResponse2InvitationStatusEnumPending  PayeeInvitationStatusResponse2InvitationStatusEnum = "PENDING"
	PayeeInvitationStatusResponse2InvitationStatusEnumDeclined PayeeInvitationStatusResponse2InvitationStatusEnum = "DECLINED"
)

func (e *PayeeInvitationStatusResponse2InvitationStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ACCEPTED":
		fallthrough
	case "PENDING":
		fallthrough
	case "DECLINED":
		*e = PayeeInvitationStatusResponse2InvitationStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PayeeInvitationStatusResponse2InvitationStatusEnum: %s", s)
	}
}

type PayeeInvitationStatusResponse2 struct {
	GracePeriodEndDate *types.Date                                        `json:"gracePeriodEndDate,omitempty"`
	InvitationStatus   PayeeInvitationStatusResponse2InvitationStatusEnum `json:"invitationStatus"`
	PayeeID            string                                             `json:"payeeId"`
}
