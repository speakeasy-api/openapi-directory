// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type UnloadServiceRequest struct {
	// Service ID of the service to be unloaded
	ServiceID string `pathParam:"style=simple,explode=false,name=serviceId"`
}

type UnloadService200ApplicationJSONStatusEnum string

const (
	UnloadService200ApplicationJSONStatusEnumSuccess UnloadService200ApplicationJSONStatusEnum = "success"
)

func (e UnloadService200ApplicationJSONStatusEnum) ToPointer() *UnloadService200ApplicationJSONStatusEnum {
	return &e
}

func (e *UnloadService200ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		*e = UnloadService200ApplicationJSONStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UnloadService200ApplicationJSONStatusEnum: %v", v)
	}
}

// UnloadService200ApplicationJSON - unloadService response
type UnloadService200ApplicationJSON struct {
	// The path of the REST API method
	API string `json:"api"`
	// The name of the REST API method
	Method string `json:"method"`
	// Confirmation message
	Response string                                    `json:"response"`
	Status   UnloadService200ApplicationJSONStatusEnum `json:"status"`
}

type UnloadServiceResponse struct {
	ContentType string
	// Error response
	ErrorModel  *shared.ErrorModel
	StatusCode  int
	RawResponse *http.Response
	// unloadService response
	UnloadService200ApplicationJSONObject *UnloadService200ApplicationJSON
}
