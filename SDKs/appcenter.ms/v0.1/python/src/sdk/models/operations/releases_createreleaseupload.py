"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class ReleasesCreateReleaseUploadSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReleasesCreateReleaseUploadRequestBody:
    r"""Optional parameters to create releases with user defined metadata"""
    
    build_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('build_number'), 'exclude': lambda f: f is None }})
    r"""User defined build number"""  
    build_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('build_version'), 'exclude': lambda f: f is None }})
    r"""User defined build version"""  
    

@dataclasses.dataclass
class ReleasesCreateReleaseUploadRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    request_body: Optional[ReleasesCreateReleaseUploadRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})
    r"""Optional parameters to create releases with user defined metadata"""  
    
class ReleasesCreateReleaseUpload404ApplicationJSONCodeEnum(str, Enum):
    BAD_REQUEST = 'BadRequest'
    CONFLICT = 'Conflict'
    NOT_ACCEPTABLE = 'NotAcceptable'
    NOT_FOUND = 'NotFound'
    INTERNAL_SERVER_ERROR = 'InternalServerError'
    UNAUTHORIZED = 'Unauthorized'
    TOO_MANY_REQUESTS = 'TooManyRequests'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReleasesCreateReleaseUpload404ApplicationJSON:
    r"""Error codes:
    - `not_found` - The app doesn't exist.
    """
    
    code: ReleasesCreateReleaseUpload404ApplicationJSONCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    
class ReleasesCreateReleaseUpload400ApplicationJSONCodeEnum(str, Enum):
    BAD_REQUEST = 'BadRequest'
    CONFLICT = 'Conflict'
    NOT_ACCEPTABLE = 'NotAcceptable'
    NOT_FOUND = 'NotFound'
    INTERNAL_SERVER_ERROR = 'InternalServerError'
    UNAUTHORIZED = 'Unauthorized'
    TOO_MANY_REQUESTS = 'TooManyRequests'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReleasesCreateReleaseUpload400ApplicationJSON:
    r"""The request contained invalid properties."""
    
    code: ReleasesCreateReleaseUpload400ApplicationJSONCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReleasesCreateReleaseUpload201ApplicationJSON:
    r"""Created"""
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The ID for the newly created upload. It is going to be required later in the process."""  
    package_asset_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('package_asset_id') }})
    r"""The associated asset ID in the file management service associated with this uploaded."""  
    token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('token') }})
    r"""The access token used for upload permissions."""  
    upload_domain: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upload_domain') }})
    r"""The URL domain used to upload the release."""  
    url_encoded_token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url_encoded_token') }})
    r"""The access token used for upload permissions (URL encoded to use as a single query parameter)."""  
    

@dataclasses.dataclass
class ReleasesCreateReleaseUploadResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    releases_create_release_upload_201_application_json_object: Optional[ReleasesCreateReleaseUpload201ApplicationJSON] = dataclasses.field(default=None)
    r"""Created"""  
    releases_create_release_upload_400_application_json_object: Optional[ReleasesCreateReleaseUpload400ApplicationJSON] = dataclasses.field(default=None)
    r"""The request contained invalid properties."""  
    releases_create_release_upload_404_application_json_object: Optional[ReleasesCreateReleaseUpload404ApplicationJSON] = dataclasses.field(default=None)
    r"""Error codes:
    - `not_found` - The app doesn't exist.
    """  
    