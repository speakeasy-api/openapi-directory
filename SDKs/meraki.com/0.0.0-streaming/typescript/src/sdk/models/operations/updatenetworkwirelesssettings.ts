/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

/**
 * The upgrade strategy to apply to the network. Must be one of 'minimizeUpgradeTime' or 'minimizeClientDowntime'. Requires firmware version MR 26.8 or higher'
 */
export enum UpdateNetworkWirelessSettingsRequestBodyUpgradeStrategyEnum {
  MinimizeClientDowntime = "minimizeClientDowntime",
  MinimizeUpgradeTime = "minimizeUpgradeTime",
}

export class UpdateNetworkWirelessSettingsRequestBody extends SpeakeasyBase {
  /**
   * Toggle for enabling or disabling IPv6 bridging in a network (Note: if enabled, SSIDs must also be configured to use bridge mode)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ipv6BridgeEnabled" })
  ipv6BridgeEnabled?: boolean;

  /**
   * Toggle for enabling or disabling LED lights on all APs in the network (making them run dark)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ledLightsOn" })
  ledLightsOn?: boolean;

  /**
   * Toggle for enabling or disabling location analytics for your network
   */
  @SpeakeasyMetadata()
  @Expose({ name: "locationAnalyticsEnabled" })
  locationAnalyticsEnabled?: boolean;

  /**
   * Toggle for enabling or disabling meshing in a network
   */
  @SpeakeasyMetadata()
  @Expose({ name: "meshingEnabled" })
  meshingEnabled?: boolean;

  /**
   * The upgrade strategy to apply to the network. Must be one of 'minimizeUpgradeTime' or 'minimizeClientDowntime'. Requires firmware version MR 26.8 or higher'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "upgradeStrategy" })
  upgradeStrategy?: UpdateNetworkWirelessSettingsRequestBodyUpgradeStrategyEnum;
}

export class UpdateNetworkWirelessSettingsRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: UpdateNetworkWirelessSettingsRequestBody;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=networkId",
  })
  networkId: string;
}

export class UpdateNetworkWirelessSettingsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  updateNetworkWirelessSettings200ApplicationJSONObject?: Record<string, any>;
}
