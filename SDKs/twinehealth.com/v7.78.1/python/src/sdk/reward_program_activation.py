"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class RewardProgramActivation:
    r"""A reward program activation is the activation of a reward program for a specific patient."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_reward_program_activation(self, request: shared.CreateRewardProgramActivationRequestInput) -> operations.CreateRewardProgramActivationResponse:
        r"""Create a reward program activation
        Create a reward program activation for a patient. There can only be one activation for a patient for a given reward program.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/reward_program_activation'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateRewardProgramActivationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.api+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateRewardProgramActivationResponse])
                res.create_reward_program_activation_response = out
        elif http_res.status_code in [401, 403, 409]:
            if utils.match_content_type(content_type, 'application/vnd.api+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateOrUpdateErrorResponse])
                res.create_or_update_error_response = out

        return res

    def fetch_reward_program_activation(self, request: operations.FetchRewardProgramActivationRequest) -> operations.FetchRewardProgramActivationResponse:
        r"""Get a reward program activation
        Get a reward program activationrecord by id.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.FetchRewardProgramActivationRequest, base_url, '/reward_program_activation/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchRewardProgramActivationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.api+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FetchRewardProgramActivationResponse])
                res.fetch_reward_program_activation_response = out
        elif http_res.status_code in [401, 403]:
            if utils.match_content_type(content_type, 'application/vnd.api+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FetchErrorResponse])
                res.fetch_error_response = out

        return res

    def fetch_reward_program_activations(self, request: operations.FetchRewardProgramActivationsRequest) -> operations.FetchRewardProgramActivationsResponse:
        r"""List reward program activations
        Get a list of reward program activations matching the specified filters.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/reward_program_activation'
        
        query_params = utils.get_query_params(operations.FetchRewardProgramActivationsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchRewardProgramActivationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.api+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FetchRewardProgramActivationsResponse])
                res.fetch_reward_program_activations_response = out
        elif http_res.status_code in [401, 403]:
            if utils.match_content_type(content_type, 'application/vnd.api+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FetchErrorResponse])
                res.fetch_error_response = out

        return res

    