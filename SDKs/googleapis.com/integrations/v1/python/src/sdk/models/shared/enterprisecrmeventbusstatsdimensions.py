"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class EnterpriseCrmEventbusStatsDimensionsEnumFilterTypeEnum(str, Enum):
    r"""Whether to include or exclude the enums matching the regex."""
    DEFAULT_INCLUSIVE = 'DEFAULT_INCLUSIVE'
    EXCLUSIVE = 'EXCLUSIVE'

class EnterpriseCrmEventbusStatsDimensionsRetryAttemptEnum(str, Enum):
    UNSPECIFIED = 'UNSPECIFIED'
    FINAL = 'FINAL'
    RETRYABLE = 'RETRYABLE'
    CANCELED = 'CANCELED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EnterpriseCrmEventbusStatsDimensions:
    
    client_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientId'), 'exclude': lambda f: f is None }})  
    enum_filter_type: Optional[EnterpriseCrmEventbusStatsDimensionsEnumFilterTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enumFilterType'), 'exclude': lambda f: f is None }})
    r"""Whether to include or exclude the enums matching the regex."""  
    error_enum_string: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorEnumString'), 'exclude': lambda f: f is None }})  
    retry_attempt: Optional[EnterpriseCrmEventbusStatsDimensionsRetryAttemptEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('retryAttempt'), 'exclude': lambda f: f is None }})  
    task_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taskName'), 'exclude': lambda f: f is None }})  
    task_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taskNumber'), 'exclude': lambda f: f is None }})  
    trigger_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('triggerId'), 'exclude': lambda f: f is None }})
    r"""Stats have been or will be aggregated on set fields for any semantically-meaningful combination."""  
    warning_enum_string: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('warningEnumString'), 'exclude': lambda f: f is None }})  
    workflow_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workflowId'), 'exclude': lambda f: f is None }})  
    workflow_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workflowName'), 'exclude': lambda f: f is None }})  
    