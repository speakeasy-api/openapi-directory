"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import playlistresponse as shared_playlistresponse
from enum import Enum
from typing import Optional

class GetPlaylistByIDSortEnum(str, Enum):
    r"""How do you want to sort playlist items?"""
    RECENT_ADDED_FIRST = 'recent_added_first'
    OLDEST_ADDED_FIRST = 'oldest_added_first'
    RECENT_PUBLISHED_FIRST = 'recent_published_first'
    OLDEST_PUBLISHED_FIRST = 'oldest_published_first'

class GetPlaylistByIDTypeEnum(str, Enum):
    r"""The type of this playlist, which should be either **episode_list** or **podcast_list**."""
    EPISODE_LIST = 'episode_list'
    PODCAST_LIST = 'podcast_list'


@dataclasses.dataclass
class GetPlaylistByIDRequest:
    
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""Playlist id (always 11 characters, e.g., m1pe7z60bsw).
    You can get the podcast id from the url of a playlist, e.g.,
    m1pe7z60bsw is the playlist id of listennotes.com/listen/podcasts-about-podcasting-m1pe7z60bsw
    """  
    x_listen_api_key: str = dataclasses.field(metadata={'header': { 'field_name': 'X-ListenAPI-Key', 'style': 'simple', 'explode': False }})
    r"""Get API Key on listennotes.com/api"""  
    last_timestamp_ms: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'last_timestamp_ms', 'style': 'form', 'explode': True }})
    r"""For playlist items pagination.
    It's the value of **last_timestamp_ms** from the response of last request.
    If it's 0 or not specified, just return the latest or the oldest 20 items,
    depending on the value of the **sort** parameter.
    """  
    sort: Optional[GetPlaylistByIDSortEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""How do you want to sort playlist items?"""  
    type: Optional[GetPlaylistByIDTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'type', 'style': 'form', 'explode': True }})
    r"""The type of this playlist, which should be either **episode_list** or **podcast_list**."""  
    

@dataclasses.dataclass
class GetPlaylistByIDResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    playlist_response: Optional[shared_playlistresponse.PlaylistResponse] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    