/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";

/**
 * The state of the route.
 */
export enum ReplaceTransitGatewayRouteResultRouteStateEnum {
  Pending = "pending",
  Active = "active",
  Blackhole = "blackhole",
  Deleting = "deleting",
  Deleted = "deleted",
}

/**
 * The resource type. Note that the <code>tgw-peering</code> resource type has been deprecated.
 */
export enum ReplaceTransitGatewayRouteResultRouteTransitGatewayAttachmentsResourceTypeEnum {
  Vpc = "vpc",
  Vpn = "vpn",
  DirectConnectGateway = "direct-connect-gateway",
  Connect = "connect",
  Peering = "peering",
  TgwPeering = "tgw-peering",
}

/**
 * Describes a route attachment.
 */
export class ReplaceTransitGatewayRouteResultRouteTransitGatewayAttachments extends SpeakeasyBase {
  @SpeakeasyMetadata()
  resourceId?: string;

  @SpeakeasyMetadata()
  resourceType?: ReplaceTransitGatewayRouteResultRouteTransitGatewayAttachmentsResourceTypeEnum;

  @SpeakeasyMetadata()
  transitGatewayAttachmentId?: string;
}

/**
 * The route type.
 */
export enum ReplaceTransitGatewayRouteResultRouteTypeEnum {
  Static = "static",
  Propagated = "propagated",
}

/**
 * Information about the modified route.
 */
export class ReplaceTransitGatewayRouteResultRoute extends SpeakeasyBase {
  @SpeakeasyMetadata()
  destinationCidrBlock?: string;

  @SpeakeasyMetadata()
  prefixListId?: string;

  @SpeakeasyMetadata()
  state?: ReplaceTransitGatewayRouteResultRouteStateEnum;

  @SpeakeasyMetadata({
    elemType: ReplaceTransitGatewayRouteResultRouteTransitGatewayAttachments,
  })
  transitGatewayAttachments?: ReplaceTransitGatewayRouteResultRouteTransitGatewayAttachments[];

  @SpeakeasyMetadata()
  transitGatewayRouteTableAnnouncementId?: string;

  @SpeakeasyMetadata()
  type?: ReplaceTransitGatewayRouteResultRouteTypeEnum;
}

/**
 * Success
 */
export class ReplaceTransitGatewayRouteResult extends SpeakeasyBase {
  @SpeakeasyMetadata()
  route?: ReplaceTransitGatewayRouteResultRoute;
}
