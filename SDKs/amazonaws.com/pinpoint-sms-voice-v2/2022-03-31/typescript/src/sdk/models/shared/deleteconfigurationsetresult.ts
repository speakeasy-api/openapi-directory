/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { EventDestination } from "./eventdestination";
import { MessageTypeEnum } from "./messagetypeenum";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Success
 */
export class DeleteConfigurationSetResult extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "ConfigurationSetArn" })
  configurationSetArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ConfigurationSetName" })
  configurationSetName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "CreatedTimestamp" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdTimestamp?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "DefaultMessageType" })
  defaultMessageType?: MessageTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "DefaultSenderId" })
  defaultSenderId?: string;

  @SpeakeasyMetadata({ elemType: EventDestination })
  @Expose({ name: "EventDestinations" })
  @Type(() => EventDestination)
  eventDestinations?: EventDestination[];
}
