/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Road {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Gets a list of disrupted streets. If no date filters are provided, current disruptions are returned.
   */
  roadDisruptedStreets(
    req: operations.RoadDisruptedStreetsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.RoadDisruptedStreetsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RoadDisruptedStreetsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/Road/all/Street/Disruption";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RoadDisruptedStreetsResponse =
        new operations.RoadDisruptedStreetsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.systemObject = utils.objectToClass(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.systemObject = utils.objectToClass(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get active disruptions, filtered by road ids
   */
  roadDisruption(
    req: operations.RoadDisruptionRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.RoadDisruptionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RoadDisruptionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/Road/{ids}/Disruption",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RoadDisruptionResponse =
        new operations.RoadDisruptionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/geo+json`)) {
            res.tflApiPresentationEntitiesRoadDisruptions = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesRoadDisruptions = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesRoadDisruption,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tflApiPresentationEntitiesRoadDisruptions = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesRoadDisruptions = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesRoadDisruption,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.tflApiPresentationEntitiesRoadDisruptions = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesRoadDisruptions = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesRoadDisruption,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of active disruptions filtered by disruption Ids.
   */
  roadDisruptionById(
    req: operations.RoadDisruptionByIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.RoadDisruptionByIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RoadDisruptionByIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/Road/all/Disruption/{disruptionIds}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RoadDisruptionByIdResponse =
        new operations.RoadDisruptionByIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/geo+json`)) {
            res.tflApiPresentationEntitiesRoadDisruption = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesRoadDisruption
            );
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tflApiPresentationEntitiesRoadDisruption = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesRoadDisruption
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.tflApiPresentationEntitiesRoadDisruption = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesRoadDisruption
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets all roads managed by TfL
   */
  roadGet(config?: AxiosRequestConfig): Promise<operations.RoadGetResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/Road";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RoadGetResponse = new operations.RoadGetResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tflApiPresentationEntitiesRoadCorridors = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesRoadCorridors = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesRoadCorridor,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.tflApiPresentationEntitiesRoadCorridors = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesRoadCorridors = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesRoadCorridor,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of valid RoadDisruption categories
   */
  roadMetaCategories(
    config?: AxiosRequestConfig
  ): Promise<operations.RoadMetaCategoriesResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/Road/Meta/Categories";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RoadMetaCategoriesResponse =
        new operations.RoadMetaCategoriesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.roadMetaCategories200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.roadMetaCategories200TextJSONStrings = utils.objectToClass(
              httpRes?.data
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of valid RoadDisruption severity codes
   */
  roadMetaSeverities(
    config?: AxiosRequestConfig
  ): Promise<operations.RoadMetaSeveritiesResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/Road/Meta/Severities";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RoadMetaSeveritiesResponse =
        new operations.RoadMetaSeveritiesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tflApiPresentationEntitiesStatusSeverities = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesStatusSeverities =
              utils.objectToClass(
                httpRes?.data,
                shared.TflApiPresentationEntitiesStatusSeverity,
                resFieldDepth
              );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.tflApiPresentationEntitiesStatusSeverities = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesStatusSeverities =
              utils.objectToClass(
                httpRes?.data,
                shared.TflApiPresentationEntitiesStatusSeverity,
                resFieldDepth
              );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the specified roads with the status aggregated over the date range specified, or now until the end of today if no dates are passed.
   */
  roadStatus(
    req: operations.RoadStatusRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.RoadStatusResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RoadStatusRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/Road/{ids}/Status", req);

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RoadStatusResponse =
        new operations.RoadStatusResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tflApiPresentationEntitiesRoadCorridors = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesRoadCorridors = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesRoadCorridor,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.tflApiPresentationEntitiesRoadCorridors = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesRoadCorridors = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesRoadCorridor,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the road with the specified id (e.g. A1)
   */
  getRoadIds(
    req: operations.GetRoadIdsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRoadIdsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRoadIdsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/Road/{ids}", req);

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRoadIdsResponse =
        new operations.GetRoadIdsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tflApiPresentationEntitiesRoadCorridors = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesRoadCorridors = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesRoadCorridor,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.tflApiPresentationEntitiesRoadCorridors = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.tflApiPresentationEntitiesRoadCorridors = utils.objectToClass(
              httpRes?.data,
              shared.TflApiPresentationEntitiesRoadCorridor,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }
}
