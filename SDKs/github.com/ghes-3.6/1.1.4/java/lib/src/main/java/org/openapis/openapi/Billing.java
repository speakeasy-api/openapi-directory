/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;

/**
 * Monitor charges and usage from Actions and Packages.
 */
public class Billing {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Billing(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Get GitHub Advanced Security active committers for an enterprise
     * Gets the GitHub Advanced Security active committers for an enterprise per repository.
     * 
     * Each distinct user login across all repositories is counted as a single Advanced Security seat, so the `total_advanced_security_committers` is not the sum of active_users for each repository.
     * 
     * The total number of repositories with committer information is tracked by the `total_count` field.
     * https://docs.github.com/enterprise-server@3.6/rest/reference/billing#export-advanced-security-active-committers-data-for-enterprise - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BillingGetGithubAdvancedSecurityBillingGheResponse billingGetGithubAdvancedSecurityBillingGhe(org.openapis.openapi.models.operations.BillingGetGithubAdvancedSecurityBillingGheRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BillingGetGithubAdvancedSecurityBillingGhePathParams.class, baseUrl, "/enterprises/{enterprise}/settings/billing/advanced-security", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.BillingGetGithubAdvancedSecurityBillingGheQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BillingGetGithubAdvancedSecurityBillingGheResponse res = new org.openapis.openapi.models.operations.BillingGetGithubAdvancedSecurityBillingGheResponse() {{
            advancedSecurityActiveCommitters = null;
            basicError = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AdvancedSecurityActiveCommitters out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AdvancedSecurityActiveCommitters.class);
                res.advancedSecurityActiveCommitters = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.BasicError out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.BasicError.class);
                res.basicError = out;
            }
        }

        return res;
    }

    /**
     * Get GitHub Advanced Security active committers for an organization
     * Gets the GitHub Advanced Security active committers for an organization per repository.
     * 
     * Each distinct user login across all repositories is counted as a single Advanced Security seat, so the `total_advanced_security_committers` is not the sum of advanced_security_committers for each repository.
     * 
     * If this organization defers to an enterprise for billing, the `total_advanced_security_committers` returned from the organization API may include some users that are in more than one organization, so they will only consume a single Advanced Security seat at the enterprise level.
     * 
     * The total number of repositories with committer information is tracked by the `total_count` field.
     * https://docs.github.com/enterprise-server@3.6/rest/reference/billing#get-github-advanced-security-active-committers-for-an-organization - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BillingGetGithubAdvancedSecurityBillingOrgResponse billingGetGithubAdvancedSecurityBillingOrg(org.openapis.openapi.models.operations.BillingGetGithubAdvancedSecurityBillingOrgRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BillingGetGithubAdvancedSecurityBillingOrgPathParams.class, baseUrl, "/orgs/{org}/settings/billing/advanced-security", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.BillingGetGithubAdvancedSecurityBillingOrgQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BillingGetGithubAdvancedSecurityBillingOrgResponse res = new org.openapis.openapi.models.operations.BillingGetGithubAdvancedSecurityBillingOrgResponse() {{
            advancedSecurityActiveCommitters = null;
            basicError = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AdvancedSecurityActiveCommitters out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AdvancedSecurityActiveCommitters.class);
                res.advancedSecurityActiveCommitters = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.BasicError out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.BasicError.class);
                res.basicError = out;
            }
        }

        return res;
    }
}