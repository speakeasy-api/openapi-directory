// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PlayerScoreTimeSpanEnum - The time span for this player score.
type PlayerScoreTimeSpanEnum string

const (
	PlayerScoreTimeSpanEnumScoreTimeSpanUnspecified PlayerScoreTimeSpanEnum = "SCORE_TIME_SPAN_UNSPECIFIED"
	PlayerScoreTimeSpanEnumAllTime                  PlayerScoreTimeSpanEnum = "ALL_TIME"
	PlayerScoreTimeSpanEnumWeekly                   PlayerScoreTimeSpanEnum = "WEEKLY"
	PlayerScoreTimeSpanEnumDaily                    PlayerScoreTimeSpanEnum = "DAILY"
)

func (e *PlayerScoreTimeSpanEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SCORE_TIME_SPAN_UNSPECIFIED":
		fallthrough
	case "ALL_TIME":
		fallthrough
	case "WEEKLY":
		fallthrough
	case "DAILY":
		*e = PlayerScoreTimeSpanEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PlayerScoreTimeSpanEnum: %s", s)
	}
}

// PlayerScore - A player score.
type PlayerScore struct {
	// The formatted score for this player score.
	FormattedScore *string `json:"formattedScore,omitempty"`
	// Uniquely identifies the type of this resource. Value is always the fixed string `games#playerScore`.
	Kind *string `json:"kind,omitempty"`
	// The numerical value for this player score.
	Score *string `json:"score,omitempty"`
	// Additional information about this score. Values will contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986.
	ScoreTag *string `json:"scoreTag,omitempty"`
	// The time span for this player score.
	TimeSpan *PlayerScoreTimeSpanEnum `json:"timeSpan,omitempty"`
}
