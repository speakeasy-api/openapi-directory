/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CreateDBClusterMessage - &lt;p/&gt;
 */
public class CreateDBClusterMessage {
    
    public Long allocatedStorage;

    public CreateDBClusterMessage withAllocatedStorage(Long allocatedStorage) {
        this.allocatedStorage = allocatedStorage;
        return this;
    }
    
    
    public Boolean autoMinorVersionUpgrade;

    public CreateDBClusterMessage withAutoMinorVersionUpgrade(Boolean autoMinorVersionUpgrade) {
        this.autoMinorVersionUpgrade = autoMinorVersionUpgrade;
        return this;
    }
    
    
    public String[] availabilityZones;

    public CreateDBClusterMessage withAvailabilityZones(String[] availabilityZones) {
        this.availabilityZones = availabilityZones;
        return this;
    }
    
    
    public Long backtrackWindow;

    public CreateDBClusterMessage withBacktrackWindow(Long backtrackWindow) {
        this.backtrackWindow = backtrackWindow;
        return this;
    }
    
    
    public Long backupRetentionPeriod;

    public CreateDBClusterMessage withBackupRetentionPeriod(Long backupRetentionPeriod) {
        this.backupRetentionPeriod = backupRetentionPeriod;
        return this;
    }
    
    
    public String characterSetName;

    public CreateDBClusterMessage withCharacterSetName(String characterSetName) {
        this.characterSetName = characterSetName;
        return this;
    }
    
    
    public Boolean copyTagsToSnapshot;

    public CreateDBClusterMessage withCopyTagsToSnapshot(Boolean copyTagsToSnapshot) {
        this.copyTagsToSnapshot = copyTagsToSnapshot;
        return this;
    }
    
    
    public String dbClusterIdentifier;

    public CreateDBClusterMessage withDBClusterIdentifier(String dbClusterIdentifier) {
        this.dbClusterIdentifier = dbClusterIdentifier;
        return this;
    }
    
    
    public String dbClusterInstanceClass;

    public CreateDBClusterMessage withDBClusterInstanceClass(String dbClusterInstanceClass) {
        this.dbClusterInstanceClass = dbClusterInstanceClass;
        return this;
    }
    
    
    public String dbClusterParameterGroupName;

    public CreateDBClusterMessage withDBClusterParameterGroupName(String dbClusterParameterGroupName) {
        this.dbClusterParameterGroupName = dbClusterParameterGroupName;
        return this;
    }
    
    
    public String dbSubnetGroupName;

    public CreateDBClusterMessage withDBSubnetGroupName(String dbSubnetGroupName) {
        this.dbSubnetGroupName = dbSubnetGroupName;
        return this;
    }
    
    
    public String dbSystemId;

    public CreateDBClusterMessage withDBSystemId(String dbSystemId) {
        this.dbSystemId = dbSystemId;
        return this;
    }
    
    
    public String databaseName;

    public CreateDBClusterMessage withDatabaseName(String databaseName) {
        this.databaseName = databaseName;
        return this;
    }
    
    
    public Boolean deletionProtection;

    public CreateDBClusterMessage withDeletionProtection(Boolean deletionProtection) {
        this.deletionProtection = deletionProtection;
        return this;
    }
    
    
    public String domain;

    public CreateDBClusterMessage withDomain(String domain) {
        this.domain = domain;
        return this;
    }
    
    
    public String domainIAMRoleName;

    public CreateDBClusterMessage withDomainIAMRoleName(String domainIAMRoleName) {
        this.domainIAMRoleName = domainIAMRoleName;
        return this;
    }
    
    
    public String[] enableCloudwatchLogsExports;

    public CreateDBClusterMessage withEnableCloudwatchLogsExports(String[] enableCloudwatchLogsExports) {
        this.enableCloudwatchLogsExports = enableCloudwatchLogsExports;
        return this;
    }
    
    
    public Boolean enableGlobalWriteForwarding;

    public CreateDBClusterMessage withEnableGlobalWriteForwarding(Boolean enableGlobalWriteForwarding) {
        this.enableGlobalWriteForwarding = enableGlobalWriteForwarding;
        return this;
    }
    
    
    public Boolean enableHttpEndpoint;

    public CreateDBClusterMessage withEnableHttpEndpoint(Boolean enableHttpEndpoint) {
        this.enableHttpEndpoint = enableHttpEndpoint;
        return this;
    }
    
    
    public Boolean enableIAMDatabaseAuthentication;

    public CreateDBClusterMessage withEnableIAMDatabaseAuthentication(Boolean enableIAMDatabaseAuthentication) {
        this.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication;
        return this;
    }
    
    
    public Boolean enablePerformanceInsights;

    public CreateDBClusterMessage withEnablePerformanceInsights(Boolean enablePerformanceInsights) {
        this.enablePerformanceInsights = enablePerformanceInsights;
        return this;
    }
    
    
    public String engine;

    public CreateDBClusterMessage withEngine(String engine) {
        this.engine = engine;
        return this;
    }
    
    
    public String engineMode;

    public CreateDBClusterMessage withEngineMode(String engineMode) {
        this.engineMode = engineMode;
        return this;
    }
    
    
    public String engineVersion;

    public CreateDBClusterMessage withEngineVersion(String engineVersion) {
        this.engineVersion = engineVersion;
        return this;
    }
    
    
    public String globalClusterIdentifier;

    public CreateDBClusterMessage withGlobalClusterIdentifier(String globalClusterIdentifier) {
        this.globalClusterIdentifier = globalClusterIdentifier;
        return this;
    }
    
    
    public Long iops;

    public CreateDBClusterMessage withIops(Long iops) {
        this.iops = iops;
        return this;
    }
    
    
    public String kmsKeyId;

    public CreateDBClusterMessage withKmsKeyId(String kmsKeyId) {
        this.kmsKeyId = kmsKeyId;
        return this;
    }
    
    
    public Boolean manageMasterUserPassword;

    public CreateDBClusterMessage withManageMasterUserPassword(Boolean manageMasterUserPassword) {
        this.manageMasterUserPassword = manageMasterUserPassword;
        return this;
    }
    
    
    public String masterUserPassword;

    public CreateDBClusterMessage withMasterUserPassword(String masterUserPassword) {
        this.masterUserPassword = masterUserPassword;
        return this;
    }
    
    
    public String masterUserSecretKmsKeyId;

    public CreateDBClusterMessage withMasterUserSecretKmsKeyId(String masterUserSecretKmsKeyId) {
        this.masterUserSecretKmsKeyId = masterUserSecretKmsKeyId;
        return this;
    }
    
    
    public String masterUsername;

    public CreateDBClusterMessage withMasterUsername(String masterUsername) {
        this.masterUsername = masterUsername;
        return this;
    }
    
    
    public Long monitoringInterval;

    public CreateDBClusterMessage withMonitoringInterval(Long monitoringInterval) {
        this.monitoringInterval = monitoringInterval;
        return this;
    }
    
    
    public String monitoringRoleArn;

    public CreateDBClusterMessage withMonitoringRoleArn(String monitoringRoleArn) {
        this.monitoringRoleArn = monitoringRoleArn;
        return this;
    }
    
    
    public String networkType;

    public CreateDBClusterMessage withNetworkType(String networkType) {
        this.networkType = networkType;
        return this;
    }
    
    
    public String optionGroupName;

    public CreateDBClusterMessage withOptionGroupName(String optionGroupName) {
        this.optionGroupName = optionGroupName;
        return this;
    }
    
    
    public String performanceInsightsKMSKeyId;

    public CreateDBClusterMessage withPerformanceInsightsKMSKeyId(String performanceInsightsKMSKeyId) {
        this.performanceInsightsKMSKeyId = performanceInsightsKMSKeyId;
        return this;
    }
    
    
    public Long performanceInsightsRetentionPeriod;

    public CreateDBClusterMessage withPerformanceInsightsRetentionPeriod(Long performanceInsightsRetentionPeriod) {
        this.performanceInsightsRetentionPeriod = performanceInsightsRetentionPeriod;
        return this;
    }
    
    
    public Long port;

    public CreateDBClusterMessage withPort(Long port) {
        this.port = port;
        return this;
    }
    
    
    public String preSignedUrl;

    public CreateDBClusterMessage withPreSignedUrl(String preSignedUrl) {
        this.preSignedUrl = preSignedUrl;
        return this;
    }
    
    
    public String preferredBackupWindow;

    public CreateDBClusterMessage withPreferredBackupWindow(String preferredBackupWindow) {
        this.preferredBackupWindow = preferredBackupWindow;
        return this;
    }
    
    
    public String preferredMaintenanceWindow;

    public CreateDBClusterMessage withPreferredMaintenanceWindow(String preferredMaintenanceWindow) {
        this.preferredMaintenanceWindow = preferredMaintenanceWindow;
        return this;
    }
    
    
    public Boolean publiclyAccessible;

    public CreateDBClusterMessage withPubliclyAccessible(Boolean publiclyAccessible) {
        this.publiclyAccessible = publiclyAccessible;
        return this;
    }
    
    
    public String replicationSourceIdentifier;

    public CreateDBClusterMessage withReplicationSourceIdentifier(String replicationSourceIdentifier) {
        this.replicationSourceIdentifier = replicationSourceIdentifier;
        return this;
    }
    
    
    public ScalingConfiguration scalingConfiguration;

    public CreateDBClusterMessage withScalingConfiguration(ScalingConfiguration scalingConfiguration) {
        this.scalingConfiguration = scalingConfiguration;
        return this;
    }
    
    /**
     * &lt;p&gt;Contains the scaling configuration of an Aurora Serverless v2 DB cluster.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html"&gt;Using Amazon Aurora Serverless v2&lt;/a&gt; in the &lt;i&gt;Amazon Aurora User Guide&lt;/i&gt;.&lt;/p&gt;
     */
    
    public ServerlessV2ScalingConfiguration serverlessV2ScalingConfiguration;

    public CreateDBClusterMessage withServerlessV2ScalingConfiguration(ServerlessV2ScalingConfiguration serverlessV2ScalingConfiguration) {
        this.serverlessV2ScalingConfiguration = serverlessV2ScalingConfiguration;
        return this;
    }
    
    
    public String sourceRegion;

    public CreateDBClusterMessage withSourceRegion(String sourceRegion) {
        this.sourceRegion = sourceRegion;
        return this;
    }
    
    
    public Boolean storageEncrypted;

    public CreateDBClusterMessage withStorageEncrypted(Boolean storageEncrypted) {
        this.storageEncrypted = storageEncrypted;
        return this;
    }
    
    
    public String storageType;

    public CreateDBClusterMessage withStorageType(String storageType) {
        this.storageType = storageType;
        return this;
    }
    
    
    public TagList[] tags;

    public CreateDBClusterMessage withTags(TagList[] tags) {
        this.tags = tags;
        return this;
    }
    
    
    public String[] vpcSecurityGroupIds;

    public CreateDBClusterMessage withVpcSecurityGroupIds(String[] vpcSecurityGroupIds) {
        this.vpcSecurityGroupIds = vpcSecurityGroupIds;
        return this;
    }
    
    public CreateDBClusterMessage(@JsonProperty("DBClusterIdentifier") String dbClusterIdentifier, @JsonProperty("Engine") String engine) {
        this.dbClusterIdentifier = dbClusterIdentifier;
        this.engine = engine;
  }
}
