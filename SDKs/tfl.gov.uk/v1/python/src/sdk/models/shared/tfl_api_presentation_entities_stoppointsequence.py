"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import tfl_api_presentation_entities_matchedstop as shared_tfl_api_presentation_entities_matchedstop
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class TflAPIPresentationEntitiesStopPointSequenceServiceTypeEnum(str, Enum):
    REGULAR = 'Regular'
    NIGHT = 'Night'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TflAPIPresentationEntitiesStopPointSequence:
    
    branch_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('branchId'), 'exclude': lambda f: f is None }})
    r"""The id of this branch."""  
    direction: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('direction'), 'exclude': lambda f: f is None }})  
    line_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lineId'), 'exclude': lambda f: f is None }})  
    line_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lineName'), 'exclude': lambda f: f is None }})  
    next_branch_ids: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextBranchIds'), 'exclude': lambda f: f is None }})
    r"""The ids of the next branch(es) in the sequence. Note that the next and previous branch id can be
                identical in the case of a looped route e.g. the Circle line.
    """  
    prev_branch_ids: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prevBranchIds'), 'exclude': lambda f: f is None }})
    r"""The ids of the previous branch(es) in the sequence. Note that the next and previous branch id can be
                identical in the case of a looped route e.g. the Circle line.
    """  
    service_type: Optional[TflAPIPresentationEntitiesStopPointSequenceServiceTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceType'), 'exclude': lambda f: f is None }})  
    stop_point: Optional[list[shared_tfl_api_presentation_entities_matchedstop.TflAPIPresentationEntitiesMatchedStop]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stopPoint'), 'exclude': lambda f: f is None }})  
    