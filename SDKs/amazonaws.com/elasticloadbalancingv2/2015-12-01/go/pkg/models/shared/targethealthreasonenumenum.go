// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TargetHealthReasonEnumEnum string

const (
	TargetHealthReasonEnumEnumElbRegistrationInProgress      TargetHealthReasonEnumEnum = "Elb.RegistrationInProgress"
	TargetHealthReasonEnumEnumElbInitialHealthChecking       TargetHealthReasonEnumEnum = "Elb.InitialHealthChecking"
	TargetHealthReasonEnumEnumTargetResponseCodeMismatch     TargetHealthReasonEnumEnum = "Target.ResponseCodeMismatch"
	TargetHealthReasonEnumEnumTargetTimeout                  TargetHealthReasonEnumEnum = "Target.Timeout"
	TargetHealthReasonEnumEnumTargetFailedHealthChecks       TargetHealthReasonEnumEnum = "Target.FailedHealthChecks"
	TargetHealthReasonEnumEnumTargetNotRegistered            TargetHealthReasonEnumEnum = "Target.NotRegistered"
	TargetHealthReasonEnumEnumTargetNotInUse                 TargetHealthReasonEnumEnum = "Target.NotInUse"
	TargetHealthReasonEnumEnumTargetDeregistrationInProgress TargetHealthReasonEnumEnum = "Target.DeregistrationInProgress"
	TargetHealthReasonEnumEnumTargetInvalidState             TargetHealthReasonEnumEnum = "Target.InvalidState"
	TargetHealthReasonEnumEnumTargetIPUnusable               TargetHealthReasonEnumEnum = "Target.IpUnusable"
	TargetHealthReasonEnumEnumTargetHealthCheckDisabled      TargetHealthReasonEnumEnum = "Target.HealthCheckDisabled"
	TargetHealthReasonEnumEnumElbInternalError               TargetHealthReasonEnumEnum = "Elb.InternalError"
)

func (e TargetHealthReasonEnumEnum) ToPointer() *TargetHealthReasonEnumEnum {
	return &e
}

func (e *TargetHealthReasonEnumEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Elb.RegistrationInProgress":
		fallthrough
	case "Elb.InitialHealthChecking":
		fallthrough
	case "Target.ResponseCodeMismatch":
		fallthrough
	case "Target.Timeout":
		fallthrough
	case "Target.FailedHealthChecks":
		fallthrough
	case "Target.NotRegistered":
		fallthrough
	case "Target.NotInUse":
		fallthrough
	case "Target.DeregistrationInProgress":
		fallthrough
	case "Target.InvalidState":
		fallthrough
	case "Target.IpUnusable":
		fallthrough
	case "Target.HealthCheckDisabled":
		fallthrough
	case "Elb.InternalError":
		*e = TargetHealthReasonEnumEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TargetHealthReasonEnumEnum: %v", v)
	}
}
