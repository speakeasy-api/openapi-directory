/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CellData - Data about a specific cell.
 */
public class CellData {
    /**
     * A data source formula.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataSourceFormula")
    public DataSourceFormula dataSourceFormula;

    public CellData withDataSourceFormula(DataSourceFormula dataSourceFormula) {
        this.dataSourceFormula = dataSourceFormula;
        return this;
    }
    
    /**
     * A data source table, which allows the user to import a static table of data from the DataSource into Sheets. This is also known as "Extract" in the Sheets editor.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataSourceTable")
    public DataSourceTable dataSourceTable;

    public CellData withDataSourceTable(DataSourceTable dataSourceTable) {
        this.dataSourceTable = dataSourceTable;
        return this;
    }
    
    /**
     * A data validation rule.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataValidation")
    public DataValidationRule dataValidation;

    public CellData withDataValidation(DataValidationRule dataValidation) {
        this.dataValidation = dataValidation;
        return this;
    }
    
    /**
     * The format of a cell.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effectiveFormat")
    public CellFormat effectiveFormat;

    public CellData withEffectiveFormat(CellFormat effectiveFormat) {
        this.effectiveFormat = effectiveFormat;
        return this;
    }
    
    /**
     * The kinds of value that a cell in a spreadsheet can have.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effectiveValue")
    public ExtendedValue effectiveValue;

    public CellData withEffectiveValue(ExtendedValue effectiveValue) {
        this.effectiveValue = effectiveValue;
        return this;
    }
    
    /**
     * The formatted value of the cell. This is the value as it's shown to the user. This field is read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("formattedValue")
    public String formattedValue;

    public CellData withFormattedValue(String formattedValue) {
        this.formattedValue = formattedValue;
        return this;
    }
    
    /**
     * A hyperlink this cell points to, if any. If the cell contains multiple hyperlinks, this field will be empty. This field is read-only. To set it, use a `=HYPERLINK` formula in the userEnteredValue.formulaValue field. A cell-level link can also be set from the userEnteredFormat.textFormat field. Alternatively, set a hyperlink in the textFormatRun.format.link field that spans the entire cell.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hyperlink")
    public String hyperlink;

    public CellData withHyperlink(String hyperlink) {
        this.hyperlink = hyperlink;
        return this;
    }
    
    /**
     * Any note on the cell.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("note")
    public String note;

    public CellData withNote(String note) {
        this.note = note;
        return this;
    }
    
    /**
     * A pivot table.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pivotTable")
    public PivotTable pivotTable;

    public CellData withPivotTable(PivotTable pivotTable) {
        this.pivotTable = pivotTable;
        return this;
    }
    
    /**
     * Runs of rich text applied to subsections of the cell. Runs are only valid on user entered strings, not formulas, bools, or numbers. Properties of a run start at a specific index in the text and continue until the next run. Runs will inherit the properties of the cell unless explicitly changed. When writing, the new runs will overwrite any prior runs. When writing a new user_entered_value, previous runs are erased.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("textFormatRuns")
    public TextFormatRun[] textFormatRuns;

    public CellData withTextFormatRuns(TextFormatRun[] textFormatRuns) {
        this.textFormatRuns = textFormatRuns;
        return this;
    }
    
    /**
     * The format of a cell.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userEnteredFormat")
    public CellFormat userEnteredFormat;

    public CellData withUserEnteredFormat(CellFormat userEnteredFormat) {
        this.userEnteredFormat = userEnteredFormat;
        return this;
    }
    
    /**
     * The kinds of value that a cell in a spreadsheet can have.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userEnteredValue")
    public ExtendedValue userEnteredValue;

    public CellData withUserEnteredValue(ExtendedValue userEnteredValue) {
        this.userEnteredValue = userEnteredValue;
        return this;
    }
    
    public CellData(){}
}
