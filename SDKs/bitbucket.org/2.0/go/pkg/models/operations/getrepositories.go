// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetRepositoriesSecurity struct {
	APIKey *string             `security:"scheme,type=apiKey,subtype=header,name=Authorization"`
	Basic  *shared.SchemeBasic `security:"scheme,type=http,subtype=basic"`
	Oauth2 *string             `security:"scheme,type=oauth2,name=Authorization"`
}

// GetRepositoriesRoleEnum - Filters the result based on the authenticated user's role on each repository.
//
// * **member**: returns repositories to which the user has explicit read access
// * **contributor**: returns repositories to which the user has explicit write access
// * **admin**: returns repositories to which the user has explicit administrator access
// * **owner**: returns all repositories owned by the current user
type GetRepositoriesRoleEnum string

const (
	GetRepositoriesRoleEnumAdmin       GetRepositoriesRoleEnum = "admin"
	GetRepositoriesRoleEnumContributor GetRepositoriesRoleEnum = "contributor"
	GetRepositoriesRoleEnumMember      GetRepositoriesRoleEnum = "member"
	GetRepositoriesRoleEnumOwner       GetRepositoriesRoleEnum = "owner"
)

func (e GetRepositoriesRoleEnum) ToPointer() *GetRepositoriesRoleEnum {
	return &e
}

func (e *GetRepositoriesRoleEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "admin":
		fallthrough
	case "contributor":
		fallthrough
	case "member":
		fallthrough
	case "owner":
		*e = GetRepositoriesRoleEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRepositoriesRoleEnum: %v", v)
	}
}

type GetRepositoriesRequest struct {
	// Filter the results to include only repositories created on or
	// after this [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)
	//  timestamp. Example: `YYYY-MM-DDTHH:mm:ss.sssZ`
	After *string `queryParam:"style=form,explode=true,name=after"`
	// Query string to narrow down the response as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
	// `role` parameter must also be specified.
	//
	Q *string `queryParam:"style=form,explode=true,name=q"`
	// Filters the result based on the authenticated user's role on each repository.
	//
	// * **member**: returns repositories to which the user has explicit read access
	// * **contributor**: returns repositories to which the user has explicit write access
	// * **admin**: returns repositories to which the user has explicit administrator access
	// * **owner**: returns all repositories owned by the current user
	//
	Role *GetRepositoriesRoleEnum `queryParam:"style=form,explode=true,name=role"`
	// Field by which the results should be sorted as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
	//
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
}

type GetRepositoriesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// All public repositories.
	PaginatedRepositories *shared.PaginatedRepositories
}
