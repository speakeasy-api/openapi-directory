/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Applications {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Retrieves the metadata of the application with the given ID. If the requested application is not available for the specified `platformType`, the returned response will not include any instance data.
   */
  gamesApplicationsGet(
    req: operations.GamesApplicationsGetRequest,
    security: operations.GamesApplicationsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GamesApplicationsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GamesApplicationsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/games/v1/applications/{applicationId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GamesApplicationsGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GamesApplicationsGetResponse =
        new operations.GamesApplicationsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.application = utils.objectToClass(
              httpRes?.data,
              shared.Application
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a URL for the requested end point type.
   */
  gamesApplicationsGetEndPoint(
    req: operations.GamesApplicationsGetEndPointRequest,
    security: operations.GamesApplicationsGetEndPointSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GamesApplicationsGetEndPointResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GamesApplicationsGetEndPointRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/games/v1/applications/getEndPoint";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GamesApplicationsGetEndPointSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GamesApplicationsGetEndPointResponse =
        new operations.GamesApplicationsGetEndPointResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.endPoint = utils.objectToClass(httpRes?.data, shared.EndPoint);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Indicate that the currently authenticated user is playing your application.
   */
  gamesApplicationsPlayed(
    req: operations.GamesApplicationsPlayedRequest,
    security: operations.GamesApplicationsPlayedSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GamesApplicationsPlayedResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GamesApplicationsPlayedRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/games/v1/applications/played";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GamesApplicationsPlayedSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GamesApplicationsPlayedResponse =
        new operations.GamesApplicationsPlayedResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Verifies the auth token provided with this request is for the application with the specified ID, and returns the ID of the player it was granted for.
   */
  gamesApplicationsVerify(
    req: operations.GamesApplicationsVerifyRequest,
    security: operations.GamesApplicationsVerifySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GamesApplicationsVerifyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GamesApplicationsVerifyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/games/v1/applications/{applicationId}/verify",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GamesApplicationsVerifySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GamesApplicationsVerifyResponse =
        new operations.GamesApplicationsVerifyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.applicationVerifyResponse = utils.objectToClass(
              httpRes?.data,
              shared.ApplicationVerifyResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
