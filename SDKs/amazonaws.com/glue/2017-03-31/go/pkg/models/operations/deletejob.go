// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DeleteJobXAmzTargetEnum
type DeleteJobXAmzTargetEnum string

const (
	DeleteJobXAmzTargetEnumAwsGlueDeleteJob DeleteJobXAmzTargetEnum = "AWSGlue.DeleteJob"
)

func (e DeleteJobXAmzTargetEnum) ToPointer() *DeleteJobXAmzTargetEnum {
	return &e
}

func (e *DeleteJobXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWSGlue.DeleteJob":
		*e = DeleteJobXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteJobXAmzTargetEnum: %v", v)
	}
}

type DeleteJobRequest struct {
	DeleteJobRequest  shared.DeleteJobRequest `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                 `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                 `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                 `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                 `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                 `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                 `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                 `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        DeleteJobXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DeleteJobResponse struct {
	ContentType string
	// Success
	DeleteJobResponse *shared.DeleteJobResponse
	// InternalServiceException
	InternalServiceException interface{}
	// InvalidInputException
	InvalidInputException interface{}
	// OperationTimeoutException
	OperationTimeoutException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
