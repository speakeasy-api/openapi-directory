// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
)

// EventDirectionEnum - Direction of the event
type EventDirectionEnum string

const (
	EventDirectionEnumInbound  EventDirectionEnum = "INBOUND"
	EventDirectionEnumOutbound EventDirectionEnum = "OUTBOUND"
)

func (e EventDirectionEnum) ToPointer() *EventDirectionEnum {
	return &e
}

func (e *EventDirectionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INBOUND":
		fallthrough
	case "OUTBOUND":
		*e = EventDirectionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EventDirectionEnum: %v", v)
	}
}

// EventStateEnum - Status of the event
type EventStateEnum string

const (
	EventStateEnumInitializing EventStateEnum = "INITIALIZING"
	EventStateEnumRinging      EventStateEnum = "RINGING"
	EventStateEnumActive       EventStateEnum = "ACTIVE"
	EventStateEnumHeld         EventStateEnum = "HELD"
	EventStateEnumRemoteHeld   EventStateEnum = "REMOTE_HELD"
	EventStateEnumDetached     EventStateEnum = "DETACHED"
	EventStateEnumRejected     EventStateEnum = "REJECTED"
	EventStateEnumCancelled    EventStateEnum = "CANCELLED"
	EventStateEnumAnswered     EventStateEnum = "ANSWERED"
	EventStateEnumMissed       EventStateEnum = "MISSED"
)

func (e EventStateEnum) ToPointer() *EventStateEnum {
	return &e
}

func (e *EventStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INITIALIZING":
		fallthrough
	case "RINGING":
		fallthrough
	case "ACTIVE":
		fallthrough
	case "HELD":
		fallthrough
	case "REMOTE_HELD":
		fallthrough
	case "DETACHED":
		fallthrough
	case "REJECTED":
		fallthrough
	case "CANCELLED":
		fallthrough
	case "ANSWERED":
		fallthrough
	case "MISSED":
		*e = EventStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EventStateEnum: %v", v)
	}
}

// EventTypeEnum - Record type
type EventTypeEnum string

const (
	EventTypeEnumCall EventTypeEnum = "CALL"
)

func (e EventTypeEnum) ToPointer() *EventTypeEnum {
	return &e
}

func (e *EventTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CALL":
		*e = EventTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EventTypeEnum: %v", v)
	}
}

type Event struct {
	// Unique identifier of the account
	AccountID int64 `json:"accountId"`
	// Time to answer the event
	AnswerTime *types.Date `json:"answerTime,omitempty"`
	// Remote caller ID
	CallerID *string `json:"callerId,omitempty"`
	// Direction of the event
	Direction EventDirectionEnum `json:"direction"`
	// Duration of the call in milliseconds
	Duration *int64 `json:"duration,omitempty"`
	// End time of the event
	EndTime *types.Date `json:"endTime,omitempty"`
	// External identifier of the event
	ExternalID *string `json:"externalId,omitempty"`
	// Unique identifier of the event
	ID int64 `json:"id"`
	// Unique identifier of the account
	PhoneNumber string  `json:"phoneNumber"`
	SmsData     *string `json:"smsData,omitempty"`
	// Start time of the event
	StartTime types.Date `json:"startTime"`
	// Status of the event
	State EventStateEnum `json:"state"`
	// Record type
	Type EventTypeEnum `json:"type"`
	// Unique identifier of communications provider
	UciID int64 `json:"uciId"`
	// Unique identifier of the user
	UserID int64 `json:"userId"`
}
