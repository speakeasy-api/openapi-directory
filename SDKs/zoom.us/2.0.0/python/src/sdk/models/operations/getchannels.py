"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetChannelsSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class GetChannelsRequest:
    
    user_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'userId', 'style': 'simple', 'explode': False }})
    r"""Unique identifier of the user."""  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'next_page_token', 'style': 'form', 'explode': True }})
    r"""The next page token is used to paginate through large result sets. The expiration period for this token is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': True }})
    r"""The number of records returned from a single API call."""  
    

@dataclasses.dataclass
class GetChannels200ApplicationXMLChannelsChannelsSettings:
    
    allow_to_add_external_users: Optional[int] = dataclasses.field(default=None)  
    new_members_can_see_previous_messages_files: Optional[bool] = dataclasses.field(default=None)  
    posting_permissions: Optional[int] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class GetChannels200ApplicationXMLChannels:
    
    channels_settings: Optional[GetChannels200ApplicationXMLChannelsChannelsSettings] = dataclasses.field(default=None)  
    id: Optional[str] = dataclasses.field(default=None)
    r"""Channel ID: Unique identifier of the Channel."""  
    name: Optional[str] = dataclasses.field(default=None)
    r"""Name of the channel."""  
    type: Optional[int] = dataclasses.field(default=None)
    r"""Type of the channel. The value can be one of the following:<br>
    `1`: **Private channel.** In this type of channel, members must be invited to join a channel.<br>
    `2`: **Private channel with users that belong to the same Zoom account**. Members in this channel should be invited and the members should be from the same organization.<br>
    `3`: **Public channel.** Anyone can search for this channel and join the channel. External members cannot be invited.<br>
    `4`: **New chat**. This is an instant channel which can be created by adding members to a new chat.<br>
    `5`: **Public channel**, similar to above, except members can invite members of other accounts.
    """  
    

@dataclasses.dataclass
class GetChannels200ApplicationXML:
    r"""**Status Code**: `200` <br>
    User's channels returned.
    """
    
    channels: Optional[list[GetChannels200ApplicationXMLChannels]] = dataclasses.field(default=None)
    r"""Chat Channel object(s)."""  
    next_page_token: Optional[str] = dataclasses.field(default=None)
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None)
    r"""The number of records returned with a single API call.
    Default value: 30.
    """  
    total_records: Optional[int] = dataclasses.field(default=None)
    r"""The total number of records found."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetChannels200ApplicationJSONChannelsChannelsSettings:
    
    allow_to_add_external_users: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_to_add_external_users'), 'exclude': lambda f: f is None }})  
    new_members_can_see_previous_messages_files: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('new_members_can_see_previous_messages_files'), 'exclude': lambda f: f is None }})  
    posting_permissions: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('posting_permissions'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetChannels200ApplicationJSONChannels:
    
    channels_settings: Optional[GetChannels200ApplicationJSONChannelsChannelsSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channels_settings'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Channel ID: Unique identifier of the Channel."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the channel."""  
    type: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of the channel. The value can be one of the following:<br>
    `1`: **Private channel.** In this type of channel, members must be invited to join a channel.<br>
    `2`: **Private channel with users that belong to the same Zoom account**. Members in this channel should be invited and the members should be from the same organization.<br>
    `3`: **Public channel.** Anyone can search for this channel and join the channel. External members cannot be invited.<br>
    `4`: **New chat**. This is an instant channel which can be created by adding members to a new chat.<br>
    `5`: **Public channel**, similar to above, except members can invite members of other accounts.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetChannels200ApplicationJSON:
    r"""**Status Code**: `200` <br>
    User's channels returned.
    """
    
    channels: Optional[list[GetChannels200ApplicationJSONChannels]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channels'), 'exclude': lambda f: f is None }})
    r"""Chat Channel object(s)."""  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page_token'), 'exclude': lambda f: f is None }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_size'), 'exclude': lambda f: f is None }})
    r"""The number of records returned with a single API call.
    Default value: 30.
    """  
    total_records: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_records'), 'exclude': lambda f: f is None }})
    r"""The total number of records found."""  
    

@dataclasses.dataclass
class GetChannelsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    get_channels_200_application_json_object: Optional[GetChannels200ApplicationJSON] = dataclasses.field(default=None)
    r"""**Status Code**: `200` <br>
    User's channels returned.
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    