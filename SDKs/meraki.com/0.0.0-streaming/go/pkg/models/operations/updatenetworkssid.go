// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type UpdateNetworkSsidRequestBodyApTagsAndVlanIds struct {
	// Comma-separated list of AP tags
	Tags *string `json:"tags,omitempty"`
	// Numerical identifier that is assigned to the VLAN
	VlanID *int64 `json:"vlanId,omitempty"`
}

// UpdateNetworkSsidRequestBodyAuthModeEnum - The association control method for the SSID ('open', 'open-enhanced', 'psk', 'open-with-radius', 'open-with-nac', '8021x-meraki', '8021x-nac', '8021x-radius', '8021x-google', '8021x-localradius', 'ipsk-with-radius' or 'ipsk-without-radius')
type UpdateNetworkSsidRequestBodyAuthModeEnum string

const (
	UpdateNetworkSsidRequestBodyAuthModeEnumEightThousandAndTwentyOnexGoogle      UpdateNetworkSsidRequestBodyAuthModeEnum = "8021x-google"
	UpdateNetworkSsidRequestBodyAuthModeEnumEightThousandAndTwentyOnexLocalradius UpdateNetworkSsidRequestBodyAuthModeEnum = "8021x-localradius"
	UpdateNetworkSsidRequestBodyAuthModeEnumEightThousandAndTwentyOnexMeraki      UpdateNetworkSsidRequestBodyAuthModeEnum = "8021x-meraki"
	UpdateNetworkSsidRequestBodyAuthModeEnumEightThousandAndTwentyOnexNac         UpdateNetworkSsidRequestBodyAuthModeEnum = "8021x-nac"
	UpdateNetworkSsidRequestBodyAuthModeEnumEightThousandAndTwentyOnexRadius      UpdateNetworkSsidRequestBodyAuthModeEnum = "8021x-radius"
	UpdateNetworkSsidRequestBodyAuthModeEnumIpskWithRadius                        UpdateNetworkSsidRequestBodyAuthModeEnum = "ipsk-with-radius"
	UpdateNetworkSsidRequestBodyAuthModeEnumIpskWithoutRadius                     UpdateNetworkSsidRequestBodyAuthModeEnum = "ipsk-without-radius"
	UpdateNetworkSsidRequestBodyAuthModeEnumOpen                                  UpdateNetworkSsidRequestBodyAuthModeEnum = "open"
	UpdateNetworkSsidRequestBodyAuthModeEnumOpenEnhanced                          UpdateNetworkSsidRequestBodyAuthModeEnum = "open-enhanced"
	UpdateNetworkSsidRequestBodyAuthModeEnumOpenWithNac                           UpdateNetworkSsidRequestBodyAuthModeEnum = "open-with-nac"
	UpdateNetworkSsidRequestBodyAuthModeEnumOpenWithRadius                        UpdateNetworkSsidRequestBodyAuthModeEnum = "open-with-radius"
	UpdateNetworkSsidRequestBodyAuthModeEnumPsk                                   UpdateNetworkSsidRequestBodyAuthModeEnum = "psk"
)

func (e *UpdateNetworkSsidRequestBodyAuthModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "8021x-google":
		fallthrough
	case "8021x-localradius":
		fallthrough
	case "8021x-meraki":
		fallthrough
	case "8021x-nac":
		fallthrough
	case "8021x-radius":
		fallthrough
	case "ipsk-with-radius":
		fallthrough
	case "ipsk-without-radius":
		fallthrough
	case "open":
		fallthrough
	case "open-enhanced":
		fallthrough
	case "open-with-nac":
		fallthrough
	case "open-with-radius":
		fallthrough
	case "psk":
		*e = UpdateNetworkSsidRequestBodyAuthModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkSsidRequestBodyAuthModeEnum: %s", s)
	}
}

// UpdateNetworkSsidRequestBodyEncryptionModeEnum - The psk encryption mode for the SSID ('wep' or 'wpa'). This param is only valid if the authMode is 'psk'
type UpdateNetworkSsidRequestBodyEncryptionModeEnum string

const (
	UpdateNetworkSsidRequestBodyEncryptionModeEnumWep UpdateNetworkSsidRequestBodyEncryptionModeEnum = "wep"
	UpdateNetworkSsidRequestBodyEncryptionModeEnumWpa UpdateNetworkSsidRequestBodyEncryptionModeEnum = "wpa"
)

func (e *UpdateNetworkSsidRequestBodyEncryptionModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "wep":
		fallthrough
	case "wpa":
		*e = UpdateNetworkSsidRequestBodyEncryptionModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkSsidRequestBodyEncryptionModeEnum: %s", s)
	}
}

// UpdateNetworkSsidRequestBodyEnterpriseAdminAccessEnum - Whether or not an SSID is accessible by 'enterprise' administrators ('access disabled' or 'access enabled')
type UpdateNetworkSsidRequestBodyEnterpriseAdminAccessEnum string

const (
	UpdateNetworkSsidRequestBodyEnterpriseAdminAccessEnumAccessDisabled UpdateNetworkSsidRequestBodyEnterpriseAdminAccessEnum = "access disabled"
	UpdateNetworkSsidRequestBodyEnterpriseAdminAccessEnumAccessEnabled  UpdateNetworkSsidRequestBodyEnterpriseAdminAccessEnum = "access enabled"
)

func (e *UpdateNetworkSsidRequestBodyEnterpriseAdminAccessEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "access disabled":
		fallthrough
	case "access enabled":
		*e = UpdateNetworkSsidRequestBodyEnterpriseAdminAccessEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkSsidRequestBodyEnterpriseAdminAccessEnum: %s", s)
	}
}

type UpdateNetworkSsidRequestBodyRadiusAccountingServers struct {
	// IP address to which the APs will send RADIUS accounting messages
	Host string `json:"host"`
	// Port on the RADIUS server that is listening for accounting messages
	Port *int64 `json:"port,omitempty"`
	// Shared key used to authenticate messages between the APs and RADIUS server
	Secret *string `json:"secret,omitempty"`
}

// UpdateNetworkSsidRequestBodyRadiusFailoverPolicyEnum - This policy determines how authentication requests should be handled in the event that all of the configured RADIUS servers are unreachable ('Deny access' or 'Allow access')
type UpdateNetworkSsidRequestBodyRadiusFailoverPolicyEnum string

const (
	UpdateNetworkSsidRequestBodyRadiusFailoverPolicyEnumAllowAccess UpdateNetworkSsidRequestBodyRadiusFailoverPolicyEnum = "Allow access"
	UpdateNetworkSsidRequestBodyRadiusFailoverPolicyEnumDenyAccess  UpdateNetworkSsidRequestBodyRadiusFailoverPolicyEnum = "Deny access"
)

func (e *UpdateNetworkSsidRequestBodyRadiusFailoverPolicyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Allow access":
		fallthrough
	case "Deny access":
		*e = UpdateNetworkSsidRequestBodyRadiusFailoverPolicyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkSsidRequestBodyRadiusFailoverPolicyEnum: %s", s)
	}
}

// UpdateNetworkSsidRequestBodyRadiusLoadBalancingPolicyEnum - This policy determines which RADIUS server will be contacted first in an authentication attempt and the ordering of any necessary retry attempts ('Strict priority order' or 'Round robin')
type UpdateNetworkSsidRequestBodyRadiusLoadBalancingPolicyEnum string

const (
	UpdateNetworkSsidRequestBodyRadiusLoadBalancingPolicyEnumRoundRobin          UpdateNetworkSsidRequestBodyRadiusLoadBalancingPolicyEnum = "Round robin"
	UpdateNetworkSsidRequestBodyRadiusLoadBalancingPolicyEnumStrictPriorityOrder UpdateNetworkSsidRequestBodyRadiusLoadBalancingPolicyEnum = "Strict priority order"
)

func (e *UpdateNetworkSsidRequestBodyRadiusLoadBalancingPolicyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Round robin":
		fallthrough
	case "Strict priority order":
		*e = UpdateNetworkSsidRequestBodyRadiusLoadBalancingPolicyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkSsidRequestBodyRadiusLoadBalancingPolicyEnum: %s", s)
	}
}

type UpdateNetworkSsidRequestBodyRadiusServers struct {
	// IP address of your RADIUS server
	Host string `json:"host"`
	// UDP port the RADIUS server listens on for Access-requests
	Port *int64 `json:"port,omitempty"`
	// RADIUS client shared secret
	Secret *string `json:"secret,omitempty"`
}

// UpdateNetworkSsidRequestBodySplashPageEnum - The type of splash page for the SSID ('None', 'Click-through splash page', 'Billing', 'Password-protected with Meraki RADIUS', 'Password-protected with custom RADIUS', 'Password-protected with Active Directory', 'Password-protected with LDAP', 'SMS authentication', 'Systems Manager Sentry', 'Facebook Wi-Fi', 'Google OAuth', 'Sponsored guest', 'Cisco ISE' or 'Google Apps domain'). This attribute is not supported for template children.
type UpdateNetworkSsidRequestBodySplashPageEnum string

const (
	UpdateNetworkSsidRequestBodySplashPageEnumBilling                              UpdateNetworkSsidRequestBodySplashPageEnum = "Billing"
	UpdateNetworkSsidRequestBodySplashPageEnumCiscoIse                             UpdateNetworkSsidRequestBodySplashPageEnum = "Cisco ISE"
	UpdateNetworkSsidRequestBodySplashPageEnumClickThroughSplashPage               UpdateNetworkSsidRequestBodySplashPageEnum = "Click-through splash page"
	UpdateNetworkSsidRequestBodySplashPageEnumFacebookWiFi                         UpdateNetworkSsidRequestBodySplashPageEnum = "Facebook Wi-Fi"
	UpdateNetworkSsidRequestBodySplashPageEnumGoogleAppsDomain                     UpdateNetworkSsidRequestBodySplashPageEnum = "Google Apps domain"
	UpdateNetworkSsidRequestBodySplashPageEnumGoogleOAuth                          UpdateNetworkSsidRequestBodySplashPageEnum = "Google OAuth"
	UpdateNetworkSsidRequestBodySplashPageEnumNone                                 UpdateNetworkSsidRequestBodySplashPageEnum = "None"
	UpdateNetworkSsidRequestBodySplashPageEnumPasswordProtectedWithActiveDirectory UpdateNetworkSsidRequestBodySplashPageEnum = "Password-protected with Active Directory"
	UpdateNetworkSsidRequestBodySplashPageEnumPasswordProtectedWithLdap            UpdateNetworkSsidRequestBodySplashPageEnum = "Password-protected with LDAP"
	UpdateNetworkSsidRequestBodySplashPageEnumPasswordProtectedWithMerakiRadius    UpdateNetworkSsidRequestBodySplashPageEnum = "Password-protected with Meraki RADIUS"
	UpdateNetworkSsidRequestBodySplashPageEnumPasswordProtectedWithCustomRadius    UpdateNetworkSsidRequestBodySplashPageEnum = "Password-protected with custom RADIUS"
	UpdateNetworkSsidRequestBodySplashPageEnumSmsAuthentication                    UpdateNetworkSsidRequestBodySplashPageEnum = "SMS authentication"
	UpdateNetworkSsidRequestBodySplashPageEnumSponsoredGuest                       UpdateNetworkSsidRequestBodySplashPageEnum = "Sponsored guest"
	UpdateNetworkSsidRequestBodySplashPageEnumSystemsManagerSentry                 UpdateNetworkSsidRequestBodySplashPageEnum = "Systems Manager Sentry"
)

func (e *UpdateNetworkSsidRequestBodySplashPageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Billing":
		fallthrough
	case "Cisco ISE":
		fallthrough
	case "Click-through splash page":
		fallthrough
	case "Facebook Wi-Fi":
		fallthrough
	case "Google Apps domain":
		fallthrough
	case "Google OAuth":
		fallthrough
	case "None":
		fallthrough
	case "Password-protected with Active Directory":
		fallthrough
	case "Password-protected with LDAP":
		fallthrough
	case "Password-protected with Meraki RADIUS":
		fallthrough
	case "Password-protected with custom RADIUS":
		fallthrough
	case "SMS authentication":
		fallthrough
	case "Sponsored guest":
		fallthrough
	case "Systems Manager Sentry":
		*e = UpdateNetworkSsidRequestBodySplashPageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkSsidRequestBodySplashPageEnum: %s", s)
	}
}

// UpdateNetworkSsidRequestBodyWpaEncryptionModeEnum - The types of WPA encryption. ('WPA1 only', 'WPA1 and WPA2', 'WPA2 only', 'WPA3 Transition Mode' or 'WPA3 only')
type UpdateNetworkSsidRequestBodyWpaEncryptionModeEnum string

const (
	UpdateNetworkSsidRequestBodyWpaEncryptionModeEnumWpa1AndWpa2        UpdateNetworkSsidRequestBodyWpaEncryptionModeEnum = "WPA1 and WPA2"
	UpdateNetworkSsidRequestBodyWpaEncryptionModeEnumWpa1Only           UpdateNetworkSsidRequestBodyWpaEncryptionModeEnum = "WPA1 only"
	UpdateNetworkSsidRequestBodyWpaEncryptionModeEnumWpa2Only           UpdateNetworkSsidRequestBodyWpaEncryptionModeEnum = "WPA2 only"
	UpdateNetworkSsidRequestBodyWpaEncryptionModeEnumWpa3TransitionMode UpdateNetworkSsidRequestBodyWpaEncryptionModeEnum = "WPA3 Transition Mode"
	UpdateNetworkSsidRequestBodyWpaEncryptionModeEnumWpa3Only           UpdateNetworkSsidRequestBodyWpaEncryptionModeEnum = "WPA3 only"
)

func (e *UpdateNetworkSsidRequestBodyWpaEncryptionModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "WPA1 and WPA2":
		fallthrough
	case "WPA1 only":
		fallthrough
	case "WPA2 only":
		fallthrough
	case "WPA3 Transition Mode":
		fallthrough
	case "WPA3 only":
		*e = UpdateNetworkSsidRequestBodyWpaEncryptionModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkSsidRequestBodyWpaEncryptionModeEnum: %s", s)
	}
}

type UpdateNetworkSsidRequestBody struct {
	// The list of tags and VLAN IDs used for VLAN tagging. This param is only valid when the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
	ApTagsAndVlanIds []UpdateNetworkSsidRequestBodyApTagsAndVlanIds `json:"apTagsAndVlanIds,omitempty"`
	// The association control method for the SSID ('open', 'open-enhanced', 'psk', 'open-with-radius', 'open-with-nac', '8021x-meraki', '8021x-nac', '8021x-radius', '8021x-google', '8021x-localradius', 'ipsk-with-radius' or 'ipsk-without-radius')
	AuthMode *UpdateNetworkSsidRequestBodyAuthModeEnum `json:"authMode,omitempty"`
	// Accepts a list of tags for this SSID. If availableOnAllAps is false, then the SSID will only be broadcast by APs with tags matching any of the tags in this list.
	AvailabilityTags []string `json:"availabilityTags,omitempty"`
	// Boolean indicating whether all APs should broadcast the SSID or if it should be restricted to APs matching any availability tags. Can only be false if the SSID has availability tags.
	AvailableOnAllAps *bool `json:"availableOnAllAps,omitempty"`
	// The client-serving radio frequencies of this SSID in the default indoor RF profile. ('Dual band operation', '5 GHz band only' or 'Dual band operation with Band Steering')
	BandSelection *string `json:"bandSelection,omitempty"`
	// The concentrator to use when the ipAssignmentMode is 'Layer 3 roaming with a concentrator' or 'VPN'.
	ConcentratorNetworkID *string `json:"concentratorNetworkId,omitempty"`
	// The default VLAN ID used for 'all other APs'. This param is only valid when the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
	DefaultVlanID *int64 `json:"defaultVlanId,omitempty"`
	// Disassociate clients when 'VPN' concentrator failover occurs in order to trigger clients to re-associate and generate new DHCP requests. This param is only valid if ipAssignmentMode is 'VPN'.
	DisassociateClientsOnVpnFailover *bool `json:"disassociateClientsOnVpnFailover,omitempty"`
	// Whether or not the SSID is enabled
	Enabled *bool `json:"enabled,omitempty"`
	// The psk encryption mode for the SSID ('wep' or 'wpa'). This param is only valid if the authMode is 'psk'
	EncryptionMode *UpdateNetworkSsidRequestBodyEncryptionModeEnum `json:"encryptionMode,omitempty"`
	// Whether or not an SSID is accessible by 'enterprise' administrators ('access disabled' or 'access enabled')
	EnterpriseAdminAccess *UpdateNetworkSsidRequestBodyEnterpriseAdminAccessEnum `json:"enterpriseAdminAccess,omitempty"`
	// The client IP assignment mode ('NAT mode', 'Bridge mode', 'Layer 3 roaming', 'Ethernet over GRE', 'Layer 3 roaming with a concentrator' or 'VPN')
	IPAssignmentMode *string `json:"ipAssignmentMode,omitempty"`
	// Boolean indicating whether Layer 2 LAN isolation should be enabled or disabled. Only configurable when ipAssignmentMode is 'Bridge mode'.
	LanIsolationEnabled *bool `json:"lanIsolationEnabled,omitempty"`
	// The minimum bitrate in Mbps of this SSID in the default indoor RF profile. ('1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54')
	MinBitrate *float32 `json:"minBitrate,omitempty"`
	// The name of the SSID
	Name *string `json:"name,omitempty"`
	// The download bandwidth limit in Kbps. (0 represents no limit.)
	PerClientBandwidthLimitDown *int64 `json:"perClientBandwidthLimitDown,omitempty"`
	// The upload bandwidth limit in Kbps. (0 represents no limit.)
	PerClientBandwidthLimitUp *int64 `json:"perClientBandwidthLimitUp,omitempty"`
	// The passkey for the SSID. This param is only valid if the authMode is 'psk'
	Psk *string `json:"psk,omitempty"`
	// Whether or not RADIUS accounting is enabled. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius'
	RadiusAccountingEnabled *bool `json:"radiusAccountingEnabled,omitempty"`
	// The RADIUS accounting 802.1X servers to be used for authentication. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius' and radiusAccountingEnabled is 'true'
	RadiusAccountingServers []UpdateNetworkSsidRequestBodyRadiusAccountingServers `json:"radiusAccountingServers,omitempty"`
	// Specify the RADIUS attribute used to look up group policies ('Filter-Id', 'Reply-Message', 'Airespace-ACL-Name' or 'Aruba-User-Role'). Access points must receive this attribute in the RADIUS Access-Accept message
	RadiusAttributeForGroupPolicies *string `json:"radiusAttributeForGroupPolicies,omitempty"`
	// If true, Meraki devices will act as a RADIUS Dynamic Authorization Server and will respond to RADIUS Change-of-Authorization and Disconnect messages sent by the RADIUS server.
	RadiusCoaEnabled *bool `json:"radiusCoaEnabled,omitempty"`
	// This policy determines how authentication requests should be handled in the event that all of the configured RADIUS servers are unreachable ('Deny access' or 'Allow access')
	RadiusFailoverPolicy *UpdateNetworkSsidRequestBodyRadiusFailoverPolicyEnum `json:"radiusFailoverPolicy,omitempty"`
	// This policy determines which RADIUS server will be contacted first in an authentication attempt and the ordering of any necessary retry attempts ('Strict priority order' or 'Round robin')
	RadiusLoadBalancingPolicy *UpdateNetworkSsidRequestBodyRadiusLoadBalancingPolicyEnum `json:"radiusLoadBalancingPolicy,omitempty"`
	// If true, the RADIUS response can override VLAN tag. This is not valid when ipAssignmentMode is 'NAT mode'.
	RadiusOverride *bool `json:"radiusOverride,omitempty"`
	// The RADIUS 802.1X servers to be used for authentication. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius'
	RadiusServers []UpdateNetworkSsidRequestBodyRadiusServers `json:"radiusServers,omitempty"`
	// The secondary concentrator to use when the ipAssignmentMode is 'VPN'. If configured, the APs will switch to using this concentrator if the primary concentrator is unreachable. This param is optional. ('disabled' represents no secondary concentrator.)
	SecondaryConcentratorNetworkID *string `json:"secondaryConcentratorNetworkId,omitempty"`
	// The type of splash page for the SSID ('None', 'Click-through splash page', 'Billing', 'Password-protected with Meraki RADIUS', 'Password-protected with custom RADIUS', 'Password-protected with Active Directory', 'Password-protected with LDAP', 'SMS authentication', 'Systems Manager Sentry', 'Facebook Wi-Fi', 'Google OAuth', 'Sponsored guest', 'Cisco ISE' or 'Google Apps domain'). This attribute is not supported for template children.
	SplashPage *UpdateNetworkSsidRequestBodySplashPageEnum `json:"splashPage,omitempty"`
	// Whether or not traffic should be directed to use specific VLANs. This param is only valid if the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
	UseVlanTagging *bool `json:"useVlanTagging,omitempty"`
	// Boolean indicating whether APs should advertise or hide this SSID. APs will only broadcast this SSID if set to true
	Visible *bool `json:"visible,omitempty"`
	// The VLAN ID used for VLAN tagging. This param is only valid when the ipAssignmentMode is 'Layer 3 roaming with a concentrator' or 'VPN'
	VlanID *int64 `json:"vlanId,omitempty"`
	// Allow access to a configurable list of IP ranges, which users may access prior to sign-on.
	WalledGardenEnabled *bool `json:"walledGardenEnabled,omitempty"`
	// Specify your walled garden by entering space-separated addresses, ranges using CIDR notation, domain names, and domain wildcards (e.g. 192.168.1.1/24 192.168.37.10/32 www.yahoo.com *.google.com). Meraki's splash page is automatically included in your walled garden.
	WalledGardenRanges *string `json:"walledGardenRanges,omitempty"`
	// The types of WPA encryption. ('WPA1 only', 'WPA1 and WPA2', 'WPA2 only', 'WPA3 Transition Mode' or 'WPA3 only')
	WpaEncryptionMode *UpdateNetworkSsidRequestBodyWpaEncryptionModeEnum `json:"wpaEncryptionMode,omitempty"`
}

type UpdateNetworkSsidRequest struct {
	RequestBody *UpdateNetworkSsidRequestBody `request:"mediaType=application/json"`
	NetworkID   string                        `pathParam:"style=simple,explode=false,name=networkId"`
	Number      string                        `pathParam:"style=simple,explode=false,name=number"`
}

type UpdateNetworkSsidResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateNetworkSsid200ApplicationJSONObject map[string]interface{}
}
