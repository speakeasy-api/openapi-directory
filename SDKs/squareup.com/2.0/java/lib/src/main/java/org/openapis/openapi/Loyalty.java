/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class Loyalty {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Loyalty(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * AccumulateLoyaltyPoints
     * Adds points to a loyalty account.
     * 
     * - If you are using the Orders API to manage orders, you only provide the `order_id`. 
     * The endpoint reads the order to compute points to add to the buyer's account.
     * - If you are not using the Orders API to manage orders, 
     * you first perform a client-side computation to compute the points.  
     * For spend-based and visit-based programs, you can first call 
     * [CalculateLoyaltyPoints](https://developer.squareup.com/reference/square_2021-08-18/loyalty-api/calculate-loyalty-points) to compute the points  
     * that you provide to this endpoint. 
     * 
     * __Note:__ The country of the seller's Square account determines whether tax is included in the purchase amount when accruing points for spend-based and visit-based programs. 
     * For more information, see [Availability of Square Loyalty](https://developer.squareup.com/docs/loyalty-api/overview#loyalty-market-availability).
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AccumulateLoyaltyPointsResponse accumulateLoyaltyPoints(org.openapis.openapi.models.operations.AccumulateLoyaltyPointsRequest request, org.openapis.openapi.models.operations.AccumulateLoyaltyPointsSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.AccumulateLoyaltyPointsRequest.class, baseUrl, "/v2/loyalty/accounts/{account_id}/accumulate", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "accumulateLoyaltyPointsRequest", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AccumulateLoyaltyPointsResponse res = new org.openapis.openapi.models.operations.AccumulateLoyaltyPointsResponse(contentType, httpRes.statusCode()) {{
            accumulateLoyaltyPointsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AccumulateLoyaltyPointsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AccumulateLoyaltyPointsResponse.class);
                res.accumulateLoyaltyPointsResponse = out;
            }
        }

        return res;
    }

    /**
     * AdjustLoyaltyPoints
     * Adds points to or subtracts points from a buyer's account. 
     * 
     * Use this endpoint only when you need to manually adjust points. Otherwise, in your application flow, you call 
     * [AccumulateLoyaltyPoints](https://developer.squareup.com/reference/square_2021-08-18/loyalty-api/accumulate-loyalty-points) 
     * to add points when a buyer pays for the purchase.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AdjustLoyaltyPointsResponse adjustLoyaltyPoints(org.openapis.openapi.models.operations.AdjustLoyaltyPointsRequest request, org.openapis.openapi.models.operations.AdjustLoyaltyPointsSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.AdjustLoyaltyPointsRequest.class, baseUrl, "/v2/loyalty/accounts/{account_id}/adjust", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "adjustLoyaltyPointsRequest", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AdjustLoyaltyPointsResponse res = new org.openapis.openapi.models.operations.AdjustLoyaltyPointsResponse(contentType, httpRes.statusCode()) {{
            adjustLoyaltyPointsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AdjustLoyaltyPointsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AdjustLoyaltyPointsResponse.class);
                res.adjustLoyaltyPointsResponse = out;
            }
        }

        return res;
    }

    /**
     * CalculateLoyaltyPoints
     * Calculates the points a purchase earns.
     * 
     * - If you are using the Orders API to manage orders, you provide `order_id` in the request. The 
     * endpoint calculates the points by reading the order.
     * - If you are not using the Orders API to manage orders, you provide the purchase amount in 
     * the request for the endpoint to calculate the points.
     * 
     * An application might call this endpoint to show the points that a buyer can earn with the 
     * specific purchase.
     * 
     * __Note:__ The country of the seller's Square account determines whether tax is included in the purchase amount when accruing points for spend-based and visit-based programs. 
     * For more information, see [Availability of Square Loyalty](https://developer.squareup.com/docs/loyalty-api/overview#loyalty-market-availability).
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CalculateLoyaltyPointsResponse calculateLoyaltyPoints(org.openapis.openapi.models.operations.CalculateLoyaltyPointsRequest request, org.openapis.openapi.models.operations.CalculateLoyaltyPointsSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CalculateLoyaltyPointsRequest.class, baseUrl, "/v2/loyalty/programs/{program_id}/calculate", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "calculateLoyaltyPointsRequest", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CalculateLoyaltyPointsResponse res = new org.openapis.openapi.models.operations.CalculateLoyaltyPointsResponse(contentType, httpRes.statusCode()) {{
            calculateLoyaltyPointsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CalculateLoyaltyPointsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CalculateLoyaltyPointsResponse.class);
                res.calculateLoyaltyPointsResponse = out;
            }
        }

        return res;
    }

    /**
     * CreateLoyaltyAccount
     * Creates a loyalty account. To create a loyalty account, you must provide the `program_id` and a `mapping` with the `phone_number` of the buyer.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateLoyaltyAccountResponse createLoyaltyAccount(org.openapis.openapi.models.shared.CreateLoyaltyAccountRequest request, org.openapis.openapi.models.operations.CreateLoyaltyAccountSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/loyalty/accounts");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateLoyaltyAccountResponse res = new org.openapis.openapi.models.operations.CreateLoyaltyAccountResponse(contentType, httpRes.statusCode()) {{
            createLoyaltyAccountResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CreateLoyaltyAccountResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CreateLoyaltyAccountResponse.class);
                res.createLoyaltyAccountResponse = out;
            }
        }

        return res;
    }

    /**
     * CreateLoyaltyReward
     * Creates a loyalty reward. In the process, the endpoint does following:
     * 
     * - Uses the `reward_tier_id` in the request to determine the number of points 
     * to lock for this reward. 
     * - If the request includes `order_id`, it adds the reward and related discount to the order. 
     * 
     * After a reward is created, the points are locked and 
     * not available for the buyer to redeem another reward.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateLoyaltyRewardResponse createLoyaltyReward(org.openapis.openapi.models.shared.CreateLoyaltyRewardRequest request, org.openapis.openapi.models.operations.CreateLoyaltyRewardSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/loyalty/rewards");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateLoyaltyRewardResponse res = new org.openapis.openapi.models.operations.CreateLoyaltyRewardResponse(contentType, httpRes.statusCode()) {{
            createLoyaltyRewardResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CreateLoyaltyRewardResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CreateLoyaltyRewardResponse.class);
                res.createLoyaltyRewardResponse = out;
            }
        }

        return res;
    }

    /**
     * DeleteLoyaltyReward
     * Deletes a loyalty reward by doing the following:
     * 
     * - Returns the loyalty points back to the loyalty account.
     * - If an order ID was specified when the reward was created 
     * (see [CreateLoyaltyReward](https://developer.squareup.com/reference/square_2021-08-18/loyalty-api/create-loyalty-reward)), 
     * it updates the order by removing the reward and related 
     * discounts.
     * 
     * You cannot delete a reward that has reached the terminal state (REDEEMED).
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteLoyaltyRewardResponse deleteLoyaltyReward(org.openapis.openapi.models.operations.DeleteLoyaltyRewardRequest request, org.openapis.openapi.models.operations.DeleteLoyaltyRewardSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteLoyaltyRewardRequest.class, baseUrl, "/v2/loyalty/rewards/{reward_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteLoyaltyRewardResponse res = new org.openapis.openapi.models.operations.DeleteLoyaltyRewardResponse(contentType, httpRes.statusCode()) {{
            deleteLoyaltyRewardResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.DeleteLoyaltyRewardResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.DeleteLoyaltyRewardResponse.class);
                res.deleteLoyaltyRewardResponse = out;
            }
        }

        return res;
    }

    /**
     * ListLoyaltyPrograms
     * Returns a list of loyalty programs in the seller's account.
     * Loyalty programs define how buyers can earn points and redeem points for rewards. Square sellers can have only one loyalty program, which is created and managed from the Seller Dashboard. For more information, see [Loyalty Program Overview](https://developer.squareup.com/docs/loyalty/overview).
     * 
     * 
     * Replaced with [RetrieveLoyaltyProgram](https://developer.squareup.com/reference/square_2021-08-18/loyalty-api/retrieve-loyalty-program) when used with the keyword `main`.
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListLoyaltyProgramsResponse listLoyaltyPrograms(org.openapis.openapi.models.operations.ListLoyaltyProgramsSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/loyalty/programs");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListLoyaltyProgramsResponse res = new org.openapis.openapi.models.operations.ListLoyaltyProgramsResponse(contentType, httpRes.statusCode()) {{
            listLoyaltyProgramsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ListLoyaltyProgramsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ListLoyaltyProgramsResponse.class);
                res.listLoyaltyProgramsResponse = out;
            }
        }

        return res;
    }

    /**
     * RedeemLoyaltyReward
     * Redeems a loyalty reward.
     * 
     * The endpoint sets the reward to the `REDEEMED` terminal state. 
     * 
     * If you are using your own order processing system (not using the 
     * Orders API), you call this endpoint after the buyer paid for the 
     * purchase.
     * 
     * After the reward reaches the terminal state, it cannot be deleted. 
     * In other words, points used for the reward cannot be returned 
     * to the account.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RedeemLoyaltyRewardResponse redeemLoyaltyReward(org.openapis.openapi.models.operations.RedeemLoyaltyRewardRequest request, org.openapis.openapi.models.operations.RedeemLoyaltyRewardSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RedeemLoyaltyRewardRequest.class, baseUrl, "/v2/loyalty/rewards/{reward_id}/redeem", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "redeemLoyaltyRewardRequest", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RedeemLoyaltyRewardResponse res = new org.openapis.openapi.models.operations.RedeemLoyaltyRewardResponse(contentType, httpRes.statusCode()) {{
            redeemLoyaltyRewardResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.RedeemLoyaltyRewardResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.RedeemLoyaltyRewardResponse.class);
                res.redeemLoyaltyRewardResponse = out;
            }
        }

        return res;
    }

    /**
     * RetrieveLoyaltyAccount
     * Retrieves a loyalty account.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RetrieveLoyaltyAccountResponse retrieveLoyaltyAccount(org.openapis.openapi.models.operations.RetrieveLoyaltyAccountRequest request, org.openapis.openapi.models.operations.RetrieveLoyaltyAccountSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RetrieveLoyaltyAccountRequest.class, baseUrl, "/v2/loyalty/accounts/{account_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RetrieveLoyaltyAccountResponse res = new org.openapis.openapi.models.operations.RetrieveLoyaltyAccountResponse(contentType, httpRes.statusCode()) {{
            retrieveLoyaltyAccountResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.RetrieveLoyaltyAccountResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.RetrieveLoyaltyAccountResponse.class);
                res.retrieveLoyaltyAccountResponse = out;
            }
        }

        return res;
    }

    /**
     * RetrieveLoyaltyProgram
     * Retrieves the loyalty program in a seller's account, specified by the program ID or the keyword `main`. 
     * 
     * Loyalty programs define how buyers can earn points and redeem points for rewards. Square sellers can have only one loyalty program, which is created and managed from the Seller Dashboard. For more information, see [Loyalty Program Overview](https://developer.squareup.com/docs/loyalty/overview).
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RetrieveLoyaltyProgramResponse retrieveLoyaltyProgram(org.openapis.openapi.models.operations.RetrieveLoyaltyProgramRequest request, org.openapis.openapi.models.operations.RetrieveLoyaltyProgramSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RetrieveLoyaltyProgramRequest.class, baseUrl, "/v2/loyalty/programs/{program_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RetrieveLoyaltyProgramResponse res = new org.openapis.openapi.models.operations.RetrieveLoyaltyProgramResponse(contentType, httpRes.statusCode()) {{
            retrieveLoyaltyProgramResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.RetrieveLoyaltyProgramResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.RetrieveLoyaltyProgramResponse.class);
                res.retrieveLoyaltyProgramResponse = out;
            }
        }

        return res;
    }

    /**
     * RetrieveLoyaltyReward
     * Retrieves a loyalty reward.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RetrieveLoyaltyRewardResponse retrieveLoyaltyReward(org.openapis.openapi.models.operations.RetrieveLoyaltyRewardRequest request, org.openapis.openapi.models.operations.RetrieveLoyaltyRewardSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.RetrieveLoyaltyRewardRequest.class, baseUrl, "/v2/loyalty/rewards/{reward_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RetrieveLoyaltyRewardResponse res = new org.openapis.openapi.models.operations.RetrieveLoyaltyRewardResponse(contentType, httpRes.statusCode()) {{
            retrieveLoyaltyRewardResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.RetrieveLoyaltyRewardResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.RetrieveLoyaltyRewardResponse.class);
                res.retrieveLoyaltyRewardResponse = out;
            }
        }

        return res;
    }

    /**
     * SearchLoyaltyAccounts
     * Searches for loyalty accounts in a loyalty program.  
     * 
     * You can search for a loyalty account using the phone number or customer ID associated with the account. To return all loyalty accounts, specify an empty `query` object or omit it entirely.  
     * 
     * Search results are sorted by `created_at` in ascending order.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.SearchLoyaltyAccountsResponse searchLoyaltyAccounts(org.openapis.openapi.models.shared.SearchLoyaltyAccountsRequest request, org.openapis.openapi.models.operations.SearchLoyaltyAccountsSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/loyalty/accounts/search");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.SearchLoyaltyAccountsResponse res = new org.openapis.openapi.models.operations.SearchLoyaltyAccountsResponse(contentType, httpRes.statusCode()) {{
            searchLoyaltyAccountsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SearchLoyaltyAccountsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SearchLoyaltyAccountsResponse.class);
                res.searchLoyaltyAccountsResponse = out;
            }
        }

        return res;
    }

    /**
     * SearchLoyaltyEvents
     * Searches for loyalty events.
     * 
     * A Square loyalty program maintains a ledger of events that occur during the lifetime of a 
     * buyer's loyalty account. Each change in the point balance 
     * (for example, points earned, points redeemed, and points expired) is 
     * recorded in the ledger. Using this endpoint, you can search the ledger for events.
     * 
     * Search results are sorted by `created_at` in descending order.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.SearchLoyaltyEventsResponse searchLoyaltyEvents(org.openapis.openapi.models.shared.SearchLoyaltyEventsRequest request, org.openapis.openapi.models.operations.SearchLoyaltyEventsSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/loyalty/events/search");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.SearchLoyaltyEventsResponse res = new org.openapis.openapi.models.operations.SearchLoyaltyEventsResponse(contentType, httpRes.statusCode()) {{
            searchLoyaltyEventsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SearchLoyaltyEventsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SearchLoyaltyEventsResponse.class);
                res.searchLoyaltyEventsResponse = out;
            }
        }

        return res;
    }

    /**
     * SearchLoyaltyRewards
     * Searches for loyalty rewards in a loyalty account. 
     * 
     * In the current implementation, the endpoint supports search by the reward `status`.
     * 
     * If you know a reward ID, use the 
     * [RetrieveLoyaltyReward](https://developer.squareup.com/reference/square_2021-08-18/loyalty-api/retrieve-loyalty-reward) endpoint.
     * 
     * Search results are sorted by `updated_at` in descending order.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.SearchLoyaltyRewardsResponse searchLoyaltyRewards(org.openapis.openapi.models.shared.SearchLoyaltyRewardsRequest request, org.openapis.openapi.models.operations.SearchLoyaltyRewardsSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/loyalty/rewards/search");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.SearchLoyaltyRewardsResponse res = new org.openapis.openapi.models.operations.SearchLoyaltyRewardsResponse(contentType, httpRes.statusCode()) {{
            searchLoyaltyRewardsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SearchLoyaltyRewardsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SearchLoyaltyRewardsResponse.class);
                res.searchLoyaltyRewardsResponse = out;
            }
        }

        return res;
    }
}