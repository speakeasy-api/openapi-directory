// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type DistributionGroupsAddUsersForOrgSecurity struct {
	APIToken shared.SchemeAPIToken `security:"scheme,type=apiKey,subtype=header"`
}

type DistributionGroupsAddUsersForOrgPathParams struct {
	// The name of the distribution group
	DistributionGroupName string `pathParam:"style=simple,explode=false,name=distribution_group_name"`
	// The organization's name
	OrgName string `pathParam:"style=simple,explode=false,name=org_name"`
}

// DistributionGroupsAddUsersForOrgRequestBody - list of user email addresses that should get added as members to the specified group
type DistributionGroupsAddUsersForOrgRequestBody struct {
	// The list of emails of the users
	UserEmails []string `json:"user_emails,omitempty"`
}

type DistributionGroupsAddUsersForOrgRequest struct {
	PathParams DistributionGroupsAddUsersForOrgPathParams
	// list of user email addresses that should get added as members to the specified group
	Request  DistributionGroupsAddUsersForOrgRequestBody `request:"mediaType=application/json"`
	Security DistributionGroupsAddUsersForOrgSecurity
}

type DistributionGroupsAddUsersForOrgDefaultApplicationJSONErrorCodeEnum string

const (
	DistributionGroupsAddUsersForOrgDefaultApplicationJSONErrorCodeEnumBadRequest          DistributionGroupsAddUsersForOrgDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	DistributionGroupsAddUsersForOrgDefaultApplicationJSONErrorCodeEnumConflict            DistributionGroupsAddUsersForOrgDefaultApplicationJSONErrorCodeEnum = "Conflict"
	DistributionGroupsAddUsersForOrgDefaultApplicationJSONErrorCodeEnumNotAcceptable       DistributionGroupsAddUsersForOrgDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	DistributionGroupsAddUsersForOrgDefaultApplicationJSONErrorCodeEnumNotFound            DistributionGroupsAddUsersForOrgDefaultApplicationJSONErrorCodeEnum = "NotFound"
	DistributionGroupsAddUsersForOrgDefaultApplicationJSONErrorCodeEnumInternalServerError DistributionGroupsAddUsersForOrgDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	DistributionGroupsAddUsersForOrgDefaultApplicationJSONErrorCodeEnumUnauthorized        DistributionGroupsAddUsersForOrgDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	DistributionGroupsAddUsersForOrgDefaultApplicationJSONErrorCodeEnumTooManyRequests     DistributionGroupsAddUsersForOrgDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *DistributionGroupsAddUsersForOrgDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = DistributionGroupsAddUsersForOrgDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DistributionGroupsAddUsersForOrgDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type DistributionGroupsAddUsersForOrgDefaultApplicationJSONError struct {
	Code    DistributionGroupsAddUsersForOrgDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                                              `json:"message"`
}

// DistributionGroupsAddUsersForOrgDefaultApplicationJSON - Error
type DistributionGroupsAddUsersForOrgDefaultApplicationJSON struct {
	Error DistributionGroupsAddUsersForOrgDefaultApplicationJSONError `json:"error"`
}

type DistributionGroupsAddUsersForOrg200ApplicationJSON struct {
	// The code of the result
	Code *string `json:"code,omitempty"`
	// Whether the has accepted the invite. Available when an invite is pending, and the value will be "true".
	InvitePending *bool `json:"invite_pending,omitempty"`
	// The message of the result
	Message *string `json:"message,omitempty"`
	// The status code of the result
	Status int64 `json:"status"`
	// The email of the user
	UserEmail *string `json:"user_email,omitempty"`
}

type DistributionGroupsAddUsersForOrgResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	DistributionGroupsAddUsersForOrg200ApplicationJSONObjects []DistributionGroupsAddUsersForOrg200ApplicationJSON
	// Error
	DistributionGroupsAddUsersForOrgDefaultApplicationJSONObject *DistributionGroupsAddUsersForOrgDefaultApplicationJSON
}
