<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class CredentialOperations 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Change Password
     * 
     * Change Password
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChangePasswordRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ChangePasswordResponse
     */
	public function changePassword(
        \OpenAPI\OpenAPI\Models\Operations\ChangePasswordRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ChangePasswordResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/users/{userId}/credentials/change_password', \OpenAPI\OpenAPI\Models\Operations\ChangePasswordRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChangePasswordResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Change Recovery Question
     * 
     * Change Recovery Question
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChangeRecoveryQuestionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ChangeRecoveryQuestionResponse
     */
	public function changeRecoveryQuestion(
        \OpenAPI\OpenAPI\Models\Operations\ChangeRecoveryQuestionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ChangeRecoveryQuestionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/users/{userId}/credentials/change_recovery_question', \OpenAPI\OpenAPI\Models\Operations\ChangeRecoveryQuestionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChangeRecoveryQuestionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Forgot Password (One Time Code)
     * 
     * Forgot Password (One Time Code)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ForgotPasswordOneTimeCodeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ForgotPasswordOneTimeCodeResponse
     */
	public function forgotPasswordOneTimeCode(
        \OpenAPI\OpenAPI\Models\Operations\ForgotPasswordOneTimeCodeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ForgotPasswordOneTimeCodeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/users/{userId}/credentials/forgot_password', \OpenAPI\OpenAPI\Models\Operations\ForgotPasswordOneTimeCodeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ForgotPasswordOneTimeCodeRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ForgotPasswordOneTimeCodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Set Recovery Credential
     * 
     * Set Recovery Credential
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SetRecoveryCredentialRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SetRecoveryCredentialResponse
     */
	public function setRecoveryCredential(
        \OpenAPI\OpenAPI\Models\Operations\SetRecoveryCredentialRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SetRecoveryCredentialResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/users/{userId}', \OpenAPI\OpenAPI\Models\Operations\SetRecoveryCredentialRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SetRecoveryCredentialResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}