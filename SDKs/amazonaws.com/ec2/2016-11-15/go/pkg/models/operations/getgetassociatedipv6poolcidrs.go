// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETGETAssociatedIpv6PoolCidrsActionEnum
type GETGETAssociatedIpv6PoolCidrsActionEnum string

const (
	GETGETAssociatedIpv6PoolCidrsActionEnumGetAssociatedIpv6PoolCidrs GETGETAssociatedIpv6PoolCidrsActionEnum = "GetAssociatedIpv6PoolCidrs"
)

func (e *GETGETAssociatedIpv6PoolCidrsActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "GetAssociatedIpv6PoolCidrs":
		*e = GETGETAssociatedIpv6PoolCidrsActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETGETAssociatedIpv6PoolCidrsActionEnum: %s", s)
	}
}

// GETGETAssociatedIpv6PoolCidrsVersionEnum
type GETGETAssociatedIpv6PoolCidrsVersionEnum string

const (
	GETGETAssociatedIpv6PoolCidrsVersionEnumTwoThousandAndSixteen1115 GETGETAssociatedIpv6PoolCidrsVersionEnum = "2016-11-15"
)

func (e *GETGETAssociatedIpv6PoolCidrsVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETGETAssociatedIpv6PoolCidrsVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETGETAssociatedIpv6PoolCidrsVersionEnum: %s", s)
	}
}

type GETGETAssociatedIpv6PoolCidrsQueryParams struct {
	Action GETGETAssociatedIpv6PoolCidrsActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
	MaxResults *int64 `queryParam:"style=form,explode=true,name=MaxResults"`
	// The token for the next page of results.
	NextToken *string `queryParam:"style=form,explode=true,name=NextToken"`
	// The ID of the IPv6 address pool.
	PoolID  string                                   `queryParam:"style=form,explode=true,name=PoolId"`
	Version GETGETAssociatedIpv6PoolCidrsVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETGETAssociatedIpv6PoolCidrsHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETGETAssociatedIpv6PoolCidrsRequest struct {
	QueryParams GETGETAssociatedIpv6PoolCidrsQueryParams
	Headers     GETGETAssociatedIpv6PoolCidrsHeaders
}

type GETGETAssociatedIpv6PoolCidrsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
