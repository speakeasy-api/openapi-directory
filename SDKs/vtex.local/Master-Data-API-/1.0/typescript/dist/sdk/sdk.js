"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = exports.ServerList = void 0;
var utils = __importStar(require("../internal/utils"));
var addresses_1 = require("./addresses");
var clusters_1 = require("./clusters");
var customerprofiles_1 = require("./customerprofiles");
var documents_1 = require("./documents");
var indices_1 = require("./indices");
var shared = __importStar(require("./models/shared"));
var schemas_1 = require("./schemas");
var scroll_1 = require("./scroll");
var search_1 = require("./search");
var versions_1 = require("./versions");
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = [
    "https://vtex.local",
    /**
     * VTEX server url
     */
    "https://{accountName}.{environment}.com.br",
];
/**
 * # ATTENTION: **This version isn't compliant with data entities of old version (e.g. CL and AD). It's possible to use this configuration only to new data entities.**
 *
 * @remarks
 *
 *
 * ## Welcome!
 *
 * VTEX Master Data is an easy-to-use, secure, fast, scalable and extensible repository. On it you can create your own Entities, store data and consult directly from the storefront or use it to store info for some external integration.
 *
 * There are internal VTEX modules that use VTEX Master Data as data repository. We have the VTEX Customer Service, VTEX Profile System and VTEX InStore, for example. It is also used by other internal services.
 *
 * There are two ways to use Master Data:
 *
 * 1. Directly from the storefront
 * 2. External integration
 *
 * ### Directly from the storefront
 *
 * If your scenario is to be used inside the storefront, be aware of the following observations:
 *
 * 1. Use the storefront host to query or store information to avoid **CORS**;
 * 2. Configure which information should be public and which shouldn't, inside the JSON Schema of the Data Entity;
 * 3. Do not create query loops (the storefront may be affected with Throttling and apis may be turned off as a security protection);
 * 4. Never add via JS any type of authentication key (x-vtex-api-appkey or x-vtex-api-apptoken);
 *
 * **It's important to avoid CORS using the relative path**
 *
 * ### External Integration
 *
 * If your scenario is to perform external integration, such as migrating client data from another service, be aware of the following observations:
 *
 * 1. Use the host ```{{accountName}}.vtexcommercestable.com.br```;
 * 2. Use the authentication keys (x-vtex-api-appkey ou x-vtex-api-apptoken);
 *
 * ### Most used attributes listed here
 *
 * | Name | Description |
 * | -------- | -------- |
 * | accountName | Account name in VTEX License Manager |
 * | name | Data Entity name |
 * | schema | JSON Schema of a Data Entity |
 * | id | Identifier of a document |
 * | x-vtex-api-appKey | User key |
 * | x-vtex-api-appToken | User token |
 */
var SDK = /** @class */ (function () {
    function SDK(props) {
        var _a, _b;
        this._language = "typescript";
        this._sdkVersion = "0.0.1";
        this._genVersion = "internal";
        this._serverURL = (_a = props === null || props === void 0 ? void 0 : props.serverURL) !== null && _a !== void 0 ? _a : exports.ServerList[0];
        this._defaultClient =
            (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create({ baseURL: this._serverURL });
        if (props === null || props === void 0 ? void 0 : props.security) {
            var security = props.security;
            if (!(props.security instanceof utils.SpeakeasyBase))
                security = new shared.Security(props.security);
            this._securityClient = utils.createSecurityClient(this._defaultClient, security);
        }
        else {
            this._securityClient = this._defaultClient;
        }
        this.addresses = new addresses_1.Addresses(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.clusters = new clusters_1.Clusters(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.customerProfiles = new customerprofiles_1.CustomerProfiles(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.documents = new documents_1.Documents(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.indices = new indices_1.Indices(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.schemas = new schemas_1.Schemas(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.scroll = new scroll_1.Scroll(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.search = new search_1.Search(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.versions = new versions_1.Versions(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
    }
    return SDK;
}());
exports.SDK = SDK;
