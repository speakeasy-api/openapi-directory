"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Quota:
    
    bandwidth_limit: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandwidthLimit'), 'exclude': lambda f: f is None }})
    r"""Total number of bytes that can be transferred per month."""  
    bandwidth_used: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandwidthUsed'), 'exclude': lambda f: f is None }})
    r"""Number of bytes transferred this month."""  
    disk_limit: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('diskLimit'), 'exclude': lambda f: f is None }})
    r"""Amount of disk space that the account has available to it. This may be increased by upgrading to a larger plan."""  
    disk_used: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('diskUsed'), 'exclude': lambda f: f is None }})
    r"""Amount of disk space currently in use."""  
    notice_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('noticeEnabled'), 'exclude': lambda f: f is None }})
    r"""Should a quota warning be sent to the account owner when a threshold level of space utilization is reached?"""  
    notice_threshold: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('noticeThreshold'), 'exclude': lambda f: f is None }})
    r"""Treshold that triggers a quota notification. This represents the \\"percent full\\" your account must be before the quota notification is generated."""  
    transactions_limit: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transactionsLimit'), 'exclude': lambda f: f is None }})
    r"""Total number of transactions allowed in a 24-hour period."""  
    transactions_notice_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transactionsNoticeEnabled'), 'exclude': lambda f: f is None }})
    r"""Whether an email should be sent to the account owner up to once per day if transaction usage exceeds `transactionsNoticeThreshold` value."""  
    transactions_notice_threshold: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transactionsNoticeThreshold'), 'exclude': lambda f: f is None }})
    r"""Percent of daily transactions limit that will trigger an email if activity exceeds it."""  
    