"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class SymbolUploadsListSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    
class SymbolUploadsListStatusEnum(str, Enum):
    r"""Filter results by the current status of a symbol upload: * all: all states in the symbol upload process. Includes created, aborted, committed, processing, indexed and failed states * uploaded: all states after package is uploaded. Includes committed, processing, indexed and failed states * processed: symbol upload processing is completed. Includes indexed and failed states."""
    ALL = 'all'
    UPLOADED = 'uploaded'
    PROCESSED = 'processed'

class SymbolUploadsListSymbolTypeEnum(str, Enum):
    r"""The type of symbols"""
    ANDROID_PROGUARD = 'AndroidProguard'
    APPLE = 'Apple'
    BREAKPAD = 'Breakpad'
    JAVA_SCRIPT = 'JavaScript'
    UWP = 'UWP'


@dataclasses.dataclass
class SymbolUploadsListRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    status: Optional[SymbolUploadsListStatusEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'status', 'style': 'form', 'explode': True }})
    r"""Filter results by the current status of a symbol upload: * all: all states in the symbol upload process. Includes created, aborted, committed, processing, indexed and failed states * uploaded: all states after package is uploaded. Includes committed, processing, indexed and failed states * processed: symbol upload processing is completed. Includes indexed and failed states."""  
    symbol_type: Optional[SymbolUploadsListSymbolTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'symbol_type', 'style': 'form', 'explode': True }})
    r"""The type of symbols"""  
    top: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'top', 'style': 'form', 'explode': True }})
    r"""The maximum number of results to return."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SymbolUploadsList500ApplicationJSON:
    r"""Internal error"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SymbolUploadsList403ApplicationJSON:
    r"""Unauthorized"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    
class SymbolUploadsList200ApplicationJSONOriginEnum(str, Enum):
    r"""The origin of the symbol upload"""
    USER = 'User'
    SYSTEM = 'System'

class SymbolUploadsList200ApplicationJSONStatusEnum(str, Enum):
    r"""The current status for the symbol upload"""
    CREATED = 'created'
    COMMITTED = 'committed'
    ABORTED = 'aborted'
    PROCESSING = 'processing'
    INDEXED = 'indexed'
    FAILED = 'failed'

class SymbolUploadsList200ApplicationJSONSymbolTypeEnum(str, Enum):
    r"""The type of the symbol for the current symbol upload"""
    APPLE = 'Apple'
    JAVA_SCRIPT = 'JavaScript'
    BREAKPAD = 'Breakpad'
    ANDROID_PROGUARD = 'AndroidProguard'
    UWP = 'UWP'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SymbolUploadsList200ApplicationJSONSymbolsUploaded:
    
    platform: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('platform') }})
    r"""The platform the symbol is associated with"""  
    symbol_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('symbol_id') }})
    r"""The symbol id of the symbol binary"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SymbolUploadsList200ApplicationJSONUser:
    r"""User information of the one who intitiated the symbol upload"""
    
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display_name'), 'exclude': lambda f: f is None }})
    r"""The full name of the user. Might for example be first and last name"""  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""The email of the user"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SymbolUploadsList200ApplicationJSON:
    r"""A single symbol upload entity"""
    
    app_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('app_id') }})
    r"""The application that this symbol upload belongs to"""  
    status: SymbolUploadsList200ApplicationJSONStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""The current status for the symbol upload"""  
    symbol_type: SymbolUploadsList200ApplicationJSONSymbolTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('symbol_type') }})
    r"""The type of the symbol for the current symbol upload"""  
    symbol_upload_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('symbol_upload_id') }})
    r"""The id for the current symbol upload"""  
    file_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_name'), 'exclude': lambda f: f is None }})
    r"""The file name for the symbol upload"""  
    file_size: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_size'), 'exclude': lambda f: f is None }})
    r"""The size of the file in Mebibytes. This may be 0 until the status is indexed"""  
    origin: Optional[SymbolUploadsList200ApplicationJSONOriginEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('origin'), 'exclude': lambda f: f is None }})
    r"""The origin of the symbol upload"""  
    symbols_uploaded: Optional[list[SymbolUploadsList200ApplicationJSONSymbolsUploaded]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('symbols_uploaded'), 'exclude': lambda f: f is None }})
    r"""The symbols found in the upload. This may be empty until the status is indexed"""  
    timestamp: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""When the symbol upload was committed, or last transaction time if not committed"""  
    user: Optional[SymbolUploadsList200ApplicationJSONUser] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user'), 'exclude': lambda f: f is None }})
    r"""User information of the one who intitiated the symbol upload"""  
    

@dataclasses.dataclass
class SymbolUploadsListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    symbol_uploads_list_200_application_json_objects: Optional[list[SymbolUploadsList200ApplicationJSON]] = dataclasses.field(default=None)
    r"""Success"""  
    symbol_uploads_list_403_application_json_object: Optional[SymbolUploadsList403ApplicationJSON] = dataclasses.field(default=None)
    r"""Unauthorized"""  
    symbol_uploads_list_500_application_json_object: Optional[SymbolUploadsList500ApplicationJSON] = dataclasses.field(default=None)
    r"""Internal error"""  
    