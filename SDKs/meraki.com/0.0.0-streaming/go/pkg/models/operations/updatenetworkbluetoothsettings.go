// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UpdateNetworkBluetoothSettingsRequestBodyMajorMinorAssignmentModeEnum - The way major and minor number should be assigned to nodes in the network. ('Unique', 'Non-unique')
type UpdateNetworkBluetoothSettingsRequestBodyMajorMinorAssignmentModeEnum string

const (
	UpdateNetworkBluetoothSettingsRequestBodyMajorMinorAssignmentModeEnumNonUnique UpdateNetworkBluetoothSettingsRequestBodyMajorMinorAssignmentModeEnum = "Non-unique"
	UpdateNetworkBluetoothSettingsRequestBodyMajorMinorAssignmentModeEnumUnique    UpdateNetworkBluetoothSettingsRequestBodyMajorMinorAssignmentModeEnum = "Unique"
)

func (e UpdateNetworkBluetoothSettingsRequestBodyMajorMinorAssignmentModeEnum) ToPointer() *UpdateNetworkBluetoothSettingsRequestBodyMajorMinorAssignmentModeEnum {
	return &e
}

func (e *UpdateNetworkBluetoothSettingsRequestBodyMajorMinorAssignmentModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Non-unique":
		fallthrough
	case "Unique":
		*e = UpdateNetworkBluetoothSettingsRequestBodyMajorMinorAssignmentModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkBluetoothSettingsRequestBodyMajorMinorAssignmentModeEnum: %v", v)
	}
}

type UpdateNetworkBluetoothSettingsRequestBody struct {
	// Whether APs will advertise beacons.
	AdvertisingEnabled *bool `json:"advertisingEnabled,omitempty"`
	// The major number to be used in the beacon identifier. Only valid in 'Non-unique' mode.
	Major *int64 `json:"major,omitempty"`
	// The way major and minor number should be assigned to nodes in the network. ('Unique', 'Non-unique')
	MajorMinorAssignmentMode *UpdateNetworkBluetoothSettingsRequestBodyMajorMinorAssignmentModeEnum `json:"majorMinorAssignmentMode,omitempty"`
	// The minor number to be used in the beacon identifier. Only valid in 'Non-unique' mode.
	Minor *int64 `json:"minor,omitempty"`
	// Whether APs will scan for Bluetooth enabled clients.
	ScanningEnabled *bool `json:"scanningEnabled,omitempty"`
	// The UUID to be used in the beacon identifier.
	UUID *string `json:"uuid,omitempty"`
}

type UpdateNetworkBluetoothSettingsRequest struct {
	RequestBody *UpdateNetworkBluetoothSettingsRequestBody `request:"mediaType=application/json"`
	NetworkID   string                                     `pathParam:"style=simple,explode=false,name=networkId"`
}

// UpdateNetworkBluetoothSettings200ApplicationJSON - Successful operation
type UpdateNetworkBluetoothSettings200ApplicationJSON struct {
	// Whether APs will advertise beacons.
	AdvertisingEnabled *bool `json:"advertisingEnabled,omitempty"`
	// The major number to be used in the beacon identifier. Only valid in 'Non-unique' mode.
	Major *int64 `json:"major,omitempty"`
	// The way major and minor number should be assigned to nodes in the network. ('Unique', 'Non-unique')
	MajorMinorAssignmentMode *string `json:"majorMinorAssignmentMode,omitempty"`
	// The minor number to be used in the beacon identifier. Only valid in 'Non-unique' mode.
	Minor *int64 `json:"minor,omitempty"`
	// Whether APs will scan for Bluetooth enabled clients.
	ScanningEnabled *bool `json:"scanningEnabled,omitempty"`
	// The UUID to be used in the beacon identifier.
	UUID *string `json:"uuid,omitempty"`
}

type UpdateNetworkBluetoothSettingsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateNetworkBluetoothSettings200ApplicationJSONObject *UpdateNetworkBluetoothSettings200ApplicationJSON
}
