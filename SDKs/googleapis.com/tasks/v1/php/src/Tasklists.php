<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Tasklists 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes the authenticated user's specified task list.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsDeleteResponse
     */
	public function tasksTasklistsDelete(
        \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tasks/v1/users/@me/lists/{tasklist}', \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TasksTasklistsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Returns the authenticated user's specified task list.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsGetResponse
     */
	public function tasksTasklistsGet(
        \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tasks/v1/users/@me/lists/{tasklist}', \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TasksTasklistsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new task list and adds it to the authenticated user's task lists.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsInsertResponse
     */
	public function tasksTasklistsInsert(
        \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tasks/v1/users/@me/lists');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "taskList", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TasksTasklistsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns all the authenticated user's task lists.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsListResponse
     */
	public function tasksTasklistsList(
        \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tasks/v1/users/@me/lists');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TasksTasklistsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskLists = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskLists', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the authenticated user's specified task list. This method supports patch semantics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsPatchResponse
     */
	public function tasksTasklistsPatch(
        \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tasks/v1/users/@me/lists/{tasklist}', \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "taskList", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TasksTasklistsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the authenticated user's specified task list.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsUpdateResponse
     */
	public function tasksTasklistsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tasks/v1/users/@me/lists/{tasklist}', \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "taskList", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TasksTasklistsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TasksTasklistsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskList', 'json');
            }
        }

        return $response;
    }
}