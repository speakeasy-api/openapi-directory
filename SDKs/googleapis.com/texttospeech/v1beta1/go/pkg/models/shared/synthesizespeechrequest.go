// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type SynthesizeSpeechRequestEnableTimePointingEnum string

const (
	SynthesizeSpeechRequestEnableTimePointingEnumTimepointTypeUnspecified SynthesizeSpeechRequestEnableTimePointingEnum = "TIMEPOINT_TYPE_UNSPECIFIED"
	SynthesizeSpeechRequestEnableTimePointingEnumSsmlMark                 SynthesizeSpeechRequestEnableTimePointingEnum = "SSML_MARK"
)

func (e *SynthesizeSpeechRequestEnableTimePointingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TIMEPOINT_TYPE_UNSPECIFIED":
		fallthrough
	case "SSML_MARK":
		*e = SynthesizeSpeechRequestEnableTimePointingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SynthesizeSpeechRequestEnableTimePointingEnum: %s", s)
	}
}

// SynthesizeSpeechRequest - The top-level message sent by the client for the `SynthesizeSpeech` method.
type SynthesizeSpeechRequest struct {
	// Description of audio data to be synthesized.
	AudioConfig *AudioConfig `json:"audioConfig,omitempty"`
	// Whether and what timepoints are returned in the response.
	EnableTimePointing []SynthesizeSpeechRequestEnableTimePointingEnum `json:"enableTimePointing,omitempty"`
	// Contains text input to be synthesized. Either `text` or `ssml` must be supplied. Supplying both or neither returns google.rpc.Code.INVALID_ARGUMENT. The input size is limited to 5000 bytes.
	Input *SynthesisInput `json:"input,omitempty"`
	// Description of which voice to use for a synthesis request.
	Voice *VoiceSelectionParams `json:"voice,omitempty"`
}
