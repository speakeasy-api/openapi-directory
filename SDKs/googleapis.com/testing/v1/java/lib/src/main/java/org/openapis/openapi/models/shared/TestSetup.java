/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * TestSetup - A description of how to set up the Android device prior to running the test.
 */
public class TestSetup {
    /**
     * Identifies an account and how to log into it.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account")
    public Account account;

    public TestSetup withAccount(Account account) {
        this.account = account;
        return this;
    }
    
    /**
     * APKs to install in addition to those being directly tested. Currently capped at 100.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additionalApks")
    public Apk[] additionalApks;

    public TestSetup withAdditionalApks(Apk[] additionalApks) {
        this.additionalApks = additionalApks;
        return this;
    }
    
    /**
     * List of directories on the device to upload to GCS at the end of the test; they must be absolute paths under /sdcard, /storage or /data/local/tmp. Path names are restricted to characters a-z A-Z 0-9 _ - . + and / Note: The paths /sdcard and /data will be made available and treated as implicit path substitutions. E.g. if /sdcard on a particular device does not map to external storage, the system will replace it with the external storage path prefix for that device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("directoriesToPull")
    public String[] directoriesToPull;

    public TestSetup withDirectoriesToPull(String[] directoriesToPull) {
        this.directoriesToPull = directoriesToPull;
        return this;
    }
    
    /**
     * Whether to prevent all runtime permissions to be granted at app install
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dontAutograntPermissions")
    public Boolean dontAutograntPermissions;

    public TestSetup withDontAutograntPermissions(Boolean dontAutograntPermissions) {
        this.dontAutograntPermissions = dontAutograntPermissions;
        return this;
    }
    
    /**
     * Environment variables to set for the test (only applicable for instrumentation tests).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("environmentVariables")
    public EnvironmentVariable[] environmentVariables;

    public TestSetup withEnvironmentVariables(EnvironmentVariable[] environmentVariables) {
        this.environmentVariables = environmentVariables;
        return this;
    }
    
    /**
     * List of files to push to the device before starting the test.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filesToPush")
    public DeviceFile[] filesToPush;

    public TestSetup withFilesToPush(DeviceFile[] filesToPush) {
        this.filesToPush = filesToPush;
        return this;
    }
    
    /**
     * The network traffic profile used for running the test. Available network profiles can be queried by using the NETWORK_CONFIGURATION environment type when calling TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("networkProfile")
    public String networkProfile;

    public TestSetup withNetworkProfile(String networkProfile) {
        this.networkProfile = networkProfile;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("systrace")
    public SystraceSetup systrace;

    public TestSetup withSystrace(SystraceSetup systrace) {
        this.systrace = systrace;
        return this;
    }
    
    public TestSetup(){}
}
