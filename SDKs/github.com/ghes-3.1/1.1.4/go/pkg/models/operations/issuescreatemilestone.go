// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

// IssuesCreateMilestoneRequestBodyStateEnum - The state of the milestone. Either `open` or `closed`.
type IssuesCreateMilestoneRequestBodyStateEnum string

const (
	IssuesCreateMilestoneRequestBodyStateEnumOpen   IssuesCreateMilestoneRequestBodyStateEnum = "open"
	IssuesCreateMilestoneRequestBodyStateEnumClosed IssuesCreateMilestoneRequestBodyStateEnum = "closed"
)

func (e *IssuesCreateMilestoneRequestBodyStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "open":
		fallthrough
	case "closed":
		*e = IssuesCreateMilestoneRequestBodyStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for IssuesCreateMilestoneRequestBodyStateEnum: %s", s)
	}
}

type IssuesCreateMilestoneRequestBody struct {
	// A description of the milestone.
	Description *string `json:"description,omitempty"`
	// The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	DueOn *time.Time `json:"due_on,omitempty"`
	// The state of the milestone. Either `open` or `closed`.
	State *IssuesCreateMilestoneRequestBodyStateEnum `json:"state,omitempty"`
	// The title of the milestone.
	Title string `json:"title"`
}

type IssuesCreateMilestoneRequest struct {
	RequestBody IssuesCreateMilestoneRequestBody `request:"mediaType=application/json"`
	// The account owner of the repository. The name is not case sensitive.
	Owner string `pathParam:"style=simple,explode=false,name=owner"`
	// The name of the repository. The name is not case sensitive.
	Repo string `pathParam:"style=simple,explode=false,name=repo"`
}

type IssuesCreateMilestoneResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Resource not found
	BasicError *shared.BasicError
	// Response
	Milestone *shared.Milestone
	// Validation failed
	ValidationError *shared.ValidationError
}
