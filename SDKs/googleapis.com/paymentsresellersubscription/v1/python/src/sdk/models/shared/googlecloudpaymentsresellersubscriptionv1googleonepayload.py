"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayloadOfferingEnum(str, Enum):
    r"""The type of offering the subscription was sold by the partner. e.g. VAS."""
    OFFERING_UNSPECIFIED = 'OFFERING_UNSPECIFIED'
    OFFERING_VAS_BUNDLE = 'OFFERING_VAS_BUNDLE'
    OFFERING_VAS_STANDALONE = 'OFFERING_VAS_STANDALONE'
    OFFERING_HARD_BUNDLE = 'OFFERING_HARD_BUNDLE'
    OFFERING_SOFT_BUNDLE = 'OFFERING_SOFT_BUNDLE'

class GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayloadSalesChannelEnum(str, Enum):
    r"""The type of sales channel through which the subscription was sold."""
    CHANNEL_UNSPECIFIED = 'CHANNEL_UNSPECIFIED'
    CHANNEL_RETAIL = 'CHANNEL_RETAIL'
    CHANNEL_ONLINE_WEB = 'CHANNEL_ONLINE_WEB'
    CHANNEL_ONLINE_ANDROID_APP = 'CHANNEL_ONLINE_ANDROID_APP'
    CHANNEL_ONLINE_IOS_APP = 'CHANNEL_ONLINE_IOS_APP'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload:
    r"""Payload specific to Google One products."""
    
    campaigns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('campaigns'), 'exclude': lambda f: f is None }})
    r"""Campaign attributed to sales of this subscription."""  
    offering: Optional[GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayloadOfferingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offering'), 'exclude': lambda f: f is None }})
    r"""The type of offering the subscription was sold by the partner. e.g. VAS."""  
    sales_channel: Optional[GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayloadSalesChannelEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('salesChannel'), 'exclude': lambda f: f is None }})
    r"""The type of sales channel through which the subscription was sold."""  
    store_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('storeId'), 'exclude': lambda f: f is None }})
    r"""The identifier for the partner store where the subscription was sold."""  
    