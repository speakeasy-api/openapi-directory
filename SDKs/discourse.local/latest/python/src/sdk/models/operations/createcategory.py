"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateCategoryRequestBody:
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    allow_badges: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_badges'), 'exclude': lambda f: f is None }})  
    color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('color'), 'exclude': lambda f: f is None }})  
    form_template_ids: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('form_template_ids'), 'exclude': lambda f: f is None }})  
    parent_category_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parent_category_id'), 'exclude': lambda f: f is None }})  
    permissions: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permissions'), 'exclude': lambda f: f is None }})  
    search_priority: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('search_priority'), 'exclude': lambda f: f is None }})  
    slug: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slug'), 'exclude': lambda f: f is None }})  
    text_color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text_color'), 'exclude': lambda f: f is None }})  
    topic_featured_links_allowed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topic_featured_links_allowed'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateCategory200ApplicationJSONCategoryGroupPermissions:
    
    group_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group_name') }})  
    permission_type: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permission_type') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateCategory200ApplicationJSONCategoryRequiredTagGroups:
    
    min_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('min_count') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateCategory200ApplicationJSONCategory:
    
    all_topics_wiki: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('all_topics_wiki') }})  
    allow_badges: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_badges') }})  
    allow_unlimited_owner_edits_on_first_post: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_unlimited_owner_edits_on_first_post') }})  
    auto_close_based_on_last_post: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_close_based_on_last_post') }})  
    auto_close_hours: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_close_hours') }})  
    available_groups: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('available_groups') }})  
    can_delete: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_delete') }})  
    can_edit: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_edit') }})  
    color: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('color') }})  
    custom_fields: dict[str, Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_fields') }})  
    default_list_filter: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('default_list_filter') }})  
    default_slow_mode_seconds: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('default_slow_mode_seconds') }})  
    default_top_period: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('default_top_period') }})  
    default_view: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('default_view') }})  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})  
    description_excerpt: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description_excerpt') }})  
    description_text: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description_text') }})  
    email_in: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email_in') }})  
    email_in_allow_strangers: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email_in_allow_strangers') }})  
    group_permissions: list[CreateCategory200ApplicationJSONCategoryGroupPermissions] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group_permissions') }})  
    has_children: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_children') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    mailinglist_mirror: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mailinglist_mirror') }})  
    minimum_required_tags: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minimum_required_tags') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    navigate_to_first_post_after_read: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('navigate_to_first_post_after_read') }})  
    notification_level: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notification_level') }})  
    num_featured_topics: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('num_featured_topics') }})  
    permission: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permission') }})  
    position: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('position') }})  
    post_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('post_count') }})  
    read_only_banner: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('read_only_banner') }})  
    read_restricted: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('read_restricted') }})  
    required_tag_groups: list[CreateCategory200ApplicationJSONCategoryRequiredTagGroups] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('required_tag_groups') }})  
    search_priority: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('search_priority') }})  
    show_subcategory_list: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('show_subcategory_list') }})  
    slug: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slug') }})  
    sort_ascending: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sort_ascending') }})  
    sort_order: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sort_order') }})  
    subcategory_list_style: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subcategory_list_style') }})  
    text_color: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text_color') }})  
    topic_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topic_count') }})  
    topic_featured_link_allowed: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topic_featured_link_allowed') }})  
    topic_template: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topic_template') }})  
    topic_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topic_url') }})  
    uploaded_background: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uploaded_background') }})  
    uploaded_logo: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uploaded_logo') }})  
    uploaded_logo_dark: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uploaded_logo_dark') }})  
    allow_global_tags: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_global_tags'), 'exclude': lambda f: f is None }})  
    allowed_tag_groups: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowed_tag_groups'), 'exclude': lambda f: f is None }})  
    allowed_tags: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowed_tags'), 'exclude': lambda f: f is None }})  
    form_template_ids: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('form_template_ids'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateCategory200ApplicationJSON:
    r"""success response"""
    
    category: CreateCategory200ApplicationJSONCategory = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category') }})  
    

@dataclasses.dataclass
class CreateCategoryResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    create_category_200_application_json_object: Optional[CreateCategory200ApplicationJSON] = dataclasses.field(default=None)
    r"""success response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    