// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UpdatePipelineXAmzTargetEnum
type UpdatePipelineXAmzTargetEnum string

const (
	UpdatePipelineXAmzTargetEnumSageMakerUpdatePipeline UpdatePipelineXAmzTargetEnum = "SageMaker.UpdatePipeline"
)

func (e *UpdatePipelineXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SageMaker.UpdatePipeline":
		*e = UpdatePipelineXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePipelineXAmzTargetEnum: %s", s)
	}
}

type UpdatePipelineRequest struct {
	UpdatePipelineRequest shared.UpdatePipelineRequest `request:"mediaType=application/json"`
	XAmzAlgorithm         *string                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256     *string                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential        *string                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate              *string                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken     *string                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature         *string                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders     *string                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget            UpdatePipelineXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type UpdatePipelineResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// ResourceNotFound
	ResourceNotFound interface{}
	// Success
	UpdatePipelineResponse *shared.UpdatePipelineResponse
}
