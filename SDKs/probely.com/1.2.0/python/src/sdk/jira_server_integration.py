"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class JiraServerIntegration:
    r"""Find instructions on how to configure this integration for your Jira
    deployment [here](https://help.probely.com/integrations/how-to-integrate-probely-with-jira-server).
    A short explanation of the sync options can be found
    [here](https://help.probely.com/integrations/jira-syncronization-settings).
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_integrations_jira_server_projects_(self) -> operations.GetIntegrationsJiraServerProjectsResponse:
        r"""List Jira Projects"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/integrations/jira-server/projects/'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetIntegrationsJiraServerProjectsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.JiraProject]])
                res.jira_projects = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetIntegrationsJiraServerProjects401ApplicationJSON])
                res.get_integrations_jira_server_projects_401_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetIntegrationsJiraServerProjects403ApplicationJSON])
                res.get_integrations_jira_server_projects_403_application_json_object = out

        return res

    def get_integrations_jira_server_projects_project_id_issue_types_(self, request: operations.GetIntegrationsJiraServerProjectsProjectIDIssueTypesRequest) -> operations.GetIntegrationsJiraServerProjectsProjectIDIssueTypesResponse:
        r"""Retrieve project issue types"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetIntegrationsJiraServerProjectsProjectIDIssueTypesRequest, base_url, '/integrations/jira-server/projects/{project_id}/issue_types/', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetIntegrationsJiraServerProjectsProjectIDIssueTypesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.JiraIssueType]])
                res.jira_issue_types = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetIntegrationsJiraServerProjectsProjectIDIssueTypes401ApplicationJSON])
                res.get_integrations_jira_server_projects_project_id_issue_types_401_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetIntegrationsJiraServerProjectsProjectIDIssueTypes403ApplicationJSON])
                res.get_integrations_jira_server_projects_project_id_issue_types_403_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetIntegrationsJiraServerProjectsProjectIDIssueTypes404ApplicationJSON])
                res.get_integrations_jira_server_projects_project_id_issue_types_404_application_json_object = out

        return res

    def get_integrations_jira_server_projects_project_id_issue_types_issue_type_id_priorities_(self, request: operations.GetIntegrationsJiraServerProjectsProjectIDIssueTypesIssueTypeIDPrioritiesRequest) -> operations.GetIntegrationsJiraServerProjectsProjectIDIssueTypesIssueTypeIDPrioritiesResponse:
        r"""Retrieve issue priorities"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetIntegrationsJiraServerProjectsProjectIDIssueTypesIssueTypeIDPrioritiesRequest, base_url, '/integrations/jira-server/projects/{project_id}/issue_types/{issue_type_id}/priorities/', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetIntegrationsJiraServerProjectsProjectIDIssueTypesIssueTypeIDPrioritiesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.JiraIssuePriority]])
                res.jira_issue_priorities = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetIntegrationsJiraServerProjectsProjectIDIssueTypesIssueTypeIDPriorities401ApplicationJSON])
                res.get_integrations_jira_server_projects_project_id_issue_types_issue_type_id_priorities_401_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetIntegrationsJiraServerProjectsProjectIDIssueTypesIssueTypeIDPriorities403ApplicationJSON])
                res.get_integrations_jira_server_projects_project_id_issue_types_issue_type_id_priorities_403_application_json_object = out

        return res

    def get_integrations_jira_server_projects_project_id_issue_types_issue_type_id_status_(self, request: operations.GetIntegrationsJiraServerProjectsProjectIDIssueTypesIssueTypeIDStatusRequest) -> operations.GetIntegrationsJiraServerProjectsProjectIDIssueTypesIssueTypeIDStatusResponse:
        r"""Retrieve issue statuses"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetIntegrationsJiraServerProjectsProjectIDIssueTypesIssueTypeIDStatusRequest, base_url, '/integrations/jira-server/projects/{project_id}/issue_types/{issue_type_id}/status/', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetIntegrationsJiraServerProjectsProjectIDIssueTypesIssueTypeIDStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.JiraIssueStatus]])
                res.jira_issue_statuses = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetIntegrationsJiraServerProjectsProjectIDIssueTypesIssueTypeIDStatus401ApplicationJSON])
                res.get_integrations_jira_server_projects_project_id_issue_types_issue_type_id_status_401_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetIntegrationsJiraServerProjectsProjectIDIssueTypesIssueTypeIDStatus403ApplicationJSON])
                res.get_integrations_jira_server_projects_project_id_issue_types_issue_type_id_status_403_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetIntegrationsJiraServerProjectsProjectIDIssueTypesIssueTypeIDStatus404ApplicationJSON])
                res.get_integrations_jira_server_projects_project_id_issue_types_issue_type_id_status_404_application_json_object = out

        return res

    def get_targets_target_id_findings_id_integrations_jira_server_(self, request: operations.GetTargetsTargetIDFindingsIDIntegrationsJiraServerRequest) -> operations.GetTargetsTargetIDFindingsIDIntegrationsJiraServerResponse:
        r"""Retrieve Jira Server finding configuration"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTargetsTargetIDFindingsIDIntegrationsJiraServerRequest, base_url, '/targets/{target_id}/findings/{id}/integrations/jira-server/', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTargetsTargetIDFindingsIDIntegrationsJiraServerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.JiraFinding])
                res.jira_finding = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetTargetsTargetIDFindingsIDIntegrationsJiraServer401ApplicationJSON])
                res.get_targets_target_id_findings_id_integrations_jira_server_401_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetTargetsTargetIDFindingsIDIntegrationsJiraServer403ApplicationJSON])
                res.get_targets_target_id_findings_id_integrations_jira_server_403_application_json_object = out

        return res

    def get_targets_target_id_integrations_jira_server_(self, request: operations.GetTargetsTargetIDIntegrationsJiraServerRequest) -> operations.GetTargetsTargetIDIntegrationsJiraServerResponse:
        r"""Retrieve Jira Server Target configuration"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTargetsTargetIDIntegrationsJiraServerRequest, base_url, '/targets/{target_id}/integrations/jira-server/', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTargetsTargetIDIntegrationsJiraServerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.JiraScope])
                res.jira_scope = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetTargetsTargetIDIntegrationsJiraServer401ApplicationJSON])
                res.get_targets_target_id_integrations_jira_server_401_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetTargetsTargetIDIntegrationsJiraServer403ApplicationJSON])
                res.get_targets_target_id_integrations_jira_server_403_application_json_object = out

        return res

    def patch_targets_target_id_findings_id_integrations_jira_server_(self, request: operations.PatchTargetsTargetIDFindingsIDIntegrationsJiraServerRequest) -> operations.PatchTargetsTargetIDFindingsIDIntegrationsJiraServerResponse:
        r"""Update Jira Server finding configuration"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchTargetsTargetIDFindingsIDIntegrationsJiraServerRequest, base_url, '/targets/{target_id}/findings/{id}/integrations/jira-server/', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "jira_finding", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchTargetsTargetIDFindingsIDIntegrationsJiraServerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.JiraFinding])
                res.jira_finding = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PatchTargetsTargetIDFindingsIDIntegrationsJiraServer401ApplicationJSON])
                res.patch_targets_target_id_findings_id_integrations_jira_server_401_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PatchTargetsTargetIDFindingsIDIntegrationsJiraServer403ApplicationJSON])
                res.patch_targets_target_id_findings_id_integrations_jira_server_403_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PatchTargetsTargetIDFindingsIDIntegrationsJiraServer404ApplicationJSON])
                res.patch_targets_target_id_findings_id_integrations_jira_server_404_application_json_object = out

        return res

    def patch_targets_target_id_integrations_jira_server_(self, request: operations.PatchTargetsTargetIDIntegrationsJiraServerRequest) -> operations.PatchTargetsTargetIDIntegrationsJiraServerResponse:
        r"""Update Jira Server target configuration"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchTargetsTargetIDIntegrationsJiraServerRequest, base_url, '/targets/{target_id}/integrations/jira-server/', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "jira_scope", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchTargetsTargetIDIntegrationsJiraServerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.JiraScope])
                res.jira_scope = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PatchTargetsTargetIDIntegrationsJiraServer401ApplicationJSON])
                res.patch_targets_target_id_integrations_jira_server_401_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PatchTargetsTargetIDIntegrationsJiraServer403ApplicationJSON])
                res.patch_targets_target_id_integrations_jira_server_403_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PatchTargetsTargetIDIntegrationsJiraServer404ApplicationJSON])
                res.patch_targets_target_id_integrations_jira_server_404_application_json_object = out

        return res

    def put_targets_target_id_findings_id_integrations_jira_server_(self, request: operations.PutTargetsTargetIDFindingsIDIntegrationsJiraServerRequest) -> operations.PutTargetsTargetIDFindingsIDIntegrationsJiraServerResponse:
        r"""Update Jira Server finding configuration"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutTargetsTargetIDFindingsIDIntegrationsJiraServerRequest, base_url, '/targets/{target_id}/findings/{id}/integrations/jira-server/', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "jira_finding", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutTargetsTargetIDFindingsIDIntegrationsJiraServerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.JiraFinding])
                res.jira_finding = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PutTargetsTargetIDFindingsIDIntegrationsJiraServer401ApplicationJSON])
                res.put_targets_target_id_findings_id_integrations_jira_server_401_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PutTargetsTargetIDFindingsIDIntegrationsJiraServer403ApplicationJSON])
                res.put_targets_target_id_findings_id_integrations_jira_server_403_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PutTargetsTargetIDFindingsIDIntegrationsJiraServer404ApplicationJSON])
                res.put_targets_target_id_findings_id_integrations_jira_server_404_application_json_object = out

        return res

    def put_targets_target_id_integrations_jira_server_(self, request: operations.PutTargetsTargetIDIntegrationsJiraServerRequest) -> operations.PutTargetsTargetIDIntegrationsJiraServerResponse:
        r"""Update Jira Server target configuration"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutTargetsTargetIDIntegrationsJiraServerRequest, base_url, '/targets/{target_id}/integrations/jira-server/', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "jira_scope", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutTargetsTargetIDIntegrationsJiraServerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.JiraScope])
                res.jira_scope = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PutTargetsTargetIDIntegrationsJiraServer401ApplicationJSON])
                res.put_targets_target_id_integrations_jira_server_401_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PutTargetsTargetIDIntegrationsJiraServer403ApplicationJSON])
                res.put_targets_target_id_integrations_jira_server_403_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PutTargetsTargetIDIntegrationsJiraServer404ApplicationJSON])
                res.put_targets_target_id_integrations_jira_server_404_application_json_object = out

        return res

    