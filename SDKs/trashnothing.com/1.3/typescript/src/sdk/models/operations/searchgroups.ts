/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class SearchGroupsSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=query;name=api_key",
  })
  apiKey?: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2Code?: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2Implicit?: string;
}

export class SearchGroupsRequest extends SpeakeasyBase {
  /**
   * Find groups in the given country where country is a 2 letter country code for the country (see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ).
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=country",
  })
  country?: string;

  /**
   * When latitude and longitude are passed, distance can optionally be passed to only return groups within a certain distance (in kilometers) from the point specified by the latitude and longitude.  The distance must be > 0 and <= 150 and will default to 100.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=distance",
  })
  distance?: number;

  /**
   * Find groups near the given latitude and longitude.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=latitude",
  })
  latitude?: number;

  /**
   * Find groups near the given latitude and longitude.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=longitude",
  })
  longitude?: number;

  /**
   * Find groups that have the given text somewhere in their name (case insensitive).
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=name" })
  name?: string;

  /**
   * The page of groups to return.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: number;

  /**
   * The number of groups to return per page (must be >= 1 and <= 100).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=per_page",
  })
  perPage?: number;

  /**
   * Find groups in the given postal code.  Only a few countries support postal code searches (US, CA, AU, GB).  The country parameter must be passed when the postal_code parameter is set. <br /><br /> NOTE: The region and postal_code parameters cannot be used at the same time and if both are passed then the postal_code will take priority.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=postal_code",
  })
  postalCode?: string;

  /**
   * For countries with regions (AU, CA, GB, US), search groups in a specific region as specified by the region abbreviation.  The supported regions and their abbreviations are listed below. <br /><br /> NOTE: The region and postal_code parameters cannot be used at the same time and if both are passed then the postal_code will take priority. <br /><br /> --- <br /><br /> **AU**<br /> - QLD: Queensland<br /> - SA: South Australia<br /> - TAS: Tasmania<br /> - VIC: Victoria<br /> - WA: Western Australia<br /> - NT: Northern Territory<br /> - NSW: New South Wales - ACT<br /> <br /> **CA**<br /> - AB: Alberta<br /> - BC: British Columbia<br /> - MB: Manitoba<br /> - NB: New Brunswick<br /> - NL: Newfoundland and Labrador<br /> - NS: Nova Scotia<br /> - ON: Ontario<br /> - QC: Quebec<br /> - SK: Saskatchewan<br /> - PE: Prince Edward Island<br /> <br /> **GB**<br /> - E: East<br /> - EM: East Midlands<br /> - LDN: London<br /> - NE: North East<br /> - NW: North West<br /> - NI: Northern Ireland<br /> - SC: Scotland<br /> - SE: South East<br /> - SW: South West<br /> - WA: Wales<br /> - WM: West Midlands<br /> - YH: Yorkshire and the Humber<br /> <br /> **US**<br /> All 50 states and the District of Columbia are supported.  For the abbreviations, see: https://github.com/jasonong/List-of-US-States/blob/master/states.csv
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=region",
  })
  region?: string;
}

/**
 * The groups and paging data.
 */
export class SearchGroups200ApplicationJSON extends SpeakeasyBase {
  /**
   * The index of the last group being returned (an integer between start_index and num_groups).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "end_index" })
  endIndex?: number;

  @SpeakeasyMetadata({ elemType: shared.Group })
  @Expose({ name: "groups" })
  @Type(() => shared.Group)
  groups?: shared.Group[];

  /**
   * The total number of groups available.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "num_groups" })
  numGroups?: number;

  /**
   * The total number of pages available.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "num_pages" })
  numPages?: number;

  /**
   * The page number of the groups being returned.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "page" })
  page?: number;

  /**
   * The number of groups being returned per page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "per_page" })
  perPage?: number;

  /**
   * The index of the first group being returned (an integer between 1 and num_groups).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "start_index" })
  startIndex?: number;
}

export class SearchGroupsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * The groups and paging data.
   */
  @SpeakeasyMetadata()
  searchGroups200ApplicationJSONObject?: SearchGroups200ApplicationJSON;
}
