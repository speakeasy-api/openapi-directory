<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsOperationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsOperationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsOperationsCancelResponse
     */
	public function workstationsProjectsLocationsOperationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsOperationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsOperationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsOperationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsOperationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsOperationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsOperationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsOperationsListResponse
     */
	public function workstationsProjectsLocationsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListOperationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new workstation cluster.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersCreateResponse
     */
	public function workstationsProjectsLocationsWorkstationClustersCreate(
        \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/workstationClusters', \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "workstationClusterInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns all workstation clusters in the specified location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersListResponse
     */
	public function workstationsProjectsLocationsWorkstationClustersList(
        \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/workstationClusters', \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listWorkstationClustersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListWorkstationClustersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new workstation configuration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsCreateResponse
     */
	public function workstationsProjectsLocationsWorkstationClustersWorkstationConfigsCreate(
        \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/workstationConfigs', \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "workstationConfigInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns all workstation configurations in the specified cluster.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsListResponse
     */
	public function workstationsProjectsLocationsWorkstationClustersWorkstationConfigsList(
        \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/workstationConfigs', \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listWorkstationConfigsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListWorkstationConfigsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns all workstation configurations in the specified cluster on which the caller has the "workstations.workstation.create" permission.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsListUsableRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsListUsableSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsListUsableResponse
     */
	public function workstationsProjectsLocationsWorkstationClustersWorkstationConfigsListUsable(
        \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsListUsableRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsListUsableSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsListUsableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/workstationConfigs:listUsable', \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsListUsableRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsListUsableRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsListUsableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listUsableWorkstationConfigsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListUsableWorkstationConfigsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new workstation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsCreateResponse
     */
	public function workstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsCreate(
        \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/workstations', \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "workstationInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified workstation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsDeleteResponse
     */
	public function workstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsDelete(
        \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{name}', \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a short-lived credential that can be used to send authenticated and authorized traffic to a workstation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGenerateAccessTokenRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGenerateAccessTokenSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGenerateAccessTokenResponse
     */
	public function workstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGenerateAccessToken(
        \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGenerateAccessTokenRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGenerateAccessTokenSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGenerateAccessTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{workstation}:generateAccessToken', \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGenerateAccessTokenRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "generateAccessTokenRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGenerateAccessTokenRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGenerateAccessTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->generateAccessTokenResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GenerateAccessTokenResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the requested workstation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGetResponse
     */
	public function workstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGet(
        \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{name}', \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->workstation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Workstation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGetIamPolicyResponse
     */
	public function workstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{resource}:getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns all Workstations using the specified config.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsListResponse
     */
	public function workstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsList(
        \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/workstations', \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listWorkstationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListWorkstationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns all Workstations using the specified config on which the caller has the "workstations.workstations.use" permission.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsListUsableRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsListUsableSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsListUsableResponse
     */
	public function workstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsListUsable(
        \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsListUsableRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsListUsableSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsListUsableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/workstations:listUsable', \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsListUsableRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsListUsableRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsListUsableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listUsableWorkstationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListUsableWorkstationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing workstation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsPatchResponse
     */
	public function workstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsPatch(
        \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{name}', \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "workstationInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsSetIamPolicyResponse
     */
	public function workstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{resource}:setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts running a workstation so that users can connect to it.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsStartRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsStartSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsStartResponse
     */
	public function workstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsStart(
        \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsStartRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsStartSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsStartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{name}:start', \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsStartRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "startWorkstationRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsStartRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsStartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Stops running a workstation, reducing costs.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsStopRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsStopSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsStopResponse
     */
	public function workstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsStop(
        \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsStopRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsStopSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsStopResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{name}:stop', \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsStopRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "stopWorkstationRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsStopRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsStopResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsTestIamPermissionsResponse
     */
	public function workstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{resource}:testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testIamPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testIamPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestIamPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}