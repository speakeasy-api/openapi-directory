"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import error as shared_error
from ..shared import identityproof as shared_identityproof
from typing import Optional


@dataclasses.dataclass
class GetAPIProofsRequest:
    
    provider: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'provider', 'style': 'form', 'explode': True }})
    r"""The identity provider to be looked up. Currently only supports keybase (case-sensitive)"""  
    username: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'username', 'style': 'form', 'explode': True }})
    r"""The username on the selected identity provider"""  
    

@dataclasses.dataclass
class GetAPIProofsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    error: Optional[shared_error.Error] = dataclasses.field(default=None)
    r"""Not Found"""  
    identity_proof: Optional[shared_identityproof.IdentityProof] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    