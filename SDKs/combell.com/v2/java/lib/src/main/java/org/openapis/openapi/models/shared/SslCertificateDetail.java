/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * SslCertificateDetail - Success
 */
public class SslCertificateDetail {
    /**
     * The common name (e.g. domain.com) of the certificate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("common_name")
    public String commonName;
    public SslCertificateDetail withCommonName(String commonName) {
        this.commonName = commonName;
        return this;
    }
    
    /**
     * The exact time the certificate will expire.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("expires_after")
    public OffsetDateTime expiresAfter;
    public SslCertificateDetail withExpiresAfter(OffsetDateTime expiresAfter) {
        this.expiresAfter = expiresAfter;
        return this;
    }
    
    /**
     * The SHA-1 fingerprint of the certificate.&lt;br /&gt;
     * The fingerprint is a cryptographic hash which is a short unique identification of the certificate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sha1_fingerprint")
    public String sha1Fingerprint;
    public SslCertificateDetail withSha1Fingerprint(String sha1Fingerprint) {
        this.sha1Fingerprint = sha1Fingerprint;
        return this;
    }
    
    /**
     * The list of all supported dns names in the certificate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subject_alt_names")
    public SslSubjectAltName[] subjectAltNames;
    public SslCertificateDetail withSubjectAltNames(SslSubjectAltName[] subjectAltNames) {
        this.subjectAltNames = subjectAltNames;
        return this;
    }
    
    /**
     * The type of the certificate:
     * &lt;ul&gt;&lt;li&gt;Standard: Certificate for a single domain.&lt;/li&gt;&lt;li&gt;Multi domain: Certificate for multiple (sub)domains belonging to the same owner.&lt;/li&gt;&lt;li&gt;Wildcard: Certificate for all the subdomains.&lt;/li&gt;&lt;/ul&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public SslCertificateTypeEnum type;
    public SslCertificateDetail withType(SslCertificateTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * The validation level of the certificate:
     * &lt;ul&gt;&lt;li&gt;Domain validated: Basic check of the identity of the owner of the domain name.&lt;/li&gt;&lt;li&gt;Organization validated: Company details are verified and integrated in the certificate.&lt;/li&gt;&lt;li&gt;Extended validated: A thorough verification of your domain name and company details.&lt;/li&gt;&lt;/ul&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("validation_level")
    public SslCertificateValidationLevelEnum validationLevel;
    public SslCertificateDetail withValidationLevel(SslCertificateValidationLevelEnum validationLevel) {
        this.validationLevel = validationLevel;
        return this;
    }
    
}
