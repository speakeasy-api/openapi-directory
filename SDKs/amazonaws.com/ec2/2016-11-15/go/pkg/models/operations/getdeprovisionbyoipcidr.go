// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDeprovisionByoipCidrActionEnum
type GETDeprovisionByoipCidrActionEnum string

const (
	GETDeprovisionByoipCidrActionEnumDeprovisionByoipCidr GETDeprovisionByoipCidrActionEnum = "DeprovisionByoipCidr"
)

func (e *GETDeprovisionByoipCidrActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DeprovisionByoipCidr":
		*e = GETDeprovisionByoipCidrActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDeprovisionByoipCidrActionEnum: %s", s)
	}
}

// GETDeprovisionByoipCidrVersionEnum
type GETDeprovisionByoipCidrVersionEnum string

const (
	GETDeprovisionByoipCidrVersionEnumTwoThousandAndSixteen1115 GETDeprovisionByoipCidrVersionEnum = "2016-11-15"
)

func (e *GETDeprovisionByoipCidrVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETDeprovisionByoipCidrVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDeprovisionByoipCidrVersionEnum: %s", s)
	}
}

type GETDeprovisionByoipCidrRequest struct {
	Action GETDeprovisionByoipCidrActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The address range, in CIDR notation. The prefix must be the same prefix that you specified when you provisioned the address range.
	Cidr string `queryParam:"style=form,explode=true,name=Cidr"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun            *bool                              `queryParam:"style=form,explode=true,name=DryRun"`
	Version           GETDeprovisionByoipCidrVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDeprovisionByoipCidrResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
