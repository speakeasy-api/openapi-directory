"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import cyclestep as shared_cyclestep
from ..shared import migrationwarning as shared_migrationwarning
from ..shared import status as shared_status
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ReplicationCycleStateEnum(str, Enum):
    r"""State of the ReplicationCycle."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    RUNNING = 'RUNNING'
    PAUSED = 'PAUSED'
    FAILED = 'FAILED'
    SUCCEEDED = 'SUCCEEDED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReplicationCycle:
    r"""ReplicationCycle contains information about the current replication cycle status."""
    
    cycle_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cycleNumber'), 'exclude': lambda f: f is None }})
    r"""The cycle's ordinal number."""  
    end_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endTime'), 'exclude': lambda f: f is None }})
    r"""The time the replication cycle has ended."""  
    error: Optional[shared_status.Status] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})
    r"""The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors)."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The identifier of the ReplicationCycle."""  
    progress_percent: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('progressPercent'), 'exclude': lambda f: f is None }})
    r"""The current progress in percentage of this cycle. Was replaced by 'steps' field, which breaks down the cycle progression more accurately."""  
    start_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startTime'), 'exclude': lambda f: f is None }})
    r"""The time the replication cycle has started."""  
    state: Optional[ReplicationCycleStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""State of the ReplicationCycle."""  
    steps: Optional[list[shared_cyclestep.CycleStep]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('steps'), 'exclude': lambda f: f is None }})
    r"""The cycle's steps list representing its progress."""  
    total_pause_duration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalPauseDuration'), 'exclude': lambda f: f is None }})
    r"""The accumulated duration the replication cycle was paused."""  
    warnings: Optional[list[shared_migrationwarning.MigrationWarning]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('warnings'), 'exclude': lambda f: f is None }})
    r"""Output only. Warnings that occurred during the cycle."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReplicationCycleInput:
    r"""ReplicationCycle contains information about the current replication cycle status."""
    
    cycle_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cycleNumber'), 'exclude': lambda f: f is None }})
    r"""The cycle's ordinal number."""  
    end_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endTime'), 'exclude': lambda f: f is None }})
    r"""The time the replication cycle has ended."""  
    error: Optional[shared_status.Status] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})
    r"""The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors)."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The identifier of the ReplicationCycle."""  
    progress_percent: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('progressPercent'), 'exclude': lambda f: f is None }})
    r"""The current progress in percentage of this cycle. Was replaced by 'steps' field, which breaks down the cycle progression more accurately."""  
    start_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startTime'), 'exclude': lambda f: f is None }})
    r"""The time the replication cycle has started."""  
    state: Optional[ReplicationCycleStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""State of the ReplicationCycle."""  
    steps: Optional[list[shared_cyclestep.CycleStep]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('steps'), 'exclude': lambda f: f is None }})
    r"""The cycle's steps list representing its progress."""  
    total_pause_duration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalPauseDuration'), 'exclude': lambda f: f is None }})
    r"""The accumulated duration the replication cycle was paused."""  
    