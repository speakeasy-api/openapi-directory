"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Database:
    r"""The Database service allows you to create structured collections of documents, query and filter lists of documents"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def database_create_document(self, request: operations.DatabaseCreateDocumentRequest, security: operations.DatabaseCreateDocumentSecurity) -> operations.DatabaseCreateDocumentResponse:
        r"""Create Document
        Create a new Document. Before using this route, you should create a new collection resource using either a [server integration](/docs/server/database#databaseCreateCollection) API or directly from your database console.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatabaseCreateDocumentRequest, base_url, '/database/collections/{collectionId}/documents', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatabaseCreateDocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.document = out

        return res

    def database_delete_document(self, request: operations.DatabaseDeleteDocumentRequest, security: operations.DatabaseDeleteDocumentSecurity) -> operations.DatabaseDeleteDocumentResponse:
        r"""Delete Document
        Delete a document by its unique ID. This endpoint deletes only the parent documents, its attributes and relations to other documents. Child documents **will not** be deleted.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatabaseDeleteDocumentRequest, base_url, '/database/collections/{collectionId}/documents/{documentId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatabaseDeleteDocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def database_get_document(self, request: operations.DatabaseGetDocumentRequest, security: operations.DatabaseGetDocumentSecurity) -> operations.DatabaseGetDocumentResponse:
        r"""Get Document
        Get a document by its unique ID. This endpoint response returns a JSON object with the document data.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatabaseGetDocumentRequest, base_url, '/database/collections/{collectionId}/documents/{documentId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatabaseGetDocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.document = out

        return res

    def database_list_documents(self, request: operations.DatabaseListDocumentsRequest, security: operations.DatabaseListDocumentsSecurity) -> operations.DatabaseListDocumentsResponse:
        r"""List Documents
        Get a list of all the user documents. You can use the query params to filter your results. On admin mode, this endpoint will return a list of all of the project's documents. [Learn more about different API modes](/docs/admin).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatabaseListDocumentsRequest, base_url, '/database/collections/{collectionId}/documents', request)
        
        query_params = utils.get_query_params(operations.DatabaseListDocumentsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatabaseListDocumentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DocumentList])
                res.document_list = out

        return res

    def database_update_document(self, request: operations.DatabaseUpdateDocumentRequest, security: operations.DatabaseUpdateDocumentSecurity) -> operations.DatabaseUpdateDocumentResponse:
        r"""Update Document
        Update a document by its unique ID. Using the patch method you can pass only specific fields that will get updated.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatabaseUpdateDocumentRequest, base_url, '/database/collections/{collectionId}/documents/{documentId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatabaseUpdateDocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.document = out

        return res

    