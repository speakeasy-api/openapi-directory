"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import amount as shared_amount
from ..shared import counterpartyv3 as shared_counterpartyv3
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class TransactionCategoryEnum(str, Enum):
    r"""The category of the transaction indicating the type of activity.
    
     Possible values:
    
    * **platformPayment**: The transaction is a payment or payment modification made with an Adyen merchant account.
    
    * **internal**: The transaction resulted from an internal adjustment such as a deposit correction or invoice deduction.
    
    * **bank**: The transaction is a bank-related activity, such as sending a payout or receiving funds.
    
    * **issuedCard**: The transaction is a card-related activity, such as using an Adyen-issued card to pay online.
    """
    BANK = 'bank'
    GRANTS = 'grants'
    INTERNAL = 'internal'
    ISSUED_CARD = 'issuedCard'
    PLATFORM_PAYMENT = 'platformPayment'

class TransactionStatusEnum(str, Enum):
    r"""The status of the transaction.
    
     Possible values:
    
    * **pending**: The transaction is still pending.
    
    * **booked**: The transaction has been booked to the balance account.
    """
    BOOKED = 'booked'
    PENDING = 'pending'

class TransactionTypeEnum(str, Enum):
    r"""The type of the transaction.
    
     Possible values: **payment**, **capture**, **captureReversal**, **refund** **refundReversal**, **chargeback**, **chargebackReversal**, **secondChargeback**, **atmWithdrawal**, **atmWithdrawalReversal**, **internalTransfer**, **manualCorrection**, **invoiceDeduction**, **depositCorrection**, **bankTransfer**, **miscCost**, **paymentCost**, **fee**
    """
    ATM_WITHDRAWAL = 'atmWithdrawal'
    ATM_WITHDRAWAL_REVERSAL = 'atmWithdrawalReversal'
    BALANCE_ADJUSTMENT = 'balanceAdjustment'
    BALANCE_ROLLOVER = 'balanceRollover'
    BANK_TRANSFER = 'bankTransfer'
    CAPTURE = 'capture'
    CAPTURE_REVERSAL = 'captureReversal'
    CHARGEBACK = 'chargeback'
    CHARGEBACK_REVERSAL = 'chargebackReversal'
    DEPOSIT_CORRECTION = 'depositCorrection'
    FEE = 'fee'
    GRANT = 'grant'
    INSTALLMENT = 'installment'
    INSTALLMENT_REVERSAL = 'installmentReversal'
    INTERNAL_TRANSFER = 'internalTransfer'
    INVOICE_DEDUCTION = 'invoiceDeduction'
    LEFTOVER = 'leftover'
    MANUAL_CORRECTION = 'manualCorrection'
    MISC_COST = 'miscCost'
    PAYMENT = 'payment'
    PAYMENT_COST = 'paymentCost'
    REFUND = 'refund'
    REFUND_REVERSAL = 'refundReversal'
    REPAYMENT = 'repayment'
    RESERVE_ADJUSTMENT = 'reserveAdjustment'
    SECOND_CHARGEBACK = 'secondChargeback'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Transaction:
    r"""OK - the request has succeeded."""
    
    account_holder_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountHolderId') }})
    r"""Unique identifier of the account holder."""  
    amount: shared_amount.Amount = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount') }})  
    balance_account_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('balanceAccountId') }})
    r"""Unique identifier of the balance account."""  
    balance_platform: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('balancePlatform') }})
    r"""Unique identifier of the balance platform."""  
    booking_date: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookingDate'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The date the transaction was booked to the balance account."""  
    counterparty: shared_counterpartyv3.CounterpartyV3 = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('counterparty') }})  
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdAt'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The date the transaction was created."""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Unique identifier of the transaction."""  
    reference: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reference') }})
    r"""The [`reference`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__reqParam_reference) from the `/transfers` request. If you haven't provided any, Adyen generates a unique reference."""  
    status: TransactionStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""The status of the transaction.
    
     Possible values:
    
    * **pending**: The transaction is still pending.
    
    * **booked**: The transaction has been booked to the balance account.
    """  
    value_date: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueDate'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The date the transfer amount becomes available in the balance account."""  
    category: Optional[TransactionCategoryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})
    r"""The category of the transaction indicating the type of activity.
    
     Possible values:
    
    * **platformPayment**: The transaction is a payment or payment modification made with an Adyen merchant account.
    
    * **internal**: The transaction resulted from an internal adjustment such as a deposit correction or invoice deduction.
    
    * **bank**: The transaction is a bank-related activity, such as sending a payout or receiving funds.
    
    * **issuedCard**: The transaction is a card-related activity, such as using an Adyen-issued card to pay online.
    """  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The `description` from the `/transfers` request."""  
    instructed_amount: Optional[shared_amount.Amount] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instructedAmount'), 'exclude': lambda f: f is None }})  
    payment_instrument_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentInstrumentId'), 'exclude': lambda f: f is None }})
    r"""Unique identifier of the payment instrument that was used for the transaction."""  
    reference_for_beneficiary: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('referenceForBeneficiary'), 'exclude': lambda f: f is None }})
    r"""The reference sent to or received from the counterparty.
    
    * For outgoing funds, this is the [`referenceForBeneficiary`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__resParam_referenceForBeneficiary) from the  [`/transfers`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__reqParam_referenceForBeneficiary) request.
    
     * For incoming funds, this is the reference from the sender.
    """  
    transfer_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transferId'), 'exclude': lambda f: f is None }})
    r"""Unique identifier of the related transfer."""  
    type: Optional[TransactionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of the transaction.
    
     Possible values: **payment**, **capture**, **captureReversal**, **refund** **refundReversal**, **chargeback**, **chargebackReversal**, **secondChargeback**, **atmWithdrawal**, **atmWithdrawalReversal**, **internalTransfer**, **manualCorrection**, **invoiceDeduction**, **depositCorrection**, **bankTransfer**, **miscCost**, **paymentCost**, **fee**
    """  
    