"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googleclouddatacatalogv1tagfieldenumvalue as shared_googleclouddatacatalogv1tagfieldenumvalue
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudDatacatalogV1TagField:
    r"""Contains the value and additional information on a field within a Tag."""
    
    bool_value: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('boolValue'), 'exclude': lambda f: f is None }})
    r"""The value of a tag field with a boolean type."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Output only. The display name of this field."""  
    double_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('doubleValue'), 'exclude': lambda f: f is None }})
    r"""The value of a tag field with a double type."""  
    enum_value: Optional[shared_googleclouddatacatalogv1tagfieldenumvalue.GoogleCloudDatacatalogV1TagFieldEnumValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enumValue'), 'exclude': lambda f: f is None }})
    r"""An enum value."""  
    order: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order'), 'exclude': lambda f: f is None }})
    r"""Output only. The order of this field with respect to other fields in this tag. Can be set by Tag. For example, a higher value can indicate a more important field. The value can be negative. Multiple fields can have the same order, and field orders within a tag don't have to be sequential."""  
    richtext_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('richtextValue'), 'exclude': lambda f: f is None }})
    r"""The value of a tag field with a rich text type. The maximum length is 10 MiB as this value holds HTML descriptions including encoded images. The maximum length of the text without images is 100 KiB."""  
    string_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stringValue'), 'exclude': lambda f: f is None }})
    r"""The value of a tag field with a string type. The maximum length is 2000 UTF-8 characters."""  
    timestamp_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestampValue'), 'exclude': lambda f: f is None }})
    r"""The value of a tag field with a timestamp type."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudDatacatalogV1TagFieldInput:
    r"""Contains the value and additional information on a field within a Tag."""
    
    bool_value: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('boolValue'), 'exclude': lambda f: f is None }})
    r"""The value of a tag field with a boolean type."""  
    double_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('doubleValue'), 'exclude': lambda f: f is None }})
    r"""The value of a tag field with a double type."""  
    enum_value: Optional[shared_googleclouddatacatalogv1tagfieldenumvalue.GoogleCloudDatacatalogV1TagFieldEnumValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enumValue'), 'exclude': lambda f: f is None }})
    r"""An enum value."""  
    richtext_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('richtextValue'), 'exclude': lambda f: f is None }})
    r"""The value of a tag field with a rich text type. The maximum length is 10 MiB as this value holds HTML descriptions including encoded images. The maximum length of the text without images is 100 KiB."""  
    string_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stringValue'), 'exclude': lambda f: f is None }})
    r"""The value of a tag field with a string type. The maximum length is 2000 UTF-8 characters."""  
    timestamp_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestampValue'), 'exclude': lambda f: f is None }})
    r"""The value of a tag field with a timestamp type."""  
    