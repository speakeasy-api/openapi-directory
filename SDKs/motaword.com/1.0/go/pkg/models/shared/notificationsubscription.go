// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type NotificationSubscriptionDeviceEnum string

const (
	NotificationSubscriptionDeviceEnumIOs          NotificationSubscriptionDeviceEnum = "iOS"
	NotificationSubscriptionDeviceEnumAndroid      NotificationSubscriptionDeviceEnum = "Android"
	NotificationSubscriptionDeviceEnumChrome       NotificationSubscriptionDeviceEnum = "Chrome"
	NotificationSubscriptionDeviceEnumFirefox      NotificationSubscriptionDeviceEnum = "Firefox"
	NotificationSubscriptionDeviceEnumSafari       NotificationSubscriptionDeviceEnum = "Safari"
	NotificationSubscriptionDeviceEnumEdge         NotificationSubscriptionDeviceEnum = "Edge"
	NotificationSubscriptionDeviceEnumAmazon       NotificationSubscriptionDeviceEnum = "Amazon"
	NotificationSubscriptionDeviceEnumWindowsPhone NotificationSubscriptionDeviceEnum = "WindowsPhone"
	NotificationSubscriptionDeviceEnumWindows      NotificationSubscriptionDeviceEnum = "Windows"
	NotificationSubscriptionDeviceEnumMacOs        NotificationSubscriptionDeviceEnum = "MacOS"
)

func (e NotificationSubscriptionDeviceEnum) ToPointer() *NotificationSubscriptionDeviceEnum {
	return &e
}

func (e *NotificationSubscriptionDeviceEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "iOS":
		fallthrough
	case "Android":
		fallthrough
	case "Chrome":
		fallthrough
	case "Firefox":
		fallthrough
	case "Safari":
		fallthrough
	case "Edge":
		fallthrough
	case "Amazon":
		fallthrough
	case "WindowsPhone":
		fallthrough
	case "Windows":
		fallthrough
	case "MacOS":
		*e = NotificationSubscriptionDeviceEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NotificationSubscriptionDeviceEnum: %v", v)
	}
}

type NotificationSubscriptionTypeEnum string

const (
	NotificationSubscriptionTypeEnumOneSignal NotificationSubscriptionTypeEnum = "OneSignal"
)

func (e NotificationSubscriptionTypeEnum) ToPointer() *NotificationSubscriptionTypeEnum {
	return &e
}

func (e *NotificationSubscriptionTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OneSignal":
		*e = NotificationSubscriptionTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NotificationSubscriptionTypeEnum: %v", v)
	}
}

type NotificationSubscription struct {
	Device *NotificationSubscriptionDeviceEnum `json:"device,omitempty"`
	// OneSignal calls this "player ID".
	Endpoint *string                           `json:"endpoint,omitempty"`
	Type     *NotificationSubscriptionTypeEnum `json:"type,omitempty"`
}
