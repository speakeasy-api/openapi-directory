<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * RateBasedRule - <note> <p>This is <b>AWS WAF Classic</b> documentation. For more information, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html">AWS WAF Classic</a> in the developer guide.</p> <p> <b>For the latest version of AWS WAF</b>, use the AWS WAFV2 API and see the <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">AWS WAF Developer Guide</a>. With the latest version, AWS WAF has a single set of endpoints for regional and global use. </p> </note> <p>A <code>RateBasedRule</code> is identical to a regular <a>Rule</a>, with one addition: a <code>RateBasedRule</code> counts the number of requests that arrive from a specified IP address every five minutes. For example, based on recent requests that you've seen from an attacker, you might create a <code>RateBasedRule</code> that includes the following conditions: </p> <ul> <li> <p>The requests come from 192.0.2.44.</p> </li> <li> <p>They contain the value <code>BadBot</code> in the <code>User-Agent</code> header.</p> </li> </ul> <p>In the rule, you also define the rate limit as 1,000.</p> <p>Requests that meet both of these conditions and exceed 1,000 requests every five minutes trigger the rule's action (block or count), which is defined in the web ACL.</p>
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class RateBasedRule
{
    /**
     * $matchPredicates
     * 
     * @var array<\OpenAPI\OpenAPI\Models\Shared\Predicate> $matchPredicates
     */
	#[\JMS\Serializer\Annotation\SerializedName('MatchPredicates')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\Predicate>')]
    public array $matchPredicates;
    
	#[\JMS\Serializer\Annotation\SerializedName('MetricName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $metricName = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('Name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('RateKey')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\RateKeyEnum>')]
    public RateKeyEnum $rateKey;
    
	#[\JMS\Serializer\Annotation\SerializedName('RateLimit')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $rateLimit;
    
	#[\JMS\Serializer\Annotation\SerializedName('RuleId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $ruleId;
    
	public function __construct()
	{
		$this->matchPredicates = [];
		$this->metricName = null;
		$this->name = null;
		$this->rateKey = \OpenAPI\OpenAPI\Models\Shared\RateKeyEnum::IP;
		$this->rateLimit = 0;
		$this->ruleId = "";
	}
}
