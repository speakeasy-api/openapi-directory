"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class ReleasesUpdateDetailsSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReleasesUpdateDetailsRequestBodyBuild:
    r"""Contains metadata about the build that produced the release being uploaded"""
    
    branch_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('branch_name'), 'exclude': lambda f: f is None }})
    r"""The branch name of the build producing the release"""  
    commit_hash: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commit_hash'), 'exclude': lambda f: f is None }})
    r"""The commit hash of the build producing the release"""  
    commit_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commit_message'), 'exclude': lambda f: f is None }})
    r"""The commit message of the build producing the release"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReleasesUpdateDetailsRequestBody:
    r"""A request containing information for updating details of a release"""
    
    build: Optional[ReleasesUpdateDetailsRequestBodyBuild] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('build'), 'exclude': lambda f: f is None }})
    r"""Contains metadata about the build that produced the release being uploaded"""  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Toggle this release to be enable distribute/download or not."""  
    release_notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('release_notes'), 'exclude': lambda f: f is None }})
    r"""Release notes for this release."""  
    

@dataclasses.dataclass
class ReleasesUpdateDetailsRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    release_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'release_id', 'style': 'simple', 'explode': False }})
    r"""The ID of the release"""  
    request_body: ReleasesUpdateDetailsRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""The release information."""  
    
class ReleasesUpdateDetails404ApplicationJSONCodeEnum(str, Enum):
    BAD_REQUEST = 'BadRequest'
    CONFLICT = 'Conflict'
    NOT_ACCEPTABLE = 'NotAcceptable'
    NOT_FOUND = 'NotFound'
    INTERNAL_SERVER_ERROR = 'InternalServerError'
    UNAUTHORIZED = 'Unauthorized'
    TOO_MANY_REQUESTS = 'TooManyRequests'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReleasesUpdateDetails404ApplicationJSON:
    r"""Release not found"""
    
    code: ReleasesUpdateDetails404ApplicationJSONCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    
class ReleasesUpdateDetails400ApplicationJSONCodeEnum(str, Enum):
    BAD_REQUEST = 'BadRequest'
    CONFLICT = 'Conflict'
    NOT_ACCEPTABLE = 'NotAcceptable'
    NOT_FOUND = 'NotFound'
    INTERNAL_SERVER_ERROR = 'InternalServerError'
    UNAUTHORIZED = 'Unauthorized'
    TOO_MANY_REQUESTS = 'TooManyRequests'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReleasesUpdateDetails400ApplicationJSONDestinations:
    
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""Error Codes:<br>
    <b>invalid_store_secrets</b>: While distributing to store, secrets provided for store are not valid.<br>
    <b>store_release_bad_request</b>: Proper package release details for the store is not provided.<br>
    <b>store_release_unauthorized</b>: User is not authorized to publish to store due to invalid developer credentials.<br>
    <b>store_release_forbidden</b>: Publish to store is forbidden due to conflicts/errors in the release version and already existing version in the store.<br>
    <b>store_release_promotion</b>: Release already distributed, promoting a release is not supported.<br>
    <b>store_track_deactivated</b>: One or more tracks would be deactivated with this release. This is not supported yet.<br>
    <b>store_release_not_found</b>: App with the given package name is not found in the store.<br>
    <b>store_release_not_available</b>: The release is not available.<br>
    <b>internal_server_error</b>: Failed to distribute to a destination due to an internal server error.
    """  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReleasesUpdateDetails400ApplicationJSON:
    r"""Failure"""
    
    code: ReleasesUpdateDetails400ApplicationJSONCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    destinations: Optional[list[ReleasesUpdateDetails400ApplicationJSONDestinations]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinations'), 'exclude': lambda f: f is None }})  
    mandatory_update: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mandatory_update'), 'exclude': lambda f: f is None }})  
    release_notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('release_notes'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReleasesUpdateDetails200ApplicationJSONDestinations:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReleasesUpdateDetails200ApplicationJSON:
    r"""Response for updating a release"""
    
    destinations: Optional[list[ReleasesUpdateDetails200ApplicationJSONDestinations]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinations'), 'exclude': lambda f: f is None }})  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})  
    mandatory_update: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mandatory_update'), 'exclude': lambda f: f is None }})  
    provisioning_status_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provisioning_status_url'), 'exclude': lambda f: f is None }})  
    release_notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('release_notes'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class ReleasesUpdateDetailsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    releases_update_details_200_application_json_object: Optional[ReleasesUpdateDetails200ApplicationJSON] = dataclasses.field(default=None)
    r"""Success"""  
    releases_update_details_400_application_json_object: Optional[ReleasesUpdateDetails400ApplicationJSON] = dataclasses.field(default=None)
    r"""Failure"""  
    releases_update_details_404_application_json_object: Optional[ReleasesUpdateDetails404ApplicationJSON] = dataclasses.field(default=None)
    r"""Release not found"""  
    