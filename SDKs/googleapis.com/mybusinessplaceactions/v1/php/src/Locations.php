<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Locations 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a place action link associated with the specified location, and returns it. The request is considered duplicate if the `parent`, `place_action_link.uri` and `place_action_link.place_action_type` are the same as a previous request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessplaceactionsLocationsPlaceActionLinksCreateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessplaceactionsLocationsPlaceActionLinksCreateResponse
     */
	public function mybusinessplaceactionsLocationsPlaceActionLinksCreate(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessplaceactionsLocationsPlaceActionLinksCreateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessplaceactionsLocationsPlaceActionLinksCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/placeActionLinks', \OpenAPI\OpenAPI\Models\Operations\MybusinessplaceactionsLocationsPlaceActionLinksCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "placeActionLinkInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessplaceactionsLocationsPlaceActionLinksCreateRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessplaceactionsLocationsPlaceActionLinksCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->placeActionLink = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PlaceActionLink', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a place action link from the specified location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessplaceactionsLocationsPlaceActionLinksDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessplaceactionsLocationsPlaceActionLinksDeleteResponse
     */
	public function mybusinessplaceactionsLocationsPlaceActionLinksDelete(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessplaceactionsLocationsPlaceActionLinksDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessplaceactionsLocationsPlaceActionLinksDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\MybusinessplaceactionsLocationsPlaceActionLinksDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessplaceactionsLocationsPlaceActionLinksDeleteRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessplaceactionsLocationsPlaceActionLinksDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the specified place action link.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessplaceactionsLocationsPlaceActionLinksGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessplaceactionsLocationsPlaceActionLinksGetResponse
     */
	public function mybusinessplaceactionsLocationsPlaceActionLinksGet(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessplaceactionsLocationsPlaceActionLinksGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessplaceactionsLocationsPlaceActionLinksGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\MybusinessplaceactionsLocationsPlaceActionLinksGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessplaceactionsLocationsPlaceActionLinksGetRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessplaceactionsLocationsPlaceActionLinksGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->placeActionLink = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PlaceActionLink', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the place action links for the specified location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessplaceactionsLocationsPlaceActionLinksListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessplaceactionsLocationsPlaceActionLinksListResponse
     */
	public function mybusinessplaceactionsLocationsPlaceActionLinksList(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessplaceactionsLocationsPlaceActionLinksListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessplaceactionsLocationsPlaceActionLinksListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/placeActionLinks', \OpenAPI\OpenAPI\Models\Operations\MybusinessplaceactionsLocationsPlaceActionLinksListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessplaceactionsLocationsPlaceActionLinksListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessplaceactionsLocationsPlaceActionLinksListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listPlaceActionLinksResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListPlaceActionLinksResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the specified place action link and returns it.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessplaceactionsLocationsPlaceActionLinksPatchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessplaceactionsLocationsPlaceActionLinksPatchResponse
     */
	public function mybusinessplaceactionsLocationsPlaceActionLinksPatch(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessplaceactionsLocationsPlaceActionLinksPatchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessplaceactionsLocationsPlaceActionLinksPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\MybusinessplaceactionsLocationsPlaceActionLinksPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "placeActionLinkInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessplaceactionsLocationsPlaceActionLinksPatchRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessplaceactionsLocationsPlaceActionLinksPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->placeActionLink = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PlaceActionLink', 'json');
            }
        }

        return $response;
    }
}