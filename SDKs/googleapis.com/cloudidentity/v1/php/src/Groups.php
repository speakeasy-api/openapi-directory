<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Groups 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a Group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsCreateResponse
     */
	public function cloudidentityGroupsCreate(
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/groups');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "groupInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the `Group` resources under a customer or namespace.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsListResponse
     */
	public function cloudidentityGroupsList(
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/groups');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listGroupsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListGroupsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Looks up the [resource name](https://cloud.google.com/apis/design/resource_names) of a `Group` by its `EntityKey`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsLookupRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsLookupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsLookupResponse
     */
	public function cloudidentityGroupsLookup(
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsLookupRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsLookupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsLookupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/groups:lookup');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsLookupRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsLookupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->lookupGroupNameResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LookupGroupNameResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Check a potential member for membership in a group. **Note:** This feature is only available to Google Workspace Enterprise Standard, Enterprise Plus, and Enterprise for Education; and Cloud Identity Premium accounts. If the account of the member is not one of these, a 403 (PERMISSION_DENIED) HTTP status code will be returned. A member has membership to a group as long as there is a single viewable transitive membership between the group and the member. The actor must have view permissions to at least one transitive membership between the member and group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsCheckTransitiveMembershipRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsCheckTransitiveMembershipSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsCheckTransitiveMembershipResponse
     */
	public function cloudidentityGroupsMembershipsCheckTransitiveMembership(
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsCheckTransitiveMembershipRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsCheckTransitiveMembershipSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsCheckTransitiveMembershipResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/memberships:checkTransitiveMembership', \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsCheckTransitiveMembershipRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsCheckTransitiveMembershipRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsCheckTransitiveMembershipResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->checkTransitiveMembershipResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CheckTransitiveMembershipResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a `Membership`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsCreateResponse
     */
	public function cloudidentityGroupsMembershipsCreate(
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/memberships', \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "membershipInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a membership graph of just a member or both a member and a group. **Note:** This feature is only available to Google Workspace Enterprise Standard, Enterprise Plus, and Enterprise for Education; and Cloud Identity Premium accounts. If the account of the member is not one of these, a 403 (PERMISSION_DENIED) HTTP status code will be returned. Given a member, the response will contain all membership paths from the member. Given both a group and a member, the response will contain all membership paths between the group and the member.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsGetMembershipGraphRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsGetMembershipGraphSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsGetMembershipGraphResponse
     */
	public function cloudidentityGroupsMembershipsGetMembershipGraph(
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsGetMembershipGraphRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsGetMembershipGraphSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsGetMembershipGraphResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/memberships:getMembershipGraph', \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsGetMembershipGraphRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsGetMembershipGraphRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsGetMembershipGraphResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the `Membership`s within a `Group`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsListResponse
     */
	public function cloudidentityGroupsMembershipsList(
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/memberships', \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listMembershipsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListMembershipsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Looks up the [resource name](https://cloud.google.com/apis/design/resource_names) of a `Membership` by its `EntityKey`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsLookupRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsLookupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsLookupResponse
     */
	public function cloudidentityGroupsMembershipsLookup(
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsLookupRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsLookupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsLookupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/memberships:lookup', \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsLookupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsLookupRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsLookupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->lookupMembershipNameResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LookupMembershipNameResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Modifies the `MembershipRole`s of a `Membership`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsModifyMembershipRolesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsModifyMembershipRolesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsModifyMembershipRolesResponse
     */
	public function cloudidentityGroupsMembershipsModifyMembershipRoles(
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsModifyMembershipRolesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsModifyMembershipRolesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsModifyMembershipRolesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:modifyMembershipRoles', \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsModifyMembershipRolesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "modifyMembershipRolesRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsModifyMembershipRolesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsModifyMembershipRolesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->modifyMembershipRolesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ModifyMembershipRolesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Searches direct groups of a member.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsSearchDirectGroupsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsSearchDirectGroupsResponse
     */
	public function cloudidentityGroupsMembershipsSearchDirectGroups(
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsSearchDirectGroupsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsSearchDirectGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/memberships:searchDirectGroups', \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsSearchDirectGroupsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsSearchDirectGroupsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsSearchDirectGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->searchDirectGroupsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SearchDirectGroupsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Search transitive groups of a member. **Note:** This feature is only available to Google Workspace Enterprise Standard, Enterprise Plus, and Enterprise for Education; and Cloud Identity Premium accounts. If the account of the member is not one of these, a 403 (PERMISSION_DENIED) HTTP status code will be returned. A transitive group is any group that has a direct or indirect membership to the member. Actor must have view permissions all transitive groups.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsSearchTransitiveGroupsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsSearchTransitiveGroupsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsSearchTransitiveGroupsResponse
     */
	public function cloudidentityGroupsMembershipsSearchTransitiveGroups(
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsSearchTransitiveGroupsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsSearchTransitiveGroupsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsSearchTransitiveGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/memberships:searchTransitiveGroups', \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsSearchTransitiveGroupsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsSearchTransitiveGroupsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsSearchTransitiveGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->searchTransitiveGroupsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SearchTransitiveGroupsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Search transitive memberships of a group. **Note:** This feature is only available to Google Workspace Enterprise Standard, Enterprise Plus, and Enterprise for Education; and Cloud Identity Premium accounts. If the account of the group is not one of these, a 403 (PERMISSION_DENIED) HTTP status code will be returned. A transitive membership is any direct or indirect membership of a group. Actor must have view permissions to all transitive memberships.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsSearchTransitiveMembershipsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsSearchTransitiveMembershipsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsSearchTransitiveMembershipsResponse
     */
	public function cloudidentityGroupsMembershipsSearchTransitiveMemberships(
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsSearchTransitiveMembershipsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsSearchTransitiveMembershipsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsSearchTransitiveMembershipsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/memberships:searchTransitiveMemberships', \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsSearchTransitiveMembershipsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsSearchTransitiveMembershipsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsMembershipsSearchTransitiveMembershipsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->searchTransitiveMembershipsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SearchTransitiveMembershipsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Searches for `Group` resources matching a specified query.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsSearchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsSearchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsSearchResponse
     */
	public function cloudidentityGroupsSearch(
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsSearchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsSearchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsSearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/groups:search');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsSearchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudidentityGroupsSearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->searchGroupsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SearchGroupsResponse', 'json');
            }
        }

        return $response;
    }
}