"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .near_misses import NearMisses
from .recordings import Recordings
from .requests import Requests
from .scenarios import Scenarios
from .stub_mappings import StubMappings
from .system import System

SERVERS = [
    "/",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""http://wiremock.org/docs/ - WireMock user documentation"""
    near_misses: NearMisses
    r"""Near misses allow querying of received requests or request patterns according to similarity
    http://wiremock.org/docs/verifying/#near-misses - User documentation
    """
    recordings: Recordings
    r"""Stub mapping record and snapshot functions
    http://wiremock.org/docs/record-playback/ - User documentation
    """
    requests: Requests
    r"""Logged requests and responses received by the mock service
    http://wiremock.org/docs/verifying/ - User documentation
    """
    scenarios: Scenarios
    r"""Scenarios support modelling of stateful behaviour
    http://wiremock.org/docs/stateful-behaviour/ - User documentation
    """
    stub_mappings: StubMappings
    r"""Operations on stub mappings
    http://wiremock.org/docs/stubbing/ - User documentation
    """
    system: System
    r"""Global operations"""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.near_misses = NearMisses(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.recordings = Recordings(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.requests = Requests(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.scenarios = Scenarios(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.stub_mappings = StubMappings(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.system = System(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    