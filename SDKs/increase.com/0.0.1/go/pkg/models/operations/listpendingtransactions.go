// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ListPendingTransactionsStatusInEnum string

const (
	ListPendingTransactionsStatusInEnumPending  ListPendingTransactionsStatusInEnum = "pending"
	ListPendingTransactionsStatusInEnumComplete ListPendingTransactionsStatusInEnum = "complete"
)

func (e *ListPendingTransactionsStatusInEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pending":
		fallthrough
	case "complete":
		*e = ListPendingTransactionsStatusInEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPendingTransactionsStatusInEnum: %s", s)
	}
}

type ListPendingTransactionsRequest struct {
	AccountID *string                               `queryParam:"style=form,explode=true,name=account_id"`
	Cursor    *string                               `queryParam:"style=form,explode=true,name=cursor"`
	Limit     *int64                                `queryParam:"style=form,explode=true,name=limit"`
	RouteID   *string                               `queryParam:"style=form,explode=true,name=route_id"`
	SourceID  *string                               `queryParam:"style=form,explode=true,name=source_id"`
	StatusIn  []ListPendingTransactionsStatusInEnum `queryParam:"style=form,explode=true,name=status.in"`
}

type ListPendingTransactionsDefaultApplicationJSON13StatusEnum string

const (
	ListPendingTransactionsDefaultApplicationJSON13StatusEnumFourHundredAndTwentyNine ListPendingTransactionsDefaultApplicationJSON13StatusEnum = "429"
)

func (e *ListPendingTransactionsDefaultApplicationJSON13StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "429":
		*e = ListPendingTransactionsDefaultApplicationJSON13StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPendingTransactionsDefaultApplicationJSON13StatusEnum: %s", s)
	}
}

type ListPendingTransactionsDefaultApplicationJSON13TypeEnum string

const (
	ListPendingTransactionsDefaultApplicationJSON13TypeEnumRateLimitedError ListPendingTransactionsDefaultApplicationJSON13TypeEnum = "rate_limited_error"
)

func (e *ListPendingTransactionsDefaultApplicationJSON13TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "rate_limited_error":
		*e = ListPendingTransactionsDefaultApplicationJSON13TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPendingTransactionsDefaultApplicationJSON13TypeEnum: %s", s)
	}
}

type ListPendingTransactionsDefaultApplicationJSON13 struct {
	Detail     string                                                    `json:"detail"`
	RetryAfter *int64                                                    `json:"retry_after,omitempty"`
	Status     ListPendingTransactionsDefaultApplicationJSON13StatusEnum `json:"status"`
	Title      string                                                    `json:"title"`
	Type       ListPendingTransactionsDefaultApplicationJSON13TypeEnum   `json:"type"`
}

type ListPendingTransactionsDefaultApplicationJSON12StatusEnum string

const (
	ListPendingTransactionsDefaultApplicationJSON12StatusEnumFourHundredAndThree ListPendingTransactionsDefaultApplicationJSON12StatusEnum = "403"
)

func (e *ListPendingTransactionsDefaultApplicationJSON12StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "403":
		*e = ListPendingTransactionsDefaultApplicationJSON12StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPendingTransactionsDefaultApplicationJSON12StatusEnum: %s", s)
	}
}

type ListPendingTransactionsDefaultApplicationJSON12TypeEnum string

const (
	ListPendingTransactionsDefaultApplicationJSON12TypeEnumPrivateFeatureError ListPendingTransactionsDefaultApplicationJSON12TypeEnum = "private_feature_error"
)

func (e *ListPendingTransactionsDefaultApplicationJSON12TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "private_feature_error":
		*e = ListPendingTransactionsDefaultApplicationJSON12TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPendingTransactionsDefaultApplicationJSON12TypeEnum: %s", s)
	}
}

type ListPendingTransactionsDefaultApplicationJSON12 struct {
	Detail string                                                    `json:"detail"`
	Status ListPendingTransactionsDefaultApplicationJSON12StatusEnum `json:"status"`
	Title  string                                                    `json:"title"`
	Type   ListPendingTransactionsDefaultApplicationJSON12TypeEnum   `json:"type"`
}

type ListPendingTransactionsDefaultApplicationJSON11StatusEnum string

const (
	ListPendingTransactionsDefaultApplicationJSON11StatusEnumFourHundredAndFour ListPendingTransactionsDefaultApplicationJSON11StatusEnum = "404"
)

func (e *ListPendingTransactionsDefaultApplicationJSON11StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "404":
		*e = ListPendingTransactionsDefaultApplicationJSON11StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPendingTransactionsDefaultApplicationJSON11StatusEnum: %s", s)
	}
}

type ListPendingTransactionsDefaultApplicationJSON11TypeEnum string

const (
	ListPendingTransactionsDefaultApplicationJSON11TypeEnumObjectNotFoundError ListPendingTransactionsDefaultApplicationJSON11TypeEnum = "object_not_found_error"
)

func (e *ListPendingTransactionsDefaultApplicationJSON11TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "object_not_found_error":
		*e = ListPendingTransactionsDefaultApplicationJSON11TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPendingTransactionsDefaultApplicationJSON11TypeEnum: %s", s)
	}
}

type ListPendingTransactionsDefaultApplicationJSON11 struct {
	Detail string                                                    `json:"detail"`
	Status ListPendingTransactionsDefaultApplicationJSON11StatusEnum `json:"status"`
	Title  string                                                    `json:"title"`
	Type   ListPendingTransactionsDefaultApplicationJSON11TypeEnum   `json:"type"`
}

type ListPendingTransactionsDefaultApplicationJSON10StatusEnum string

const (
	ListPendingTransactionsDefaultApplicationJSON10StatusEnumFourHundred ListPendingTransactionsDefaultApplicationJSON10StatusEnum = "400"
)

func (e *ListPendingTransactionsDefaultApplicationJSON10StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "400":
		*e = ListPendingTransactionsDefaultApplicationJSON10StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPendingTransactionsDefaultApplicationJSON10StatusEnum: %s", s)
	}
}

type ListPendingTransactionsDefaultApplicationJSON10TypeEnum string

const (
	ListPendingTransactionsDefaultApplicationJSON10TypeEnumMalformedRequestError ListPendingTransactionsDefaultApplicationJSON10TypeEnum = "malformed_request_error"
)

func (e *ListPendingTransactionsDefaultApplicationJSON10TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "malformed_request_error":
		*e = ListPendingTransactionsDefaultApplicationJSON10TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPendingTransactionsDefaultApplicationJSON10TypeEnum: %s", s)
	}
}

type ListPendingTransactionsDefaultApplicationJSON10 struct {
	Detail string                                                    `json:"detail"`
	Status ListPendingTransactionsDefaultApplicationJSON10StatusEnum `json:"status"`
	Title  string                                                    `json:"title"`
	Type   ListPendingTransactionsDefaultApplicationJSON10TypeEnum   `json:"type"`
}

type ListPendingTransactionsDefaultApplicationJSON9StatusEnum string

const (
	ListPendingTransactionsDefaultApplicationJSON9StatusEnumFourHundred ListPendingTransactionsDefaultApplicationJSON9StatusEnum = "400"
)

func (e *ListPendingTransactionsDefaultApplicationJSON9StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "400":
		*e = ListPendingTransactionsDefaultApplicationJSON9StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPendingTransactionsDefaultApplicationJSON9StatusEnum: %s", s)
	}
}

type ListPendingTransactionsDefaultApplicationJSON9TypeEnum string

const (
	ListPendingTransactionsDefaultApplicationJSON9TypeEnumInvalidParametersError ListPendingTransactionsDefaultApplicationJSON9TypeEnum = "invalid_parameters_error"
)

func (e *ListPendingTransactionsDefaultApplicationJSON9TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_parameters_error":
		*e = ListPendingTransactionsDefaultApplicationJSON9TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPendingTransactionsDefaultApplicationJSON9TypeEnum: %s", s)
	}
}

type ListPendingTransactionsDefaultApplicationJSON9 struct {
	Detail string `json:"detail"`
	// All errors related to parsing the request parameters.
	Errors []map[string]interface{}                                 `json:"errors,omitempty"`
	Status ListPendingTransactionsDefaultApplicationJSON9StatusEnum `json:"status"`
	Title  string                                                   `json:"title"`
	Type   ListPendingTransactionsDefaultApplicationJSON9TypeEnum   `json:"type"`
}

type ListPendingTransactionsDefaultApplicationJSON8StatusEnum string

const (
	ListPendingTransactionsDefaultApplicationJSON8StatusEnumFourHundredAndNine ListPendingTransactionsDefaultApplicationJSON8StatusEnum = "409"
)

func (e *ListPendingTransactionsDefaultApplicationJSON8StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "409":
		*e = ListPendingTransactionsDefaultApplicationJSON8StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPendingTransactionsDefaultApplicationJSON8StatusEnum: %s", s)
	}
}

type ListPendingTransactionsDefaultApplicationJSON8TypeEnum string

const (
	ListPendingTransactionsDefaultApplicationJSON8TypeEnumInvalidOperationError ListPendingTransactionsDefaultApplicationJSON8TypeEnum = "invalid_operation_error"
)

func (e *ListPendingTransactionsDefaultApplicationJSON8TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_operation_error":
		*e = ListPendingTransactionsDefaultApplicationJSON8TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPendingTransactionsDefaultApplicationJSON8TypeEnum: %s", s)
	}
}

type ListPendingTransactionsDefaultApplicationJSON8 struct {
	Detail string                                                   `json:"detail"`
	Status ListPendingTransactionsDefaultApplicationJSON8StatusEnum `json:"status"`
	Title  string                                                   `json:"title"`
	Type   ListPendingTransactionsDefaultApplicationJSON8TypeEnum   `json:"type"`
}

type ListPendingTransactionsDefaultApplicationJSON7StatusEnum string

const (
	ListPendingTransactionsDefaultApplicationJSON7StatusEnumFourHundredAndOne ListPendingTransactionsDefaultApplicationJSON7StatusEnum = "401"
)

func (e *ListPendingTransactionsDefaultApplicationJSON7StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "401":
		*e = ListPendingTransactionsDefaultApplicationJSON7StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPendingTransactionsDefaultApplicationJSON7StatusEnum: %s", s)
	}
}

type ListPendingTransactionsDefaultApplicationJSON7TypeEnum string

const (
	ListPendingTransactionsDefaultApplicationJSON7TypeEnumInvalidAPIKeyError ListPendingTransactionsDefaultApplicationJSON7TypeEnum = "invalid_api_key_error"
)

func (e *ListPendingTransactionsDefaultApplicationJSON7TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_api_key_error":
		*e = ListPendingTransactionsDefaultApplicationJSON7TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPendingTransactionsDefaultApplicationJSON7TypeEnum: %s", s)
	}
}

type ListPendingTransactionsDefaultApplicationJSON7 struct {
	Detail string                                                   `json:"detail"`
	Status ListPendingTransactionsDefaultApplicationJSON7StatusEnum `json:"status"`
	Title  string                                                   `json:"title"`
	Type   ListPendingTransactionsDefaultApplicationJSON7TypeEnum   `json:"type"`
}

type ListPendingTransactionsDefaultApplicationJSON6StatusEnum string

const (
	ListPendingTransactionsDefaultApplicationJSON6StatusEnumFiveHundred ListPendingTransactionsDefaultApplicationJSON6StatusEnum = "500"
)

func (e *ListPendingTransactionsDefaultApplicationJSON6StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "500":
		*e = ListPendingTransactionsDefaultApplicationJSON6StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPendingTransactionsDefaultApplicationJSON6StatusEnum: %s", s)
	}
}

type ListPendingTransactionsDefaultApplicationJSON6TypeEnum string

const (
	ListPendingTransactionsDefaultApplicationJSON6TypeEnumInternalServerError ListPendingTransactionsDefaultApplicationJSON6TypeEnum = "internal_server_error"
)

func (e *ListPendingTransactionsDefaultApplicationJSON6TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = ListPendingTransactionsDefaultApplicationJSON6TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPendingTransactionsDefaultApplicationJSON6TypeEnum: %s", s)
	}
}

type ListPendingTransactionsDefaultApplicationJSON6 struct {
	Detail string                                                   `json:"detail"`
	Status ListPendingTransactionsDefaultApplicationJSON6StatusEnum `json:"status"`
	Title  string                                                   `json:"title"`
	Type   ListPendingTransactionsDefaultApplicationJSON6TypeEnum   `json:"type"`
}

type ListPendingTransactionsDefaultApplicationJSON5StatusEnum string

const (
	ListPendingTransactionsDefaultApplicationJSON5StatusEnumFourHundredAndThree ListPendingTransactionsDefaultApplicationJSON5StatusEnum = "403"
)

func (e *ListPendingTransactionsDefaultApplicationJSON5StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "403":
		*e = ListPendingTransactionsDefaultApplicationJSON5StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPendingTransactionsDefaultApplicationJSON5StatusEnum: %s", s)
	}
}

type ListPendingTransactionsDefaultApplicationJSON5TypeEnum string

const (
	ListPendingTransactionsDefaultApplicationJSON5TypeEnumInsufficientPermissionsError ListPendingTransactionsDefaultApplicationJSON5TypeEnum = "insufficient_permissions_error"
)

func (e *ListPendingTransactionsDefaultApplicationJSON5TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "insufficient_permissions_error":
		*e = ListPendingTransactionsDefaultApplicationJSON5TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPendingTransactionsDefaultApplicationJSON5TypeEnum: %s", s)
	}
}

type ListPendingTransactionsDefaultApplicationJSON5 struct {
	Detail string                                                   `json:"detail"`
	Status ListPendingTransactionsDefaultApplicationJSON5StatusEnum `json:"status"`
	Title  string                                                   `json:"title"`
	Type   ListPendingTransactionsDefaultApplicationJSON5TypeEnum   `json:"type"`
}

type ListPendingTransactionsDefaultApplicationJSON4StatusEnum string

const (
	ListPendingTransactionsDefaultApplicationJSON4StatusEnumFourHundredAndTwentyTwo ListPendingTransactionsDefaultApplicationJSON4StatusEnum = "422"
)

func (e *ListPendingTransactionsDefaultApplicationJSON4StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "422":
		*e = ListPendingTransactionsDefaultApplicationJSON4StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPendingTransactionsDefaultApplicationJSON4StatusEnum: %s", s)
	}
}

type ListPendingTransactionsDefaultApplicationJSON4TypeEnum string

const (
	ListPendingTransactionsDefaultApplicationJSON4TypeEnumIdempotencyUnprocessableError ListPendingTransactionsDefaultApplicationJSON4TypeEnum = "idempotency_unprocessable_error"
)

func (e *ListPendingTransactionsDefaultApplicationJSON4TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "idempotency_unprocessable_error":
		*e = ListPendingTransactionsDefaultApplicationJSON4TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPendingTransactionsDefaultApplicationJSON4TypeEnum: %s", s)
	}
}

type ListPendingTransactionsDefaultApplicationJSON4 struct {
	Detail string                                                   `json:"detail"`
	Status ListPendingTransactionsDefaultApplicationJSON4StatusEnum `json:"status"`
	Title  string                                                   `json:"title"`
	Type   ListPendingTransactionsDefaultApplicationJSON4TypeEnum   `json:"type"`
}

type ListPendingTransactionsDefaultApplicationJSON3StatusEnum string

const (
	ListPendingTransactionsDefaultApplicationJSON3StatusEnumFourHundredAndNine ListPendingTransactionsDefaultApplicationJSON3StatusEnum = "409"
)

func (e *ListPendingTransactionsDefaultApplicationJSON3StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "409":
		*e = ListPendingTransactionsDefaultApplicationJSON3StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPendingTransactionsDefaultApplicationJSON3StatusEnum: %s", s)
	}
}

type ListPendingTransactionsDefaultApplicationJSON3TypeEnum string

const (
	ListPendingTransactionsDefaultApplicationJSON3TypeEnumIdempotencyConflictError ListPendingTransactionsDefaultApplicationJSON3TypeEnum = "idempotency_conflict_error"
)

func (e *ListPendingTransactionsDefaultApplicationJSON3TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "idempotency_conflict_error":
		*e = ListPendingTransactionsDefaultApplicationJSON3TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPendingTransactionsDefaultApplicationJSON3TypeEnum: %s", s)
	}
}

type ListPendingTransactionsDefaultApplicationJSON3 struct {
	Detail string                                                   `json:"detail"`
	Status ListPendingTransactionsDefaultApplicationJSON3StatusEnum `json:"status"`
	Title  string                                                   `json:"title"`
	Type   ListPendingTransactionsDefaultApplicationJSON3TypeEnum   `json:"type"`
}

type ListPendingTransactionsDefaultApplicationJSON2StatusEnum string

const (
	ListPendingTransactionsDefaultApplicationJSON2StatusEnumFourHundredAndThree ListPendingTransactionsDefaultApplicationJSON2StatusEnum = "403"
)

func (e *ListPendingTransactionsDefaultApplicationJSON2StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "403":
		*e = ListPendingTransactionsDefaultApplicationJSON2StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPendingTransactionsDefaultApplicationJSON2StatusEnum: %s", s)
	}
}

type ListPendingTransactionsDefaultApplicationJSON2TypeEnum string

const (
	ListPendingTransactionsDefaultApplicationJSON2TypeEnumEnvironmentMismatchError ListPendingTransactionsDefaultApplicationJSON2TypeEnum = "environment_mismatch_error"
)

func (e *ListPendingTransactionsDefaultApplicationJSON2TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "environment_mismatch_error":
		*e = ListPendingTransactionsDefaultApplicationJSON2TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPendingTransactionsDefaultApplicationJSON2TypeEnum: %s", s)
	}
}

type ListPendingTransactionsDefaultApplicationJSON2 struct {
	Detail string                                                   `json:"detail"`
	Status ListPendingTransactionsDefaultApplicationJSON2StatusEnum `json:"status"`
	Title  string                                                   `json:"title"`
	Type   ListPendingTransactionsDefaultApplicationJSON2TypeEnum   `json:"type"`
}

type ListPendingTransactionsDefaultApplicationJSON1StatusEnum string

const (
	ListPendingTransactionsDefaultApplicationJSON1StatusEnumFourHundredAndFour ListPendingTransactionsDefaultApplicationJSON1StatusEnum = "404"
)

func (e *ListPendingTransactionsDefaultApplicationJSON1StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "404":
		*e = ListPendingTransactionsDefaultApplicationJSON1StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPendingTransactionsDefaultApplicationJSON1StatusEnum: %s", s)
	}
}

type ListPendingTransactionsDefaultApplicationJSON1TypeEnum string

const (
	ListPendingTransactionsDefaultApplicationJSON1TypeEnumAPIMethodNotFoundError ListPendingTransactionsDefaultApplicationJSON1TypeEnum = "api_method_not_found_error"
)

func (e *ListPendingTransactionsDefaultApplicationJSON1TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "api_method_not_found_error":
		*e = ListPendingTransactionsDefaultApplicationJSON1TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPendingTransactionsDefaultApplicationJSON1TypeEnum: %s", s)
	}
}

type ListPendingTransactionsDefaultApplicationJSON1 struct {
	Detail string                                                   `json:"detail"`
	Status ListPendingTransactionsDefaultApplicationJSON1StatusEnum `json:"status"`
	Title  string                                                   `json:"title"`
	Type   ListPendingTransactionsDefaultApplicationJSON1TypeEnum   `json:"type"`
}

type ListPendingTransactionsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Error
	Error interface{}
	// Pending Transaction List
	PendingTransactionList *shared.PendingTransactionList
}
