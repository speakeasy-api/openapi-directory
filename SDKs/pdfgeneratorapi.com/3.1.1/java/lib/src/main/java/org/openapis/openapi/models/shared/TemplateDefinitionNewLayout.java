/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * TemplateDefinitionNewLayout - Defines template layout (e.g page format, margins).
 */
public class TemplateDefinitionNewLayout {
    /**
     * Defines how many pages or labels should be empty
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emptyLabels")
    public Long emptyLabels;

    public TemplateDefinitionNewLayout withEmptyLabels(Long emptyLabels) {
        this.emptyLabels = emptyLabels;
        return this;
    }
    
    /**
     * Defines template page size
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("format")
    public TemplateDefinitionNewLayoutFormatEnum format;

    public TemplateDefinitionNewLayout withFormat(TemplateDefinitionNewLayoutFormatEnum format) {
        this.format = format;
        return this;
    }
    
    /**
     * Page height in units
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("height")
    public Double height;

    public TemplateDefinitionNewLayout withHeight(Double height) {
        this.height = height;
        return this;
    }
    
    /**
     * Page margins in units
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("margins")
    public TemplateDefinitionNewLayoutMargins margins;

    public TemplateDefinitionNewLayout withMargins(TemplateDefinitionNewLayoutMargins margins) {
        this.margins = margins;
        return this;
    }
    
    /**
     * Page orientation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orientation")
    public TemplateDefinitionNewLayoutOrientationEnum orientation;

    public TemplateDefinitionNewLayout withOrientation(TemplateDefinitionNewLayoutOrientationEnum orientation) {
        this.orientation = orientation;
        return this;
    }
    
    /**
     * Defines page size if layout is repeated on the page e.g sheet labels
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("repeatLayout")
    public TemplateDefinitionNewLayoutRepeatLayout repeatLayout;

    public TemplateDefinitionNewLayout withRepeatLayout(TemplateDefinitionNewLayoutRepeatLayout repeatLayout) {
        this.repeatLayout = repeatLayout;
        return this;
    }
    
    /**
     * Page rotation in degrees
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rotaion")
    public TemplateDefinitionNewLayoutRotaionEnum rotaion;

    public TemplateDefinitionNewLayout withRotaion(TemplateDefinitionNewLayoutRotaionEnum rotaion) {
        this.rotaion = rotaion;
        return this;
    }
    
    /**
     * Measure unit
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unit")
    public TemplateDefinitionNewLayoutUnitEnum unit;

    public TemplateDefinitionNewLayout withUnit(TemplateDefinitionNewLayoutUnitEnum unit) {
        this.unit = unit;
        return this;
    }
    
    /**
     * Page width in units
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("width")
    public Double width;

    public TemplateDefinitionNewLayout withWidth(Double width) {
        this.width = width;
        return this;
    }
    
    public TemplateDefinitionNewLayout(){}
}
