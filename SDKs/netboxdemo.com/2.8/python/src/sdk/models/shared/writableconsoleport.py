"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import nestedcable as shared_nestedcable
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class WritableConsolePortConnectionStatusEnum(str, Enum):
    FALSE = 'false'
    TRUE = 'true'

class WritableConsolePortTypeEnum(str, Enum):
    r"""Physical port type"""
    DE_9 = 'de-9'
    DB_25 = 'db-25'
    RJ_11 = 'rj-11'
    RJ_12 = 'rj-12'
    RJ_45 = 'rj-45'
    USB_A = 'usb-a'
    USB_B = 'usb-b'
    USB_C = 'usb-c'
    USB_MINI_A = 'usb-mini-a'
    USB_MINI_B = 'usb-mini-b'
    USB_MICRO_A = 'usb-micro-a'
    USB_MICRO_B = 'usb-micro-b'
    OTHER = 'other'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WritableConsolePortInput:
    
    device: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    cable: Optional[shared_nestedcable.NestedCableInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cable'), 'exclude': lambda f: f is None }})  
    connection_status: Optional[WritableConsolePortConnectionStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connection_status'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    type: Optional[WritableConsolePortTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Physical port type"""  
    