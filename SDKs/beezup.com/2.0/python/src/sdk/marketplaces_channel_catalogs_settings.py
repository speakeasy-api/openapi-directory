"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class MarketplacesChannelCatalogsSettings:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_channel_catalog_marketplace_properties(self, request: operations.GetChannelCatalogMarketplacePropertiesRequest) -> operations.GetChannelCatalogMarketplacePropertiesResponse:
        r"""Get the marketplace properties for a channel catalog"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetChannelCatalogMarketplacePropertiesRequest, base_url, '/v2/user/marketplaces/channelcatalogs/{channelCatalogId}/properties', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetChannelCatalogMarketplacePropertiesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetChannelCatalogMarketplacePropertiesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ChannelCatalogMarketplaceProperties])
                res.channel_catalog_marketplace_properties = out
        elif http_res.status_code == 404:
            pass
        elif http_res.status_code == 503:
            res.headers = http_res.headers
            
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def get_channel_catalog_marketplace_settings(self, request: operations.GetChannelCatalogMarketplaceSettingsRequest) -> operations.GetChannelCatalogMarketplaceSettingsResponse:
        r"""Get the marketplace settings for a channel catalog"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetChannelCatalogMarketplaceSettingsRequest, base_url, '/v2/user/marketplaces/channelcatalogs/{channelCatalogId}/settings', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetChannelCatalogMarketplaceSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ChannelCatalogMarketplaceSettings])
                res.channel_catalog_marketplace_settings = out
        elif http_res.status_code == 404:
            pass
        elif http_res.status_code == 503:
            res.headers = http_res.headers
            
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def set_channel_catalog_marketplace_settings(self, request: operations.SetChannelCatalogMarketplaceSettingsRequest) -> operations.SetChannelCatalogMarketplaceSettingsResponse:
        r"""Save new marketplace settings for a channel catalog
        Allow you to configure your marketplace settings.
        Partial update accepted.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SetChannelCatalogMarketplaceSettingsRequest, base_url, '/v2/user/marketplaces/channelcatalogs/{channelCatalogId}/settings', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "set_channel_catalog_marketplace_settings_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SetChannelCatalogMarketplaceSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [204, 404]:
            pass
        elif http_res.status_code == 503:
            res.headers = http_res.headers
            
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    