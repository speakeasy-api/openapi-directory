"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class BackupSourceInstanceTierEnum(str, Enum):
    r"""Output only. The service tier of the source Filestore instance that this backup is created from."""
    TIER_UNSPECIFIED = 'TIER_UNSPECIFIED'
    STANDARD = 'STANDARD'
    PREMIUM = 'PREMIUM'
    BASIC_HDD = 'BASIC_HDD'
    BASIC_SSD = 'BASIC_SSD'
    HIGH_SCALE_SSD = 'HIGH_SCALE_SSD'
    ENTERPRISE = 'ENTERPRISE'

class BackupStateEnum(str, Enum):
    r"""Output only. The backup state."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    CREATING = 'CREATING'
    FINALIZING = 'FINALIZING'
    READY = 'READY'
    DELETING = 'DELETING'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Backup:
    r"""A Filestore backup."""
    
    capacity_gb: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('capacityGb'), 'exclude': lambda f: f is None }})
    r"""Output only. Capacity of the source file share when the backup was created."""  
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The time when the backup was created."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""A description of the backup with 2048 characters or less. Requests with longer descriptions will be rejected."""  
    download_bytes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('downloadBytes'), 'exclude': lambda f: f is None }})
    r"""Output only. Amount of bytes that will be downloaded if the backup is restored"""  
    kms_key_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kmsKeyName'), 'exclude': lambda f: f is None }})
    r"""Immutable. KMS key name used for data encryption."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Resource labels to represent user provided metadata."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. The resource name of the backup, in the format `projects/{project_id}/locations/{location_id}/backups/{backup_id}`."""  
    satisfies_pzs: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('satisfiesPzs'), 'exclude': lambda f: f is None }})
    r"""Output only. Reserved for future use."""  
    source_file_share: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceFileShare'), 'exclude': lambda f: f is None }})
    r"""Name of the file share in the source Filestore instance that the backup is created from."""  
    source_instance: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceInstance'), 'exclude': lambda f: f is None }})
    r"""The resource name of the source Filestore instance, in the format `projects/{project_id}/locations/{location_id}/instances/{instance_id}`, used to create this backup."""  
    source_instance_tier: Optional[BackupSourceInstanceTierEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceInstanceTier'), 'exclude': lambda f: f is None }})
    r"""Output only. The service tier of the source Filestore instance that this backup is created from."""  
    state: Optional[BackupStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Output only. The backup state."""  
    storage_bytes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('storageBytes'), 'exclude': lambda f: f is None }})
    r"""Output only. The size of the storage used by the backup. As backups share storage, this number is expected to change with backup creation/deletion."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BackupInput:
    r"""A Filestore backup."""
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""A description of the backup with 2048 characters or less. Requests with longer descriptions will be rejected."""  
    kms_key_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kmsKeyName'), 'exclude': lambda f: f is None }})
    r"""Immutable. KMS key name used for data encryption."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Resource labels to represent user provided metadata."""  
    source_file_share: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceFileShare'), 'exclude': lambda f: f is None }})
    r"""Name of the file share in the source Filestore instance that the backup is created from."""  
    source_instance: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceInstance'), 'exclude': lambda f: f is None }})
    r"""The resource name of the source Filestore instance, in the format `projects/{project_id}/locations/{location_id}/instances/{instance_id}`, used to create this backup."""  
    