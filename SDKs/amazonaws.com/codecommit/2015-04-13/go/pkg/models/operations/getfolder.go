// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetFolderXAmzTargetEnum
type GetFolderXAmzTargetEnum string

const (
	GetFolderXAmzTargetEnumCodeCommit20150413GetFolder GetFolderXAmzTargetEnum = "CodeCommit_20150413.GetFolder"
)

func (e GetFolderXAmzTargetEnum) ToPointer() *GetFolderXAmzTargetEnum {
	return &e
}

func (e *GetFolderXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CodeCommit_20150413.GetFolder":
		*e = GetFolderXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFolderXAmzTargetEnum: %v", v)
	}
}

type GetFolderRequest struct {
	GetFolderInput    shared.GetFolderInput   `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                 `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                 `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                 `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                 `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                 `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                 `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                 `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        GetFolderXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetFolderResponse struct {
	// CommitDoesNotExistException
	CommitDoesNotExistException interface{}
	ContentType                 string
	// EncryptionIntegrityChecksFailedException
	EncryptionIntegrityChecksFailedException interface{}
	// EncryptionKeyAccessDeniedException
	EncryptionKeyAccessDeniedException interface{}
	// EncryptionKeyDisabledException
	EncryptionKeyDisabledException interface{}
	// EncryptionKeyNotFoundException
	EncryptionKeyNotFoundException interface{}
	// EncryptionKeyUnavailableException
	EncryptionKeyUnavailableException interface{}
	// FolderDoesNotExistException
	FolderDoesNotExistException interface{}
	// Success
	GetFolderOutput *shared.GetFolderOutput
	// InvalidCommitException
	InvalidCommitException interface{}
	// InvalidPathException
	InvalidPathException interface{}
	// InvalidRepositoryNameException
	InvalidRepositoryNameException interface{}
	// PathRequiredException
	PathRequiredException interface{}
	// RepositoryDoesNotExistException
	RepositoryDoesNotExistException interface{}
	// RepositoryNameRequiredException
	RepositoryNameRequiredException interface{}
	StatusCode                      int
	RawResponse                     *http.Response
}
