// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type AwsKinesisRulePatchRuleTypeEnum string

const (
	AwsKinesisRulePatchRuleTypeEnumAwsKinesis AwsKinesisRulePatchRuleTypeEnum = "aws/kinesis"
)

func (e AwsKinesisRulePatchRuleTypeEnum) ToPointer() *AwsKinesisRulePatchRuleTypeEnum {
	return &e
}

func (e *AwsKinesisRulePatchRuleTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "aws/kinesis":
		*e = AwsKinesisRulePatchRuleTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AwsKinesisRulePatchRuleTypeEnum: %v", v)
	}
}

type AwsKinesisRulePatchTargetAuthenticationType string

const (
	AwsKinesisRulePatchTargetAuthenticationTypeAssumeRole  AwsKinesisRulePatchTargetAuthenticationType = "assumeRole"
	AwsKinesisRulePatchTargetAuthenticationTypeCredentials AwsKinesisRulePatchTargetAuthenticationType = "credentials"
)

type AwsKinesisRulePatchTargetAuthentication struct {
	AwsAccessKeys *AwsAccessKeys
	AwsAssumeRole *AwsAssumeRole

	Type AwsKinesisRulePatchTargetAuthenticationType
}

func CreateAwsKinesisRulePatchTargetAuthenticationAssumeRole(assumeRole AwsAssumeRole) AwsKinesisRulePatchTargetAuthentication {
	typ := AwsKinesisRulePatchTargetAuthenticationTypeAssumeRole
	typStr := AwsAssumeRoleAuthenticationModeEnum(typ)
	assumeRole.AuthenticationMode = &typStr

	return AwsKinesisRulePatchTargetAuthentication{
		AwsAssumeRole: &assumeRole,
		Type:          typ,
	}
}

func CreateAwsKinesisRulePatchTargetAuthenticationCredentials(credentials AwsAccessKeys) AwsKinesisRulePatchTargetAuthentication {
	typ := AwsKinesisRulePatchTargetAuthenticationTypeCredentials
	typStr := AwsAccessKeysAuthenticationModeEnum(typ)
	credentials.AuthenticationMode = &typStr

	return AwsKinesisRulePatchTargetAuthentication{
		AwsAccessKeys: &credentials,
		Type:          typ,
	}
}

func (u *AwsKinesisRulePatchTargetAuthentication) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	type discriminator struct {
		AuthenticationMode string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.AuthenticationMode {
	case "assumeRole":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		awsAssumeRole := new(AwsAssumeRole)
		if err := d.Decode(&awsAssumeRole); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.AwsAssumeRole = awsAssumeRole
		u.Type = AwsKinesisRulePatchTargetAuthenticationTypeAssumeRole
		return nil
	case "credentials":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		awsAccessKeys := new(AwsAccessKeys)
		if err := d.Decode(&awsAccessKeys); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.AwsAccessKeys = awsAccessKeys
		u.Type = AwsKinesisRulePatchTargetAuthenticationTypeCredentials
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u AwsKinesisRulePatchTargetAuthentication) MarshalJSON() ([]byte, error) {
	if u.AwsAccessKeys != nil {
		return json.Marshal(u.AwsAccessKeys)
	}

	if u.AwsAssumeRole != nil {
		return json.Marshal(u.AwsAssumeRole)
	}

	return nil, nil
}

type AwsKinesisRulePatchTarget struct {
	Authentication *AwsKinesisRulePatchTargetAuthentication `json:"authentication,omitempty"`
	Enveloped      *bool                                    `json:"enveloped,omitempty"`
	Format         *string                                  `json:"format,omitempty"`
	PartitionKey   *string                                  `json:"partitionKey,omitempty"`
	Region         *string                                  `json:"region,omitempty"`
	StreamName     *string                                  `json:"streamName,omitempty"`
}

type AwsKinesisRulePatch struct {
	RequestMode *string                         `json:"requestMode,omitempty"`
	RuleType    AwsKinesisRulePatchRuleTypeEnum `json:"ruleType"`
	Source      *RuleSourcePatch                `json:"source,omitempty"`
	Status      *string                         `json:"status,omitempty"`
	Target      *AwsKinesisRulePatchTarget      `json:"target,omitempty"`
}
