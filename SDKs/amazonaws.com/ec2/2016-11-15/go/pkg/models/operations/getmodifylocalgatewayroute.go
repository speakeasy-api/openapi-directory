// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETModifyLocalGatewayRouteActionEnum
type GETModifyLocalGatewayRouteActionEnum string

const (
	GETModifyLocalGatewayRouteActionEnumModifyLocalGatewayRoute GETModifyLocalGatewayRouteActionEnum = "ModifyLocalGatewayRoute"
)

func (e *GETModifyLocalGatewayRouteActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ModifyLocalGatewayRoute":
		*e = GETModifyLocalGatewayRouteActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyLocalGatewayRouteActionEnum: %s", s)
	}
}

// GETModifyLocalGatewayRouteVersionEnum
type GETModifyLocalGatewayRouteVersionEnum string

const (
	GETModifyLocalGatewayRouteVersionEnumTwoThousandAndSixteen1115 GETModifyLocalGatewayRouteVersionEnum = "2016-11-15"
)

func (e *GETModifyLocalGatewayRouteVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETModifyLocalGatewayRouteVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyLocalGatewayRouteVersionEnum: %s", s)
	}
}

type GETModifyLocalGatewayRouteRequest struct {
	Action GETModifyLocalGatewayRouteActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The CIDR block used for destination matches. The value that you provide must match the CIDR of an existing route in the table.
	DestinationCidrBlock *string `queryParam:"style=form,explode=true,name=DestinationCidrBlock"`
	//  The ID of the prefix list. Use a prefix list in place of <code>DestinationCidrBlock</code>. You cannot use <code>DestinationPrefixListId</code> and <code>DestinationCidrBlock</code> in the same request.
	DestinationPrefixListID *string `queryParam:"style=form,explode=true,name=DestinationPrefixListId"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The ID of the local gateway route table.
	LocalGatewayRouteTableID string `queryParam:"style=form,explode=true,name=LocalGatewayRouteTableId"`
	//  The ID of the virtual interface group.
	LocalGatewayVirtualInterfaceGroupID *string `queryParam:"style=form,explode=true,name=LocalGatewayVirtualInterfaceGroupId"`
	// The ID of the network interface.
	NetworkInterfaceID *string                               `queryParam:"style=form,explode=true,name=NetworkInterfaceId"`
	Version            GETModifyLocalGatewayRouteVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm      *string                               `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256  *string                               `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential     *string                               `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate           *string                               `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken  *string                               `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature      *string                               `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders  *string                               `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETModifyLocalGatewayRouteResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
