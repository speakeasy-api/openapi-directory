/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { NullableSimpleUser } from "./nullablesimpleuser";
import { SchemassecretScanningAlertStateEnum } from "./schemassecretscanningalertstateenum";
import { SecretScanningAlertResolutionEnum } from "./secretscanningalertresolutionenum";
import { SimpleRepository } from "./simplerepository";
import { Expose, Transform, Type } from "class-transformer";

export class OrganizationSecretScanningAlert extends SpeakeasyBase {
  /**
   * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt?: Date;

  /**
   * The GitHub URL of the alert resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "html_url" })
  htmlUrl?: string;

  /**
   * The REST API URL of the code locations for this alert.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "locations_url" })
  locationsUrl?: string;

  /**
   * The security alert number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "number" })
  number?: number;

  /**
   * Whether push protection was bypassed for the detected secret.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "push_protection_bypassed" })
  pushProtectionBypassed?: boolean;

  /**
   * The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "push_protection_bypassed_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  pushProtectionBypassedAt?: Date;

  /**
   * A GitHub user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "push_protection_bypassed_by" })
  @Type(() => NullableSimpleUser)
  pushProtectionBypassedBy?: NullableSimpleUser;

  /**
   * A GitHub repository.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "repository" })
  @Type(() => SimpleRepository)
  repository?: SimpleRepository;

  /**
   * **Required when the `state` is `resolved`.** The reason for resolving the alert.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resolution" })
  resolution?: SecretScanningAlertResolutionEnum;

  /**
   * The comment that was optionally added when this alert was closed
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resolution_comment" })
  resolutionComment?: string;

  /**
   * The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resolved_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  resolvedAt?: Date;

  /**
   * A GitHub user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resolved_by" })
  @Type(() => NullableSimpleUser)
  resolvedBy?: NullableSimpleUser;

  /**
   * The secret that was detected.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "secret" })
  secret?: string;

  /**
   * The type of secret that secret scanning detected.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "secret_type" })
  secretType?: string;

  /**
   * User-friendly name for the detected secret, matching the `secret_type`.
   *
   * @remarks
   * For a list of built-in patterns, see "[Secret scanning patterns](https://docs.github.com/enterprise-cloud@latest//code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)."
   */
  @SpeakeasyMetadata()
  @Expose({ name: "secret_type_display_name" })
  secretTypeDisplayName?: string;

  /**
   * Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: SchemassecretScanningAlertStateEnum;

  /**
   * The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt?: Date;

  /**
   * The REST API URL of the alert resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}
