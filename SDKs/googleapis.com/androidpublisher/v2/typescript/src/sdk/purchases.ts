/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Purchases {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Checks the purchase and consumption status of an inapp item.
   */
  androidpublisherPurchasesProductsGet(
    req: operations.AndroidpublisherPurchasesProductsGetRequest,
    security: operations.AndroidpublisherPurchasesProductsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherPurchasesProductsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidpublisherPurchasesProductsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{packageName}/purchases/products/{productId}/tokens/{token}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AndroidpublisherPurchasesProductsGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherPurchasesProductsGetResponse =
        new operations.AndroidpublisherPurchasesProductsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Cancels a user's subscription purchase. The subscription remains valid until its expiration time.
   */
  androidpublisherPurchasesSubscriptionsCancel(
    req: operations.AndroidpublisherPurchasesSubscriptionsCancelRequest,
    security: operations.AndroidpublisherPurchasesSubscriptionsCancelSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherPurchasesSubscriptionsCancelResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidpublisherPurchasesSubscriptionsCancelRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:cancel",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AndroidpublisherPurchasesSubscriptionsCancelSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherPurchasesSubscriptionsCancelResponse =
        new operations.AndroidpublisherPurchasesSubscriptionsCancelResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Defers a user's subscription purchase until a specified future expiration time.
   */
  androidpublisherPurchasesSubscriptionsDefer(
    req: operations.AndroidpublisherPurchasesSubscriptionsDeferRequest,
    security: operations.AndroidpublisherPurchasesSubscriptionsDeferSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherPurchasesSubscriptionsDeferResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidpublisherPurchasesSubscriptionsDeferRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:defer",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "subscriptionPurchasesDeferRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AndroidpublisherPurchasesSubscriptionsDeferSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherPurchasesSubscriptionsDeferResponse =
        new operations.AndroidpublisherPurchasesSubscriptionsDeferResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Checks whether a user's subscription purchase is valid and returns its expiry time.
   */
  androidpublisherPurchasesSubscriptionsGet(
    req: operations.AndroidpublisherPurchasesSubscriptionsGetRequest,
    security: operations.AndroidpublisherPurchasesSubscriptionsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherPurchasesSubscriptionsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidpublisherPurchasesSubscriptionsGetRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AndroidpublisherPurchasesSubscriptionsGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherPurchasesSubscriptionsGetResponse =
        new operations.AndroidpublisherPurchasesSubscriptionsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Refunds a user's subscription purchase, but the subscription remains valid until its expiration time and it will continue to recur.
   */
  androidpublisherPurchasesSubscriptionsRefund(
    req: operations.AndroidpublisherPurchasesSubscriptionsRefundRequest,
    security: operations.AndroidpublisherPurchasesSubscriptionsRefundSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherPurchasesSubscriptionsRefundResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidpublisherPurchasesSubscriptionsRefundRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:refund",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AndroidpublisherPurchasesSubscriptionsRefundSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherPurchasesSubscriptionsRefundResponse =
        new operations.AndroidpublisherPurchasesSubscriptionsRefundResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Refunds and immediately revokes a user's subscription purchase. Access to the subscription will be terminated immediately and it will stop recurring.
   */
  androidpublisherPurchasesSubscriptionsRevoke(
    req: operations.AndroidpublisherPurchasesSubscriptionsRevokeRequest,
    security: operations.AndroidpublisherPurchasesSubscriptionsRevokeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherPurchasesSubscriptionsRevokeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidpublisherPurchasesSubscriptionsRevokeRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:revoke",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AndroidpublisherPurchasesSubscriptionsRevokeSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherPurchasesSubscriptionsRevokeResponse =
        new operations.AndroidpublisherPurchasesSubscriptionsRevokeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Lists the purchases that were canceled, refunded or charged-back.
   */
  androidpublisherPurchasesVoidedpurchasesList(
    req: operations.AndroidpublisherPurchasesVoidedpurchasesListRequest,
    security: operations.AndroidpublisherPurchasesVoidedpurchasesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidpublisherPurchasesVoidedpurchasesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AndroidpublisherPurchasesVoidedpurchasesListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{packageName}/purchases/voidedpurchases",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AndroidpublisherPurchasesVoidedpurchasesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidpublisherPurchasesVoidedpurchasesListResponse =
        new operations.AndroidpublisherPurchasesVoidedpurchasesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }
}
