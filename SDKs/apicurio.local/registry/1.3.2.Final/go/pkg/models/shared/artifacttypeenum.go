// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ArtifactTypeEnum string

const (
	ArtifactTypeEnumAvro       ArtifactTypeEnum = "AVRO"
	ArtifactTypeEnumProtobuf   ArtifactTypeEnum = "PROTOBUF"
	ArtifactTypeEnumProtobufFd ArtifactTypeEnum = "PROTOBUF_FD"
	ArtifactTypeEnumJSON       ArtifactTypeEnum = "JSON"
	ArtifactTypeEnumOpenapi    ArtifactTypeEnum = "OPENAPI"
	ArtifactTypeEnumAsyncapi   ArtifactTypeEnum = "ASYNCAPI"
	ArtifactTypeEnumGraphql    ArtifactTypeEnum = "GRAPHQL"
	ArtifactTypeEnumKconnect   ArtifactTypeEnum = "KCONNECT"
	ArtifactTypeEnumWsdl       ArtifactTypeEnum = "WSDL"
	ArtifactTypeEnumXsd        ArtifactTypeEnum = "XSD"
	ArtifactTypeEnumXML        ArtifactTypeEnum = "XML"
)

func (e ArtifactTypeEnum) ToPointer() *ArtifactTypeEnum {
	return &e
}

func (e *ArtifactTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AVRO":
		fallthrough
	case "PROTOBUF":
		fallthrough
	case "PROTOBUF_FD":
		fallthrough
	case "JSON":
		fallthrough
	case "OPENAPI":
		fallthrough
	case "ASYNCAPI":
		fallthrough
	case "GRAPHQL":
		fallthrough
	case "KCONNECT":
		fallthrough
	case "WSDL":
		fallthrough
	case "XSD":
		fallthrough
	case "XML":
		*e = ArtifactTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ArtifactTypeEnum: %v", v)
	}
}
