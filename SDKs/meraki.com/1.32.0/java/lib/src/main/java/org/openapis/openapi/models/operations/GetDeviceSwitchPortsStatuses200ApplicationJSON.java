/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class GetDeviceSwitchPortsStatuses200ApplicationJSON {
    /**
     * The Cisco Discovery Protocol (CDP) information of the connected device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cdp")
    public GetDeviceSwitchPortsStatuses200ApplicationJSONCdp cdp;

    public GetDeviceSwitchPortsStatuses200ApplicationJSON withCdp(GetDeviceSwitchPortsStatuses200ApplicationJSONCdp cdp) {
        this.cdp = cdp;
        return this;
    }
    
    /**
     * The number of clients connected through this port.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientCount")
    public Long clientCount;

    public GetDeviceSwitchPortsStatuses200ApplicationJSON withClientCount(Long clientCount) {
        this.clientCount = clientCount;
        return this;
    }
    
    /**
     * The current duplex of a connected port.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duplex")
    public GetDeviceSwitchPortsStatuses200ApplicationJSONDuplexEnum duplex;

    public GetDeviceSwitchPortsStatuses200ApplicationJSON withDuplex(GetDeviceSwitchPortsStatuses200ApplicationJSONDuplexEnum duplex) {
        this.duplex = duplex;
        return this;
    }
    
    /**
     * Whether the port is configured to be enabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enabled")
    public Boolean enabled;

    public GetDeviceSwitchPortsStatuses200ApplicationJSON withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }
    
    /**
     * All errors present on the port.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errors")
    public String[] errors;

    public GetDeviceSwitchPortsStatuses200ApplicationJSON withErrors(String[] errors) {
        this.errors = errors;
        return this;
    }
    
    /**
     * Whether the port is the switch's uplink.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isUplink")
    public Boolean isUplink;

    public GetDeviceSwitchPortsStatuses200ApplicationJSON withIsUplink(Boolean isUplink) {
        this.isUplink = isUplink;
        return this;
    }
    
    /**
     * The Link Layer Discovery Protocol (LLDP) information of the connected device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lldp")
    public GetDeviceSwitchPortsStatuses200ApplicationJSONLldp lldp;

    public GetDeviceSwitchPortsStatuses200ApplicationJSON withLldp(GetDeviceSwitchPortsStatuses200ApplicationJSONLldp lldp) {
        this.lldp = lldp;
        return this;
    }
    
    /**
     * The string identifier of this port on the switch. This is commonly just the port number but may contain additional identifying information such as the slot and module-type if the port is located on a port module.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("portId")
    public String portId;

    public GetDeviceSwitchPortsStatuses200ApplicationJSON withPortId(String portId) {
        this.portId = portId;
        return this;
    }
    
    /**
     * How much power (in watt-hours) has been delivered by this port during the timespan.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("powerUsageInWh")
    public Float powerUsageInWh;

    public GetDeviceSwitchPortsStatuses200ApplicationJSON withPowerUsageInWh(Float powerUsageInWh) {
        this.powerUsageInWh = powerUsageInWh;
        return this;
    }
    
    /**
     * The Secure Port status of the port.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("securePort")
    public GetDeviceSwitchPortsStatuses200ApplicationJSONSecurePort securePort;

    public GetDeviceSwitchPortsStatuses200ApplicationJSON withSecurePort(GetDeviceSwitchPortsStatuses200ApplicationJSONSecurePort securePort) {
        this.securePort = securePort;
        return this;
    }
    
    /**
     * The current data transfer rate which the port is operating at.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("speed")
    public GetDeviceSwitchPortsStatuses200ApplicationJSONSpeedEnum speed;

    public GetDeviceSwitchPortsStatuses200ApplicationJSON withSpeed(GetDeviceSwitchPortsStatuses200ApplicationJSONSpeedEnum speed) {
        this.speed = speed;
        return this;
    }
    
    /**
     * The current connection status of the port.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public GetDeviceSwitchPortsStatuses200ApplicationJSONStatusEnum status;

    public GetDeviceSwitchPortsStatuses200ApplicationJSON withStatus(GetDeviceSwitchPortsStatuses200ApplicationJSONStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * A breakdown of the average speed of data that has passed through this port during the timespan.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trafficInKbps")
    public GetDeviceSwitchPortsStatuses200ApplicationJSONTrafficInKbps trafficInKbps;

    public GetDeviceSwitchPortsStatuses200ApplicationJSON withTrafficInKbps(GetDeviceSwitchPortsStatuses200ApplicationJSONTrafficInKbps trafficInKbps) {
        this.trafficInKbps = trafficInKbps;
        return this;
    }
    
    /**
     * A breakdown of how many kilobytes have passed through this port during the timespan.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("usageInKb")
    public GetDeviceSwitchPortsStatuses200ApplicationJSONUsageInKb usageInKb;

    public GetDeviceSwitchPortsStatuses200ApplicationJSON withUsageInKb(GetDeviceSwitchPortsStatuses200ApplicationJSONUsageInKb usageInKb) {
        this.usageInKb = usageInKb;
        return this;
    }
    
    /**
     * All warnings present on the port.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("warnings")
    public String[] warnings;

    public GetDeviceSwitchPortsStatuses200ApplicationJSON withWarnings(String[] warnings) {
        this.warnings = warnings;
        return this;
    }
    
    public GetDeviceSwitchPortsStatuses200ApplicationJSON(){}
}
