<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Numbers 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Find lease configs
     * 
     * Searches for all number lease configs for the user. Returns a paged list of NumberConfig
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FindNumberLeaseConfigsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FindNumberLeaseConfigsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FindNumberLeaseConfigsResponse
     */
	public function findNumberLeaseConfigs(
        \OpenAPI\OpenAPI\Models\Operations\FindNumberLeaseConfigsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FindNumberLeaseConfigsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FindNumberLeaseConfigsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/numbers/leases/configs');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FindNumberLeaseConfigsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FindNumberLeaseConfigsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->numberConfigPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NumberConfigPage', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find leases
     * 
     * Searches for all numbers leased by account user. This API is useful for finding all numbers currently owned by the user. Returns a paged list of number leases.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FindNumberLeasesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FindNumberLeasesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FindNumberLeasesResponse
     */
	public function findNumberLeases(
        \OpenAPI\OpenAPI\Models\Operations\FindNumberLeasesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FindNumberLeasesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FindNumberLeasesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/numbers/leases');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FindNumberLeasesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FindNumberLeasesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->numberLeasePage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NumberLeasePage', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find number regions
     * 
     * Searches for region information. Use this API to obtain detailed region information that can be used to query for more specific phone numbers than a general query.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FindNumberRegionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FindNumberRegionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FindNumberRegionsResponse
     */
	public function findNumberRegions(
        \OpenAPI\OpenAPI\Models\Operations\FindNumberRegionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FindNumberRegionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FindNumberRegionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/numbers/regions');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FindNumberRegionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FindNumberRegionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->regionPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RegionPage', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find local numbers
     * 
     * Searches for numbers available for purchase in CallFire local numbers catalog . At least one additional parameter is required. User may filter local numbers by their region information. If all numbers with desirable zip code is already busy search will return available numbers with nearest zip code.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FindNumbersLocalRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FindNumbersLocalSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FindNumbersLocalResponse
     */
	public function findNumbersLocal(
        \OpenAPI\OpenAPI\Models\Operations\FindNumbersLocalRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FindNumbersLocalSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FindNumbersLocalResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/numbers/local');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FindNumbersLocalRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FindNumbersLocalResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->numberList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NumberList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find tollfree numbers
     * 
     * Searches for the toll free numbers which are available for purchase in the CallFire catalog
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FindNumbersTollfreeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FindNumbersTollfreeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FindNumbersTollfreeResponse
     */
	public function findNumbersTollfree(
        \OpenAPI\OpenAPI\Models\Operations\FindNumbersTollfreeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FindNumbersTollfreeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FindNumbersTollfreeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/numbers/tollfree');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FindNumbersTollfreeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FindNumbersTollfreeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->numberList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NumberList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find a specific lease
     * 
     * Returns a single NumberLease instance for a given number
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNumberLeaseRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNumberLeaseSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNumberLeaseResponse
     */
	public function getNumberLease(
        \OpenAPI\OpenAPI\Models\Operations\GetNumberLeaseRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetNumberLeaseSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNumberLeaseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/numbers/leases/{number}', \OpenAPI\OpenAPI\Models\Operations\GetNumberLeaseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNumberLeaseRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNumberLeaseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->numberLease = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NumberLease', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find a specific lease config
     * 
     * Returns a single NumberConfig instance for a given number lease
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNumberLeaseConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNumberLeaseConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNumberLeaseConfigResponse
     */
	public function getNumberLeaseConfig(
        \OpenAPI\OpenAPI\Models\Operations\GetNumberLeaseConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetNumberLeaseConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNumberLeaseConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/numbers/leases/configs/{number}', \OpenAPI\OpenAPI\Models\Operations\GetNumberLeaseConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNumberLeaseConfigRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNumberLeaseConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->numberConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NumberConfig', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a lease
     * 
     * Updates a number lease instance. Ability to turn on/off autoRenew and toggle call/text features for a particular number
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNumberLeaseRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNumberLeaseSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNumberLeaseResponse
     */
	public function updateNumberLease(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNumberLeaseRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateNumberLeaseSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNumberLeaseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/numbers/leases/{number}', \OpenAPI\OpenAPI\Models\Operations\UpdateNumberLeaseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "numberLeaseInput", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNumberLeaseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a lease config
     * 
     * Updates a phone number lease configuration. Use this API endpoint to add an Inbound IVR or Call Tracking feature to a CallFire phone number. Call tracking configuration allows you to track the incoming calls, to analyze and to respond customers using sms or voice replies. For more information see [call tracking page](https://www.callfire.com/products/call-tracking)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNumberLeaseConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNumberLeaseConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNumberLeaseConfigResponse
     */
	public function updateNumberLeaseConfig(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNumberLeaseConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateNumberLeaseConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNumberLeaseConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/numbers/leases/configs/{number}', \OpenAPI\OpenAPI\Models\Operations\UpdateNumberLeaseConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "numberConfig", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNumberLeaseConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
}