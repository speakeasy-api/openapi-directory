// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GoogleCloudRecommendationengineV1beta1ProductCatalogItemStockStateEnum - Optional. Online stock state of the catalog item. Default is `IN_STOCK`.
type GoogleCloudRecommendationengineV1beta1ProductCatalogItemStockStateEnum string

const (
	GoogleCloudRecommendationengineV1beta1ProductCatalogItemStockStateEnumStockStateUnspecified GoogleCloudRecommendationengineV1beta1ProductCatalogItemStockStateEnum = "STOCK_STATE_UNSPECIFIED"
	GoogleCloudRecommendationengineV1beta1ProductCatalogItemStockStateEnumInStock               GoogleCloudRecommendationengineV1beta1ProductCatalogItemStockStateEnum = "IN_STOCK"
	GoogleCloudRecommendationengineV1beta1ProductCatalogItemStockStateEnumOutOfStock            GoogleCloudRecommendationengineV1beta1ProductCatalogItemStockStateEnum = "OUT_OF_STOCK"
	GoogleCloudRecommendationengineV1beta1ProductCatalogItemStockStateEnumPreorder              GoogleCloudRecommendationengineV1beta1ProductCatalogItemStockStateEnum = "PREORDER"
	GoogleCloudRecommendationengineV1beta1ProductCatalogItemStockStateEnumBackorder             GoogleCloudRecommendationengineV1beta1ProductCatalogItemStockStateEnum = "BACKORDER"
)

func (e *GoogleCloudRecommendationengineV1beta1ProductCatalogItemStockStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "STOCK_STATE_UNSPECIFIED":
		fallthrough
	case "IN_STOCK":
		fallthrough
	case "OUT_OF_STOCK":
		fallthrough
	case "PREORDER":
		fallthrough
	case "BACKORDER":
		*e = GoogleCloudRecommendationengineV1beta1ProductCatalogItemStockStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleCloudRecommendationengineV1beta1ProductCatalogItemStockStateEnum: %s", s)
	}
}

// GoogleCloudRecommendationengineV1beta1ProductCatalogItem - ProductCatalogItem captures item metadata specific to retail products.
type GoogleCloudRecommendationengineV1beta1ProductCatalogItem struct {
	// Optional. The available quantity of the item.
	AvailableQuantity *string `json:"availableQuantity,omitempty"`
	// Optional. Canonical URL directly linking to the item detail page with a length limit of 5 KiB..
	CanonicalProductURI *string `json:"canonicalProductUri,omitempty"`
	// Optional. A map to pass the costs associated with the product. For example: {"manufacturing": 45.5} The profit of selling this item is computed like so: * If 'exactPrice' is provided, profit = displayPrice - sum(costs) * If 'priceRange' is provided, profit = minPrice - sum(costs)
	Costs map[string]float32 `json:"costs,omitempty"`
	// Optional. Only required if the price is set. Currency code for price/costs. Use three-character ISO-4217 code.
	CurrencyCode *string `json:"currencyCode,omitempty"`
	// Exact product price.
	ExactPrice *GoogleCloudRecommendationengineV1beta1ProductCatalogItemExactPrice `json:"exactPrice,omitempty"`
	// Optional. Product images for the catalog item.
	Images []GoogleCloudRecommendationengineV1beta1Image `json:"images,omitempty"`
	// Product price range when there are a range of prices for different variations of the same product.
	PriceRange *GoogleCloudRecommendationengineV1beta1ProductCatalogItemPriceRange `json:"priceRange,omitempty"`
	// Optional. Online stock state of the catalog item. Default is `IN_STOCK`.
	StockState *GoogleCloudRecommendationengineV1beta1ProductCatalogItemStockStateEnum `json:"stockState,omitempty"`
}
