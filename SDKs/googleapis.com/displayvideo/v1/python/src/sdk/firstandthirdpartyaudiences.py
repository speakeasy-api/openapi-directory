"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class FirstAndThirdPartyAudiences:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def displayvideo_first_and_third_party_audiences_create(self, request: operations.DisplayvideoFirstAndThirdPartyAudiencesCreateRequest, security: operations.DisplayvideoFirstAndThirdPartyAudiencesCreateSecurity) -> operations.DisplayvideoFirstAndThirdPartyAudiencesCreateResponse:
        r"""Creates a FirstAndThirdPartyAudience. Only supported for the following audience_type: * `CUSTOMER_MATCH_CONTACT_INFO` * `CUSTOMER_MATCH_DEVICE_ID`"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/firstAndThirdPartyAudiences'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "first_and_third_party_audience_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DisplayvideoFirstAndThirdPartyAudiencesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoFirstAndThirdPartyAudiencesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FirstAndThirdPartyAudience])
                res.first_and_third_party_audience = out

        return res

    def displayvideo_first_and_third_party_audiences_edit_customer_match_members(self, request: operations.DisplayvideoFirstAndThirdPartyAudiencesEditCustomerMatchMembersRequest, security: operations.DisplayvideoFirstAndThirdPartyAudiencesEditCustomerMatchMembersSecurity) -> operations.DisplayvideoFirstAndThirdPartyAudiencesEditCustomerMatchMembersResponse:
        r"""Updates the member list of a Customer Match audience. Only supported for the following audience_type: * `CUSTOMER_MATCH_CONTACT_INFO` * `CUSTOMER_MATCH_DEVICE_ID`"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisplayvideoFirstAndThirdPartyAudiencesEditCustomerMatchMembersRequest, base_url, '/v1/firstAndThirdPartyAudiences/{firstAndThirdPartyAudienceId}:editCustomerMatchMembers', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "edit_customer_match_members_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DisplayvideoFirstAndThirdPartyAudiencesEditCustomerMatchMembersRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoFirstAndThirdPartyAudiencesEditCustomerMatchMembersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EditCustomerMatchMembersResponse])
                res.edit_customer_match_members_response = out

        return res

    def displayvideo_first_and_third_party_audiences_get(self, request: operations.DisplayvideoFirstAndThirdPartyAudiencesGetRequest, security: operations.DisplayvideoFirstAndThirdPartyAudiencesGetSecurity) -> operations.DisplayvideoFirstAndThirdPartyAudiencesGetResponse:
        r"""Gets a first and third party audience."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisplayvideoFirstAndThirdPartyAudiencesGetRequest, base_url, '/v1/firstAndThirdPartyAudiences/{firstAndThirdPartyAudienceId}', request)
        
        query_params = utils.get_query_params(operations.DisplayvideoFirstAndThirdPartyAudiencesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoFirstAndThirdPartyAudiencesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FirstAndThirdPartyAudience])
                res.first_and_third_party_audience = out

        return res

    def displayvideo_first_and_third_party_audiences_list(self, request: operations.DisplayvideoFirstAndThirdPartyAudiencesListRequest, security: operations.DisplayvideoFirstAndThirdPartyAudiencesListSecurity) -> operations.DisplayvideoFirstAndThirdPartyAudiencesListResponse:
        r"""Lists first and third party audiences. The order is defined by the order_by parameter."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/firstAndThirdPartyAudiences'
        
        query_params = utils.get_query_params(operations.DisplayvideoFirstAndThirdPartyAudiencesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoFirstAndThirdPartyAudiencesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListFirstAndThirdPartyAudiencesResponse])
                res.list_first_and_third_party_audiences_response = out

        return res

    def displayvideo_first_and_third_party_audiences_patch(self, request: operations.DisplayvideoFirstAndThirdPartyAudiencesPatchRequest, security: operations.DisplayvideoFirstAndThirdPartyAudiencesPatchSecurity) -> operations.DisplayvideoFirstAndThirdPartyAudiencesPatchResponse:
        r"""Updates an existing FirstAndThirdPartyAudience. Only supported for the following audience_type: * `CUSTOMER_MATCH_CONTACT_INFO` * `CUSTOMER_MATCH_DEVICE_ID`"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisplayvideoFirstAndThirdPartyAudiencesPatchRequest, base_url, '/v1/firstAndThirdPartyAudiences/{firstAndThirdPartyAudienceId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "first_and_third_party_audience_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DisplayvideoFirstAndThirdPartyAudiencesPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoFirstAndThirdPartyAudiencesPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FirstAndThirdPartyAudience])
                res.first_and_third_party_audience = out

        return res

    