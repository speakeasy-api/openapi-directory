/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The name and value of a sampling rule to apply to a trace summary.
 */
export class GetTraceSummariesRequestBodySamplingStrategy extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name?: shared.SamplingStrategyNameEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "Value" })
  value?: number;
}

/**
 * A parameter to indicate whether to query trace summaries by TraceId or Event time.
 */
export enum GetTraceSummariesRequestBodyTimeRangeTypeEnum {
  TraceId = "TraceId",
  Event = "Event",
}

export class GetTraceSummariesRequestBody extends SpeakeasyBase {
  /**
   * The end of the time frame for which to retrieve traces.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "EndTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endTime: Date;

  /**
   * Specify a filter expression to retrieve trace summaries for services or requests that meet certain requirements.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "FilterExpression" })
  filterExpression?: string;

  /**
   * Specify the pagination token returned by a previous request to retrieve the next page of results.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "NextToken" })
  nextToken?: string;

  /**
   * Set to <code>true</code> to get summaries for only a subset of available traces.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Sampling" })
  sampling?: boolean;

  /**
   * The name and value of a sampling rule to apply to a trace summary.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SamplingStrategy" })
  @Type(() => GetTraceSummariesRequestBodySamplingStrategy)
  samplingStrategy?: GetTraceSummariesRequestBodySamplingStrategy;

  /**
   * The start of the time frame for which to retrieve traces.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "StartTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startTime: Date;

  /**
   * A parameter to indicate whether to query trace summaries by TraceId or Event time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "TimeRangeType" })
  timeRangeType?: GetTraceSummariesRequestBodyTimeRangeTypeEnum;
}

export class GetTraceSummariesRequest extends SpeakeasyBase {
  /**
   * Pagination token
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=NextToken",
  })
  nextToken?: string;

  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: GetTraceSummariesRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class GetTraceSummariesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  getTraceSummariesResult?: shared.GetTraceSummariesResult;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottledException
   */
  @SpeakeasyMetadata()
  throttledException?: any;
}
