<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Articles 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Account Article Report
     * 
     * Return status on all reports generated for the account from the oauth credentials
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AccountArticleReportRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AccountArticleReportSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AccountArticleReportResponse
     */
	public function accountArticleReport(
        \OpenAPI\OpenAPI\Models\Operations\AccountArticleReportRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AccountArticleReportSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AccountArticleReportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/articles/export');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AccountArticleReportRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AccountArticleReportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountReports = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\AccountReport>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Initiate a new Report
     * 
     * Initiate a new Article Report for this Account. There is a limit of 1 report per day.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AccountArticleReportGenerateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AccountArticleReportGenerateResponse
     */
	public function accountArticleReportGenerate(
        \OpenAPI\OpenAPI\Models\Operations\AccountArticleReportGenerateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AccountArticleReportGenerateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/articles/export');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AccountArticleReportGenerateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountReport = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AccountReport', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 429 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * View article details
     * 
     * View an article
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ArticleDetailsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ArticleDetailsResponse
     */
	public function articleDetails(
        \OpenAPI\OpenAPI\Models\Operations\ArticleDetailsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ArticleDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/articles/{article_id}', \OpenAPI\OpenAPI\Models\Operations\ArticleDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ArticleDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->articleComplete = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ArticleComplete', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Article file details
     * 
     * File by id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ArticleFileDetailsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ArticleFileDetailsResponse
     */
	public function articleFileDetails(
        \OpenAPI\OpenAPI\Models\Operations\ArticleFileDetailsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ArticleFileDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/articles/{article_id}/files/{file_id}', \OpenAPI\OpenAPI\Models\Operations\ArticleFileDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ArticleFileDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->publicFile = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PublicFile', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * List article files
     * 
     * Files list for article
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ArticleFilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ArticleFilesResponse
     */
	public function articleFiles(
        \OpenAPI\OpenAPI\Models\Operations\ArticleFilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ArticleFilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/articles/{article_id}/files', \OpenAPI\OpenAPI\Models\Operations\ArticleFilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ArticleFilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->publicFiles = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PublicFile>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Public Article Confidentiality for article version
     * 
     * Confidentiality for article version. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ArticleVersionConfidentialityRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ArticleVersionConfidentialityResponse
     */
	public function articleVersionConfidentiality(
        \OpenAPI\OpenAPI\Models\Operations\ArticleVersionConfidentialityRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ArticleVersionConfidentialityResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/articles/{article_id}/versions/{v_number}/confidentiality', \OpenAPI\OpenAPI\Models\Operations\ArticleVersionConfidentialityRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ArticleVersionConfidentialityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->articleConfidentiality = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ArticleConfidentiality', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Article details for version
     * 
     * Article with specified version
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ArticleVersionDetailsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ArticleVersionDetailsResponse
     */
	public function articleVersionDetails(
        \OpenAPI\OpenAPI\Models\Operations\ArticleVersionDetailsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ArticleVersionDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/articles/{article_id}/versions/{v_number}', \OpenAPI\OpenAPI\Models\Operations\ArticleVersionDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ArticleVersionDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->articleComplete = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ArticleComplete', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Public Article Embargo for article version
     * 
     * Embargo for article version
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ArticleVersionEmbargoRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ArticleVersionEmbargoResponse
     */
	public function articleVersionEmbargo(
        \OpenAPI\OpenAPI\Models\Operations\ArticleVersionEmbargoRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ArticleVersionEmbargoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/articles/{article_id}/versions/{v_number}/embargo', \OpenAPI\OpenAPI\Models\Operations\ArticleVersionEmbargoRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ArticleVersionEmbargoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->articleEmbargo = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ArticleEmbargo', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update article version
     * 
     * Updating an article version by passing body parameters; request can also be made with the PATCH method.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ArticleVersionUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ArticleVersionUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ArticleVersionUpdateResponse
     */
	public function articleVersionUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ArticleVersionUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ArticleVersionUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ArticleVersionUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/articles/{article_id}/versions/{version_id}/', \OpenAPI\OpenAPI\Models\Operations\ArticleVersionUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "articleUpdate", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ArticleVersionUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 205) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->locationWarningsUpdate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LocationWarningsUpdate', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update article version thumbnail
     * 
     * For a given public article version update the article thumbnail by choosing one of the associated files
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ArticleVersionUpdateThumbRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ArticleVersionUpdateThumbSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ArticleVersionUpdateThumbResponse
     */
	public function articleVersionUpdateThumb(
        \OpenAPI\OpenAPI\Models\Operations\ArticleVersionUpdateThumbRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ArticleVersionUpdateThumbSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ArticleVersionUpdateThumbResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/articles/{article_id}/versions/{version_id}/update_thumb', \OpenAPI\OpenAPI\Models\Operations\ArticleVersionUpdateThumbRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "fileId", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ArticleVersionUpdateThumbResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 205) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422) {
        }

        return $response;
    }
	
    /**
     * List article versions
     * 
     * List public article versions
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ArticleVersionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ArticleVersionsResponse
     */
	public function articleVersions(
        \OpenAPI\OpenAPI\Models\Operations\ArticleVersionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ArticleVersionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/articles/{article_id}/versions', \OpenAPI\OpenAPI\Models\Operations\ArticleVersionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ArticleVersionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->articleVersions = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ArticleVersions>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Public Articles
     * 
     * Returns a list of public articles
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ArticlesListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ArticlesListResponse
     */
	public function articlesList(
        \OpenAPI\OpenAPI\Models\Operations\ArticlesListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ArticlesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/articles');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ArticlesListRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ArticlesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->articles = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Article>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Public Articles Search
     * 
     * Returns a list of public articles, filtered by the search parameters
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ArticlesSearchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ArticlesSearchResponse
     */
	public function articlesSearch(
        \OpenAPI\OpenAPI\Models\Operations\ArticlesSearchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ArticlesSearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/articles/search');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "articleSearch", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ArticlesSearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->articleWithProjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ArticleWithProject>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Delete article author
     * 
     * De-associate author from article
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleAuthorDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleAuthorDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateArticleAuthorDeleteResponse
     */
	public function privateArticleAuthorDelete(
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleAuthorDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleAuthorDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateArticleAuthorDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/articles/{article_id}/authors/{author_id}', \OpenAPI\OpenAPI\Models\Operations\PrivateArticleAuthorDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateArticleAuthorDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add article authors
     * 
     * Associate new authors with the article. This will add new authors to the list of already associated authors
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleAuthorsAddRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleAuthorsAddSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateArticleAuthorsAddResponse
     */
	public function privateArticleAuthorsAdd(
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleAuthorsAddRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleAuthorsAddSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateArticleAuthorsAddResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/articles/{article_id}/authors', \OpenAPI\OpenAPI\Models\Operations\PrivateArticleAuthorsAddRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "authorsCreator", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateArticleAuthorsAddResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 205) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List article authors
     * 
     * List article authors
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleAuthorsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleAuthorsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateArticleAuthorsListResponse
     */
	public function privateArticleAuthorsList(
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleAuthorsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleAuthorsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateArticleAuthorsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/articles/{article_id}/authors', \OpenAPI\OpenAPI\Models\Operations\PrivateArticleAuthorsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateArticleAuthorsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->authors = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Author>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Replace article authors
     * 
     * Associate new authors with the article. This will remove all already associated authors and add these new ones
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleAuthorsReplaceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleAuthorsReplaceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateArticleAuthorsReplaceResponse
     */
	public function privateArticleAuthorsReplace(
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleAuthorsReplaceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleAuthorsReplaceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateArticleAuthorsReplaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/articles/{article_id}/authors', \OpenAPI\OpenAPI\Models\Operations\PrivateArticleAuthorsReplaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "authorsCreator", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateArticleAuthorsReplaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 205) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add article categories
     * 
     * Associate new categories with the article. This will add new categories to the list of already associated categories
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleCategoriesAddRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleCategoriesAddSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateArticleCategoriesAddResponse
     */
	public function privateArticleCategoriesAdd(
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleCategoriesAddRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleCategoriesAddSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateArticleCategoriesAddResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/articles/{article_id}/categories', \OpenAPI\OpenAPI\Models\Operations\PrivateArticleCategoriesAddRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "categoriesCreator", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateArticleCategoriesAddResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 205 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List article categories
     * 
     * List article categories
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleCategoriesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleCategoriesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateArticleCategoriesListResponse
     */
	public function privateArticleCategoriesList(
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleCategoriesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleCategoriesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateArticleCategoriesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/articles/{article_id}/categories', \OpenAPI\OpenAPI\Models\Operations\PrivateArticleCategoriesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateArticleCategoriesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->categories = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Category>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Replace article categories
     * 
     * Associate new categories with the article. This will remove all already associated categories and add these new ones
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleCategoriesReplaceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleCategoriesReplaceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateArticleCategoriesReplaceResponse
     */
	public function privateArticleCategoriesReplace(
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleCategoriesReplaceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleCategoriesReplaceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateArticleCategoriesReplaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/articles/{article_id}/categories', \OpenAPI\OpenAPI\Models\Operations\PrivateArticleCategoriesReplaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "categoriesCreator", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateArticleCategoriesReplaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 205 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete article category
     * 
     * De-associate category from article
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleCategoryDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleCategoryDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateArticleCategoryDeleteResponse
     */
	public function privateArticleCategoryDelete(
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleCategoryDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleCategoryDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateArticleCategoryDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/articles/{article_id}/categories/{category_id}', \OpenAPI\OpenAPI\Models\Operations\PrivateArticleCategoryDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateArticleCategoryDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete article confidentiality
     * 
     * Delete confidentiality settings. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleConfidentialityDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleConfidentialityDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateArticleConfidentialityDeleteResponse
     */
	public function privateArticleConfidentialityDelete(
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleConfidentialityDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleConfidentialityDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateArticleConfidentialityDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/articles/{article_id}/confidentiality', \OpenAPI\OpenAPI\Models\Operations\PrivateArticleConfidentialityDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateArticleConfidentialityDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Article confidentiality details
     * 
     * View confidentiality settings. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleConfidentialityDetailsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleConfidentialityDetailsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateArticleConfidentialityDetailsResponse
     */
	public function privateArticleConfidentialityDetails(
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleConfidentialityDetailsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleConfidentialityDetailsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateArticleConfidentialityDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/articles/{article_id}/confidentiality', \OpenAPI\OpenAPI\Models\Operations\PrivateArticleConfidentialityDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateArticleConfidentialityDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->articleConfidentiality = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ArticleConfidentiality', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update article confidentiality
     * 
     * Update confidentiality settings. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleConfidentialityUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleConfidentialityUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateArticleConfidentialityUpdateResponse
     */
	public function privateArticleConfidentialityUpdate(
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleConfidentialityUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleConfidentialityUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateArticleConfidentialityUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/articles/{article_id}/confidentiality', \OpenAPI\OpenAPI\Models\Operations\PrivateArticleConfidentialityUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "confidentialityCreator", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateArticleConfidentialityUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 205 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create new Article
     * 
     * Create a new Article by sending article information
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ArticleCreate $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateArticleCreateResponse
     */
	public function privateArticleCreate(
        \OpenAPI\OpenAPI\Models\Shared\ArticleCreate $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateArticleCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/articles');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateArticleCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->locationWarnings = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LocationWarnings', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete article
     * 
     * Delete an article
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateArticleDeleteResponse
     */
	public function privateArticleDelete(
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateArticleDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/articles/{article_id}', \OpenAPI\OpenAPI\Models\Operations\PrivateArticleDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateArticleDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Article details
     * 
     * View a private article
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleDetailsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleDetailsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateArticleDetailsResponse
     */
	public function privateArticleDetails(
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleDetailsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleDetailsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateArticleDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/articles/{article_id}', \OpenAPI\OpenAPI\Models\Operations\PrivateArticleDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateArticleDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->articleCompletePrivate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ArticleCompletePrivate', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete Article Embargo
     * 
     * Will lift the embargo for the specified article
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleEmbargoDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleEmbargoDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateArticleEmbargoDeleteResponse
     */
	public function privateArticleEmbargoDelete(
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleEmbargoDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleEmbargoDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateArticleEmbargoDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/articles/{article_id}/embargo', \OpenAPI\OpenAPI\Models\Operations\PrivateArticleEmbargoDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateArticleEmbargoDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Article Embargo Details
     * 
     * View a private article embargo details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleEmbargoDetailsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleEmbargoDetailsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateArticleEmbargoDetailsResponse
     */
	public function privateArticleEmbargoDetails(
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleEmbargoDetailsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleEmbargoDetailsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateArticleEmbargoDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/articles/{article_id}/embargo', \OpenAPI\OpenAPI\Models\Operations\PrivateArticleEmbargoDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateArticleEmbargoDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->articleEmbargo = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ArticleEmbargo', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update Article Embargo
     * 
     * Note: setting an article under whole embargo does not imply that the article will be published when the embargo will expire. You must explicitly call the publish endpoint to enable this functionality.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleEmbargoUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleEmbargoUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateArticleEmbargoUpdateResponse
     */
	public function privateArticleEmbargoUpdate(
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleEmbargoUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleEmbargoUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateArticleEmbargoUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/articles/{article_id}/embargo', \OpenAPI\OpenAPI\Models\Operations\PrivateArticleEmbargoUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "articleEmbargoUpdater", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateArticleEmbargoUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 205) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Single File
     * 
     * View details of file for specified article
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleFileRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleFileSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateArticleFileResponse
     */
	public function privateArticleFile(
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleFileRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleFileSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateArticleFileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/articles/{article_id}/files/{file_id}', \OpenAPI\OpenAPI\Models\Operations\PrivateArticleFileRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateArticleFileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->privateFile = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PrivateFile', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * File Delete
     * 
     * Complete file upload
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleFileDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleFileDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateArticleFileDeleteResponse
     */
	public function privateArticleFileDelete(
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleFileDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleFileDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateArticleFileDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/articles/{article_id}/files/{file_id}', \OpenAPI\OpenAPI\Models\Operations\PrivateArticleFileDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateArticleFileDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List article files
     * 
     * List private files
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleFilesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleFilesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateArticleFilesListResponse
     */
	public function privateArticleFilesList(
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleFilesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleFilesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateArticleFilesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/articles/{article_id}/files', \OpenAPI\OpenAPI\Models\Operations\PrivateArticleFilesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateArticleFilesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->privateFiles = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PrivateFile>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List private links
     * 
     * List private links
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticlePrivateLinkRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticlePrivateLinkSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateArticlePrivateLinkResponse
     */
	public function privateArticlePrivateLink(
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticlePrivateLinkRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticlePrivateLinkSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateArticlePrivateLinkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/articles/{article_id}/private_links', \OpenAPI\OpenAPI\Models\Operations\PrivateArticlePrivateLinkRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateArticlePrivateLinkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->privateLinks = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PrivateLink>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create private link
     * 
     * Create new private link for this article
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticlePrivateLinkCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticlePrivateLinkCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateArticlePrivateLinkCreateResponse
     */
	public function privateArticlePrivateLinkCreate(
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticlePrivateLinkCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticlePrivateLinkCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateArticlePrivateLinkCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/articles/{article_id}/private_links', \OpenAPI\OpenAPI\Models\Operations\PrivateArticlePrivateLinkCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "privateLinkCreator", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateArticlePrivateLinkCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->privateLinkResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PrivateLinkResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Disable private link
     * 
     * Disable/delete private link for this article
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticlePrivateLinkDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticlePrivateLinkDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateArticlePrivateLinkDeleteResponse
     */
	public function privateArticlePrivateLinkDelete(
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticlePrivateLinkDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticlePrivateLinkDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateArticlePrivateLinkDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/articles/{article_id}/private_links/{link_id}', \OpenAPI\OpenAPI\Models\Operations\PrivateArticlePrivateLinkDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateArticlePrivateLinkDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update private link
     * 
     * Update existing private link for this article
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticlePrivateLinkUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticlePrivateLinkUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateArticlePrivateLinkUpdateResponse
     */
	public function privateArticlePrivateLinkUpdate(
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticlePrivateLinkUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticlePrivateLinkUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateArticlePrivateLinkUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/articles/{article_id}/private_links/{link_id}', \OpenAPI\OpenAPI\Models\Operations\PrivateArticlePrivateLinkUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "privateLinkCreator", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateArticlePrivateLinkUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 205) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Private Article Publish
     * 
     * - If the whole article is under embargo, it will not be published immediately, but when the embargo expires or is lifted.
     * - When an article is published, a new public version will be generated. Any further updates to the article will affect the private article data. In order to make these changes publicly visible, an explicit publish operation is needed.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticlePublishRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticlePublishSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateArticlePublishResponse
     */
	public function privateArticlePublish(
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticlePublishRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticlePublishSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateArticlePublishResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/articles/{article_id}/publish', \OpenAPI\OpenAPI\Models\Operations\PrivateArticlePublishRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateArticlePublishResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->location = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Location', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Private Article Reserve DOI
     * 
     * Reserve DOI for article
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleReserveDoiRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleReserveDoiSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateArticleReserveDoiResponse
     */
	public function privateArticleReserveDoi(
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleReserveDoiRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleReserveDoiSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateArticleReserveDoiResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/articles/{article_id}/reserve_doi', \OpenAPI\OpenAPI\Models\Operations\PrivateArticleReserveDoiRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateArticleReserveDoiResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->articleDOI = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ArticleDOI', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Private Article Reserve Handle
     * 
     * Reserve Handle for article
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleReserveHandleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleReserveHandleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateArticleReserveHandleResponse
     */
	public function privateArticleReserveHandle(
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleReserveHandleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleReserveHandleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateArticleReserveHandleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/articles/{article_id}/reserve_handle', \OpenAPI\OpenAPI\Models\Operations\PrivateArticleReserveHandleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateArticleReserveHandleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->articleHandle = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ArticleHandle', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Private Article Resource
     * 
     * Edit article resource data.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleResourceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleResourceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateArticleResourceResponse
     */
	public function privateArticleResource(
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleResourceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleResourceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateArticleResourceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/articles/{article_id}/resource', \OpenAPI\OpenAPI\Models\Operations\PrivateArticleResourceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "resource", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateArticleResourceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 205) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->location = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Location', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update article
     * 
     * Updating an article by passing body parameters; request can also be made with the PATCH method.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateArticleUpdateResponse
     */
	public function privateArticleUpdate(
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateArticleUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/articles/{article_id}', \OpenAPI\OpenAPI\Models\Operations\PrivateArticleUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "articleUpdate", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateArticleUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 205) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->locationWarningsUpdate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LocationWarningsUpdate', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Complete Upload
     * 
     * Complete file upload
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleUploadCompleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleUploadCompleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateArticleUploadCompleteResponse
     */
	public function privateArticleUploadComplete(
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleUploadCompleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleUploadCompleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateArticleUploadCompleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/articles/{article_id}/files/{file_id}', \OpenAPI\OpenAPI\Models\Operations\PrivateArticleUploadCompleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateArticleUploadCompleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Initiate Upload
     * 
     * Initiate a new file upload within the article. Either use the link property to point to an existing file that resides elsewhere and will not be uploaded to Figshare or use the other 3 parameters (md5, name, size).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleUploadInitiateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticleUploadInitiateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateArticleUploadInitiateResponse
     */
	public function privateArticleUploadInitiate(
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleUploadInitiateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticleUploadInitiateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateArticleUploadInitiateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/articles/{article_id}/files', \OpenAPI\OpenAPI\Models\Operations\PrivateArticleUploadInitiateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "fileCreator", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateArticleUploadInitiateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->location = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Location', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Private Articles
     * 
     * Get Own Articles
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticlesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticlesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateArticlesListResponse
     */
	public function privateArticlesList(
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticlesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticlesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateArticlesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/articles');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PrivateArticlesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateArticlesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->articles = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Article>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Private Articles search
     * 
     * Returns a list of private articles filtered by the search parameters
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\PrivateArticleSearch $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrivateArticlesSearchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrivateArticlesSearchResponse
     */
	public function privateArticlesSearch(
        \OpenAPI\OpenAPI\Models\Shared\PrivateArticleSearch $request,
        \OpenAPI\OpenAPI\Models\Operations\PrivateArticlesSearchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrivateArticlesSearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/account/articles/search');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrivateArticlesSearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->articleWithProjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ArticleWithProject>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorMessage', 'json');
            }
        }

        return $response;
    }
}