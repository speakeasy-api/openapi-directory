<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class VotedEpisodes 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Remove an episode vote
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUserVotesEpisodesEpisodeIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteUserVotesEpisodesEpisodeIdResponse
     */
	public function deleteUserVotesEpisodesEpisodeId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteUserVotesEpisodesEpisodeIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteUserVotesEpisodesEpisodeIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/votes/episodes/{episode_id}', \OpenAPI\OpenAPI\Models\Operations\DeleteUserVotesEpisodesEpisodeIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteUserVotesEpisodesEpisodeIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * List the episodes voted for
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUserVotesEpisodesResponse
     */
	public function getUserVotesEpisodes(
    ): \OpenAPI\OpenAPI\Models\Operations\GetUserVotesEpisodesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/votes/episodes');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUserVotesEpisodesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->episodeVotes = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\EpisodeVote>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Check if an episode is voted for
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUserVotesEpisodesEpisodeIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUserVotesEpisodesEpisodeIdResponse
     */
	public function getUserVotesEpisodesEpisodeId(
        \OpenAPI\OpenAPI\Models\Operations\GetUserVotesEpisodesEpisodeIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUserVotesEpisodesEpisodeIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/votes/episodes/{episode_id}', \OpenAPI\OpenAPI\Models\Operations\GetUserVotesEpisodesEpisodeIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUserVotesEpisodesEpisodeIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->episodeVote = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EpisodeVote', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Vote for an episode
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutUserVotesEpisodesEpisodeIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutUserVotesEpisodesEpisodeIdResponse
     */
	public function putUserVotesEpisodesEpisodeId(
        \OpenAPI\OpenAPI\Models\Operations\PutUserVotesEpisodesEpisodeIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutUserVotesEpisodesEpisodeIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/votes/episodes/{episode_id}', \OpenAPI\OpenAPI\Models\Operations\PutUserVotesEpisodesEpisodeIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "episodeVoteInput", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutUserVotesEpisodesEpisodeIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->episodeVote = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EpisodeVote', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422) {
        }

        return $response;
    }
}