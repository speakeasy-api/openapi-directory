/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class TestUploadHashSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=X-API-Token",
  })
  apiToken: string;
}

/**
 * Type of the file
 */
export enum TestUploadHashTestCloudFileHashFileTypeEnum {
  DsymFile = "dsym-file",
  AppFile = "app-file",
  TestFile = "test-file",
}

/**
 * Hash, type, path and byte range of a file that is required in test run
 */
export class TestUploadHashTestCloudFileHash extends SpeakeasyBase {
  /**
   * Range of bytes required to verify ownership of the file
   */
  @SpeakeasyMetadata()
  @Expose({ name: "byte_range" })
  byteRange?: string;

  /**
   * SHA256 hash of the file
   */
  @SpeakeasyMetadata()
  @Expose({ name: "checksum" })
  checksum: string;

  /**
   * Type of the file
   */
  @SpeakeasyMetadata()
  @Expose({ name: "file_type" })
  fileType: TestUploadHashTestCloudFileHashFileTypeEnum;

  /**
   * Relative path of the file
   */
  @SpeakeasyMetadata()
  @Expose({ name: "relative_path" })
  relativePath: string;
}

export class TestUploadHashRequest extends SpeakeasyBase {
  /**
   * File hash information
   */
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: TestUploadHashTestCloudFileHash;

  /**
   * The name of the application
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=app_name",
  })
  appName: string;

  /**
   * The name of the owner
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner_name",
  })
  ownerName: string;

  /**
   * The ID of the test run
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=test_run_id",
  })
  testRunId: string;
}

export class TestUploadHashResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  headers?: Record<string, string[]>;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
