// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CommentMetadataConnectionsReplies - Information about this comment's replies.
type CommentMetadataConnectionsReplies struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of replies on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

type CommentMetadataConnections struct {
	// Information about this comment's replies.
	Replies CommentMetadataConnectionsReplies `json:"replies"`
}

type CommentMetadata struct {
	Connections CommentMetadataConnections `json:"connections"`
}

// CommentTypeEnum - The Vimeo content to which the comment relates:
//
// Option descriptions:
//   - `video` - The comment is about a video.
type CommentTypeEnum string

const (
	CommentTypeEnumVideo CommentTypeEnum = "video"
)

func (e *CommentTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "video":
		*e = CommentTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CommentTypeEnum: %s", s)
	}
}

// CommentUserAccountEnum - The user's account type:
//
// Option descriptions:
//   - `basic` - The user has a Vimeo Basic subscription.
//   - `business` - The user has a Vimeo Business subscription.
//   - `live_business` - The user has a Vimeo Business Live subscription.
//   - `live_premium` - The user has a Vimeo Premium subscription.
//   - `live_pro` - The user has a Vimeo PRO Live subscription.
//   - `plus` - The user has a Vimeo Plus subscription.
//   - `pro` - The user has a Vimeo Pro subscription.
//   - `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
//   - `producer` - The user has a Vimeo Producer subscription.
type CommentUserAccountEnum string

const (
	CommentUserAccountEnumBasic        CommentUserAccountEnum = "basic"
	CommentUserAccountEnumBusiness     CommentUserAccountEnum = "business"
	CommentUserAccountEnumLiveBusiness CommentUserAccountEnum = "live_business"
	CommentUserAccountEnumLivePremium  CommentUserAccountEnum = "live_premium"
	CommentUserAccountEnumLivePro      CommentUserAccountEnum = "live_pro"
	CommentUserAccountEnumPlus         CommentUserAccountEnum = "plus"
	CommentUserAccountEnumPro          CommentUserAccountEnum = "pro"
	CommentUserAccountEnumProUnlimited CommentUserAccountEnum = "pro_unlimited"
	CommentUserAccountEnumProducer     CommentUserAccountEnum = "producer"
)

func (e *CommentUserAccountEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "basic":
		fallthrough
	case "business":
		fallthrough
	case "live_business":
		fallthrough
	case "live_premium":
		fallthrough
	case "live_pro":
		fallthrough
	case "plus":
		fallthrough
	case "pro":
		fallthrough
	case "pro_unlimited":
		fallthrough
	case "producer":
		*e = CommentUserAccountEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CommentUserAccountEnum: %s", s)
	}
}

// CommentUserContentFilterEnum - The user's content filters:
//
// Option descriptions:
//   - `drugs` - Drugs or alcohol use.
//   - `language` - Profanity or sexually suggestive content.
//   - `nudity` - Nudity.
//   - `safe` - Suitable for all audiences.
//   - `unrated` - No rating.
//   - `violence` - Violent or graphic content.
type CommentUserContentFilterEnum string

const (
	CommentUserContentFilterEnumDrugs    CommentUserContentFilterEnum = "drugs"
	CommentUserContentFilterEnumLanguage CommentUserContentFilterEnum = "language"
	CommentUserContentFilterEnumNudity   CommentUserContentFilterEnum = "nudity"
	CommentUserContentFilterEnumSafe     CommentUserContentFilterEnum = "safe"
	CommentUserContentFilterEnumUnrated  CommentUserContentFilterEnum = "unrated"
	CommentUserContentFilterEnumViolence CommentUserContentFilterEnum = "violence"
)

func (e *CommentUserContentFilterEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "drugs":
		fallthrough
	case "language":
		fallthrough
	case "nudity":
		fallthrough
	case "safe":
		fallthrough
	case "unrated":
		fallthrough
	case "violence":
		*e = CommentUserContentFilterEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CommentUserContentFilterEnum: %s", s)
	}
}

// CommentUserMetadataConnectionsAlbums - Information about the albums created by this user.
type CommentUserMetadataConnectionsAlbums struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of albums on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// CommentUserMetadataConnectionsAppearances - Information about the appearances of this user in other videos.
type CommentUserMetadataConnectionsAppearances struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of appearances on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// CommentUserMetadataConnectionsBlock - Information on the users that the current user has blocked. This data requires a bearer token with the `private` scope.
type CommentUserMetadataConnectionsBlock struct {
	// An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
	Options []string `json:"options"`
	// The total number of blocked users on this connection. This data requires a bearer token with the `private` scope.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
	URI string `json:"uri"`
}

// CommentUserMetadataConnectionsCategories - Information about this user's followed categories.
type CommentUserMetadataConnectionsCategories struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of categories on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// CommentUserMetadataConnectionsChannels - Information about this user's subscribed channels.
type CommentUserMetadataConnectionsChannels struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of channels on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// CommentUserMetadataConnectionsFeed - Information about this user's feed.
type CommentUserMetadataConnectionsFeed struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// CommentUserMetadataConnectionsFolders - Information about this user's folders.
type CommentUserMetadataConnectionsFolders struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of folders on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// CommentUserMetadataConnectionsFollowers - Information about the user's followers.
type CommentUserMetadataConnectionsFollowers struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of followers on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// CommentUserMetadataConnectionsFollowing - Information about the users that the current user is following.
type CommentUserMetadataConnectionsFollowing struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of users on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// CommentUserMetadataConnectionsGroups - Information about the groups created by this user.
type CommentUserMetadataConnectionsGroups struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of groups on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// CommentUserMetadataConnectionsLikes - Information about the videos that this user has liked.
type CommentUserMetadataConnectionsLikes struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of likes on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// CommentUserMetadataConnectionsModeratedChannels - Information about the channels that this user moderates.
type CommentUserMetadataConnectionsModeratedChannels struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of channels on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// CommentUserMetadataConnectionsPictures - Information about this user's portraits.
type CommentUserMetadataConnectionsPictures struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of pictures on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// CommentUserMetadataConnectionsPortfolios - Information about this user's portfolios.
type CommentUserMetadataConnectionsPortfolios struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of portfolios on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// CommentUserMetadataConnectionsRecommendedChannels - A collection of recommended channels for the current user to follow. This data requires a bearer token with the `private` scope.
type CommentUserMetadataConnectionsRecommendedChannels struct {
	// An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
	Options []string `json:"options"`
	// The total number of channels on this connection. This data requires a bearer token with the `private` scope.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
	URI string `json:"uri"`
}

// CommentUserMetadataConnectionsRecommendedUsers - A Collection of recommended users for the current user to follow. This data requires a bearer token with the `private` scope.
type CommentUserMetadataConnectionsRecommendedUsers struct {
	// An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
	Options []string `json:"options"`
	// The total number of users on this connection. This data requires a bearer token with the `private` scope.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
	URI string `json:"uri"`
}

// CommentUserMetadataConnectionsShared - Information about the videos that have been shared with this user.
type CommentUserMetadataConnectionsShared struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// CommentUserMetadataConnectionsVideos - Information about the videos uploaded by this user.
type CommentUserMetadataConnectionsVideos struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// CommentUserMetadataConnectionsWatchedVideos - Information about the videos that this user has watched.
type CommentUserMetadataConnectionsWatchedVideos struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// CommentUserMetadataConnectionsWatchlater - Information about the videos that this user wants to watch later.
type CommentUserMetadataConnectionsWatchlater struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// CommentUserMetadataConnections - The list of resource URIs related to the user.
type CommentUserMetadataConnections struct {
	// Information about the albums created by this user.
	Albums CommentUserMetadataConnectionsAlbums `json:"albums"`
	// Information about the appearances of this user in other videos.
	Appearances CommentUserMetadataConnectionsAppearances `json:"appearances"`
	// Information on the users that the current user has blocked. This data requires a bearer token with the `private` scope.
	Block CommentUserMetadataConnectionsBlock `json:"block"`
	// Information about this user's followed categories.
	Categories CommentUserMetadataConnectionsCategories `json:"categories"`
	// Information about this user's subscribed channels.
	Channels CommentUserMetadataConnectionsChannels `json:"channels"`
	// Information about this user's feed.
	Feed CommentUserMetadataConnectionsFeed `json:"feed"`
	// Information about this user's folders.
	Folders CommentUserMetadataConnectionsFolders `json:"folders"`
	// Information about the user's followers.
	Followers CommentUserMetadataConnectionsFollowers `json:"followers"`
	// Information about the users that the current user is following.
	Following CommentUserMetadataConnectionsFollowing `json:"following"`
	// Information about the groups created by this user.
	Groups CommentUserMetadataConnectionsGroups `json:"groups"`
	// Information about the videos that this user has liked.
	Likes CommentUserMetadataConnectionsLikes `json:"likes"`
	// Information about the channels that this user moderates.
	ModeratedChannels CommentUserMetadataConnectionsModeratedChannels `json:"moderated_channels"`
	// Information about this user's portraits.
	Pictures CommentUserMetadataConnectionsPictures `json:"pictures"`
	// Information about this user's portfolios.
	Portfolios CommentUserMetadataConnectionsPortfolios `json:"portfolios"`
	// A collection of recommended channels for the current user to follow. This data requires a bearer token with the `private` scope.
	RecommendedChannels CommentUserMetadataConnectionsRecommendedChannels `json:"recommended_channels"`
	// A Collection of recommended users for the current user to follow. This data requires a bearer token with the `private` scope.
	RecommendedUsers CommentUserMetadataConnectionsRecommendedUsers `json:"recommended_users"`
	// Information about the videos that have been shared with this user.
	Shared CommentUserMetadataConnectionsShared `json:"shared"`
	// Information about the videos uploaded by this user.
	Videos CommentUserMetadataConnectionsVideos `json:"videos"`
	// Information about the videos that this user has watched.
	WatchedVideos CommentUserMetadataConnectionsWatchedVideos `json:"watched_videos"`
	// Information about the videos that this user wants to watch later.
	Watchlater CommentUserMetadataConnectionsWatchlater `json:"watchlater"`
}

type CommentUserMetadataInteractionsAddPrivacyUser struct {
	// An array of the HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
	Options []string `json:"options,omitempty"`
	// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
	URI *string `json:"uri,omitempty"`
}

// CommentUserMetadataInteractionsBlock - Information related to the block status of this user.
type CommentUserMetadataInteractionsBlock struct {
	// Whether a user is blocking the current user.
	Added bool `json:"added"`
	// The time in ISO 8601 format when the block occurred, or the null value if no block exists.
	AddedTime string `json:"added_time"`
	// An array of the HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The URI to block or unblock the user.
	URI string `json:"uri"`
}

// CommentUserMetadataInteractionsFollow - Information related to the followed status of this user.
type CommentUserMetadataInteractionsFollow struct {
	// Whether a user is following the current user.
	Added bool `json:"added"`
	// An array of the HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The URI to follow the user.
	URI string `json:"uri"`
}

// CommentUserMetadataInteractionsReport - Information regarding where and how to report a user.
type CommentUserMetadataInteractionsReport struct {
	// An array of the HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// List of valid reasons for reporting a video.
	Reason []string `json:"reason"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

type CommentUserMetadataInteractions struct {
	AddPrivacyUser *CommentUserMetadataInteractionsAddPrivacyUser `json:"add_privacy_user,omitempty"`
	// Information related to the block status of this user.
	Block CommentUserMetadataInteractionsBlock `json:"block"`
	// Information related to the followed status of this user.
	Follow CommentUserMetadataInteractionsFollow `json:"follow"`
	// Information regarding where and how to report a user.
	Report CommentUserMetadataInteractionsReport `json:"report"`
}

// CommentUserMetadata - The user's metadata.
type CommentUserMetadata struct {
	// The list of resource URIs related to the user.
	Connections  CommentUserMetadataConnections  `json:"connections"`
	Interactions CommentUserMetadataInteractions `json:"interactions"`
}

// CommentUserPreferencesVideosPrivacyCommentsEnum - The user's privacy preference for comments:
//
// Option descriptions:
//   - `anybody` - Anyone can comment on the user's videos.
//   - `contacts` - Only contacts can comment on the user's videos.
//   - `nobody` - No one can comment on the user's videos.
type CommentUserPreferencesVideosPrivacyCommentsEnum string

const (
	CommentUserPreferencesVideosPrivacyCommentsEnumAnybody  CommentUserPreferencesVideosPrivacyCommentsEnum = "anybody"
	CommentUserPreferencesVideosPrivacyCommentsEnumContacts CommentUserPreferencesVideosPrivacyCommentsEnum = "contacts"
	CommentUserPreferencesVideosPrivacyCommentsEnumNobody   CommentUserPreferencesVideosPrivacyCommentsEnum = "nobody"
)

func (e *CommentUserPreferencesVideosPrivacyCommentsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "anybody":
		fallthrough
	case "contacts":
		fallthrough
	case "nobody":
		*e = CommentUserPreferencesVideosPrivacyCommentsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CommentUserPreferencesVideosPrivacyCommentsEnum: %s", s)
	}
}

// CommentUserPreferencesVideosPrivacyEmbedEnum - The user's privacy preference for embeds:
//
// Option descriptions:
//   - `private` - Only the user can embed their own videos.
//   - `public` - Anyone can embed the user's videos.
//   - `whitelist` - Only those on the whitelist can embed the user's videos.
type CommentUserPreferencesVideosPrivacyEmbedEnum string

const (
	CommentUserPreferencesVideosPrivacyEmbedEnumPrivate   CommentUserPreferencesVideosPrivacyEmbedEnum = "private"
	CommentUserPreferencesVideosPrivacyEmbedEnumPublic    CommentUserPreferencesVideosPrivacyEmbedEnum = "public"
	CommentUserPreferencesVideosPrivacyEmbedEnumWhitelist CommentUserPreferencesVideosPrivacyEmbedEnum = "whitelist"
)

func (e *CommentUserPreferencesVideosPrivacyEmbedEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "private":
		fallthrough
	case "public":
		fallthrough
	case "whitelist":
		*e = CommentUserPreferencesVideosPrivacyEmbedEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CommentUserPreferencesVideosPrivacyEmbedEnum: %s", s)
	}
}

// CommentUserPreferencesVideosPrivacyViewEnum - The user's privacy preference for views:
//
// Option descriptions:
//   - `anybody` - Anyone can view the user's videos.
//   - `contacts` - Only contacts can view the user's videos.
//   - `disable` - Views are disabled for the user's videos.
//   - `nobody` - No one except the user can view the user's videos.
//   - `password` - Only those with the password can view the user's videos.
//   - `unlisted` - Anybody can view the user's videos if they have a link.
//   - `users` - Only other Vimeo members can view the user's videos.
type CommentUserPreferencesVideosPrivacyViewEnum string

const (
	CommentUserPreferencesVideosPrivacyViewEnumAnybody  CommentUserPreferencesVideosPrivacyViewEnum = "anybody"
	CommentUserPreferencesVideosPrivacyViewEnumContacts CommentUserPreferencesVideosPrivacyViewEnum = "contacts"
	CommentUserPreferencesVideosPrivacyViewEnumDisable  CommentUserPreferencesVideosPrivacyViewEnum = "disable"
	CommentUserPreferencesVideosPrivacyViewEnumNobody   CommentUserPreferencesVideosPrivacyViewEnum = "nobody"
	CommentUserPreferencesVideosPrivacyViewEnumPassword CommentUserPreferencesVideosPrivacyViewEnum = "password"
	CommentUserPreferencesVideosPrivacyViewEnumUnlisted CommentUserPreferencesVideosPrivacyViewEnum = "unlisted"
	CommentUserPreferencesVideosPrivacyViewEnumUsers    CommentUserPreferencesVideosPrivacyViewEnum = "users"
)

func (e *CommentUserPreferencesVideosPrivacyViewEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "anybody":
		fallthrough
	case "contacts":
		fallthrough
	case "disable":
		fallthrough
	case "nobody":
		fallthrough
	case "password":
		fallthrough
	case "unlisted":
		fallthrough
	case "users":
		*e = CommentUserPreferencesVideosPrivacyViewEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CommentUserPreferencesVideosPrivacyViewEnum: %s", s)
	}
}

type CommentUserPreferencesVideosPrivacy struct {
	// Whether other users can add the user's videos.
	Add *bool `json:"add,omitempty"`
	// The user's privacy preference for comments:
	//
	// Option descriptions:
	//  * `anybody` - Anyone can comment on the user's videos.
	//  * `contacts` - Only contacts can comment on the user's videos.
	//  * `nobody` - No one can comment on the user's videos.
	//
	Comments *CommentUserPreferencesVideosPrivacyCommentsEnum `json:"comments,omitempty"`
	// Whether other users can download the user's videos.
	Download *bool `json:"download,omitempty"`
	// The user's privacy preference for embeds:
	//
	// Option descriptions:
	//  * `private` - Only the user can embed their own videos.
	//  * `public` - Anyone can embed the user's videos.
	//  * `whitelist` - Only those on the whitelist can embed the user's videos.
	//
	Embed *CommentUserPreferencesVideosPrivacyEmbedEnum `json:"embed,omitempty"`
	// The user's privacy preference for views:
	//
	// Option descriptions:
	//  * `anybody` - Anyone can view the user's videos.
	//  * `contacts` - Only contacts can view the user's videos.
	//  * `disable` - Views are disabled for the user's videos.
	//  * `nobody` - No one except the user can view the user's videos.
	//  * `password` - Only those with the password can view the user's videos.
	//  * `unlisted` - Anybody can view the user's videos if they have a link.
	//  * `users` - Only other Vimeo members can view the user's videos.
	//
	View *CommentUserPreferencesVideosPrivacyViewEnum `json:"view,omitempty"`
}

type CommentUserPreferencesVideos struct {
	Privacy *CommentUserPreferencesVideosPrivacy `json:"privacy,omitempty"`
}

type CommentUserPreferences struct {
	Videos *CommentUserPreferencesVideos `json:"videos,omitempty"`
}

// CommentUserUploadQuotaLifetime - Information about the user's lifetime upload usage.
type CommentUserUploadQuotaLifetime struct {
	// The number of bytes remaining in your lifetime maximum.
	Free float64 `json:"free"`
	// The total number of bytes that you can upload across the lifetime of your account.
	Max float64 `json:"max"`
	// The number of bytes that you've already uploaded against your lifetime limit.
	Used float64 `json:"used"`
}

// CommentUserUploadQuotaPeriodic - Information about the user's usage for the current period.
type CommentUserUploadQuotaPeriodic struct {
	// The number of bytes remaining in your upload quota for the current period.
	Free float64 `json:"free"`
	// The total number of bytes that you can upload per period.
	Max float64 `json:"max"`
	// The time in ISO 8601 format when your upload quota resets.
	ResetDate string `json:"reset_date"`
	// The number of bytes that you've already uploaded against your quota in the current period.
	Used float64 `json:"used"`
}

// CommentUserUploadQuotaSpaceShowingEnum - Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota.
type CommentUserUploadQuotaSpaceShowingEnum string

const (
	CommentUserUploadQuotaSpaceShowingEnumLifetime CommentUserUploadQuotaSpaceShowingEnum = "lifetime"
	CommentUserUploadQuotaSpaceShowingEnumPeriodic CommentUserUploadQuotaSpaceShowingEnum = "periodic"
)

func (e *CommentUserUploadQuotaSpaceShowingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "lifetime":
		fallthrough
	case "periodic":
		*e = CommentUserUploadQuotaSpaceShowingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CommentUserUploadQuotaSpaceShowingEnum: %s", s)
	}
}

// CommentUserUploadQuotaSpace - Information about the user's upload space remaining for the current period.
type CommentUserUploadQuotaSpace struct {
	// The number of bytes remaining in your upload quota.
	Free float64 `json:"free"`
	// The maximum number of bytes allotted to your upload quota.
	Max float64 `json:"max"`
	// Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota.
	Showing CommentUserUploadQuotaSpaceShowingEnum `json:"showing"`
	// The number of bytes that you've already uploaded against your quota.
	Used float64 `json:"used"`
}

// CommentUserUploadQuota - Appears only when the user has upload access and is looking at their own user record.
type CommentUserUploadQuota struct {
	// Information about the user's lifetime upload usage.
	Lifetime CommentUserUploadQuotaLifetime `json:"lifetime"`
	// Information about the user's usage for the current period.
	Periodic CommentUserUploadQuotaPeriodic `json:"periodic"`
	// Information about the user's upload space remaining for the current period.
	Space CommentUserUploadQuotaSpace `json:"space"`
}

type CommentUserWebsites struct {
	// The website's description.
	Description string `json:"description"`
	// The URL of the website.
	Link string `json:"link"`
	// The name of the website.
	Name string `json:"name"`
}

// CommentUser - The user who posted the comment.
type CommentUser struct {
	// The user's account type:
	//
	// Option descriptions:
	//  * `basic` - The user has a Vimeo Basic subscription.
	//  * `business` - The user has a Vimeo Business subscription.
	//  * `live_business` - The user has a Vimeo Business Live subscription.
	//  * `live_premium` - The user has a Vimeo Premium subscription.
	//  * `live_pro` - The user has a Vimeo PRO Live subscription.
	//  * `plus` - The user has a Vimeo Plus subscription.
	//  * `pro` - The user has a Vimeo Pro subscription.
	//  * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
	//  * `producer` - The user has a Vimeo Producer subscription.
	//
	Account CommentUserAccountEnum `json:"account"`
	// The user's bio.
	Bio string `json:"bio"`
	// The user's content filters:
	//
	// Option descriptions:
	//  * `drugs` - Drugs or alcohol use.
	//  * `language` - Profanity or sexually suggestive content.
	//  * `nudity` - Nudity.
	//  * `safe` - Suitable for all audiences.
	//  * `unrated` - No rating.
	//  * `violence` - Violent or graphic content.
	//
	ContentFilter *CommentUserContentFilterEnum `json:"content_filter,omitempty"`
	// The time in ISO 8601 format when the user account was created.
	CreatedTime string `json:"created_time"`
	// The user's email address. This data requires a bearer token with the `email` scope.
	Email *string `json:"email,omitempty"`
	// The absolute URL of this user's profile page.
	Link string `json:"link"`
	// The user's location.
	Location string `json:"location"`
	// The user's metadata.
	Metadata CommentUserMetadata `json:"metadata"`
	// The user's display name.
	Name string `json:"name"`
	// The active portrait of this user.
	Pictures    Picture                 `json:"pictures"`
	Preferences *CommentUserPreferences `json:"preferences,omitempty"`
	// The user's resource key string.
	ResourceKey string `json:"resource_key"`
	// Appears only when the user has upload access and is looking at their own user record.
	UploadQuota CommentUserUploadQuota `json:"upload_quota"`
	// The user's canonical relative URI.
	URI string `json:"uri"`
	// The user's websites.
	Websites []CommentUserWebsites `json:"websites"`
}

// Comment - The comment was added.
type Comment struct {
	// The time in ISO 8601 format when the comment was posted.
	CreatedOn string          `json:"created_on"`
	Metadata  CommentMetadata `json:"metadata"`
	// The resource key string for the comment.
	ResourceKey string `json:"resource_key"`
	// The content of the comment.
	Text string `json:"text"`
	// The Vimeo content to which the comment relates:
	//
	// Option descriptions:
	//  * `video` - The comment is about a video.
	//
	Type CommentTypeEnum `json:"type"`
	// The unique identifier to access the comment resource.
	URI string `json:"uri"`
	// The user who posted the comment.
	User CommentUser `json:"user"`
}
