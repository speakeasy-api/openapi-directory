"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostNetworksCreateNetworkRequestLabels:
    r"""User-defined labels (key-value pairs)"""
    
    labelkey: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labelkey'), 'exclude': lambda f: f is None }})
    r"""New label"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostNetworksCreateNetworkRequestRoutes:
    
    destination: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destination') }})
    r"""Destination network or host of this route. Must not overlap with an existing ip_range in any subnets or with any destinations in other routes or with the first IP of the networks ip_range or with 172.31.1.1. Must be one of the private IPv4 ranges of RFC1918."""  
    gateway: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gateway') }})
    r"""Gateway for the route. Cannot be the first IP of the networks ip_range and also cannot be 172.31.1.1 as this IP is being used as a gateway for the public network interface of Servers."""  
    
class PostNetworksCreateNetworkRequestSubnetsTypeEnum(str, Enum):
    r"""Type of Subnetwork"""
    CLOUD = 'cloud'
    SERVER = 'server'
    VSWITCH = 'vswitch'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostNetworksCreateNetworkRequestSubnets:
    
    network_zone: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('network_zone') }})
    r"""Name of Network zone. The Location object contains the `network_zone` property each Location belongs to."""  
    type: PostNetworksCreateNetworkRequestSubnetsTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of Subnetwork"""  
    ip_range: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ip_range'), 'exclude': lambda f: f is None }})
    r"""Range to allocate IPs from. Must be a Subnet of the ip_range of the parent network object and must not overlap with any other subnets or with any destinations in routes. Minimum Network size is /30. We suggest that you pick a bigger Network with a /24 netmask."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostNetworksCreateNetworkRequest:
    
    ip_range: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ip_range') }})
    r"""IP range of the whole network which must span all included subnets. Must be one of the private IPv4 ranges of RFC1918. Minimum network size is /24. We highly recommend that you pick a larger network with a /16 netmask."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of the network"""  
    labels: Optional[PostNetworksCreateNetworkRequestLabels] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""User-defined labels (key-value pairs)"""  
    routes: Optional[list[PostNetworksCreateNetworkRequestRoutes]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('routes'), 'exclude': lambda f: f is None }})
    r"""Array of routes set in this network. The destination of the route must be one of the private IPv4 ranges of RFC1918. The gateway must be a subnet/IP of the ip_range of the network object. The destination must not overlap with an existing ip_range in any subnets or with any destinations in other routes or with the first IP of the networks ip_range or with 172.31.1.1. The gateway cannot be the first IP of the networks ip_range and also cannot be 172.31.1.1."""  
    subnets: Optional[list[PostNetworksCreateNetworkRequestSubnets]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subnets'), 'exclude': lambda f: f is None }})
    r"""Array of subnets allocated."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostNetworks201ApplicationJSONNetworkProtection:
    r"""Protection configuration for the Network"""
    
    delete: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delete') }})
    r"""If true, prevents the Network from being deleted"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostNetworks201ApplicationJSONNetworkRoutes:
    
    destination: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destination') }})
    r"""Destination network or host of this route. Must not overlap with an existing ip_range in any subnets or with any destinations in other routes or with the first IP of the networks ip_range or with 172.31.1.1. Must be one of the private IPv4 ranges of RFC1918."""  
    gateway: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gateway') }})
    r"""Gateway for the route. Cannot be the first IP of the networks ip_range and also cannot be 172.31.1.1 as this IP is being used as a gateway for the public network interface of Servers."""  
    
class PostNetworks201ApplicationJSONNetworkSubnetsTypeEnum(str, Enum):
    r"""Type of Subnetwork"""
    CLOUD = 'cloud'
    SERVER = 'server'
    VSWITCH = 'vswitch'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostNetworks201ApplicationJSONNetworkSubnets:
    
    gateway: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gateway') }})
    r"""Gateway for Servers attached to this subnet. For subnets of type Server this is always the first IP of the network IP range."""  
    network_zone: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('network_zone') }})
    r"""Name of Network zone. The Location object contains the `network_zone` property each Location belongs to."""  
    type: PostNetworks201ApplicationJSONNetworkSubnetsTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of Subnetwork"""  
    ip_range: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ip_range'), 'exclude': lambda f: f is None }})
    r"""Range to allocate IPs from. Must be a Subnet of the ip_range of the parent network object and must not overlap with any other subnets or with any destinations in routes. Minimum Network size is /30. We suggest that you pick a bigger Network with a /24 netmask."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostNetworks201ApplicationJSONNetwork:
    
    created: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created') }})
    r"""Point in time when the Network was created (in ISO-8601 format)"""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Network"""  
    ip_range: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ip_range') }})
    r"""IPv4 prefix of the whole Network"""  
    labels: dict[str, Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels') }})
    r"""User-defined labels (key-value pairs)"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of the Network"""  
    protection: PostNetworks201ApplicationJSONNetworkProtection = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protection') }})
    r"""Protection configuration for the Network"""  
    routes: list[PostNetworks201ApplicationJSONNetworkRoutes] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('routes') }})
    r"""Array of routes set in this Network"""  
    servers: list[int] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('servers') }})
    r"""Array of IDs of Servers attached to this Network"""  
    subnets: list[PostNetworks201ApplicationJSONNetworkSubnets] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subnets') }})
    r"""Array subnets allocated in this Network"""  
    load_balancers: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('load_balancers'), 'exclude': lambda f: f is None }})
    r"""Array of IDs of Load Balancers attached to this Network"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostNetworks201ApplicationJSON:
    r"""The `network` key contains the network that was just created"""
    
    network: Optional[PostNetworks201ApplicationJSONNetwork] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('network'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PostNetworksResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    post_networks_201_application_json_object: Optional[PostNetworks201ApplicationJSON] = dataclasses.field(default=None)
    r"""The `network` key contains the network that was just created"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    