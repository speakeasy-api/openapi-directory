<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class DeparturesAndArrivals 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * getArrivalsAndDeparturesByCRS is used to get a list of services arriving to and departing from a UK train station by the CRS (Computer Reservation System) code. This will typically return a list of train services, but will also return any replacement bus or ferry services that are in place.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetArrivalsAndDeparturesByCRSRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetArrivalsAndDeparturesByCRSResponse
     */
	public function getArrivalsAndDeparturesByCRS(
        \OpenAPI\OpenAPI\Models\Operations\GetArrivalsAndDeparturesByCRSRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetArrivalsAndDeparturesByCRSResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/getArrivalsAndDeparturesByCRS/{CRS}', \OpenAPI\OpenAPI\Models\Operations\GetArrivalsAndDeparturesByCRSRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetArrivalsAndDeparturesByCRSRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetArrivalsAndDeparturesByCRSResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 429 or $httpResponse->getStatusCode() === 500 or $httpResponse->getStatusCode() === 503) {
        }

        return $response;
    }
	
    /**
     * getArrivalsByCRS is used to get a list of services arriving to a UK train station by the CRS (Computer Reservation System) code. This will typically return a list of train services, but will also return any replacement bus or ferry services that are in place.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetArrivalsByCRSRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetArrivalsByCRSResponse
     */
	public function getArrivalsByCRS(
        \OpenAPI\OpenAPI\Models\Operations\GetArrivalsByCRSRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetArrivalsByCRSResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/getArrivalsByCRS/{CRS}', \OpenAPI\OpenAPI\Models\Operations\GetArrivalsByCRSRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetArrivalsByCRSRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetArrivalsByCRSResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 429 or $httpResponse->getStatusCode() === 500 or $httpResponse->getStatusCode() === 503) {
        }

        return $response;
    }
	
    /**
     * getDeparturesByCRS is used to get a list of services departing from a UK train station by the CRS (Computer Reservation System) code. This will typically return a list of train services, but will also return any replacement bus or ferry services that are in place.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeparturesByCRSRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeparturesByCRSResponse
     */
	public function getDeparturesByCRS(
        \OpenAPI\OpenAPI\Models\Operations\GetDeparturesByCRSRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeparturesByCRSResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/getDeparturesByCRS/{CRS}', \OpenAPI\OpenAPI\Models\Operations\GetDeparturesByCRSRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDeparturesByCRSRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeparturesByCRSResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 429 or $httpResponse->getStatusCode() === 500 or $httpResponse->getStatusCode() === 503) {
        }

        return $response;
    }
}