<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * OauthV1OpenidDiscovery - OK
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class OauthV1OpenidDiscovery
{
    /**
     * The endpoint that validates all authorization requests.
     * 
     * @var ?string $authorizationEndpoint
     */
	#[\JMS\Serializer\Annotation\SerializedName('authorization_endpoint')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $authorizationEndpoint = null;
    
    /**
     * A collection of claims supported by authorization server for identity token
     * 
     * @var ?array<string> $claimsSupported
     */
	#[\JMS\Serializer\Annotation\SerializedName('claims_supported')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $claimsSupported = null;
    
    /**
     * The endpoint that validates all device code related authorization requests.
     * 
     * @var ?string $deviceAuthorizationEndpoint
     */
	#[\JMS\Serializer\Annotation\SerializedName('device_authorization_endpoint')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $deviceAuthorizationEndpoint = null;
    
    /**
     * A collection of JWS signing algorithms supported by authorization server to sign identity token.
     * 
     * @var ?array<string> $idTokenSigningAlgValuesSupported
     */
	#[\JMS\Serializer\Annotation\SerializedName('id_token_signing_alg_values_supported')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $idTokenSigningAlgValuesSupported = null;
    
    /**
     * The URL of the party that will create the token and sign it with its private key.
     * 
     * @var ?string $issuer
     */
	#[\JMS\Serializer\Annotation\SerializedName('issuer')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $issuer = null;
    
    /**
     * The URL of your JSON Web Key Set. This set is a collection of JSON Web Keys, a standard method for representing cryptographic keys in a JSON structure.
     * 
     * @var ?string $jwkUri
     */
	#[\JMS\Serializer\Annotation\SerializedName('jwk_uri')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $jwkUri = null;
    
    /**
     * A collection of response type supported by authorization server.
     * 
     * @var ?array<string> $responseTypeSupported
     */
	#[\JMS\Serializer\Annotation\SerializedName('response_type_supported')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $responseTypeSupported = null;
    
    /**
     * The endpoint used to revoke access or refresh tokens issued by the authorization server.
     * 
     * @var ?string $revocationEndpoint
     */
	#[\JMS\Serializer\Annotation\SerializedName('revocation_endpoint')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $revocationEndpoint = null;
    
    /**
     * A collection of scopes supported by authorization server for identity token
     * 
     * @var ?array<string> $scopesSupported
     */
	#[\JMS\Serializer\Annotation\SerializedName('scopes_supported')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $scopesSupported = null;
    
    /**
     * A collection of subject by authorization server.
     * 
     * @var ?array<string> $subjectTypeSupported
     */
	#[\JMS\Serializer\Annotation\SerializedName('subject_type_supported')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $subjectTypeSupported = null;
    
    /**
     * The URL of the token endpoint. After a client has received an authorization code, that code is presented to the token endpoint and exchanged for an identity token, an access token, and a refresh token.
     * 
     * @var ?string $tokenEndpoint
     */
	#[\JMS\Serializer\Annotation\SerializedName('token_endpoint')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $tokenEndpoint = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $url = null;
    
    /**
     * The URL of the user info endpoint, which returns user profile information to a client. Keep in mind that the user info endpoint returns only the information that has been requested.
     * 
     * @var ?string $userinfoEndpoint
     */
	#[\JMS\Serializer\Annotation\SerializedName('userinfo_endpoint')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $userinfoEndpoint = null;
    
	public function __construct()
	{
		$this->authorizationEndpoint = null;
		$this->claimsSupported = null;
		$this->deviceAuthorizationEndpoint = null;
		$this->idTokenSigningAlgValuesSupported = null;
		$this->issuer = null;
		$this->jwkUri = null;
		$this->responseTypeSupported = null;
		$this->revocationEndpoint = null;
		$this->scopesSupported = null;
		$this->subjectTypeSupported = null;
		$this->tokenEndpoint = null;
		$this->url = null;
		$this->userinfoEndpoint = null;
	}
}
