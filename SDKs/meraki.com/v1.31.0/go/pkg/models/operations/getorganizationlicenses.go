// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetOrganizationLicensesStateEnum - Filter the licenses to those in a particular state. Can be one of 'active', 'expired', 'expiring', 'recentlyQueued', 'unused' or 'unusedActive'
type GetOrganizationLicensesStateEnum string

const (
	GetOrganizationLicensesStateEnumActive         GetOrganizationLicensesStateEnum = "active"
	GetOrganizationLicensesStateEnumExpired        GetOrganizationLicensesStateEnum = "expired"
	GetOrganizationLicensesStateEnumExpiring       GetOrganizationLicensesStateEnum = "expiring"
	GetOrganizationLicensesStateEnumRecentlyQueued GetOrganizationLicensesStateEnum = "recentlyQueued"
	GetOrganizationLicensesStateEnumUnused         GetOrganizationLicensesStateEnum = "unused"
	GetOrganizationLicensesStateEnumUnusedActive   GetOrganizationLicensesStateEnum = "unusedActive"
)

func (e *GetOrganizationLicensesStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "active":
		fallthrough
	case "expired":
		fallthrough
	case "expiring":
		fallthrough
	case "recentlyQueued":
		fallthrough
	case "unused":
		fallthrough
	case "unusedActive":
		*e = GetOrganizationLicensesStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationLicensesStateEnum: %s", s)
	}
}

type GetOrganizationLicensesRequest struct {
	// Filter the licenses to those assigned to a particular device. Returned in the same order that they are queued to the device.
	DeviceSerial *string `queryParam:"style=form,explode=true,name=deviceSerial"`
	// A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	EndingBefore *string `queryParam:"style=form,explode=true,name=endingBefore"`
	// Filter the licenses to those assigned in a particular network
	NetworkID      *string `queryParam:"style=form,explode=true,name=networkId"`
	OrganizationID string  `pathParam:"style=simple,explode=false,name=organizationId"`
	// The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
	PerPage *int64 `queryParam:"style=form,explode=true,name=perPage"`
	// A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	StartingAfter *string `queryParam:"style=form,explode=true,name=startingAfter"`
	// Filter the licenses to those in a particular state. Can be one of 'active', 'expired', 'expiring', 'recentlyQueued', 'unused' or 'unusedActive'
	State *GetOrganizationLicensesStateEnum `queryParam:"style=form,explode=true,name=state"`
}

type GetOrganizationLicenses200ApplicationJSONPermanentlyQueuedLicenses struct {
	// The duration of the individual license
	DurationInDays *int64 `json:"durationInDays,omitempty"`
	// Permanently queued license ID
	ID *string `json:"id,omitempty"`
	// License key
	LicenseKey *string `json:"licenseKey,omitempty"`
	// License type
	LicenseType *string `json:"licenseType,omitempty"`
	// Order number
	OrderNumber *string `json:"orderNumber,omitempty"`
}

// GetOrganizationLicenses200ApplicationJSONStateEnum - The state of the license. All queued licenses have a status of `recentlyQueued`.
type GetOrganizationLicenses200ApplicationJSONStateEnum string

const (
	GetOrganizationLicenses200ApplicationJSONStateEnumActive         GetOrganizationLicenses200ApplicationJSONStateEnum = "active"
	GetOrganizationLicenses200ApplicationJSONStateEnumExpired        GetOrganizationLicenses200ApplicationJSONStateEnum = "expired"
	GetOrganizationLicenses200ApplicationJSONStateEnumExpiring       GetOrganizationLicenses200ApplicationJSONStateEnum = "expiring"
	GetOrganizationLicenses200ApplicationJSONStateEnumRecentlyQueued GetOrganizationLicenses200ApplicationJSONStateEnum = "recentlyQueued"
	GetOrganizationLicenses200ApplicationJSONStateEnumUnused         GetOrganizationLicenses200ApplicationJSONStateEnum = "unused"
	GetOrganizationLicenses200ApplicationJSONStateEnumUnusedActive   GetOrganizationLicenses200ApplicationJSONStateEnum = "unusedActive"
)

func (e *GetOrganizationLicenses200ApplicationJSONStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "active":
		fallthrough
	case "expired":
		fallthrough
	case "expiring":
		fallthrough
	case "recentlyQueued":
		fallthrough
	case "unused":
		fallthrough
	case "unusedActive":
		*e = GetOrganizationLicenses200ApplicationJSONStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationLicenses200ApplicationJSONStateEnum: %s", s)
	}
}

type GetOrganizationLicenses200ApplicationJSON struct {
	// The date the license started burning
	ActivationDate *string `json:"activationDate,omitempty"`
	// The date the license was claimed into the organization
	ClaimDate *string `json:"claimDate,omitempty"`
	// Serial number of the device the license is assigned to
	DeviceSerial *string `json:"deviceSerial,omitempty"`
	// The duration of the individual license
	DurationInDays *int64 `json:"durationInDays,omitempty"`
	// The date the license will expire
	ExpirationDate *string `json:"expirationDate,omitempty"`
	// The id of the head license this license is queued behind. If there is no head license, it returns nil.
	HeadLicenseID *string `json:"headLicenseId,omitempty"`
	// License ID
	ID *string `json:"id,omitempty"`
	// License key
	LicenseKey *string `json:"licenseKey,omitempty"`
	// License type
	LicenseType *string `json:"licenseType,omitempty"`
	// ID of the network the license is assigned to
	NetworkID *string `json:"networkId,omitempty"`
	// Order number
	OrderNumber *string `json:"orderNumber,omitempty"`
	// DEPRECATED List of permanently queued licenses attached to the license. Instead, use /organizations/{organizationId}/licenses?deviceSerial= to retrieved queued licenses for a given device.
	PermanentlyQueuedLicenses []GetOrganizationLicenses200ApplicationJSONPermanentlyQueuedLicenses `json:"permanentlyQueuedLicenses,omitempty"`
	// The number of seats of the license. Only applicable to SM licenses.
	SeatCount *int64 `json:"seatCount,omitempty"`
	// The state of the license. All queued licenses have a status of `recentlyQueued`.
	State *GetOrganizationLicenses200ApplicationJSONStateEnum `json:"state,omitempty"`
	// The duration of the license plus all permanently queued licenses associated with it
	TotalDurationInDays *int64 `json:"totalDurationInDays,omitempty"`
}

type GetOrganizationLicensesResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	GetOrganizationLicenses200ApplicationJSONObjects []GetOrganizationLicenses200ApplicationJSON
}
