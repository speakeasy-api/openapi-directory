// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type QueryQueryGroupGroupCondition struct {
	// The compare condition bases' value a
	AtValueA *string `json:"@ValueA,omitempty"`
	// The compare condition bases' value b
	AtValueB *string `json:"@ValueB,omitempty"`
}

type QueryQueryGroupGroupFilter struct {
	// The filter bases' property
	AtProperty *string `json:"@Property,omitempty"`
	// The filter bases' value
	AtValue *string `json:"@Value,omitempty"`
}

type QueryQueryGroupGroupOrder struct {
	// The order by bases' property
	AtProperty *string `json:"@Property,omitempty"`
}

// QueryQueryGroupGroupOutputAtOutputEnum - The output bases' output
type QueryQueryGroupGroupOutputAtOutputEnum string

const (
	QueryQueryGroupGroupOutputAtOutputEnumElement         QueryQueryGroupGroupOutputAtOutputEnum = "Element"
	QueryQueryGroupGroupOutputAtOutputEnumAttribute       QueryQueryGroupGroupOutputAtOutputEnum = "Attribute"
	QueryQueryGroupGroupOutputAtOutputEnumVariable        QueryQueryGroupGroupOutputAtOutputEnum = "Variable"
	QueryQueryGroupGroupOutputAtOutputEnumVariableSum     QueryQueryGroupGroupOutputAtOutputEnum = "VariableSum"
	QueryQueryGroupGroupOutputAtOutputEnumVariableAppend  QueryQueryGroupGroupOutputAtOutputEnum = "VariableAppend"
	QueryQueryGroupGroupOutputAtOutputEnumVariablePrepend QueryQueryGroupGroupOutputAtOutputEnum = "VariablePrepend"
	QueryQueryGroupGroupOutputAtOutputEnumElementDatePart QueryQueryGroupGroupOutputAtOutputEnum = "ElementDatePart"
)

func (e *QueryQueryGroupGroupOutputAtOutputEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Element":
		fallthrough
	case "Attribute":
		fallthrough
	case "Variable":
		fallthrough
	case "VariableSum":
		fallthrough
	case "VariableAppend":
		fallthrough
	case "VariablePrepend":
		fallthrough
	case "ElementDatePart":
		*e = QueryQueryGroupGroupOutputAtOutputEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryQueryGroupGroupOutputAtOutputEnum: %s", s)
	}
}

type QueryQueryGroupGroupOutput struct {
	// The output bases' max length
	AtMaxLength *string `json:"@MaxLength,omitempty"`
	// The output bases' output
	AtOutput *QueryQueryGroupGroupOutputAtOutputEnum `json:"@Output,omitempty"`
}

type QueryQueryGroupGroup struct {
	// The entity groups' group name
	AtGroupName *string `json:"@GroupName,omitempty"`
	// The entity groups' item name
	AtItemName *string `json:"@ItemName,omitempty"`
	// The entity groups' loop expression
	AtLoopExpression *string `json:"@LoopExpression,omitempty"`
	// The entity groups' selector
	AtSelector *string `json:"@Selector,omitempty"`
	// The entity groups' unique key variable
	AtUniqueKeyVariable *string `json:"@UniqueKeyVariable,omitempty"`
	// The entity groups' conditions
	Condition []QueryQueryGroupGroupCondition `json:"Condition,omitempty"`
	// The entity groups' filters
	Filter []QueryQueryGroupGroupFilter `json:"Filter,omitempty"`
	// The entity groups' ordering
	Order []QueryQueryGroupGroupOrder `json:"Order,omitempty"`
	// The entity groups' outputs
	Output []QueryQueryGroupGroupOutput `json:"Output,omitempty"`
}

// QueryQueryGroup - The querys' groups
type QueryQueryGroup struct {
	Group []QueryQueryGroupGroup `json:"Group,omitempty"`
}

type QueryQueryVariableVariable struct {
	// The name value pairs' name
	AtName *string `json:"@Name,omitempty"`
	// The name value pairs' value
	AtValue *string `json:"@Value,omitempty"`
}

// QueryQueryVariable - The querys' variables
type QueryQueryVariable struct {
	Variable []QueryQueryVariableVariable `json:"Variable,omitempty"`
}

type QueryQuery struct {
	// The querys' exclude null or empty elements
	ExcludeNullOrEmptyElements *bool `json:"ExcludeNullOrEmptyElements,omitempty"`
	// The querys' groups
	Groups *QueryQueryGroup `json:"Groups,omitempty"`
	// The querys' root node name
	RootNodeName *string `json:"RootNodeName,omitempty"`
	// The querys' suppress metric attributes
	SuppressMetricAttributes *bool `json:"SuppressMetricAttributes,omitempty"`
	// The querys' variables
	Variables *QueryQueryVariable `json:"Variables,omitempty"`
}

// Query - The query object to be executed against the application data.
type Query struct {
	Query *QueryQuery `json:"Query,omitempty"`
}
