"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class ReportOperationLogsSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class ReportOperationLogsCategoryTypeEnum(str, Enum):
    r"""**Optional**<br>
    Filter your response by a category type to see reports for a specific category.
    The value for this field can be one of the following:<br> `all`<br>`user`<br>`user_settings`<br>`account`<br>`billing`<br>`im`<br>`recording`<br>`phone_contacts`<br>`webinar`<br>`sub_account`<br>`role`<br>`zoom_rooms`
    """
    ALL = 'all'
    USER = 'user'
    USER_SETTINGS = 'user_settings'
    ACCOUNT = 'account'
    BILLING = 'billing'
    IM = 'im'
    RECORDING = 'recording'
    PHONE_CONTACTS = 'phone_contacts'
    WEBINAR = 'webinar'
    SUB_ACCOUNT = 'sub_account'
    ROLE = 'role'
    ZOOM_ROOMS = 'zoom_rooms'


@dataclasses.dataclass
class ReportOperationLogsRequest:
    
    from_: date = dataclasses.field(metadata={'query_param': { 'field_name': 'from', 'style': 'form', 'explode': True }})
    r"""Start date in 'yyyy-mm-dd' format. The date range defined by the \\"from\\" and \\"to\\" parameters should only be one month as the report includes only one month worth of data at once."""  
    to: date = dataclasses.field(metadata={'query_param': { 'field_name': 'to', 'style': 'form', 'explode': True }})
    r"""End date."""  
    category_type: Optional[ReportOperationLogsCategoryTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'category_type', 'style': 'form', 'explode': True }})
    r"""**Optional**<br>
    Filter your response by a category type to see reports for a specific category.
    The value for this field can be one of the following:<br> `all`<br>`user`<br>`user_settings`<br>`account`<br>`billing`<br>`im`<br>`recording`<br>`phone_contacts`<br>`webinar`<br>`sub_account`<br>`role`<br>`zoom_rooms`
    """  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'next_page_token', 'style': 'form', 'explode': True }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': True }})
    r"""The number of records returned within a single API call."""  
    

@dataclasses.dataclass
class ReportOperationLogs200ApplicationXMLOperationLogs:
    
    action: Optional[str] = dataclasses.field(default=None)
    r"""Action"""  
    category_type: Optional[str] = dataclasses.field(default=None)
    r"""Category type"""  
    operation_detail: Optional[str] = dataclasses.field(default=None)
    r"""Operation detail"""  
    operator: Optional[str] = dataclasses.field(default=None)
    r"""The user who performed the operation."""  
    time: Optional[datetime] = dataclasses.field(default=None)
    r"""The time at which the operation was performed."""  
    

@dataclasses.dataclass
class ReportOperationLogs200ApplicationXML:
    r"""Pagination object."""
    
    next_page_token: Optional[str] = dataclasses.field(default=None)
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of the available result list exceeds the page size. The expiration period is 15 minutes."""  
    operation_logs: Optional[list[ReportOperationLogs200ApplicationXMLOperationLogs]] = dataclasses.field(default=None)
    r"""Array of operation log objects"""  
    page_size: Optional[int] = dataclasses.field(default=None)
    r"""The amount of records returns within a single API call."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReportOperationLogs200ApplicationJSONOperationLogs:
    
    action: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action'), 'exclude': lambda f: f is None }})
    r"""Action"""  
    category_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category_type'), 'exclude': lambda f: f is None }})
    r"""Category type"""  
    operation_detail: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('operation_detail'), 'exclude': lambda f: f is None }})
    r"""Operation detail"""  
    operator: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('operator'), 'exclude': lambda f: f is None }})
    r"""The user who performed the operation."""  
    time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The time at which the operation was performed."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReportOperationLogs200ApplicationJSON:
    r"""Pagination object."""
    
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page_token'), 'exclude': lambda f: f is None }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of the available result list exceeds the page size. The expiration period is 15 minutes."""  
    operation_logs: Optional[list[ReportOperationLogs200ApplicationJSONOperationLogs]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('operation_logs'), 'exclude': lambda f: f is None }})
    r"""Array of operation log objects"""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_size'), 'exclude': lambda f: f is None }})
    r"""The amount of records returns within a single API call."""  
    

@dataclasses.dataclass
class ReportOperationLogsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    report_operation_logs_200_application_json_object: Optional[ReportOperationLogs200ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200`<br>
    Operation Logs Report Returned
    """  
    