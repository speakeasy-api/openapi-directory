<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a new function. If a function with the given name already exists in the specified project, the long running operation will return `ALREADY_EXISTS` error.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsCreateResponse
     */
	public function cloudfunctionsProjectsLocationsFunctionsCreate(
        \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2alpha/{parent}/functions', \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "functionInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a function with the given name from the specified project. If the given function is used by some trigger, the trigger will be updated to remove this function.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsDeleteResponse
     */
	public function cloudfunctionsProjectsLocationsFunctionsDelete(
        \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2alpha/{name}', \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a signed URL for downloading deployed function source code. The URL is only valid for a limited period and should be used within 30 minutes of generation. For more information about the signed URL usage see: https://cloud.google.com/storage/docs/access-control/signed-urls
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsGenerateDownloadUrlRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsGenerateDownloadUrlSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsGenerateDownloadUrlResponse
     */
	public function cloudfunctionsProjectsLocationsFunctionsGenerateDownloadUrl(
        \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsGenerateDownloadUrlRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsGenerateDownloadUrlSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsGenerateDownloadUrlResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2alpha/{name}:generateDownloadUrl', \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsGenerateDownloadUrlRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsGenerateDownloadUrlRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsGenerateDownloadUrlResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->generateDownloadUrlResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GenerateDownloadUrlResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a signed URL for uploading a function source code. For more information about the signed URL usage see: https://cloud.google.com/storage/docs/access-control/signed-urls. Once the function source code upload is complete, the used signed URL should be provided in CreateFunction or UpdateFunction request as a reference to the function source code. When uploading source code to the generated signed URL, please follow these restrictions: * Source file type should be a zip file. * No credentials should be attached - the signed URLs provide access to the target bucket using internal service identity; if credentials were attached, the identity from the credentials would be used, but that identity does not have permissions to upload files to the URL. When making a HTTP PUT request, these two headers need to be specified: * `content-type: application/zip` And this header SHOULD NOT be specified: * `Authorization: Bearer YOUR_TOKEN`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsGenerateUploadUrlRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsGenerateUploadUrlSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsGenerateUploadUrlResponse
     */
	public function cloudfunctionsProjectsLocationsFunctionsGenerateUploadUrl(
        \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsGenerateUploadUrlRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsGenerateUploadUrlSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsGenerateUploadUrlResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2alpha/{parent}/functions:generateUploadUrl', \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsGenerateUploadUrlRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "generateUploadUrlRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsGenerateUploadUrlRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsGenerateUploadUrlResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->generateUploadUrlResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GenerateUploadUrlResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsGetIamPolicyResponse
     */
	public function cloudfunctionsProjectsLocationsFunctionsGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2alpha/{resource}:getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of functions that belong to the requested project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsListResponse
     */
	public function cloudfunctionsProjectsLocationsFunctionsList(
        \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2alpha/{parent}/functions', \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listFunctionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListFunctionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates existing function.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsPatchResponse
     */
	public function cloudfunctionsProjectsLocationsFunctionsPatch(
        \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2alpha/{name}', \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "functionInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsSetIamPolicyResponse
     */
	public function cloudfunctionsProjectsLocationsFunctionsSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2alpha/{resource}:setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsTestIamPermissionsResponse
     */
	public function cloudfunctionsProjectsLocationsFunctionsTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2alpha/{resource}:testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testIamPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsFunctionsTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testIamPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestIamPermissionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists information about the supported locations for this service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsListResponse
     */
	public function cloudfunctionsProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2alpha/{name}/locations', \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsOperationsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsOperationsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsOperationsGetResponse
     */
	public function cloudfunctionsProjectsLocationsOperationsGet(
        \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsOperationsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsOperationsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsOperationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2alpha/{name}', \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsOperationsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsOperationsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsOperationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsOperationsListResponse
     */
	public function cloudfunctionsProjectsLocationsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2alpha/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListOperationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of runtimes that are supported for the requested project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsRuntimesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsRuntimesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsRuntimesListResponse
     */
	public function cloudfunctionsProjectsLocationsRuntimesList(
        \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsRuntimesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsRuntimesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsRuntimesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2alpha/{parent}/runtimes', \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsRuntimesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsRuntimesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudfunctionsProjectsLocationsRuntimesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listRuntimesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListRuntimesResponse', 'json');
            }
        }

        return $response;
    }
}