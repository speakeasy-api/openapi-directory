"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import adstyle as shared_adstyle
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AdUnitContentAdsSettingsBackupOption:
    r"""The backup option to be used in instances where no ad is available."""
    
    color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('color'), 'exclude': lambda f: f is None }})
    r"""Color to use when type is set to COLOR."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of the backup option. Possible values are BLANK, COLOR and URL."""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""URL to use when type is set to URL."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AdUnitContentAdsSettings:
    r"""Settings specific to content ads (AFC) and highend mobile content ads (AFMC - deprecated)."""
    
    backup_option: Optional[AdUnitContentAdsSettingsBackupOption] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('backupOption'), 'exclude': lambda f: f is None }})
    r"""The backup option to be used in instances where no ad is available."""  
    size: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size'), 'exclude': lambda f: f is None }})
    r"""Size of this ad unit."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of this ad unit."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AdUnitFeedAdsSettings:
    r"""Settings specific to feed ads (AFF) - deprecated."""
    
    ad_position: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adPosition'), 'exclude': lambda f: f is None }})
    r"""The position of the ads relative to the feed entries."""  
    frequency: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('frequency'), 'exclude': lambda f: f is None }})
    r"""The frequency at which ads should appear in the feed (i.e. every N entries)."""  
    minimum_word_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minimumWordCount'), 'exclude': lambda f: f is None }})
    r"""The minimum length an entry should be in order to have attached ads."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of ads which should appear."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AdUnitMobileContentAdsSettings:
    r"""Settings specific to WAP mobile content ads (AFMC) - deprecated."""
    
    markup_language: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('markupLanguage'), 'exclude': lambda f: f is None }})
    r"""The markup language to use for this ad unit."""  
    scripting_language: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scriptingLanguage'), 'exclude': lambda f: f is None }})
    r"""The scripting language to use for this ad unit."""  
    size: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size'), 'exclude': lambda f: f is None }})
    r"""Size of this ad unit."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of this ad unit."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AdUnit:
    r"""Successful response"""
    
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""Identity code of this ad unit, not necessarily unique across ad clients."""  
    content_ads_settings: Optional[AdUnitContentAdsSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contentAdsSettings'), 'exclude': lambda f: f is None }})
    r"""Settings specific to content ads (AFC) and highend mobile content ads (AFMC - deprecated)."""  
    custom_style: Optional[shared_adstyle.AdStyle] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customStyle'), 'exclude': lambda f: f is None }})  
    feed_ads_settings: Optional[AdUnitFeedAdsSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('feedAdsSettings'), 'exclude': lambda f: f is None }})
    r"""Settings specific to feed ads (AFF) - deprecated."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier of this ad unit. This should be considered an opaque identifier; it is not safe to rely on it being in any particular format."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Kind of resource this is, in this case adsense#adUnit."""  
    mobile_content_ads_settings: Optional[AdUnitMobileContentAdsSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mobileContentAdsSettings'), 'exclude': lambda f: f is None }})
    r"""Settings specific to WAP mobile content ads (AFMC) - deprecated."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of this ad unit."""  
    saved_style_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('savedStyleId'), 'exclude': lambda f: f is None }})
    r"""ID of the saved ad style which holds this ad unit's style information."""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status of this ad unit. Possible values are:
    NEW: Indicates that the ad unit was created within the last seven days and does not yet have any activity associated with it.
    
    ACTIVE: Indicates that there has been activity on this ad unit in the last seven days.
    
    INACTIVE: Indicates that there has been no activity on this ad unit in the last seven days.
    """  
    