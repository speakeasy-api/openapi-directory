/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * VerificationParameters - Parameters needed to schedule a snapshot verification job.
 * 
 */
public class VerificationParameters {
    /**
     * Snapshot stored in the provided data location id will be verified. If not provided, we will use Rubrik cluster ID. Currently it only verifies Snapshot present Rubrik cluster.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locationIdOpt")
    public String locationIdOpt;

    public VerificationParameters withLocationIdOpt(String locationIdOpt) {
        this.locationIdOpt = locationIdOpt;
        return this;
    }
    
    /**
     * ID assigned to the object. This objectId will be used to fetch the associated object.
     * 
     */
    @JsonProperty("objectId")
    public String objectId;

    public VerificationParameters withObjectId(String objectId) {
        this.objectId = objectId;
        return this;
    }
    
    /**
     * The backup should be verified exactly once after the given timestamp. The date-time string should be in ISO8601 format, such as "2016-01-01T01:23:45.678". If not provided, it will default to "1970-01-01T00:00:00.000".
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("shouldVerifyAfterOpt")
    public OffsetDateTime shouldVerifyAfterOpt;

    public VerificationParameters withShouldVerifyAfterOpt(OffsetDateTime shouldVerifyAfterOpt) {
        this.shouldVerifyAfterOpt = shouldVerifyAfterOpt;
        return this;
    }
    
    /**
     * ID assigned to a snapshot. This snapshotId will be used to fetch the associated snapshot. The scheduled job will verify this snapshot.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("snapshotIdsOpt")
    public String[] snapshotIdsOpt;

    public VerificationParameters withSnapshotIdsOpt(String[] snapshotIdsOpt) {
        this.snapshotIdsOpt = snapshotIdsOpt;
        return this;
    }
    
    public VerificationParameters(@JsonProperty("objectId") String objectId) {
        this.objectId = objectId;
  }
}
