// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// VRFStateEnum - The possible state of VRF.
type VRFStateEnum string

const (
	VRFStateEnumStateUnspecified VRFStateEnum = "STATE_UNSPECIFIED"
	VRFStateEnumProvisioning     VRFStateEnum = "PROVISIONING"
	VRFStateEnumProvisioned      VRFStateEnum = "PROVISIONED"
)

func (e VRFStateEnum) ToPointer() *VRFStateEnum {
	return &e
}

func (e *VRFStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "PROVISIONING":
		fallthrough
	case "PROVISIONED":
		*e = VRFStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VRFStateEnum: %v", v)
	}
}

// Vrf - A network VRF.
type Vrf struct {
	// The name of the VRF.
	Name *string `json:"name,omitempty"`
	// QOS policy parameters.
	QosPolicy *QosPolicy `json:"qosPolicy,omitempty"`
	// The possible state of VRF.
	State *VRFStateEnum `json:"state,omitempty"`
	// The list of VLAN attachments for the VRF.
	VlanAttachments []VlanAttachment `json:"vlanAttachments,omitempty"`
}
