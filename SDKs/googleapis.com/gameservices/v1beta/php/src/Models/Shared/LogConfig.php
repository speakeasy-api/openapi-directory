<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * LogConfig - Specifies what kind of log the caller must write
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class LogConfig
{
    /**
     * Write a Cloud Audit log
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CloudAuditOptions $cloudAudit
     */
	#[\JMS\Serializer\Annotation\SerializedName('cloudAudit')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CloudAuditOptions')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CloudAuditOptions $cloudAudit = null;
    
    /**
     * Increment a streamz counter with the specified metric and field names. Metric names should start with a '/', generally be lowercase-only, and end in "_count". Field names should not contain an initial slash. The actual exported metric names will have "/iam/policy" prepended. Field names correspond to IAM request parameters and field values are their respective values. Supported field names: - "authority", which is "[token]" if IAMContext.token is present, otherwise the value of IAMContext.authority_selector if present, and otherwise a representation of IAMContext.principal; or - "iam_principal", a representation of IAMContext.principal even if a token or authority selector is present; or - "" (empty string), resulting in a counter with no fields. Examples: counter { metric: "/debug_access_count" field: "iam_principal" } ==> increment counter /iam/policy/debug_access_count {iam_principal=[value of IAMContext.principal]}
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CounterOptions $counter
     */
	#[\JMS\Serializer\Annotation\SerializedName('counter')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CounterOptions')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CounterOptions $counter = null;
    
    /**
     * Write a Data Access (Gin) log
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DataAccessOptions $dataAccess
     */
	#[\JMS\Serializer\Annotation\SerializedName('dataAccess')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\DataAccessOptions')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DataAccessOptions $dataAccess = null;
    
	public function __construct()
	{
		$this->cloudAudit = null;
		$this->counter = null;
		$this->dataAccess = null;
	}
}
