/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

/**
 * #### Information is available for the following types of airspace:
 * * **Controlled Airspace (CAS):** Class B, C, D, E2 airspace names, boundaries, altitude information, and LAANC availability
 * * **Special Use Airspace (SUA):** Names, boundaries, and altitude information for the following types of Special Use Airspace:
 *     - Alert Areas (AA)
 *     - Military Operations Areas (MOA)
 *     - National Security Areas (NSA)
 *     - Prohibited Areas (PA)
 *     - Restricted Areas (RA)
 *     - Warning Areas (WA)
 * * **Miscellaneous Activity Areas (MAA):** Names and boundary information for the following types of Miscellaneous Activity Areas:
 *     - Aerobatic Practice Areas (AEROBATIC PRACTICE)
 *     - Glider Operations Areas (GLIDER)
 *     - Hang Glider Operations Areas (HANG GLIDER)
 *     - Parachute Jump Areas (PARACHUTE JUMP AREA)
 *     - Space Launch Activity Areas (SPACE LAUNCH ACTIVITY)
 * * **Military Training Routes (MTR):** Names, route geometry, usage times, and corridor width information for both VFR and IFR Military Training Routes
 */
public class Airspace {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Airspace(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Retrieve all requested types of airspace located within given distance of location.
     * Retrieve selected types of airspace existing within given distance from a point. Request body parameters are:
     * * latitude:  WGS84 latitude coordinate of your selected point, in decimal degrees
     * * longitude:  WGS84 longitude coordinate of your selected point, in decimal degrees
     * * distance:  distance in meters (max allowed value is 25000)
     * * asptypes:  list of one or more airspace types you wish to retrieve. Allowed values are 'CAS', 'SUA', 'MAA', and 'MTR'.
     * 
     * Successful requests return a list of GeoJSON FeatureCollections, one for each Airspace type indicated in the request. Within each feature collection, there will be a separate Feature for each Airspace instance found. All Features will include a property indicating the *airspace_type*. Additional properties for each *airspace_type* are as follows:
     * * CAS (Controlled Airspace)
     *     - *name*
     *     - *cas_class*: B, C, D, or E2
     *     - *floor*: integer value in ft MSL
     *     - *ceiling*: integer value in ft MSL
     *     - *lannc*: true/false indicating whether or not authorization for this airspace may be obtained via LAANC
     * * SUA (Special Use Airspace)
     *     - *name*
     *     - *sua_type*: AA = Alert Area, MOA = Military Operations Area, NSA = National Security Area, PA = Prohibited Area, RA = Restricted Area, WA = Warning Area
     *     - *floor*: lower limit of the airspace
     *     - *floor_uom*: unit of measure used for the numeric floor value: FT (feet) or FL (flight level)
     *     - *floor_ref*: reference level used for the numeric floor value: AGL, MSL, or STD (standard atmosphere, used for flight level values)
     *     - *ceiling*: upper limit of the airspace
     *     - *ceiling_uom*: unit of measure used for the numeric floor value: FT (feet) or FL (flight level)
     *     - *ceiling_ref*: reference level used for the numeric ceiling value: AGL, MSL, or STD (standard atmosphere, used for flight level values)
     *     - *ceiling_ref*: reference level used for the numeric ceiling value: AGL, MSL, or STD (standard atmosphere, used for flight level values)
     *     - *schedule*: default activation days/times (other times by NOTAM)
     * * MAA (Miscellaneous Activity Area)
     *     - *name*
     *     - *maa_type*: one of the following - ULTRALIGHT, PARACHUTE JUMP AREA, AEROBATIC PRACTICE, GLIDER, HANG GLIDER, SPACE LAUNCH ACTIVITY
     *     - *use_times*: textual description of days/times when activity in the area should be expected
     * * MTR (Military Training Route)
     *     - *name*
     *     - *use_times*: textual description of days/times when MTR is active/hot
     *     - *terrain_following*: boolean value indicating whether terrain following activity occurs on the route
     *     - *max_extent_nm*: maximum distance that aircraft can deviate from route centerline
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AspByDistanceUsV1AirspaceDistanceQueryPostResponse aspByDistanceUsV1AirspaceDistanceQueryPost(org.openapis.openapi.models.operations.AspByDistanceUsV1AirspaceDistanceQueryPostRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/us/v1/airspace/distance-query");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "airspaceByDistance", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AspByDistanceUsV1AirspaceDistanceQueryPostResponse res = new org.openapis.openapi.models.operations.AspByDistanceUsV1AirspaceDistanceQueryPostResponse(contentType, httpRes.statusCode()) {{
            airspaceDistanceResponse = null;
            httpValidationError = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AirspaceDistanceResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AirspaceDistanceResponse.class);
                res.airspaceDistanceResponse = out;
            }
        }
        else if (httpRes.statusCode() == 422) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.HTTPValidationError out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.HTTPValidationError.class);
                res.httpValidationError = out;
            }
        }

        return res;
    }

    /**
     * Retrieve all requested types of airspace located within given GeoJSON Polygon.
     * Retrieve selected types of airspace located within given area. Request body parameters are:
     * * poly:  [GeoJSON Polygon](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the area. Max allowed area is 1000 km^2.
     * * asptypes:  list of one or more airspace types you wish to retrieve. Allowed values are 'CAS', 'SUA', 'MAA', and 'MTR'.
     * 
     * Successful requests return a list of GeoJSON FeatureCollections, one for each Airspace type indicated in the request. Within each feature collection, there will be a separate Feature for each Airspace instance found. All Features will include a property indicating the *airspace_type*. Additional properties for each *airspace_type* are as follows:
     * * CAS (Controlled Airspace)
     *     - *name*
     *     - *cas_class*: B, C, D, or E2
     *     - *floor*: integer value in ft MSL
     *     - *ceiling*: integer value in ft MSL
     *     - *lannc*: true/false indicating whether or not authorization for this airspace may be obtained via LAANC
     * * SUA (Special Use Airspace)
     *     - *name*
     *     - *sua_type*: AA = Alert Area, MOA = Military Operations Area, NSA = National Security Area, PA = Prohibited Area, RA = Restricted Area, WA = Warning Area
     *     - *floor*: lower limit of the airspace
     *     - *floor_uom*: unit of measure used for the numeric floor value: FT (feet) or FL (flight level)
     *     - *floor_ref*: reference level used for the numeric floor value: AGL, MSL, or STD (standard atmosphere, used for flight level values)
     *     - *ceiling*: upper limit of the airspace
     *     - *ceiling_uom*: unit of measure used for the numeric floor value: FT (feet) or FL (flight level)
     *     - *ceiling_ref*: reference level used for the numeric ceiling value: AGL, MSL, or STD (standard atmosphere, used for flight level values)
     *     - *schedule*: default activation days/times (other times by NOTAM)
     * * MAA (Miscellaneous Activity Area)
     *     - *name*
     *     - *maa_type*: one of the following - ULTRALIGHT, PARACHUTE JUMP AREA, AEROBATIC PRACTICE, GLIDER, HANG GLIDER, SPACE LAUNCH ACTIVITY
     *     - *use_times*: textual description of days/times when activity in the area should be expected
     * * MTR (Military Training Route)
     *     - *name*
     *     - *use_times*: textual description of days/times when MTR is active/hot
     *     - *terrain_following*: boolean value indicating whether terrain following activity occurs on the route
     *     - *max_extent_nm*: maximum distance that aircraft can deviate from route centerline
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AspByPolyUsV1AirspacePolygonQueryPostResponse aspByPolyUsV1AirspacePolygonQueryPost(org.openapis.openapi.models.operations.AspByPolyUsV1AirspacePolygonQueryPostRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/us/v1/airspace/polygon-query");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "airspaceByPolygon", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AspByPolyUsV1AirspacePolygonQueryPostResponse res = new org.openapis.openapi.models.operations.AspByPolyUsV1AirspacePolygonQueryPostResponse(contentType, httpRes.statusCode()) {{
            airspacePolyResponse = null;
            httpValidationError = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AirspacePolyResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AirspacePolyResponse.class);
                res.airspacePolyResponse = out;
            }
        }
        else if (httpRes.statusCode() == 422) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.HTTPValidationError out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.HTTPValidationError.class);
                res.httpValidationError = out;
            }
        }

        return res;
    }

    /**
     * Retrieve all requested types of airspace traversed by route.
     * Retrieve selected types of airspace traversed by route. Request body parameters are:
     * * route:  [GeoJSON Linestring](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the route. Max allowed length is 50 km.
     * * asptypes:  list of one or more airspace types you wish to retrieve. Allowed values are 'CAS', 'SUA', 'MAA', and 'MTR'.
     * 
     * Successful requests return a list of GeoJSON FeatureCollections, one for each Airspace type indicated in the request. Within each feature collection, there will be a separate Feature for each Airspace instance found. All Features will include a property indicating the *airspace_type*. Additional properties for each *airspace_type* are as follows:
     * * CAS (Controlled Airspace)
     *     - *name*
     *     - *cas_class*: B, C, D, or E2
     *     - *floor*: integer value in ft MSL
     *     - *ceiling*: integer value in ft MSL
     *     - *lannc*: true/false indicating whether or not authorization for this airspace may be obtained via LAANC
     * * SUA (Special Use Airspace)
     *     - *name*
     *     - *sua_type*: AA = Alert Area, MOA = Military Operations Area, NSA = National Security Area, PA = Prohibited Area, RA = Restricted Area, WA = Warning Area
     *     - *floor*: lower limit of the airspace
     *     - *floor_uom*: unit of measure used for the numeric floor value: FT (feet) or FL (flight level)
     *     - *floor_ref*: reference level used for the numeric floor value: AGL, MSL, or STD (standard atmosphere, used for flight level values)
     *     - *ceiling*: upper limit of the airspace
     *     - *ceiling_uom*: unit of measure used for the numeric floor value: FT (feet) or FL (flight level)
     *     - *ceiling_ref*: reference level used for the numeric ceiling value: AGL, MSL, or STD (standard atmosphere, used for flight level values)
     *     - *schedule*: default activation days/times (other times by NOTAM)
     * * MAA (Miscellaneous Activity Area)
     *     - *name*
     *     - *maa_type*: one of the following - ULTRALIGHT, PARACHUTE JUMP AREA, AEROBATIC PRACTICE, GLIDER, HANG GLIDER, SPACE LAUNCH ACTIVITY
     *     - *use_times*: textual description of days/times when activity in the area should be expected
     * * MTR (Military Training Route)
     *     - *name*
     *     - *use_times*: textual description of days/times when MTR is active/hot
     *     - *terrain_following*: boolean value indicating whether terrain following activity occurs on the route
     *     - *max_extent_nm*: maximum distance that aircraft can deviate from route centerline
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AspByRouteUsV1AirspaceRouteQueryPostResponse aspByRouteUsV1AirspaceRouteQueryPost(org.openapis.openapi.models.operations.AspByRouteUsV1AirspaceRouteQueryPostRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/us/v1/airspace/route-query");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "airspaceByRoute", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AspByRouteUsV1AirspaceRouteQueryPostResponse res = new org.openapis.openapi.models.operations.AspByRouteUsV1AirspaceRouteQueryPostResponse(contentType, httpRes.statusCode()) {{
            airspaceRouteResponse = null;
            httpValidationError = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AirspaceRouteResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AirspaceRouteResponse.class);
                res.airspaceRouteResponse = out;
            }
        }
        else if (httpRes.statusCode() == 422) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.HTTPValidationError out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.HTTPValidationError.class);
                res.httpValidationError = out;
            }
        }

        return res;
    }
}