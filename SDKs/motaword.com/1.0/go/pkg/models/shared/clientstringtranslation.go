// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type ClientStringTranslationStateEnum string

const (
	ClientStringTranslationStateEnumTranslated ClientStringTranslationStateEnum = "Translated"
	ClientStringTranslationStateEnumApproved   ClientStringTranslationStateEnum = "Approved"
)

func (e ClientStringTranslationStateEnum) ToPointer() *ClientStringTranslationStateEnum {
	return &e
}

func (e *ClientStringTranslationStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Translated":
		fallthrough
	case "Approved":
		*e = ClientStringTranslationStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ClientStringTranslationStateEnum: %v", v)
	}
}

type ClientStringTranslation struct {
	Content *string `json:"content,omitempty"`
	// the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
	LastChanged    *time.Time                        `json:"last_changed,omitempty"`
	Resource       *string                           `json:"resource,omitempty"`
	ResourceID     *string                           `json:"resource_id,omitempty"`
	State          *ClientStringTranslationStateEnum `json:"state,omitempty"`
	TargetLanguage *string                           `json:"target_language,omitempty"`
}
