// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type CreateInvestorSecurity struct {
	APISecretKey string `security:"scheme,type=apiKey,subtype=header,name=x-api-key"`
}

type CreateInvestorRootTypeForInvestorCreationRequestAddress struct {
	AddressLine *string `json:"address_line,omitempty"`
	City        *string `json:"city,omitempty"`
	// 3 character country code inline with ISO 3166-1 alpha-3
	Country    string  `json:"country"`
	PostalCode string  `json:"postal_code"`
	State      *string `json:"state,omitempty"`
	StreetName *string `json:"street_name,omitempty"`
}

// CreateInvestorRootTypeForInvestorCreationRequestBankAccountsAccountStatusEnum - If not populated, will be defaulted to inactive
type CreateInvestorRootTypeForInvestorCreationRequestBankAccountsAccountStatusEnum string

const (
	CreateInvestorRootTypeForInvestorCreationRequestBankAccountsAccountStatusEnumActive   CreateInvestorRootTypeForInvestorCreationRequestBankAccountsAccountStatusEnum = "active"
	CreateInvestorRootTypeForInvestorCreationRequestBankAccountsAccountStatusEnumInactive CreateInvestorRootTypeForInvestorCreationRequestBankAccountsAccountStatusEnum = "inactive"
)

func (e *CreateInvestorRootTypeForInvestorCreationRequestBankAccountsAccountStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "active":
		fallthrough
	case "inactive":
		*e = CreateInvestorRootTypeForInvestorCreationRequestBankAccountsAccountStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateInvestorRootTypeForInvestorCreationRequestBankAccountsAccountStatusEnum: %s", s)
	}
}

// CreateInvestorRootTypeForInvestorCreationRequestBankAccountsDefaultAccountEnum - Only one account should be the default
type CreateInvestorRootTypeForInvestorCreationRequestBankAccountsDefaultAccountEnum string

const (
	CreateInvestorRootTypeForInvestorCreationRequestBankAccountsDefaultAccountEnumYes CreateInvestorRootTypeForInvestorCreationRequestBankAccountsDefaultAccountEnum = "yes"
	CreateInvestorRootTypeForInvestorCreationRequestBankAccountsDefaultAccountEnumNo  CreateInvestorRootTypeForInvestorCreationRequestBankAccountsDefaultAccountEnum = "no"
)

func (e *CreateInvestorRootTypeForInvestorCreationRequestBankAccountsDefaultAccountEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "yes":
		fallthrough
	case "no":
		*e = CreateInvestorRootTypeForInvestorCreationRequestBankAccountsDefaultAccountEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateInvestorRootTypeForInvestorCreationRequestBankAccountsDefaultAccountEnum: %s", s)
	}
}

type CreateInvestorRootTypeForInvestorCreationRequestBankAccounts struct {
	AccountName string `json:"account_name"`
	// If not populated, will be defaulted to inactive
	AccountStatus *CreateInvestorRootTypeForInvestorCreationRequestBankAccountsAccountStatusEnum `json:"account_status,omitempty"`
	// Unique for the investor
	BankAccountNumber         string  `json:"bank_account_number"`
	BuildingSocietyRollNumber *string `json:"building_society_roll_number,omitempty"`
	// Only one account should be the default
	DefaultAccount CreateInvestorRootTypeForInvestorCreationRequestBankAccountsDefaultAccountEnum `json:"default_account"`
	SortCode       *string                                                                        `json:"sort_code,omitempty"`
}

type CreateInvestorRootTypeForInvestorCreationRequestDateOfBirth struct {
	// two digit string `DD`
	Day string `json:"day"`
	// two digit string `MM`
	Month string `json:"month"`
	// four digit string `YYYY`
	Year string `json:"year"`
}

type CreateInvestorRootTypeForInvestorCreationRequestDealingStatusEnum string

const (
	CreateInvestorRootTypeForInvestorCreationRequestDealingStatusEnumInactive CreateInvestorRootTypeForInvestorCreationRequestDealingStatusEnum = "inactive"
	CreateInvestorRootTypeForInvestorCreationRequestDealingStatusEnumActive   CreateInvestorRootTypeForInvestorCreationRequestDealingStatusEnum = "active"
)

func (e *CreateInvestorRootTypeForInvestorCreationRequestDealingStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "inactive":
		fallthrough
	case "active":
		*e = CreateInvestorRootTypeForInvestorCreationRequestDealingStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateInvestorRootTypeForInvestorCreationRequestDealingStatusEnum: %s", s)
	}
}

// CreateInvestorRootTypeForInvestorCreationRequestEmploymentStatusEnum - Status of an investor best describes their personal circumstances.
type CreateInvestorRootTypeForInvestorCreationRequestEmploymentStatusEnum string

const (
	CreateInvestorRootTypeForInvestorCreationRequestEmploymentStatusEnumEmployed                CreateInvestorRootTypeForInvestorCreationRequestEmploymentStatusEnum = "employed"
	CreateInvestorRootTypeForInvestorCreationRequestEmploymentStatusEnumSelfEmployed            CreateInvestorRootTypeForInvestorCreationRequestEmploymentStatusEnum = "self_employed"
	CreateInvestorRootTypeForInvestorCreationRequestEmploymentStatusEnumPensioner               CreateInvestorRootTypeForInvestorCreationRequestEmploymentStatusEnum = "pensioner"
	CreateInvestorRootTypeForInvestorCreationRequestEmploymentStatusEnumChildUnder16            CreateInvestorRootTypeForInvestorCreationRequestEmploymentStatusEnum = "child_under_16"
	CreateInvestorRootTypeForInvestorCreationRequestEmploymentStatusEnumInFullTimeEducation     CreateInvestorRootTypeForInvestorCreationRequestEmploymentStatusEnum = "in_full_time_education"
	CreateInvestorRootTypeForInvestorCreationRequestEmploymentStatusEnumUnemployed              CreateInvestorRootTypeForInvestorCreationRequestEmploymentStatusEnum = "unemployed"
	CreateInvestorRootTypeForInvestorCreationRequestEmploymentStatusEnumCaringForAPersonOver16  CreateInvestorRootTypeForInvestorCreationRequestEmploymentStatusEnum = "caring_for_a_person_over_16"
	CreateInvestorRootTypeForInvestorCreationRequestEmploymentStatusEnumCaringForAPersonUnder16 CreateInvestorRootTypeForInvestorCreationRequestEmploymentStatusEnum = "caring_for_a_person_under_16"
	CreateInvestorRootTypeForInvestorCreationRequestEmploymentStatusEnumOther                   CreateInvestorRootTypeForInvestorCreationRequestEmploymentStatusEnum = "other"
)

func (e *CreateInvestorRootTypeForInvestorCreationRequestEmploymentStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "employed":
		fallthrough
	case "self_employed":
		fallthrough
	case "pensioner":
		fallthrough
	case "child_under_16":
		fallthrough
	case "in_full_time_education":
		fallthrough
	case "unemployed":
		fallthrough
	case "caring_for_a_person_over_16":
		fallthrough
	case "caring_for_a_person_under_16":
		fallthrough
	case "other":
		*e = CreateInvestorRootTypeForInvestorCreationRequestEmploymentStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateInvestorRootTypeForInvestorCreationRequestEmploymentStatusEnum: %s", s)
	}
}

type CreateInvestorRootTypeForInvestorCreationRequestExpressionOfWishSippBeneficiaries struct {
	Address   string  `json:"address"`
	Email     *string `json:"email,omitempty"`
	FirstName string  `json:"first_name"`
	LastName  string  `json:"last_name"`
	// Percentage of assets that will be allocated to the beneficiary
	Percentage  string  `json:"percentage"`
	PhoneNumber *string `json:"phone_number,omitempty"`
	TaxID       *string `json:"tax_id,omitempty"`
	Title       *string `json:"title,omitempty"`
}

type CreateInvestorRootTypeForInvestorCreationRequestExpressionOfWishSippNominees struct {
	Address   string  `json:"address"`
	Email     *string `json:"email,omitempty"`
	FirstName string  `json:"first_name"`
	LastName  string  `json:"last_name"`
	// Percentage of assets that will be allocated to the nominee
	Percentage  string  `json:"percentage"`
	PhoneNumber *string `json:"phone_number,omitempty"`
	TaxID       *string `json:"tax_id,omitempty"`
	Title       *string `json:"title,omitempty"`
}

// CreateInvestorRootTypeForInvestorCreationRequestExpressionOfWish - Beneficiary and nominee list of the expression of wish.
type CreateInvestorRootTypeForInvestorCreationRequestExpressionOfWish struct {
	// Beneficiaries list of the expression of wish
	SippBeneficiaries []CreateInvestorRootTypeForInvestorCreationRequestExpressionOfWishSippBeneficiaries `json:"sipp_beneficiaries,omitempty"`
	// Nominees list of the expression of wish
	SippNominees []CreateInvestorRootTypeForInvestorCreationRequestExpressionOfWishSippNominees `json:"sipp_nominees,omitempty"`
}

type CreateInvestorRootTypeForInvestorCreationRequestIDNumbers struct {
	IDNumber string `json:"id_number"`
	IDType   string `json:"id_type"`
}

type CreateInvestorRootTypeForInvestorCreationRequestKycAmlStatusEnum string

const (
	CreateInvestorRootTypeForInvestorCreationRequestKycAmlStatusEnumSubmitted      CreateInvestorRootTypeForInvestorCreationRequestKycAmlStatusEnum = "submitted"
	CreateInvestorRootTypeForInvestorCreationRequestKycAmlStatusEnumKycFailedError CreateInvestorRootTypeForInvestorCreationRequestKycAmlStatusEnum = "kyc_failed_error"
	CreateInvestorRootTypeForInvestorCreationRequestKycAmlStatusEnumPending        CreateInvestorRootTypeForInvestorCreationRequestKycAmlStatusEnum = "pending"
	CreateInvestorRootTypeForInvestorCreationRequestKycAmlStatusEnumClear          CreateInvestorRootTypeForInvestorCreationRequestKycAmlStatusEnum = "clear"
	CreateInvestorRootTypeForInvestorCreationRequestKycAmlStatusEnumNotStarted     CreateInvestorRootTypeForInvestorCreationRequestKycAmlStatusEnum = "not_started"
)

func (e *CreateInvestorRootTypeForInvestorCreationRequestKycAmlStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "submitted":
		fallthrough
	case "kyc_failed_error":
		fallthrough
	case "pending":
		fallthrough
	case "clear":
		fallthrough
	case "not_started":
		*e = CreateInvestorRootTypeForInvestorCreationRequestKycAmlStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateInvestorRootTypeForInvestorCreationRequestKycAmlStatusEnum: %s", s)
	}
}

// CreateInvestorRootTypeForInvestorCreationRequestLtaProtectionDetailsLtaProtectionTypeEnum - primary=Primary protection, enhanced=Enhanced protection, fp12=Fixed protection 2012, fp14=Fixed protection 2014, fp16=Fixed protection 2016, ip14=Individual protection 2014, ip16=Individual protection 2016
type CreateInvestorRootTypeForInvestorCreationRequestLtaProtectionDetailsLtaProtectionTypeEnum string

const (
	CreateInvestorRootTypeForInvestorCreationRequestLtaProtectionDetailsLtaProtectionTypeEnumPrimary  CreateInvestorRootTypeForInvestorCreationRequestLtaProtectionDetailsLtaProtectionTypeEnum = "primary"
	CreateInvestorRootTypeForInvestorCreationRequestLtaProtectionDetailsLtaProtectionTypeEnumEnhanced CreateInvestorRootTypeForInvestorCreationRequestLtaProtectionDetailsLtaProtectionTypeEnum = "enhanced"
	CreateInvestorRootTypeForInvestorCreationRequestLtaProtectionDetailsLtaProtectionTypeEnumFp12     CreateInvestorRootTypeForInvestorCreationRequestLtaProtectionDetailsLtaProtectionTypeEnum = "fp12"
	CreateInvestorRootTypeForInvestorCreationRequestLtaProtectionDetailsLtaProtectionTypeEnumFp14     CreateInvestorRootTypeForInvestorCreationRequestLtaProtectionDetailsLtaProtectionTypeEnum = "fp14"
	CreateInvestorRootTypeForInvestorCreationRequestLtaProtectionDetailsLtaProtectionTypeEnumIp14     CreateInvestorRootTypeForInvestorCreationRequestLtaProtectionDetailsLtaProtectionTypeEnum = "ip14"
	CreateInvestorRootTypeForInvestorCreationRequestLtaProtectionDetailsLtaProtectionTypeEnumFp16     CreateInvestorRootTypeForInvestorCreationRequestLtaProtectionDetailsLtaProtectionTypeEnum = "fp16"
	CreateInvestorRootTypeForInvestorCreationRequestLtaProtectionDetailsLtaProtectionTypeEnumIp16     CreateInvestorRootTypeForInvestorCreationRequestLtaProtectionDetailsLtaProtectionTypeEnum = "ip16"
)

func (e *CreateInvestorRootTypeForInvestorCreationRequestLtaProtectionDetailsLtaProtectionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "primary":
		fallthrough
	case "enhanced":
		fallthrough
	case "fp12":
		fallthrough
	case "fp14":
		fallthrough
	case "ip14":
		fallthrough
	case "fp16":
		fallthrough
	case "ip16":
		*e = CreateInvestorRootTypeForInvestorCreationRequestLtaProtectionDetailsLtaProtectionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateInvestorRootTypeForInvestorCreationRequestLtaProtectionDetailsLtaProtectionTypeEnum: %s", s)
	}
}

type CreateInvestorRootTypeForInvestorCreationRequestLtaProtectionDetails struct {
	// Protected lifetime allowance of the investor. Required when the lta_protection_type is ip14 or ip16.
	LtaIndividualProtectionAmount *string `json:"lta_individual_protection_amount,omitempty"`
	// Primary protection factor of the investor. Required only when the lta_protection_type is primary.
	LtaPrimaryProtectionFactor *string `json:"lta_primary_protection_factor,omitempty"`
	// Protection notification number issued by HMRC. Required for protection from 2016 onwards. Required when the lta_protection_type is fp14 or ip16.
	LtaProtectionNotificationNumber *string `json:"lta_protection_notification_number,omitempty"`
	// Scheme administrator reference issued by HMRC. Required for protection from 2016 onwards. Required when the lta_protection_type is fp14 or ip16.
	LtaProtectionSchemeAdministratorReference *string `json:"lta_protection_scheme_administrator_reference,omitempty"`
	// primary=Primary protection, enhanced=Enhanced protection, fp12=Fixed protection 2012, fp14=Fixed protection 2014, fp16=Fixed protection 2016, ip14=Individual protection 2014, ip16=Individual protection 2016
	LtaProtectionType CreateInvestorRootTypeForInvestorCreationRequestLtaProtectionDetailsLtaProtectionTypeEnum `json:"lta_protection_type"`
}

// CreateInvestorRootTypeForInvestorCreationRequestTaxResidenceEnum - Residence of the investor for tax purposes. (for example, to claim relief at source) GB-ENG=England GB-NIR=Northern Ireland GB-SCT=Scotland GB-WLS=Wales.
type CreateInvestorRootTypeForInvestorCreationRequestTaxResidenceEnum string

const (
	CreateInvestorRootTypeForInvestorCreationRequestTaxResidenceEnumGbEng CreateInvestorRootTypeForInvestorCreationRequestTaxResidenceEnum = "GB-ENG"
	CreateInvestorRootTypeForInvestorCreationRequestTaxResidenceEnumGbNir CreateInvestorRootTypeForInvestorCreationRequestTaxResidenceEnum = "GB-NIR"
	CreateInvestorRootTypeForInvestorCreationRequestTaxResidenceEnumGbSct CreateInvestorRootTypeForInvestorCreationRequestTaxResidenceEnum = "GB-SCT"
	CreateInvestorRootTypeForInvestorCreationRequestTaxResidenceEnumGbWls CreateInvestorRootTypeForInvestorCreationRequestTaxResidenceEnum = "GB-WLS"
)

func (e *CreateInvestorRootTypeForInvestorCreationRequestTaxResidenceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "GB-ENG":
		fallthrough
	case "GB-NIR":
		fallthrough
	case "GB-SCT":
		fallthrough
	case "GB-WLS":
		*e = CreateInvestorRootTypeForInvestorCreationRequestTaxResidenceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateInvestorRootTypeForInvestorCreationRequestTaxResidenceEnum: %s", s)
	}
}

// CreateInvestorRootTypeForInvestorCreationRequestInput - JSON for the Investor creation request resource type
type CreateInvestorRootTypeForInvestorCreationRequestInput struct {
	Address       CreateInvestorRootTypeForInvestorCreationRequestAddress            `json:"address"`
	BankAccounts  []CreateInvestorRootTypeForInvestorCreationRequestBankAccounts     `json:"bank_accounts,omitempty"`
	DateOfBirth   CreateInvestorRootTypeForInvestorCreationRequestDateOfBirth        `json:"date_of_birth"`
	DealingStatus *CreateInvestorRootTypeForInvestorCreationRequestDealingStatusEnum `json:"dealing_status,omitempty"`
	Email         *string                                                            `json:"email,omitempty"`
	// Status of an investor best describes their personal circumstances.
	EmploymentStatus *CreateInvestorRootTypeForInvestorCreationRequestEmploymentStatusEnum `json:"employment_status,omitempty"`
	// Beneficiary and nominee list of the expression of wish.
	ExpressionOfWish *CreateInvestorRootTypeForInvestorCreationRequestExpressionOfWish `json:"expression_of_wish,omitempty"`
	FirstName        string                                                            `json:"first_name"`
	Gender           *string                                                           `json:"gender,omitempty"`
	HomeNumber       *string                                                           `json:"home_number,omitempty"`
	IDNumbers        []CreateInvestorRootTypeForInvestorCreationRequestIDNumbers       `json:"id_numbers,omitempty"`
	InvestorID       string                                                            `json:"investor_id"`
	KycAmlStatus     *CreateInvestorRootTypeForInvestorCreationRequestKycAmlStatusEnum `json:"kyc_aml_status,omitempty"`
	LastName         string                                                            `json:"last_name"`
	// Additional details of the lifetime allowance protections of the investor.
	LtaProtectionDetails []CreateInvestorRootTypeForInvestorCreationRequestLtaProtectionDetails `json:"lta_protection_details,omitempty"`
	MifidTaxID           *string                                                                `json:"mifid_tax_id,omitempty"`
	MobileNumber         *string                                                                `json:"mobile_number,omitempty"`
	// Whether the investor has triggered the Money Purchase Annual Allowance.
	MpaaTriggered *bool `json:"mpaa_triggered,omitempty"`
	// Date of triggering the Money Purchase Annual Allowance. This is only required if mpaa_triggered is true.
	MpaaTriggeredDate *string `json:"mpaa_triggered_date,omitempty"`
	// 3 character country code inline with ISO 3166-1 alpha-3
	Nationality  string  `json:"nationality"`
	OfficeNumber *string `json:"office_number,omitempty"`
	// Intended retirement age of the investor.
	RetirementAge *float64 `json:"retirement_age,omitempty"`
	TaxID         string   `json:"tax_id"`
	// Residence of the investor for tax purposes. (for example, to claim relief at source) GB-ENG=England GB-NIR=Northern Ireland GB-SCT=Scotland GB-WLS=Wales.
	TaxResidence          *CreateInvestorRootTypeForInvestorCreationRequestTaxResidenceEnum `json:"tax_residence,omitempty"`
	TaxResidencyCompliant bool                                                              `json:"tax_residency_compliant"`
	Title                 *string                                                           `json:"title,omitempty"`
}

type CreateInvestorRequest struct {
	RequestBody CreateInvestorRootTypeForInvestorCreationRequestInput `request:"mediaType=application/json"`
	// ApiSecretKey
	XAPIKey string `header:"style=simple,explode=false,name=x-api-key"`
}

// CreateInvestor500ApplicationJSON - System error. Retry later. If the error persist, contact WOS support
type CreateInvestor500ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// CreateInvestor429ApplicationJSON - You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
type CreateInvestor429ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// CreateInvestor403ApplicationJSON - Your authentication information is missing or invalid. Please check the keys are properly set and its correct
type CreateInvestor403ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// CreateInvestor401ApplicationJSON - You do not have permissions to access this resource.
type CreateInvestor401ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// CreateInvestor400ApplicationJSON - Request is not complete and may have one or more validations errors. Please check the error message and the code
type CreateInvestor400ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

type CreateInvestorRootTypeForInvestorCreationResponseAddress struct {
	AddressLine *string `json:"address_line,omitempty"`
	City        *string `json:"city,omitempty"`
	// 3 character country code inline with ISO 3166-1 alpha-3
	Country    string  `json:"country"`
	PostalCode string  `json:"postal_code"`
	State      *string `json:"state,omitempty"`
	StreetName *string `json:"street_name,omitempty"`
}

// CreateInvestorRootTypeForInvestorCreationResponseBankAccountsAccountStatusEnum - If not populated, will be defaulted to inactive
type CreateInvestorRootTypeForInvestorCreationResponseBankAccountsAccountStatusEnum string

const (
	CreateInvestorRootTypeForInvestorCreationResponseBankAccountsAccountStatusEnumActive   CreateInvestorRootTypeForInvestorCreationResponseBankAccountsAccountStatusEnum = "active"
	CreateInvestorRootTypeForInvestorCreationResponseBankAccountsAccountStatusEnumInactive CreateInvestorRootTypeForInvestorCreationResponseBankAccountsAccountStatusEnum = "inactive"
)

func (e *CreateInvestorRootTypeForInvestorCreationResponseBankAccountsAccountStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "active":
		fallthrough
	case "inactive":
		*e = CreateInvestorRootTypeForInvestorCreationResponseBankAccountsAccountStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateInvestorRootTypeForInvestorCreationResponseBankAccountsAccountStatusEnum: %s", s)
	}
}

// CreateInvestorRootTypeForInvestorCreationResponseBankAccountsDefaultAccountEnum - Only one account should be the default
type CreateInvestorRootTypeForInvestorCreationResponseBankAccountsDefaultAccountEnum string

const (
	CreateInvestorRootTypeForInvestorCreationResponseBankAccountsDefaultAccountEnumYes CreateInvestorRootTypeForInvestorCreationResponseBankAccountsDefaultAccountEnum = "yes"
	CreateInvestorRootTypeForInvestorCreationResponseBankAccountsDefaultAccountEnumNo  CreateInvestorRootTypeForInvestorCreationResponseBankAccountsDefaultAccountEnum = "no"
)

func (e *CreateInvestorRootTypeForInvestorCreationResponseBankAccountsDefaultAccountEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "yes":
		fallthrough
	case "no":
		*e = CreateInvestorRootTypeForInvestorCreationResponseBankAccountsDefaultAccountEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateInvestorRootTypeForInvestorCreationResponseBankAccountsDefaultAccountEnum: %s", s)
	}
}

type CreateInvestorRootTypeForInvestorCreationResponseBankAccountsStatusEnum string

const (
	CreateInvestorRootTypeForInvestorCreationResponseBankAccountsStatusEnumFailed  CreateInvestorRootTypeForInvestorCreationResponseBankAccountsStatusEnum = "failed"
	CreateInvestorRootTypeForInvestorCreationResponseBankAccountsStatusEnumSuccess CreateInvestorRootTypeForInvestorCreationResponseBankAccountsStatusEnum = "success"
)

func (e *CreateInvestorRootTypeForInvestorCreationResponseBankAccountsStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "failed":
		fallthrough
	case "success":
		*e = CreateInvestorRootTypeForInvestorCreationResponseBankAccountsStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateInvestorRootTypeForInvestorCreationResponseBankAccountsStatusEnum: %s", s)
	}
}

type CreateInvestorRootTypeForInvestorCreationResponseBankAccounts struct {
	AccountName string `json:"account_name"`
	// If not populated, will be defaulted to inactive
	AccountStatus *CreateInvestorRootTypeForInvestorCreationResponseBankAccountsAccountStatusEnum `json:"account_status,omitempty"`
	// system generated id
	BankAccountID *string `json:"bank_account_id,omitempty"`
	// Unique for the investor
	BankAccountNumber         string     `json:"bank_account_number"`
	BuildingSocietyRollNumber *string    `json:"building_society_roll_number,omitempty"`
	CreatedAt                 *time.Time `json:"created_at,omitempty"`
	// Only one account should be the default
	DefaultAccount CreateInvestorRootTypeForInvestorCreationResponseBankAccountsDefaultAccountEnum `json:"default_account"`
	// If the bank account creation failed
	ErrorMessage     *string                                                                  `json:"error_message,omitempty"`
	InvestorID       string                                                                   `json:"investor_id"`
	ReferenceVersion *int64                                                                   `json:"reference_version,omitempty"`
	SortCode         *string                                                                  `json:"sort_code,omitempty"`
	Status           *CreateInvestorRootTypeForInvestorCreationResponseBankAccountsStatusEnum `json:"status,omitempty"`
	UpdatedAt        *time.Time                                                               `json:"updated_at,omitempty"`
}

type CreateInvestorRootTypeForInvestorCreationResponseDateOfBirth struct {
	// two digit string `DD`
	Day *string `json:"day,omitempty"`
	// two digit string `MM`
	Month *string `json:"month,omitempty"`
	// four digit string `YYYY`
	Year *string `json:"year,omitempty"`
}

type CreateInvestorRootTypeForInvestorCreationResponseDealingStatusEnum string

const (
	CreateInvestorRootTypeForInvestorCreationResponseDealingStatusEnumInactive CreateInvestorRootTypeForInvestorCreationResponseDealingStatusEnum = "inactive"
	CreateInvestorRootTypeForInvestorCreationResponseDealingStatusEnumActive   CreateInvestorRootTypeForInvestorCreationResponseDealingStatusEnum = "active"
)

func (e *CreateInvestorRootTypeForInvestorCreationResponseDealingStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "inactive":
		fallthrough
	case "active":
		*e = CreateInvestorRootTypeForInvestorCreationResponseDealingStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateInvestorRootTypeForInvestorCreationResponseDealingStatusEnum: %s", s)
	}
}

type CreateInvestorRootTypeForInvestorCreationResponseEmploymentStatusEnum string

const (
	CreateInvestorRootTypeForInvestorCreationResponseEmploymentStatusEnumEmployed                CreateInvestorRootTypeForInvestorCreationResponseEmploymentStatusEnum = "employed"
	CreateInvestorRootTypeForInvestorCreationResponseEmploymentStatusEnumSelfEmployed            CreateInvestorRootTypeForInvestorCreationResponseEmploymentStatusEnum = "self_employed"
	CreateInvestorRootTypeForInvestorCreationResponseEmploymentStatusEnumPensioner               CreateInvestorRootTypeForInvestorCreationResponseEmploymentStatusEnum = "pensioner"
	CreateInvestorRootTypeForInvestorCreationResponseEmploymentStatusEnumChildUnder16            CreateInvestorRootTypeForInvestorCreationResponseEmploymentStatusEnum = "child_under_16"
	CreateInvestorRootTypeForInvestorCreationResponseEmploymentStatusEnumInFullTimeEducation     CreateInvestorRootTypeForInvestorCreationResponseEmploymentStatusEnum = "in_full_time_education"
	CreateInvestorRootTypeForInvestorCreationResponseEmploymentStatusEnumUnemployed              CreateInvestorRootTypeForInvestorCreationResponseEmploymentStatusEnum = "unemployed"
	CreateInvestorRootTypeForInvestorCreationResponseEmploymentStatusEnumCaringForAPersonOver16  CreateInvestorRootTypeForInvestorCreationResponseEmploymentStatusEnum = "caring_for_a_person_over_16"
	CreateInvestorRootTypeForInvestorCreationResponseEmploymentStatusEnumCaringForAPersonUnder16 CreateInvestorRootTypeForInvestorCreationResponseEmploymentStatusEnum = "caring_for_a_person_under_16"
	CreateInvestorRootTypeForInvestorCreationResponseEmploymentStatusEnumOther                   CreateInvestorRootTypeForInvestorCreationResponseEmploymentStatusEnum = "other"
)

func (e *CreateInvestorRootTypeForInvestorCreationResponseEmploymentStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "employed":
		fallthrough
	case "self_employed":
		fallthrough
	case "pensioner":
		fallthrough
	case "child_under_16":
		fallthrough
	case "in_full_time_education":
		fallthrough
	case "unemployed":
		fallthrough
	case "caring_for_a_person_over_16":
		fallthrough
	case "caring_for_a_person_under_16":
		fallthrough
	case "other":
		*e = CreateInvestorRootTypeForInvestorCreationResponseEmploymentStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateInvestorRootTypeForInvestorCreationResponseEmploymentStatusEnum: %s", s)
	}
}

type CreateInvestorRootTypeForInvestorCreationResponseExpressionOfWishSippBeneficiaries struct {
	Address     string  `json:"address"`
	Email       *string `json:"email,omitempty"`
	FirstName   string  `json:"first_name"`
	LastName    string  `json:"last_name"`
	Percentage  string  `json:"percentage"`
	PhoneNumber *string `json:"phone_number,omitempty"`
	TaxID       *string `json:"tax_id,omitempty"`
	Title       *string `json:"title,omitempty"`
}

type CreateInvestorRootTypeForInvestorCreationResponseExpressionOfWishSippNominees struct {
	Address     string  `json:"address"`
	Email       *string `json:"email,omitempty"`
	FirstName   string  `json:"first_name"`
	LastName    string  `json:"last_name"`
	Percentage  string  `json:"percentage"`
	PhoneNumber *string `json:"phone_number,omitempty"`
	TaxID       *string `json:"tax_id,omitempty"`
	Title       *string `json:"title,omitempty"`
}

type CreateInvestorRootTypeForInvestorCreationResponseExpressionOfWish struct {
	SippBeneficiaries []CreateInvestorRootTypeForInvestorCreationResponseExpressionOfWishSippBeneficiaries `json:"sipp_beneficiaries,omitempty"`
	SippNominees      []CreateInvestorRootTypeForInvestorCreationResponseExpressionOfWishSippNominees      `json:"sipp_nominees,omitempty"`
}

type CreateInvestorRootTypeForInvestorCreationResponseIDNumbers struct {
	IDNumber string `json:"id_number"`
	IDType   string `json:"id_type"`
}

type CreateInvestorRootTypeForInvestorCreationResponseKycAmlStatusEnum string

const (
	CreateInvestorRootTypeForInvestorCreationResponseKycAmlStatusEnumSubmitted      CreateInvestorRootTypeForInvestorCreationResponseKycAmlStatusEnum = "submitted"
	CreateInvestorRootTypeForInvestorCreationResponseKycAmlStatusEnumKycFailedError CreateInvestorRootTypeForInvestorCreationResponseKycAmlStatusEnum = "kyc_failed_error"
	CreateInvestorRootTypeForInvestorCreationResponseKycAmlStatusEnumPending        CreateInvestorRootTypeForInvestorCreationResponseKycAmlStatusEnum = "pending"
	CreateInvestorRootTypeForInvestorCreationResponseKycAmlStatusEnumClear          CreateInvestorRootTypeForInvestorCreationResponseKycAmlStatusEnum = "clear"
	CreateInvestorRootTypeForInvestorCreationResponseKycAmlStatusEnumNotStarted     CreateInvestorRootTypeForInvestorCreationResponseKycAmlStatusEnum = "not_started"
)

func (e *CreateInvestorRootTypeForInvestorCreationResponseKycAmlStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "submitted":
		fallthrough
	case "kyc_failed_error":
		fallthrough
	case "pending":
		fallthrough
	case "clear":
		fallthrough
	case "not_started":
		*e = CreateInvestorRootTypeForInvestorCreationResponseKycAmlStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateInvestorRootTypeForInvestorCreationResponseKycAmlStatusEnum: %s", s)
	}
}

type CreateInvestorRootTypeForInvestorCreationResponseLtaProtectionDetailsLtaProtectionTypeEnum string

const (
	CreateInvestorRootTypeForInvestorCreationResponseLtaProtectionDetailsLtaProtectionTypeEnumPrimary  CreateInvestorRootTypeForInvestorCreationResponseLtaProtectionDetailsLtaProtectionTypeEnum = "primary"
	CreateInvestorRootTypeForInvestorCreationResponseLtaProtectionDetailsLtaProtectionTypeEnumEnhanced CreateInvestorRootTypeForInvestorCreationResponseLtaProtectionDetailsLtaProtectionTypeEnum = "enhanced"
	CreateInvestorRootTypeForInvestorCreationResponseLtaProtectionDetailsLtaProtectionTypeEnumFp12     CreateInvestorRootTypeForInvestorCreationResponseLtaProtectionDetailsLtaProtectionTypeEnum = "fp12"
	CreateInvestorRootTypeForInvestorCreationResponseLtaProtectionDetailsLtaProtectionTypeEnumFp14     CreateInvestorRootTypeForInvestorCreationResponseLtaProtectionDetailsLtaProtectionTypeEnum = "fp14"
	CreateInvestorRootTypeForInvestorCreationResponseLtaProtectionDetailsLtaProtectionTypeEnumIp14     CreateInvestorRootTypeForInvestorCreationResponseLtaProtectionDetailsLtaProtectionTypeEnum = "ip14"
	CreateInvestorRootTypeForInvestorCreationResponseLtaProtectionDetailsLtaProtectionTypeEnumFp16     CreateInvestorRootTypeForInvestorCreationResponseLtaProtectionDetailsLtaProtectionTypeEnum = "fp16"
	CreateInvestorRootTypeForInvestorCreationResponseLtaProtectionDetailsLtaProtectionTypeEnumIp16     CreateInvestorRootTypeForInvestorCreationResponseLtaProtectionDetailsLtaProtectionTypeEnum = "ip16"
)

func (e *CreateInvestorRootTypeForInvestorCreationResponseLtaProtectionDetailsLtaProtectionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "primary":
		fallthrough
	case "enhanced":
		fallthrough
	case "fp12":
		fallthrough
	case "fp14":
		fallthrough
	case "ip14":
		fallthrough
	case "fp16":
		fallthrough
	case "ip16":
		*e = CreateInvestorRootTypeForInvestorCreationResponseLtaProtectionDetailsLtaProtectionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateInvestorRootTypeForInvestorCreationResponseLtaProtectionDetailsLtaProtectionTypeEnum: %s", s)
	}
}

type CreateInvestorRootTypeForInvestorCreationResponseLtaProtectionDetails struct {
	// Required when the lta_protection_type is ip14 or ip16.
	LtaIndividualProtectionAmount *string `json:"lta_individual_protection_amount,omitempty"`
	// Required only when the lta_protection_type is primary
	LtaPrimaryProtectionFactor *string `json:"lta_primary_protection_factor,omitempty"`
	// Required when the lta_protection_type is fp14 or ip16.
	LtaProtectionNotificationNumber *string `json:"lta_protection_notification_number,omitempty"`
	// Required when the lta_protection_type is fp14 or ip16.
	LtaProtectionSchemeAdministratorReference *string                                                                                    `json:"lta_protection_scheme_administrator_reference,omitempty"`
	LtaProtectionType                         CreateInvestorRootTypeForInvestorCreationResponseLtaProtectionDetailsLtaProtectionTypeEnum `json:"lta_protection_type"`
}

type CreateInvestorRootTypeForInvestorCreationResponseStatusEnum string

const (
	CreateInvestorRootTypeForInvestorCreationResponseStatusEnumKycPending CreateInvestorRootTypeForInvestorCreationResponseStatusEnum = "kyc_pending"
	CreateInvestorRootTypeForInvestorCreationResponseStatusEnumKycFailed  CreateInvestorRootTypeForInvestorCreationResponseStatusEnum = "kyc_failed"
	CreateInvestorRootTypeForInvestorCreationResponseStatusEnumInactive   CreateInvestorRootTypeForInvestorCreationResponseStatusEnum = "inactive"
	CreateInvestorRootTypeForInvestorCreationResponseStatusEnumActive     CreateInvestorRootTypeForInvestorCreationResponseStatusEnum = "active"
)

func (e *CreateInvestorRootTypeForInvestorCreationResponseStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "kyc_pending":
		fallthrough
	case "kyc_failed":
		fallthrough
	case "inactive":
		fallthrough
	case "active":
		*e = CreateInvestorRootTypeForInvestorCreationResponseStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateInvestorRootTypeForInvestorCreationResponseStatusEnum: %s", s)
	}
}

// CreateInvestorRootTypeForInvestorCreationResponseTaxResidenceEnum - Residence of the investor for tax purposes. (for example, to claim relief at source) GB-ENG=England GB-NIR=Northern Ireland GB-SCT=Scotland GB-WLS=Wales
type CreateInvestorRootTypeForInvestorCreationResponseTaxResidenceEnum string

const (
	CreateInvestorRootTypeForInvestorCreationResponseTaxResidenceEnumGbEng CreateInvestorRootTypeForInvestorCreationResponseTaxResidenceEnum = "GB-ENG"
	CreateInvestorRootTypeForInvestorCreationResponseTaxResidenceEnumGbNir CreateInvestorRootTypeForInvestorCreationResponseTaxResidenceEnum = "GB-NIR"
	CreateInvestorRootTypeForInvestorCreationResponseTaxResidenceEnumGbSct CreateInvestorRootTypeForInvestorCreationResponseTaxResidenceEnum = "GB-SCT"
	CreateInvestorRootTypeForInvestorCreationResponseTaxResidenceEnumGbWls CreateInvestorRootTypeForInvestorCreationResponseTaxResidenceEnum = "GB-WLS"
)

func (e *CreateInvestorRootTypeForInvestorCreationResponseTaxResidenceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "GB-ENG":
		fallthrough
	case "GB-NIR":
		fallthrough
	case "GB-SCT":
		fallthrough
	case "GB-WLS":
		*e = CreateInvestorRootTypeForInvestorCreationResponseTaxResidenceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateInvestorRootTypeForInvestorCreationResponseTaxResidenceEnum: %s", s)
	}
}

// CreateInvestorRootTypeForInvestorCreationResponse - JSON for the Investor creation response resource type
type CreateInvestorRootTypeForInvestorCreationResponse struct {
	Address                 CreateInvestorRootTypeForInvestorCreationResponseAddress                `json:"address"`
	BankAccounts            []CreateInvestorRootTypeForInvestorCreationResponseBankAccounts         `json:"bank_accounts,omitempty"`
	CreatedAt               *time.Time                                                              `json:"created_at,omitempty"`
	DateOfBirth             CreateInvestorRootTypeForInvestorCreationResponseDateOfBirth            `json:"date_of_birth"`
	DealingStatus           *CreateInvestorRootTypeForInvestorCreationResponseDealingStatusEnum     `json:"dealing_status,omitempty"`
	Email                   *string                                                                 `json:"email,omitempty"`
	EmploymentStatus        *CreateInvestorRootTypeForInvestorCreationResponseEmploymentStatusEnum  `json:"employment_status,omitempty"`
	ExpressionOfWish        *CreateInvestorRootTypeForInvestorCreationResponseExpressionOfWish      `json:"expression_of_wish,omitempty"`
	FirstName               string                                                                  `json:"first_name"`
	Gender                  *string                                                                 `json:"gender,omitempty"`
	HomeNumber              *string                                                                 `json:"home_number,omitempty"`
	IDNumbers               []CreateInvestorRootTypeForInvestorCreationResponseIDNumbers            `json:"id_numbers,omitempty"`
	InvestorID              string                                                                  `json:"investor_id"`
	KycAmlStatus            *CreateInvestorRootTypeForInvestorCreationResponseKycAmlStatusEnum      `json:"kyc_aml_status,omitempty"`
	KycAmlStatusLastUpdated *time.Time                                                              `json:"kyc_aml_status_last_updated,omitempty"`
	LastName                string                                                                  `json:"last_name"`
	LtaProtectionDetails    []CreateInvestorRootTypeForInvestorCreationResponseLtaProtectionDetails `json:"lta_protection_details,omitempty"`
	MifidTaxID              *string                                                                 `json:"mifid_tax_id,omitempty"`
	MobileNumber            *string                                                                 `json:"mobile_number,omitempty"`
	MpaaTriggered           *bool                                                                   `json:"mpaa_triggered,omitempty"`
	MpaaTriggeredDate       *string                                                                 `json:"mpaa_triggered_date,omitempty"`
	// 3 character country code inline with ISO 3166-1 alpha-3
	Nationality      string                                                       `json:"nationality"`
	OfficeNumber     *string                                                      `json:"office_number,omitempty"`
	ReferenceVersion *int64                                                       `json:"reference_version,omitempty"`
	RetirementAge    *float64                                                     `json:"retirement_age,omitempty"`
	Status           *CreateInvestorRootTypeForInvestorCreationResponseStatusEnum `json:"status,omitempty"`
	TaxID            string                                                       `json:"tax_id"`
	// Residence of the investor for tax purposes. (for example, to claim relief at source) GB-ENG=England GB-NIR=Northern Ireland GB-SCT=Scotland GB-WLS=Wales
	TaxResidence          *CreateInvestorRootTypeForInvestorCreationResponseTaxResidenceEnum `json:"tax_residence,omitempty"`
	TaxResidencyCompliant bool                                                               `json:"tax_residency_compliant"`
	Title                 *string                                                            `json:"title,omitempty"`
	UpdatedAt             *time.Time                                                         `json:"updated_at,omitempty"`
}

type CreateInvestorResponse struct {
	ContentType string
	// Resource created
	RootTypeForInvestorCreationResponse *CreateInvestorRootTypeForInvestorCreationResponse
	StatusCode                          int
	RawResponse                         *http.Response
	// Request is not complete and may have one or more validations errors. Please check the error message and the code
	CreateInvestor400ApplicationJSONObject *CreateInvestor400ApplicationJSON
	// You do not have permissions to access this resource.
	CreateInvestor401ApplicationJSONObject *CreateInvestor401ApplicationJSON
	// Your authentication information is missing or invalid. Please check the keys are properly set and its correct
	CreateInvestor403ApplicationJSONObject *CreateInvestor403ApplicationJSON
	// You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
	CreateInvestor429ApplicationJSONObject *CreateInvestor429ApplicationJSON
	// System error. Retry later. If the error persist, contact WOS support
	CreateInvestor500ApplicationJSONObject *CreateInvestor500ApplicationJSON
}
