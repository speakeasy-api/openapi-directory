/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AuditFindingSeverityEnum } from "./auditfindingseverityenum";
import { NonCompliantResource } from "./noncompliantresource";
import { RelatedResource } from "./relatedresource";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The findings (results) of the audit.
 */
export class AuditFinding extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "checkName" })
  checkName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "findingId" })
  findingId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "findingTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  findingTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "isSuppressed" })
  isSuppressed?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "nonCompliantResource" })
  @Type(() => NonCompliantResource)
  nonCompliantResource?: NonCompliantResource;

  @SpeakeasyMetadata()
  @Expose({ name: "reasonForNonCompliance" })
  reasonForNonCompliance?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "reasonForNonComplianceCode" })
  reasonForNonComplianceCode?: string;

  @SpeakeasyMetadata({ elemType: RelatedResource })
  @Expose({ name: "relatedResources" })
  @Type(() => RelatedResource)
  relatedResources?: RelatedResource[];

  @SpeakeasyMetadata()
  @Expose({ name: "severity" })
  severity?: AuditFindingSeverityEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "taskId" })
  taskId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "taskStartTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  taskStartTime?: Date;
}
