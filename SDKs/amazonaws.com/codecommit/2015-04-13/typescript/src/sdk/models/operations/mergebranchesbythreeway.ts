/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export enum MergeBranchesByThreeWayXAmzTargetEnum {
  CodeCommit20150413MergeBranchesByThreeWay = "CodeCommit_20150413.MergeBranchesByThreeWay",
}

export class MergeBranchesByThreeWayRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  mergeBranchesByThreeWayInput: shared.MergeBranchesByThreeWayInput;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Target",
  })
  xAmzTarget: MergeBranchesByThreeWayXAmzTargetEnum;
}

export class MergeBranchesByThreeWayResponse extends SpeakeasyBase {
  /**
   * BranchDoesNotExistException
   */
  @SpeakeasyMetadata()
  branchDoesNotExistException?: any;

  /**
   * BranchNameIsTagNameException
   */
  @SpeakeasyMetadata()
  branchNameIsTagNameException?: any;

  /**
   * BranchNameRequiredException
   */
  @SpeakeasyMetadata()
  branchNameRequiredException?: any;

  /**
   * CommitDoesNotExistException
   */
  @SpeakeasyMetadata()
  commitDoesNotExistException?: any;

  /**
   * CommitMessageLengthExceededException
   */
  @SpeakeasyMetadata()
  commitMessageLengthExceededException?: any;

  /**
   * CommitRequiredException
   */
  @SpeakeasyMetadata()
  commitRequiredException?: any;

  /**
   * ConcurrentReferenceUpdateException
   */
  @SpeakeasyMetadata()
  concurrentReferenceUpdateException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * EncryptionIntegrityChecksFailedException
   */
  @SpeakeasyMetadata()
  encryptionIntegrityChecksFailedException?: any;

  /**
   * EncryptionKeyAccessDeniedException
   */
  @SpeakeasyMetadata()
  encryptionKeyAccessDeniedException?: any;

  /**
   * EncryptionKeyDisabledException
   */
  @SpeakeasyMetadata()
  encryptionKeyDisabledException?: any;

  /**
   * EncryptionKeyNotFoundException
   */
  @SpeakeasyMetadata()
  encryptionKeyNotFoundException?: any;

  /**
   * EncryptionKeyUnavailableException
   */
  @SpeakeasyMetadata()
  encryptionKeyUnavailableException?: any;

  /**
   * FileContentSizeLimitExceededException
   */
  @SpeakeasyMetadata()
  fileContentSizeLimitExceededException?: any;

  /**
   * FileModeRequiredException
   */
  @SpeakeasyMetadata()
  fileModeRequiredException?: any;

  /**
   * FolderContentSizeLimitExceededException
   */
  @SpeakeasyMetadata()
  folderContentSizeLimitExceededException?: any;

  /**
   * InvalidBranchNameException
   */
  @SpeakeasyMetadata()
  invalidBranchNameException?: any;

  /**
   * InvalidCommitException
   */
  @SpeakeasyMetadata()
  invalidCommitException?: any;

  /**
   * InvalidConflictDetailLevelException
   */
  @SpeakeasyMetadata()
  invalidConflictDetailLevelException?: any;

  /**
   * InvalidConflictResolutionException
   */
  @SpeakeasyMetadata()
  invalidConflictResolutionException?: any;

  /**
   * InvalidConflictResolutionStrategyException
   */
  @SpeakeasyMetadata()
  invalidConflictResolutionStrategyException?: any;

  /**
   * InvalidEmailException
   */
  @SpeakeasyMetadata()
  invalidEmailException?: any;

  /**
   * InvalidFileModeException
   */
  @SpeakeasyMetadata()
  invalidFileModeException?: any;

  /**
   * InvalidPathException
   */
  @SpeakeasyMetadata()
  invalidPathException?: any;

  /**
   * InvalidReplacementContentException
   */
  @SpeakeasyMetadata()
  invalidReplacementContentException?: any;

  /**
   * InvalidReplacementTypeException
   */
  @SpeakeasyMetadata()
  invalidReplacementTypeException?: any;

  /**
   * InvalidRepositoryNameException
   */
  @SpeakeasyMetadata()
  invalidRepositoryNameException?: any;

  /**
   * InvalidTargetBranchException
   */
  @SpeakeasyMetadata()
  invalidTargetBranchException?: any;

  /**
   * ManualMergeRequiredException
   */
  @SpeakeasyMetadata()
  manualMergeRequiredException?: any;

  /**
   * MaximumConflictResolutionEntriesExceededException
   */
  @SpeakeasyMetadata()
  maximumConflictResolutionEntriesExceededException?: any;

  /**
   * MaximumFileContentToLoadExceededException
   */
  @SpeakeasyMetadata()
  maximumFileContentToLoadExceededException?: any;

  /**
   * MaximumItemsToCompareExceededException
   */
  @SpeakeasyMetadata()
  maximumItemsToCompareExceededException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  mergeBranchesByThreeWayOutput?: shared.MergeBranchesByThreeWayOutput;

  /**
   * MultipleConflictResolutionEntriesException
   */
  @SpeakeasyMetadata()
  multipleConflictResolutionEntriesException?: any;

  /**
   * NameLengthExceededException
   */
  @SpeakeasyMetadata()
  nameLengthExceededException?: any;

  /**
   * PathRequiredException
   */
  @SpeakeasyMetadata()
  pathRequiredException?: any;

  /**
   * ReplacementContentRequiredException
   */
  @SpeakeasyMetadata()
  replacementContentRequiredException?: any;

  /**
   * ReplacementTypeRequiredException
   */
  @SpeakeasyMetadata()
  replacementTypeRequiredException?: any;

  /**
   * RepositoryDoesNotExistException
   */
  @SpeakeasyMetadata()
  repositoryDoesNotExistException?: any;

  /**
   * RepositoryNameRequiredException
   */
  @SpeakeasyMetadata()
  repositoryNameRequiredException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * TipsDivergenceExceededException
   */
  @SpeakeasyMetadata()
  tipsDivergenceExceededException?: any;
}
