/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class PostApiV1FiltersSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=bearer;name=Authorization",
  })
  bearerAuth: string;
}

export enum PostApiV1FiltersRequestBodyContextEnum {
  Home = "home",
  Notifications = "notifications",
  Public = "public",
  Thread = "thread",
}

export class PostApiV1FiltersRequestBody extends SpeakeasyBase {
  /**
   * Array of enumerable strings `home`, `notifications`, `public`, `thread`. At least one context must be specified.
   */
  @SpeakeasyMetadata()
  context: PostApiV1FiltersRequestBodyContextEnum[];

  /**
   * Number of seconds from now the filter should expire. Otherwise, null for a filter that doesn't expire.
   */
  @SpeakeasyMetadata()
  expiresIn?: number;

  /**
   * Should the server irreversibly drop matching entities from home and notifications?
   */
  @SpeakeasyMetadata()
  irreversible?: boolean;

  /**
   * Text to be filtered.
   */
  @SpeakeasyMetadata()
  phrase: string;

  /**
   * Consider word boundaries?
   */
  @SpeakeasyMetadata()
  wholeWord?: boolean;
}

export class PostApiV1FiltersResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Invalid or missing Authorization header
   */
  @SpeakeasyMetadata()
  error?: shared.ErrorT;

  /**
   * The newly-created filter will be returned.
   */
  @SpeakeasyMetadata()
  filter?: shared.Filter;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
