/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
export const UpdateWorkspaceServerList = [
  "https://taskrouter.twilio.com",
] as const;

export class UpdateWorkspaceSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

export class UpdateWorkspaceUpdateWorkspaceRequest extends SpeakeasyBase {
  /**
   * The SID of the Activity that will be used when new Workers are created in the Workspace.
   */
  @SpeakeasyMetadata({ data: "form, name=DefaultActivitySid" })
  defaultActivitySid?: string;

  /**
   * The URL we should call when an event occurs. See [Workspace Events](https://www.twilio.com/docs/taskrouter/api/event) for more information. This parameter supports Twilio's [Webhooks (HTTP callbacks) Connection Overrides](https://www.twilio.com/docs/usage/webhooks/webhooks-connection-overrides).
   */
  @SpeakeasyMetadata({ data: "form, name=EventCallbackUrl" })
  eventCallbackUrl?: string;

  /**
   * The list of Workspace events for which to call event_callback_url. For example if `EventsFilter=task.created,task.canceled,worker.activity.update`, then TaskRouter will call event_callback_url only when a task is created, canceled, or a Worker activity is updated.
   */
  @SpeakeasyMetadata({ data: "form, name=EventsFilter" })
  eventsFilter?: string;

  /**
   * A descriptive string that you create to describe the Workspace resource. For example: `Sales Call Center` or `Customer Support Team`.
   */
  @SpeakeasyMetadata({ data: "form, name=FriendlyName" })
  friendlyName?: string;

  /**
   * Whether to enable multi-tasking. Can be: `true` to enable multi-tasking, or `false` to disable it. However, all workspaces should be maintained as multi-tasking. There is no default when omitting this parameter. A multi-tasking Workspace can't be updated to single-tasking unless it is not a Flex Project and another (legacy) single-tasking Workspace exists. Multi-tasking allows Workers to handle multiple Tasks simultaneously. In multi-tasking mode, each Worker can receive parallel reservations up to the per-channel maximums defined in the Workers section. In single-tasking mode (legacy mode), each Worker will only receive a new reservation when the previous task is completed. Learn more at [Multitasking](https://www.twilio.com/docs/taskrouter/multitasking).
   */
  @SpeakeasyMetadata({ data: "form, name=MultiTaskEnabled" })
  multiTaskEnabled?: boolean;

  @SpeakeasyMetadata({ data: "form, name=PrioritizeQueueOrder" })
  prioritizeQueueOrder?: shared.WorkspaceEnumQueueOrderEnum;

  /**
   * The SID of the Activity that will be assigned to a Worker when a Task reservation times out without a response.
   */
  @SpeakeasyMetadata({ data: "form, name=TimeoutActivitySid" })
  timeoutActivitySid?: string;
}

export class UpdateWorkspaceRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "request, media_type=application/x-www-form-urlencoded",
  })
  requestBody?: UpdateWorkspaceUpdateWorkspaceRequest;

  /**
   * The SID of the Workspace resource to update.
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=Sid" })
  sid: string;
}

export class UpdateWorkspaceResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  taskrouterV1Workspace?: shared.TaskrouterV1Workspace;
}
