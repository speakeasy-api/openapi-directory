// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// UnaryFilterOpEnum - The unary operator to apply.
type UnaryFilterOpEnum string

const (
	UnaryFilterOpEnumOperatorUnspecified UnaryFilterOpEnum = "OPERATOR_UNSPECIFIED"
	UnaryFilterOpEnumIsNan               UnaryFilterOpEnum = "IS_NAN"
	UnaryFilterOpEnumIsNull              UnaryFilterOpEnum = "IS_NULL"
	UnaryFilterOpEnumIsNotNan            UnaryFilterOpEnum = "IS_NOT_NAN"
	UnaryFilterOpEnumIsNotNull           UnaryFilterOpEnum = "IS_NOT_NULL"
)

func (e UnaryFilterOpEnum) ToPointer() *UnaryFilterOpEnum {
	return &e
}

func (e *UnaryFilterOpEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OPERATOR_UNSPECIFIED":
		fallthrough
	case "IS_NAN":
		fallthrough
	case "IS_NULL":
		fallthrough
	case "IS_NOT_NAN":
		fallthrough
	case "IS_NOT_NULL":
		*e = UnaryFilterOpEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UnaryFilterOpEnum: %v", v)
	}
}

// UnaryFilter - A filter with a single operand.
type UnaryFilter struct {
	// A reference to a field in a document, ex: `stats.operations`.
	Field *FieldReference `json:"field,omitempty"`
	// The unary operator to apply.
	Op *UnaryFilterOpEnum `json:"op,omitempty"`
}
