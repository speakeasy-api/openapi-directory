// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// NodeAddMachineTypeEnum - The kind of machine for the node (use vm for a generic VM)
type NodeAddMachineTypeEnum string

const (
	NodeAddMachineTypeEnumVmware      NodeAddMachineTypeEnum = "vmware"
	NodeAddMachineTypeEnumPhysical    NodeAddMachineTypeEnum = "physical"
	NodeAddMachineTypeEnumVM          NodeAddMachineTypeEnum = "vm"
	NodeAddMachineTypeEnumSolariszone NodeAddMachineTypeEnum = "solariszone"
	NodeAddMachineTypeEnumQemu        NodeAddMachineTypeEnum = "qemu"
	NodeAddMachineTypeEnumXen         NodeAddMachineTypeEnum = "xen"
	NodeAddMachineTypeEnumAixlpar     NodeAddMachineTypeEnum = "aixlpar"
	NodeAddMachineTypeEnumHyperv      NodeAddMachineTypeEnum = "hyperv"
	NodeAddMachineTypeEnumBsdjail     NodeAddMachineTypeEnum = "bsdjail"
)

func (e *NodeAddMachineTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "vmware":
		fallthrough
	case "physical":
		fallthrough
	case "vm":
		fallthrough
	case "solariszone":
		fallthrough
	case "qemu":
		fallthrough
	case "xen":
		fallthrough
	case "aixlpar":
		fallthrough
	case "hyperv":
		fallthrough
	case "bsdjail":
		*e = NodeAddMachineTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NodeAddMachineTypeEnum: %s", s)
	}
}

// NodeAddPolicyModeEnum - The policy mode for the node. Can only be specified when status=accepted. If not specified, the default (global) mode will be used
type NodeAddPolicyModeEnum string

const (
	NodeAddPolicyModeEnumEnforce NodeAddPolicyModeEnum = "enforce"
	NodeAddPolicyModeEnumAudit   NodeAddPolicyModeEnum = "audit"
)

func (e *NodeAddPolicyModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "enforce":
		fallthrough
	case "audit":
		*e = NodeAddPolicyModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NodeAddPolicyModeEnum: %s", s)
	}
}

type NodeAddPropertiesTagsEnum string

const (
	NodeAddPropertiesTagsEnumSome NodeAddPropertiesTagsEnum = "some"
	NodeAddPropertiesTagsEnumTags NodeAddPropertiesTagsEnum = "tags"
)

func (e *NodeAddPropertiesTagsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "some":
		fallthrough
	case "tags":
		*e = NodeAddPropertiesTagsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NodeAddPropertiesTagsEnum: %s", s)
	}
}

type NodeAddPropertiesVars struct {
	Var1  *string `json:"var1,omitempty"`
	Vars2 *string `json:"vars2,omitempty"`
}

// NodeAddProperties - Node properties in "key":"value" format, where "key" is a string, and "value" is either a string, a json array, or a json object. The following example shows you three example of &#58; &#173; a json array on the example of "tags":[ "some", "tags" ] &#173; a simple string on the example of "env":"prod" &#173; a complex json object on the example of "vars":{ "var1":"value1", "var2":"value2" } They are optional and can be used in any combination as long the keys are unique within the properties object.
type NodeAddProperties struct {
	Env  *string                     `json:"env,omitempty"`
	Tags []NodeAddPropertiesTagsEnum `json:"tags,omitempty"`
	Vars *NodeAddPropertiesVars      `json:"vars,omitempty"`
}

// NodeAddStateEnum - Node lifecycle state. Can only be specified when status=accepted. If not specified, enable is used
type NodeAddStateEnum string

const (
	NodeAddStateEnumEnable        NodeAddStateEnum = "enable"
	NodeAddStateEnumIgnored       NodeAddStateEnum = "ignored"
	NodeAddStateEnumEmptyPolicies NodeAddStateEnum = "empty-policies"
	NodeAddStateEnumInitializing  NodeAddStateEnum = "initializing"
	NodeAddStateEnumPreparingEol  NodeAddStateEnum = "preparing-eol"
)

func (e *NodeAddStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "enable":
		fallthrough
	case "ignored":
		fallthrough
	case "empty-policies":
		fallthrough
	case "initializing":
		fallthrough
	case "preparing-eol":
		*e = NodeAddStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NodeAddStateEnum: %s", s)
	}
}

// NodeAddStatusEnum - Target status of the node
type NodeAddStatusEnum string

const (
	NodeAddStatusEnumAccepted NodeAddStatusEnum = "accepted"
	NodeAddStatusEnumPending  NodeAddStatusEnum = "pending"
)

func (e *NodeAddStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "accepted":
		fallthrough
	case "pending":
		*e = NodeAddStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NodeAddStatusEnum: %s", s)
	}
}

type NodeAdd struct {
	// Information about agent key or certificate
	AgentKey *AgentKey `json:"agentKey,omitempty"`
	// The fully qualified name of the node
	Hostname string `json:"hostname"`
	// The Rudder node unique identifier in /opt/rudder/etc/uuid.hive
	ID string `json:"id"`
	// an array of IPs.
	IPAddresses []string `json:"ipAddresses"`
	// The kind of machine for the node (use vm for a generic VM)
	MachineType NodeAddMachineTypeEnum `json:"machineType"`
	Os          Os                     `json:"os"`
	// The policy mode for the node. Can only be specified when status=accepted. If not specified, the default (global) mode will be used
	PolicyMode *NodeAddPolicyModeEnum `json:"policyMode,omitempty"`
	// The policy server ID for that node. By default, "root"
	PolicyServerID *string `json:"policyServerId,omitempty"`
	// Node properties in "key":"value" format, where "key" is a string, and "value" is either a string, a json array, or a json object. The following example shows you three example of &#58; &#173; a json array on the example of "tags":[ "some", "tags" ] &#173; a simple string on the example of "env":"prod" &#173; a complex json object on the example of "vars":{ "var1":"value1", "var2":"value2" } They are optional and can be used in any combination as long the keys are unique within the properties object.
	Properties NodeAddProperties `json:"properties"`
	// Node lifecycle state. Can only be specified when status=accepted. If not specified, enable is used
	State *NodeAddStateEnum `json:"state,omitempty"`
	// Target status of the node
	Status NodeAddStatusEnum `json:"status"`
	// Timezone information of the node.
	Timezone *Timezone `json:"timezone,omitempty"`
}
