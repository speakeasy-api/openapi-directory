"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import standardunit_enum as shared_standardunit_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MetricTransformation:
    r"""Indicates how to transform ingested log events to metric data in a CloudWatch metric."""
    
    metric_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metricName') }})  
    metric_namespace: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metricNamespace') }})  
    metric_value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metricValue') }})  
    default_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultValue'), 'exclude': lambda f: f is None }})  
    dimensions: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dimensions'), 'exclude': lambda f: f is None }})  
    unit: Optional[shared_standardunit_enum.StandardUnitEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unit'), 'exclude': lambda f: f is None }})  
    