/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class AccountReports {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get account reports containing aggregate account data of all linked GLS accounts. Caller needs to provide their manager customer id and the associated auth credential that allows them read permissions on their linked accounts.
   */
  localservicesAccountReportsSearch(
    req: operations.LocalservicesAccountReportsSearchRequest,
    security: operations.LocalservicesAccountReportsSearchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.LocalservicesAccountReportsSearchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LocalservicesAccountReportsSearchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v1/accountReports:search";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.LocalservicesAccountReportsSearchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LocalservicesAccountReportsSearchResponse =
        new operations.LocalservicesAccountReportsSearchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleAdsHomeservicesLocalservicesV1SearchAccountReportsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleAdsHomeservicesLocalservicesV1SearchAccountReportsResponse
              );
          }
          break;
      }

      return res;
    });
  }
}
