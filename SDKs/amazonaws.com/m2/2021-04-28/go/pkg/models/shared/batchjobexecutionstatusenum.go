// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type BatchJobExecutionStatusEnum string

const (
	BatchJobExecutionStatusEnumSubmitting           BatchJobExecutionStatusEnum = "Submitting"
	BatchJobExecutionStatusEnumHolding              BatchJobExecutionStatusEnum = "Holding"
	BatchJobExecutionStatusEnumDispatching          BatchJobExecutionStatusEnum = "Dispatching"
	BatchJobExecutionStatusEnumRunning              BatchJobExecutionStatusEnum = "Running"
	BatchJobExecutionStatusEnumCancelling           BatchJobExecutionStatusEnum = "Cancelling"
	BatchJobExecutionStatusEnumCancelled            BatchJobExecutionStatusEnum = "Cancelled"
	BatchJobExecutionStatusEnumSucceeded            BatchJobExecutionStatusEnum = "Succeeded"
	BatchJobExecutionStatusEnumFailed               BatchJobExecutionStatusEnum = "Failed"
	BatchJobExecutionStatusEnumSucceededWithWarning BatchJobExecutionStatusEnum = "Succeeded With Warning"
)

func (e *BatchJobExecutionStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Submitting":
		fallthrough
	case "Holding":
		fallthrough
	case "Dispatching":
		fallthrough
	case "Running":
		fallthrough
	case "Cancelling":
		fallthrough
	case "Cancelled":
		fallthrough
	case "Succeeded":
		fallthrough
	case "Failed":
		fallthrough
	case "Succeeded With Warning":
		*e = BatchJobExecutionStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchJobExecutionStatusEnum: %s", s)
	}
}
