<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Account - This data type provides a list of all the SMB's bank accounts, with rich data like balances, account numbers, and institutions holding the accounts.
 * 
 * 
 * Explore our [data coverage](https://knowledge.codat.io/supported-features/banking?view=tab-by-data-type&dataType=banking-accounts).
 * 
 * Responses are paged, so you should provide `page` and `pageSize` query parameters in your request.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Account
{
    /**
     * Depending on the data provided by the underlying bank, not all balances are always available.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\AccountBalanceAmounts $balance
     */
	#[\JMS\Serializer\Annotation\SerializedName('balance')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\AccountBalanceAmounts')]
    public AccountBalanceAmounts $balance;
    
    /**
     * The currency code for the account.
     * 
     * @var string $currency
     */
	#[\JMS\Serializer\Annotation\SerializedName('currency')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $currency;
    
    /**
     * The name of the person or company who holds the account.
     * 
     * @var ?string $holder
     */
	#[\JMS\Serializer\Annotation\SerializedName('holder')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $holder = null;
    
    /**
     * The ID of the account from the provider.
     * 
     * @var string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $id;
    
    /**
     * An object containing bank account identification information.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\AccountIdentifiers $identifiers
     */
	#[\JMS\Serializer\Annotation\SerializedName('identifiers')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\AccountIdentifiers')]
    public AccountIdentifiers $identifiers;
    
    /**
     * The friendly name of the account, chosen by the holder. This may not have been set by the account holder and therefore is not always available.
     * 
     * @var ?string $informalName
     */
	#[\JMS\Serializer\Annotation\SerializedName('informalName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $informalName = null;
    
    /**
     * The bank or other financial institution providing the account.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\AccountInstitution $institution
     */
	#[\JMS\Serializer\Annotation\SerializedName('institution')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\AccountInstitution')]
    public AccountInstitution $institution;
    
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     * 
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * > Time zones
     * > 
     * > Not all dates from Codat will contain information about time zones.  
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     * 
     * @var ?string $modifiedDate
     */
	#[\JMS\Serializer\Annotation\SerializedName('modifiedDate')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $modifiedDate = null;
    
    /**
     * The name of the account according to the provider.
     * 
     * @var string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $name;
    
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     * 
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * > Time zones
     * > 
     * > Not all dates from Codat will contain information about time zones.  
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     * 
     * @var ?string $sourceModifiedDate
     */
	#[\JMS\Serializer\Annotation\SerializedName('sourceModifiedDate')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $sourceModifiedDate = null;
    
    /**
     * The type of transactions and balances on the account.  
     * 
     * For Credit accounts, positive balances are liabilities, and positive transactions **reduce** liabilities.  
     * For Debit accounts, positive balances are assets, and positive transactions **increase** assets.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\AccountTypeEnum $type
     */
	#[\JMS\Serializer\Annotation\SerializedName('type')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\AccountTypeEnum>')]
    public AccountTypeEnum $type;
    
	public function __construct()
	{
		$this->balance = new \OpenAPI\OpenAPI\Models\Shared\AccountBalanceAmounts();
		$this->currency = "";
		$this->holder = null;
		$this->id = "";
		$this->identifiers = new \OpenAPI\OpenAPI\Models\Shared\AccountIdentifiers();
		$this->informalName = null;
		$this->institution = new \OpenAPI\OpenAPI\Models\Shared\AccountInstitution();
		$this->modifiedDate = null;
		$this->name = "";
		$this->sourceModifiedDate = null;
		$this->type = \OpenAPI\OpenAPI\Models\Shared\AccountTypeEnum::UNKNOWN;
	}
}
