"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import privateip as shared_privateip
from ..shared import securitygroup as shared_securitygroup
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NetworkInterface:
    r"""Contains information about the network interfaces interacting with an EC2 instance. This data type is used as one of the elements of the <a>AssetAttributes</a> data type."""
    
    ipv6_addresses: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipv6Addresses'), 'exclude': lambda f: f is None }})  
    network_interface_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkInterfaceId'), 'exclude': lambda f: f is None }})  
    private_dns_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privateDnsName'), 'exclude': lambda f: f is None }})  
    private_ip_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privateIpAddress'), 'exclude': lambda f: f is None }})  
    private_ip_addresses: Optional[list[shared_privateip.PrivateIP]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privateIpAddresses'), 'exclude': lambda f: f is None }})  
    public_dns_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publicDnsName'), 'exclude': lambda f: f is None }})  
    public_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publicIp'), 'exclude': lambda f: f is None }})  
    security_groups: Optional[list[shared_securitygroup.SecurityGroup]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('securityGroups'), 'exclude': lambda f: f is None }})  
    subnet_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subnetId'), 'exclude': lambda f: f is None }})  
    vpc_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vpcId'), 'exclude': lambda f: f is None }})  
    