// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// SubtaskInformationPreviousStateEnum - The previous state of the subtask. This property is not set if the subtask is in its initial Active state.
type SubtaskInformationPreviousStateEnum string

const (
	SubtaskInformationPreviousStateEnumActive    SubtaskInformationPreviousStateEnum = "active"
	SubtaskInformationPreviousStateEnumPreparing SubtaskInformationPreviousStateEnum = "preparing"
	SubtaskInformationPreviousStateEnumRunning   SubtaskInformationPreviousStateEnum = "running"
	SubtaskInformationPreviousStateEnumCompleted SubtaskInformationPreviousStateEnum = "completed"
)

func (e *SubtaskInformationPreviousStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "active":
		fallthrough
	case "preparing":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = SubtaskInformationPreviousStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SubtaskInformationPreviousStateEnum: %s", s)
	}
}

// SubtaskInformationStateEnum - The current state of the subtask.
type SubtaskInformationStateEnum string

const (
	SubtaskInformationStateEnumActive    SubtaskInformationStateEnum = "active"
	SubtaskInformationStateEnumPreparing SubtaskInformationStateEnum = "preparing"
	SubtaskInformationStateEnumRunning   SubtaskInformationStateEnum = "running"
	SubtaskInformationStateEnumCompleted SubtaskInformationStateEnum = "completed"
)

func (e *SubtaskInformationStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "active":
		fallthrough
	case "preparing":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = SubtaskInformationStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SubtaskInformationStateEnum: %s", s)
	}
}

// SubtaskInformation - Information about an Azure Batch subtask.
type SubtaskInformation struct {
	// The time at which the subtask completed. This property is set only if the subtask is in the Completed state.
	EndTime *time.Time `json:"endTime,omitempty"`
	// The exit code of the subtask. This property is set only if the subtask is in the Completed state.
	ExitCode *int `json:"exitCode,omitempty"`
	// The id of the subtask.
	ID *int `json:"id,omitempty"`
	// Information about the compute node on which a task ran.
	NodeInfo *ComputeNodeInformation `json:"nodeInfo,omitempty"`
	// The previous state of the subtask. This property is not set if the subtask is in its initial Active state.
	PreviousState *SubtaskInformationPreviousStateEnum `json:"previousState,omitempty"`
	// The time at which the subtask entered its previous state. This property is not set if the subtask is in its initial Active state.
	PreviousStateTransitionTime *time.Time `json:"previousStateTransitionTime,omitempty"`
	// Information about an error when scheduling a task.
	SchedulingError *TaskSchedulingError `json:"schedulingError,omitempty"`
	// The time at which the subtask started running. If the subtask has been restarted or retried, this is the most recent time at which the subtask started running.
	StartTime *time.Time `json:"startTime,omitempty"`
	// The current state of the subtask.
	State *SubtaskInformationStateEnum `json:"state,omitempty"`
	// The time at which the subtask entered its current state.
	StateTransitionTime *time.Time `json:"stateTransitionTime,omitempty"`
}
