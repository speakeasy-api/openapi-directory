"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import classificationannotation as shared_classificationannotation
from ..shared import imageobjectdetectionannotation as shared_imageobjectdetectionannotation
from ..shared import tablesannotation as shared_tablesannotation
from ..shared import textextractionannotation as shared_textextractionannotation
from ..shared import textsentimentannotation as shared_textsentimentannotation
from ..shared import translationannotation as shared_translationannotation
from ..shared import videoclassificationannotation as shared_videoclassificationannotation
from ..shared import videoobjecttrackingannotation as shared_videoobjecttrackingannotation
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AnnotationPayload:
    r"""Contains annotation information that is relevant to AutoML."""
    
    annotation_spec_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('annotationSpecId'), 'exclude': lambda f: f is None }})
    r"""Output only . The resource ID of the annotation spec that this annotation pertains to. The annotation spec comes from either an ancestor dataset, or the dataset that was used to train the model in use."""  
    classification: Optional[shared_classificationannotation.ClassificationAnnotation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('classification'), 'exclude': lambda f: f is None }})
    r"""Contains annotation details specific to classification."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Output only. The value of display_name when the model was trained. Because this field returns a value at model training time, for different models trained using the same dataset, the returned value could be different as model owner could update the `display_name` between any two model training."""  
    image_object_detection: Optional[shared_imageobjectdetectionannotation.ImageObjectDetectionAnnotation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageObjectDetection'), 'exclude': lambda f: f is None }})
    r"""Annotation details for image object detection."""  
    tables: Optional[shared_tablesannotation.TablesAnnotation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tables'), 'exclude': lambda f: f is None }})
    r"""Contains annotation details specific to Tables."""  
    text_extraction: Optional[shared_textextractionannotation.TextExtractionAnnotation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('textExtraction'), 'exclude': lambda f: f is None }})
    r"""Annotation for identifying spans of text."""  
    text_sentiment: Optional[shared_textsentimentannotation.TextSentimentAnnotation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('textSentiment'), 'exclude': lambda f: f is None }})
    r"""Contains annotation details specific to text sentiment."""  
    translation: Optional[shared_translationannotation.TranslationAnnotation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('translation'), 'exclude': lambda f: f is None }})
    r"""Annotation details specific to translation."""  
    video_classification: Optional[shared_videoclassificationannotation.VideoClassificationAnnotation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videoClassification'), 'exclude': lambda f: f is None }})
    r"""Contains annotation details specific to video classification."""  
    video_object_tracking: Optional[shared_videoobjecttrackingannotation.VideoObjectTrackingAnnotation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videoObjectTracking'), 'exclude': lambda f: f is None }})
    r"""Annotation details for video object tracking."""  
    