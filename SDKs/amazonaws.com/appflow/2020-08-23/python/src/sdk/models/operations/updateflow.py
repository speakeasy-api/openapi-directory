"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import connectortype_enum as shared_connectortype_enum
from ..shared import destinationflowconfig as shared_destinationflowconfig
from ..shared import gluedatacatalogconfig as shared_gluedatacatalogconfig
from ..shared import incrementalpullconfig as shared_incrementalpullconfig
from ..shared import sourceconnectorproperties as shared_sourceconnectorproperties
from ..shared import task as shared_task
from ..shared import triggerproperties as shared_triggerproperties
from ..shared import triggertype_enum as shared_triggertype_enum
from ..shared import updateflowresponse as shared_updateflowresponse
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateFlowRequestBodyMetadataCatalogConfig:
    r"""Specifies the configuration that Amazon AppFlow uses when it catalogs your data. When Amazon AppFlow catalogs your data, it stores metadata in a data catalog."""
    
    glue_data_catalog: Optional[shared_gluedatacatalogconfig.GlueDataCatalogConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('glueDataCatalog'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateFlowRequestBodySourceFlowConfig:
    r"""Contains information about the configuration of the source connector used in the flow."""
    
    api_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('apiVersion'), 'exclude': lambda f: f is None }})  
    connector_profile_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectorProfileName'), 'exclude': lambda f: f is None }})  
    connector_type: Optional[shared_connectortype_enum.ConnectorTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectorType'), 'exclude': lambda f: f is None }})  
    incremental_pull_config: Optional[shared_incrementalpullconfig.IncrementalPullConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('incrementalPullConfig'), 'exclude': lambda f: f is None }})  
    source_connector_properties: Optional[shared_sourceconnectorproperties.SourceConnectorProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceConnectorProperties'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateFlowRequestBodyTriggerConfig:
    r"""The trigger settings that determine how and when Amazon AppFlow runs the specified flow."""
    
    trigger_properties: Optional[shared_triggerproperties.TriggerProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('triggerProperties'), 'exclude': lambda f: f is None }})  
    trigger_type: Optional[shared_triggertype_enum.TriggerTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('triggerType'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateFlowRequestBody:
    
    destination_flow_config_list: list[shared_destinationflowconfig.DestinationFlowConfig] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationFlowConfigList') }})
    r"""The configuration that controls how Amazon AppFlow transfers data to the destination connector."""  
    flow_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flowName') }})
    r"""The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only."""  
    source_flow_config: UpdateFlowRequestBodySourceFlowConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceFlowConfig') }})
    r"""Contains information about the configuration of the source connector used in the flow."""  
    tasks: list[shared_task.Task] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tasks') }})
    r"""A list of tasks that Amazon AppFlow performs while transferring the data in the flow run."""  
    trigger_config: UpdateFlowRequestBodyTriggerConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('triggerConfig') }})
    r"""The trigger settings that determine how and when Amazon AppFlow runs the specified flow."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""A description of the flow."""  
    metadata_catalog_config: Optional[UpdateFlowRequestBodyMetadataCatalogConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadataCatalogConfig'), 'exclude': lambda f: f is None }})
    r"""Specifies the configuration that Amazon AppFlow uses when it catalogs your data. When Amazon AppFlow catalogs your data, it stores metadata in a data catalog."""  
    

@dataclasses.dataclass
class UpdateFlowRequest:
    
    request_body: UpdateFlowRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateFlowResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictException"""  
    connector_authentication_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConnectorAuthenticationException"""  
    connector_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConnectorServerException"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    service_quota_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceQuotaExceededException"""  
    update_flow_response: Optional[shared_updateflowresponse.UpdateFlowResponse] = dataclasses.field(default=None)
    r"""Success"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    