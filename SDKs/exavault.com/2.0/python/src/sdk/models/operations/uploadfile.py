"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import resourceresponse as shared_resourceresponse
from typing import Optional


@dataclasses.dataclass
class UploadFileRequestBodyFile:
    
    content: bytes = dataclasses.field(metadata={'multipart_form': { 'content': True }})  
    file: str = dataclasses.field(metadata={'multipart_form': { 'field_name': 'file' }})  
    

@dataclasses.dataclass
class UploadFileRequestBody:
    
    file: Optional[UploadFileRequestBodyFile] = dataclasses.field(default=None, metadata={'multipart_form': { 'file': True }})  
    

@dataclasses.dataclass
class UploadFileRequest:
    
    ev_access_token: str = dataclasses.field(metadata={'header': { 'field_name': 'ev-access-token', 'style': 'simple', 'explode': False }})
    r"""Access token required to make the API call."""  
    ev_api_key: str = dataclasses.field(metadata={'header': { 'field_name': 'ev-api-key', 'style': 'simple', 'explode': False }})
    r"""API Key required to make the API call."""  
    file_size: int = dataclasses.field(metadata={'query_param': { 'field_name': 'fileSize', 'style': 'form', 'explode': True }})
    r"""File size, in bits, of the file being uploaded."""  
    path: str = dataclasses.field(metadata={'query_param': { 'field_name': 'path', 'style': 'form', 'explode': True }})
    r"""Destination path for the file being uploaded, including the file name."""  
    allow_overwrite: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'allowOverwrite', 'style': 'form', 'explode': True }})
    r"""True if a file with the same name is found in the designated path, should be overwritten. False if different file names should be generated."""  
    offset_bytes: Optional[int] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'offsetBytes', 'style': 'simple', 'explode': False }})
    r"""Allows a file upload to resume at a certain number of bytes."""  
    request_body: Optional[UploadFileRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'multipart/form-data' }})  
    resume: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'resume', 'style': 'form', 'explode': True }})
    r"""True if upload resume is supported, false if it isn't."""  
    

@dataclasses.dataclass
class UploadFileResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_response: Optional[shared_resourceresponse.ResourceResponse] = dataclasses.field(default=None)
    r"""Successful Operation"""  
    