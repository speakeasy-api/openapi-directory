/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Proxy {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Show the agent's PROXY argument structure
   *
   * @remarks
   * Agent's PROXY configuration with port,rule,prompt,paging_prompt,userdb,keymap
   */
  protocolProxyGetArgs(
    req: operations.ProtocolProxyGetArgsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProtocolProxyGetArgsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProtocolProxyGetArgsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mimic/agent/{agentNum}/protocol/msg/proxy/get/args",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProtocolProxyGetArgsResponse =
        new operations.ProtocolProxyGetArgsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.protocolProxyGetArgs200ApplicationJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Show the agent's PROXY configuration
   *
   * @remarks
   * Agent's PROXY configuration with port,rule,prompt,paging_prompt,userdb,keymap
   */
  protocolProxyGetConfig(
    req: operations.ProtocolProxyGetConfigRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProtocolProxyGetConfigResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProtocolProxyGetConfigRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mimic/agent/{agentNum}/protocol/msg/proxy/get/config",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProtocolProxyGetConfigResponse =
        new operations.ProtocolProxyGetConfigResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.configPROXY = utils.objectToClass(
              httpRes?.data,
              shared.ConfigPROXY
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Show the agent's PROXY statistics
   *
   * @remarks
   * Statistics of fields indicated in the headers
   */
  protocolProxyGetStatistics(
    req: operations.ProtocolProxyGetStatisticsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProtocolProxyGetStatisticsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProtocolProxyGetStatisticsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mimic/agent/{agentNum}/protocol/msg/proxy/get/statistics",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProtocolProxyGetStatisticsResponse =
        new operations.ProtocolProxyGetStatisticsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.protocolProxyGetStatistics200ApplicationJSONInt32Integers =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Show the PROXY statistics headers
   *
   * @remarks
   * The headers of statistics fields
   */
  protocolProxyGetStatsHdr(
    config?: AxiosRequestConfig
  ): Promise<operations.ProtocolProxyGetStatsHdrResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/mimic/protocol/msg/proxy/get/stats_hdr";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProtocolProxyGetStatsHdrResponse =
        new operations.ProtocolProxyGetStatsHdrResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.protocolProxyGetStatsHdr200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Show the agent's PROXY traffic tracing
   *
   * @remarks
   * Trace 1 means enabled, 0 means not
   */
  protocolProxyGetTrace(
    req: operations.ProtocolProxyGetTraceRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProtocolProxyGetTraceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProtocolProxyGetTraceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mimic/agent/{agentNum}/protocol/msg/proxy/get/trace",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProtocolProxyGetTraceResponse =
        new operations.ProtocolProxyGetTraceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.configPROXY = utils.objectToClass(
              httpRes?.data,
              shared.ConfigPROXY
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Add individual proxy target on the agent and the simulator host
   *
   * @remarks
   * Additional proxy target
   */
  protocolProxyPortAdd(
    req: operations.ProtocolProxyPortAddRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProtocolProxyPortAddResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProtocolProxyPortAddRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mimic/agent/{agentNum}/protocol/msg/proxy/port/add/{port}/{target}/{targetPort}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProtocolProxyPortAddResponse =
        new operations.ProtocolProxyPortAddResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.protocolProxyPortAdd200ApplicationJSONString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Check individual target
   *
   * @remarks
   * Check individual target
   */
  protocolProxyPortIsstarted(
    req: operations.ProtocolProxyPortIsstartedRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProtocolProxyPortIsstartedResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProtocolProxyPortIsstartedRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mimic/agent/{agentNum}/protocol/msg/proxy/port/isStarted/{port}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProtocolProxyPortIsstartedResponse =
        new operations.ProtocolProxyPortIsstartedResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.protocolProxyPortIsstarted200ApplicationJSONString =
              JSON.stringify(httpRes?.data);
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * List all proxy targets
   */
  protocolProxyPortList(
    req: operations.ProtocolProxyPortListRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProtocolProxyPortListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProtocolProxyPortListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mimic/agent/{agentNum}/protocol/msg/proxy/port/list",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProtocolProxyPortListResponse =
        new operations.ProtocolProxyPortListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.protocolProxyPortList200ApplicationJSONInt32Integers =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Remove individual proxy target on the agent and the simulator host
   *
   * @remarks
   * Remove proxy target
   */
  protocolProxyPortRemove(
    req: operations.ProtocolProxyPortRemoveRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProtocolProxyPortRemoveResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProtocolProxyPortRemoveRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mimic/agent/{agentNum}/protocol/msg/proxy/port/remove/{port}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProtocolProxyPortRemoveResponse =
        new operations.ProtocolProxyPortRemoveResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.protocolProxyPortRemove200ApplicationJSONString =
              JSON.stringify(httpRes?.data);
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Start additional target
   *
   * @remarks
   * Start additional target
   */
  protocolProxyPortStart(
    req: operations.ProtocolProxyPortStartRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProtocolProxyPortStartResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProtocolProxyPortStartRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mimic/agent/{agentNum}/protocol/msg/proxy/port/start/{port}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProtocolProxyPortStartResponse =
        new operations.ProtocolProxyPortStartResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.protocolProxyPortStart200ApplicationJSONString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Stop additional target
   *
   * @remarks
   * Stop additional target
   */
  protocolProxyPortStop(
    req: operations.ProtocolProxyPortStopRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProtocolProxyPortStopResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProtocolProxyPortStopRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mimic/agent/{agentNum}/protocol/msg/proxy/port/stop/{port}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProtocolProxyPortStopResponse =
        new operations.ProtocolProxyPortStopResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.protocolProxyPortStop200ApplicationJSONString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Set the agent's PROXY configuration
   *
   * @remarks
   * Agent's PROXY configuration with port,rule,prompt,paging_prompt,userdb,keymap
   */
  protocolProxySetConfig(
    req: operations.ProtocolProxySetConfigRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProtocolProxySetConfigResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProtocolProxySetConfigRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mimic/agent/{agentNum}/protocol/msg/proxy/set/config/{argument}/{value}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProtocolProxySetConfigResponse =
        new operations.ProtocolProxySetConfigResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.protocolProxySetConfig200ApplicationJSONString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Set the agent's PROXY traffic tracing
   *
   * @remarks
   * 1 to enable, 0 to disable
   */
  protocolProxySetTrace(
    req: operations.ProtocolProxySetTraceRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProtocolProxySetTraceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProtocolProxySetTraceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mimic/agent/{agentNum}/protocol/msg/proxy/set/trace/{enableOrNot}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProtocolProxySetTraceResponse =
        new operations.ProtocolProxySetTraceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.protocolProxySetTrace200ApplicationJSONString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }
}
