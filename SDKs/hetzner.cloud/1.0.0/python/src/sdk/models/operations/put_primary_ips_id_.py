"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PutPrimaryIpsIDUpdatePrimaryIPRequest:
    
    auto_delete: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_delete'), 'exclude': lambda f: f is None }})
    r"""Delete this Primary IP when the resource it is assigned to is deleted"""  
    labels: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""User-defined labels (key-value pairs)"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""New unique name to set"""  
    

@dataclasses.dataclass
class PutPrimaryIpsIDRequest:
    
    id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""ID of the resource"""  
    request_body: Optional[PutPrimaryIpsIDUpdatePrimaryIPRequest] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    
class PutPrimaryIpsIDPrimaryIPResponsePrimaryIPAssigneeTypeEnum(str, Enum):
    r"""Resource type the Primary IP can be assigned to"""
    SERVER = 'server'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PutPrimaryIpsIDPrimaryIPResponsePrimaryIPDatacenterLocation:
    
    city: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city') }})
    r"""City the Location is closest to"""  
    country: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country') }})
    r"""ISO 3166-1 alpha-2 code of the country the Location resides in"""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""Description of the Location"""  
    id: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Location"""  
    latitude: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('latitude') }})
    r"""Latitude of the city closest to the Location"""  
    longitude: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('longitude') }})
    r"""Longitude of the city closest to the Location"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Unique identifier of the Location"""  
    network_zone: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('network_zone') }})
    r"""Name of network zone this Location resides in"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PutPrimaryIpsIDPrimaryIPResponsePrimaryIPDatacenterServerTypes:
    r"""The Server types the Datacenter can handle"""
    
    available: list[float] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('available') }})
    r"""IDs of Server types that are supported and for which the Datacenter has enough resources left"""  
    available_for_migration: list[float] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('available_for_migration') }})
    r"""IDs of Server types that are supported and for which the Datacenter has enough resources left"""  
    supported: list[float] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supported') }})
    r"""IDs of Server types that are supported in the Datacenter"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PutPrimaryIpsIDPrimaryIPResponsePrimaryIPDatacenter:
    r"""Datacenter this Primary IP is located at"""
    
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""Description of the Datacenter"""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    location: PutPrimaryIpsIDPrimaryIPResponsePrimaryIPDatacenterLocation = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Unique identifier of the Datacenter"""  
    server_types: PutPrimaryIpsIDPrimaryIPResponsePrimaryIPDatacenterServerTypes = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('server_types') }})
    r"""The Server types the Datacenter can handle"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PutPrimaryIpsIDPrimaryIPResponsePrimaryIPDNSPtr:
    
    dns_ptr: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dns_ptr') }})
    r"""DNS pointer for the specific IP address"""  
    ip: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ip') }})
    r"""Single IPv4 or IPv6 address"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PutPrimaryIpsIDPrimaryIPResponsePrimaryIPProtection:
    r"""Protection configuration for the Resource"""
    
    delete: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delete') }})
    r"""If true, prevents the Resource from being deleted"""  
    
class PutPrimaryIpsIDPrimaryIPResponsePrimaryIPTypeEnum(str, Enum):
    r"""Type of the Primary IP"""
    IPV4 = 'ipv4'
    IPV6 = 'ipv6'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PutPrimaryIpsIDPrimaryIPResponsePrimaryIP:
    
    assignee_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignee_id') }})
    r"""ID of the resource the Primary IP is assigned to, null if it is not assigned at all"""  
    assignee_type: PutPrimaryIpsIDPrimaryIPResponsePrimaryIPAssigneeTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignee_type') }})
    r"""Resource type the Primary IP can be assigned to"""  
    auto_delete: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_delete') }})
    r"""Delete this Primary IP when the resource it is assigned to is deleted"""  
    blocked: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blocked') }})
    r"""Whether the IP is blocked"""  
    created: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created') }})
    r"""Point in time when the Resource was created (in ISO-8601 format)"""  
    datacenter: PutPrimaryIpsIDPrimaryIPResponsePrimaryIPDatacenter = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('datacenter') }})
    r"""Datacenter this Primary IP is located at"""  
    dns_ptr: list[PutPrimaryIpsIDPrimaryIPResponsePrimaryIPDNSPtr] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dns_ptr') }})
    r"""Array of reverse DNS entries"""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    ip: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ip') }})
    r"""IP address"""  
    labels: dict[str, str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels') }})
    r"""User-defined labels (key-value pairs)"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of the Resource. Must be unique per Project."""  
    protection: PutPrimaryIpsIDPrimaryIPResponsePrimaryIPProtection = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protection') }})
    r"""Protection configuration for the Resource"""  
    type: PutPrimaryIpsIDPrimaryIPResponsePrimaryIPTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of the Primary IP"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PutPrimaryIpsIDPrimaryIPResponse:
    r"""The `primary_ip` key contains the Primary IP that was just updated"""
    
    primary_ip: PutPrimaryIpsIDPrimaryIPResponsePrimaryIP = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary_ip') }})  
    

@dataclasses.dataclass
class PutPrimaryIpsIDResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    primary_ip_response: Optional[PutPrimaryIpsIDPrimaryIPResponse] = dataclasses.field(default=None)
    r"""The `primary_ip` key contains the Primary IP that was just updated"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    