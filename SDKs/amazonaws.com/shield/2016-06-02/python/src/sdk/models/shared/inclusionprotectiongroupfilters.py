"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import protectedresourcetype_enum as shared_protectedresourcetype_enum
from ..shared import protectiongroupaggregation_enum as shared_protectiongroupaggregation_enum
from ..shared import protectiongrouppattern_enum as shared_protectiongrouppattern_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InclusionProtectionGroupFilters:
    r"""Narrows the set of protection groups that the call retrieves. You can retrieve a single protection group by its name and you can retrieve all protection groups that are configured with a specific pattern, aggregation, or resource type. You can provide up to one criteria per filter type. Shield Advanced returns the protection groups that exactly match all of the search criteria that you provide."""
    
    aggregations: Optional[list[shared_protectiongroupaggregation_enum.ProtectionGroupAggregationEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Aggregations'), 'exclude': lambda f: f is None }})  
    patterns: Optional[list[shared_protectiongrouppattern_enum.ProtectionGroupPatternEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Patterns'), 'exclude': lambda f: f is None }})  
    protection_group_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProtectionGroupIds'), 'exclude': lambda f: f is None }})  
    resource_types: Optional[list[shared_protectedresourcetype_enum.ProtectedResourceTypeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResourceTypes'), 'exclude': lambda f: f is None }})  
    