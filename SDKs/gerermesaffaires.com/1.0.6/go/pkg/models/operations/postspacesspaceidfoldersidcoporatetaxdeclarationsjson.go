// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
)

type PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsJSONSecurity struct {
	GmaAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2AccountingWorkbookEnum string

const (
	PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2AccountingWorkbookEnumCustomer    PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2AccountingWorkbookEnum = "customer"
	PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2AccountingWorkbookEnumProvider    PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2AccountingWorkbookEnum = "provider"
	PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2AccountingWorkbookEnumBank        PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2AccountingWorkbookEnum = "bank"
	PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2AccountingWorkbookEnumCashWoucher PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2AccountingWorkbookEnum = "cashWoucher"
	PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2AccountingWorkbookEnumFiscal      PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2AccountingWorkbookEnum = "fiscal"
	PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2AccountingWorkbookEnumInsurance   PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2AccountingWorkbookEnum = "insurance"
	PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2AccountingWorkbookEnumSocial      PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2AccountingWorkbookEnum = "social"
	PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2AccountingWorkbookEnumOther       PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2AccountingWorkbookEnum = "other"
	PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2AccountingWorkbookEnumPermanent   PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2AccountingWorkbookEnum = "permanent"
)

func (e *PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2AccountingWorkbookEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "customer":
		fallthrough
	case "provider":
		fallthrough
	case "bank":
		fallthrough
	case "cashWoucher":
		fallthrough
	case "fiscal":
		fallthrough
	case "insurance":
		fallthrough
	case "social":
		fallthrough
	case "other":
		fallthrough
	case "permanent":
		*e = PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2AccountingWorkbookEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2AccountingWorkbookEnum: %s", s)
	}
}

type PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2Accounting struct {
	AccountedOn *string                                                                                  `json:"AccountedOn,omitempty"`
	Workbook    *PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2AccountingWorkbookEnum `json:"Workbook,omitempty"`
	YearMonth   *string                                                                                  `json:"YearMonth,omitempty"`
}

type PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2File struct {
	Content64Encoded *string `json:"Content64Encoded,omitempty"`
	Name             *string `json:"Name,omitempty"`
}

type PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2OrderEnum string

const (
	PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2OrderEnumOnestAdvance   PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2OrderEnum = "1st advance"
	PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2OrderEnumTwondAdvance   PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2OrderEnum = "2nd advance"
	PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2OrderEnumThreerdAdvance PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2OrderEnum = "3rd advance"
	PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2OrderEnumFourthAdvance  PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2OrderEnum = "4th advance"
	PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2OrderEnumRegularization PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2OrderEnum = "regularization"
)

func (e *PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2OrderEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1st advance":
		fallthrough
	case "2nd advance":
		fallthrough
	case "3rd advance":
		fallthrough
	case "4th advance":
		fallthrough
	case "regularization":
		*e = PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2OrderEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2OrderEnum: %s", s)
	}
}

type PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2 struct {
	Accounting      *PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2Accounting `json:"Accounting,omitempty"`
	Amount          *float32                                                                     `json:"Amount,omitempty"`
	Author          *string                                                                      `json:"Author,omitempty"`
	Code            *string                                                                      `json:"Code,omitempty"`
	Comment         *string                                                                      `json:"Comment,omitempty"`
	Date            *string                                                                      `json:"Date,omitempty"`
	DeclarationDate *string                                                                      `json:"DeclarationDate,omitempty"`
	File            PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2File        `json:"File"`
	Order           *PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2OrderEnum  `json:"Order,omitempty"`
	Rate            *float32                                                                     `json:"Rate,omitempty"`
	TaxBase         *float32                                                                     `json:"TaxBase,omitempty"`
	Title           string                                                                       `json:"Title"`
}

type PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON1OrderEnum string

const (
	PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON1OrderEnumOnestAdvance   PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON1OrderEnum = "1st advance"
	PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON1OrderEnumTwondAdvance   PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON1OrderEnum = "2nd advance"
	PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON1OrderEnumThreerdAdvance PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON1OrderEnum = "3rd advance"
	PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON1OrderEnumFourthAdvance  PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON1OrderEnum = "4th advance"
	PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON1OrderEnumRegularization PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON1OrderEnum = "regularization"
)

func (e *PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON1OrderEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1st advance":
		fallthrough
	case "2nd advance":
		fallthrough
	case "3rd advance":
		fallthrough
	case "4th advance":
		fallthrough
	case "regularization":
		*e = PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON1OrderEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON1OrderEnum: %s", s)
	}
}

type PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON1 struct {
	Amount          *float32                                                                    `json:"Amount,omitempty"`
	DeclarationDate *string                                                                     `json:"DeclarationDate,omitempty"`
	DocumentID      string                                                                      `json:"DocumentId"`
	Order           *PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON1OrderEnum `json:"Order,omitempty"`
	Rate            *float32                                                                    `json:"Rate,omitempty"`
	TaxBase         *float32                                                                    `json:"TaxBase,omitempty"`
}

type PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSONType string

const (
	PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSONTypePostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON1 PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSONType = "post_/spaces/{spaceId}/folders/{id}/coporate-tax-declarations_ApplicationJSON_1"
	PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSONTypePostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2 PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSONType = "post_/spaces/{spaceId}/folders/{id}/coporate-tax-declarations_ApplicationJSON_2"
)

type PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON struct {
	PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON1 *PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON1
	PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2 *PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2

	Type PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSONType
}

func CreatePostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSONPostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON1(postSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON1 PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON1) PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON {
	typ := PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSONTypePostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON1

	return PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON{
		PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON1: &postSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON1,
		Type: typ,
	}
}

func CreatePostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSONPostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2(postSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2 PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2) PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON {
	typ := PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSONTypePostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2

	return PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON{
		PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2: &postSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2,
		Type: typ,
	}
}

func (u *PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	postSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON1 := new(PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON1); err == nil {
		u.PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON1 = postSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON1
		u.Type = PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSONTypePostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON1
		return nil
	}

	postSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2 := new(PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2); err == nil {
		u.PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2 = postSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2
		u.Type = PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSONTypePostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON1 != nil {
		return json.Marshal(u.PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON1)
	}

	if u.PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2 != nil {
		return json.Marshal(u.PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON2)
	}

	return nil, nil
}

type PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsJSONRequest struct {
	// Corporate tax declaration to add (either (DeclarationDate,DocumentId) either (File,Name,Content64Encoded,Title,DeclarationDate) is mandatory)
	RequestBody PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsApplicationJSON `request:"mediaType=application/json"`
	// Id of the folder result and taxation
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Id of the space
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

// PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsJSON201ApplicationJSON - Id of document created
type PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsJSON201ApplicationJSON struct {
	ID *string `json:"Id,omitempty"`
}

type PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsJSONResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Id of document created
	PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsJSON201ApplicationJSONObject *PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsJSON201ApplicationJSON
}
