"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Any, Optional

class GetOrganizationActionBatchesStatusEnum(str, Enum):
    r"""Filter batches by status. Valid types are pending, completed, and failed."""
    COMPLETED = 'completed'
    FAILED = 'failed'
    PENDING = 'pending'


@dataclasses.dataclass
class GetOrganizationActionBatchesRequest:
    
    organization_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'organizationId', 'style': 'simple', 'explode': False }})  
    status: Optional[GetOrganizationActionBatchesStatusEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'status', 'style': 'form', 'explode': True }})
    r"""Filter batches by status. Valid types are pending, completed, and failed."""  
    

@dataclasses.dataclass
class GetOrganizationActionBatchesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_organization_action_batches_200_application_json_objects: Optional[list[dict[str, Any]]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    