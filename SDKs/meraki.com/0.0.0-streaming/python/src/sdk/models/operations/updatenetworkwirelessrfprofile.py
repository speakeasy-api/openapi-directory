"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class UpdateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnum(str, Enum):
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""
    TWO_4GHZ = '2.4ghz'
    FIVEGHZ = '5ghz'
    DUAL = 'dual'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfileRequestBodyApBandSettings:
    r"""Settings that will be enabled if selectionType is set to 'ap'."""
    
    band_operation_mode: Optional[UpdateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandOperationMode'), 'exclude': lambda f: f is None }})
    r"""Choice between 'dual', '2.4ghz' or '5ghz'."""  
    band_steering_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandSteeringEnabled'), 'exclude': lambda f: f is None }})
    r"""Steers client to most open band. Can be either true or false."""  
    
class UpdateNetworkWirelessRfProfileRequestBodyBandSelectionTypeEnum(str, Enum):
    r"""Band selection can be set to either 'ssid' or 'ap'."""
    AP = 'ap'
    SSID = 'ssid'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfileRequestBodyFiveGhzSettings:
    r"""Settings related to 5Ghz band"""
    
    channel_width: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelWidth'), 'exclude': lambda f: f is None }})
    r"""Sets channel width (MHz) for 5Ghz band. Can be one of 'auto', '20', '40' or '80'."""  
    max_power: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxPower'), 'exclude': lambda f: f is None }})
    r"""Sets max power (dBm) of 5Ghz band. Can be integer between 2 and 30."""  
    min_bitrate: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minBitrate'), 'exclude': lambda f: f is None }})
    r"""Sets min bitrate (Mbps) of 5Ghz band. Can be one of '6', '9', '12', '18', '24', '36', '48' or '54'."""  
    min_power: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minPower'), 'exclude': lambda f: f is None }})
    r"""Sets min power (dBm) of 5Ghz band. Can be integer between 2 and 30."""  
    rxsop: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rxsop'), 'exclude': lambda f: f is None }})
    r"""The RX-SOP level controls the sensitivity of the radio. It is strongly recommended to use RX-SOP only after consulting a wireless expert. RX-SOP can be configured in the range of -65 to -95 (dBm). A value of null will reset this to the default."""  
    valid_auto_channels: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validAutoChannels'), 'exclude': lambda f: f is None }})
    r"""Sets valid auto channels for 5Ghz band. Can be one of '36', '40', '44', '48', '52', '56', '60', '64', '100', '104', '108', '112', '116', '120', '124', '128', '132', '136', '140', '144', '149', '153', '157', '161' or '165'."""  
    
class UpdateNetworkWirelessRfProfileRequestBodyMinBitrateTypeEnum(str, Enum):
    r"""Minimum bitrate can be set to either 'band' or 'ssid'."""
    BAND = 'band'
    SSID = 'ssid'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfileRequestBodyTwoFourGhzSettings:
    r"""Settings related to 2.4Ghz band"""
    
    ax_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('axEnabled'), 'exclude': lambda f: f is None }})
    r"""Determines whether ax radio on 2.4Ghz band is on or off. Can be either true or false. If false, we highly recommend disabling band steering."""  
    max_power: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxPower'), 'exclude': lambda f: f is None }})
    r"""Sets max power (dBm) of 2.4Ghz band. Can be integer between 2 and 30."""  
    min_bitrate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minBitrate'), 'exclude': lambda f: f is None }})
    r"""Sets min bitrate (Mbps) of 2.4Ghz band. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'."""  
    min_power: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minPower'), 'exclude': lambda f: f is None }})
    r"""Sets min power (dBm) of 2.4Ghz band. Can be integer between 2 and 30."""  
    rxsop: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rxsop'), 'exclude': lambda f: f is None }})
    r"""The RX-SOP level controls the sensitivity of the radio. It is strongly recommended to use RX-SOP only after consulting a wireless expert. RX-SOP can be configured in the range of -65 to -95 (dBm). A value of null will reset this to the default."""  
    valid_auto_channels: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validAutoChannels'), 'exclude': lambda f: f is None }})
    r"""Sets valid auto channels for 2.4Ghz band. Can be one of '1', '6' or '11'."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkWirelessRfProfileRequestBody:
    
    ap_band_settings: Optional[UpdateNetworkWirelessRfProfileRequestBodyApBandSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('apBandSettings'), 'exclude': lambda f: f is None }})
    r"""Settings that will be enabled if selectionType is set to 'ap'."""  
    band_selection_type: Optional[UpdateNetworkWirelessRfProfileRequestBodyBandSelectionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandSelectionType'), 'exclude': lambda f: f is None }})
    r"""Band selection can be set to either 'ssid' or 'ap'."""  
    client_balancing_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientBalancingEnabled'), 'exclude': lambda f: f is None }})
    r"""Steers client to best available access point. Can be either true or false."""  
    five_ghz_settings: Optional[UpdateNetworkWirelessRfProfileRequestBodyFiveGhzSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fiveGhzSettings'), 'exclude': lambda f: f is None }})
    r"""Settings related to 5Ghz band"""  
    min_bitrate_type: Optional[UpdateNetworkWirelessRfProfileRequestBodyMinBitrateTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minBitrateType'), 'exclude': lambda f: f is None }})
    r"""Minimum bitrate can be set to either 'band' or 'ssid'."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the new profile. Must be unique."""  
    two_four_ghz_settings: Optional[UpdateNetworkWirelessRfProfileRequestBodyTwoFourGhzSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('twoFourGhzSettings'), 'exclude': lambda f: f is None }})
    r"""Settings related to 2.4Ghz band"""  
    

@dataclasses.dataclass
class UpdateNetworkWirelessRfProfileRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    rf_profile_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'rfProfileId', 'style': 'simple', 'explode': False }})  
    request_body: Optional[UpdateNetworkWirelessRfProfileRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class UpdateNetworkWirelessRfProfileResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_network_wireless_rf_profile_200_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    