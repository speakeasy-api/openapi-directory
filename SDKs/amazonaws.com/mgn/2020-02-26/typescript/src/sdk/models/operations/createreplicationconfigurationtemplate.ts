/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

/**
 * Request to configure data plane routing during Replication Settings template creation.
 */
export enum CreateReplicationConfigurationTemplateRequestBodyDataPlaneRoutingEnum {
  PrivateIp = "PRIVATE_IP",
  PublicIp = "PUBLIC_IP",
}

/**
 * Request to configure the default large staging disk EBS volume type during Replication Settings template creation.
 */
export enum CreateReplicationConfigurationTemplateRequestBodyDefaultLargeStagingDiskTypeEnum {
  Gp2 = "GP2",
  St1 = "ST1",
  Gp3 = "GP3",
}

/**
 * Request to configure EBS encryption during Replication Settings template creation.
 */
export enum CreateReplicationConfigurationTemplateRequestBodyEbsEncryptionEnum {
  Default = "DEFAULT",
  Custom = "CUSTOM",
}

export class CreateReplicationConfigurationTemplateRequestBody extends SpeakeasyBase {
  /**
   * Request to associate the default Application Migration Service Security group with the Replication Settings template.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "associateDefaultSecurityGroup" })
  associateDefaultSecurityGroup: boolean;

  /**
   * Request to configure bandwidth throttling during Replication Settings template creation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bandwidthThrottling" })
  bandwidthThrottling: number;

  /**
   * Request to create Public IP during Replication Settings template creation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createPublicIP" })
  createPublicIP: boolean;

  /**
   * Request to configure data plane routing during Replication Settings template creation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dataPlaneRouting" })
  dataPlaneRouting: CreateReplicationConfigurationTemplateRequestBodyDataPlaneRoutingEnum;

  /**
   * Request to configure the default large staging disk EBS volume type during Replication Settings template creation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "defaultLargeStagingDiskType" })
  defaultLargeStagingDiskType: CreateReplicationConfigurationTemplateRequestBodyDefaultLargeStagingDiskTypeEnum;

  /**
   * Request to configure EBS encryption during Replication Settings template creation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ebsEncryption" })
  ebsEncryption: CreateReplicationConfigurationTemplateRequestBodyEbsEncryptionEnum;

  /**
   * Request to configure an EBS encryption key during Replication Settings template creation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ebsEncryptionKeyArn" })
  ebsEncryptionKeyArn?: string;

  /**
   * Request to configure the Replication Server instance type during Replication Settings template creation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "replicationServerInstanceType" })
  replicationServerInstanceType: string;

  /**
   * Request to configure the Replication Server Security group ID during Replication Settings template creation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "replicationServersSecurityGroupsIDs" })
  replicationServersSecurityGroupsIDs: string[];

  /**
   * Request to configure the Staging Area subnet ID during Replication Settings template creation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stagingAreaSubnetId" })
  stagingAreaSubnetId: string;

  /**
   * Request to configure Staging Area tags during Replication Settings template creation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stagingAreaTags" })
  stagingAreaTags: Record<string, string>;

  /**
   * Request to configure tags during Replication Settings template creation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;

  /**
   * Request to use Dedicated Replication Servers during Replication Settings template creation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "useDedicatedReplicationServer" })
  useDedicatedReplicationServer: boolean;
}

export class CreateReplicationConfigurationTemplateRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateReplicationConfigurationTemplateRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateReplicationConfigurationTemplateResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  replicationConfigurationTemplate?: shared.ReplicationConfigurationTemplate;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * UninitializedAccountException
   */
  @SpeakeasyMetadata()
  uninitializedAccountException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
