Metadata-Version: 2.1
Name: openapi
Version: 0.0.1
Summary: Python Client SDK Generated by Speakeasy
Author: Speakeasy
Requires-Python: >=3.9
Description-Content-Type: text/markdown

# openapi

<!-- Start SDK Installation -->
## SDK Installation

```bash
pip install git+https://github.com/speakeasy-api/openapi-directory.git#subdirectory=SDKs/googleapis.com/accesscontextmanager/v1beta/python
```
<!-- End SDK Installation -->

## SDK Example Usage
<!-- Start SDK Example Usage -->
```python
import sdk
from sdk.models import operations, shared

s = sdk.SDK()


req = operations.AccesscontextmanagerAccessPoliciesAccessLevelsCreateRequest(
    dollar_xgafv="2",
    access_level=shared.AccessLevel(
        basic=shared.BasicLevel(
            combining_function="OR",
            conditions=[
                shared.Condition(
                    device_policy=shared.DevicePolicy(
                        allowed_device_management_levels=[
                            "BASIC",
                            "COMPLETE",
                            "BASIC",
                            "COMPLETE",
                        ],
                        allowed_encryption_statuses=[
                            "UNENCRYPTED",
                            "UNENCRYPTED",
                        ],
                        os_constraints=[
                            shared.OsConstraint(
                                minimum_version="iure",
                                os_type="DESKTOP_WINDOWS",
                                require_verified_chrome_os=False,
                            ),
                            shared.OsConstraint(
                                minimum_version="debitis",
                                os_type="OS_UNSPECIFIED",
                                require_verified_chrome_os=False,
                            ),
                        ],
                        require_admin_approval=False,
                        require_corp_owned=False,
                        require_screenlock=False,
                    ),
                    ip_subnetworks=[
                        "tempora",
                        "suscipit",
                        "molestiae",
                        "minus",
                    ],
                    members=[
                        "voluptatum",
                        "iusto",
                        "excepturi",
                        "nisi",
                    ],
                    negate=False,
                    regions=[
                        "temporibus",
                        "ab",
                        "quis",
                        "veritatis",
                    ],
                    required_access_levels=[
                        "perferendis",
                        "ipsam",
                        "repellendus",
                    ],
                ),
                shared.Condition(
                    device_policy=shared.DevicePolicy(
                        allowed_device_management_levels=[
                            "COMPLETE",
                            "MANAGEMENT_UNSPECIFIED",
                            "COMPLETE",
                            "COMPLETE",
                        ],
                        allowed_encryption_statuses=[
                            "ENCRYPTION_UNSUPPORTED",
                            "ENCRYPTED",
                            "ENCRYPTED",
                            "ENCRYPTION_UNSUPPORTED",
                        ],
                        os_constraints=[
                            shared.OsConstraint(
                                minimum_version="porro",
                                os_type="DESKTOP_CHROME_OS",
                                require_verified_chrome_os=False,
                            ),
                            shared.OsConstraint(
                                minimum_version="dicta",
                                os_type="ANDROID",
                                require_verified_chrome_os=False,
                            ),
                            shared.OsConstraint(
                                minimum_version="officia",
                                os_type="DESKTOP_CHROME_OS",
                                require_verified_chrome_os=False,
                            ),
                        ],
                        require_admin_approval=False,
                        require_corp_owned=False,
                        require_screenlock=False,
                    ),
                    ip_subnetworks=[
                        "deleniti",
                    ],
                    members=[
                        "optio",
                        "totam",
                        "beatae",
                        "commodi",
                    ],
                    negate=False,
                    regions=[
                        "modi",
                        "qui",
                    ],
                    required_access_levels=[
                        "cum",
                        "esse",
                        "ipsum",
                        "excepturi",
                    ],
                ),
                shared.Condition(
                    device_policy=shared.DevicePolicy(
                        allowed_device_management_levels=[
                            "MANAGEMENT_UNSPECIFIED",
                        ],
                        allowed_encryption_statuses=[
                            "UNENCRYPTED",
                            "ENCRYPTION_UNSPECIFIED",
                        ],
                        os_constraints=[
                            shared.OsConstraint(
                                minimum_version="dolor",
                                os_type="DESKTOP_CHROME_OS",
                                require_verified_chrome_os=False,
                            ),
                            shared.OsConstraint(
                                minimum_version="laboriosam",
                                os_type="IOS",
                                require_verified_chrome_os=False,
                            ),
                            shared.OsConstraint(
                                minimum_version="saepe",
                                os_type="DESKTOP_CHROME_OS",
                                require_verified_chrome_os=False,
                            ),
                        ],
                        require_admin_approval=False,
                        require_corp_owned=False,
                        require_screenlock=False,
                    ),
                    ip_subnetworks=[
                        "corporis",
                        "iste",
                    ],
                    members=[
                        "saepe",
                        "quidem",
                    ],
                    negate=False,
                    regions=[
                        "ipsa",
                    ],
                    required_access_levels=[
                        "est",
                        "mollitia",
                        "laborum",
                        "dolores",
                    ],
                ),
            ],
        ),
        custom=shared.CustomLevel(
            expr=shared.Expr(
                description="dolorem",
                expression="corporis",
                location="explicabo",
                title="Miss",
            ),
        ),
        description="enim",
        name="omnis",
        title="Mrs.",
    ),
    access_token="minima",
    alt="media",
    callback="accusantium",
    fields_="iure",
    key="culpa",
    oauth_token="doloribus",
    parent="sapiente",
    pretty_print=False,
    quota_user="architecto",
    upload_type="mollitia",
    upload_protocol="dolorem",
)
    
res = s.access_policies.accesscontextmanager_access_policies_access_levels_create(req, operations.AccesscontextmanagerAccessPoliciesAccessLevelsCreateSecurity(
    oauth2="Bearer YOUR_ACCESS_TOKEN_HERE",
    oauth2c="Bearer YOUR_ACCESS_TOKEN_HERE",
))

if res.operation is not None:
    # handle response
```
<!-- End SDK Example Usage -->

<!-- Start SDK Available Operations -->
## Available Resources and Operations


### access_policies

* `accesscontextmanager_access_policies_access_levels_create` - Create an Access Level. The longrunning operation from this RPC will have a successful status once the Access Level has propagated to long-lasting storage. Access Levels containing errors will result in an error response for the first error encountered.
* `accesscontextmanager_access_policies_access_levels_list` - List all Access Levels for an access policy.
* `accesscontextmanager_access_policies_create` - Create an `AccessPolicy`. Fails if this organization already has a `AccessPolicy`. The longrunning Operation will have a successful status once the `AccessPolicy` has propagated to long-lasting storage. Syntactic and basic semantic errors will be returned in `metadata` as a BadRequest proto.
* `accesscontextmanager_access_policies_list` - List all AccessPolicies under a container.
* `accesscontextmanager_access_policies_service_perimeters_create` - Create a Service Perimeter. The longrunning operation from this RPC will have a successful status once the Service Perimeter has propagated to long-lasting storage. Service Perimeters containing errors will result in an error response for the first error encountered.
* `accesscontextmanager_access_policies_service_perimeters_delete` - Delete a Service Perimeter by resource name. The longrunning operation from this RPC will have a successful status once the Service Perimeter has been removed from long-lasting storage.
* `accesscontextmanager_access_policies_service_perimeters_list` - List all Service Perimeters for an access policy.
* `accesscontextmanager_access_policies_service_perimeters_patch` - Update a Service Perimeter. The longrunning operation from this RPC will have a successful status once the changes to the Service Perimeter have propagated to long-lasting storage. Service Perimeter containing errors will result in an error response for the first error encountered.

### operations

* `accesscontextmanager_operations_get` - Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
<!-- End SDK Available Operations -->

### Maturity

This SDK is in beta, and there may be breaking changes between versions without a major version update. Therefore, we recommend pinning usage
to a specific package version. This way, you can install the same version each time without breaking changes unless you are intentionally
looking for the latest version.

### Contributions

While we value open-source contributions to this SDK, this library is generated programmatically.
Feel free to open a PR or a Github issue as a proof of concept and we'll do our best to include it in a future release !

### SDK Created by [Speakeasy](https://docs.speakeasyapi.dev/docs/using-speakeasy/client-sdks)
