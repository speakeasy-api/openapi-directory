"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ParameterMetadataParamTypeEnum(str, Enum):
    r"""Optional. The type of the parameter. Used for selecting input picker."""
    DEFAULT = 'DEFAULT'
    TEXT = 'TEXT'
    GCS_READ_BUCKET = 'GCS_READ_BUCKET'
    GCS_WRITE_BUCKET = 'GCS_WRITE_BUCKET'
    GCS_READ_FILE = 'GCS_READ_FILE'
    GCS_WRITE_FILE = 'GCS_WRITE_FILE'
    GCS_READ_FOLDER = 'GCS_READ_FOLDER'
    GCS_WRITE_FOLDER = 'GCS_WRITE_FOLDER'
    PUBSUB_TOPIC = 'PUBSUB_TOPIC'
    PUBSUB_SUBSCRIPTION = 'PUBSUB_SUBSCRIPTION'
    BIGQUERY_TABLE = 'BIGQUERY_TABLE'
    JAVASCRIPT_UDF_FILE = 'JAVASCRIPT_UDF_FILE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ParameterMetadata:
    r"""Metadata for a specific parameter."""
    
    custom_metadata: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customMetadata'), 'exclude': lambda f: f is None }})
    r"""Optional. Additional metadata for describing this parameter."""  
    group_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupName'), 'exclude': lambda f: f is None }})
    r"""Optional. Specifies a group name for this parameter to be rendered under. Group header text will be rendered exactly as specified in this field. Only considered when parent_name is NOT provided."""  
    help_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('helpText'), 'exclude': lambda f: f is None }})
    r"""Required. The help text to display for the parameter."""  
    is_optional: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isOptional'), 'exclude': lambda f: f is None }})
    r"""Optional. Whether the parameter is optional. Defaults to false."""  
    label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label'), 'exclude': lambda f: f is None }})
    r"""Required. The label to display for the parameter."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Required. The name of the parameter."""  
    param_type: Optional[ParameterMetadataParamTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paramType'), 'exclude': lambda f: f is None }})
    r"""Optional. The type of the parameter. Used for selecting input picker."""  
    parent_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parentName'), 'exclude': lambda f: f is None }})
    r"""Optional. Specifies the name of the parent parameter. Used in conjunction with 'parent_trigger_values' to make this parameter conditional (will only be rendered conditionally). Should be mappable to a ParameterMetadata.name field."""  
    parent_trigger_values: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parentTriggerValues'), 'exclude': lambda f: f is None }})
    r"""Optional. The value(s) of the 'parent_name' parameter which will trigger this parameter to be shown. If left empty, ANY non-empty value in parent_name will trigger this parameter to be shown. Only considered when this parameter is conditional (when 'parent_name' has been provided)."""  
    regexes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('regexes'), 'exclude': lambda f: f is None }})
    r"""Optional. Regexes that the parameter must match."""  
    