"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Optional

GET_VISUAL_CROSSING_WEB_SERVICES_REST_SERVICES_TIMELINE_LOCATION_SERVERS = [
	"https://weather.visualcrossing.com",
]


@dataclasses.dataclass
class GetVisualCrossingWebServicesRestServicesTimelineLocationRequest:
    
    key: str = dataclasses.field(metadata={'query_param': { 'field_name': 'key', 'style': 'form', 'explode': True }})  
    location: str = dataclasses.field(metadata={'path_param': { 'field_name': 'location', 'style': 'simple', 'explode': False }})
    r"""Locaton of interest as an address, partial address or decimal latitude,longtude value"""  
    content_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'contentType', 'style': 'form', 'explode': True }})
    r"""data format of the output either json or CSV"""  
    include: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include', 'style': 'form', 'explode': True }})
    r"""data to include in the output (required for CSV format - days,hours,alerts,current,events )"""  
    lang: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'lang', 'style': 'form', 'explode': True }})
    r"""Language to use for weather descriptions"""  
    unit_group: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'unitGroup', 'style': 'form', 'explode': True }})  
    

@dataclasses.dataclass
class GetVisualCrossingWebServicesRestServicesTimelineLocationResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    