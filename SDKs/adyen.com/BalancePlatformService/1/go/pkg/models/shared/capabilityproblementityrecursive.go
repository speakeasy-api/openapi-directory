// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CapabilityProblemEntityRecursiveTypeEnum - Type of entity.
//
// Possible values: **LegalEntity**, **BankAccount**, **Document**.
type CapabilityProblemEntityRecursiveTypeEnum string

const (
	CapabilityProblemEntityRecursiveTypeEnumBankAccount CapabilityProblemEntityRecursiveTypeEnum = "BankAccount"
	CapabilityProblemEntityRecursiveTypeEnumDocument    CapabilityProblemEntityRecursiveTypeEnum = "Document"
	CapabilityProblemEntityRecursiveTypeEnumLegalEntity CapabilityProblemEntityRecursiveTypeEnum = "LegalEntity"
)

func (e *CapabilityProblemEntityRecursiveTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BankAccount":
		fallthrough
	case "Document":
		fallthrough
	case "LegalEntity":
		*e = CapabilityProblemEntityRecursiveTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CapabilityProblemEntityRecursiveTypeEnum: %s", s)
	}
}

type CapabilityProblemEntityRecursive struct {
	// The ID of the entity.
	ID *string `json:"id,omitempty"`
	// Type of entity.
	//
	// Possible values: **LegalEntity**, **BankAccount**, **Document**.
	Type *CapabilityProblemEntityRecursiveTypeEnum `json:"type,omitempty"`
}
