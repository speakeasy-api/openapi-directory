/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.net.http.HttpResponse;

public class SendSerialConsoleSSHPublicKeyResponse {
    /**
     * AuthException
     */
    
    public Object authException;

    public SendSerialConsoleSSHPublicKeyResponse withAuthException(Object authException) {
        this.authException = authException;
        return this;
    }
    
    
    public String contentType;

    public SendSerialConsoleSSHPublicKeyResponse withContentType(String contentType) {
        this.contentType = contentType;
        return this;
    }
    
    /**
     * EC2InstanceNotFoundException
     */
    
    public Object ec2InstanceNotFoundException;

    public SendSerialConsoleSSHPublicKeyResponse withEc2InstanceNotFoundException(Object ec2InstanceNotFoundException) {
        this.ec2InstanceNotFoundException = ec2InstanceNotFoundException;
        return this;
    }
    
    /**
     * EC2InstanceStateInvalidException
     */
    
    public Object ec2InstanceStateInvalidException;

    public SendSerialConsoleSSHPublicKeyResponse withEc2InstanceStateInvalidException(Object ec2InstanceStateInvalidException) {
        this.ec2InstanceStateInvalidException = ec2InstanceStateInvalidException;
        return this;
    }
    
    /**
     * EC2InstanceTypeInvalidException
     */
    
    public Object ec2InstanceTypeInvalidException;

    public SendSerialConsoleSSHPublicKeyResponse withEc2InstanceTypeInvalidException(Object ec2InstanceTypeInvalidException) {
        this.ec2InstanceTypeInvalidException = ec2InstanceTypeInvalidException;
        return this;
    }
    
    /**
     * EC2InstanceUnavailableException
     */
    
    public Object ec2InstanceUnavailableException;

    public SendSerialConsoleSSHPublicKeyResponse withEc2InstanceUnavailableException(Object ec2InstanceUnavailableException) {
        this.ec2InstanceUnavailableException = ec2InstanceUnavailableException;
        return this;
    }
    
    /**
     * InvalidArgsException
     */
    
    public Object invalidArgsException;

    public SendSerialConsoleSSHPublicKeyResponse withInvalidArgsException(Object invalidArgsException) {
        this.invalidArgsException = invalidArgsException;
        return this;
    }
    
    /**
     * Success
     */
    
    public org.openapis.openapi.models.shared.SendSerialConsoleSSHPublicKeyResponse sendSerialConsoleSSHPublicKeyResponse;

    public SendSerialConsoleSSHPublicKeyResponse withSendSerialConsoleSSHPublicKeyResponse(org.openapis.openapi.models.shared.SendSerialConsoleSSHPublicKeyResponse sendSerialConsoleSSHPublicKeyResponse) {
        this.sendSerialConsoleSSHPublicKeyResponse = sendSerialConsoleSSHPublicKeyResponse;
        return this;
    }
    
    /**
     * SerialConsoleSessionUnavailableException
     */
    
    public Object serialConsoleSessionUnavailableException;

    public SendSerialConsoleSSHPublicKeyResponse withSerialConsoleSessionUnavailableException(Object serialConsoleSessionUnavailableException) {
        this.serialConsoleSessionUnavailableException = serialConsoleSessionUnavailableException;
        return this;
    }
    
    
    public Integer statusCode;

    public SendSerialConsoleSSHPublicKeyResponse withStatusCode(Integer statusCode) {
        this.statusCode = statusCode;
        return this;
    }
    
    
    public HttpResponse<byte[]> rawResponse;

    public SendSerialConsoleSSHPublicKeyResponse withRawResponse(HttpResponse<byte[]> rawResponse) {
        this.rawResponse = rawResponse;
        return this;
    }
    
    /**
     * SerialConsoleAccessDisabledException
     */
    
    public Object serialConsoleAccessDisabledException;

    public SendSerialConsoleSSHPublicKeyResponse withSerialConsoleAccessDisabledException(Object serialConsoleAccessDisabledException) {
        this.serialConsoleAccessDisabledException = serialConsoleAccessDisabledException;
        return this;
    }
    
    /**
     * SerialConsoleSessionLimitExceededException
     */
    
    public Object serialConsoleSessionLimitExceededException;

    public SendSerialConsoleSSHPublicKeyResponse withSerialConsoleSessionLimitExceededException(Object serialConsoleSessionLimitExceededException) {
        this.serialConsoleSessionLimitExceededException = serialConsoleSessionLimitExceededException;
        return this;
    }
    
    /**
     * ServiceException
     */
    
    public Object serviceException;

    public SendSerialConsoleSSHPublicKeyResponse withServiceException(Object serviceException) {
        this.serviceException = serviceException;
        return this;
    }
    
    /**
     * ThrottlingException
     */
    
    public Object throttlingException;

    public SendSerialConsoleSSHPublicKeyResponse withThrottlingException(Object throttlingException) {
        this.throttlingException = throttlingException;
        return this;
    }
    
    public SendSerialConsoleSSHPublicKeyResponse(@JsonProperty("ContentType") String contentType, @JsonProperty("StatusCode") Integer statusCode) {
        this.contentType = contentType;
        this.statusCode = statusCode;
  }
}
