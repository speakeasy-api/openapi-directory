"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetNetworkWirelessSettingsRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkWirelessSettings200ApplicationJSONNamedVlansPoolDhcpMonitoring:
    r"""Named VLAN Pool DHCP Monitoring settings."""
    
    duration: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration'), 'exclude': lambda f: f is None }})
    r"""The duration in minutes that devices will refrain from using dirty VLANs before adding them back to the pool."""  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Whether or not devices using named VLAN pools should remove dirty VLANs from the pool, thereby preventing clients from being assigned to VLANs where they would be unable to obtain an IP address via DHCP"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkWirelessSettings200ApplicationJSONNamedVlans:
    r"""Named VLAN settings for wireless networks."""
    
    pool_dhcp_monitoring: Optional[GetNetworkWirelessSettings200ApplicationJSONNamedVlansPoolDhcpMonitoring] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('poolDhcpMonitoring'), 'exclude': lambda f: f is None }})
    r"""Named VLAN Pool DHCP Monitoring settings."""  
    
class GetNetworkWirelessSettings200ApplicationJSONUpgradeStrategyEnum(str, Enum):
    r"""The upgrade strategy to apply to the network. Must be one of 'minimizeUpgradeTime' or 'minimizeClientDowntime'. Requires firmware version MR 26.8 or higher'"""
    MINIMIZE_CLIENT_DOWNTIME = 'minimizeClientDowntime'
    MINIMIZE_UPGRADE_TIME = 'minimizeUpgradeTime'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkWirelessSettings200ApplicationJSON:
    r"""Successful operation"""
    
    ipv6_bridge_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipv6BridgeEnabled'), 'exclude': lambda f: f is None }})
    r"""Toggle for enabling or disabling IPv6 bridging in a network (Note: if enabled, SSIDs must also be configured to use bridge mode)"""  
    led_lights_on: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ledLightsOn'), 'exclude': lambda f: f is None }})
    r"""Toggle for enabling or disabling LED lights on all APs in the network (making them run dark)"""  
    location_analytics_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locationAnalyticsEnabled'), 'exclude': lambda f: f is None }})
    r"""Toggle for enabling or disabling location analytics for your network"""  
    meshing_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meshingEnabled'), 'exclude': lambda f: f is None }})
    r"""Toggle for enabling or disabling meshing in a network"""  
    named_vlans: Optional[GetNetworkWirelessSettings200ApplicationJSONNamedVlans] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('namedVlans'), 'exclude': lambda f: f is None }})
    r"""Named VLAN settings for wireless networks."""  
    upgrade_strategy: Optional[GetNetworkWirelessSettings200ApplicationJSONUpgradeStrategyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upgradeStrategy'), 'exclude': lambda f: f is None }})
    r"""The upgrade strategy to apply to the network. Must be one of 'minimizeUpgradeTime' or 'minimizeClientDowntime'. Requires firmware version MR 26.8 or higher'"""  
    

@dataclasses.dataclass
class GetNetworkWirelessSettingsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_network_wireless_settings_200_application_json_object: Optional[GetNetworkWirelessSettings200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    