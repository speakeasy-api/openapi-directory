/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Create, modify or delete contacts
 */
export class Contacts {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Create contact
   */
  contactsCreateJson(
    req: operations.ContactsCreateJsonRequest,
    security: operations.ContactsCreateJsonSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContactsCreateJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContactsCreateJsonRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/accounts/{accountId}/contacts",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "contactRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContactsCreateJsonSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContactsCreateJsonResponse =
        new operations.ContactsCreateJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.contactsCreateJSON201ApplicationJSONOneOf = httpRes?.data;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create contact
   */
  contactsCreateString(
    req: operations.ContactsCreateStringRequest,
    security: operations.ContactsCreateStringSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContactsCreateStringResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContactsCreateStringRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/accounts/{accountId}/contacts",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "string"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContactsCreateStringSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContactsCreateStringResponse =
        new operations.ContactsCreateStringResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.contactsCreateString201ApplicationJSONOneOf = httpRes?.data;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Fetch contact by ID
   */
  contactsFetch(
    req: operations.ContactsFetchRequest,
    security: operations.ContactsFetchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContactsFetchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContactsFetchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/accounts/{accountId}/contacts/{contactId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContactsFetchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContactsFetchResponse =
        new operations.ContactsFetchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.contactResponse = utils.objectToClass(
              httpRes?.data,
              shared.ContactResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Fetch contacts
   */
  contactsFetchAll(
    req: operations.ContactsFetchAllRequest,
    security: operations.ContactsFetchAllSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContactsFetchAllResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContactsFetchAllRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/accounts/{accountId}/contacts",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContactsFetchAllSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContactsFetchAllResponse =
        new operations.ContactsFetchAllResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.contactsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ContactsResponse
            );
          }
          break;
        case (httpRes?.status >= 400 && httpRes?.status < 500) ||
          (httpRes?.status >= 500 && httpRes?.status < 600):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a contact
   */
  contactsRemove(
    req: operations.ContactsRemoveRequest,
    security: operations.ContactsRemoveSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContactsRemoveResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContactsRemoveRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/accounts/{accountId}/contacts/{contactId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContactsRemoveSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContactsRemoveResponse =
        new operations.ContactsRemoveResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.contactsRemove200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.ContactsRemove200ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a contact
   */
  contactsUpdate(
    req: operations.ContactsUpdateRequest,
    security: operations.ContactsUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContactsUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContactsUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/accounts/{accountId}/contacts/{contactId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContactsUpdateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContactsUpdateResponse =
        new operations.ContactsUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.contactResponse = utils.objectToClass(
              httpRes?.data,
              shared.ContactResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
