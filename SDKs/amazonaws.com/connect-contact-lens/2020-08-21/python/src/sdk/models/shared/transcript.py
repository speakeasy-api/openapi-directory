"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import issuedetected as shared_issuedetected
from ..shared import sentimentvalue_enum as shared_sentimentvalue_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Transcript:
    r"""A list of messages in the session."""
    
    begin_offset_millis: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BeginOffsetMillis') }})  
    content: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Content') }})  
    end_offset_millis: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndOffsetMillis') }})  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id') }})  
    participant_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ParticipantId') }})  
    participant_role: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ParticipantRole') }})  
    sentiment: shared_sentimentvalue_enum.SentimentValueEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Sentiment') }})  
    issues_detected: Optional[list[shared_issuedetected.IssueDetected]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IssuesDetected'), 'exclude': lambda f: f is None }})  
    