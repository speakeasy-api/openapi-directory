<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Reward 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create a reward
     * 
     * Create a reward for a patient.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreateRewardRequestInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateRewardResponse
     */
	public function createReward(
        \OpenAPI\OpenAPI\Models\Shared\CreateRewardRequestInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateRewardResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/reward');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateRewardResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.api+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createRewardResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateRewardResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 409) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.api+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrUpdateErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateOrUpdateErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a reward
     * 
     * Get a reward record by id.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchRewardRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchRewardResponse
     */
	public function fetchReward(
        \OpenAPI\OpenAPI\Models\Operations\FetchRewardRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchRewardResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/reward/{id}', \OpenAPI\OpenAPI\Models\Operations\FetchRewardRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchRewardResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.api+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fetchRewardResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FetchRewardResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.api+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fetchErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FetchErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List rewards
     * 
     * Get a list of rewards matching the specified filters.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchRewardsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchRewardsResponse
     */
	public function fetchRewards(
        \OpenAPI\OpenAPI\Models\Operations\FetchRewardsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchRewardsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/reward');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FetchRewardsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchRewardsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.api+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fetchRewardsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FetchRewardsResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.api+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fetchErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FetchErrorResponse', 'json');
            }
        }

        return $response;
    }
}