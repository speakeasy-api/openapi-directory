// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GoogleSecuritySafebrowsingV4ThreatMatchPlatformTypeEnum - The platform type matching this threat.
type GoogleSecuritySafebrowsingV4ThreatMatchPlatformTypeEnum string

const (
	GoogleSecuritySafebrowsingV4ThreatMatchPlatformTypeEnumPlatformTypeUnspecified GoogleSecuritySafebrowsingV4ThreatMatchPlatformTypeEnum = "PLATFORM_TYPE_UNSPECIFIED"
	GoogleSecuritySafebrowsingV4ThreatMatchPlatformTypeEnumWindows                 GoogleSecuritySafebrowsingV4ThreatMatchPlatformTypeEnum = "WINDOWS"
	GoogleSecuritySafebrowsingV4ThreatMatchPlatformTypeEnumLinux                   GoogleSecuritySafebrowsingV4ThreatMatchPlatformTypeEnum = "LINUX"
	GoogleSecuritySafebrowsingV4ThreatMatchPlatformTypeEnumAndroid                 GoogleSecuritySafebrowsingV4ThreatMatchPlatformTypeEnum = "ANDROID"
	GoogleSecuritySafebrowsingV4ThreatMatchPlatformTypeEnumOsx                     GoogleSecuritySafebrowsingV4ThreatMatchPlatformTypeEnum = "OSX"
	GoogleSecuritySafebrowsingV4ThreatMatchPlatformTypeEnumIos                     GoogleSecuritySafebrowsingV4ThreatMatchPlatformTypeEnum = "IOS"
	GoogleSecuritySafebrowsingV4ThreatMatchPlatformTypeEnumAnyPlatform             GoogleSecuritySafebrowsingV4ThreatMatchPlatformTypeEnum = "ANY_PLATFORM"
	GoogleSecuritySafebrowsingV4ThreatMatchPlatformTypeEnumAllPlatforms            GoogleSecuritySafebrowsingV4ThreatMatchPlatformTypeEnum = "ALL_PLATFORMS"
	GoogleSecuritySafebrowsingV4ThreatMatchPlatformTypeEnumChrome                  GoogleSecuritySafebrowsingV4ThreatMatchPlatformTypeEnum = "CHROME"
)

func (e GoogleSecuritySafebrowsingV4ThreatMatchPlatformTypeEnum) ToPointer() *GoogleSecuritySafebrowsingV4ThreatMatchPlatformTypeEnum {
	return &e
}

func (e *GoogleSecuritySafebrowsingV4ThreatMatchPlatformTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PLATFORM_TYPE_UNSPECIFIED":
		fallthrough
	case "WINDOWS":
		fallthrough
	case "LINUX":
		fallthrough
	case "ANDROID":
		fallthrough
	case "OSX":
		fallthrough
	case "IOS":
		fallthrough
	case "ANY_PLATFORM":
		fallthrough
	case "ALL_PLATFORMS":
		fallthrough
	case "CHROME":
		*e = GoogleSecuritySafebrowsingV4ThreatMatchPlatformTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleSecuritySafebrowsingV4ThreatMatchPlatformTypeEnum: %v", v)
	}
}

// GoogleSecuritySafebrowsingV4ThreatMatchThreatEntryTypeEnum - The threat entry type matching this threat.
type GoogleSecuritySafebrowsingV4ThreatMatchThreatEntryTypeEnum string

const (
	GoogleSecuritySafebrowsingV4ThreatMatchThreatEntryTypeEnumThreatEntryTypeUnspecified GoogleSecuritySafebrowsingV4ThreatMatchThreatEntryTypeEnum = "THREAT_ENTRY_TYPE_UNSPECIFIED"
	GoogleSecuritySafebrowsingV4ThreatMatchThreatEntryTypeEnumURL                        GoogleSecuritySafebrowsingV4ThreatMatchThreatEntryTypeEnum = "URL"
	GoogleSecuritySafebrowsingV4ThreatMatchThreatEntryTypeEnumExecutable                 GoogleSecuritySafebrowsingV4ThreatMatchThreatEntryTypeEnum = "EXECUTABLE"
	GoogleSecuritySafebrowsingV4ThreatMatchThreatEntryTypeEnumIPRange                    GoogleSecuritySafebrowsingV4ThreatMatchThreatEntryTypeEnum = "IP_RANGE"
	GoogleSecuritySafebrowsingV4ThreatMatchThreatEntryTypeEnumChromeExtension            GoogleSecuritySafebrowsingV4ThreatMatchThreatEntryTypeEnum = "CHROME_EXTENSION"
	GoogleSecuritySafebrowsingV4ThreatMatchThreatEntryTypeEnumFilename                   GoogleSecuritySafebrowsingV4ThreatMatchThreatEntryTypeEnum = "FILENAME"
	GoogleSecuritySafebrowsingV4ThreatMatchThreatEntryTypeEnumCert                       GoogleSecuritySafebrowsingV4ThreatMatchThreatEntryTypeEnum = "CERT"
)

func (e GoogleSecuritySafebrowsingV4ThreatMatchThreatEntryTypeEnum) ToPointer() *GoogleSecuritySafebrowsingV4ThreatMatchThreatEntryTypeEnum {
	return &e
}

func (e *GoogleSecuritySafebrowsingV4ThreatMatchThreatEntryTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "THREAT_ENTRY_TYPE_UNSPECIFIED":
		fallthrough
	case "URL":
		fallthrough
	case "EXECUTABLE":
		fallthrough
	case "IP_RANGE":
		fallthrough
	case "CHROME_EXTENSION":
		fallthrough
	case "FILENAME":
		fallthrough
	case "CERT":
		*e = GoogleSecuritySafebrowsingV4ThreatMatchThreatEntryTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleSecuritySafebrowsingV4ThreatMatchThreatEntryTypeEnum: %v", v)
	}
}

// GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnum - The threat type matching this threat.
type GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnum string

const (
	GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnumThreatTypeUnspecified         GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnum = "THREAT_TYPE_UNSPECIFIED"
	GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnumMalware                       GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnum = "MALWARE"
	GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnumSocialEngineering             GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnum = "SOCIAL_ENGINEERING"
	GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnumUnwantedSoftware              GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnum = "UNWANTED_SOFTWARE"
	GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnumPotentiallyHarmfulApplication GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnum = "POTENTIALLY_HARMFUL_APPLICATION"
	GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnumSocialEngineeringInternal     GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnum = "SOCIAL_ENGINEERING_INTERNAL"
	GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnumAPIAbuse                      GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnum = "API_ABUSE"
	GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnumMaliciousBinary               GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnum = "MALICIOUS_BINARY"
	GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnumCsdWhitelist                  GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnum = "CSD_WHITELIST"
	GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnumCsdDownloadWhitelist          GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnum = "CSD_DOWNLOAD_WHITELIST"
	GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnumClientIncident                GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnum = "CLIENT_INCIDENT"
	GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnumClientIncidentWhitelist       GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnum = "CLIENT_INCIDENT_WHITELIST"
	GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnumApkMalwareOffline             GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnum = "APK_MALWARE_OFFLINE"
	GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnumSubresourceFilter             GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnum = "SUBRESOURCE_FILTER"
	GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnumSuspicious                    GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnum = "SUSPICIOUS"
	GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnumTrickToBill                   GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnum = "TRICK_TO_BILL"
	GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnumHighConfidenceAllowlist       GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnum = "HIGH_CONFIDENCE_ALLOWLIST"
	GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnumAccuracyTips                  GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnum = "ACCURACY_TIPS"
)

func (e GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnum) ToPointer() *GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnum {
	return &e
}

func (e *GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "THREAT_TYPE_UNSPECIFIED":
		fallthrough
	case "MALWARE":
		fallthrough
	case "SOCIAL_ENGINEERING":
		fallthrough
	case "UNWANTED_SOFTWARE":
		fallthrough
	case "POTENTIALLY_HARMFUL_APPLICATION":
		fallthrough
	case "SOCIAL_ENGINEERING_INTERNAL":
		fallthrough
	case "API_ABUSE":
		fallthrough
	case "MALICIOUS_BINARY":
		fallthrough
	case "CSD_WHITELIST":
		fallthrough
	case "CSD_DOWNLOAD_WHITELIST":
		fallthrough
	case "CLIENT_INCIDENT":
		fallthrough
	case "CLIENT_INCIDENT_WHITELIST":
		fallthrough
	case "APK_MALWARE_OFFLINE":
		fallthrough
	case "SUBRESOURCE_FILTER":
		fallthrough
	case "SUSPICIOUS":
		fallthrough
	case "TRICK_TO_BILL":
		fallthrough
	case "HIGH_CONFIDENCE_ALLOWLIST":
		fallthrough
	case "ACCURACY_TIPS":
		*e = GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnum: %v", v)
	}
}

// GoogleSecuritySafebrowsingV4ThreatMatch - A match when checking a threat entry in the Safe Browsing threat lists.
type GoogleSecuritySafebrowsingV4ThreatMatch struct {
	// The cache lifetime for the returned match. Clients must not cache this response for more than this duration to avoid false positives.
	CacheDuration *string `json:"cacheDuration,omitempty"`
	// The platform type matching this threat.
	PlatformType *GoogleSecuritySafebrowsingV4ThreatMatchPlatformTypeEnum `json:"platformType,omitempty"`
	// An individual threat; for example, a malicious URL or its hash representation. Only one of these fields should be set.
	Threat *GoogleSecuritySafebrowsingV4ThreatEntry `json:"threat,omitempty"`
	// The metadata associated with a specific threat entry. The client is expected to know the metadata key/value pairs associated with each threat type.
	ThreatEntryMetadata *GoogleSecuritySafebrowsingV4ThreatEntryMetadata `json:"threatEntryMetadata,omitempty"`
	// The threat entry type matching this threat.
	ThreatEntryType *GoogleSecuritySafebrowsingV4ThreatMatchThreatEntryTypeEnum `json:"threatEntryType,omitempty"`
	// The threat type matching this threat.
	ThreatType *GoogleSecuritySafebrowsingV4ThreatMatchThreatTypeEnum `json:"threatType,omitempty"`
}
