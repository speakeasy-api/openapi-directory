// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// BatchGetAmpUrlsRequestLookupStrategyEnum - The lookup_strategy being requested.
type BatchGetAmpUrlsRequestLookupStrategyEnum string

const (
	BatchGetAmpUrlsRequestLookupStrategyEnumFetchLiveDoc BatchGetAmpUrlsRequestLookupStrategyEnum = "FETCH_LIVE_DOC"
	BatchGetAmpUrlsRequestLookupStrategyEnumInIndexDoc   BatchGetAmpUrlsRequestLookupStrategyEnum = "IN_INDEX_DOC"
)

func (e *BatchGetAmpUrlsRequestLookupStrategyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "FETCH_LIVE_DOC":
		fallthrough
	case "IN_INDEX_DOC":
		*e = BatchGetAmpUrlsRequestLookupStrategyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchGetAmpUrlsRequestLookupStrategyEnum: %s", s)
	}
}

// BatchGetAmpUrlsRequest - AMP URL request for a batch of URLs.
type BatchGetAmpUrlsRequest struct {
	// The lookup_strategy being requested.
	LookupStrategy *BatchGetAmpUrlsRequestLookupStrategyEnum `json:"lookupStrategy,omitempty"`
	// List of URLs to look up for the paired AMP URLs. The URLs are case-sensitive. Up to 50 URLs per lookup (see [Usage Limits](/amp/cache/reference/limits)).
	Urls []string `json:"urls,omitempty"`
}
