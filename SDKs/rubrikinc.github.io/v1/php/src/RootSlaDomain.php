<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class RootSlaDomain 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Assign retention SLA Domain to the downloaded snapshots of a single object
     * 
     * Assigns an SLA Domain to a list of downloaded snapshots. The SLA Domain manages retention for the snapshots in the downloaded location. The assignment does not affect the retention of the snapshots in other locations.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\DownloadedSnapshotSlaAssignmentInfo $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AssignSlaToDownloadedSnapshotsResponse
     */
	public function assignSlaToDownloadedSnapshots(
        \OpenAPI\OpenAPI\Models\Shared\DownloadedSnapshotSlaAssignmentInfo $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AssignSlaToDownloadedSnapshotsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sla_domain/assign_to_downloaded_snapshots');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AssignSlaToDownloadedSnapshotsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchAsyncRequestStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchAsyncRequestStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create SLA Domain
     * 
     * Create a new SLA Domain on a Rubrik cluster by specifying Domain Rules and policies. Only Managed Volume objects support minute frequency to take transaction log backup. SLA assignment on other objects will be disallowed.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\SlaDomainDefinition $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSlaDomainResponse
     */
	public function createSlaDomain(
        \OpenAPI\OpenAPI\Models\Shared\SlaDomainDefinition $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSlaDomainResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sla_domain');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSlaDomainResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->slaDomainSummary = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SlaDomainSummary', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove SLA Domain
     * 
     * Delete an SLA Domain from a Rubrik cluster. The SLA Domain must not be assigned to any VMs, filesets or databases.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSlaDomainRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSlaDomainResponse
     */
	public function deleteSlaDomain(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSlaDomainRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSlaDomainResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sla_domain/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteSlaDomainRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSlaDomainResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Get SLA Domain details
     * 
     * Retrieve summary information for a specified SLA Domain.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSlaDomainRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSlaDomainResponse
     */
	public function getSlaDomain(
        \OpenAPI\OpenAPI\Models\Operations\GetSlaDomainRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSlaDomainResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sla_domain/{id}', \OpenAPI\OpenAPI\Models\Operations\GetSlaDomainRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSlaDomainResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->slaDomainSummary = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SlaDomainSummary', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patch SLA Domain
     * 
     * (DEPRECATED) Patch the properties of an SLA Domain. The recommended endpoint is v3/sla_domain/{id}.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchSlaDomainRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchSlaDomainResponse
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function patchSlaDomain(
        \OpenAPI\OpenAPI\Models\Operations\PatchSlaDomainRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchSlaDomainResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sla_domain/{id}', \OpenAPI\OpenAPI\Models\Operations\PatchSlaDomainRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "slaDomainPatchDefinition", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatchSlaDomainRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchSlaDomainResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->slaDomainSummary = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SlaDomainSummary', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get list of SLA Domains
     * 
     * Retrieve summary information for all SLA Domains.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\QuerySlaDomainRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QuerySlaDomainResponse
     */
	public function querySlaDomain(
        \OpenAPI\OpenAPI\Models\Operations\QuerySlaDomainRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QuerySlaDomainResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sla_domain');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\QuerySlaDomainRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QuerySlaDomainResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->slaDomainSummaryListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SlaDomainSummaryListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update SLA Domain
     * 
     * Update the properties of an SLA Domain.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSlaDomainRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSlaDomainResponse
     */
	public function updateSlaDomain(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSlaDomainRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSlaDomainResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sla_domain/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateSlaDomainRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "slaDomainDefinition", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\UpdateSlaDomainRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSlaDomainResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->slaDomainSummary = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SlaDomainSummary', 'json');
            }
        }

        return $response;
    }
}