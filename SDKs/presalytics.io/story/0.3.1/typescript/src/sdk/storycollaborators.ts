/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Story Collaborators
 */
export class StoryCollaborators {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Story Collaborators: List
   *
   * @remarks
   * Gets a list users that can read or edit this story
   */
  storyIdCollaboratorsGet(
    req: operations.StoryIdCollaboratorsGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StoryIdCollaboratorsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StoryIdCollaboratorsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/{id}/collaborators", req);

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StoryIdCollaboratorsGetResponse =
        new operations.StoryIdCollaboratorsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.storyCollaborators = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.storyCollaborators = utils.objectToClass(
              httpRes?.data,
              shared.StoryCollaborator,
              resFieldDepth
            );
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.problemDetail = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetail
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Story Collaborators: Edit Inactive User Permission
   *
   * @remarks
   * Edit story permissions for inactive users.  Requires admin rights.
   */
  storyIdCollaboratorsInactivePost(
    req: operations.StoryIdCollaboratorsInactivePostRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StoryIdCollaboratorsInactivePostResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StoryIdCollaboratorsInactivePostRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{id}/collaborators/inactive",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "modifyInactiveCollaborator",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StoryIdCollaboratorsInactivePostResponse =
        new operations.StoryIdCollaboratorsInactivePostResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.storyCollaborator = utils.objectToClass(
              httpRes?.data,
              shared.StoryCollaborator
            );
          }
          break;
        case httpRes?.status == 204:
          break;
        case [400, 401, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.problemDetail = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetail
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Story Collaborators: Add New User
   *
   * @remarks
   * Add a colloborator to this story
   */
  storyIdCollaboratorsPost(
    req: operations.StoryIdCollaboratorsPostRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StoryIdCollaboratorsPostResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StoryIdCollaboratorsPostRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/{id}/collaborators", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "addNewCollaboratorRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StoryIdCollaboratorsPostResponse =
        new operations.StoryIdCollaboratorsPostResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.storyCollaborator = utils.objectToClass(
              httpRes?.data,
              shared.StoryCollaborator
            );
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.problemDetail = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetail
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Story Collaborators: Remove User
   *
   * @remarks
   * Remove a collaborator from this story
   */
  storyIdCollaboratorsUseridDelete(
    req: operations.StoryIdCollaboratorsUseridDeleteRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StoryIdCollaboratorsUseridDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StoryIdCollaboratorsUseridDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{id}/collaborators/{story_collaborator_userid}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StoryIdCollaboratorsUseridDeleteResponse =
        new operations.StoryIdCollaboratorsUseridDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case [400, 401, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.problemDetail = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetail
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Story Collaborators: Access Permissions
   *
   * @remarks
   * Data to help you understand the access rights of a particular collaborator on this story
   */
  storyIdCollaboratorsUseridGet(
    req: operations.StoryIdCollaboratorsUseridGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StoryIdCollaboratorsUseridGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StoryIdCollaboratorsUseridGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{id}/collaborators/{story_collaborator_userid}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StoryIdCollaboratorsUseridGetResponse =
        new operations.StoryIdCollaboratorsUseridGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.storyCollaborator = utils.objectToClass(
              httpRes?.data,
              shared.StoryCollaborator
            );
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.problemDetail = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetail
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Story Collaborators: Edit Access Rights
   *
   * @remarks
   * Modify a user's access right to this story (e.g., grant edit permissions)
   */
  storyIdCollaboratorsUseridPut(
    req: operations.StoryIdCollaboratorsUseridPutRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StoryIdCollaboratorsUseridPutResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StoryIdCollaboratorsUseridPutRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{id}/collaborators/{story_collaborator_userid}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "storyCollaborator",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StoryIdCollaboratorsUseridPutResponse =
        new operations.StoryIdCollaboratorsUseridPutResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.storyCollaborator = utils.objectToClass(
              httpRes?.data,
              shared.StoryCollaborator
            );
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.problemDetail = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetail
            );
          }
          break;
      }

      return res;
    });
  }
}
