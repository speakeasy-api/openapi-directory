"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class AppPermissionsActionsEnum(str, Enum):
    r"""The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts. Can be one of: `read` or `write`."""
    READ = 'read'
    WRITE = 'write'

class AppPermissionsAdministrationEnum(str, Enum):
    r"""The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation. Can be one of: `read` or `write`."""
    READ = 'read'
    WRITE = 'write'

class AppPermissionsChecksEnum(str, Enum):
    r"""The level of permission to grant the access token for checks on code. Can be one of: `read` or `write`."""
    READ = 'read'
    WRITE = 'write'

class AppPermissionsContentReferencesEnum(str, Enum):
    r"""The level of permission to grant the access token for notification of content references and creation content attachments. Can be one of: `read` or `write`."""
    READ = 'read'
    WRITE = 'write'

class AppPermissionsContentsEnum(str, Enum):
    r"""The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges. Can be one of: `read` or `write`."""
    READ = 'read'
    WRITE = 'write'

class AppPermissionsDeploymentsEnum(str, Enum):
    r"""The level of permission to grant the access token for deployments and deployment statuses. Can be one of: `read` or `write`."""
    READ = 'read'
    WRITE = 'write'

class AppPermissionsEnvironmentsEnum(str, Enum):
    r"""The level of permission to grant the access token for managing repository environments. Can be one of: `read` or `write`."""
    READ = 'read'
    WRITE = 'write'

class AppPermissionsIssuesEnum(str, Enum):
    r"""The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones. Can be one of: `read` or `write`."""
    READ = 'read'
    WRITE = 'write'

class AppPermissionsMembersEnum(str, Enum):
    r"""The level of permission to grant the access token for organization teams and members. Can be one of: `read` or `write`."""
    READ = 'read'
    WRITE = 'write'

class AppPermissionsMetadataEnum(str, Enum):
    r"""The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata. Can be one of: `read` or `write`."""
    READ = 'read'
    WRITE = 'write'

class AppPermissionsOrganizationAdministrationEnum(str, Enum):
    r"""The level of permission to grant the access token to manage access to an organization. Can be one of: `read` or `write`."""
    READ = 'read'
    WRITE = 'write'

class AppPermissionsOrganizationHooksEnum(str, Enum):
    r"""The level of permission to grant the access token to manage the post-receive hooks for an organization. Can be one of: `read` or `write`."""
    READ = 'read'
    WRITE = 'write'

class AppPermissionsOrganizationPackagesEnum(str, Enum):
    r"""The level of permission to grant the access token for organization packages published to GitHub Packages. Can be one of: `read` or `write`."""
    READ = 'read'
    WRITE = 'write'

class AppPermissionsOrganizationPlanEnum(str, Enum):
    r"""The level of permission to grant the access token for viewing an organization's plan. Can be one of: `read`."""
    READ = 'read'

class AppPermissionsOrganizationProjectsEnum(str, Enum):
    r"""The level of permission to grant the access token to manage organization projects and projects beta (where available). Can be one of: `read`, `write`, or `admin`."""
    READ = 'read'
    WRITE = 'write'
    ADMIN = 'admin'

class AppPermissionsOrganizationSecretsEnum(str, Enum):
    r"""The level of permission to grant the access token to manage organization secrets. Can be one of: `read` or `write`."""
    READ = 'read'
    WRITE = 'write'

class AppPermissionsOrganizationSelfHostedRunnersEnum(str, Enum):
    r"""The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization. Can be one of: `read` or `write`."""
    READ = 'read'
    WRITE = 'write'

class AppPermissionsOrganizationUserBlockingEnum(str, Enum):
    r"""The level of permission to grant the access token to view and manage users blocked by the organization. Can be one of: `read` or `write`."""
    READ = 'read'
    WRITE = 'write'

class AppPermissionsPackagesEnum(str, Enum):
    r"""The level of permission to grant the access token for packages published to GitHub Packages. Can be one of: `read` or `write`."""
    READ = 'read'
    WRITE = 'write'

class AppPermissionsPagesEnum(str, Enum):
    r"""The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds. Can be one of: `read` or `write`."""
    READ = 'read'
    WRITE = 'write'

class AppPermissionsPullRequestsEnum(str, Enum):
    r"""The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges. Can be one of: `read` or `write`."""
    READ = 'read'
    WRITE = 'write'

class AppPermissionsRepositoryHooksEnum(str, Enum):
    r"""The level of permission to grant the access token to manage the post-receive hooks for a repository. Can be one of: `read` or `write`."""
    READ = 'read'
    WRITE = 'write'

class AppPermissionsRepositoryProjectsEnum(str, Enum):
    r"""The level of permission to grant the access token to manage repository projects, columns, and cards. Can be one of: `read`, `write`, or `admin`."""
    READ = 'read'
    WRITE = 'write'
    ADMIN = 'admin'

class AppPermissionsSecretScanningAlertsEnum(str, Enum):
    r"""The level of permission to grant the access token to view and manage secret scanning alerts. Can be one of: `read` or `write`."""
    READ = 'read'
    WRITE = 'write'

class AppPermissionsSecretsEnum(str, Enum):
    r"""The level of permission to grant the access token to manage repository secrets. Can be one of: `read` or `write`."""
    READ = 'read'
    WRITE = 'write'

class AppPermissionsSecurityEventsEnum(str, Enum):
    r"""The level of permission to grant the access token to view and manage security events like code scanning alerts. Can be one of: `read` or `write`."""
    READ = 'read'
    WRITE = 'write'

class AppPermissionsSingleFileEnum(str, Enum):
    r"""The level of permission to grant the access token to manage just a single file. Can be one of: `read` or `write`."""
    READ = 'read'
    WRITE = 'write'

class AppPermissionsStatusesEnum(str, Enum):
    r"""The level of permission to grant the access token for commit statuses. Can be one of: `read` or `write`."""
    READ = 'read'
    WRITE = 'write'

class AppPermissionsTeamDiscussionsEnum(str, Enum):
    r"""The level of permission to grant the access token to manage team discussions and related comments. Can be one of: `read` or `write`."""
    READ = 'read'
    WRITE = 'write'

class AppPermissionsVulnerabilityAlertsEnum(str, Enum):
    r"""The level of permission to grant the access token to retrieve Dependabot alerts. Can be one of: `read`."""
    READ = 'read'

class AppPermissionsWorkflowsEnum(str, Enum):
    r"""The level of permission to grant the access token to update GitHub Actions workflow files. Can be one of: `write`."""
    WRITE = 'write'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AppPermissions:
    r"""The permissions granted to the user-to-server access token."""
    
    actions: Optional[AppPermissionsActionsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('actions'), 'exclude': lambda f: f is None }})
    r"""The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts. Can be one of: `read` or `write`."""  
    administration: Optional[AppPermissionsAdministrationEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('administration'), 'exclude': lambda f: f is None }})
    r"""The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation. Can be one of: `read` or `write`."""  
    checks: Optional[AppPermissionsChecksEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('checks'), 'exclude': lambda f: f is None }})
    r"""The level of permission to grant the access token for checks on code. Can be one of: `read` or `write`."""  
    content_references: Optional[AppPermissionsContentReferencesEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content_references'), 'exclude': lambda f: f is None }})
    r"""The level of permission to grant the access token for notification of content references and creation content attachments. Can be one of: `read` or `write`."""  
    contents: Optional[AppPermissionsContentsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contents'), 'exclude': lambda f: f is None }})
    r"""The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges. Can be one of: `read` or `write`."""  
    deployments: Optional[AppPermissionsDeploymentsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deployments'), 'exclude': lambda f: f is None }})
    r"""The level of permission to grant the access token for deployments and deployment statuses. Can be one of: `read` or `write`."""  
    environments: Optional[AppPermissionsEnvironmentsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('environments'), 'exclude': lambda f: f is None }})
    r"""The level of permission to grant the access token for managing repository environments. Can be one of: `read` or `write`."""  
    issues: Optional[AppPermissionsIssuesEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issues'), 'exclude': lambda f: f is None }})
    r"""The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones. Can be one of: `read` or `write`."""  
    members: Optional[AppPermissionsMembersEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('members'), 'exclude': lambda f: f is None }})
    r"""The level of permission to grant the access token for organization teams and members. Can be one of: `read` or `write`."""  
    metadata: Optional[AppPermissionsMetadataEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata'), 'exclude': lambda f: f is None }})
    r"""The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata. Can be one of: `read` or `write`."""  
    organization_administration: Optional[AppPermissionsOrganizationAdministrationEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organization_administration'), 'exclude': lambda f: f is None }})
    r"""The level of permission to grant the access token to manage access to an organization. Can be one of: `read` or `write`."""  
    organization_hooks: Optional[AppPermissionsOrganizationHooksEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organization_hooks'), 'exclude': lambda f: f is None }})
    r"""The level of permission to grant the access token to manage the post-receive hooks for an organization. Can be one of: `read` or `write`."""  
    organization_packages: Optional[AppPermissionsOrganizationPackagesEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organization_packages'), 'exclude': lambda f: f is None }})
    r"""The level of permission to grant the access token for organization packages published to GitHub Packages. Can be one of: `read` or `write`."""  
    organization_plan: Optional[AppPermissionsOrganizationPlanEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organization_plan'), 'exclude': lambda f: f is None }})
    r"""The level of permission to grant the access token for viewing an organization's plan. Can be one of: `read`."""  
    organization_projects: Optional[AppPermissionsOrganizationProjectsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organization_projects'), 'exclude': lambda f: f is None }})
    r"""The level of permission to grant the access token to manage organization projects and projects beta (where available). Can be one of: `read`, `write`, or `admin`."""  
    organization_secrets: Optional[AppPermissionsOrganizationSecretsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organization_secrets'), 'exclude': lambda f: f is None }})
    r"""The level of permission to grant the access token to manage organization secrets. Can be one of: `read` or `write`."""  
    organization_self_hosted_runners: Optional[AppPermissionsOrganizationSelfHostedRunnersEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organization_self_hosted_runners'), 'exclude': lambda f: f is None }})
    r"""The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization. Can be one of: `read` or `write`."""  
    organization_user_blocking: Optional[AppPermissionsOrganizationUserBlockingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organization_user_blocking'), 'exclude': lambda f: f is None }})
    r"""The level of permission to grant the access token to view and manage users blocked by the organization. Can be one of: `read` or `write`."""  
    packages: Optional[AppPermissionsPackagesEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('packages'), 'exclude': lambda f: f is None }})
    r"""The level of permission to grant the access token for packages published to GitHub Packages. Can be one of: `read` or `write`."""  
    pages: Optional[AppPermissionsPagesEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pages'), 'exclude': lambda f: f is None }})
    r"""The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds. Can be one of: `read` or `write`."""  
    pull_requests: Optional[AppPermissionsPullRequestsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pull_requests'), 'exclude': lambda f: f is None }})
    r"""The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges. Can be one of: `read` or `write`."""  
    repository_hooks: Optional[AppPermissionsRepositoryHooksEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repository_hooks'), 'exclude': lambda f: f is None }})
    r"""The level of permission to grant the access token to manage the post-receive hooks for a repository. Can be one of: `read` or `write`."""  
    repository_projects: Optional[AppPermissionsRepositoryProjectsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repository_projects'), 'exclude': lambda f: f is None }})
    r"""The level of permission to grant the access token to manage repository projects, columns, and cards. Can be one of: `read`, `write`, or `admin`."""  
    secret_scanning_alerts: Optional[AppPermissionsSecretScanningAlertsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secret_scanning_alerts'), 'exclude': lambda f: f is None }})
    r"""The level of permission to grant the access token to view and manage secret scanning alerts. Can be one of: `read` or `write`."""  
    secrets: Optional[AppPermissionsSecretsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secrets'), 'exclude': lambda f: f is None }})
    r"""The level of permission to grant the access token to manage repository secrets. Can be one of: `read` or `write`."""  
    security_events: Optional[AppPermissionsSecurityEventsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('security_events'), 'exclude': lambda f: f is None }})
    r"""The level of permission to grant the access token to view and manage security events like code scanning alerts. Can be one of: `read` or `write`."""  
    single_file: Optional[AppPermissionsSingleFileEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('single_file'), 'exclude': lambda f: f is None }})
    r"""The level of permission to grant the access token to manage just a single file. Can be one of: `read` or `write`."""  
    statuses: Optional[AppPermissionsStatusesEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statuses'), 'exclude': lambda f: f is None }})
    r"""The level of permission to grant the access token for commit statuses. Can be one of: `read` or `write`."""  
    team_discussions: Optional[AppPermissionsTeamDiscussionsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('team_discussions'), 'exclude': lambda f: f is None }})
    r"""The level of permission to grant the access token to manage team discussions and related comments. Can be one of: `read` or `write`."""  
    vulnerability_alerts: Optional[AppPermissionsVulnerabilityAlertsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vulnerability_alerts'), 'exclude': lambda f: f is None }})
    r"""The level of permission to grant the access token to retrieve Dependabot alerts. Can be one of: `read`."""  
    workflows: Optional[AppPermissionsWorkflowsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workflows'), 'exclude': lambda f: f is None }})
    r"""The level of permission to grant the access token to update GitHub Actions workflow files. Can be one of: `write`."""  
    