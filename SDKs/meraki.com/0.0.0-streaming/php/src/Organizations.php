<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Organizations 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Claim a list of devices, licenses, and/or orders into an organization
     * 
     * Claim a list of devices, licenses, and/or orders into an organization. When claiming by order, all devices and licenses in the order will be claimed; licenses will be added to the organization and devices will be placed in the organization's inventory.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClaimIntoOrganizationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ClaimIntoOrganizationResponse
     */
	public function claimIntoOrganization(
        \OpenAPI\OpenAPI\Models\Operations\ClaimIntoOrganizationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ClaimIntoOrganizationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/claim', \OpenAPI\OpenAPI\Models\Operations\ClaimIntoOrganizationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClaimIntoOrganizationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->claimIntoOrganization200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new organization by cloning the addressed organization
     * 
     * Create a new organization by cloning the addressed organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloneOrganizationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CloneOrganizationResponse
     */
	public function cloneOrganization(
        \OpenAPI\OpenAPI\Models\Operations\CloneOrganizationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CloneOrganizationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/clone', \OpenAPI\OpenAPI\Models\Operations\CloneOrganizationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloneOrganizationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cloneOrganization201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return an organization
     * 
     * Return an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationResponse
     */
	public function getOrganization(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganization200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the status of every Meraki device in the organization
     * 
     * List the status of every Meraki device in the organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDeviceStatusesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDeviceStatusesResponse
     */
	public function getOrganizationDeviceStatuses(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDeviceStatusesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDeviceStatusesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/deviceStatuses', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDeviceStatusesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationDeviceStatusesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationDeviceStatuses200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the inventory for an organization
     * 
     * Return the inventory for an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryResponse
     */
	public function getOrganizationInventory(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/inventory', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationInventoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationInventory200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the third party VPN peers for an organization
     * 
     * Return the third party VPN peers for an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationThirdPartyVPNPeersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationThirdPartyVPNPeersResponse
     */
	public function getOrganizationThirdPartyVPNPeers(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationThirdPartyVPNPeersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationThirdPartyVPNPeersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/thirdPartyVPNPeers', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationThirdPartyVPNPeersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationThirdPartyVPNPeersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationThirdPartyVPNPeers200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the uplink loss and latency for every MX in the organization from at latest 2 minutes ago
     * 
     * Return the uplink loss and latency for every MX in the organization from at latest 2 minutes ago
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationUplinksLossAndLatencyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationUplinksLossAndLatencyResponse
     */
	public function getOrganizationUplinksLossAndLatency(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationUplinksLossAndLatencyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationUplinksLossAndLatencyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/uplinksLossAndLatency', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationUplinksLossAndLatencyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationUplinksLossAndLatencyRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationUplinksLossAndLatencyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationUplinksLossAndLatency200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the organizations that the user has privileges on
     * 
     * List the organizations that the user has privileges on
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationsResponse
     */
	public function getOrganizations(
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizations200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the third party VPN peers for an organization
     * 
     * Update the third party VPN peers for an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationThirdPartyVPNPeersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationThirdPartyVPNPeersResponse
     */
	public function updateOrganizationThirdPartyVPNPeers(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationThirdPartyVPNPeersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationThirdPartyVPNPeersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/thirdPartyVPNPeers', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationThirdPartyVPNPeersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationThirdPartyVPNPeersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationThirdPartyVPNPeers200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
}