/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class UpdateProductModuleSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

export enum UpdateProductModuleRequestBodyLicenseTemplateEnum {
  Timevolume = "TIMEVOLUME",
  Feature = "FEATURE",
}

export enum UpdateProductModuleRequestBodyNodeSecretModeEnum {
  Predefined = "PREDEFINED",
  Client = "CLIENT",
}

export class UpdateProductModuleRequestBody extends SpeakeasyBase {
  /**
   * If set to 'false', the Product Module is disabled. Licensees can not obtain any new Licenses for this Product Module.
   */
  @SpeakeasyMetadata({ data: "form, name=active" })
  active?: boolean;

  /**
   * License Template. Mandatory for 'Try &amp; Buy' licensing model.
   */
  @SpeakeasyMetadata({ data: "form, name=licenseTemplate" })
  licenseTemplate?: UpdateProductModuleRequestBodyLicenseTemplateEnum[];

  /**
   * Licensing model applied to this Product Module. Defines what License Templates can be configured for the Product Module and how Licenses for this Product Module are processed during validation.
   */
  @SpeakeasyMetadata({ data: "form, name=licensingModel" })
  licensingModel?: string;

  /**
   * Maximum checkout validity (days). Mandatory for 'Floating' licensing model.
   */
  @SpeakeasyMetadata({ data: "form, name=maxCheckoutValidity" })
  maxCheckoutValidity?: number;

  /**
   * Product Module name that is visible to the end customers in NetLicensing Shop.
   */
  @SpeakeasyMetadata({ data: "form, name=name" })
  name?: string;

  /**
   * Secret Mode. Mandatory for 'Node-Locked' licensing model.
   */
  @SpeakeasyMetadata({ data: "form, name=nodeSecretMode" })
  nodeSecretMode?: UpdateProductModuleRequestBodyNodeSecretModeEnum[];

  /**
   * New Product Module number (update).
   */
  @SpeakeasyMetadata({ data: "form, name=number" })
  number?: string;

  /**
   * Remaining time volume for red level. Mandatory for 'Rental' licensing model.
   */
  @SpeakeasyMetadata({ data: "form, name=redThreshold" })
  redThreshold?: number;

  /**
   * Remaining time volume for yellow level. Mandatory for 'Rental' licensing model.
   */
  @SpeakeasyMetadata({ data: "form, name=yellowThreshold" })
  yellowThreshold?: number;
}

export class UpdateProductModuleRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "request, media_type=application/x-www-form-urlencoded",
  })
  requestBody?: UpdateProductModuleRequestBody;

  /**
   * Unique number (across all Products of a Vendor) that identifies the Product Module. Vendor can assign this number when creating a Product Module or let NetLicensing generate one. Read-only after creation of the first Licensee for the Product.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=productModuleNumber",
  })
  productModuleNumber: string;
}

export class UpdateProductModuleResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful request
   */
  @SpeakeasyMetadata()
  netlicensing?: shared.Netlicensing;
}
