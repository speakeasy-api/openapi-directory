"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import measurementunit as shared_measurementunit
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CatalogMeasurementUnit:
    r"""Represents the unit used to measure a `CatalogItemVariation` and
    specifies the precision for decimal quantities.
    """
    
    measurement_unit: Optional[shared_measurementunit.MeasurementUnit] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('measurement_unit'), 'exclude': lambda f: f is None }})
    r"""Represents a unit of measurement to use with a quantity, such as ounces
    or inches. Exactly one of the following fields are required: `custom_unit`,
    `area_unit`, `length_unit`, `volume_unit`, and `weight_unit`.
    """  
    precision: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('precision'), 'exclude': lambda f: f is None }})
    r"""An integer between 0 and 5 that represents the maximum number of
    positions allowed after the decimal in quantities measured with this unit.
    For example:
    
    - if the precision is 0, the quantity can be 1, 2, 3, etc.
    - if the precision is 1, the quantity can be 0.1, 0.2, etc.
    - if the precision is 2, the quantity can be 0.01, 0.12, etc.
    
    Default: 3
    """  
    