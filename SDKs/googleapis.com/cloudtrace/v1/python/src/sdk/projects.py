"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def cloudtrace_projects_patch_traces(self, request: operations.CloudtraceProjectsPatchTracesRequest, security: operations.CloudtraceProjectsPatchTracesSecurity) -> operations.CloudtraceProjectsPatchTracesResponse:
        r"""Sends new traces to Cloud Trace or updates existing traces. If the ID of a trace that you send matches that of an existing trace, any fields in the existing trace and its spans are overwritten by the provided values, and any new fields provided are merged with the existing trace data. If the ID does not match, a new trace is created."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudtraceProjectsPatchTracesRequest, base_url, '/v1/projects/{projectId}/traces', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "traces", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CloudtraceProjectsPatchTracesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudtraceProjectsPatchTracesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def cloudtrace_projects_traces_get(self, request: operations.CloudtraceProjectsTracesGetRequest, security: operations.CloudtraceProjectsTracesGetSecurity) -> operations.CloudtraceProjectsTracesGetResponse:
        r"""Gets a single trace by its ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudtraceProjectsTracesGetRequest, base_url, '/v1/projects/{projectId}/traces/{traceId}', request)
        
        query_params = utils.get_query_params(operations.CloudtraceProjectsTracesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudtraceProjectsTracesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Trace])
                res.trace = out

        return res

    def cloudtrace_projects_traces_list(self, request: operations.CloudtraceProjectsTracesListRequest, security: operations.CloudtraceProjectsTracesListSecurity) -> operations.CloudtraceProjectsTracesListResponse:
        r"""Returns a list of traces that match the specified filter conditions."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudtraceProjectsTracesListRequest, base_url, '/v1/projects/{projectId}/traces', request)
        
        query_params = utils.get_query_params(operations.CloudtraceProjectsTracesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudtraceProjectsTracesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListTracesResponse])
                res.list_traces_response = out

        return res

    