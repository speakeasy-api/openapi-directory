<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * OrderLineItem - Represents a line item in an order. Each line item describes a different
 * 
 * product to purchase, with its own quantity and price details.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class OrderLineItem
{
    /**
     * The list of references to discounts applied to this line item. Each
     * 
     * `OrderLineItemAppliedDiscount` has a `discount_uid` that references the `uid` of a top-level
     * `OrderLineItemDiscounts` applied to the line item. On reads, the amount
     * applied is populated.
     * 
     * An `OrderLineItemAppliedDiscount` is automatically created on every line item for all
     * `ORDER` scoped discounts that are added to the order. `OrderLineItemAppliedDiscount` records
     * for `LINE_ITEM` scoped discounts must be added in requests for the discount to apply to any
     * line items.
     * 
     * To change the amount of a discount, modify the referenced top-level discount.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\OrderLineItemAppliedDiscount> $appliedDiscounts
     */
	#[\JMS\Serializer\Annotation\SerializedName('applied_discounts')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\OrderLineItemAppliedDiscount>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $appliedDiscounts = null;
    
    /**
     * The list of references to taxes applied to this line item. Each
     * 
     * `OrderLineItemAppliedTax` has a `tax_uid` that references the `uid` of a
     * top-level `OrderLineItemTax` applied to the line item. On reads, the
     * amount applied is populated.
     * 
     * An `OrderLineItemAppliedTax` is automatically created on every line
     * item for all `ORDER` scoped taxes added to the order. `OrderLineItemAppliedTax`
     * records for `LINE_ITEM` scoped taxes must be added in requests for the tax
     * to apply to any line items.
     * 
     * To change the amount of a tax, modify the referenced top-level tax.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\OrderLineItemAppliedTax> $appliedTaxes
     */
	#[\JMS\Serializer\Annotation\SerializedName('applied_taxes')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\OrderLineItemAppliedTax>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $appliedTaxes = null;
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * 
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Money $basePriceMoney
     */
	#[\JMS\Serializer\Annotation\SerializedName('base_price_money')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Money')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Money $basePriceMoney = null;
    
    /**
     * The [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) ID applied to this line item.
     * 
     * @var ?string $catalogObjectId
     */
	#[\JMS\Serializer\Annotation\SerializedName('catalog_object_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $catalogObjectId = null;
    
    /**
     * The version of the catalog object that this line item references.
     * 
     * @var ?int $catalogVersion
     */
	#[\JMS\Serializer\Annotation\SerializedName('catalog_version')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $catalogVersion = null;
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * 
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Money $grossSalesMoney
     */
	#[\JMS\Serializer\Annotation\SerializedName('gross_sales_money')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Money')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Money $grossSalesMoney = null;
    
    /**
     * The type of line item: an itemized sale, a non-itemized sale (custom amount), or the
     * 
     * activation or reloading of a gift card.
     * 
     * @var ?string $itemType
     */
	#[\JMS\Serializer\Annotation\SerializedName('item_type')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $itemType = null;
    
    /**
     * Application-defined data attached to this line item. Metadata fields are intended
     * 
     * to store descriptive references or associations with an entity in another system or store brief
     * information about the object. Square does not process this field; it only stores and returns it
     * in relevant API calls. Do not use metadata to store any sensitive information (such as personally
     * identifiable information or card details).
     * 
     * Keys written by applications must be 60 characters or less and must be in the character set
     * `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed
     * with a namespace, separated from the key with a ':' character.
     * 
     * Values have a maximum length of 255 characters.
     * 
     * An application can have up to 10 entries per metadata field.
     * 
     * Entries written by applications are private and can only be read or modified by the same
     * application.
     * 
     * For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
     * 
     * @var ?array<string, string> $metadata
     */
	#[\JMS\Serializer\Annotation\SerializedName('metadata')]
    #[\JMS\Serializer\Annotation\Type('array<string, string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $metadata = null;
    
    /**
     * The [CatalogModifier](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogModifier)s applied to this line item.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\OrderLineItemModifier> $modifiers
     */
	#[\JMS\Serializer\Annotation\SerializedName('modifiers')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\OrderLineItemModifier>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $modifiers = null;
    
    /**
     * The name of the line item.
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
    /**
     * The note of the line item.
     * 
     * @var ?string $note
     */
	#[\JMS\Serializer\Annotation\SerializedName('note')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $note = null;
    
    /**
     * Describes pricing adjustments that are blocked from manual and 
     * 
     * automatic application to a line item. For more information, see 
     * [Apply Taxes and Discounts](https://developer.squareup.com/docs/orders-api/apply-taxes-and-discounts).
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\OrderLineItemPricingBlocklists $pricingBlocklists
     */
	#[\JMS\Serializer\Annotation\SerializedName('pricing_blocklists')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\OrderLineItemPricingBlocklists')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?OrderLineItemPricingBlocklists $pricingBlocklists = null;
    
    /**
     * The quantity purchased, formatted as a decimal number.
     * 
     * For example, `"3"`.
     * 
     * Line items with a quantity of `"0"` are automatically removed
     * when paying for or otherwise completing the order.
     * 
     * Line items with a `quantity_unit` can have non-integer quantities.
     * For example, `"1.70000"`.
     * 
     * @var string $quantity
     */
	#[\JMS\Serializer\Annotation\SerializedName('quantity')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $quantity;
    
    /**
     * Contains the measurement unit for a quantity and a precision that
     * 
     * specifies the number of digits after the decimal point for decimal quantities.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\OrderQuantityUnit $quantityUnit
     */
	#[\JMS\Serializer\Annotation\SerializedName('quantity_unit')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\OrderQuantityUnit')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?OrderQuantityUnit $quantityUnit = null;
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * 
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Money $totalDiscountMoney
     */
	#[\JMS\Serializer\Annotation\SerializedName('total_discount_money')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Money')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Money $totalDiscountMoney = null;
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * 
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Money $totalMoney
     */
	#[\JMS\Serializer\Annotation\SerializedName('total_money')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Money')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Money $totalMoney = null;
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * 
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Money $totalTaxMoney
     */
	#[\JMS\Serializer\Annotation\SerializedName('total_tax_money')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Money')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Money $totalTaxMoney = null;
    
    /**
     * A unique ID that identifies the line item only within this order.
     * 
     * @var ?string $uid
     */
	#[\JMS\Serializer\Annotation\SerializedName('uid')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $uid = null;
    
    /**
     * The name of the variation applied to this line item.
     * 
     * @var ?string $variationName
     */
	#[\JMS\Serializer\Annotation\SerializedName('variation_name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $variationName = null;
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * 
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Money $variationTotalPriceMoney
     */
	#[\JMS\Serializer\Annotation\SerializedName('variation_total_price_money')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Money')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Money $variationTotalPriceMoney = null;
    
	public function __construct()
	{
		$this->appliedDiscounts = null;
		$this->appliedTaxes = null;
		$this->basePriceMoney = null;
		$this->catalogObjectId = null;
		$this->catalogVersion = null;
		$this->grossSalesMoney = null;
		$this->itemType = null;
		$this->metadata = null;
		$this->modifiers = null;
		$this->name = null;
		$this->note = null;
		$this->pricingBlocklists = null;
		$this->quantity = "";
		$this->quantityUnit = null;
		$this->totalDiscountMoney = null;
		$this->totalMoney = null;
		$this->totalTaxMoney = null;
		$this->uid = null;
		$this->variationName = null;
		$this->variationTotalPriceMoney = null;
	}
}
