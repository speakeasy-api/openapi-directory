/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { ContentRedaction } from "./contentredaction";
import { JobExecutionSettings } from "./jobexecutionsettings";
import { LanguageCodeEnum } from "./languagecodeenum";
import { LanguageCodeItem } from "./languagecodeitem";
import { LanguageIdSettings } from "./languageidsettings";
import { Media } from "./media";
import { MediaFormatEnum } from "./mediaformatenum";
import { ModelSettings } from "./modelsettings";
import { Settings } from "./settings";
import { SubtitlesOutput } from "./subtitlesoutput";
import { Tag } from "./tag";
import { Transcript } from "./transcript";
import { TranscriptionJobStatusEnum } from "./transcriptionjobstatusenum";
import { Expose, Transform, Type } from "class-transformer";

/**
 * <p>Provides detailed information about a transcription job.</p> <p>To view the status of the specified transcription job, check the <code>TranscriptionJobStatus</code> field. If the status is <code>COMPLETED</code>, the job is finished and you can find the results at the location specified in <code>TranscriptFileUri</code>. If the status is <code>FAILED</code>, <code>FailureReason</code> provides details on why your transcription job failed.</p> <p>If you enabled content redaction, the redacted transcript can be found at the location specified in <code>RedactedTranscriptFileUri</code>.</p>
 */
export class TranscriptionJob extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "CompletionTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  completionTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "ContentRedaction" })
  @Type(() => ContentRedaction)
  contentRedaction?: ContentRedaction;

  @SpeakeasyMetadata()
  @Expose({ name: "CreationTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  creationTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "FailureReason" })
  failureReason?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "IdentifiedLanguageScore" })
  identifiedLanguageScore?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "IdentifyLanguage" })
  identifyLanguage?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "IdentifyMultipleLanguages" })
  identifyMultipleLanguages?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "JobExecutionSettings" })
  @Type(() => JobExecutionSettings)
  jobExecutionSettings?: JobExecutionSettings;

  @SpeakeasyMetadata()
  @Expose({ name: "LanguageCode" })
  languageCode?: LanguageCodeEnum;

  @SpeakeasyMetadata({ elemType: LanguageCodeItem })
  @Expose({ name: "LanguageCodes" })
  @Type(() => LanguageCodeItem)
  languageCodes?: LanguageCodeItem[];

  @SpeakeasyMetadata({ elemType: LanguageIdSettings })
  @Expose({ name: "LanguageIdSettings" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, LanguageIdSettings> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], LanguageIdSettings);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  languageIdSettings?: Record<string, LanguageIdSettings>;

  @SpeakeasyMetadata()
  @Expose({ name: "LanguageOptions" })
  languageOptions?: LanguageCodeEnum[];

  @SpeakeasyMetadata()
  @Expose({ name: "Media" })
  @Type(() => Media)
  media?: Media;

  @SpeakeasyMetadata()
  @Expose({ name: "MediaFormat" })
  mediaFormat?: MediaFormatEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "MediaSampleRateHertz" })
  mediaSampleRateHertz?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "ModelSettings" })
  @Type(() => ModelSettings)
  modelSettings?: ModelSettings;

  @SpeakeasyMetadata()
  @Expose({ name: "Settings" })
  @Type(() => Settings)
  settings?: Settings;

  @SpeakeasyMetadata()
  @Expose({ name: "StartTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "Subtitles" })
  @Type(() => SubtitlesOutput)
  subtitles?: SubtitlesOutput;

  @SpeakeasyMetadata({ elemType: Tag })
  @Expose({ name: "Tags" })
  @Type(() => Tag)
  tags?: Tag[];

  @SpeakeasyMetadata()
  @Expose({ name: "Transcript" })
  @Type(() => Transcript)
  transcript?: Transcript;

  @SpeakeasyMetadata()
  @Expose({ name: "TranscriptionJobName" })
  transcriptionJobName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "TranscriptionJobStatus" })
  transcriptionJobStatus?: TranscriptionJobStatusEnum;
}
