"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import datetimefieldtype as shared_datetimefieldtype
from ..shared import durationfield as shared_durationfield
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DateTimeField:
    
    duration_field: Optional[shared_durationfield.DurationField] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('durationField'), 'exclude': lambda f: f is None }})  
    leap_duration_field: Optional[shared_durationfield.DurationField] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('leapDurationField'), 'exclude': lambda f: f is None }})  
    lenient: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lenient'), 'exclude': lambda f: f is None }})  
    maximum_value: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maximumValue'), 'exclude': lambda f: f is None }})  
    minimum_value: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minimumValue'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    range_duration_field: Optional[shared_durationfield.DurationField] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rangeDurationField'), 'exclude': lambda f: f is None }})  
    supported: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supported'), 'exclude': lambda f: f is None }})  
    type: Optional[shared_datetimefieldtype.DateTimeFieldType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    