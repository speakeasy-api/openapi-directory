"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from ..shared import deploymentmodel as shared_deploymentmodel
from ..shared import edgemetric as shared_edgemetric
from ..shared import model as shared_model
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendHeartbeatRequestBodyDeploymentResult:
    r"""Information about the result of a deployment on an edge device that is registered with SageMaker Edge Manager."""
    
    deployment_end_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeploymentEndTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    deployment_models: Optional[list[shared_deploymentmodel.DeploymentModel]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeploymentModels'), 'exclude': lambda f: f is None }})  
    deployment_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeploymentName'), 'exclude': lambda f: f is None }})  
    deployment_start_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeploymentStartTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    deployment_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeploymentStatus'), 'exclude': lambda f: f is None }})  
    deployment_status_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeploymentStatusMessage'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendHeartbeatRequestBody:
    
    agent_version: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AgentVersion') }})
    r"""Returns the version of the agent."""  
    device_fleet_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeviceFleetName') }})
    r"""The name of the fleet that the device belongs to."""  
    device_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeviceName') }})
    r"""The unique name of the device."""  
    agent_metrics: Optional[list[shared_edgemetric.EdgeMetric]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AgentMetrics'), 'exclude': lambda f: f is None }})
    r"""For internal use. Returns a list of SageMaker Edge Manager agent operating metrics."""  
    deployment_result: Optional[SendHeartbeatRequestBodyDeploymentResult] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeploymentResult'), 'exclude': lambda f: f is None }})
    r"""Information about the result of a deployment on an edge device that is registered with SageMaker Edge Manager."""  
    models: Optional[list[shared_model.Model]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Models'), 'exclude': lambda f: f is None }})
    r"""Returns a list of models deployed on the the device."""  
    

@dataclasses.dataclass
class SendHeartbeatRequest:
    
    request_body: SendHeartbeatRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class SendHeartbeatResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    internal_service_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServiceException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    