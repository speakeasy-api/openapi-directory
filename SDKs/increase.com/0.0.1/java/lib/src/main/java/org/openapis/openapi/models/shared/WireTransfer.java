/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * WireTransfer - Wire transfers move funds between your Increase account and any other account accessible by Fedwire.
 */
public class WireTransfer {
    /**
     * The Account to which the transfer belongs.
     */
    @JsonProperty("account_id")
    public String accountId;
    public WireTransfer withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     * The destination account number.
     */
    @JsonProperty("account_number")
    public String accountNumber;
    public WireTransfer withAccountNumber(String accountNumber) {
        this.accountNumber = accountNumber;
        return this;
    }
    
    /**
     * The transfer amount in USD cents.
     */
    @JsonProperty("amount")
    public Long amount;
    public WireTransfer withAmount(Long amount) {
        this.amount = amount;
        return this;
    }
    
    /**
     * If your account requires approvals for transfers and the transfer was approved, this will contain details of the approval.
     */
    @JsonProperty("approval")
    public WireTransferTransferApproval approval;
    public WireTransfer withApproval(WireTransferTransferApproval approval) {
        this.approval = approval;
        return this;
    }
    
    /**
     * The beneficiary's address line 1.
     */
    @JsonProperty("beneficiary_address_line1")
    public String beneficiaryAddressLine1;
    public WireTransfer withBeneficiaryAddressLine1(String beneficiaryAddressLine1) {
        this.beneficiaryAddressLine1 = beneficiaryAddressLine1;
        return this;
    }
    
    /**
     * The beneficiary's address line 2.
     */
    @JsonProperty("beneficiary_address_line2")
    public String beneficiaryAddressLine2;
    public WireTransfer withBeneficiaryAddressLine2(String beneficiaryAddressLine2) {
        this.beneficiaryAddressLine2 = beneficiaryAddressLine2;
        return this;
    }
    
    /**
     * The beneficiary's address line 3.
     */
    @JsonProperty("beneficiary_address_line3")
    public String beneficiaryAddressLine3;
    public WireTransfer withBeneficiaryAddressLine3(String beneficiaryAddressLine3) {
        this.beneficiaryAddressLine3 = beneficiaryAddressLine3;
        return this;
    }
    
    /**
     * The beneficiary's name.
     */
    @JsonProperty("beneficiary_name")
    public String beneficiaryName;
    public WireTransfer withBeneficiaryName(String beneficiaryName) {
        this.beneficiaryName = beneficiaryName;
        return this;
    }
    
    /**
     * If your account requires approvals for transfers and the transfer was not approved, this will contain details of the cancellation.
     */
    @JsonProperty("cancellation")
    public WireTransferTransferCancellation cancellation;
    public WireTransfer withCancellation(WireTransferTransferCancellation cancellation) {
        this.cancellation = cancellation;
        return this;
    }
    
    /**
     * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;
    public WireTransfer withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer's currency. For wire transfers this is always equal to `usd`.
     */
    @JsonProperty("currency")
    public WireTransferCurrencyEnum currency;
    public WireTransfer withCurrency(WireTransferCurrencyEnum currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * The identifier of the External Account the transfer was made to, if any.
     */
    @JsonProperty("external_account_id")
    public String externalAccountId;
    public WireTransfer withExternalAccountId(String externalAccountId) {
        this.externalAccountId = externalAccountId;
        return this;
    }
    
    /**
     * The wire transfer's identifier.
     */
    @JsonProperty("id")
    public String id;
    public WireTransfer withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The message that will show on the recipient's bank statement.
     */
    @JsonProperty("message_to_recipient")
    public String messageToRecipient;
    public WireTransfer withMessageToRecipient(String messageToRecipient) {
        this.messageToRecipient = messageToRecipient;
        return this;
    }
    
    /**
     * The transfer's network.
     */
    @JsonProperty("network")
    public WireTransferNetworkEnum network;
    public WireTransfer withNetwork(WireTransferNetworkEnum network) {
        this.network = network;
        return this;
    }
    
    /**
     * If your transfer is reversed, this will contain details of the reversal.
     */
    @JsonProperty("reversal")
    public WireTransferInboundWireReversal reversal;
    public WireTransfer withReversal(WireTransferInboundWireReversal reversal) {
        this.reversal = reversal;
        return this;
    }
    
    /**
     * The American Bankers' Association (ABA) Routing Transit Number (RTN).
     */
    @JsonProperty("routing_number")
    public String routingNumber;
    public WireTransfer withRoutingNumber(String routingNumber) {
        this.routingNumber = routingNumber;
        return this;
    }
    
    /**
     * The lifecycle status of the transfer.
     */
    @JsonProperty("status")
    public WireTransferStatusEnum status;
    public WireTransfer withStatus(WireTransferStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * After the transfer is submitted to Fedwire, this will contain supplemental details.
     */
    @JsonProperty("submission")
    public WireTransferWireTransferSubmission submission;
    public WireTransfer withSubmission(WireTransferWireTransferSubmission submission) {
        this.submission = submission;
        return this;
    }
    
    /**
     * If the transfer was created from a template, this will be the template's ID.
     */
    @JsonProperty("template_id")
    public String templateId;
    public WireTransfer withTemplateId(String templateId) {
        this.templateId = templateId;
        return this;
    }
    
    /**
     * The ID for the transaction funding the transfer.
     */
    @JsonProperty("transaction_id")
    public String transactionId;
    public WireTransfer withTransactionId(String transactionId) {
        this.transactionId = transactionId;
        return this;
    }
    
    /**
     * A constant representing the object's type. For this resource it will always be `wire_transfer`.
     */
    @JsonProperty("type")
    public WireTransferTypeEnum type;
    public WireTransfer withType(WireTransferTypeEnum type) {
        this.type = type;
        return this;
    }
    
}
