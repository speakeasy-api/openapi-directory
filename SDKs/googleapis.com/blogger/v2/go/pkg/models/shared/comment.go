// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CommentAuthorImage - The creator's avatar.
type CommentAuthorImage struct {
	// The creator's avatar URL.
	URL *string `json:"url,omitempty"`
}

// CommentAuthor - The author of this Comment.
type CommentAuthor struct {
	// The display name.
	DisplayName *string `json:"displayName,omitempty"`
	// The identifier of the creator.
	ID *string `json:"id,omitempty"`
	// The creator's avatar.
	Image *CommentAuthorImage `json:"image,omitempty"`
	// The URL of the creator's Profile page.
	URL *string `json:"url,omitempty"`
}

// CommentBlog - Data about the blog containing this comment.
type CommentBlog struct {
	// The identifier of the blog containing this comment.
	ID *string `json:"id,omitempty"`
}

// CommentInReplyTo - Data about the comment this is in reply to.
type CommentInReplyTo struct {
	// The identified of the parent of this comment.
	ID *string `json:"id,omitempty"`
}

// CommentPost - Data about the post containing this comment.
type CommentPost struct {
	// The identifier of the post containing this comment.
	ID *string `json:"id,omitempty"`
}

// CommentStatusEnum - The status of the comment (only populated for admin users).
type CommentStatusEnum string

const (
	CommentStatusEnumLive    CommentStatusEnum = "LIVE"
	CommentStatusEnumEmptied CommentStatusEnum = "EMPTIED"
	CommentStatusEnumPending CommentStatusEnum = "PENDING"
	CommentStatusEnumSpam    CommentStatusEnum = "SPAM"
)

func (e *CommentStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "LIVE":
		fallthrough
	case "EMPTIED":
		fallthrough
	case "PENDING":
		fallthrough
	case "SPAM":
		*e = CommentStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CommentStatusEnum: %s", s)
	}
}

// Comment - Successful response
type Comment struct {
	// The author of this Comment.
	Author *CommentAuthor `json:"author,omitempty"`
	// Data about the blog containing this comment.
	Blog *CommentBlog `json:"blog,omitempty"`
	// The actual content of the comment. May include HTML markup.
	Content *string `json:"content,omitempty"`
	// The identifier for this resource.
	ID *string `json:"id,omitempty"`
	// Data about the comment this is in reply to.
	InReplyTo *CommentInReplyTo `json:"inReplyTo,omitempty"`
	// The kind of this entry. Always blogger#comment.
	Kind *string `json:"kind,omitempty"`
	// Data about the post containing this comment.
	Post *CommentPost `json:"post,omitempty"`
	// RFC 3339 date-time when this comment was published.
	Published *string `json:"published,omitempty"`
	// The API REST URL to fetch this resource from.
	SelfLink *string `json:"selfLink,omitempty"`
	// The status of the comment (only populated for admin users).
	Status *CommentStatusEnum `json:"status,omitempty"`
	// RFC 3339 date-time when this comment was last updated.
	Updated *string `json:"updated,omitempty"`
}
