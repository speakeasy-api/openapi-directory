// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type OrderLineItemOrderLineItemStatusEnum string

const (
	OrderLineItemOrderLineItemStatusEnumCancelled           OrderLineItemOrderLineItemStatusEnum = "Cancelled"
	OrderLineItemOrderLineItemStatusEnumCompleted           OrderLineItemOrderLineItemStatusEnum = "Completed"
	OrderLineItemOrderLineItemStatusEnumConfirmed           OrderLineItemOrderLineItemStatusEnum = "Confirmed"
	OrderLineItemOrderLineItemStatusEnumPending             OrderLineItemOrderLineItemStatusEnum = "Pending"
	OrderLineItemOrderLineItemStatusEnumProductionCompleted OrderLineItemOrderLineItemStatusEnum = "ProductionCompleted"
	OrderLineItemOrderLineItemStatusEnumShipmentCompleted   OrderLineItemOrderLineItemStatusEnum = "ShipmentCompleted"
)

func (e OrderLineItemOrderLineItemStatusEnum) ToPointer() *OrderLineItemOrderLineItemStatusEnum {
	return &e
}

func (e *OrderLineItemOrderLineItemStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Cancelled":
		fallthrough
	case "Completed":
		fallthrough
	case "Confirmed":
		fallthrough
	case "Pending":
		fallthrough
	case "ProductionCompleted":
		fallthrough
	case "ShipmentCompleted":
		*e = OrderLineItemOrderLineItemStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderLineItemOrderLineItemStatusEnum: %v", v)
	}
}

type OrderLineItemQuantitiesQuantityContextEnum string

const (
	OrderLineItemQuantitiesQuantityContextEnumConfirmed OrderLineItemQuantitiesQuantityContextEnum = "Confirmed"
	OrderLineItemQuantitiesQuantityContextEnumInvoiced  OrderLineItemQuantitiesQuantityContextEnum = "Invoiced"
	OrderLineItemQuantitiesQuantityContextEnumOrdered   OrderLineItemQuantitiesQuantityContextEnum = "Ordered"
	OrderLineItemQuantitiesQuantityContextEnumProduced  OrderLineItemQuantitiesQuantityContextEnum = "Produced"
	OrderLineItemQuantitiesQuantityContextEnumShipped   OrderLineItemQuantitiesQuantityContextEnum = "Shipped"
)

func (e OrderLineItemQuantitiesQuantityContextEnum) ToPointer() *OrderLineItemQuantitiesQuantityContextEnum {
	return &e
}

func (e *OrderLineItemQuantitiesQuantityContextEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Confirmed":
		fallthrough
	case "Invoiced":
		fallthrough
	case "Ordered":
		fallthrough
	case "Produced":
		fallthrough
	case "Shipped":
		*e = OrderLineItemQuantitiesQuantityContextEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderLineItemQuantitiesQuantityContextEnum: %v", v)
	}
}

type OrderLineItemQuantitiesQuantityTypeEnum string

const (
	OrderLineItemQuantitiesQuantityTypeEnumArea          OrderLineItemQuantitiesQuantityTypeEnum = "Area"
	OrderLineItemQuantitiesQuantityTypeEnumCount         OrderLineItemQuantitiesQuantityTypeEnum = "Count"
	OrderLineItemQuantitiesQuantityTypeEnumGrossWeight   OrderLineItemQuantitiesQuantityTypeEnum = "GrossWeight"
	OrderLineItemQuantitiesQuantityTypeEnumLength        OrderLineItemQuantitiesQuantityTypeEnum = "Length"
	OrderLineItemQuantitiesQuantityTypeEnumNetNetWeight  OrderLineItemQuantitiesQuantityTypeEnum = "NetNetWeight"
	OrderLineItemQuantitiesQuantityTypeEnumNetWeight     OrderLineItemQuantitiesQuantityTypeEnum = "NetWeight"
	OrderLineItemQuantitiesQuantityTypeEnumNominalWeight OrderLineItemQuantitiesQuantityTypeEnum = "NominalWeight"
	OrderLineItemQuantitiesQuantityTypeEnumTareWeight    OrderLineItemQuantitiesQuantityTypeEnum = "TareWeight"
)

func (e OrderLineItemQuantitiesQuantityTypeEnum) ToPointer() *OrderLineItemQuantitiesQuantityTypeEnum {
	return &e
}

func (e *OrderLineItemQuantitiesQuantityTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Area":
		fallthrough
	case "Count":
		fallthrough
	case "GrossWeight":
		fallthrough
	case "Length":
		fallthrough
	case "NetNetWeight":
		fallthrough
	case "NetWeight":
		fallthrough
	case "NominalWeight":
		fallthrough
	case "TareWeight":
		*e = OrderLineItemQuantitiesQuantityTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderLineItemQuantitiesQuantityTypeEnum: %v", v)
	}
}

type OrderLineItemQuantitiesQuantityUOMEnum string

const (
	OrderLineItemQuantitiesQuantityUOMEnumBale                      OrderLineItemQuantitiesQuantityUOMEnum = "Bale"
	OrderLineItemQuantitiesQuantityUOMEnumBox                       OrderLineItemQuantitiesQuantityUOMEnum = "Box"
	OrderLineItemQuantitiesQuantityUOMEnumCentimeter                OrderLineItemQuantitiesQuantityUOMEnum = "Centimeter"
	OrderLineItemQuantitiesQuantityUOMEnumDecimeter                 OrderLineItemQuantitiesQuantityUOMEnum = "Decimeter"
	OrderLineItemQuantitiesQuantityUOMEnumFoot                      OrderLineItemQuantitiesQuantityUOMEnum = "Foot"
	OrderLineItemQuantitiesQuantityUOMEnumGram                      OrderLineItemQuantitiesQuantityUOMEnum = "Gram"
	OrderLineItemQuantitiesQuantityUOMEnumHundredPounds             OrderLineItemQuantitiesQuantityUOMEnum = "HundredPounds"
	OrderLineItemQuantitiesQuantityUOMEnumInch                      OrderLineItemQuantitiesQuantityUOMEnum = "Inch"
	OrderLineItemQuantitiesQuantityUOMEnumKilogram                  OrderLineItemQuantitiesQuantityUOMEnum = "Kilogram"
	OrderLineItemQuantitiesQuantityUOMEnumKilometer                 OrderLineItemQuantitiesQuantityUOMEnum = "Kilometer"
	OrderLineItemQuantitiesQuantityUOMEnumMeter                     OrderLineItemQuantitiesQuantityUOMEnum = "Meter"
	OrderLineItemQuantitiesQuantityUOMEnumMetricTon                 OrderLineItemQuantitiesQuantityUOMEnum = "MetricTon"
	OrderLineItemQuantitiesQuantityUOMEnumMillimeter                OrderLineItemQuantitiesQuantityUOMEnum = "Millimeter"
	OrderLineItemQuantitiesQuantityUOMEnumPackage                   OrderLineItemQuantitiesQuantityUOMEnum = "Package"
	OrderLineItemQuantitiesQuantityUOMEnumPalletUnit                OrderLineItemQuantitiesQuantityUOMEnum = "PalletUnit"
	OrderLineItemQuantitiesQuantityUOMEnumPiece                     OrderLineItemQuantitiesQuantityUOMEnum = "Piece"
	OrderLineItemQuantitiesQuantityUOMEnumPound                     OrderLineItemQuantitiesQuantityUOMEnum = "Pound"
	OrderLineItemQuantitiesQuantityUOMEnumPulpUnit                  OrderLineItemQuantitiesQuantityUOMEnum = "PulpUnit"
	OrderLineItemQuantitiesQuantityUOMEnumReam                      OrderLineItemQuantitiesQuantityUOMEnum = "Ream"
	OrderLineItemQuantitiesQuantityUOMEnumReel                      OrderLineItemQuantitiesQuantityUOMEnum = "Reel"
	OrderLineItemQuantitiesQuantityUOMEnumSheet                     OrderLineItemQuantitiesQuantityUOMEnum = "Sheet"
	OrderLineItemQuantitiesQuantityUOMEnumShortTon                  OrderLineItemQuantitiesQuantityUOMEnum = "ShortTon"
	OrderLineItemQuantitiesQuantityUOMEnumSkid                      OrderLineItemQuantitiesQuantityUOMEnum = "Skid"
	OrderLineItemQuantitiesQuantityUOMEnumSquareDecimeter           OrderLineItemQuantitiesQuantityUOMEnum = "SquareDecimeter"
	OrderLineItemQuantitiesQuantityUOMEnumSquareFoot                OrderLineItemQuantitiesQuantityUOMEnum = "SquareFoot"
	OrderLineItemQuantitiesQuantityUOMEnumSquareInch                OrderLineItemQuantitiesQuantityUOMEnum = "SquareInch"
	OrderLineItemQuantitiesQuantityUOMEnumSquareMeter               OrderLineItemQuantitiesQuantityUOMEnum = "SquareMeter"
	OrderLineItemQuantitiesQuantityUOMEnumThousandPieces            OrderLineItemQuantitiesQuantityUOMEnum = "ThousandPieces"
	OrderLineItemQuantitiesQuantityUOMEnumThousandSquareCentimeters OrderLineItemQuantitiesQuantityUOMEnum = "ThousandSquareCentimeters"
	OrderLineItemQuantitiesQuantityUOMEnumThousandSquareFeet        OrderLineItemQuantitiesQuantityUOMEnum = "ThousandSquareFeet"
	OrderLineItemQuantitiesQuantityUOMEnumThousandSquareInches      OrderLineItemQuantitiesQuantityUOMEnum = "ThousandSquareInches"
	OrderLineItemQuantitiesQuantityUOMEnumYard                      OrderLineItemQuantitiesQuantityUOMEnum = "Yard"
)

func (e OrderLineItemQuantitiesQuantityUOMEnum) ToPointer() *OrderLineItemQuantitiesQuantityUOMEnum {
	return &e
}

func (e *OrderLineItemQuantitiesQuantityUOMEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Bale":
		fallthrough
	case "Box":
		fallthrough
	case "Centimeter":
		fallthrough
	case "Decimeter":
		fallthrough
	case "Foot":
		fallthrough
	case "Gram":
		fallthrough
	case "HundredPounds":
		fallthrough
	case "Inch":
		fallthrough
	case "Kilogram":
		fallthrough
	case "Kilometer":
		fallthrough
	case "Meter":
		fallthrough
	case "MetricTon":
		fallthrough
	case "Millimeter":
		fallthrough
	case "Package":
		fallthrough
	case "PalletUnit":
		fallthrough
	case "Piece":
		fallthrough
	case "Pound":
		fallthrough
	case "PulpUnit":
		fallthrough
	case "Ream":
		fallthrough
	case "Reel":
		fallthrough
	case "Sheet":
		fallthrough
	case "ShortTon":
		fallthrough
	case "Skid":
		fallthrough
	case "SquareDecimeter":
		fallthrough
	case "SquareFoot":
		fallthrough
	case "SquareInch":
		fallthrough
	case "SquareMeter":
		fallthrough
	case "ThousandPieces":
		fallthrough
	case "ThousandSquareCentimeters":
		fallthrough
	case "ThousandSquareFeet":
		fallthrough
	case "ThousandSquareInches":
		fallthrough
	case "Yard":
		*e = OrderLineItemQuantitiesQuantityUOMEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderLineItemQuantitiesQuantityUOMEnum: %v", v)
	}
}

type OrderLineItemQuantities struct {
	QuantityContext *OrderLineItemQuantitiesQuantityContextEnum `json:"quantityContext,omitempty"`
	QuantityType    *OrderLineItemQuantitiesQuantityTypeEnum    `json:"quantityType,omitempty"`
	QuantityUOM     *OrderLineItemQuantitiesQuantityUOMEnum     `json:"quantityUOM,omitempty"`
	QuantityValue   *float64                                    `json:"quantityValue,omitempty"`
}

type OrderLineItem struct {
	Changeable          *bool                                `json:"changeable,omitempty"`
	ID                  string                               `json:"id"`
	OrderLineItemNumber float64                              `json:"orderLineItemNumber"`
	OrderLineItemStatus OrderLineItemOrderLineItemStatusEnum `json:"orderLineItemStatus"`
	Quantities          []OrderLineItemQuantities            `json:"quantities,omitempty"`
}
