<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Docs 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create doc
     * 
     * Create a new doc inside of this project
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDocRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDocSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateDocResponse
     */
	public function createDoc(
        \OpenAPI\OpenAPI\Models\Operations\CreateDocRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateDocSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateDocResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/docs');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "doc", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateDocResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201 or $httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Delete doc
     * 
     * Delete the doc with this slug
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDocRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDocSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteDocResponse
     */
	public function deleteDoc(
        \OpenAPI\OpenAPI\Models\Operations\DeleteDocRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteDocSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteDocResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/docs/{slug}', \OpenAPI\OpenAPI\Models\Operations\DeleteDocRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteDocResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get doc
     * 
     * Returns the doc with this slug
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDocRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDocSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDocResponse
     */
	public function getDoc(
        \OpenAPI\OpenAPI\Models\Operations\GetDocRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetDocSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDocResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/docs/{slug}', \OpenAPI\OpenAPI\Models\Operations\GetDocRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDocResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Search docs
     * 
     * Returns all docs that match the search
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SearchDocsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SearchDocsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SearchDocsResponse
     */
	public function searchDocs(
        \OpenAPI\OpenAPI\Models\Operations\SearchDocsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SearchDocsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SearchDocsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/docs/search');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SearchDocsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SearchDocsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update doc
     * 
     * Update a doc with this slug
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDocRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDocSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDocResponse
     */
	public function updateDoc(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDocRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateDocSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDocResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/docs/{slug}', \OpenAPI\OpenAPI\Models\Operations\UpdateDocRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "doc", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDocResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
}