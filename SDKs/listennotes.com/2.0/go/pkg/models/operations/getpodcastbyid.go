// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetPodcastByIDSortEnum - How do you want to sort the episodes of this podcast?
type GetPodcastByIDSortEnum string

const (
	GetPodcastByIDSortEnumRecentFirst GetPodcastByIDSortEnum = "recent_first"
	GetPodcastByIDSortEnumOldestFirst GetPodcastByIDSortEnum = "oldest_first"
)

func (e GetPodcastByIDSortEnum) ToPointer() *GetPodcastByIDSortEnum {
	return &e
}

func (e *GetPodcastByIDSortEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "recent_first":
		fallthrough
	case "oldest_first":
		*e = GetPodcastByIDSortEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPodcastByIDSortEnum: %v", v)
	}
}

type GetPodcastByIDRequest struct {
	// Get API Key on listennotes.com/api
	XListenAPIKey string `header:"style=simple,explode=false,name=X-ListenAPI-Key"`
	// Podcast id. You can get podcast id from using other endpoints, e.g., `GET /search`, `GET /best_podcasts`...
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// For episodes pagination. It's the value of **next_episode_pub_date** from the response of last request. If not specified, just return latest 10 episodes or oldest 10 episodes, depending on the value of the **sort** parameter.
	//
	NextEpisodePubDate *int64 `queryParam:"style=form,explode=true,name=next_episode_pub_date"`
	// How do you want to sort the episodes of this podcast?
	//
	Sort *GetPodcastByIDSortEnum `queryParam:"style=form,explode=true,name=sort"`
}

type GetPodcastByIDResponse struct {
	ContentType string
	Headers     map[string][]string
	// OK
	PodcastFull *shared.PodcastFull
	StatusCode  int
	RawResponse *http.Response
}
