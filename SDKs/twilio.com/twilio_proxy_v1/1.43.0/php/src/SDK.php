<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - This is the public Twilio REST API.
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'https://proxy.twilio.com',
	];
	
	public const CREATE_MESSAGE_INTERACTION_SERVERS = [
		'https://proxy.twilio.com',
	];
	
	public const CREATE_PARTICIPANT_SERVERS = [
		'https://proxy.twilio.com',
	];
	
	public const CREATE_PHONE_NUMBER_SERVERS = [
		'https://proxy.twilio.com',
	];
	
	public const CREATE_SERVICE_SERVERS = [
		'https://proxy.twilio.com',
	];
	
	public const CREATE_SESSION_SERVERS = [
		'https://proxy.twilio.com',
	];
	
	public const CREATE_SHORT_CODE_SERVERS = [
		'https://proxy.twilio.com',
	];
	
	public const DELETE_INTERACTION_SERVERS = [
		'https://proxy.twilio.com',
	];
	
	public const DELETE_PARTICIPANT_SERVERS = [
		'https://proxy.twilio.com',
	];
	
	public const DELETE_PHONE_NUMBER_SERVERS = [
		'https://proxy.twilio.com',
	];
	
	public const DELETE_SERVICE_SERVERS = [
		'https://proxy.twilio.com',
	];
	
	public const DELETE_SESSION_SERVERS = [
		'https://proxy.twilio.com',
	];
	
	public const DELETE_SHORT_CODE_SERVERS = [
		'https://proxy.twilio.com',
	];
	
	public const FETCH_INTERACTION_SERVERS = [
		'https://proxy.twilio.com',
	];
	
	public const FETCH_MESSAGE_INTERACTION_SERVERS = [
		'https://proxy.twilio.com',
	];
	
	public const FETCH_PARTICIPANT_SERVERS = [
		'https://proxy.twilio.com',
	];
	
	public const FETCH_PHONE_NUMBER_SERVERS = [
		'https://proxy.twilio.com',
	];
	
	public const FETCH_SERVICE_SERVERS = [
		'https://proxy.twilio.com',
	];
	
	public const FETCH_SESSION_SERVERS = [
		'https://proxy.twilio.com',
	];
	
	public const FETCH_SHORT_CODE_SERVERS = [
		'https://proxy.twilio.com',
	];
	
	public const LIST_INTERACTION_SERVERS = [
		'https://proxy.twilio.com',
	];
	
	public const LIST_MESSAGE_INTERACTION_SERVERS = [
		'https://proxy.twilio.com',
	];
	
	public const LIST_PARTICIPANT_SERVERS = [
		'https://proxy.twilio.com',
	];
	
	public const LIST_PHONE_NUMBER_SERVERS = [
		'https://proxy.twilio.com',
	];
	
	public const LIST_SERVICE_SERVERS = [
		'https://proxy.twilio.com',
	];
	
	public const LIST_SESSION_SERVERS = [
		'https://proxy.twilio.com',
	];
	
	public const LIST_SHORT_CODE_SERVERS = [
		'https://proxy.twilio.com',
	];
	
	public const UPDATE_PHONE_NUMBER_SERVERS = [
		'https://proxy.twilio.com',
	];
	
	public const UPDATE_SERVICE_SERVERS = [
		'https://proxy.twilio.com',
	];
	
	public const UPDATE_SESSION_SERVERS = [
		'https://proxy.twilio.com',
	];
	
	public const UPDATE_SHORT_CODE_SERVERS = [
		'https://proxy.twilio.com',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * Create a new message Interaction to send directly from your system to one [Participant](https://www.twilio.com/docs/proxy/api/participant).  The `inbound` properties for the Interaction will always be empty.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateMessageInteractionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateMessageInteractionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateMessageInteractionResponse
     */
	public function createMessageInteraction(
        \OpenAPI\OpenAPI\Models\Operations\CreateMessageInteractionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateMessageInteractionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateMessageInteractionResponse
    {
        $baseUrl = SDK::CREATE_MESSAGE_INTERACTION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Participants/{ParticipantSid}/MessageInteractions', \OpenAPI\OpenAPI\Models\Operations\CreateMessageInteractionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateMessageInteractionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->proxyV1ServiceSessionParticipantMessageInteraction = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProxyV1ServiceSessionParticipantMessageInteraction', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a new Participant to the Session
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateParticipantRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateParticipantSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateParticipantResponse
     */
	public function createParticipant(
        \OpenAPI\OpenAPI\Models\Operations\CreateParticipantRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateParticipantSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateParticipantResponse
    {
        $baseUrl = SDK::CREATE_PARTICIPANT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Participants', \OpenAPI\OpenAPI\Models\Operations\CreateParticipantRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateParticipantResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->proxyV1ServiceSessionParticipant = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProxyV1ServiceSessionParticipant', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a Phone Number to a Service's Proxy Number Pool.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreatePhoneNumberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreatePhoneNumberSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreatePhoneNumberResponse
     */
	public function createPhoneNumber(
        \OpenAPI\OpenAPI\Models\Operations\CreatePhoneNumberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreatePhoneNumberSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreatePhoneNumberResponse
    {
        $baseUrl = SDK::CREATE_PHONE_NUMBER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/PhoneNumbers', \OpenAPI\OpenAPI\Models\Operations\CreatePhoneNumberRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreatePhoneNumberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->proxyV1ServicePhoneNumber = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProxyV1ServicePhoneNumber', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new Service for Twilio Proxy
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateServiceCreateServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateServiceResponse
     */
	public function createService(
        \OpenAPI\OpenAPI\Models\Operations\CreateServiceCreateServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateServiceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateServiceResponse
    {
        $baseUrl = SDK::CREATE_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->proxyV1Service = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProxyV1Service', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new Session
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSessionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSessionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSessionResponse
     */
	public function createSession(
        \OpenAPI\OpenAPI\Models\Operations\CreateSessionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateSessionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSessionResponse
    {
        $baseUrl = SDK::CREATE_SESSION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Sessions', \OpenAPI\OpenAPI\Models\Operations\CreateSessionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSessionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->proxyV1ServiceSession = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProxyV1ServiceSession', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a Short Code to the Proxy Number Pool for the Service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateShortCodeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateShortCodeSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateShortCodeResponse
     */
	public function createShortCode(
        \OpenAPI\OpenAPI\Models\Operations\CreateShortCodeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateShortCodeSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateShortCodeResponse
    {
        $baseUrl = SDK::CREATE_SHORT_CODE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/ShortCodes', \OpenAPI\OpenAPI\Models\Operations\CreateShortCodeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateShortCodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->proxyV1ServiceShortCode = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProxyV1ServiceShortCode', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a specific Interaction.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteInteractionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteInteractionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteInteractionResponse
     */
	public function deleteInteraction(
        \OpenAPI\OpenAPI\Models\Operations\DeleteInteractionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteInteractionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteInteractionResponse
    {
        $baseUrl = SDK::DELETE_INTERACTION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Interactions/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteInteractionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteInteractionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a specific Participant. This is a soft-delete. The participant remains associated with the session and cannot be re-added. Participants are only permanently deleted when the [Session](https://www.twilio.com/docs/proxy/api/session) is deleted.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteParticipantRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteParticipantSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteParticipantResponse
     */
	public function deleteParticipant(
        \OpenAPI\OpenAPI\Models\Operations\DeleteParticipantRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteParticipantSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteParticipantResponse
    {
        $baseUrl = SDK::DELETE_PARTICIPANT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Participants/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteParticipantRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteParticipantResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a specific Phone Number from a Service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeletePhoneNumberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeletePhoneNumberSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeletePhoneNumberResponse
     */
	public function deletePhoneNumber(
        \OpenAPI\OpenAPI\Models\Operations\DeletePhoneNumberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeletePhoneNumberSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeletePhoneNumberResponse
    {
        $baseUrl = SDK::DELETE_PHONE_NUMBER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/PhoneNumbers/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeletePhoneNumberRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeletePhoneNumberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a specific Service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteServiceResponse
     */
	public function deleteService(
        \OpenAPI\OpenAPI\Models\Operations\DeleteServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteServiceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteServiceResponse
    {
        $baseUrl = SDK::DELETE_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a specific Session.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSessionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSessionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSessionResponse
     */
	public function deleteSession(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSessionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSessionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSessionResponse
    {
        $baseUrl = SDK::DELETE_SESSION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Sessions/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteSessionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSessionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a specific Short Code from a Service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteShortCodeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteShortCodeSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteShortCodeResponse
     */
	public function deleteShortCode(
        \OpenAPI\OpenAPI\Models\Operations\DeleteShortCodeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteShortCodeSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteShortCodeResponse
    {
        $baseUrl = SDK::DELETE_SHORT_CODE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/ShortCodes/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteShortCodeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteShortCodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Retrieve a list of Interactions for a given [Session](https://www.twilio.com/docs/proxy/api/session).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchInteractionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchInteractionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchInteractionResponse
     */
	public function fetchInteraction(
        \OpenAPI\OpenAPI\Models\Operations\FetchInteractionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchInteractionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchInteractionResponse
    {
        $baseUrl = SDK::FETCH_INTERACTION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Interactions/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchInteractionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchInteractionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->proxyV1ServiceSessionInteraction = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProxyV1ServiceSessionInteraction', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchMessageInteraction
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchMessageInteractionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchMessageInteractionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchMessageInteractionResponse
     */
	public function fetchMessageInteraction(
        \OpenAPI\OpenAPI\Models\Operations\FetchMessageInteractionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchMessageInteractionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchMessageInteractionResponse
    {
        $baseUrl = SDK::FETCH_MESSAGE_INTERACTION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Participants/{ParticipantSid}/MessageInteractions/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchMessageInteractionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchMessageInteractionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->proxyV1ServiceSessionParticipantMessageInteraction = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProxyV1ServiceSessionParticipantMessageInteraction', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific Participant.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchParticipantRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchParticipantSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchParticipantResponse
     */
	public function fetchParticipant(
        \OpenAPI\OpenAPI\Models\Operations\FetchParticipantRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchParticipantSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchParticipantResponse
    {
        $baseUrl = SDK::FETCH_PARTICIPANT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Participants/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchParticipantRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchParticipantResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->proxyV1ServiceSessionParticipant = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProxyV1ServiceSessionParticipant', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific Phone Number.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchPhoneNumberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchPhoneNumberSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchPhoneNumberResponse
     */
	public function fetchPhoneNumber(
        \OpenAPI\OpenAPI\Models\Operations\FetchPhoneNumberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchPhoneNumberSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchPhoneNumberResponse
    {
        $baseUrl = SDK::FETCH_PHONE_NUMBER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/PhoneNumbers/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchPhoneNumberRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchPhoneNumberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->proxyV1ServicePhoneNumber = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProxyV1ServicePhoneNumber', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific Service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchServiceResponse
     */
	public function fetchService(
        \OpenAPI\OpenAPI\Models\Operations\FetchServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchServiceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchServiceResponse
    {
        $baseUrl = SDK::FETCH_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->proxyV1Service = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProxyV1Service', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific Session.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSessionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSessionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchSessionResponse
     */
	public function fetchSession(
        \OpenAPI\OpenAPI\Models\Operations\FetchSessionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchSessionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchSessionResponse
    {
        $baseUrl = SDK::FETCH_SESSION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Sessions/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchSessionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchSessionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->proxyV1ServiceSession = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProxyV1ServiceSession', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific Short Code.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchShortCodeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchShortCodeSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchShortCodeResponse
     */
	public function fetchShortCode(
        \OpenAPI\OpenAPI\Models\Operations\FetchShortCodeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchShortCodeSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchShortCodeResponse
    {
        $baseUrl = SDK::FETCH_SHORT_CODE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/ShortCodes/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchShortCodeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchShortCodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->proxyV1ServiceShortCode = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProxyV1ServiceShortCode', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Interactions for a Session. A maximum of 100 records will be returned per page.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListInteractionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListInteractionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListInteractionResponse
     */
	public function listInteraction(
        \OpenAPI\OpenAPI\Models\Operations\ListInteractionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListInteractionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListInteractionResponse
    {
        $baseUrl = SDK::LIST_INTERACTION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Interactions', \OpenAPI\OpenAPI\Models\Operations\ListInteractionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListInteractionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListInteractionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listInteractionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListInteractionListInteractionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listMessageInteraction
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListMessageInteractionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListMessageInteractionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListMessageInteractionResponse
     */
	public function listMessageInteraction(
        \OpenAPI\OpenAPI\Models\Operations\ListMessageInteractionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListMessageInteractionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListMessageInteractionResponse
    {
        $baseUrl = SDK::LIST_MESSAGE_INTERACTION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Participants/{ParticipantSid}/MessageInteractions', \OpenAPI\OpenAPI\Models\Operations\ListMessageInteractionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListMessageInteractionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListMessageInteractionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listMessageInteractionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListMessageInteractionListMessageInteractionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Participants in a Session.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListParticipantRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListParticipantSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListParticipantResponse
     */
	public function listParticipant(
        \OpenAPI\OpenAPI\Models\Operations\ListParticipantRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListParticipantSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListParticipantResponse
    {
        $baseUrl = SDK::LIST_PARTICIPANT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Participants', \OpenAPI\OpenAPI\Models\Operations\ListParticipantRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListParticipantRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListParticipantResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listParticipantResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListParticipantListParticipantResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Phone Numbers in the Proxy Number Pool for a Service. A maximum of 100 records will be returned per page.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListPhoneNumberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListPhoneNumberSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListPhoneNumberResponse
     */
	public function listPhoneNumber(
        \OpenAPI\OpenAPI\Models\Operations\ListPhoneNumberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListPhoneNumberSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListPhoneNumberResponse
    {
        $baseUrl = SDK::LIST_PHONE_NUMBER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/PhoneNumbers', \OpenAPI\OpenAPI\Models\Operations\ListPhoneNumberRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListPhoneNumberRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListPhoneNumberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listPhoneNumberResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListPhoneNumberListPhoneNumberResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Services for Twilio Proxy. A maximum of 100 records will be returned per page.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListServiceResponse
     */
	public function listService(
        \OpenAPI\OpenAPI\Models\Operations\ListServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListServiceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListServiceResponse
    {
        $baseUrl = SDK::LIST_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListServiceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listServiceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListServiceListServiceResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Sessions for the Service. A maximum of 100 records will be returned per page.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSessionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSessionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSessionResponse
     */
	public function listSession(
        \OpenAPI\OpenAPI\Models\Operations\ListSessionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSessionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSessionResponse
    {
        $baseUrl = SDK::LIST_SESSION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Sessions', \OpenAPI\OpenAPI\Models\Operations\ListSessionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSessionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSessionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSessionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListSessionListSessionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Short Codes in the Proxy Number Pool for the Service. A maximum of 100 records will be returned per page.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListShortCodeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListShortCodeSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListShortCodeResponse
     */
	public function listShortCode(
        \OpenAPI\OpenAPI\Models\Operations\ListShortCodeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListShortCodeSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListShortCodeResponse
    {
        $baseUrl = SDK::LIST_SHORT_CODE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/ShortCodes', \OpenAPI\OpenAPI\Models\Operations\ListShortCodeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListShortCodeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListShortCodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listShortCodeResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListShortCodeListShortCodeResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a specific Proxy Number.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatePhoneNumberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatePhoneNumberSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdatePhoneNumberResponse
     */
	public function updatePhoneNumber(
        \OpenAPI\OpenAPI\Models\Operations\UpdatePhoneNumberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdatePhoneNumberSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdatePhoneNumberResponse
    {
        $baseUrl = SDK::UPDATE_PHONE_NUMBER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/PhoneNumbers/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdatePhoneNumberRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdatePhoneNumberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->proxyV1ServicePhoneNumber = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProxyV1ServicePhoneNumber', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a specific Service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateServiceResponse
     */
	public function updateService(
        \OpenAPI\OpenAPI\Models\Operations\UpdateServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateServiceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateServiceResponse
    {
        $baseUrl = SDK::UPDATE_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->proxyV1Service = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProxyV1Service', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a specific Session.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSessionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSessionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSessionResponse
     */
	public function updateSession(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSessionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateSessionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSessionResponse
    {
        $baseUrl = SDK::UPDATE_SESSION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Sessions/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateSessionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSessionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->proxyV1ServiceSession = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProxyV1ServiceSession', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a specific Short Code.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateShortCodeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateShortCodeSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateShortCodeResponse
     */
	public function updateShortCode(
        \OpenAPI\OpenAPI\Models\Operations\UpdateShortCodeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateShortCodeSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateShortCodeResponse
    {
        $baseUrl = SDK::UPDATE_SHORT_CODE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/ShortCodes/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateShortCodeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateShortCodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->proxyV1ServiceShortCode = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProxyV1ServiceShortCode', 'json');
            }
        }

        return $response;
    }
}