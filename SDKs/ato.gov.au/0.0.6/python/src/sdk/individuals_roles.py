"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class IndividualsRoles:
    r"""A role defines the characteristics of a relationship between parties.
    An Individual can participate in a relationship with other individuals and organisations.
    
    For example:
    
    | Party         | Role           | Relationship     | Role          | Party                           |
    | ------------- | -------------- | ---------------- | ------------- | ------------------------------- |
    | Homer Simpson | Husband        | Marriage         | Wife          | Marge Simpson                   |
    | Homer Simpson | Employee       | Employment       | Employer      | Springfield Nuclear Power Plant |
    | Homer Simpson | Safety Officer | Colleague        | Supervisor    | Carl Carlson                    |
    | Homer Simpson | Director       | Directorship     | Company       | Compu Global Hyper Mega Net     |
    | Homer Simpson | Employee       | Employment       | Employer      | Compu Global Hyper Mega Net     |
    | Homer Simpson | Member         | Membership       | Organisation  | The Stonecutters                |
    | Homer Simpson | Partner        | Partnership      | Partnership   | The Be Sharps                   |
    | Homer Simpson | Trustee        | Trusteeship      | Trust         | The Simpson Family Trust        |
    | Homer Simpson | Member         | Membership       | Association   | Mensa International             |
    
    You can use the API's **metadata services** to retrieve information about the classifcation schemes and
    values used by the Registry.
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_individuals_party_id_roles_role_id_(self, request: operations.DeleteIndividualsPartyIDRolesRoleIDRequest) -> operations.DeleteIndividualsPartyIDRolesRoleIDResponse:
        r"""Delete a role
        Delete a role
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteIndividualsPartyIDRolesRoleIDRequest, base_url, '/individuals/{partyId}/roles/{roleId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteIndividualsPartyIDRolesRoleIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Unauthenticated])
                res.unauthenticated = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def get_individuals_party_id_roles(self, request: operations.GetIndividualsPartyIDRolesRequest) -> operations.GetIndividualsPartyIDRolesResponse:
        r"""Retrieve a list of roles"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetIndividualsPartyIDRolesRequest, base_url, '/individuals/{partyId}/roles', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetIndividualsPartyIDRolesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PartyRole]])
                res.party_roles = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Unauthenticated])
                res.unauthenticated = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def get_individuals_party_id_roles_role_id_(self, request: operations.GetIndividualsPartyIDRolesRoleIDRequest) -> operations.GetIndividualsPartyIDRolesRoleIDResponse:
        r"""Retrieve a role
        Retrieve a role
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetIndividualsPartyIDRolesRoleIDRequest, base_url, '/individuals/{partyId}/roles/{roleId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetIndividualsPartyIDRolesRoleIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PartyRole])
                res.party_role = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Unauthenticated])
                res.unauthenticated = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def post_individuals_party_id_roles(self, request: operations.PostIndividualsPartyIDRolesRequest) -> operations.PostIndividualsPartyIDRolesResponse:
        r"""Create a role
        Create a role
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostIndividualsPartyIDRolesRequest, base_url, '/individuals/{partyId}/roles', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "party_role_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostIndividualsPartyIDRolesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PartyRole])
                res.party_role = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvalidArgument])
                res.invalid_argument = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Unauthenticated])
                res.unauthenticated = out

        return res

    def put_individuals_party_id_roles_role_id_(self, request: operations.PutIndividualsPartyIDRolesRoleIDRequest) -> operations.PutIndividualsPartyIDRolesRoleIDResponse:
        r"""Update a role
        Update a role
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutIndividualsPartyIDRolesRoleIDRequest, base_url, '/individuals/{partyId}/roles/{roleId}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "party_role_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutIndividualsPartyIDRolesRoleIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PartyRole])
                res.party_role = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvalidArgument])
                res.invalid_argument = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Unauthenticated])
                res.unauthenticated = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    