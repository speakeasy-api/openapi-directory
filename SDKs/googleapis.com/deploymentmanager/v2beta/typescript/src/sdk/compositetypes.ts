/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class CompositeTypes {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Deletes a composite type.
   */
  deploymentmanagerCompositeTypesDelete(
    req: operations.DeploymentmanagerCompositeTypesDeleteRequest,
    security: operations.DeploymentmanagerCompositeTypesDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeploymentmanagerCompositeTypesDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeploymentmanagerCompositeTypesDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/deploymentmanager/v2beta/projects/{project}/global/compositeTypes/{compositeType}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeploymentmanagerCompositeTypesDeleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeploymentmanagerCompositeTypesDeleteResponse =
        new operations.DeploymentmanagerCompositeTypesDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets information about a specific composite type.
   */
  deploymentmanagerCompositeTypesGet(
    req: operations.DeploymentmanagerCompositeTypesGetRequest,
    security: operations.DeploymentmanagerCompositeTypesGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeploymentmanagerCompositeTypesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeploymentmanagerCompositeTypesGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/deploymentmanager/v2beta/projects/{project}/global/compositeTypes/{compositeType}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeploymentmanagerCompositeTypesGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeploymentmanagerCompositeTypesGetResponse =
        new operations.DeploymentmanagerCompositeTypesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.compositeType = utils.objectToClass(
              httpRes?.data,
              shared.CompositeType
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a composite type.
   */
  deploymentmanagerCompositeTypesInsert(
    req: operations.DeploymentmanagerCompositeTypesInsertRequest,
    security: operations.DeploymentmanagerCompositeTypesInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeploymentmanagerCompositeTypesInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeploymentmanagerCompositeTypesInsertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/deploymentmanager/v2beta/projects/{project}/global/compositeTypes",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "compositeType",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeploymentmanagerCompositeTypesInsertSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeploymentmanagerCompositeTypesInsertResponse =
        new operations.DeploymentmanagerCompositeTypesInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all composite types for Deployment Manager.
   */
  deploymentmanagerCompositeTypesList(
    req: operations.DeploymentmanagerCompositeTypesListRequest,
    security: operations.DeploymentmanagerCompositeTypesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeploymentmanagerCompositeTypesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeploymentmanagerCompositeTypesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/deploymentmanager/v2beta/projects/{project}/global/compositeTypes",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeploymentmanagerCompositeTypesListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeploymentmanagerCompositeTypesListResponse =
        new operations.DeploymentmanagerCompositeTypesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.compositeTypesListResponse = utils.objectToClass(
              httpRes?.data,
              shared.CompositeTypesListResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Patches a composite type.
   */
  deploymentmanagerCompositeTypesPatch(
    req: operations.DeploymentmanagerCompositeTypesPatchRequest,
    security: operations.DeploymentmanagerCompositeTypesPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeploymentmanagerCompositeTypesPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeploymentmanagerCompositeTypesPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/deploymentmanager/v2beta/projects/{project}/global/compositeTypes/{compositeType}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "compositeType1",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeploymentmanagerCompositeTypesPatchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeploymentmanagerCompositeTypesPatchResponse =
        new operations.DeploymentmanagerCompositeTypesPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a composite type.
   */
  deploymentmanagerCompositeTypesUpdate(
    req: operations.DeploymentmanagerCompositeTypesUpdateRequest,
    security: operations.DeploymentmanagerCompositeTypesUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeploymentmanagerCompositeTypesUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeploymentmanagerCompositeTypesUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/deploymentmanager/v2beta/projects/{project}/global/compositeTypes/{compositeType}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "compositeType1",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeploymentmanagerCompositeTypesUpdateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeploymentmanagerCompositeTypesUpdateResponse =
        new operations.DeploymentmanagerCompositeTypesUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }
}
