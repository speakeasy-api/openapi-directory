// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// TagResourcesXAmzTargetEnum
type TagResourcesXAmzTargetEnum string

const (
	TagResourcesXAmzTargetEnumResourceGroupsTaggingApi20170126TagResources TagResourcesXAmzTargetEnum = "ResourceGroupsTaggingAPI_20170126.TagResources"
)

func (e *TagResourcesXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ResourceGroupsTaggingAPI_20170126.TagResources":
		*e = TagResourcesXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TagResourcesXAmzTargetEnum: %s", s)
	}
}

type TagResourcesRequest struct {
	TagResourcesInput shared.TagResourcesInput   `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        TagResourcesXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type TagResourcesResponse struct {
	ContentType string
	// InternalServiceException
	InternalServiceException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// Success
	TagResourcesOutput *shared.TagResourcesOutput
	// ThrottledException
	ThrottledException interface{}
}
