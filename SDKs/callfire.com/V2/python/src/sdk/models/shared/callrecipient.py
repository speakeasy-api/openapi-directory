"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CallRecipientVoiceEnum(str, Enum):
    r"""The voice to be used (MALE1, FEMALE1, FEMALE2, SPANISH1, FRENCHCANADIAN1)"""
    MALE1 = 'MALE1'
    FEMALE1 = 'FEMALE1'
    FEMALE2 = 'FEMALE2'
    SPANISH1 = 'SPANISH1'
    FRENCHCANADIAN1 = 'FRENCHCANADIAN1'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CallRecipient:
    r"""Recipient of a campaign action. Can be a phone number, contact, or contact list with attributes added to action. It is required to specify one of this values"""
    
    attributes: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes'), 'exclude': lambda f: f is None }})
    r"""Map of user-defined string attributes associated with recipient"""  
    contact_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contactId'), 'exclude': lambda f: f is None }})
    r"""An id of existing contact used as recipient"""  
    dialplan_xml: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dialplanXml'), 'exclude': lambda f: f is None }})
    r"""An IVR xml document describing dialplan to setup an IVR broadcast. If dialplan is set there is no need to set live, machine and transfer sounds (or vice versa)"""  
    from_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fromNumber'), 'exclude': lambda f: f is None }})
    r"""~"""  
    live_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('liveMessage'), 'exclude': lambda f: f is None }})
    r"""Text to be turned into a sound, this text will be played when the phone is answered"""  
    live_message_sound_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('liveMessageSoundId'), 'exclude': lambda f: f is None }})
    r"""An id of a sound file to play if phone is answered"""  
    machine_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('machineMessage'), 'exclude': lambda f: f is None }})
    r"""Text to be used to turn into sound, this text will be played when answering machine is detected"""  
    machine_message_sound_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('machineMessageSoundId'), 'exclude': lambda f: f is None }})
    r"""An id of a sound file to play if answering machine is detected"""  
    phone_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phoneNumber'), 'exclude': lambda f: f is None }})
    r"""Recipient's phone number in E.164 format (11-digit) or short code. Example: 12132000384"""  
    transfer_digit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transferDigit'), 'exclude': lambda f: f is None }})
    r"""A digit pressed to initiate the transfer"""  
    transfer_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transferMessage'), 'exclude': lambda f: f is None }})
    r"""Text to be turned into sound, this text will be played when the transfer digit is played"""  
    transfer_message_sound_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transferMessageSoundId'), 'exclude': lambda f: f is None }})
    r"""An id of a sound file to play if call is transferred"""  
    transfer_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transferNumber'), 'exclude': lambda f: f is None }})
    r"""Phone number in E.164 format (11-digit) to transfer the call to. Example: 12132000384"""  
    voice: Optional[CallRecipientVoiceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voice'), 'exclude': lambda f: f is None }})
    r"""The voice to be used (MALE1, FEMALE1, FEMALE2, SPANISH1, FRENCHCANADIAN1)"""  
    