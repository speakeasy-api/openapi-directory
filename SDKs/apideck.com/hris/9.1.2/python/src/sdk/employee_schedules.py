"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class EmployeeSchedules:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def employee_schedules_all(self, request: operations.EmployeeSchedulesAllRequest, security: operations.EmployeeSchedulesAllSecurity) -> operations.EmployeeSchedulesAllResponse:
        r"""List Employee Schedules
        List schedules for employee, a schedule is a work pattern, not the actual worked hours, for an employee.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EmployeeSchedulesAllRequest, base_url, '/hris/schedules/employees/{employee_id}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.EmployeeSchedulesAllRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EmployeeSchedulesAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetEmployeeSchedulesResponse])
                res.get_employee_schedules_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BadRequestResponse])
                res.bad_request_response = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UnauthorizedResponse])
                res.unauthorized_response = out
        elif http_res.status_code == 402:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaymentRequiredResponse])
                res.payment_required_response = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFoundResponse])
                res.not_found_response = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UnprocessableResponse])
                res.unprocessable_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UnexpectedErrorResponse])
                res.unexpected_error_response = out

        return res

    