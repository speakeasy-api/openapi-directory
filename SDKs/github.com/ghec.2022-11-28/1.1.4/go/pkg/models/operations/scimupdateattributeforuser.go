// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ScimUpdateAttributeForUserRequestBodyOperationsOpEnum string

const (
	ScimUpdateAttributeForUserRequestBodyOperationsOpEnumAdd     ScimUpdateAttributeForUserRequestBodyOperationsOpEnum = "add"
	ScimUpdateAttributeForUserRequestBodyOperationsOpEnumRemove  ScimUpdateAttributeForUserRequestBodyOperationsOpEnum = "remove"
	ScimUpdateAttributeForUserRequestBodyOperationsOpEnumReplace ScimUpdateAttributeForUserRequestBodyOperationsOpEnum = "replace"
)

func (e *ScimUpdateAttributeForUserRequestBodyOperationsOpEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "add":
		fallthrough
	case "remove":
		fallthrough
	case "replace":
		*e = ScimUpdateAttributeForUserRequestBodyOperationsOpEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ScimUpdateAttributeForUserRequestBodyOperationsOpEnum: %s", s)
	}
}

type ScimUpdateAttributeForUserRequestBodyOperationsValue2 struct {
	Primary *bool   `json:"primary,omitempty"`
	Value   *string `json:"value,omitempty"`
}

type ScimUpdateAttributeForUserRequestBodyOperationsValue1 struct {
	Active     *bool   `json:"active,omitempty"`
	ExternalID *string `json:"externalId,omitempty"`
	FamilyName *string `json:"familyName,omitempty"`
	GivenName  *string `json:"givenName,omitempty"`
	UserName   *string `json:"userName,omitempty"`
}

type ScimUpdateAttributeForUserRequestBodyOperationsValueType string

const (
	ScimUpdateAttributeForUserRequestBodyOperationsValueTypeScimUpdateAttributeForUserRequestBodyOperationsValue1        ScimUpdateAttributeForUserRequestBodyOperationsValueType = "scim/update-attribute-for-user_requestBody_Operations_value_1"
	ScimUpdateAttributeForUserRequestBodyOperationsValueTypeArrayOfscimUpdateAttributeForUserRequestBodyOperationsValue2 ScimUpdateAttributeForUserRequestBodyOperationsValueType = "arrayOfscim/update-attribute-for-user_requestBody_Operations_value_2"
	ScimUpdateAttributeForUserRequestBodyOperationsValueTypeStr                                                          ScimUpdateAttributeForUserRequestBodyOperationsValueType = "str"
)

type ScimUpdateAttributeForUserRequestBodyOperationsValue struct {
	ScimUpdateAttributeForUserRequestBodyOperationsValue1        *ScimUpdateAttributeForUserRequestBodyOperationsValue1
	ArrayOfscimUpdateAttributeForUserRequestBodyOperationsValue2 []ScimUpdateAttributeForUserRequestBodyOperationsValue2
	Str                                                          *string

	Type ScimUpdateAttributeForUserRequestBodyOperationsValueType
}

func CreateScimUpdateAttributeForUserRequestBodyOperationsValueScimUpdateAttributeForUserRequestBodyOperationsValue1(scimUpdateAttributeForUserRequestBodyOperationsValue1 ScimUpdateAttributeForUserRequestBodyOperationsValue1) ScimUpdateAttributeForUserRequestBodyOperationsValue {
	typ := ScimUpdateAttributeForUserRequestBodyOperationsValueTypeScimUpdateAttributeForUserRequestBodyOperationsValue1

	return ScimUpdateAttributeForUserRequestBodyOperationsValue{
		ScimUpdateAttributeForUserRequestBodyOperationsValue1: &scimUpdateAttributeForUserRequestBodyOperationsValue1,
		Type: typ,
	}
}

func CreateScimUpdateAttributeForUserRequestBodyOperationsValueArrayOfscimUpdateAttributeForUserRequestBodyOperationsValue2(arrayOfscimUpdateAttributeForUserRequestBodyOperationsValue2 []ScimUpdateAttributeForUserRequestBodyOperationsValue2) ScimUpdateAttributeForUserRequestBodyOperationsValue {
	typ := ScimUpdateAttributeForUserRequestBodyOperationsValueTypeArrayOfscimUpdateAttributeForUserRequestBodyOperationsValue2

	return ScimUpdateAttributeForUserRequestBodyOperationsValue{
		ArrayOfscimUpdateAttributeForUserRequestBodyOperationsValue2: arrayOfscimUpdateAttributeForUserRequestBodyOperationsValue2,
		Type: typ,
	}
}

func CreateScimUpdateAttributeForUserRequestBodyOperationsValueStr(str string) ScimUpdateAttributeForUserRequestBodyOperationsValue {
	typ := ScimUpdateAttributeForUserRequestBodyOperationsValueTypeStr

	return ScimUpdateAttributeForUserRequestBodyOperationsValue{
		Str:  &str,
		Type: typ,
	}
}

func (u *ScimUpdateAttributeForUserRequestBodyOperationsValue) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	scimUpdateAttributeForUserRequestBodyOperationsValue1 := new(ScimUpdateAttributeForUserRequestBodyOperationsValue1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&scimUpdateAttributeForUserRequestBodyOperationsValue1); err == nil {
		u.ScimUpdateAttributeForUserRequestBodyOperationsValue1 = scimUpdateAttributeForUserRequestBodyOperationsValue1
		u.Type = ScimUpdateAttributeForUserRequestBodyOperationsValueTypeScimUpdateAttributeForUserRequestBodyOperationsValue1
		return nil
	}

	arrayOfscimUpdateAttributeForUserRequestBodyOperationsValue2 := []ScimUpdateAttributeForUserRequestBodyOperationsValue2{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfscimUpdateAttributeForUserRequestBodyOperationsValue2); err == nil {
		u.ArrayOfscimUpdateAttributeForUserRequestBodyOperationsValue2 = arrayOfscimUpdateAttributeForUserRequestBodyOperationsValue2
		u.Type = ScimUpdateAttributeForUserRequestBodyOperationsValueTypeArrayOfscimUpdateAttributeForUserRequestBodyOperationsValue2
		return nil
	}

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = ScimUpdateAttributeForUserRequestBodyOperationsValueTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ScimUpdateAttributeForUserRequestBodyOperationsValue) MarshalJSON() ([]byte, error) {
	if u.ScimUpdateAttributeForUserRequestBodyOperationsValue1 != nil {
		return json.Marshal(u.ScimUpdateAttributeForUserRequestBodyOperationsValue1)
	}

	if u.ArrayOfscimUpdateAttributeForUserRequestBodyOperationsValue2 != nil {
		return json.Marshal(u.ArrayOfscimUpdateAttributeForUserRequestBodyOperationsValue2)
	}

	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	return nil, nil
}

type ScimUpdateAttributeForUserRequestBodyOperations struct {
	Op    ScimUpdateAttributeForUserRequestBodyOperationsOpEnum `json:"op"`
	Path  *string                                               `json:"path,omitempty"`
	Value *ScimUpdateAttributeForUserRequestBodyOperationsValue `json:"value,omitempty"`
}

type ScimUpdateAttributeForUserRequestBody struct {
	// Set of operations to be performed
	Operations []ScimUpdateAttributeForUserRequestBodyOperations `json:"Operations"`
	Schemas    []string                                          `json:"schemas,omitempty"`
}

type ScimUpdateAttributeForUserRequest struct {
	RequestBody ScimUpdateAttributeForUserRequestBody `request:"mediaType=application/json"`
	// The organization name. The name is not case sensitive.
	Org string `pathParam:"style=simple,explode=false,name=org"`
	// The unique identifier of the SCIM user.
	ScimUserID string `pathParam:"style=simple,explode=false,name=scim_user_id"`
}

type ScimUpdateAttributeForUserResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Response
	BasicError *shared.BasicError
	// Bad request
	ScimError *shared.ScimError
	// Response
	ScimUser *shared.ScimUser
}
