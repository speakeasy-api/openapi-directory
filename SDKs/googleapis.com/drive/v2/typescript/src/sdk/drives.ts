/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Drives {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Permanently deletes a shared drive for which the user is an organizer. The shared drive cannot contain any untrashed items.
   */
  driveDrivesDelete(
    req: operations.DriveDrivesDeleteRequest,
    security: operations.DriveDrivesDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DriveDrivesDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DriveDrivesDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/drives/{driveId}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DriveDrivesDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DriveDrivesDeleteResponse =
        new operations.DriveDrivesDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Gets a shared drive's metadata by ID.
   */
  driveDrivesGet(
    req: operations.DriveDrivesGetRequest,
    security: operations.DriveDrivesGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DriveDrivesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DriveDrivesGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/drives/{driveId}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DriveDrivesGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DriveDrivesGetResponse =
        new operations.DriveDrivesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.drive = utils.objectToClass(httpRes?.data, shared.Drive);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Hides a shared drive from the default view.
   */
  driveDrivesHide(
    req: operations.DriveDrivesHideRequest,
    security: operations.DriveDrivesHideSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DriveDrivesHideResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DriveDrivesHideRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/drives/{driveId}/hide",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DriveDrivesHideSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DriveDrivesHideResponse =
        new operations.DriveDrivesHideResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.drive = utils.objectToClass(httpRes?.data, shared.Drive);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new shared drive.
   */
  driveDrivesInsert(
    req: operations.DriveDrivesInsertRequest,
    security: operations.DriveDrivesInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DriveDrivesInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DriveDrivesInsertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/drives";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "drive",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DriveDrivesInsertSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DriveDrivesInsertResponse =
        new operations.DriveDrivesInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.drive = utils.objectToClass(httpRes?.data, shared.Drive);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists the user's shared drives.
   */
  driveDrivesList(
    req: operations.DriveDrivesListRequest,
    security: operations.DriveDrivesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DriveDrivesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DriveDrivesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/drives";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DriveDrivesListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DriveDrivesListResponse =
        new operations.DriveDrivesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.driveList = utils.objectToClass(
              httpRes?.data,
              shared.DriveList
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Restores a shared drive to the default view.
   */
  driveDrivesUnhide(
    req: operations.DriveDrivesUnhideRequest,
    security: operations.DriveDrivesUnhideSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DriveDrivesUnhideResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DriveDrivesUnhideRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/drives/{driveId}/unhide",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DriveDrivesUnhideSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DriveDrivesUnhideResponse =
        new operations.DriveDrivesUnhideResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.drive = utils.objectToClass(httpRes?.data, shared.Drive);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates the metadata for a shared drive.
   */
  driveDrivesUpdate(
    req: operations.DriveDrivesUpdateRequest,
    security: operations.DriveDrivesUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DriveDrivesUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DriveDrivesUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/drives/{driveId}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "drive",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DriveDrivesUpdateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DriveDrivesUpdateResponse =
        new operations.DriveDrivesUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.drive = utils.objectToClass(httpRes?.data, shared.Drive);
          }
          break;
      }

      return res;
    });
  }
}
