// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
	"time"
)

// InboundWireTransferSimulationResultTransactionCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Transaction's currency. This will match the currency on the Transcation's Account.
type InboundWireTransferSimulationResultTransactionCurrencyEnum string

const (
	InboundWireTransferSimulationResultTransactionCurrencyEnumCad InboundWireTransferSimulationResultTransactionCurrencyEnum = "CAD"
	InboundWireTransferSimulationResultTransactionCurrencyEnumChf InboundWireTransferSimulationResultTransactionCurrencyEnum = "CHF"
	InboundWireTransferSimulationResultTransactionCurrencyEnumEur InboundWireTransferSimulationResultTransactionCurrencyEnum = "EUR"
	InboundWireTransferSimulationResultTransactionCurrencyEnumGbp InboundWireTransferSimulationResultTransactionCurrencyEnum = "GBP"
	InboundWireTransferSimulationResultTransactionCurrencyEnumJpy InboundWireTransferSimulationResultTransactionCurrencyEnum = "JPY"
	InboundWireTransferSimulationResultTransactionCurrencyEnumUsd InboundWireTransferSimulationResultTransactionCurrencyEnum = "USD"
)

func (e *InboundWireTransferSimulationResultTransactionCurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = InboundWireTransferSimulationResultTransactionCurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundWireTransferSimulationResultTransactionCurrencyEnum: %s", s)
	}
}

// InboundWireTransferSimulationResultTransactionTransactionSourceAccountTransferIntentionCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
type InboundWireTransferSimulationResultTransactionTransactionSourceAccountTransferIntentionCurrencyEnum string

const (
	InboundWireTransferSimulationResultTransactionTransactionSourceAccountTransferIntentionCurrencyEnumCad InboundWireTransferSimulationResultTransactionTransactionSourceAccountTransferIntentionCurrencyEnum = "CAD"
	InboundWireTransferSimulationResultTransactionTransactionSourceAccountTransferIntentionCurrencyEnumChf InboundWireTransferSimulationResultTransactionTransactionSourceAccountTransferIntentionCurrencyEnum = "CHF"
	InboundWireTransferSimulationResultTransactionTransactionSourceAccountTransferIntentionCurrencyEnumEur InboundWireTransferSimulationResultTransactionTransactionSourceAccountTransferIntentionCurrencyEnum = "EUR"
	InboundWireTransferSimulationResultTransactionTransactionSourceAccountTransferIntentionCurrencyEnumGbp InboundWireTransferSimulationResultTransactionTransactionSourceAccountTransferIntentionCurrencyEnum = "GBP"
	InboundWireTransferSimulationResultTransactionTransactionSourceAccountTransferIntentionCurrencyEnumJpy InboundWireTransferSimulationResultTransactionTransactionSourceAccountTransferIntentionCurrencyEnum = "JPY"
	InboundWireTransferSimulationResultTransactionTransactionSourceAccountTransferIntentionCurrencyEnumUsd InboundWireTransferSimulationResultTransactionTransactionSourceAccountTransferIntentionCurrencyEnum = "USD"
)

func (e *InboundWireTransferSimulationResultTransactionTransactionSourceAccountTransferIntentionCurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = InboundWireTransferSimulationResultTransactionTransactionSourceAccountTransferIntentionCurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundWireTransferSimulationResultTransactionTransactionSourceAccountTransferIntentionCurrencyEnum: %s", s)
	}
}

// InboundWireTransferSimulationResultTransactionTransactionSourceAccountTransferIntention - A Account Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `account_transfer_intention`.
type InboundWireTransferSimulationResultTransactionTransactionSourceAccountTransferIntention struct {
	// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
	Currency InboundWireTransferSimulationResultTransactionTransactionSourceAccountTransferIntentionCurrencyEnum `json:"currency"`
	// The description you chose to give the transfer.
	Description string `json:"description"`
	// The identifier of the Account to where the Account Transfer was sent.
	DestinationAccountID string `json:"destination_account_id"`
	// The identifier of the Account from where the Account Transfer was sent.
	SourceAccountID string `json:"source_account_id"`
	// The identifier of the Account Transfer that led to this Pending Transaction.
	TransferID string `json:"transfer_id"`
}

// InboundWireTransferSimulationResultTransactionTransactionSourceACHCheckConversion - A ACH Check Conversion object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion`.
type InboundWireTransferSimulationResultTransactionTransactionSourceACHCheckConversion struct {
	// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The identifier of the File containing an image of the returned check.
	FileID string `json:"file_id"`
}

// InboundWireTransferSimulationResultTransactionTransactionSourceACHCheckConversionReturn - A ACH Check Conversion Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion_return`.
type InboundWireTransferSimulationResultTransactionTransactionSourceACHCheckConversionReturn struct {
	// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// Why the transfer was returned.
	ReturnReasonCode string `json:"return_reason_code"`
}

// InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferIntention - A ACH Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_intention`.
type InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferIntention struct {
	AccountNumber string `json:"account_number"`
	// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount              int64  `json:"amount"`
	RoutingNumber       string `json:"routing_number"`
	StatementDescriptor string `json:"statement_descriptor"`
	// The identifier of the ACH Transfer that led to this Transaction.
	TransferID string `json:"transfer_id"`
}

// InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferRejection - A ACH Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_rejection`.
type InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferRejection struct {
	// The identifier of the ACH Transfer that led to this Transaction.
	TransferID string `json:"transfer_id"`
}

// InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum - Why the ACH Transfer was returned.
type InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum string

const (
	InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumInsufficientFund                                          InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "insufficient_fund"
	InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumNoAccount                                                 InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "no_account"
	InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumAccountClosed                                             InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "account_closed"
	InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumInvalidAccountNumberStructure                             InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "invalid_account_number_structure"
	InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumAccountFrozenEntryReturnedPerOfacInstruction              InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "account_frozen_entry_returned_per_ofac_instruction"
	InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumCreditEntryRefusedByReceiver                              InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "credit_entry_refused_by_receiver"
	InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumUnauthorizedDebitToConsumerAccountUsingCorporateSecCode   InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "unauthorized_debit_to_consumer_account_using_corporate_sec_code"
	InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumCorporateCustomerAdvisedNotAuthorized                     InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "corporate_customer_advised_not_authorized"
	InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumPaymentStopped                                            InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "payment_stopped"
	InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumNonTransactionAccount                                     InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "non_transaction_account"
	InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumUncollectedFunds                                          InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "uncollected_funds"
	InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumRoutingNumberCheckDigitError                              InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "routing_number_check_digit_error"
	InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumCustomerAdvisedUnauthorizedImproperIneligibleOrIncomplete InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "customer_advised_unauthorized_improper_ineligible_or_incomplete"
	InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumAmountFieldError                                          InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "amount_field_error"
	InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumAuthorizationRevokedByCustomer                            InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "authorization_revoked_by_customer"
	InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumInvalidAchRoutingNumber                                   InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "invalid_ach_routing_number"
	InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumFileRecordEditCriteria                                    InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "file_record_edit_criteria"
	InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumEnrInvalidIndividualName                                  InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "enr_invalid_individual_name"
	InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumReturnedPerOdfiRequest                                    InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "returned_per_odfi_request"
	InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumAddendaError                                              InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "addenda_error"
	InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumLimitedParticipationDfi                                   InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "limited_participation_dfi"
	InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumIncorrectlyCodedOutboundInternationalPayment              InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "incorrectly_coded_outbound_international_payment"
	InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumOther                                                     InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "other"
)

func (e *InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "insufficient_fund":
		fallthrough
	case "no_account":
		fallthrough
	case "account_closed":
		fallthrough
	case "invalid_account_number_structure":
		fallthrough
	case "account_frozen_entry_returned_per_ofac_instruction":
		fallthrough
	case "credit_entry_refused_by_receiver":
		fallthrough
	case "unauthorized_debit_to_consumer_account_using_corporate_sec_code":
		fallthrough
	case "corporate_customer_advised_not_authorized":
		fallthrough
	case "payment_stopped":
		fallthrough
	case "non_transaction_account":
		fallthrough
	case "uncollected_funds":
		fallthrough
	case "routing_number_check_digit_error":
		fallthrough
	case "customer_advised_unauthorized_improper_ineligible_or_incomplete":
		fallthrough
	case "amount_field_error":
		fallthrough
	case "authorization_revoked_by_customer":
		fallthrough
	case "invalid_ach_routing_number":
		fallthrough
	case "file_record_edit_criteria":
		fallthrough
	case "enr_invalid_individual_name":
		fallthrough
	case "returned_per_odfi_request":
		fallthrough
	case "addenda_error":
		fallthrough
	case "limited_participation_dfi":
		fallthrough
	case "incorrectly_coded_outbound_international_payment":
		fallthrough
	case "other":
		*e = InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum: %s", s)
	}
}

// InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturn - A ACH Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_return`.
type InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturn struct {
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
	CreatedAt time.Time `json:"created_at"`
	// Why the ACH Transfer was returned.
	ReturnReasonCode InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum `json:"return_reason_code"`
	// The identifier of the Tranasaction associated with this return.
	TransactionID string `json:"transaction_id"`
	// The identifier of the ACH Transfer associated with this return.
	TransferID string `json:"transfer_id"`
}

// InboundWireTransferSimulationResultTransactionTransactionSourceCardDisputeAcceptance - A Card Dispute Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `card_dispute_acceptance`.
type InboundWireTransferSimulationResultTransactionTransactionSourceCardDisputeAcceptance struct {
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was accepted.
	AcceptedAt time.Time `json:"accepted_at"`
	// The identifier of the Card Dispute that was accepted.
	CardDisputeID string `json:"card_dispute_id"`
	// The identifier of the Transaction that was created to return the disputed funds to your account.
	TransactionID string `json:"transaction_id"`
}

// InboundWireTransferSimulationResultTransactionTransactionSourceCardRefundCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
type InboundWireTransferSimulationResultTransactionTransactionSourceCardRefundCurrencyEnum string

const (
	InboundWireTransferSimulationResultTransactionTransactionSourceCardRefundCurrencyEnumCad InboundWireTransferSimulationResultTransactionTransactionSourceCardRefundCurrencyEnum = "CAD"
	InboundWireTransferSimulationResultTransactionTransactionSourceCardRefundCurrencyEnumChf InboundWireTransferSimulationResultTransactionTransactionSourceCardRefundCurrencyEnum = "CHF"
	InboundWireTransferSimulationResultTransactionTransactionSourceCardRefundCurrencyEnumEur InboundWireTransferSimulationResultTransactionTransactionSourceCardRefundCurrencyEnum = "EUR"
	InboundWireTransferSimulationResultTransactionTransactionSourceCardRefundCurrencyEnumGbp InboundWireTransferSimulationResultTransactionTransactionSourceCardRefundCurrencyEnum = "GBP"
	InboundWireTransferSimulationResultTransactionTransactionSourceCardRefundCurrencyEnumJpy InboundWireTransferSimulationResultTransactionTransactionSourceCardRefundCurrencyEnum = "JPY"
	InboundWireTransferSimulationResultTransactionTransactionSourceCardRefundCurrencyEnumUsd InboundWireTransferSimulationResultTransactionTransactionSourceCardRefundCurrencyEnum = "USD"
)

func (e *InboundWireTransferSimulationResultTransactionTransactionSourceCardRefundCurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = InboundWireTransferSimulationResultTransactionTransactionSourceCardRefundCurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundWireTransferSimulationResultTransactionTransactionSourceCardRefundCurrencyEnum: %s", s)
	}
}

// InboundWireTransferSimulationResultTransactionTransactionSourceCardRefundTypeEnum - A constant representing the object's type. For this resource it will always be `card_refund`.
type InboundWireTransferSimulationResultTransactionTransactionSourceCardRefundTypeEnum string

const (
	InboundWireTransferSimulationResultTransactionTransactionSourceCardRefundTypeEnumCardRefund InboundWireTransferSimulationResultTransactionTransactionSourceCardRefundTypeEnum = "card_refund"
)

func (e *InboundWireTransferSimulationResultTransactionTransactionSourceCardRefundTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "card_refund":
		*e = InboundWireTransferSimulationResultTransactionTransactionSourceCardRefundTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundWireTransferSimulationResultTransactionTransactionSourceCardRefundTypeEnum: %s", s)
	}
}

// InboundWireTransferSimulationResultTransactionTransactionSourceCardRefund - A Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_refund`.
type InboundWireTransferSimulationResultTransactionTransactionSourceCardRefund struct {
	// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The identifier for the Transaction this refunds, if any.
	CardSettlementTransactionID string `json:"card_settlement_transaction_id"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
	Currency InboundWireTransferSimulationResultTransactionTransactionSourceCardRefundCurrencyEnum `json:"currency"`
	// A constant representing the object's type. For this resource it will always be `card_refund`.
	Type InboundWireTransferSimulationResultTransactionTransactionSourceCardRefundTypeEnum `json:"type"`
}

// InboundWireTransferSimulationResultTransactionTransactionSourceDeprecatedCardRefundCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the refund currency.
type InboundWireTransferSimulationResultTransactionTransactionSourceDeprecatedCardRefundCurrencyEnum string

const (
	InboundWireTransferSimulationResultTransactionTransactionSourceDeprecatedCardRefundCurrencyEnumCad InboundWireTransferSimulationResultTransactionTransactionSourceDeprecatedCardRefundCurrencyEnum = "CAD"
	InboundWireTransferSimulationResultTransactionTransactionSourceDeprecatedCardRefundCurrencyEnumChf InboundWireTransferSimulationResultTransactionTransactionSourceDeprecatedCardRefundCurrencyEnum = "CHF"
	InboundWireTransferSimulationResultTransactionTransactionSourceDeprecatedCardRefundCurrencyEnumEur InboundWireTransferSimulationResultTransactionTransactionSourceDeprecatedCardRefundCurrencyEnum = "EUR"
	InboundWireTransferSimulationResultTransactionTransactionSourceDeprecatedCardRefundCurrencyEnumGbp InboundWireTransferSimulationResultTransactionTransactionSourceDeprecatedCardRefundCurrencyEnum = "GBP"
	InboundWireTransferSimulationResultTransactionTransactionSourceDeprecatedCardRefundCurrencyEnumJpy InboundWireTransferSimulationResultTransactionTransactionSourceDeprecatedCardRefundCurrencyEnum = "JPY"
	InboundWireTransferSimulationResultTransactionTransactionSourceDeprecatedCardRefundCurrencyEnumUsd InboundWireTransferSimulationResultTransactionTransactionSourceDeprecatedCardRefundCurrencyEnum = "USD"
)

func (e *InboundWireTransferSimulationResultTransactionTransactionSourceDeprecatedCardRefundCurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = InboundWireTransferSimulationResultTransactionTransactionSourceDeprecatedCardRefundCurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundWireTransferSimulationResultTransactionTransactionSourceDeprecatedCardRefundCurrencyEnum: %s", s)
	}
}

// InboundWireTransferSimulationResultTransactionTransactionSourceDeprecatedCardRefund - A Deprecated Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_route_refund`.
type InboundWireTransferSimulationResultTransactionTransactionSourceDeprecatedCardRefund struct {
	// The refunded amount in the minor unit of the refunded currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the refund currency.
	Currency             InboundWireTransferSimulationResultTransactionTransactionSourceDeprecatedCardRefundCurrencyEnum `json:"currency"`
	MerchantAcceptorID   string                                                                                          `json:"merchant_acceptor_id"`
	MerchantCategoryCode string                                                                                          `json:"merchant_category_code"`
	MerchantCity         string                                                                                          `json:"merchant_city"`
	MerchantCountry      string                                                                                          `json:"merchant_country"`
	MerchantDescriptor   string                                                                                          `json:"merchant_descriptor"`
	MerchantState        string                                                                                          `json:"merchant_state"`
}

// InboundWireTransferSimulationResultTransactionTransactionSourceDeprecatedCardSettlementCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the settlement currency.
type InboundWireTransferSimulationResultTransactionTransactionSourceDeprecatedCardSettlementCurrencyEnum string

const (
	InboundWireTransferSimulationResultTransactionTransactionSourceDeprecatedCardSettlementCurrencyEnumCad InboundWireTransferSimulationResultTransactionTransactionSourceDeprecatedCardSettlementCurrencyEnum = "CAD"
	InboundWireTransferSimulationResultTransactionTransactionSourceDeprecatedCardSettlementCurrencyEnumChf InboundWireTransferSimulationResultTransactionTransactionSourceDeprecatedCardSettlementCurrencyEnum = "CHF"
	InboundWireTransferSimulationResultTransactionTransactionSourceDeprecatedCardSettlementCurrencyEnumEur InboundWireTransferSimulationResultTransactionTransactionSourceDeprecatedCardSettlementCurrencyEnum = "EUR"
	InboundWireTransferSimulationResultTransactionTransactionSourceDeprecatedCardSettlementCurrencyEnumGbp InboundWireTransferSimulationResultTransactionTransactionSourceDeprecatedCardSettlementCurrencyEnum = "GBP"
	InboundWireTransferSimulationResultTransactionTransactionSourceDeprecatedCardSettlementCurrencyEnumJpy InboundWireTransferSimulationResultTransactionTransactionSourceDeprecatedCardSettlementCurrencyEnum = "JPY"
	InboundWireTransferSimulationResultTransactionTransactionSourceDeprecatedCardSettlementCurrencyEnumUsd InboundWireTransferSimulationResultTransactionTransactionSourceDeprecatedCardSettlementCurrencyEnum = "USD"
)

func (e *InboundWireTransferSimulationResultTransactionTransactionSourceDeprecatedCardSettlementCurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = InboundWireTransferSimulationResultTransactionTransactionSourceDeprecatedCardSettlementCurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundWireTransferSimulationResultTransactionTransactionSourceDeprecatedCardSettlementCurrencyEnum: %s", s)
	}
}

// InboundWireTransferSimulationResultTransactionTransactionSourceDeprecatedCardSettlement - A Deprecated Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_route_settlement`.
type InboundWireTransferSimulationResultTransactionTransactionSourceDeprecatedCardSettlement struct {
	// The settled amount in the minor unit of the settlement currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the settlement currency.
	Currency             InboundWireTransferSimulationResultTransactionTransactionSourceDeprecatedCardSettlementCurrencyEnum `json:"currency"`
	MerchantAcceptorID   string                                                                                              `json:"merchant_acceptor_id"`
	MerchantCategoryCode string                                                                                              `json:"merchant_category_code"`
	MerchantCity         string                                                                                              `json:"merchant_city"`
	MerchantCountry      string                                                                                              `json:"merchant_country"`
	MerchantDescriptor   string                                                                                              `json:"merchant_descriptor"`
	MerchantState        string                                                                                              `json:"merchant_state"`
}

// InboundWireTransferSimulationResultTransactionTransactionSourceCardSettlementCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's settlement currency.
type InboundWireTransferSimulationResultTransactionTransactionSourceCardSettlementCurrencyEnum string

const (
	InboundWireTransferSimulationResultTransactionTransactionSourceCardSettlementCurrencyEnumCad InboundWireTransferSimulationResultTransactionTransactionSourceCardSettlementCurrencyEnum = "CAD"
	InboundWireTransferSimulationResultTransactionTransactionSourceCardSettlementCurrencyEnumChf InboundWireTransferSimulationResultTransactionTransactionSourceCardSettlementCurrencyEnum = "CHF"
	InboundWireTransferSimulationResultTransactionTransactionSourceCardSettlementCurrencyEnumEur InboundWireTransferSimulationResultTransactionTransactionSourceCardSettlementCurrencyEnum = "EUR"
	InboundWireTransferSimulationResultTransactionTransactionSourceCardSettlementCurrencyEnumGbp InboundWireTransferSimulationResultTransactionTransactionSourceCardSettlementCurrencyEnum = "GBP"
	InboundWireTransferSimulationResultTransactionTransactionSourceCardSettlementCurrencyEnumJpy InboundWireTransferSimulationResultTransactionTransactionSourceCardSettlementCurrencyEnum = "JPY"
	InboundWireTransferSimulationResultTransactionTransactionSourceCardSettlementCurrencyEnumUsd InboundWireTransferSimulationResultTransactionTransactionSourceCardSettlementCurrencyEnum = "USD"
)

func (e *InboundWireTransferSimulationResultTransactionTransactionSourceCardSettlementCurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = InboundWireTransferSimulationResultTransactionTransactionSourceCardSettlementCurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundWireTransferSimulationResultTransactionTransactionSourceCardSettlementCurrencyEnum: %s", s)
	}
}

// InboundWireTransferSimulationResultTransactionTransactionSourceCardSettlementTypeEnum - A constant representing the object's type. For this resource it will always be `card_settlement`.
type InboundWireTransferSimulationResultTransactionTransactionSourceCardSettlementTypeEnum string

const (
	InboundWireTransferSimulationResultTransactionTransactionSourceCardSettlementTypeEnumCardSettlement InboundWireTransferSimulationResultTransactionTransactionSourceCardSettlementTypeEnum = "card_settlement"
)

func (e *InboundWireTransferSimulationResultTransactionTransactionSourceCardSettlementTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "card_settlement":
		*e = InboundWireTransferSimulationResultTransactionTransactionSourceCardSettlementTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundWireTransferSimulationResultTransactionTransactionSourceCardSettlementTypeEnum: %s", s)
	}
}

// InboundWireTransferSimulationResultTransactionTransactionSourceCardSettlement - A Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_settlement`.
type InboundWireTransferSimulationResultTransactionTransactionSourceCardSettlement struct {
	// The amount in the minor unit of the transaction's settlement currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's settlement currency.
	Currency             InboundWireTransferSimulationResultTransactionTransactionSourceCardSettlementCurrencyEnum `json:"currency"`
	MerchantCategoryCode string                                                                                    `json:"merchant_category_code"`
	MerchantCity         string                                                                                    `json:"merchant_city"`
	MerchantCountry      string                                                                                    `json:"merchant_country"`
	MerchantName         string                                                                                    `json:"merchant_name"`
	MerchantState        string                                                                                    `json:"merchant_state"`
	// The identifier of the Pending Transaction associated with this Transaction.
	PendingTransactionID string `json:"pending_transaction_id"`
	// The amount in the minor unit of the transaction's presentment currency.
	PresentmentAmount int64 `json:"presentment_amount"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's presentment currency.
	PresentmentCurrency string `json:"presentment_currency"`
	// A constant representing the object's type. For this resource it will always be `card_settlement`.
	Type InboundWireTransferSimulationResultTransactionTransactionSourceCardSettlementTypeEnum `json:"type"`
}

// InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum - The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
type InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum string

const (
	InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnumAccountTransferIntention                    InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum = "account_transfer_intention"
	InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnumAchCheckConversionReturn                    InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum = "ach_check_conversion_return"
	InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnumAchCheckConversion                          InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum = "ach_check_conversion"
	InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnumAchTransferIntention                        InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum = "ach_transfer_intention"
	InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnumAchTransferRejection                        InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum = "ach_transfer_rejection"
	InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnumAchTransferReturn                           InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum = "ach_transfer_return"
	InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnumCardDisputeAcceptance                       InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum = "card_dispute_acceptance"
	InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnumCardRefund                                  InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum = "card_refund"
	InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnumCardSettlement                              InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum = "card_settlement"
	InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnumCheckDepositAcceptance                      InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum = "check_deposit_acceptance"
	InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnumCheckDepositReturn                          InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum = "check_deposit_return"
	InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnumCheckTransferIntention                      InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum = "check_transfer_intention"
	InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnumCheckTransferReturn                         InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum = "check_transfer_return"
	InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnumCheckTransferRejection                      InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum = "check_transfer_rejection"
	InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnumCheckTransferStopPaymentRequest             InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum = "check_transfer_stop_payment_request"
	InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnumDisputeResolution                           InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum = "dispute_resolution"
	InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnumEmpyrealCashDeposit                         InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum = "empyreal_cash_deposit"
	InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnumInboundAchTransfer                          InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum = "inbound_ach_transfer"
	InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnumInboundAchTransferReturnIntention           InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum = "inbound_ach_transfer_return_intention"
	InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnumInboundCheck                                InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum = "inbound_check"
	InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnumInboundInternationalAchTransfer             InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum = "inbound_international_ach_transfer"
	InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnumInboundRealTimePaymentsTransferConfirmation InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum = "inbound_real_time_payments_transfer_confirmation"
	InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnumInboundWireDrawdownPaymentReversal          InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum = "inbound_wire_drawdown_payment_reversal"
	InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnumInboundWireDrawdownPayment                  InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum = "inbound_wire_drawdown_payment"
	InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnumInboundWireReversal                         InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum = "inbound_wire_reversal"
	InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnumInboundWireTransfer                         InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum = "inbound_wire_transfer"
	InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnumInterestPayment                             InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum = "interest_payment"
	InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnumInternalGeneralLedgerTransaction            InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum = "internal_general_ledger_transaction"
	InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnumInternalSource                              InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum = "internal_source"
	InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnumCardRouteRefund                             InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum = "card_route_refund"
	InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnumCardRouteSettlement                         InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum = "card_route_settlement"
	InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnumRealTimePaymentsTransferAcknowledgement     InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum = "real_time_payments_transfer_acknowledgement"
	InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnumSampleFunds                                 InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum = "sample_funds"
	InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnumWireDrawdownPaymentIntention                InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum = "wire_drawdown_payment_intention"
	InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnumWireDrawdownPaymentRejection                InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum = "wire_drawdown_payment_rejection"
	InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnumWireTransferIntention                       InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum = "wire_transfer_intention"
	InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnumWireTransferRejection                       InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum = "wire_transfer_rejection"
	InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnumOther                                       InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum = "other"
)

func (e *InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "account_transfer_intention":
		fallthrough
	case "ach_check_conversion_return":
		fallthrough
	case "ach_check_conversion":
		fallthrough
	case "ach_transfer_intention":
		fallthrough
	case "ach_transfer_rejection":
		fallthrough
	case "ach_transfer_return":
		fallthrough
	case "card_dispute_acceptance":
		fallthrough
	case "card_refund":
		fallthrough
	case "card_settlement":
		fallthrough
	case "check_deposit_acceptance":
		fallthrough
	case "check_deposit_return":
		fallthrough
	case "check_transfer_intention":
		fallthrough
	case "check_transfer_return":
		fallthrough
	case "check_transfer_rejection":
		fallthrough
	case "check_transfer_stop_payment_request":
		fallthrough
	case "dispute_resolution":
		fallthrough
	case "empyreal_cash_deposit":
		fallthrough
	case "inbound_ach_transfer":
		fallthrough
	case "inbound_ach_transfer_return_intention":
		fallthrough
	case "inbound_check":
		fallthrough
	case "inbound_international_ach_transfer":
		fallthrough
	case "inbound_real_time_payments_transfer_confirmation":
		fallthrough
	case "inbound_wire_drawdown_payment_reversal":
		fallthrough
	case "inbound_wire_drawdown_payment":
		fallthrough
	case "inbound_wire_reversal":
		fallthrough
	case "inbound_wire_transfer":
		fallthrough
	case "interest_payment":
		fallthrough
	case "internal_general_ledger_transaction":
		fallthrough
	case "internal_source":
		fallthrough
	case "card_route_refund":
		fallthrough
	case "card_route_settlement":
		fallthrough
	case "real_time_payments_transfer_acknowledgement":
		fallthrough
	case "sample_funds":
		fallthrough
	case "wire_drawdown_payment_intention":
		fallthrough
	case "wire_drawdown_payment_rejection":
		fallthrough
	case "wire_transfer_intention":
		fallthrough
	case "wire_transfer_rejection":
		fallthrough
	case "other":
		*e = InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum: %s", s)
	}
}

// InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositAcceptanceCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
type InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositAcceptanceCurrencyEnum string

const (
	InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositAcceptanceCurrencyEnumCad InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositAcceptanceCurrencyEnum = "CAD"
	InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositAcceptanceCurrencyEnumChf InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositAcceptanceCurrencyEnum = "CHF"
	InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositAcceptanceCurrencyEnumEur InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositAcceptanceCurrencyEnum = "EUR"
	InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositAcceptanceCurrencyEnumGbp InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositAcceptanceCurrencyEnum = "GBP"
	InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositAcceptanceCurrencyEnumJpy InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositAcceptanceCurrencyEnum = "JPY"
	InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositAcceptanceCurrencyEnumUsd InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositAcceptanceCurrencyEnum = "USD"
)

func (e *InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositAcceptanceCurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositAcceptanceCurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositAcceptanceCurrencyEnum: %s", s)
	}
}

// InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositAcceptance - A Check Deposit Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_acceptance`.
type InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositAcceptance struct {
	// The account number printed on the check.
	AccountNumber string `json:"account_number"`
	// The amount to be deposited in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// An additional line of metadata printed on the check. This typically includes the check number for business checks.
	AuxiliaryOnUs string `json:"auxiliary_on_us"`
	// The ID of the Check Deposit that was accepted.
	CheckDepositID string `json:"check_deposit_id"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
	Currency InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositAcceptanceCurrencyEnum `json:"currency"`
	// The routing number printed on the check.
	RoutingNumber string `json:"routing_number"`
	// The check serial number, if present, for consumer checks. For business checks, the serial number is usually in the `auxiliary_on_us` field.
	SerialNumber string `json:"serial_number"`
}

// InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
type InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnCurrencyEnum string

const (
	InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnCurrencyEnumCad InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnCurrencyEnum = "CAD"
	InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnCurrencyEnumChf InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnCurrencyEnum = "CHF"
	InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnCurrencyEnumEur InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnCurrencyEnum = "EUR"
	InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnCurrencyEnumGbp InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnCurrencyEnum = "GBP"
	InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnCurrencyEnumJpy InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnCurrencyEnum = "JPY"
	InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnCurrencyEnumUsd InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnCurrencyEnum = "USD"
)

func (e *InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnCurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnCurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnCurrencyEnum: %s", s)
	}
}

type InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnum string

const (
	InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnumAchConversionNotSupported InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnum = "ach_conversion_not_supported"
	InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnumClosedAccount             InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnum = "closed_account"
	InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnumDuplicateSubmission       InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnum = "duplicate_submission"
	InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnumInsufficientFunds         InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnum = "insufficient_funds"
	InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnumNoAccount                 InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnum = "no_account"
	InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnumNotAuthorized             InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnum = "not_authorized"
	InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnumStaleDated                InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnum = "stale_dated"
	InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnumStopPayment               InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnum = "stop_payment"
	InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnumUnknownReason             InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnum = "unknown_reason"
	InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnumUnmatchedDetails          InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnum = "unmatched_details"
	InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnumUnreadableImage           InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnum = "unreadable_image"
)

func (e *InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ach_conversion_not_supported":
		fallthrough
	case "closed_account":
		fallthrough
	case "duplicate_submission":
		fallthrough
	case "insufficient_funds":
		fallthrough
	case "no_account":
		fallthrough
	case "not_authorized":
		fallthrough
	case "stale_dated":
		fallthrough
	case "stop_payment":
		fallthrough
	case "unknown_reason":
		fallthrough
	case "unmatched_details":
		fallthrough
	case "unreadable_image":
		*e = InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnum: %s", s)
	}
}

// InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturn - A Check Deposit Return object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_return`.
type InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturn struct {
	// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The identifier of the Check Deposit that was returned.
	CheckDepositID string `json:"check_deposit_id"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
	Currency     InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnCurrencyEnum     `json:"currency"`
	ReturnReason InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnum `json:"return_reason"`
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check deposit was returned.
	ReturnedAt time.Time `json:"returned_at"`
	// The identifier of the transaction that reversed the original check deposit transaction.
	TransactionID string `json:"transaction_id"`
}

// InboundWireTransferSimulationResultTransactionTransactionSourceCheckTransferIntentionCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
type InboundWireTransferSimulationResultTransactionTransactionSourceCheckTransferIntentionCurrencyEnum string

const (
	InboundWireTransferSimulationResultTransactionTransactionSourceCheckTransferIntentionCurrencyEnumCad InboundWireTransferSimulationResultTransactionTransactionSourceCheckTransferIntentionCurrencyEnum = "CAD"
	InboundWireTransferSimulationResultTransactionTransactionSourceCheckTransferIntentionCurrencyEnumChf InboundWireTransferSimulationResultTransactionTransactionSourceCheckTransferIntentionCurrencyEnum = "CHF"
	InboundWireTransferSimulationResultTransactionTransactionSourceCheckTransferIntentionCurrencyEnumEur InboundWireTransferSimulationResultTransactionTransactionSourceCheckTransferIntentionCurrencyEnum = "EUR"
	InboundWireTransferSimulationResultTransactionTransactionSourceCheckTransferIntentionCurrencyEnumGbp InboundWireTransferSimulationResultTransactionTransactionSourceCheckTransferIntentionCurrencyEnum = "GBP"
	InboundWireTransferSimulationResultTransactionTransactionSourceCheckTransferIntentionCurrencyEnumJpy InboundWireTransferSimulationResultTransactionTransactionSourceCheckTransferIntentionCurrencyEnum = "JPY"
	InboundWireTransferSimulationResultTransactionTransactionSourceCheckTransferIntentionCurrencyEnumUsd InboundWireTransferSimulationResultTransactionTransactionSourceCheckTransferIntentionCurrencyEnum = "USD"
)

func (e *InboundWireTransferSimulationResultTransactionTransactionSourceCheckTransferIntentionCurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = InboundWireTransferSimulationResultTransactionTransactionSourceCheckTransferIntentionCurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundWireTransferSimulationResultTransactionTransactionSourceCheckTransferIntentionCurrencyEnum: %s", s)
	}
}

// InboundWireTransferSimulationResultTransactionTransactionSourceCheckTransferIntention - A Check Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_intention`.
type InboundWireTransferSimulationResultTransactionTransactionSourceCheckTransferIntention struct {
	// The city of the check's destination.
	AddressCity string `json:"address_city"`
	// The street address of the check's destination.
	AddressLine1 string `json:"address_line1"`
	// The second line of the address of the check's destination.
	AddressLine2 string `json:"address_line2"`
	// The state of the check's destination.
	AddressState string `json:"address_state"`
	// The postal code of the check's destination.
	AddressZip string `json:"address_zip"`
	// The transfer amount in USD cents.
	Amount int64 `json:"amount"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
	Currency InboundWireTransferSimulationResultTransactionTransactionSourceCheckTransferIntentionCurrencyEnum `json:"currency"`
	// The name that will be printed on the check.
	RecipientName string `json:"recipient_name"`
	// The identifier of the Check Transfer with which this is associated.
	TransferID string `json:"transfer_id"`
}

// InboundWireTransferSimulationResultTransactionTransactionSourceCheckTransferRejection - A Check Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_rejection`.
type InboundWireTransferSimulationResultTransactionTransactionSourceCheckTransferRejection struct {
	// The identifier of the Check Transfer that led to this Transaction.
	TransferID string `json:"transfer_id"`
}

// InboundWireTransferSimulationResultTransactionTransactionSourceCheckTransferReturn - A Check Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_return`.
type InboundWireTransferSimulationResultTransactionTransactionSourceCheckTransferReturn struct {
	// If available, a document with additional information about the return.
	FileID string `json:"file_id"`
	// The identifier of the returned Check Transfer.
	TransferID string `json:"transfer_id"`
}

// InboundWireTransferSimulationResultTransactionTransactionSourceCheckTransferStopPaymentRequestTypeEnum - A constant representing the object's type. For this resource it will always be `check_transfer_stop_payment_request`.
type InboundWireTransferSimulationResultTransactionTransactionSourceCheckTransferStopPaymentRequestTypeEnum string

const (
	InboundWireTransferSimulationResultTransactionTransactionSourceCheckTransferStopPaymentRequestTypeEnumCheckTransferStopPaymentRequest InboundWireTransferSimulationResultTransactionTransactionSourceCheckTransferStopPaymentRequestTypeEnum = "check_transfer_stop_payment_request"
)

func (e *InboundWireTransferSimulationResultTransactionTransactionSourceCheckTransferStopPaymentRequestTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "check_transfer_stop_payment_request":
		*e = InboundWireTransferSimulationResultTransactionTransactionSourceCheckTransferStopPaymentRequestTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundWireTransferSimulationResultTransactionTransactionSourceCheckTransferStopPaymentRequestTypeEnum: %s", s)
	}
}

// InboundWireTransferSimulationResultTransactionTransactionSourceCheckTransferStopPaymentRequest - A Check Transfer Stop Payment Request object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_stop_payment_request`.
type InboundWireTransferSimulationResultTransactionTransactionSourceCheckTransferStopPaymentRequest struct {
	// The time the stop-payment was requested.
	RequestedAt time.Time `json:"requested_at"`
	// The transaction ID of the corresponding credit transaction.
	TransactionID string `json:"transaction_id"`
	// The ID of the check transfer that was stopped.
	TransferID string `json:"transfer_id"`
	// A constant representing the object's type. For this resource it will always be `check_transfer_stop_payment_request`.
	Type InboundWireTransferSimulationResultTransactionTransactionSourceCheckTransferStopPaymentRequestTypeEnum `json:"type"`
}

// InboundWireTransferSimulationResultTransactionTransactionSourceDisputeResolutionCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
type InboundWireTransferSimulationResultTransactionTransactionSourceDisputeResolutionCurrencyEnum string

const (
	InboundWireTransferSimulationResultTransactionTransactionSourceDisputeResolutionCurrencyEnumCad InboundWireTransferSimulationResultTransactionTransactionSourceDisputeResolutionCurrencyEnum = "CAD"
	InboundWireTransferSimulationResultTransactionTransactionSourceDisputeResolutionCurrencyEnumChf InboundWireTransferSimulationResultTransactionTransactionSourceDisputeResolutionCurrencyEnum = "CHF"
	InboundWireTransferSimulationResultTransactionTransactionSourceDisputeResolutionCurrencyEnumEur InboundWireTransferSimulationResultTransactionTransactionSourceDisputeResolutionCurrencyEnum = "EUR"
	InboundWireTransferSimulationResultTransactionTransactionSourceDisputeResolutionCurrencyEnumGbp InboundWireTransferSimulationResultTransactionTransactionSourceDisputeResolutionCurrencyEnum = "GBP"
	InboundWireTransferSimulationResultTransactionTransactionSourceDisputeResolutionCurrencyEnumJpy InboundWireTransferSimulationResultTransactionTransactionSourceDisputeResolutionCurrencyEnum = "JPY"
	InboundWireTransferSimulationResultTransactionTransactionSourceDisputeResolutionCurrencyEnumUsd InboundWireTransferSimulationResultTransactionTransactionSourceDisputeResolutionCurrencyEnum = "USD"
)

func (e *InboundWireTransferSimulationResultTransactionTransactionSourceDisputeResolutionCurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = InboundWireTransferSimulationResultTransactionTransactionSourceDisputeResolutionCurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundWireTransferSimulationResultTransactionTransactionSourceDisputeResolutionCurrencyEnum: %s", s)
	}
}

// InboundWireTransferSimulationResultTransactionTransactionSourceDisputeResolution - A Dispute Resolution object. This field will be present in the JSON response if and only if `category` is equal to `dispute_resolution`.
type InboundWireTransferSimulationResultTransactionTransactionSourceDisputeResolution struct {
	// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
	Currency InboundWireTransferSimulationResultTransactionTransactionSourceDisputeResolutionCurrencyEnum `json:"currency"`
	// The identifier of the Transaction that was disputed.
	DisputedTransactionID string `json:"disputed_transaction_id"`
}

// InboundWireTransferSimulationResultTransactionTransactionSourceEmpyrealCashDeposit - A Empyreal Cash Deposit object. This field will be present in the JSON response if and only if `category` is equal to `empyreal_cash_deposit`.
type InboundWireTransferSimulationResultTransactionTransactionSourceEmpyrealCashDeposit struct {
	// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount      int64     `json:"amount"`
	BagID       string    `json:"bag_id"`
	DepositDate time.Time `json:"deposit_date"`
}

// InboundWireTransferSimulationResultTransactionTransactionSourceInboundACHTransfer - A Inbound ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_ach_transfer`.
type InboundWireTransferSimulationResultTransactionTransactionSourceInboundACHTransfer struct {
	// The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
	Amount                             int64  `json:"amount"`
	OriginatorCompanyDescriptiveDate   string `json:"originator_company_descriptive_date"`
	OriginatorCompanyDiscretionaryData string `json:"originator_company_discretionary_data"`
	OriginatorCompanyEntryDescription  string `json:"originator_company_entry_description"`
	OriginatorCompanyID                string `json:"originator_company_id"`
	OriginatorCompanyName              string `json:"originator_company_name"`
	ReceiverIDNumber                   string `json:"receiver_id_number"`
	ReceiverName                       string `json:"receiver_name"`
	TraceNumber                        string `json:"trace_number"`
}

// InboundWireTransferSimulationResultTransactionTransactionSourceInboundCheckCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
type InboundWireTransferSimulationResultTransactionTransactionSourceInboundCheckCurrencyEnum string

const (
	InboundWireTransferSimulationResultTransactionTransactionSourceInboundCheckCurrencyEnumCad InboundWireTransferSimulationResultTransactionTransactionSourceInboundCheckCurrencyEnum = "CAD"
	InboundWireTransferSimulationResultTransactionTransactionSourceInboundCheckCurrencyEnumChf InboundWireTransferSimulationResultTransactionTransactionSourceInboundCheckCurrencyEnum = "CHF"
	InboundWireTransferSimulationResultTransactionTransactionSourceInboundCheckCurrencyEnumEur InboundWireTransferSimulationResultTransactionTransactionSourceInboundCheckCurrencyEnum = "EUR"
	InboundWireTransferSimulationResultTransactionTransactionSourceInboundCheckCurrencyEnumGbp InboundWireTransferSimulationResultTransactionTransactionSourceInboundCheckCurrencyEnum = "GBP"
	InboundWireTransferSimulationResultTransactionTransactionSourceInboundCheckCurrencyEnumJpy InboundWireTransferSimulationResultTransactionTransactionSourceInboundCheckCurrencyEnum = "JPY"
	InboundWireTransferSimulationResultTransactionTransactionSourceInboundCheckCurrencyEnumUsd InboundWireTransferSimulationResultTransactionTransactionSourceInboundCheckCurrencyEnum = "USD"
)

func (e *InboundWireTransferSimulationResultTransactionTransactionSourceInboundCheckCurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = InboundWireTransferSimulationResultTransactionTransactionSourceInboundCheckCurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundWireTransferSimulationResultTransactionTransactionSourceInboundCheckCurrencyEnum: %s", s)
	}
}

// InboundWireTransferSimulationResultTransactionTransactionSourceInboundCheck - A Inbound Check object. This field will be present in the JSON response if and only if `category` is equal to `inbound_check`.
type InboundWireTransferSimulationResultTransactionTransactionSourceInboundCheck struct {
	// The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
	Amount                int64  `json:"amount"`
	CheckFrontImageFileID string `json:"check_front_image_file_id"`
	CheckNumber           string `json:"check_number"`
	CheckRearImageFileID  string `json:"check_rear_image_file_id"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
	Currency InboundWireTransferSimulationResultTransactionTransactionSourceInboundCheckCurrencyEnum `json:"currency"`
}

// InboundWireTransferSimulationResultTransactionTransactionSourceInboundInternationalACHTransfer - A Inbound International ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_international_ach_transfer`.
type InboundWireTransferSimulationResultTransactionTransactionSourceInboundInternationalACHTransfer struct {
	// The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
	Amount                                                 int64  `json:"amount"`
	DestinationCountryCode                                 string `json:"destination_country_code"`
	DestinationCurrencyCode                                string `json:"destination_currency_code"`
	ForeignExchangeIndicator                               string `json:"foreign_exchange_indicator"`
	ForeignExchangeReference                               string `json:"foreign_exchange_reference"`
	ForeignExchangeReferenceIndicator                      string `json:"foreign_exchange_reference_indicator"`
	ForeignPaymentAmount                                   int64  `json:"foreign_payment_amount"`
	ForeignTraceNumber                                     string `json:"foreign_trace_number"`
	InternationalTransactionTypeCode                       string `json:"international_transaction_type_code"`
	OriginatingCurrencyCode                                string `json:"originating_currency_code"`
	OriginatingDepositoryFinancialInstitutionBranchCountry string `json:"originating_depository_financial_institution_branch_country"`
	OriginatingDepositoryFinancialInstitutionID            string `json:"originating_depository_financial_institution_id"`
	OriginatingDepositoryFinancialInstitutionIDQualifier   string `json:"originating_depository_financial_institution_id_qualifier"`
	OriginatingDepositoryFinancialInstitutionName          string `json:"originating_depository_financial_institution_name"`
	OriginatorCity                                         string `json:"originator_city"`
	OriginatorCompanyEntryDescription                      string `json:"originator_company_entry_description"`
	OriginatorCountry                                      string `json:"originator_country"`
	OriginatorIdentification                               string `json:"originator_identification"`
	OriginatorName                                         string `json:"originator_name"`
	OriginatorPostalCode                                   string `json:"originator_postal_code"`
	OriginatorStateOrProvince                              string `json:"originator_state_or_province"`
	OriginatorStreetAddress                                string `json:"originator_street_address"`
	PaymentRelatedInformation                              string `json:"payment_related_information"`
	PaymentRelatedInformation2                             string `json:"payment_related_information2"`
	ReceiverCity                                           string `json:"receiver_city"`
	ReceiverCountry                                        string `json:"receiver_country"`
	ReceiverIdentificationNumber                           string `json:"receiver_identification_number"`
	ReceiverPostalCode                                     string `json:"receiver_postal_code"`
	ReceiverStateOrProvince                                string `json:"receiver_state_or_province"`
	ReceiverStreetAddress                                  string `json:"receiver_street_address"`
	ReceivingCompanyOrIndividualName                       string `json:"receiving_company_or_individual_name"`
	ReceivingDepositoryFinancialInstitutionCountry         string `json:"receiving_depository_financial_institution_country"`
	ReceivingDepositoryFinancialInstitutionID              string `json:"receiving_depository_financial_institution_id"`
	ReceivingDepositoryFinancialInstitutionIDQualifier     string `json:"receiving_depository_financial_institution_id_qualifier"`
	ReceivingDepositoryFinancialInstitutionName            string `json:"receiving_depository_financial_institution_name"`
	TraceNumber                                            string `json:"trace_number"`
}

// InboundWireTransferSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the transfer's currency. This will always be "USD" for a Real Time Payments transfer.
type InboundWireTransferSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnum string

const (
	InboundWireTransferSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnumCad InboundWireTransferSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnum = "CAD"
	InboundWireTransferSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnumChf InboundWireTransferSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnum = "CHF"
	InboundWireTransferSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnumEur InboundWireTransferSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnum = "EUR"
	InboundWireTransferSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnumGbp InboundWireTransferSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnum = "GBP"
	InboundWireTransferSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnumJpy InboundWireTransferSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnum = "JPY"
	InboundWireTransferSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnumUsd InboundWireTransferSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnum = "USD"
)

func (e *InboundWireTransferSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = InboundWireTransferSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundWireTransferSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnum: %s", s)
	}
}

// InboundWireTransferSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmation - A Inbound Real Time Payments Transfer Confirmation object. This field will be present in the JSON response if and only if `category` is equal to `inbound_real_time_payments_transfer_confirmation`.
type InboundWireTransferSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmation struct {
	// The amount in the minor unit of the transfer's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The name the sender of the transfer specified as the recipient of the transfer.
	CreditorName string `json:"creditor_name"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the transfer's currency. This will always be "USD" for a Real Time Payments transfer.
	Currency InboundWireTransferSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnum `json:"currency"`
	// The account number of the account that sent the transfer.
	DebtorAccountNumber string `json:"debtor_account_number"`
	// The name provided by the sender of the transfer.
	DebtorName string `json:"debtor_name"`
	// The routing number of the account that sent the transfer.
	DebtorRoutingNumber string `json:"debtor_routing_number"`
	// Additional information included with the transfer.
	RemittanceInformation string `json:"remittance_information"`
	// The Real Time Payments network identification of the transfer
	TransactionIdentification string `json:"transaction_identification"`
}

// InboundWireTransferSimulationResultTransactionTransactionSourceInboundWireDrawdownPayment - A Inbound Wire Drawdown Payment object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment`.
type InboundWireTransferSimulationResultTransactionTransactionSourceInboundWireDrawdownPayment struct {
	// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount                             int64  `json:"amount"`
	BeneficiaryAddressLine1            string `json:"beneficiary_address_line1"`
	BeneficiaryAddressLine2            string `json:"beneficiary_address_line2"`
	BeneficiaryAddressLine3            string `json:"beneficiary_address_line3"`
	BeneficiaryName                    string `json:"beneficiary_name"`
	BeneficiaryReference               string `json:"beneficiary_reference"`
	Description                        string `json:"description"`
	InputMessageAccountabilityData     string `json:"input_message_accountability_data"`
	OriginatorAddressLine1             string `json:"originator_address_line1"`
	OriginatorAddressLine2             string `json:"originator_address_line2"`
	OriginatorAddressLine3             string `json:"originator_address_line3"`
	OriginatorName                     string `json:"originator_name"`
	OriginatorToBeneficiaryInformation string `json:"originator_to_beneficiary_information"`
}

// InboundWireTransferSimulationResultTransactionTransactionSourceInboundWireDrawdownPaymentReversal - A Inbound Wire Drawdown Payment Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment_reversal`.
type InboundWireTransferSimulationResultTransactionTransactionSourceInboundWireDrawdownPaymentReversal struct {
	// The amount that was reversed.
	Amount int64 `json:"amount"`
	// The description on the reversal message from Fedwire.
	Description string `json:"description"`
	// The Fedwire cycle date for the wire reversal.
	InputCycleDate types.Date `json:"input_cycle_date"`
	// The Fedwire transaction identifier.
	InputMessageAccountabilityData string `json:"input_message_accountability_data"`
	// The Fedwire sequence number.
	InputSequenceNumber string `json:"input_sequence_number"`
	// The Fedwire input source identifier.
	InputSource string `json:"input_source"`
	// The Fedwire cycle date for the wire transfer that was reversed.
	PreviousMessageInputCycleDate types.Date `json:"previous_message_input_cycle_date"`
	// The Fedwire transaction identifier for the wire transfer that was reversed.
	PreviousMessageInputMessageAccountabilityData string `json:"previous_message_input_message_accountability_data"`
	// The Fedwire sequence number for the wire transfer that was reversed.
	PreviousMessageInputSequenceNumber string `json:"previous_message_input_sequence_number"`
	// The Fedwire input source identifier for the wire transfer that was reversed.
	PreviousMessageInputSource string `json:"previous_message_input_source"`
}

// InboundWireTransferSimulationResultTransactionTransactionSourceInboundWireReversal - A Inbound Wire Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_reversal`.
type InboundWireTransferSimulationResultTransactionTransactionSourceInboundWireReversal struct {
	// The amount that was reversed.
	Amount int64 `json:"amount"`
	// The description on the reversal message from Fedwire.
	Description string `json:"description"`
	// Additional financial institution information included in the wire reversal.
	FinancialInstitutionToFinancialInstitutionInformation string `json:"financial_institution_to_financial_institution_information"`
	// The Fedwire cycle date for the wire reversal.
	InputCycleDate types.Date `json:"input_cycle_date"`
	// The Fedwire transaction identifier.
	InputMessageAccountabilityData string `json:"input_message_accountability_data"`
	// The Fedwire sequence number.
	InputSequenceNumber string `json:"input_sequence_number"`
	// The Fedwire input source identifier.
	InputSource string `json:"input_source"`
	// The Fedwire cycle date for the wire transfer that was reversed.
	PreviousMessageInputCycleDate types.Date `json:"previous_message_input_cycle_date"`
	// The Fedwire transaction identifier for the wire transfer that was reversed.
	PreviousMessageInputMessageAccountabilityData string `json:"previous_message_input_message_accountability_data"`
	// The Fedwire sequence number for the wire transfer that was reversed.
	PreviousMessageInputSequenceNumber string `json:"previous_message_input_sequence_number"`
	// The Fedwire input source identifier for the wire transfer that was reversed.
	PreviousMessageInputSource string `json:"previous_message_input_source"`
	// Information included in the wire reversal for the receiving financial institution.
	ReceiverFinancialInstitutionInformation string `json:"receiver_financial_institution_information"`
}

// InboundWireTransferSimulationResultTransactionTransactionSourceInboundWireTransfer - A Inbound Wire Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_transfer`.
type InboundWireTransferSimulationResultTransactionTransactionSourceInboundWireTransfer struct {
	// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount                                  int64  `json:"amount"`
	BeneficiaryAddressLine1                 string `json:"beneficiary_address_line1"`
	BeneficiaryAddressLine2                 string `json:"beneficiary_address_line2"`
	BeneficiaryAddressLine3                 string `json:"beneficiary_address_line3"`
	BeneficiaryName                         string `json:"beneficiary_name"`
	BeneficiaryReference                    string `json:"beneficiary_reference"`
	Description                             string `json:"description"`
	InputMessageAccountabilityData          string `json:"input_message_accountability_data"`
	OriginatorAddressLine1                  string `json:"originator_address_line1"`
	OriginatorAddressLine2                  string `json:"originator_address_line2"`
	OriginatorAddressLine3                  string `json:"originator_address_line3"`
	OriginatorName                          string `json:"originator_name"`
	OriginatorToBeneficiaryInformation      string `json:"originator_to_beneficiary_information"`
	OriginatorToBeneficiaryInformationLine1 string `json:"originator_to_beneficiary_information_line1"`
	OriginatorToBeneficiaryInformationLine2 string `json:"originator_to_beneficiary_information_line2"`
	OriginatorToBeneficiaryInformationLine3 string `json:"originator_to_beneficiary_information_line3"`
	OriginatorToBeneficiaryInformationLine4 string `json:"originator_to_beneficiary_information_line4"`
}

// InboundWireTransferSimulationResultTransactionTransactionSourceInterestPaymentCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
type InboundWireTransferSimulationResultTransactionTransactionSourceInterestPaymentCurrencyEnum string

const (
	InboundWireTransferSimulationResultTransactionTransactionSourceInterestPaymentCurrencyEnumCad InboundWireTransferSimulationResultTransactionTransactionSourceInterestPaymentCurrencyEnum = "CAD"
	InboundWireTransferSimulationResultTransactionTransactionSourceInterestPaymentCurrencyEnumChf InboundWireTransferSimulationResultTransactionTransactionSourceInterestPaymentCurrencyEnum = "CHF"
	InboundWireTransferSimulationResultTransactionTransactionSourceInterestPaymentCurrencyEnumEur InboundWireTransferSimulationResultTransactionTransactionSourceInterestPaymentCurrencyEnum = "EUR"
	InboundWireTransferSimulationResultTransactionTransactionSourceInterestPaymentCurrencyEnumGbp InboundWireTransferSimulationResultTransactionTransactionSourceInterestPaymentCurrencyEnum = "GBP"
	InboundWireTransferSimulationResultTransactionTransactionSourceInterestPaymentCurrencyEnumJpy InboundWireTransferSimulationResultTransactionTransactionSourceInterestPaymentCurrencyEnum = "JPY"
	InboundWireTransferSimulationResultTransactionTransactionSourceInterestPaymentCurrencyEnumUsd InboundWireTransferSimulationResultTransactionTransactionSourceInterestPaymentCurrencyEnum = "USD"
)

func (e *InboundWireTransferSimulationResultTransactionTransactionSourceInterestPaymentCurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = InboundWireTransferSimulationResultTransactionTransactionSourceInterestPaymentCurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundWireTransferSimulationResultTransactionTransactionSourceInterestPaymentCurrencyEnum: %s", s)
	}
}

// InboundWireTransferSimulationResultTransactionTransactionSourceInterestPayment - A Interest Payment object. This field will be present in the JSON response if and only if `category` is equal to `interest_payment`.
type InboundWireTransferSimulationResultTransactionTransactionSourceInterestPayment struct {
	// The account on which the interest was accrued.
	AccruedOnAccountID string `json:"accrued_on_account_id"`
	// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
	Currency InboundWireTransferSimulationResultTransactionTransactionSourceInterestPaymentCurrencyEnum `json:"currency"`
	// The end of the period for which this transaction paid interest.
	PeriodEnd time.Time `json:"period_end"`
	// The start of the period for which this transaction paid interest.
	PeriodStart time.Time `json:"period_start"`
}

// InboundWireTransferSimulationResultTransactionTransactionSourceInternalSourceCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
type InboundWireTransferSimulationResultTransactionTransactionSourceInternalSourceCurrencyEnum string

const (
	InboundWireTransferSimulationResultTransactionTransactionSourceInternalSourceCurrencyEnumCad InboundWireTransferSimulationResultTransactionTransactionSourceInternalSourceCurrencyEnum = "CAD"
	InboundWireTransferSimulationResultTransactionTransactionSourceInternalSourceCurrencyEnumChf InboundWireTransferSimulationResultTransactionTransactionSourceInternalSourceCurrencyEnum = "CHF"
	InboundWireTransferSimulationResultTransactionTransactionSourceInternalSourceCurrencyEnumEur InboundWireTransferSimulationResultTransactionTransactionSourceInternalSourceCurrencyEnum = "EUR"
	InboundWireTransferSimulationResultTransactionTransactionSourceInternalSourceCurrencyEnumGbp InboundWireTransferSimulationResultTransactionTransactionSourceInternalSourceCurrencyEnum = "GBP"
	InboundWireTransferSimulationResultTransactionTransactionSourceInternalSourceCurrencyEnumJpy InboundWireTransferSimulationResultTransactionTransactionSourceInternalSourceCurrencyEnum = "JPY"
	InboundWireTransferSimulationResultTransactionTransactionSourceInternalSourceCurrencyEnumUsd InboundWireTransferSimulationResultTransactionTransactionSourceInternalSourceCurrencyEnum = "USD"
)

func (e *InboundWireTransferSimulationResultTransactionTransactionSourceInternalSourceCurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = InboundWireTransferSimulationResultTransactionTransactionSourceInternalSourceCurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundWireTransferSimulationResultTransactionTransactionSourceInternalSourceCurrencyEnum: %s", s)
	}
}

type InboundWireTransferSimulationResultTransactionTransactionSourceInternalSourceReasonEnum string

const (
	InboundWireTransferSimulationResultTransactionTransactionSourceInternalSourceReasonEnumBankMigration      InboundWireTransferSimulationResultTransactionTransactionSourceInternalSourceReasonEnum = "bank_migration"
	InboundWireTransferSimulationResultTransactionTransactionSourceInternalSourceReasonEnumCashback           InboundWireTransferSimulationResultTransactionTransactionSourceInternalSourceReasonEnum = "cashback"
	InboundWireTransferSimulationResultTransactionTransactionSourceInternalSourceReasonEnumEmpyrealAdjustment InboundWireTransferSimulationResultTransactionTransactionSourceInternalSourceReasonEnum = "empyreal_adjustment"
	InboundWireTransferSimulationResultTransactionTransactionSourceInternalSourceReasonEnumError              InboundWireTransferSimulationResultTransactionTransactionSourceInternalSourceReasonEnum = "error"
	InboundWireTransferSimulationResultTransactionTransactionSourceInternalSourceReasonEnumErrorCorrection    InboundWireTransferSimulationResultTransactionTransactionSourceInternalSourceReasonEnum = "error_correction"
	InboundWireTransferSimulationResultTransactionTransactionSourceInternalSourceReasonEnumFees               InboundWireTransferSimulationResultTransactionTransactionSourceInternalSourceReasonEnum = "fees"
	InboundWireTransferSimulationResultTransactionTransactionSourceInternalSourceReasonEnumInterest           InboundWireTransferSimulationResultTransactionTransactionSourceInternalSourceReasonEnum = "interest"
	InboundWireTransferSimulationResultTransactionTransactionSourceInternalSourceReasonEnumSampleFunds        InboundWireTransferSimulationResultTransactionTransactionSourceInternalSourceReasonEnum = "sample_funds"
	InboundWireTransferSimulationResultTransactionTransactionSourceInternalSourceReasonEnumSampleFundsReturn  InboundWireTransferSimulationResultTransactionTransactionSourceInternalSourceReasonEnum = "sample_funds_return"
)

func (e *InboundWireTransferSimulationResultTransactionTransactionSourceInternalSourceReasonEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bank_migration":
		fallthrough
	case "cashback":
		fallthrough
	case "empyreal_adjustment":
		fallthrough
	case "error":
		fallthrough
	case "error_correction":
		fallthrough
	case "fees":
		fallthrough
	case "interest":
		fallthrough
	case "sample_funds":
		fallthrough
	case "sample_funds_return":
		*e = InboundWireTransferSimulationResultTransactionTransactionSourceInternalSourceReasonEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundWireTransferSimulationResultTransactionTransactionSourceInternalSourceReasonEnum: %s", s)
	}
}

// InboundWireTransferSimulationResultTransactionTransactionSourceInternalSource - A Internal Source object. This field will be present in the JSON response if and only if `category` is equal to `internal_source`.
type InboundWireTransferSimulationResultTransactionTransactionSourceInternalSource struct {
	// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
	Currency InboundWireTransferSimulationResultTransactionTransactionSourceInternalSourceCurrencyEnum `json:"currency"`
	Reason   InboundWireTransferSimulationResultTransactionTransactionSourceInternalSourceReasonEnum   `json:"reason"`
}

// InboundWireTransferSimulationResultTransactionTransactionSourceSampleFunds - A Sample Funds object. This field will be present in the JSON response if and only if `category` is equal to `sample_funds`.
type InboundWireTransferSimulationResultTransactionTransactionSourceSampleFunds struct {
	// Where the sample funds came from.
	Originator string `json:"originator"`
}

// InboundWireTransferSimulationResultTransactionTransactionSourceWireDrawdownPaymentIntention - A Wire Drawdown Payment Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_intention`.
type InboundWireTransferSimulationResultTransactionTransactionSourceWireDrawdownPaymentIntention struct {
	AccountNumber string `json:"account_number"`
	// The transfer amount in USD cents.
	Amount             int64  `json:"amount"`
	MessageToRecipient string `json:"message_to_recipient"`
	RoutingNumber      string `json:"routing_number"`
	TransferID         string `json:"transfer_id"`
}

// InboundWireTransferSimulationResultTransactionTransactionSourceWireDrawdownPaymentRejection - A Wire Drawdown Payment Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_rejection`.
type InboundWireTransferSimulationResultTransactionTransactionSourceWireDrawdownPaymentRejection struct {
	TransferID string `json:"transfer_id"`
}

// InboundWireTransferSimulationResultTransactionTransactionSourceWireTransferIntention - A Wire Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_intention`.
type InboundWireTransferSimulationResultTransactionTransactionSourceWireTransferIntention struct {
	// The destination account number.
	AccountNumber string `json:"account_number"`
	// The transfer amount in USD cents.
	Amount int64 `json:"amount"`
	// The message that will show on the recipient's bank statement.
	MessageToRecipient string `json:"message_to_recipient"`
	// The American Bankers' Association (ABA) Routing Transit Number (RTN).
	RoutingNumber string `json:"routing_number"`
	TransferID    string `json:"transfer_id"`
}

// InboundWireTransferSimulationResultTransactionTransactionSourceWireTransferRejection - A Wire Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_rejection`.
type InboundWireTransferSimulationResultTransactionTransactionSourceWireTransferRejection struct {
	TransferID string `json:"transfer_id"`
}

// InboundWireTransferSimulationResultTransactionTransactionSource - This is an object giving more details on the network-level event that caused the Transaction. Note that for backwards compatibility reasons, additional undocumented keys may appear in this object. These should be treated as deprecated and will be removed in the future.
type InboundWireTransferSimulationResultTransactionTransactionSource struct {
	// A Account Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `account_transfer_intention`.
	AccountTransferIntention InboundWireTransferSimulationResultTransactionTransactionSourceAccountTransferIntention `json:"account_transfer_intention"`
	// A ACH Check Conversion object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion`.
	AchCheckConversion InboundWireTransferSimulationResultTransactionTransactionSourceACHCheckConversion `json:"ach_check_conversion"`
	// A ACH Check Conversion Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion_return`.
	AchCheckConversionReturn InboundWireTransferSimulationResultTransactionTransactionSourceACHCheckConversionReturn `json:"ach_check_conversion_return"`
	// A ACH Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_intention`.
	AchTransferIntention InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferIntention `json:"ach_transfer_intention"`
	// A ACH Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_rejection`.
	AchTransferRejection InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferRejection `json:"ach_transfer_rejection"`
	// A ACH Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_return`.
	AchTransferReturn InboundWireTransferSimulationResultTransactionTransactionSourceACHTransferReturn `json:"ach_transfer_return"`
	// A Card Dispute Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `card_dispute_acceptance`.
	CardDisputeAcceptance InboundWireTransferSimulationResultTransactionTransactionSourceCardDisputeAcceptance `json:"card_dispute_acceptance"`
	// A Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_refund`.
	CardRefund InboundWireTransferSimulationResultTransactionTransactionSourceCardRefund `json:"card_refund"`
	// A Deprecated Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_route_refund`.
	CardRouteRefund InboundWireTransferSimulationResultTransactionTransactionSourceDeprecatedCardRefund `json:"card_route_refund"`
	// A Deprecated Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_route_settlement`.
	CardRouteSettlement InboundWireTransferSimulationResultTransactionTransactionSourceDeprecatedCardSettlement `json:"card_route_settlement"`
	// A Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_settlement`.
	CardSettlement InboundWireTransferSimulationResultTransactionTransactionSourceCardSettlement `json:"card_settlement"`
	// The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
	Category InboundWireTransferSimulationResultTransactionTransactionSourceCategoryEnum `json:"category"`
	// A Check Deposit Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_acceptance`.
	CheckDepositAcceptance InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositAcceptance `json:"check_deposit_acceptance"`
	// A Check Deposit Return object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_return`.
	CheckDepositReturn InboundWireTransferSimulationResultTransactionTransactionSourceCheckDepositReturn `json:"check_deposit_return"`
	// A Check Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_intention`.
	CheckTransferIntention InboundWireTransferSimulationResultTransactionTransactionSourceCheckTransferIntention `json:"check_transfer_intention"`
	// A Check Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_rejection`.
	CheckTransferRejection InboundWireTransferSimulationResultTransactionTransactionSourceCheckTransferRejection `json:"check_transfer_rejection"`
	// A Check Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_return`.
	CheckTransferReturn InboundWireTransferSimulationResultTransactionTransactionSourceCheckTransferReturn `json:"check_transfer_return"`
	// A Check Transfer Stop Payment Request object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_stop_payment_request`.
	CheckTransferStopPaymentRequest InboundWireTransferSimulationResultTransactionTransactionSourceCheckTransferStopPaymentRequest `json:"check_transfer_stop_payment_request"`
	// A Dispute Resolution object. This field will be present in the JSON response if and only if `category` is equal to `dispute_resolution`.
	DisputeResolution InboundWireTransferSimulationResultTransactionTransactionSourceDisputeResolution `json:"dispute_resolution"`
	// A Empyreal Cash Deposit object. This field will be present in the JSON response if and only if `category` is equal to `empyreal_cash_deposit`.
	EmpyrealCashDeposit InboundWireTransferSimulationResultTransactionTransactionSourceEmpyrealCashDeposit `json:"empyreal_cash_deposit"`
	// A Inbound ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_ach_transfer`.
	InboundAchTransfer InboundWireTransferSimulationResultTransactionTransactionSourceInboundACHTransfer `json:"inbound_ach_transfer"`
	// A Inbound Check object. This field will be present in the JSON response if and only if `category` is equal to `inbound_check`.
	InboundCheck InboundWireTransferSimulationResultTransactionTransactionSourceInboundCheck `json:"inbound_check"`
	// A Inbound International ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_international_ach_transfer`.
	InboundInternationalAchTransfer InboundWireTransferSimulationResultTransactionTransactionSourceInboundInternationalACHTransfer `json:"inbound_international_ach_transfer"`
	// A Inbound Real Time Payments Transfer Confirmation object. This field will be present in the JSON response if and only if `category` is equal to `inbound_real_time_payments_transfer_confirmation`.
	InboundRealTimePaymentsTransferConfirmation InboundWireTransferSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmation `json:"inbound_real_time_payments_transfer_confirmation"`
	// A Inbound Wire Drawdown Payment object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment`.
	InboundWireDrawdownPayment InboundWireTransferSimulationResultTransactionTransactionSourceInboundWireDrawdownPayment `json:"inbound_wire_drawdown_payment"`
	// A Inbound Wire Drawdown Payment Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment_reversal`.
	InboundWireDrawdownPaymentReversal InboundWireTransferSimulationResultTransactionTransactionSourceInboundWireDrawdownPaymentReversal `json:"inbound_wire_drawdown_payment_reversal"`
	// A Inbound Wire Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_reversal`.
	InboundWireReversal InboundWireTransferSimulationResultTransactionTransactionSourceInboundWireReversal `json:"inbound_wire_reversal"`
	// A Inbound Wire Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_transfer`.
	InboundWireTransfer InboundWireTransferSimulationResultTransactionTransactionSourceInboundWireTransfer `json:"inbound_wire_transfer"`
	// A Interest Payment object. This field will be present in the JSON response if and only if `category` is equal to `interest_payment`.
	InterestPayment InboundWireTransferSimulationResultTransactionTransactionSourceInterestPayment `json:"interest_payment"`
	// A Internal Source object. This field will be present in the JSON response if and only if `category` is equal to `internal_source`.
	InternalSource InboundWireTransferSimulationResultTransactionTransactionSourceInternalSource `json:"internal_source"`
	// A Sample Funds object. This field will be present in the JSON response if and only if `category` is equal to `sample_funds`.
	SampleFunds InboundWireTransferSimulationResultTransactionTransactionSourceSampleFunds `json:"sample_funds"`
	// A Wire Drawdown Payment Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_intention`.
	WireDrawdownPaymentIntention InboundWireTransferSimulationResultTransactionTransactionSourceWireDrawdownPaymentIntention `json:"wire_drawdown_payment_intention"`
	// A Wire Drawdown Payment Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_rejection`.
	WireDrawdownPaymentRejection InboundWireTransferSimulationResultTransactionTransactionSourceWireDrawdownPaymentRejection `json:"wire_drawdown_payment_rejection"`
	// A Wire Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_intention`.
	WireTransferIntention InboundWireTransferSimulationResultTransactionTransactionSourceWireTransferIntention `json:"wire_transfer_intention"`
	// A Wire Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_rejection`.
	WireTransferRejection InboundWireTransferSimulationResultTransactionTransactionSourceWireTransferRejection `json:"wire_transfer_rejection"`
}

// InboundWireTransferSimulationResultTransactionTypeEnum - A constant representing the object's type. For this resource it will always be `transaction`.
type InboundWireTransferSimulationResultTransactionTypeEnum string

const (
	InboundWireTransferSimulationResultTransactionTypeEnumTransaction InboundWireTransferSimulationResultTransactionTypeEnum = "transaction"
)

func (e *InboundWireTransferSimulationResultTransactionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "transaction":
		*e = InboundWireTransferSimulationResultTransactionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundWireTransferSimulationResultTransactionTypeEnum: %s", s)
	}
}

// InboundWireTransferSimulationResultTransaction - If the Wire Transfer attempt succeeds, this will contain the resulting [Transaction](#transactions) object. The Transaction's `source` will be of `category: inbound_wire_transfer`.
type InboundWireTransferSimulationResultTransaction struct {
	// The identifier for the Account the Transaction belongs to.
	AccountID string `json:"account_id"`
	// The Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.
	CreatedAt time.Time `json:"created_at"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Transaction's currency. This will match the currency on the Transcation's Account.
	Currency InboundWireTransferSimulationResultTransactionCurrencyEnum `json:"currency"`
	// For a Transaction related to a transfer, this is the description you provide. For a Transaction related to a payment, this is the description the vendor provides.
	Description string `json:"description"`
	// The Transaction identifier.
	ID string `json:"id"`
	// The identifier for the route this Transaction came through. Routes are things like cards and ACH details.
	RouteID string `json:"route_id"`
	// The type of the route this Transaction came through.
	RouteType string `json:"route_type"`
	// This is an object giving more details on the network-level event that caused the Transaction. Note that for backwards compatibility reasons, additional undocumented keys may appear in this object. These should be treated as deprecated and will be removed in the future.
	Source InboundWireTransferSimulationResultTransactionTransactionSource `json:"source"`
	// A constant representing the object's type. For this resource it will always be `transaction`.
	Type InboundWireTransferSimulationResultTransactionTypeEnum `json:"type"`
}

// InboundWireTransferSimulationResultTypeEnum - A constant representing the object's type. For this resource it will always be `inbound_wire_transfer_simulation_result`.
type InboundWireTransferSimulationResultTypeEnum string

const (
	InboundWireTransferSimulationResultTypeEnumInboundWireTransferSimulationResult InboundWireTransferSimulationResultTypeEnum = "inbound_wire_transfer_simulation_result"
)

func (e *InboundWireTransferSimulationResultTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "inbound_wire_transfer_simulation_result":
		*e = InboundWireTransferSimulationResultTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InboundWireTransferSimulationResultTypeEnum: %s", s)
	}
}

// InboundWireTransferSimulationResult - The results of an inbound Wire Transfer simulation.
type InboundWireTransferSimulationResult struct {
	// If the Wire Transfer attempt succeeds, this will contain the resulting [Transaction](#transactions) object. The Transaction's `source` will be of `category: inbound_wire_transfer`.
	Transaction InboundWireTransferSimulationResultTransaction `json:"transaction"`
	// A constant representing the object's type. For this resource it will always be `inbound_wire_transfer_simulation_result`.
	Type InboundWireTransferSimulationResultTypeEnum `json:"type"`
}
