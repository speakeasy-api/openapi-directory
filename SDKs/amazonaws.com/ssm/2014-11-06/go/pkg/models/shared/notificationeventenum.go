// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type NotificationEventEnum string

const (
	NotificationEventEnumAll        NotificationEventEnum = "All"
	NotificationEventEnumInProgress NotificationEventEnum = "InProgress"
	NotificationEventEnumSuccess    NotificationEventEnum = "Success"
	NotificationEventEnumTimedOut   NotificationEventEnum = "TimedOut"
	NotificationEventEnumCancelled  NotificationEventEnum = "Cancelled"
	NotificationEventEnumFailed     NotificationEventEnum = "Failed"
)

func (e NotificationEventEnum) ToPointer() *NotificationEventEnum {
	return &e
}

func (e *NotificationEventEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "All":
		fallthrough
	case "InProgress":
		fallthrough
	case "Success":
		fallthrough
	case "TimedOut":
		fallthrough
	case "Cancelled":
		fallthrough
	case "Failed":
		*e = NotificationEventEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NotificationEventEnum: %v", v)
	}
}
