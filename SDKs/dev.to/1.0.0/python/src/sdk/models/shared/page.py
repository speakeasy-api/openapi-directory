"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class PageTemplateEnum(str, Enum):
    r"""Controls what kind of layout the page is rendered in"""
    CONTAINED = 'contained'
    FULL_WITHIN_LAYOUT = 'full_within_layout'
    NAV_BAR_INCLUDED = 'nav_bar_included'
    JSON = 'json'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Page:
    r"""Representation of a page object"""
    
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""For internal use, helps similar pages from one another"""  
    slug: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slug') }})
    r"""Used to link to this page in URLs, must be unique and URL-safe"""  
    template: PageTemplateEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('template') }})
    r"""Controls what kind of layout the page is rendered in"""  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})
    r"""Title of the page"""  
    body_json: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('body_json'), 'exclude': lambda f: f is None }})
    r"""For JSON pages, the JSON body"""  
    body_markdown: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('body_markdown'), 'exclude': lambda f: f is None }})
    r"""The text (in markdown) of the ad (required)"""  
    is_top_level_path: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_top_level_path'), 'exclude': lambda f: f is None }})
    r"""If true, the page is available at '/{slug}' instead of '/page/{slug}', use with caution"""  
    social_image: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('social_image'), 'exclude': lambda f: f is None }})  
    