/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class SecretScanningListAlertsForEnterpriseRequest extends SpeakeasyBase {
  /**
   * A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.5/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=after" })
  after?: string;

  /**
   * A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.5/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=before",
  })
  before?: string;

  /**
   * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=enterprise",
  })
  enterprise: string;

  /**
   * The number of results per page (max 100).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=per_page",
  })
  perPage?: number;

  /**
   * A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=resolution",
  })
  resolution?: string;

  /**
   * A comma-separated list of secret types to return. By default all secret types are returned.
   *
   * @remarks
   * See "[Secret scanning patterns](https://docs.github.com/enterprise-server@3.5/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)"
   * for a complete list of secret types.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=secret_type",
  })
  secretType?: string;

  /**
   * Set to `open` or `resolved` to only list secret scanning alerts in a specific state.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=state" })
  state?: shared.SecretScanningAlertStateEnum;
}

/**
 * Service unavailable
 */
export class SecretScanningListAlertsForEnterprise503ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "documentation_url" })
  documentationUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message?: string;
}

export class SecretScanningListAlertsForEnterpriseResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  headers?: Record<string, string[]>;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Resource not found
   */
  @SpeakeasyMetadata()
  basicError?: shared.BasicError;

  /**
   * Response
   */
  @SpeakeasyMetadata({ elemType: shared.OrganizationSecretScanningAlert })
  organizationSecretScanningAlerts?: shared.OrganizationSecretScanningAlert[];

  /**
   * Service unavailable
   */
  @SpeakeasyMetadata()
  secretScanningListAlertsForEnterprise503ApplicationJSONObject?: SecretScanningListAlertsForEnterprise503ApplicationJSON;
}
