// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// StartImportXAmzTargetEnum
type StartImportXAmzTargetEnum string

const (
	StartImportXAmzTargetEnumComAmazonawsCloudtrailV20131101CloudTrail20131101StartImport StartImportXAmzTargetEnum = "com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.StartImport"
)

func (e *StartImportXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.StartImport":
		*e = StartImportXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StartImportXAmzTargetEnum: %s", s)
	}
}

type StartImportHeaders struct {
	XAmzAlgorithm     *string                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        StartImportXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type StartImportRequest struct {
	Headers StartImportHeaders
	Request shared.StartImportRequest `request:"mediaType=application/json"`
}

type StartImportResponse struct {
	// AccountHasOngoingImportException
	AccountHasOngoingImportException interface{}
	ContentType                      string
	// EventDataStoreARNInvalidException
	EventDataStoreARNInvalidException interface{}
	// EventDataStoreNotFoundException
	EventDataStoreNotFoundException interface{}
	// ImportNotFoundException
	ImportNotFoundException interface{}
	// InactiveEventDataStoreException
	InactiveEventDataStoreException interface{}
	// InsufficientEncryptionPolicyException
	InsufficientEncryptionPolicyException interface{}
	// InvalidEventDataStoreCategoryException
	InvalidEventDataStoreCategoryException interface{}
	// InvalidEventDataStoreStatusException
	InvalidEventDataStoreStatusException interface{}
	// InvalidImportSourceException
	InvalidImportSourceException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// OperationNotPermittedException
	OperationNotPermittedException interface{}
	// Success
	StartImportResponse *shared.StartImportResponse
	StatusCode          int
	RawResponse         *http.Response
	// UnsupportedOperationException
	UnsupportedOperationException interface{}
}
