"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndexField = void 0;
var utils_1 = require("../../../internal/utils");
var datearrayoptions_1 = require("./datearrayoptions");
var dateoptions_1 = require("./dateoptions");
var doublearrayoptions_1 = require("./doublearrayoptions");
var doubleoptions_1 = require("./doubleoptions");
var indexfieldtypeenum_1 = require("./indexfieldtypeenum");
var intarrayoptions_1 = require("./intarrayoptions");
var intoptions_1 = require("./intoptions");
var latlonoptions_1 = require("./latlonoptions");
var literalarrayoptions_1 = require("./literalarrayoptions");
var literaloptions_1 = require("./literaloptions");
var textarrayoptions_1 = require("./textarrayoptions");
var textoptions_1 = require("./textoptions");
/**
 * Configuration information for a field in the index, including its name, type, and options. The supported options depend on the <code><a>IndexFieldType</a></code>.
 */
var IndexField = /** @class */ (function (_super) {
    __extends(IndexField, _super);
    function IndexField() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", datearrayoptions_1.DateArrayOptions)
    ], IndexField.prototype, "dateArrayOptions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", dateoptions_1.DateOptions)
    ], IndexField.prototype, "dateOptions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", doublearrayoptions_1.DoubleArrayOptions)
    ], IndexField.prototype, "doubleArrayOptions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", doubleoptions_1.DoubleOptions)
    ], IndexField.prototype, "doubleOptions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], IndexField.prototype, "indexFieldName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], IndexField.prototype, "indexFieldType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", intarrayoptions_1.IntArrayOptions)
    ], IndexField.prototype, "intArrayOptions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", intoptions_1.IntOptions)
    ], IndexField.prototype, "intOptions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", latlonoptions_1.LatLonOptions)
    ], IndexField.prototype, "latLonOptions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", literalarrayoptions_1.LiteralArrayOptions)
    ], IndexField.prototype, "literalArrayOptions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", literaloptions_1.LiteralOptions)
    ], IndexField.prototype, "literalOptions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", textarrayoptions_1.TextArrayOptions)
    ], IndexField.prototype, "textArrayOptions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", textoptions_1.TextOptions)
    ], IndexField.prototype, "textOptions", void 0);
    return IndexField;
}(utils_1.SpeakeasyBase));
exports.IndexField = IndexField;
