"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import links_importation_configurecatalogcolumnlink as shared_links_importation_configurecatalogcolumnlink
from ..shared import links_importation_ignorecolumnlink as shared_links_importation_ignorecolumnlink
from ..shared import links_importation_mapcatalogcolumnlink as shared_links_importation_mapcatalogcolumnlink
from ..shared import links_importation_reattendcolumnlink as shared_links_importation_reattendcolumnlink
from ..shared import links_importation_unmapcatalogcolumnlink as shared_links_importation_unmapcatalogcolumnlink
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DetectedCatalogColumnLinks:
    
    configure: Optional[shared_links_importation_configurecatalogcolumnlink.LinksImportationConfigureCatalogColumnLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('configure'), 'exclude': lambda f: f is None }})  
    ignore: Optional[shared_links_importation_ignorecolumnlink.LinksImportationIgnoreColumnLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ignore'), 'exclude': lambda f: f is None }})  
    map: Optional[shared_links_importation_mapcatalogcolumnlink.LinksImportationMapCatalogColumnLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('map'), 'exclude': lambda f: f is None }})  
    reattend: Optional[shared_links_importation_reattendcolumnlink.LinksImportationReattendColumnLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reattend'), 'exclude': lambda f: f is None }})  
    unmap: Optional[shared_links_importation_unmapcatalogcolumnlink.LinksImportationUnmapCatalogColumnLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unmap'), 'exclude': lambda f: f is None }})  
    