/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class SymbolsListSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=X-API-Token",
  })
  apiToken: string;
}

export class SymbolsListRequest extends SpeakeasyBase {
  /**
   * The name of the application
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=app_name",
  })
  appName: string;

  /**
   * The name of the owner
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner_name",
  })
  ownerName: string;
}

/**
 * Internal error
 */
export class SymbolsList500ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * Unauthorized
 */
export class SymbolsList403ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * The origin of the symbol file
 */
export enum SymbolsList200ApplicationJSONOriginEnum {
  System = "System",
  User = "User",
}

/**
 * Whether the symbol is ignored.
 */
export enum SymbolsList200ApplicationJSONStatusEnum {
  Available = "available",
  Ignored = "ignored",
}

/**
 * The type of the symbol for the current symbol upload
 */
export enum SymbolsList200ApplicationJSONTypeEnum {
  Apple = "Apple",
  JavaScript = "JavaScript",
  Breakpad = "Breakpad",
  AndroidProguard = "AndroidProguard",
  Uwp = "UWP",
}

export class SymbolsList200ApplicationJSON extends SpeakeasyBase {
  /**
   * The other symbols in the same file
   */
  @SpeakeasyMetadata()
  @Expose({ name: "alternate_symbol_ids" })
  alternateSymbolIds: string[];

  /**
   * The application that this symbol belongs to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "app_id" })
  appId: string;

  /**
   * The build number. Optional for Apple. Required for Android.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "build" })
  build?: string;

  /**
   * The origin of the symbol file
   */
  @SpeakeasyMetadata()
  @Expose({ name: "origin" })
  origin: SymbolsList200ApplicationJSONOriginEnum;

  /**
   * The platform that this symbol is associated with
   */
  @SpeakeasyMetadata()
  @Expose({ name: "platform" })
  platform: string;

  /**
   * Whether the symbol is ignored.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: SymbolsList200ApplicationJSONStatusEnum;

  /**
   * The unique id for this symbol (uuid)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "symbol_id" })
  symbolId: string;

  /**
   * The id of the symbol upload this symbol belongs to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "symbol_upload_id" })
  symbolUploadId: string;

  /**
   * The type of the symbol for the current symbol upload
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: SymbolsList200ApplicationJSONTypeEnum;

  /**
   * The path name of the symbol file in blob storage
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;

  /**
   * The version number. Optional for Apple. Required for Android.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "version" })
  version?: string;
}

export class SymbolsListResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Success
   */
  @SpeakeasyMetadata({ elemType: SymbolsList200ApplicationJSON })
  symbolsList200ApplicationJSONObjects?: SymbolsList200ApplicationJSON[];

  /**
   * Unauthorized
   */
  @SpeakeasyMetadata()
  symbolsList403ApplicationJSONObject?: SymbolsList403ApplicationJSON;

  /**
   * Internal error
   */
  @SpeakeasyMetadata()
  symbolsList500ApplicationJSONObject?: SymbolsList500ApplicationJSON;
}
