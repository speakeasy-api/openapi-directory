"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CapacityCommitmentInput = exports.CapacityCommitment = exports.CapacityCommitmentStateEnum = exports.CapacityCommitmentRenewalPlanEnum = exports.CapacityCommitmentPlanEnum = exports.CapacityCommitmentEditionEnum = void 0;
var utils_1 = require("../../../internal/utils");
var status_1 = require("./status");
var class_transformer_1 = require("class-transformer");
/**
 * Edition of the capacity commitment.
 */
var CapacityCommitmentEditionEnum;
(function (CapacityCommitmentEditionEnum) {
    CapacityCommitmentEditionEnum["EditionUnspecified"] = "EDITION_UNSPECIFIED";
    CapacityCommitmentEditionEnum["Standard"] = "STANDARD";
    CapacityCommitmentEditionEnum["Enterprise"] = "ENTERPRISE";
    CapacityCommitmentEditionEnum["EnterprisePlus"] = "ENTERPRISE_PLUS";
})(CapacityCommitmentEditionEnum = exports.CapacityCommitmentEditionEnum || (exports.CapacityCommitmentEditionEnum = {}));
/**
 * Capacity commitment commitment plan.
 */
var CapacityCommitmentPlanEnum;
(function (CapacityCommitmentPlanEnum) {
    CapacityCommitmentPlanEnum["CommitmentPlanUnspecified"] = "COMMITMENT_PLAN_UNSPECIFIED";
    CapacityCommitmentPlanEnum["Flex"] = "FLEX";
    CapacityCommitmentPlanEnum["FlexFlatRate"] = "FLEX_FLAT_RATE";
    CapacityCommitmentPlanEnum["Trial"] = "TRIAL";
    CapacityCommitmentPlanEnum["Monthly"] = "MONTHLY";
    CapacityCommitmentPlanEnum["MonthlyFlatRate"] = "MONTHLY_FLAT_RATE";
    CapacityCommitmentPlanEnum["Annual"] = "ANNUAL";
    CapacityCommitmentPlanEnum["AnnualFlatRate"] = "ANNUAL_FLAT_RATE";
    CapacityCommitmentPlanEnum["ThreeYear"] = "THREE_YEAR";
    CapacityCommitmentPlanEnum["None"] = "NONE";
})(CapacityCommitmentPlanEnum = exports.CapacityCommitmentPlanEnum || (exports.CapacityCommitmentPlanEnum = {}));
/**
 * The plan this capacity commitment is converted to after commitment_end_time passes. Once the plan is changed, committed period is extended according to commitment plan. Only applicable for ANNUAL and TRIAL commitments.
 */
var CapacityCommitmentRenewalPlanEnum;
(function (CapacityCommitmentRenewalPlanEnum) {
    CapacityCommitmentRenewalPlanEnum["CommitmentPlanUnspecified"] = "COMMITMENT_PLAN_UNSPECIFIED";
    CapacityCommitmentRenewalPlanEnum["Flex"] = "FLEX";
    CapacityCommitmentRenewalPlanEnum["FlexFlatRate"] = "FLEX_FLAT_RATE";
    CapacityCommitmentRenewalPlanEnum["Trial"] = "TRIAL";
    CapacityCommitmentRenewalPlanEnum["Monthly"] = "MONTHLY";
    CapacityCommitmentRenewalPlanEnum["MonthlyFlatRate"] = "MONTHLY_FLAT_RATE";
    CapacityCommitmentRenewalPlanEnum["Annual"] = "ANNUAL";
    CapacityCommitmentRenewalPlanEnum["AnnualFlatRate"] = "ANNUAL_FLAT_RATE";
    CapacityCommitmentRenewalPlanEnum["ThreeYear"] = "THREE_YEAR";
    CapacityCommitmentRenewalPlanEnum["None"] = "NONE";
})(CapacityCommitmentRenewalPlanEnum = exports.CapacityCommitmentRenewalPlanEnum || (exports.CapacityCommitmentRenewalPlanEnum = {}));
/**
 * Output only. State of the commitment.
 */
var CapacityCommitmentStateEnum;
(function (CapacityCommitmentStateEnum) {
    CapacityCommitmentStateEnum["StateUnspecified"] = "STATE_UNSPECIFIED";
    CapacityCommitmentStateEnum["Pending"] = "PENDING";
    CapacityCommitmentStateEnum["Active"] = "ACTIVE";
    CapacityCommitmentStateEnum["Failed"] = "FAILED";
})(CapacityCommitmentStateEnum = exports.CapacityCommitmentStateEnum || (exports.CapacityCommitmentStateEnum = {}));
/**
 * Capacity commitment is a way to purchase compute capacity for BigQuery jobs (in the form of slots) with some committed period of usage. Annual commitments renew by default. Commitments can be removed after their commitment end time passes. In order to remove annual commitment, its plan needs to be changed to monthly or flex first. A capacity commitment resource exists as a child resource of the admin project.
 */
var CapacityCommitment = /** @class */ (function (_super) {
    __extends(CapacityCommitment, _super);
    function CapacityCommitment() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "commitmentEndTime" }),
        __metadata("design:type", String)
    ], CapacityCommitment.prototype, "commitmentEndTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "commitmentStartTime" }),
        __metadata("design:type", String)
    ], CapacityCommitment.prototype, "commitmentStartTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "edition" }),
        __metadata("design:type", String)
    ], CapacityCommitment.prototype, "edition", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "failureStatus" }),
        (0, class_transformer_1.Type)(function () { return status_1.Status; }),
        __metadata("design:type", status_1.Status)
    ], CapacityCommitment.prototype, "failureStatus", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "multiRegionAuxiliary" }),
        __metadata("design:type", Boolean)
    ], CapacityCommitment.prototype, "multiRegionAuxiliary", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], CapacityCommitment.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "plan" }),
        __metadata("design:type", String)
    ], CapacityCommitment.prototype, "plan", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "renewalPlan" }),
        __metadata("design:type", String)
    ], CapacityCommitment.prototype, "renewalPlan", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "slotCount" }),
        __metadata("design:type", String)
    ], CapacityCommitment.prototype, "slotCount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "state" }),
        __metadata("design:type", String)
    ], CapacityCommitment.prototype, "state", void 0);
    return CapacityCommitment;
}(utils_1.SpeakeasyBase));
exports.CapacityCommitment = CapacityCommitment;
/**
 * Capacity commitment is a way to purchase compute capacity for BigQuery jobs (in the form of slots) with some committed period of usage. Annual commitments renew by default. Commitments can be removed after their commitment end time passes. In order to remove annual commitment, its plan needs to be changed to monthly or flex first. A capacity commitment resource exists as a child resource of the admin project.
 */
var CapacityCommitmentInput = /** @class */ (function (_super) {
    __extends(CapacityCommitmentInput, _super);
    function CapacityCommitmentInput() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "edition" }),
        __metadata("design:type", String)
    ], CapacityCommitmentInput.prototype, "edition", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "failureStatus" }),
        (0, class_transformer_1.Type)(function () { return status_1.Status; }),
        __metadata("design:type", status_1.Status)
    ], CapacityCommitmentInput.prototype, "failureStatus", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "multiRegionAuxiliary" }),
        __metadata("design:type", Boolean)
    ], CapacityCommitmentInput.prototype, "multiRegionAuxiliary", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "plan" }),
        __metadata("design:type", String)
    ], CapacityCommitmentInput.prototype, "plan", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "renewalPlan" }),
        __metadata("design:type", String)
    ], CapacityCommitmentInput.prototype, "renewalPlan", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "slotCount" }),
        __metadata("design:type", String)
    ], CapacityCommitmentInput.prototype, "slotCount", void 0);
    return CapacityCommitmentInput;
}(utils_1.SpeakeasyBase));
exports.CapacityCommitmentInput = CapacityCommitmentInput;
