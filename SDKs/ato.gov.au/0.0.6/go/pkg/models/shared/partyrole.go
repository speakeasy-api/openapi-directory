// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// PartyRolePartyRoleTypeEnum - The party's role type.
type PartyRolePartyRoleTypeEnum string

const (
	PartyRolePartyRoleTypeEnumDirector PartyRolePartyRoleTypeEnum = "Director"
	PartyRolePartyRoleTypeEnumEmployee PartyRolePartyRoleTypeEnum = "Employee"
	PartyRolePartyRoleTypeEnumMember   PartyRolePartyRoleTypeEnum = "Member"
	PartyRolePartyRoleTypeEnumPartner  PartyRolePartyRoleTypeEnum = "Partner"
	PartyRolePartyRoleTypeEnumTrustee  PartyRolePartyRoleTypeEnum = "Trustee"
)

func (e PartyRolePartyRoleTypeEnum) ToPointer() *PartyRolePartyRoleTypeEnum {
	return &e
}

func (e *PartyRolePartyRoleTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Director":
		fallthrough
	case "Employee":
		fallthrough
	case "Member":
		fallthrough
	case "Partner":
		fallthrough
	case "Trustee":
		*e = PartyRolePartyRoleTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PartyRolePartyRoleTypeEnum: %v", v)
	}
}

// PartyRoleRelatedPartyRoleTypeEnum - The related party's role type.
type PartyRoleRelatedPartyRoleTypeEnum string

const (
	PartyRoleRelatedPartyRoleTypeEnumAssociation  PartyRoleRelatedPartyRoleTypeEnum = "Association"
	PartyRoleRelatedPartyRoleTypeEnumCompany      PartyRoleRelatedPartyRoleTypeEnum = "Company"
	PartyRoleRelatedPartyRoleTypeEnumEmployer     PartyRoleRelatedPartyRoleTypeEnum = "Employer"
	PartyRoleRelatedPartyRoleTypeEnumOrganisation PartyRoleRelatedPartyRoleTypeEnum = "Organisation"
	PartyRoleRelatedPartyRoleTypeEnumPartnership  PartyRoleRelatedPartyRoleTypeEnum = "Partnership"
	PartyRoleRelatedPartyRoleTypeEnumTrust        PartyRoleRelatedPartyRoleTypeEnum = "Trust"
)

func (e PartyRoleRelatedPartyRoleTypeEnum) ToPointer() *PartyRoleRelatedPartyRoleTypeEnum {
	return &e
}

func (e *PartyRoleRelatedPartyRoleTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Association":
		fallthrough
	case "Company":
		fallthrough
	case "Employer":
		fallthrough
	case "Organisation":
		fallthrough
	case "Partnership":
		fallthrough
	case "Trust":
		*e = PartyRoleRelatedPartyRoleTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PartyRoleRelatedPartyRoleTypeEnum: %v", v)
	}
}

// PartyRoleRelationshipTypeEnum - The relationship type.
type PartyRoleRelationshipTypeEnum string

const (
	PartyRoleRelationshipTypeEnumDirectorship PartyRoleRelationshipTypeEnum = "Directorship"
	PartyRoleRelationshipTypeEnumEmployment   PartyRoleRelationshipTypeEnum = "Employment"
	PartyRoleRelationshipTypeEnumMembership   PartyRoleRelationshipTypeEnum = "Membership"
	PartyRoleRelationshipTypeEnumPartnership  PartyRoleRelationshipTypeEnum = "Partnership"
	PartyRoleRelationshipTypeEnumTrusteeship  PartyRoleRelationshipTypeEnum = "Trusteeship"
)

func (e PartyRoleRelationshipTypeEnum) ToPointer() *PartyRoleRelationshipTypeEnum {
	return &e
}

func (e *PartyRoleRelationshipTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Directorship":
		fallthrough
	case "Employment":
		fallthrough
	case "Membership":
		fallthrough
	case "Partnership":
		fallthrough
	case "Trusteeship":
		*e = PartyRoleRelationshipTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PartyRoleRelationshipTypeEnum: %v", v)
	}
}

// PartyRoleInput - The Party Role resource.
type PartyRoleInput struct {
	// The party's role type.
	PartyRoleType *PartyRolePartyRoleTypeEnum `json:"partyRoleType,omitempty"`
	// The related party's unique identifier.
	RelatedPartyID string `json:"relatedPartyId"`
	// The related party's role type.
	RelatedPartyRoleType *PartyRoleRelatedPartyRoleTypeEnum `json:"relatedPartyRoleType,omitempty"`
	// The relationship type.
	RelationshipType PartyRoleRelationshipTypeEnum `json:"relationshipType"`
}

// PartyRole - The Party Role resource.
type PartyRole struct {
	// The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
	FromDate *time.Time `json:"fromDate,omitempty"`
	// The resource's unique identifier.
	ID *string `json:"id,omitempty"`
	// The party's role type.
	PartyRoleType *PartyRolePartyRoleTypeEnum `json:"partyRoleType,omitempty"`
	// The related party's unique identifier.
	RelatedPartyID string `json:"relatedPartyId"`
	// The related party's role type.
	RelatedPartyRoleType *PartyRoleRelatedPartyRoleTypeEnum `json:"relatedPartyRoleType,omitempty"`
	// The relationship type.
	RelationshipType PartyRoleRelationshipTypeEnum `json:"relationshipType"`
	// The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
	ToDate *time.Time `json:"toDate,omitempty"`
}
