// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type WritableRackTypeEnum string

const (
	WritableRackTypeEnumOneHundred            WritableRackTypeEnum = "100"
	WritableRackTypeEnumTwoHundred            WritableRackTypeEnum = "200"
	WritableRackTypeEnumThreeHundred          WritableRackTypeEnum = "300"
	WritableRackTypeEnumOneThousand           WritableRackTypeEnum = "1000"
	WritableRackTypeEnumOneThousandOneHundred WritableRackTypeEnum = "1100"
)

func (e *WritableRackTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "100":
		fallthrough
	case "200":
		fallthrough
	case "300":
		fallthrough
	case "1000":
		fallthrough
	case "1100":
		*e = WritableRackTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WritableRackTypeEnum: %s", s)
	}
}

// WritableRackWidthEnum - Rail-to-rail width
type WritableRackWidthEnum string

const (
	WritableRackWidthEnumNineteen    WritableRackWidthEnum = "19"
	WritableRackWidthEnumTwentyThree WritableRackWidthEnum = "23"
)

func (e *WritableRackWidthEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "19":
		fallthrough
	case "23":
		*e = WritableRackWidthEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WritableRackWidthEnum: %s", s)
	}
}

type WritableRackInput struct {
	Comments     *string                `json:"comments,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
	// Units are numbered top-to-bottom
	DescUnits  *bool                 `json:"desc_units,omitempty"`
	FacilityID *string               `json:"facility_id,omitempty"`
	Group      *int64                `json:"group,omitempty"`
	Name       string                `json:"name"`
	Role       *int64                `json:"role,omitempty"`
	Serial     *string               `json:"serial,omitempty"`
	Site       int64                 `json:"site"`
	Tags       []string              `json:"tags,omitempty"`
	Tenant     *int64                `json:"tenant,omitempty"`
	Type       *WritableRackTypeEnum `json:"type,omitempty"`
	UHeight    *int64                `json:"u_height,omitempty"`
	// Rail-to-rail width
	Width *WritableRackWidthEnum `json:"width,omitempty"`
}
