// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"net/http"
	"openapi/pkg/utils"
	"time"
)

// ServerList contains the list of servers available to the SDK
var ServerList = []string{
	// Production API Server
	"//api.abr.ato.gov.au/",
	// Sandbox API Server
	"//api.sandbox.abr.ato.gov.au/",
}

// HTTPClient provides an interface for suplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// SDK - # Introduction
// The Business Registries API is built on HTTP. The API is RESTful. It has predictable resource URIs.
//
//	The API is documented in <a target="_blank" href="https://github.com/OAI/OpenAPI-Specification">OpenAPI</a> format.
//	In addition to the standard OpenAPI syntax we use a few
//	<a target="_blank" href="https://github.com/Rebilly/ReDoc/blob/master/docs/redoc-vendor-extensions.md">vendor extensions</a>.
//
// # Overview
// The following sections describe the resources that make up the Business Registries REST API.
// ## Current Version
// By default, all requests to https://api.abr.ato.gov.au receive the `v1` version of the REST API. We encourage you to explicitly request this version via the `Accept` header.
//
//	Accept: application/vnd.abr-ato.v1+json
//
// ## Schema
// All API access is over HTTPS, and accessed from https://api.abr.ato.gov.au. All data is sent and received as JSON. Blank fields are included.
//
//	All dates use the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
//
//	  YYYY-MM-DD
//
//	For example: `2017-07-01` (the 1st of July 2017)
//
//	All timestamps use the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
//
//	  YYYY-MM-DDTHH:MM:SSZ
//
//	For example: `2017-07-01T11:05:06+10:00`
//
// ## Timezones
// Some requests allow for specifying timestamps or generate timestamps with time zone information. We apply the following rules, in order of priority, to determine timezone information for API calls.
// ### Explicitly provide an ISO 8601 timestamp with timezone information
// For API calls that allow for a timestamp to be specified, we use that exact timestamp.
//
//	For example: `2017-07-01T11:05:06+10:00`
//
// ## Pagination
// Information about pagination is provided in the [Link](https://tools.ietf.org/html/rfc5988#page-6) header.
//
//	For example:
//
//	  Link: <https://api.abr.ato.gov.au/individuals?page=2>; rel="next",
//	        <https://api.abr.ato.gov.au/individuals?page=34>; rel="last"
//
// `rel="next"` states that the next page is `page=2`. This makes sense, since by default, all paginated queries start at page `1`. `rel="last"` provides some more information, stating that the last page of results is on `page 34`. Accordingly, we have 33 more pages of information that we can consume.
// ## Parameters
// Many API methods take optional parameters:
//
//	GET /individuals/1234/addresses/?addressType='Mailing'
//
// In this example, the '1234' value is provided for the `:partyId` parameter in the path while `:addressType` is passed in the query string.
// For POST, PATCH, PUT, and DELETE requests, parameters not included in the URL should be encoded as JSON with a Content-Type of 'application/json'.
// ## Metadata
// The API provides **metadata services** that you can use to discover information about the classifcation schemes and values used by the Registry.
//
//	For example:
//
//	  GET /classifications/roles
//
//	Sample response:
//
//	  [
//	    {
//	      "id": "123e4567-e89b-12d3-a456-426655440001",
//	      "role": "Director",
//	      "roleDescription": "An individual responsible for managing a company's ...",
//	      "relationship": "Directorship",
//	      "reciprocalRole": "Company",
//	      "reciprocalRoleDescription": "An incorporated legal entity."
//	    },
//	    {
//	      ...
//	    }
//	  ]
//
// ## Root Endpoint
// You can issue a GET request to the root endpoint (also known as the service root) to get all the endpoint categories that the REST API supports:
//
//	curl https://api.abr.ato.gov.au
//
// ## Authentication
// The Business Registries API supports API Key authentication.
//
//	When you sign up for an account, you are given your first API key. You can generate additional API keys, and delete
//	API keys (as you may need to rotate your keys in the future). You authenticate to the Business Registries API by
//	providing your secret key in the request header.
//
//	**Note:** Some requests will return `404 Not Found`, instead of `403 Permission Denied`. This is to prevent the
//	accidental leakage of information to unauthorised users.
type SDK struct {
	// AddressTypes - A classification scheme for addresses.
	//
	AddressTypes *addressTypes
	// BusinessNameLifecycleStates - A classification scheme for business names.
	//
	BusinessNameLifecycleStates *businessNameLifecycleStates
	// BusinessNames - A business name is a name or title under which a person or organisation conducts a business.
	//
	BusinessNames *businessNames
	// ElectronicAddressTypes - A classification scheme for electronic addresses.
	//
	ElectronicAddressTypes *electronicAddressTypes
	// Genders - A classification scheme for the representation of human sexes.
	//
	Genders *genders
	// Individuals - An individual is a person about whom the registry wishes to maintain information.
	//
	//   For example, the individual's date and place of birth (for the purposes of identification) and the individual's
	//   residential address (which is used for administrative purposes).
	//
	Individuals *individuals
	// IndividualsAddresses - The registry maintains information about an individual's contact details for administrative purposes.
	//
	//   Including:
	//   - an address for the service of documents
	//   - a principal place of business address
	//
	IndividualsAddresses *individualsAddresses
	// IndividualsBusinessNames - A business name is a name or title under which a person conducts a business.
	//
	IndividualsBusinessNames *individualsBusinessNames
	// IndividualsElectronicAddresses - The registry maintains information about an individual's contact details for administrative purposes.
	//
	//   Including:
	//   - an email address
	//   - a mobile number
	//
	IndividualsElectronicAddresses *individualsElectronicAddresses
	// IndividualsLicenses - If you carry on a business you may need to hold a licence.
	//
	//   For example, if you provide financial services, you are required to hold an Australian Financial
	//   Services (AFS) licence.
	//
	IndividualsLicenses *individualsLicenses
	// IndividualsRoles - A role defines the characteristics of a relationship between parties.
	// An Individual can participate in a relationship with other individuals and organisations.
	//
	// For example:
	//
	// | Party         | Role           | Relationship     | Role          | Party                           |
	// | ------------- | -------------- | ---------------- | ------------- | ------------------------------- |
	// | Homer Simpson | Husband        | Marriage         | Wife          | Marge Simpson                   |
	// | Homer Simpson | Employee       | Employment       | Employer      | Springfield Nuclear Power Plant |
	// | Homer Simpson | Safety Officer | Colleague        | Supervisor    | Carl Carlson                    |
	// | Homer Simpson | Director       | Directorship     | Company       | Compu Global Hyper Mega Net     |
	// | Homer Simpson | Employee       | Employment       | Employer      | Compu Global Hyper Mega Net     |
	// | Homer Simpson | Member         | Membership       | Organisation  | The Stonecutters                |
	// | Homer Simpson | Partner        | Partnership      | Partnership   | The Be Sharps                   |
	// | Homer Simpson | Trustee        | Trusteeship      | Trust         | The Simpson Family Trust        |
	// | Homer Simpson | Member         | Membership       | Association   | Mensa International             |
	//
	// You can use the API's **metadata services** to retrieve information about the classifcation schemes and
	// values used by the Registry.
	//
	IndividualsRoles *individualsRoles
	// LegalEntityTypes - A classification scheme for parties (individuals and organisations).
	//
	LegalEntityTypes *legalEntityTypes
	// LicenseLifecycleStates - A classification scheme for licenses.
	//
	LicenseLifecycleStates *licenseLifecycleStates
	// LicenseTypes - A classification scheme for licenses.
	//
	LicenseTypes *licenseTypes
	// Licenses - If you carry on a business you may need to hold a licence.
	//
	//   For example, if you provide financial services, you are required to hold an Australian Financial
	//   Services (AFS) licence.
	//
	Licenses *licenses
	// NameDirections - A classification scheme for names.
	//
	NameDirections *nameDirections
	// NamePrefixes - A classification scheme for names.
	//
	NamePrefixes *namePrefixes
	// NameTypes - A classification scheme for names.
	//
	NameTypes *nameTypes
	// Organisations - An organisation usually consists of a number of individuals or groups bound by a common purpose about whom the
	// registry wishes to maintain information.
	//
	//   For example, the organisation's legal entity type (e.g., Incorporated Entity, Unincorporated Entity,
	//   Partnership or Joint Venture).
	//
	Organisations *organisations
	// OrganisationsAddresses - The registry maintains information about an organisation's contact details for administrative purposes.
	//
	//   Including:
	//   - an address for the service of documents
	//   - a principal place of business address
	//
	OrganisationsAddresses *organisationsAddresses
	// OrganisationsBusinessNames - A business name is a name or title under which an organisation conducts a business.
	//
	OrganisationsBusinessNames *organisationsBusinessNames
	// OrganisationsElectronicAddresses - The registry maintains information about an organisation's contact details for administrative purposes.
	//
	//   Including:
	//   - an email address
	//   - a mobile number
	//
	OrganisationsElectronicAddresses *organisationsElectronicAddresses
	// OrganisationsLicenses - If you carry on a business you may need to hold a licence.
	//
	//   For example, if you provide financial services, you are required to hold an Australian Financial
	//   Services (AFS) licence.
	//
	OrganisationsLicenses *organisationsLicenses
	// OrganisationsRoles - A role defines the characteristics of a relationship between parties.
	// An Organisation can participate in a relationship with other organisations and indiviuals.
	//
	// For example:
	//
	// | Party                           | Role     | Relationship | Role         | Party             |
	// | ------------------------------- | -------- | -------------| ------------ | ----------------- |
	// | Springfield Nuclear Power Plant | Employer | Employment   | Employee     | Homer Simpson     |
	// | Springfield Nuclear Power Plant | Company  | Directorship | Director     | Mr Burns          |
	// | Springfield Nuclear Power Plant | Employer | Employment   | Employee     | Mr Burns          |
	// | Springfield Nuclear Power Plant | Sponsor  | Sponsorship  | Organisation | The Stonecutters  |
	//
	// You can use the API's **metadata services** to retrieve information about the classifcation schemes and
	// values used by the Registry.
	//
	OrganisationsRoles *organisationsRoles
	// RegisteredIdentifierTypes - A classification scheme for registered identifiers.
	//
	RegisteredIdentifierTypes *registeredIdentifierTypes
	// Roles - A classification scheme for the characteristics of relationships between parties (individuals and organisations).
	//
	Roles *roles

	// Non-idiomatic field names below are to namespace fields from the fields names above to avoid name conflicts
	_defaultClient  HTTPClient
	_securityClient HTTPClient

	_serverURL  string
	_language   string
	_sdkVersion string
	_genVersion string
}

type SDKOption func(*SDK)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *SDK) {
		sdk._serverURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *SDK) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk._serverURL = serverURL
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *SDK) {
		sdk._defaultClient = client
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *SDK {
	sdk := &SDK{
		_language:   "go",
		_sdkVersion: "0.0.1",
		_genVersion: "internal",
	}
	for _, opt := range opts {
		opt(sdk)
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk._defaultClient == nil {
		sdk._defaultClient = &http.Client{Timeout: 60 * time.Second}
	}
	if sdk._securityClient == nil {
		sdk._securityClient = sdk._defaultClient
	}

	if sdk._serverURL == "" {
		sdk._serverURL = ServerList[0]
	}

	sdk.AddressTypes = newAddressTypes(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.BusinessNameLifecycleStates = newBusinessNameLifecycleStates(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.BusinessNames = newBusinessNames(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.ElectronicAddressTypes = newElectronicAddressTypes(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Genders = newGenders(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Individuals = newIndividuals(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.IndividualsAddresses = newIndividualsAddresses(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.IndividualsBusinessNames = newIndividualsBusinessNames(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.IndividualsElectronicAddresses = newIndividualsElectronicAddresses(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.IndividualsLicenses = newIndividualsLicenses(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.IndividualsRoles = newIndividualsRoles(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.LegalEntityTypes = newLegalEntityTypes(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.LicenseLifecycleStates = newLicenseLifecycleStates(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.LicenseTypes = newLicenseTypes(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Licenses = newLicenses(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.NameDirections = newNameDirections(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.NamePrefixes = newNamePrefixes(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.NameTypes = newNameTypes(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Organisations = newOrganisations(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.OrganisationsAddresses = newOrganisationsAddresses(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.OrganisationsBusinessNames = newOrganisationsBusinessNames(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.OrganisationsElectronicAddresses = newOrganisationsElectronicAddresses(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.OrganisationsLicenses = newOrganisationsLicenses(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.OrganisationsRoles = newOrganisationsRoles(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.RegisteredIdentifierTypes = newRegisteredIdentifierTypes(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Roles = newRoles(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	return sdk
}
