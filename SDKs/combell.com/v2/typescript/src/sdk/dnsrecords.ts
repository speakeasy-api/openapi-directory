/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Manage the dns records for a domain name.<p>The interface allows you to manage following records: A, CNAME, MX, SRV, ALIAS and TXT.
 */
export class DNSRecords {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete a record
   */
  deleteDnsDomainNameRecordsRecordId(
    req: operations.DeleteDnsDomainNameRecordsRecordIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteDnsDomainNameRecordsRecordIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteDnsDomainNameRecordsRecordIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/dns/{domainName}/records/{recordId}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteDnsDomainNameRecordsRecordIdResponse =
        new operations.DeleteDnsDomainNameRecordsRecordIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Get records
   */
  getDnsDomainNameRecords(
    req: operations.GetDnsDomainNameRecordsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDnsDomainNameRecordsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDnsDomainNameRecordsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/dns/{domainName}/records",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDnsDomainNameRecordsResponse =
        new operations.GetDnsDomainNameRecordsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dnsRecords = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.dnsRecords = utils.objectToClass(
              httpRes?.data,
              shared.DnsRecord,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get specific record
   */
  getDnsDomainNameRecordsRecordId(
    req: operations.GetDnsDomainNameRecordsRecordIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDnsDomainNameRecordsRecordIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDnsDomainNameRecordsRecordIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/dns/{domainName}/records/{recordId}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDnsDomainNameRecordsRecordIdResponse =
        new operations.GetDnsDomainNameRecordsRecordIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dnsRecord = utils.objectToClass(
              httpRes?.data,
              shared.DnsRecord
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a record
   */
  postDnsDomainNameRecords(
    req: operations.PostDnsDomainNameRecordsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostDnsDomainNameRecordsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostDnsDomainNameRecordsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/dns/{domainName}/records",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "dnsRecord",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostDnsDomainNameRecordsResponse =
        new operations.PostDnsDomainNameRecordsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 201:
          break;
      }

      return res;
    });
  }

  /**
   * Edit a record
   */
  putDnsDomainNameRecordsRecordId(
    req: operations.PutDnsDomainNameRecordsRecordIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutDnsDomainNameRecordsRecordIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutDnsDomainNameRecordsRecordIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/dns/{domainName}/records/{recordId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "dnsRecord",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutDnsDomainNameRecordsRecordIdResponse =
        new operations.PutDnsDomainNameRecordsRecordIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }
}
