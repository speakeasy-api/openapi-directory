<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class UpdateParticipantUpdateParticipantRequest
{
    /**
     * The HTTP method we should use to call `announce_url`. Can be: `GET` or `POST` and defaults to `POST`.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\UpdateParticipantUpdateParticipantRequestAnnounceMethodEnum $announceMethod
     */
	#[SpeakeasyMetadata('form:name=AnnounceMethod')]
    public ?UpdateParticipantUpdateParticipantRequestAnnounceMethodEnum $announceMethod = null;
    
    /**
     * The URL we call using the `announce_method` for an announcement to the participant. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.
     * 
     * @var ?string $announceUrl
     */
	#[SpeakeasyMetadata('form:name=AnnounceUrl')]
    public ?string $announceUrl = null;
    
    /**
     * Whether to play a notification beep to the conference when the participant exits. Can be: `true` or `false`.
     * 
     * @var ?bool $beepOnExit
     */
	#[SpeakeasyMetadata('form:name=BeepOnExit')]
    public ?bool $beepOnExit = null;
    
    /**
     * The SID of the participant who is being `coached`. The participant being coached is the only participant who can hear the participant who is `coaching`.
     * 
     * @var ?string $callSidToCoach
     */
	#[SpeakeasyMetadata('form:name=CallSidToCoach')]
    public ?string $callSidToCoach = null;
    
    /**
     * Whether the participant is coaching another call. Can be: `true` or `false`. If not present, defaults to `false` unless `call_sid_to_coach` is defined. If `true`, `call_sid_to_coach` must be defined.
     * 
     * @var ?bool $coaching
     */
	#[SpeakeasyMetadata('form:name=Coaching')]
    public ?bool $coaching = null;
    
    /**
     * Whether to end the conference when the participant leaves. Can be: `true` or `false` and defaults to `false`.
     * 
     * @var ?bool $endConferenceOnExit
     */
	#[SpeakeasyMetadata('form:name=EndConferenceOnExit')]
    public ?bool $endConferenceOnExit = null;
    
    /**
     * Whether the participant should be on hold. Can be: `true` or `false`. `true` puts the participant on hold, and `false` lets them rejoin the conference.
     * 
     * @var ?bool $hold
     */
	#[SpeakeasyMetadata('form:name=Hold')]
    public ?bool $hold = null;
    
    /**
     * The HTTP method we should use to call `hold_url`. Can be: `GET` or `POST` and the default is `GET`.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\UpdateParticipantUpdateParticipantRequestHoldMethodEnum $holdMethod
     */
	#[SpeakeasyMetadata('form:name=HoldMethod')]
    public ?UpdateParticipantUpdateParticipantRequestHoldMethodEnum $holdMethod = null;
    
    /**
     * The URL we call using the `hold_method` for music that plays when the participant is on hold. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.
     * 
     * @var ?string $holdUrl
     */
	#[SpeakeasyMetadata('form:name=HoldUrl')]
    public ?string $holdUrl = null;
    
    /**
     * Whether the participant should be muted. Can be `true` or `false`. `true` will mute the participant, and `false` will un-mute them. Anything value other than `true` or `false` is interpreted as `false`.
     * 
     * @var ?bool $muted
     */
	#[SpeakeasyMetadata('form:name=Muted')]
    public ?bool $muted = null;
    
    /**
     * The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\UpdateParticipantUpdateParticipantRequestWaitMethodEnum $waitMethod
     */
	#[SpeakeasyMetadata('form:name=WaitMethod')]
    public ?UpdateParticipantUpdateParticipantRequestWaitMethodEnum $waitMethod = null;
    
    /**
     * The URL we call using the `wait_method` for the music to play while participants are waiting for the conference to start. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).
     * 
     * @var ?string $waitUrl
     */
	#[SpeakeasyMetadata('form:name=WaitUrl')]
    public ?string $waitUrl = null;
    
	public function __construct()
	{
		$this->announceMethod = null;
		$this->announceUrl = null;
		$this->beepOnExit = null;
		$this->callSidToCoach = null;
		$this->coaching = null;
		$this->endConferenceOnExit = null;
		$this->hold = null;
		$this->holdMethod = null;
		$this->holdUrl = null;
		$this->muted = null;
		$this->waitMethod = null;
		$this->waitUrl = null;
	}
}
