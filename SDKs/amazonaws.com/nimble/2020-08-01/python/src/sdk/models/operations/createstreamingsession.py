"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import createstreamingsessionresponse as shared_createstreamingsessionresponse
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class CreateStreamingSessionRequestBodyEc2InstanceTypeEnum(str, Enum):
    r"""The EC2 Instance type used for the streaming session."""
    G4DN_XLARGE = 'g4dn.xlarge'
    G4DN_2XLARGE = 'g4dn.2xlarge'
    G4DN_4XLARGE = 'g4dn.4xlarge'
    G4DN_8XLARGE = 'g4dn.8xlarge'
    G4DN_12XLARGE = 'g4dn.12xlarge'
    G4DN_16XLARGE = 'g4dn.16xlarge'
    G3_4XLARGE = 'g3.4xlarge'
    G3S_XLARGE = 'g3s.xlarge'
    G5_XLARGE = 'g5.xlarge'
    G5_2XLARGE = 'g5.2xlarge'
    G5_4XLARGE = 'g5.4xlarge'
    G5_8XLARGE = 'g5.8xlarge'
    G5_16XLARGE = 'g5.16xlarge'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateStreamingSessionRequestBody:
    
    launch_profile_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('launchProfileId') }})
    r"""The ID of the launch profile used to control access from the streaming session."""  
    ec2_instance_type: Optional[CreateStreamingSessionRequestBodyEc2InstanceTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ec2InstanceType'), 'exclude': lambda f: f is None }})
    r"""The EC2 Instance type used for the streaming session."""  
    owned_by: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ownedBy'), 'exclude': lambda f: f is None }})
    r"""The user ID of the user that owns the streaming session. The user that owns the session will be logging into the session and interacting with the virtual workstation."""  
    streaming_image_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('streamingImageId'), 'exclude': lambda f: f is None }})
    r"""The ID of the streaming image."""  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""A collection of labels, in the form of key-value pairs, that apply to this resource."""  
    

@dataclasses.dataclass
class CreateStreamingSessionRequest:
    
    request_body: CreateStreamingSessionRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    studio_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'studioId', 'style': 'simple', 'explode': False }})
    r"""The studio ID."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_client_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Client-Token', 'style': 'simple', 'explode': False }})
    r"""Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you donâ€™t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency."""  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateStreamingSessionResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictException"""  
    create_streaming_session_response: Optional[shared_createstreamingsessionresponse.CreateStreamingSessionResponse] = dataclasses.field(default=None)
    r"""Success"""  
    internal_server_error_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerErrorException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    service_quota_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceQuotaExceededException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    