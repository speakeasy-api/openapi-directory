/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * MediaV1MediaProcessor - Created
 */
public class MediaV1MediaProcessor {
    /**
     * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the MediaProcessor resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_sid")
    public String accountSid;

    public MediaV1MediaProcessor withAccountSid(String accountSid) {
        this.accountSid = accountSid;
        return this;
    }
    
    /**
     * The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date_created")
    public OffsetDateTime dateCreated;

    public MediaV1MediaProcessor withDateCreated(OffsetDateTime dateCreated) {
        this.dateCreated = dateCreated;
        return this;
    }
    
    /**
     * The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date_updated")
    public OffsetDateTime dateUpdated;

    public MediaV1MediaProcessor withDateUpdated(OffsetDateTime dateUpdated) {
        this.dateUpdated = dateUpdated;
        return this;
    }
    
    /**
     * The reason why a MediaProcessor ended. When a MediaProcessor is in progress, will be `null`. When a MediaProcessor is completed, can be `ended-via-api`, `max-duration-exceeded`, `error-loading-extension`, `error-streaming-media` or `internal-service-error`. See [ended reasons](/docs/live/api/mediaprocessors#mediaprocessor-ended-reason-values) for more details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ended_reason")
    public String endedReason;

    public MediaV1MediaProcessor withEndedReason(String endedReason) {
        this.endedReason = endedReason;
        return this;
    }
    
    /**
     * The [Media Extension](/docs/live/api/media-extensions-overview) name or URL. Ex: `video-composer-v2`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("extension")
    public String extension;

    public MediaV1MediaProcessor withExtension(String extension) {
        this.extension = extension;
        return this;
    }
    
    /**
     * The context of the Media Extension, represented as a JSON dictionary. See the documentation for the specific [Media Extension](/docs/live/api/media-extensions-overview) you are using for more information about the context to send.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("extension_context")
    public String extensionContext;

    public MediaV1MediaProcessor withExtensionContext(String extensionContext) {
        this.extensionContext = extensionContext;
        return this;
    }
    
    /**
     * The maximum time, in seconds, that the MediaProcessor can run before automatically ends. The default value is 300 seconds, and the maximum value is 90000 seconds. Once this maximum duration is reached, Twilio will end the MediaProcessor, regardless of whether media is still streaming.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_duration")
    public Long maxDuration;

    public MediaV1MediaProcessor withMaxDuration(Long maxDuration) {
        this.maxDuration = maxDuration;
        return this;
    }
    
    /**
     * The unique string generated to identify the MediaProcessor resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sid")
    public String sid;

    public MediaV1MediaProcessor withSid(String sid) {
        this.sid = sid;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public MediaProcessorEnumStatusEnum status;

    public MediaV1MediaProcessor withStatus(MediaProcessorEnumStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * The URL to which Twilio will send asynchronous webhook requests for every MediaProcessor event. See [Status Callbacks](/docs/live/status-callbacks) for details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status_callback")
    public String statusCallback;

    public MediaV1MediaProcessor withStatusCallback(String statusCallback) {
        this.statusCallback = statusCallback;
        return this;
    }
    
    /**
     * The HTTP method Twilio should use to call the `status_callback` URL. Can be `POST` or `GET` and the default is `POST`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status_callback_method")
    public MediaV1MediaProcessorStatusCallbackMethodEnum statusCallbackMethod;

    public MediaV1MediaProcessor withStatusCallbackMethod(MediaV1MediaProcessorStatusCallbackMethodEnum statusCallbackMethod) {
        this.statusCallbackMethod = statusCallbackMethod;
        return this;
    }
    
    /**
     * The absolute URL of the resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;

    public MediaV1MediaProcessor withUrl(String url) {
        this.url = url;
        return this;
    }
    
    public MediaV1MediaProcessor(){}
}
