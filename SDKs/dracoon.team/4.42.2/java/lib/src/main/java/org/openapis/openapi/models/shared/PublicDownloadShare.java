/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * PublicDownloadShare - Download Share information
 */
public class PublicDownloadShare {
    /**
     * Creation date
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("createdAt")
    public OffsetDateTime createdAt;
    public PublicDownloadShare withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * Creator name
     */
    @JsonProperty("creatorName")
    public String creatorName;
    public PublicDownloadShare withCreatorName(String creatorName) {
        this.creatorName = creatorName;
        return this;
    }
    
    /**
     * Creator username
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creatorUsername")
    public String creatorUsername;
    public PublicDownloadShare withCreatorUsername(String creatorUsername) {
        this.creatorUsername = creatorUsername;
        return this;
    }
    
    /**
     * Expiration date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("expireAt")
    public OffsetDateTime expireAt;
    public PublicDownloadShare withExpireAt(OffsetDateTime expireAt) {
        this.expireAt = expireAt;
        return this;
    }
    
    /**
     * File key information
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fileKey")
    public FileKey fileKey;
    public PublicDownloadShare withFileKey(FileKey fileKey) {
        this.fileKey = fileKey;
        return this;
    }
    
    /**
     * File name
     */
    @JsonProperty("fileName")
    public String fileName;
    public PublicDownloadShare withFileName(String fileName) {
        this.fileName = fileName;
        return this;
    }
    
    /**
     * &amp;#128640; Since v4.11.0
     * 
     * Determines whether Download Share has a limit for amount of downloads
     */
    @JsonProperty("hasDownloadLimit")
    public Boolean hasDownloadLimit;
    public PublicDownloadShare withHasDownloadLimit(Boolean hasDownloadLimit) {
        this.hasDownloadLimit = hasDownloadLimit;
        return this;
    }
    
    /**
     * Encryption state
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isEncrypted")
    public Boolean isEncrypted;
    public PublicDownloadShare withIsEncrypted(Boolean isEncrypted) {
        this.isEncrypted = isEncrypted;
        return this;
    }
    
    /**
     * Is share protected by password
     */
    @JsonProperty("isProtected")
    public Boolean isProtected;
    public PublicDownloadShare withIsProtected(Boolean isProtected) {
        this.isProtected = isProtected;
        return this;
    }
    
    /**
     * Downloads limit reached
     */
    @JsonProperty("limitReached")
    public Boolean limitReached;
    public PublicDownloadShare withLimitReached(Boolean limitReached) {
        this.limitReached = limitReached;
        return this;
    }
    
    /**
     * &amp;#128640; Since v4.11.0
     * 
     * * `application/zip` (for folders and rooms)
     * 
     * * actual file media type (for files only)
     */
    @JsonProperty("mediaType")
    public String mediaType;
    public PublicDownloadShare withMediaType(String mediaType) {
        this.mediaType = mediaType;
        return this;
    }
    
    /**
     * Share display name (alias name)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public PublicDownloadShare withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * User notes
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    public String notes;
    public PublicDownloadShare withNotes(String notes) {
        this.notes = notes;
        return this;
    }
    
    /**
     * Private key container
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("privateKeyContainer")
    public PrivateKeyContainer privateKeyContainer;
    public PublicDownloadShare withPrivateKeyContainer(PrivateKeyContainer privateKeyContainer) {
        this.privateKeyContainer = privateKeyContainer;
        return this;
    }
    
    /**
     * File size or container size not compressed (in bytes)
     */
    @JsonProperty("size")
    public Long size;
    public PublicDownloadShare withSize(Long size) {
        this.size = size;
        return this;
    }
    
}
