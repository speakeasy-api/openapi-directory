// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// DescribeInstanceStatusResultInstanceStatusesEventsCodeEnum - The event code.
type DescribeInstanceStatusResultInstanceStatusesEventsCodeEnum string

const (
	DescribeInstanceStatusResultInstanceStatusesEventsCodeEnumInstanceReboot     DescribeInstanceStatusResultInstanceStatusesEventsCodeEnum = "instance-reboot"
	DescribeInstanceStatusResultInstanceStatusesEventsCodeEnumSystemReboot       DescribeInstanceStatusResultInstanceStatusesEventsCodeEnum = "system-reboot"
	DescribeInstanceStatusResultInstanceStatusesEventsCodeEnumSystemMaintenance  DescribeInstanceStatusResultInstanceStatusesEventsCodeEnum = "system-maintenance"
	DescribeInstanceStatusResultInstanceStatusesEventsCodeEnumInstanceRetirement DescribeInstanceStatusResultInstanceStatusesEventsCodeEnum = "instance-retirement"
	DescribeInstanceStatusResultInstanceStatusesEventsCodeEnumInstanceStop       DescribeInstanceStatusResultInstanceStatusesEventsCodeEnum = "instance-stop"
)

func (e DescribeInstanceStatusResultInstanceStatusesEventsCodeEnum) ToPointer() *DescribeInstanceStatusResultInstanceStatusesEventsCodeEnum {
	return &e
}

func (e *DescribeInstanceStatusResultInstanceStatusesEventsCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "instance-reboot":
		fallthrough
	case "system-reboot":
		fallthrough
	case "system-maintenance":
		fallthrough
	case "instance-retirement":
		fallthrough
	case "instance-stop":
		*e = DescribeInstanceStatusResultInstanceStatusesEventsCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeInstanceStatusResultInstanceStatusesEventsCodeEnum: %v", v)
	}
}

// DescribeInstanceStatusResultInstanceStatusesEvents - Describes a scheduled event for an instance.
type DescribeInstanceStatusResultInstanceStatusesEvents struct {
	Code              *DescribeInstanceStatusResultInstanceStatusesEventsCodeEnum
	Description       *string
	InstanceEventID   *string
	NotAfter          *time.Time
	NotBefore         *time.Time
	NotBeforeDeadline *time.Time
}

// DescribeInstanceStatusResultInstanceStatusesInstanceStateNameEnum - The current state of the instance.
type DescribeInstanceStatusResultInstanceStatusesInstanceStateNameEnum string

const (
	DescribeInstanceStatusResultInstanceStatusesInstanceStateNameEnumPending      DescribeInstanceStatusResultInstanceStatusesInstanceStateNameEnum = "pending"
	DescribeInstanceStatusResultInstanceStatusesInstanceStateNameEnumRunning      DescribeInstanceStatusResultInstanceStatusesInstanceStateNameEnum = "running"
	DescribeInstanceStatusResultInstanceStatusesInstanceStateNameEnumShuttingDown DescribeInstanceStatusResultInstanceStatusesInstanceStateNameEnum = "shutting-down"
	DescribeInstanceStatusResultInstanceStatusesInstanceStateNameEnumTerminated   DescribeInstanceStatusResultInstanceStatusesInstanceStateNameEnum = "terminated"
	DescribeInstanceStatusResultInstanceStatusesInstanceStateNameEnumStopping     DescribeInstanceStatusResultInstanceStatusesInstanceStateNameEnum = "stopping"
	DescribeInstanceStatusResultInstanceStatusesInstanceStateNameEnumStopped      DescribeInstanceStatusResultInstanceStatusesInstanceStateNameEnum = "stopped"
)

func (e DescribeInstanceStatusResultInstanceStatusesInstanceStateNameEnum) ToPointer() *DescribeInstanceStatusResultInstanceStatusesInstanceStateNameEnum {
	return &e
}

func (e *DescribeInstanceStatusResultInstanceStatusesInstanceStateNameEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "running":
		fallthrough
	case "shutting-down":
		fallthrough
	case "terminated":
		fallthrough
	case "stopping":
		fallthrough
	case "stopped":
		*e = DescribeInstanceStatusResultInstanceStatusesInstanceStateNameEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeInstanceStatusResultInstanceStatusesInstanceStateNameEnum: %v", v)
	}
}

// DescribeInstanceStatusResultInstanceStatusesInstanceState - The intended state of the instance. <a>DescribeInstanceStatus</a> requires that an instance be in the <code>running</code> state.
type DescribeInstanceStatusResultInstanceStatusesInstanceState struct {
	Code *int64
	Name *DescribeInstanceStatusResultInstanceStatusesInstanceStateNameEnum
}

// DescribeInstanceStatusResultInstanceStatusesInstanceStatusDetailsNameEnum - The type of instance status.
type DescribeInstanceStatusResultInstanceStatusesInstanceStatusDetailsNameEnum string

const (
	DescribeInstanceStatusResultInstanceStatusesInstanceStatusDetailsNameEnumReachability DescribeInstanceStatusResultInstanceStatusesInstanceStatusDetailsNameEnum = "reachability"
)

func (e DescribeInstanceStatusResultInstanceStatusesInstanceStatusDetailsNameEnum) ToPointer() *DescribeInstanceStatusResultInstanceStatusesInstanceStatusDetailsNameEnum {
	return &e
}

func (e *DescribeInstanceStatusResultInstanceStatusesInstanceStatusDetailsNameEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "reachability":
		*e = DescribeInstanceStatusResultInstanceStatusesInstanceStatusDetailsNameEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeInstanceStatusResultInstanceStatusesInstanceStatusDetailsNameEnum: %v", v)
	}
}

// DescribeInstanceStatusResultInstanceStatusesInstanceStatusDetailsStatusEnum - The status.
type DescribeInstanceStatusResultInstanceStatusesInstanceStatusDetailsStatusEnum string

const (
	DescribeInstanceStatusResultInstanceStatusesInstanceStatusDetailsStatusEnumPassed           DescribeInstanceStatusResultInstanceStatusesInstanceStatusDetailsStatusEnum = "passed"
	DescribeInstanceStatusResultInstanceStatusesInstanceStatusDetailsStatusEnumFailed           DescribeInstanceStatusResultInstanceStatusesInstanceStatusDetailsStatusEnum = "failed"
	DescribeInstanceStatusResultInstanceStatusesInstanceStatusDetailsStatusEnumInsufficientData DescribeInstanceStatusResultInstanceStatusesInstanceStatusDetailsStatusEnum = "insufficient-data"
	DescribeInstanceStatusResultInstanceStatusesInstanceStatusDetailsStatusEnumInitializing     DescribeInstanceStatusResultInstanceStatusesInstanceStatusDetailsStatusEnum = "initializing"
)

func (e DescribeInstanceStatusResultInstanceStatusesInstanceStatusDetailsStatusEnum) ToPointer() *DescribeInstanceStatusResultInstanceStatusesInstanceStatusDetailsStatusEnum {
	return &e
}

func (e *DescribeInstanceStatusResultInstanceStatusesInstanceStatusDetailsStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "passed":
		fallthrough
	case "failed":
		fallthrough
	case "insufficient-data":
		fallthrough
	case "initializing":
		*e = DescribeInstanceStatusResultInstanceStatusesInstanceStatusDetailsStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeInstanceStatusResultInstanceStatusesInstanceStatusDetailsStatusEnum: %v", v)
	}
}

// DescribeInstanceStatusResultInstanceStatusesInstanceStatusDetails - Describes the instance status.
type DescribeInstanceStatusResultInstanceStatusesInstanceStatusDetails struct {
	ImpairedSince *time.Time
	Name          *DescribeInstanceStatusResultInstanceStatusesInstanceStatusDetailsNameEnum
	Status        *DescribeInstanceStatusResultInstanceStatusesInstanceStatusDetailsStatusEnum
}

// DescribeInstanceStatusResultInstanceStatusesInstanceStatusStatusEnum - The status.
type DescribeInstanceStatusResultInstanceStatusesInstanceStatusStatusEnum string

const (
	DescribeInstanceStatusResultInstanceStatusesInstanceStatusStatusEnumOk               DescribeInstanceStatusResultInstanceStatusesInstanceStatusStatusEnum = "ok"
	DescribeInstanceStatusResultInstanceStatusesInstanceStatusStatusEnumImpaired         DescribeInstanceStatusResultInstanceStatusesInstanceStatusStatusEnum = "impaired"
	DescribeInstanceStatusResultInstanceStatusesInstanceStatusStatusEnumInsufficientData DescribeInstanceStatusResultInstanceStatusesInstanceStatusStatusEnum = "insufficient-data"
	DescribeInstanceStatusResultInstanceStatusesInstanceStatusStatusEnumNotApplicable    DescribeInstanceStatusResultInstanceStatusesInstanceStatusStatusEnum = "not-applicable"
	DescribeInstanceStatusResultInstanceStatusesInstanceStatusStatusEnumInitializing     DescribeInstanceStatusResultInstanceStatusesInstanceStatusStatusEnum = "initializing"
)

func (e DescribeInstanceStatusResultInstanceStatusesInstanceStatusStatusEnum) ToPointer() *DescribeInstanceStatusResultInstanceStatusesInstanceStatusStatusEnum {
	return &e
}

func (e *DescribeInstanceStatusResultInstanceStatusesInstanceStatusStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ok":
		fallthrough
	case "impaired":
		fallthrough
	case "insufficient-data":
		fallthrough
	case "not-applicable":
		fallthrough
	case "initializing":
		*e = DescribeInstanceStatusResultInstanceStatusesInstanceStatusStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeInstanceStatusResultInstanceStatusesInstanceStatusStatusEnum: %v", v)
	}
}

// DescribeInstanceStatusResultInstanceStatusesInstanceStatus - Reports impaired functionality that stems from issues internal to the instance, such as impaired reachability.
type DescribeInstanceStatusResultInstanceStatusesInstanceStatus struct {
	Details []DescribeInstanceStatusResultInstanceStatusesInstanceStatusDetails
	Status  *DescribeInstanceStatusResultInstanceStatusesInstanceStatusStatusEnum
}

// DescribeInstanceStatusResultInstanceStatusesSystemStatusDetailsNameEnum - The type of instance status.
type DescribeInstanceStatusResultInstanceStatusesSystemStatusDetailsNameEnum string

const (
	DescribeInstanceStatusResultInstanceStatusesSystemStatusDetailsNameEnumReachability DescribeInstanceStatusResultInstanceStatusesSystemStatusDetailsNameEnum = "reachability"
)

func (e DescribeInstanceStatusResultInstanceStatusesSystemStatusDetailsNameEnum) ToPointer() *DescribeInstanceStatusResultInstanceStatusesSystemStatusDetailsNameEnum {
	return &e
}

func (e *DescribeInstanceStatusResultInstanceStatusesSystemStatusDetailsNameEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "reachability":
		*e = DescribeInstanceStatusResultInstanceStatusesSystemStatusDetailsNameEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeInstanceStatusResultInstanceStatusesSystemStatusDetailsNameEnum: %v", v)
	}
}

// DescribeInstanceStatusResultInstanceStatusesSystemStatusDetailsStatusEnum - The status.
type DescribeInstanceStatusResultInstanceStatusesSystemStatusDetailsStatusEnum string

const (
	DescribeInstanceStatusResultInstanceStatusesSystemStatusDetailsStatusEnumPassed           DescribeInstanceStatusResultInstanceStatusesSystemStatusDetailsStatusEnum = "passed"
	DescribeInstanceStatusResultInstanceStatusesSystemStatusDetailsStatusEnumFailed           DescribeInstanceStatusResultInstanceStatusesSystemStatusDetailsStatusEnum = "failed"
	DescribeInstanceStatusResultInstanceStatusesSystemStatusDetailsStatusEnumInsufficientData DescribeInstanceStatusResultInstanceStatusesSystemStatusDetailsStatusEnum = "insufficient-data"
	DescribeInstanceStatusResultInstanceStatusesSystemStatusDetailsStatusEnumInitializing     DescribeInstanceStatusResultInstanceStatusesSystemStatusDetailsStatusEnum = "initializing"
)

func (e DescribeInstanceStatusResultInstanceStatusesSystemStatusDetailsStatusEnum) ToPointer() *DescribeInstanceStatusResultInstanceStatusesSystemStatusDetailsStatusEnum {
	return &e
}

func (e *DescribeInstanceStatusResultInstanceStatusesSystemStatusDetailsStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "passed":
		fallthrough
	case "failed":
		fallthrough
	case "insufficient-data":
		fallthrough
	case "initializing":
		*e = DescribeInstanceStatusResultInstanceStatusesSystemStatusDetailsStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeInstanceStatusResultInstanceStatusesSystemStatusDetailsStatusEnum: %v", v)
	}
}

// DescribeInstanceStatusResultInstanceStatusesSystemStatusDetails - Describes the instance status.
type DescribeInstanceStatusResultInstanceStatusesSystemStatusDetails struct {
	ImpairedSince *time.Time
	Name          *DescribeInstanceStatusResultInstanceStatusesSystemStatusDetailsNameEnum
	Status        *DescribeInstanceStatusResultInstanceStatusesSystemStatusDetailsStatusEnum
}

// DescribeInstanceStatusResultInstanceStatusesSystemStatusStatusEnum - The status.
type DescribeInstanceStatusResultInstanceStatusesSystemStatusStatusEnum string

const (
	DescribeInstanceStatusResultInstanceStatusesSystemStatusStatusEnumOk               DescribeInstanceStatusResultInstanceStatusesSystemStatusStatusEnum = "ok"
	DescribeInstanceStatusResultInstanceStatusesSystemStatusStatusEnumImpaired         DescribeInstanceStatusResultInstanceStatusesSystemStatusStatusEnum = "impaired"
	DescribeInstanceStatusResultInstanceStatusesSystemStatusStatusEnumInsufficientData DescribeInstanceStatusResultInstanceStatusesSystemStatusStatusEnum = "insufficient-data"
	DescribeInstanceStatusResultInstanceStatusesSystemStatusStatusEnumNotApplicable    DescribeInstanceStatusResultInstanceStatusesSystemStatusStatusEnum = "not-applicable"
	DescribeInstanceStatusResultInstanceStatusesSystemStatusStatusEnumInitializing     DescribeInstanceStatusResultInstanceStatusesSystemStatusStatusEnum = "initializing"
)

func (e DescribeInstanceStatusResultInstanceStatusesSystemStatusStatusEnum) ToPointer() *DescribeInstanceStatusResultInstanceStatusesSystemStatusStatusEnum {
	return &e
}

func (e *DescribeInstanceStatusResultInstanceStatusesSystemStatusStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ok":
		fallthrough
	case "impaired":
		fallthrough
	case "insufficient-data":
		fallthrough
	case "not-applicable":
		fallthrough
	case "initializing":
		*e = DescribeInstanceStatusResultInstanceStatusesSystemStatusStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeInstanceStatusResultInstanceStatusesSystemStatusStatusEnum: %v", v)
	}
}

// DescribeInstanceStatusResultInstanceStatusesSystemStatus - Reports impaired functionality that stems from issues related to the systems that support an instance, such as hardware failures and network connectivity problems.
type DescribeInstanceStatusResultInstanceStatusesSystemStatus struct {
	Details []DescribeInstanceStatusResultInstanceStatusesSystemStatusDetails
	Status  *DescribeInstanceStatusResultInstanceStatusesSystemStatusStatusEnum
}

// DescribeInstanceStatusResultInstanceStatuses - Describes the status of an instance.
type DescribeInstanceStatusResultInstanceStatuses struct {
	AvailabilityZone *string
	Events           []DescribeInstanceStatusResultInstanceStatusesEvents
	InstanceID       *string
	InstanceState    *DescribeInstanceStatusResultInstanceStatusesInstanceState
	InstanceStatus   *DescribeInstanceStatusResultInstanceStatusesInstanceStatus
	OutpostArn       *string
	SystemStatus     *DescribeInstanceStatusResultInstanceStatusesSystemStatus
}

// DescribeInstanceStatusResult - Success
type DescribeInstanceStatusResult struct {
	InstanceStatuses []DescribeInstanceStatusResultInstanceStatuses
	NextToken        *string
}
