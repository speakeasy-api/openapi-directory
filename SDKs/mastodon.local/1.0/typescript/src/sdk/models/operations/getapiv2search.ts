/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class GetApiV2SearchSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=bearer;name=Authorization",
  })
  bearerAuth: string;
}

/**
 * Enum(accounts, hashtags, statuses)
 */
export enum GetApiV2SearchTypeEnum {
  Accounts = "accounts",
  Hashtags = "hashtags",
  Statuses = "statuses",
}

export class GetApiV2SearchRequest extends SpeakeasyBase {
  /**
   * If provided, statuses returned will be authored only by this account
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=account_id",
  })
  accountId?: string;

  /**
   * Filter out unreviewed tags? Defaults to false. Use true when trying to find trending tags.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=exclude_unreviewed",
  })
  excludeUnreviewed?: boolean;

  /**
   * Only who the user is following. Defaults to false.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=following",
  })
  following?: boolean;

  /**
   * Maximum number of results. Defaults to 40.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=limit" })
  limit?: number;

  /**
   * Return results older than this id
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=max_id",
  })
  maxId?: string;

  /**
   * Return results immediately newer than this id
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=min_id",
  })
  minId?: string;

  /**
   * Offset in search results. Used for pagination. Defaults to 0.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=offset",
  })
  offset?: number;

  /**
   * What to search for
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=q" })
  q: string;

  /**
   * Attempt WebFinger lookup.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=resolve",
  })
  resolve?: string;

  /**
   * Enum(accounts, hashtags, statuses)
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=type" })
  type?: GetApiV2SearchTypeEnum;
}

/**
 * Result
 */
export class GetApiV2Search200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: shared.Account })
  @Expose({ name: "accounts" })
  @Type(() => shared.Account)
  accounts?: shared.Account[];

  @SpeakeasyMetadata({ elemType: shared.Status })
  @Expose({ name: "hashtags" })
  @Type(() => shared.Status)
  hashtags?: shared.Status[];

  @SpeakeasyMetadata({ elemType: shared.Tag })
  @Expose({ name: "statuses" })
  @Type(() => shared.Tag)
  statuses?: shared.Tag[];
}

export class GetApiV2SearchResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Invalid or missing Authorization header
   */
  @SpeakeasyMetadata()
  error?: shared.ErrorT;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Result
   */
  @SpeakeasyMetadata()
  getApiV2Search200ApplicationJSONObject?: GetApiV2Search200ApplicationJSON;
}
