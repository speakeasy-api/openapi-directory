/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The registration configuration.
 */
export class UpdateCACertificateRequestBodyRegistrationConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "roleArn" })
  roleArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "templateBody" })
  templateBody?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "templateName" })
  templateName?: string;
}

export class UpdateCACertificateRequestBody extends SpeakeasyBase {
  /**
   * The registration configuration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "registrationConfig" })
  @Type(() => UpdateCACertificateRequestBodyRegistrationConfig)
  registrationConfig?: UpdateCACertificateRequestBodyRegistrationConfig;

  /**
   * If true, removes auto registration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "removeAutoRegistration" })
  removeAutoRegistration?: boolean;
}

/**
 * The new value for the auto registration status. Valid values are: "ENABLE" or "DISABLE".
 */
export enum UpdateCACertificateNewAutoRegistrationStatusEnum {
  Enable = "ENABLE",
  Disable = "DISABLE",
}

/**
 * <p>The updated status of the CA certificate.</p> <p> <b>Note:</b> The status value REGISTER_INACTIVE is deprecated and should not be used.</p>
 */
export enum UpdateCACertificateNewStatusEnum {
  Active = "ACTIVE",
  Inactive = "INACTIVE",
}

export class UpdateCACertificateRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateCACertificateRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The CA certificate identifier.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=caCertificateId",
  })
  caCertificateId: string;

  /**
   * The new value for the auto registration status. Valid values are: "ENABLE" or "DISABLE".
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=newAutoRegistrationStatus",
  })
  newAutoRegistrationStatus?: UpdateCACertificateNewAutoRegistrationStatusEnum;

  /**
   * <p>The updated status of the CA certificate.</p> <p> <b>Note:</b> The status value REGISTER_INACTIVE is deprecated and should not be used.</p>
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=newStatus",
  })
  newStatus?: UpdateCACertificateNewStatusEnum;
}

export class UpdateCACertificateResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalFailureException
   */
  @SpeakeasyMetadata()
  internalFailureException?: any;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ServiceUnavailableException
   */
  @SpeakeasyMetadata()
  serviceUnavailableException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * UnauthorizedException
   */
  @SpeakeasyMetadata()
  unauthorizedException?: any;
}
