/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ContextAttribute } from "./contextattribute";
import { DataSourceRestriction } from "./datasourcerestriction";
import { FacetOptions } from "./facetoptions";
import { QueryInterpretationOptions } from "./queryinterpretationoptions";
import { RequestOptions } from "./requestoptions";
import { SortOptions } from "./sortoptions";
import { Expose, Type } from "class-transformer";

/**
 * The search API request.
 */
export class SearchRequest extends SpeakeasyBase {
  /**
   * Context attributes for the request which will be used to adjust ranking of search results. The maximum number of elements is 10.
   */
  @SpeakeasyMetadata({ elemType: ContextAttribute })
  @Expose({ name: "contextAttributes" })
  @Type(() => ContextAttribute)
  contextAttributes?: ContextAttribute[];

  /**
   * The sources to use for querying. If not specified, all data sources from the current search application are used.
   */
  @SpeakeasyMetadata({ elemType: DataSourceRestriction })
  @Expose({ name: "dataSourceRestrictions" })
  @Type(() => DataSourceRestriction)
  dataSourceRestrictions?: DataSourceRestriction[];

  @SpeakeasyMetadata({ elemType: FacetOptions })
  @Expose({ name: "facetOptions" })
  @Type(() => FacetOptions)
  facetOptions?: FacetOptions[];

  /**
   * Maximum number of search results to return in one page. Valid values are between 1 and 100, inclusive. Default value is 10. Minimum value is 50 when results beyond 2000 are requested.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pageSize" })
  pageSize?: number;

  /**
   * The raw query string. See supported search operators in the [Narrow your search with operators](https://support.google.com/cloudsearch/answer/6172299)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "query" })
  query?: string;

  /**
   * Options to interpret user query.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "queryInterpretationOptions" })
  @Type(() => QueryInterpretationOptions)
  queryInterpretationOptions?: QueryInterpretationOptions;

  /**
   * Shared request options for all RPC methods.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "requestOptions" })
  @Type(() => RequestOptions)
  requestOptions?: RequestOptions;

  @SpeakeasyMetadata()
  @Expose({ name: "sortOptions" })
  @Type(() => SortOptions)
  sortOptions?: SortOptions;

  /**
   * Starting index of the results.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "start" })
  start?: number;
}
