// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type UDPRNResponseCodeEnum string

const (
	UDPRNResponseCodeEnumTwoThousand UDPRNResponseCodeEnum = "2000"
)

func (e *UDPRNResponseCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2000":
		*e = UDPRNResponseCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UDPRNResponseCodeEnum: %s", s)
	}
}

type UDPRNResponseMessageEnum string

const (
	UDPRNResponseMessageEnumSuccess UDPRNResponseMessageEnum = "Success"
)

func (e *UDPRNResponseMessageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Success":
		*e = UDPRNResponseMessageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UDPRNResponseMessageEnum: %s", s)
	}
}

type UDPRNResponseResultType string

const (
	UDPRNResponseResultTypePafAddress UDPRNResponseResultType = "PafAddress"
	UDPRNResponseResultTypeNybAddress UDPRNResponseResultType = "NybAddress"
)

type UDPRNResponseResult struct {
	PafAddress *PafAddress
	NybAddress *NybAddress

	Type UDPRNResponseResultType
}

func CreateUDPRNResponseResultPafAddress(pafAddress PafAddress) UDPRNResponseResult {
	typ := UDPRNResponseResultTypePafAddress

	return UDPRNResponseResult{
		PafAddress: &pafAddress,
		Type:       typ,
	}
}

func CreateUDPRNResponseResultNybAddress(nybAddress NybAddress) UDPRNResponseResult {
	typ := UDPRNResponseResultTypeNybAddress

	return UDPRNResponseResult{
		NybAddress: &nybAddress,
		Type:       typ,
	}
}

func (u *UDPRNResponseResult) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	pafAddress := new(PafAddress)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&pafAddress); err == nil {
		u.PafAddress = pafAddress
		u.Type = UDPRNResponseResultTypePafAddress
		return nil
	}

	nybAddress := new(NybAddress)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&nybAddress); err == nil {
		u.NybAddress = nybAddress
		u.Type = UDPRNResponseResultTypeNybAddress
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UDPRNResponseResult) MarshalJSON() ([]byte, error) {
	if u.PafAddress != nil {
		return json.Marshal(u.PafAddress)
	}

	if u.NybAddress != nil {
		return json.Marshal(u.NybAddress)
	}

	return nil, nil
}

// UDPRNResponse - Success
type UDPRNResponse struct {
	Code    UDPRNResponseCodeEnum    `json:"code"`
	Message UDPRNResponseMessageEnum `json:"message"`
	Result  UDPRNResponseResult      `json:"result"`
}
