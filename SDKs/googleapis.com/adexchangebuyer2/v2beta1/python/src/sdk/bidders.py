"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Bidders:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def adexchangebuyer2_bidders_filter_sets_bid_metrics_list(self, request: operations.Adexchangebuyer2BiddersFilterSetsBidMetricsListRequest, security: operations.Adexchangebuyer2BiddersFilterSetsBidMetricsListSecurity) -> operations.Adexchangebuyer2BiddersFilterSetsBidMetricsListResponse:
        r"""Lists all metrics that are measured in terms of number of bids."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Adexchangebuyer2BiddersFilterSetsBidMetricsListRequest, base_url, '/v2beta1/{filterSetName}/bidMetrics', request)
        
        query_params = utils.get_query_params(operations.Adexchangebuyer2BiddersFilterSetsBidMetricsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Adexchangebuyer2BiddersFilterSetsBidMetricsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListBidMetricsResponse])
                res.list_bid_metrics_response = out

        return res

    def adexchangebuyer2_bidders_filter_sets_bid_response_errors_list(self, request: operations.Adexchangebuyer2BiddersFilterSetsBidResponseErrorsListRequest, security: operations.Adexchangebuyer2BiddersFilterSetsBidResponseErrorsListSecurity) -> operations.Adexchangebuyer2BiddersFilterSetsBidResponseErrorsListResponse:
        r"""List all errors that occurred in bid responses, with the number of bid responses affected for each reason."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Adexchangebuyer2BiddersFilterSetsBidResponseErrorsListRequest, base_url, '/v2beta1/{filterSetName}/bidResponseErrors', request)
        
        query_params = utils.get_query_params(operations.Adexchangebuyer2BiddersFilterSetsBidResponseErrorsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Adexchangebuyer2BiddersFilterSetsBidResponseErrorsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListBidResponseErrorsResponse])
                res.list_bid_response_errors_response = out

        return res

    def adexchangebuyer2_bidders_filter_sets_bid_responses_without_bids_list(self, request: operations.Adexchangebuyer2BiddersFilterSetsBidResponsesWithoutBidsListRequest, security: operations.Adexchangebuyer2BiddersFilterSetsBidResponsesWithoutBidsListSecurity) -> operations.Adexchangebuyer2BiddersFilterSetsBidResponsesWithoutBidsListResponse:
        r"""List all reasons for which bid responses were considered to have no applicable bids, with the number of bid responses affected for each reason."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Adexchangebuyer2BiddersFilterSetsBidResponsesWithoutBidsListRequest, base_url, '/v2beta1/{filterSetName}/bidResponsesWithoutBids', request)
        
        query_params = utils.get_query_params(operations.Adexchangebuyer2BiddersFilterSetsBidResponsesWithoutBidsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Adexchangebuyer2BiddersFilterSetsBidResponsesWithoutBidsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListBidResponsesWithoutBidsResponse])
                res.list_bid_responses_without_bids_response = out

        return res

    def adexchangebuyer2_bidders_filter_sets_create(self, request: operations.Adexchangebuyer2BiddersFilterSetsCreateRequest, security: operations.Adexchangebuyer2BiddersFilterSetsCreateSecurity) -> operations.Adexchangebuyer2BiddersFilterSetsCreateResponse:
        r"""Creates the specified filter set for the account with the given account ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Adexchangebuyer2BiddersFilterSetsCreateRequest, base_url, '/v2beta1/{ownerName}/filterSets', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "filter_set", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.Adexchangebuyer2BiddersFilterSetsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Adexchangebuyer2BiddersFilterSetsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FilterSet])
                res.filter_set = out

        return res

    def adexchangebuyer2_bidders_filter_sets_delete(self, request: operations.Adexchangebuyer2BiddersFilterSetsDeleteRequest, security: operations.Adexchangebuyer2BiddersFilterSetsDeleteSecurity) -> operations.Adexchangebuyer2BiddersFilterSetsDeleteResponse:
        r"""Deletes the requested filter set from the account with the given account ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Adexchangebuyer2BiddersFilterSetsDeleteRequest, base_url, '/v2beta1/{name}', request)
        
        query_params = utils.get_query_params(operations.Adexchangebuyer2BiddersFilterSetsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Adexchangebuyer2BiddersFilterSetsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def adexchangebuyer2_bidders_filter_sets_filtered_bid_requests_list(self, request: operations.Adexchangebuyer2BiddersFilterSetsFilteredBidRequestsListRequest, security: operations.Adexchangebuyer2BiddersFilterSetsFilteredBidRequestsListSecurity) -> operations.Adexchangebuyer2BiddersFilterSetsFilteredBidRequestsListResponse:
        r"""List all reasons that caused a bid request not to be sent for an impression, with the number of bid requests not sent for each reason."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Adexchangebuyer2BiddersFilterSetsFilteredBidRequestsListRequest, base_url, '/v2beta1/{filterSetName}/filteredBidRequests', request)
        
        query_params = utils.get_query_params(operations.Adexchangebuyer2BiddersFilterSetsFilteredBidRequestsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Adexchangebuyer2BiddersFilterSetsFilteredBidRequestsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListFilteredBidRequestsResponse])
                res.list_filtered_bid_requests_response = out

        return res

    def adexchangebuyer2_bidders_filter_sets_filtered_bids_creatives_list(self, request: operations.Adexchangebuyer2BiddersFilterSetsFilteredBidsCreativesListRequest, security: operations.Adexchangebuyer2BiddersFilterSetsFilteredBidsCreativesListSecurity) -> operations.Adexchangebuyer2BiddersFilterSetsFilteredBidsCreativesListResponse:
        r"""List all creatives associated with a specific reason for which bids were filtered, with the number of bids filtered for each creative."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Adexchangebuyer2BiddersFilterSetsFilteredBidsCreativesListRequest, base_url, '/v2beta1/{filterSetName}/filteredBids/{creativeStatusId}/creatives', request)
        
        query_params = utils.get_query_params(operations.Adexchangebuyer2BiddersFilterSetsFilteredBidsCreativesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Adexchangebuyer2BiddersFilterSetsFilteredBidsCreativesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListCreativeStatusBreakdownByCreativeResponse])
                res.list_creative_status_breakdown_by_creative_response = out

        return res

    def adexchangebuyer2_bidders_filter_sets_filtered_bids_details_list(self, request: operations.Adexchangebuyer2BiddersFilterSetsFilteredBidsDetailsListRequest, security: operations.Adexchangebuyer2BiddersFilterSetsFilteredBidsDetailsListSecurity) -> operations.Adexchangebuyer2BiddersFilterSetsFilteredBidsDetailsListResponse:
        r"""List all details associated with a specific reason for which bids were filtered, with the number of bids filtered for each detail."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Adexchangebuyer2BiddersFilterSetsFilteredBidsDetailsListRequest, base_url, '/v2beta1/{filterSetName}/filteredBids/{creativeStatusId}/details', request)
        
        query_params = utils.get_query_params(operations.Adexchangebuyer2BiddersFilterSetsFilteredBidsDetailsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Adexchangebuyer2BiddersFilterSetsFilteredBidsDetailsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListCreativeStatusBreakdownByDetailResponse])
                res.list_creative_status_breakdown_by_detail_response = out

        return res

    def adexchangebuyer2_bidders_filter_sets_filtered_bids_list(self, request: operations.Adexchangebuyer2BiddersFilterSetsFilteredBidsListRequest, security: operations.Adexchangebuyer2BiddersFilterSetsFilteredBidsListSecurity) -> operations.Adexchangebuyer2BiddersFilterSetsFilteredBidsListResponse:
        r"""List all reasons for which bids were filtered, with the number of bids filtered for each reason."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Adexchangebuyer2BiddersFilterSetsFilteredBidsListRequest, base_url, '/v2beta1/{filterSetName}/filteredBids', request)
        
        query_params = utils.get_query_params(operations.Adexchangebuyer2BiddersFilterSetsFilteredBidsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Adexchangebuyer2BiddersFilterSetsFilteredBidsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListFilteredBidsResponse])
                res.list_filtered_bids_response = out

        return res

    def adexchangebuyer2_bidders_filter_sets_get(self, request: operations.Adexchangebuyer2BiddersFilterSetsGetRequest, security: operations.Adexchangebuyer2BiddersFilterSetsGetSecurity) -> operations.Adexchangebuyer2BiddersFilterSetsGetResponse:
        r"""Retrieves the requested filter set for the account with the given account ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Adexchangebuyer2BiddersFilterSetsGetRequest, base_url, '/v2beta1/{name}', request)
        
        query_params = utils.get_query_params(operations.Adexchangebuyer2BiddersFilterSetsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Adexchangebuyer2BiddersFilterSetsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FilterSet])
                res.filter_set = out

        return res

    def adexchangebuyer2_bidders_filter_sets_impression_metrics_list(self, request: operations.Adexchangebuyer2BiddersFilterSetsImpressionMetricsListRequest, security: operations.Adexchangebuyer2BiddersFilterSetsImpressionMetricsListSecurity) -> operations.Adexchangebuyer2BiddersFilterSetsImpressionMetricsListResponse:
        r"""Lists all metrics that are measured in terms of number of impressions."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Adexchangebuyer2BiddersFilterSetsImpressionMetricsListRequest, base_url, '/v2beta1/{filterSetName}/impressionMetrics', request)
        
        query_params = utils.get_query_params(operations.Adexchangebuyer2BiddersFilterSetsImpressionMetricsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Adexchangebuyer2BiddersFilterSetsImpressionMetricsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListImpressionMetricsResponse])
                res.list_impression_metrics_response = out

        return res

    def adexchangebuyer2_bidders_filter_sets_list(self, request: operations.Adexchangebuyer2BiddersFilterSetsListRequest, security: operations.Adexchangebuyer2BiddersFilterSetsListSecurity) -> operations.Adexchangebuyer2BiddersFilterSetsListResponse:
        r"""Lists all filter sets for the account with the given account ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Adexchangebuyer2BiddersFilterSetsListRequest, base_url, '/v2beta1/{ownerName}/filterSets', request)
        
        query_params = utils.get_query_params(operations.Adexchangebuyer2BiddersFilterSetsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Adexchangebuyer2BiddersFilterSetsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListFilterSetsResponse])
                res.list_filter_sets_response = out

        return res

    def adexchangebuyer2_bidders_filter_sets_losing_bids_list(self, request: operations.Adexchangebuyer2BiddersFilterSetsLosingBidsListRequest, security: operations.Adexchangebuyer2BiddersFilterSetsLosingBidsListSecurity) -> operations.Adexchangebuyer2BiddersFilterSetsLosingBidsListResponse:
        r"""List all reasons for which bids lost in the auction, with the number of bids that lost for each reason."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Adexchangebuyer2BiddersFilterSetsLosingBidsListRequest, base_url, '/v2beta1/{filterSetName}/losingBids', request)
        
        query_params = utils.get_query_params(operations.Adexchangebuyer2BiddersFilterSetsLosingBidsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Adexchangebuyer2BiddersFilterSetsLosingBidsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListLosingBidsResponse])
                res.list_losing_bids_response = out

        return res

    def adexchangebuyer2_bidders_filter_sets_non_billable_winning_bids_list(self, request: operations.Adexchangebuyer2BiddersFilterSetsNonBillableWinningBidsListRequest, security: operations.Adexchangebuyer2BiddersFilterSetsNonBillableWinningBidsListSecurity) -> operations.Adexchangebuyer2BiddersFilterSetsNonBillableWinningBidsListResponse:
        r"""List all reasons for which winning bids were not billable, with the number of bids not billed for each reason."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.Adexchangebuyer2BiddersFilterSetsNonBillableWinningBidsListRequest, base_url, '/v2beta1/{filterSetName}/nonBillableWinningBids', request)
        
        query_params = utils.get_query_params(operations.Adexchangebuyer2BiddersFilterSetsNonBillableWinningBidsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Adexchangebuyer2BiddersFilterSetsNonBillableWinningBidsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListNonBillableWinningBidsResponse])
                res.list_non_billable_winning_bids_response = out

        return res

    