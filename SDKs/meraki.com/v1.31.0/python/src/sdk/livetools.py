"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class LiveTools:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def blink_device_leds(self, request: operations.BlinkDeviceLedsRequest) -> operations.BlinkDeviceLedsResponse:
        r"""Blink the LEDs on a device
        Blink the LEDs on a device
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.BlinkDeviceLedsRequest, base_url, '/devices/{serial}/blinkLeds', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BlinkDeviceLedsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.blink_device_leds_202_application_json_object = out

        return res

    def create_device_live_tools_ping(self, request: operations.CreateDeviceLiveToolsPingRequest) -> operations.CreateDeviceLiveToolsPingResponse:
        r"""Enqueue a job to ping a target host from the device
        Enqueue a job to ping a target host from the device
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateDeviceLiveToolsPingRequest, base_url, '/devices/{serial}/liveTools/ping', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateDeviceLiveToolsPingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateDeviceLiveToolsPing201ApplicationJSON])
                res.create_device_live_tools_ping_201_application_json_object = out

        return res

    def create_device_live_tools_ping_device(self, request: operations.CreateDeviceLiveToolsPingDeviceRequest) -> operations.CreateDeviceLiveToolsPingDeviceResponse:
        r"""Enqueue a job to check connectivity status to the device
        Enqueue a job to check connectivity status to the device
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateDeviceLiveToolsPingDeviceRequest, base_url, '/devices/{serial}/liveTools/pingDevice', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateDeviceLiveToolsPingDeviceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateDeviceLiveToolsPingDevice201ApplicationJSON])
                res.create_device_live_tools_ping_device_201_application_json_object = out

        return res

    def cycle_device_switch_ports(self, request: operations.CycleDeviceSwitchPortsRequest) -> operations.CycleDeviceSwitchPortsResponse:
        r"""Cycle a set of switch ports
        Cycle a set of switch ports
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CycleDeviceSwitchPortsRequest, base_url, '/devices/{serial}/switch/ports/cycle', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CycleDeviceSwitchPortsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.cycle_device_switch_ports_200_application_json_object = out

        return res

    def get_device_live_tools_ping(self, request: operations.GetDeviceLiveToolsPingRequest) -> operations.GetDeviceLiveToolsPingResponse:
        r"""Return a ping job
        Return a ping job. Latency unit in response is in milliseconds. Size is in bytes.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDeviceLiveToolsPingRequest, base_url, '/devices/{serial}/liveTools/ping/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDeviceLiveToolsPingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetDeviceLiveToolsPing200ApplicationJSON])
                res.get_device_live_tools_ping_200_application_json_object = out

        return res

    def get_device_live_tools_ping_device(self, request: operations.GetDeviceLiveToolsPingDeviceRequest) -> operations.GetDeviceLiveToolsPingDeviceResponse:
        r"""Return a ping device job
        Return a ping device job. Latency unit in response is in milliseconds. Size is in bytes.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDeviceLiveToolsPingDeviceRequest, base_url, '/devices/{serial}/liveTools/pingDevice/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDeviceLiveToolsPingDeviceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetDeviceLiveToolsPingDevice200ApplicationJSON])
                res.get_device_live_tools_ping_device_200_application_json_object = out

        return res

    def reboot_device(self, request: operations.RebootDeviceRequest) -> operations.RebootDeviceResponse:
        r"""Reboot a device
        Reboot a device
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RebootDeviceRequest, base_url, '/devices/{serial}/reboot', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RebootDeviceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.reboot_device_202_application_json_object = out

        return res

    