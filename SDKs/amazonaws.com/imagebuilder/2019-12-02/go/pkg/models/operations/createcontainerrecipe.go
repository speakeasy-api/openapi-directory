// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateContainerRecipeRequestBodyContainerTypeEnum - The type of container to create.
type CreateContainerRecipeRequestBodyContainerTypeEnum string

const (
	CreateContainerRecipeRequestBodyContainerTypeEnumDocker CreateContainerRecipeRequestBodyContainerTypeEnum = "DOCKER"
)

func (e *CreateContainerRecipeRequestBodyContainerTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DOCKER":
		*e = CreateContainerRecipeRequestBodyContainerTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateContainerRecipeRequestBodyContainerTypeEnum: %s", s)
	}
}

// CreateContainerRecipeRequestBodyInstanceConfiguration - Defines a custom base AMI and block device mapping configurations of an instance used for building and testing container images.
type CreateContainerRecipeRequestBodyInstanceConfiguration struct {
	BlockDeviceMappings []shared.InstanceBlockDeviceMapping `json:"blockDeviceMappings,omitempty"`
	Image               *string                             `json:"image,omitempty"`
}

// CreateContainerRecipeRequestBodyPlatformOverrideEnum - Specifies the operating system platform when you use a custom base image.
type CreateContainerRecipeRequestBodyPlatformOverrideEnum string

const (
	CreateContainerRecipeRequestBodyPlatformOverrideEnumWindows CreateContainerRecipeRequestBodyPlatformOverrideEnum = "Windows"
	CreateContainerRecipeRequestBodyPlatformOverrideEnumLinux   CreateContainerRecipeRequestBodyPlatformOverrideEnum = "Linux"
)

func (e *CreateContainerRecipeRequestBodyPlatformOverrideEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Windows":
		fallthrough
	case "Linux":
		*e = CreateContainerRecipeRequestBodyPlatformOverrideEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateContainerRecipeRequestBodyPlatformOverrideEnum: %s", s)
	}
}

// CreateContainerRecipeRequestBodyTargetRepository - The container repository where the output container image is stored.
type CreateContainerRecipeRequestBodyTargetRepository struct {
	RepositoryName *string                                `json:"repositoryName,omitempty"`
	Service        *shared.ContainerRepositoryServiceEnum `json:"service,omitempty"`
}

type CreateContainerRecipeRequestBody struct {
	// The client token used to make this request idempotent.
	ClientToken string `json:"clientToken"`
	// Components for build and test that are included in the container recipe. Recipes require a minimum of one build component, and can have a maximum of 20 build and test components in any combination.
	Components []shared.ComponentConfiguration `json:"components"`
	// The type of container to create.
	ContainerType CreateContainerRecipeRequestBodyContainerTypeEnum `json:"containerType"`
	// The description of the container recipe.
	Description *string `json:"description,omitempty"`
	// The Dockerfile template used to build your image as an inline data blob.
	DockerfileTemplateData *string `json:"dockerfileTemplateData,omitempty"`
	// The Amazon S3 URI for the Dockerfile that will be used to build your container image.
	DockerfileTemplateURI *string `json:"dockerfileTemplateUri,omitempty"`
	// Specifies the operating system version for the base image.
	ImageOsVersionOverride *string `json:"imageOsVersionOverride,omitempty"`
	// Defines a custom base AMI and block device mapping configurations of an instance used for building and testing container images.
	InstanceConfiguration *CreateContainerRecipeRequestBodyInstanceConfiguration `json:"instanceConfiguration,omitempty"`
	// Identifies which KMS key is used to encrypt the container image.
	KmsKeyID *string `json:"kmsKeyId,omitempty"`
	// The name of the container recipe.
	Name string `json:"name"`
	// The base image for the container recipe.
	ParentImage string `json:"parentImage"`
	// Specifies the operating system platform when you use a custom base image.
	PlatformOverride *CreateContainerRecipeRequestBodyPlatformOverrideEnum `json:"platformOverride,omitempty"`
	// <p>The semantic version of the container recipe. This version follows the semantic version syntax.</p> <note> <p>The semantic version has four nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;/&lt;build&gt;. You can assign values for the first three, and can filter on all of them.</p> <p> <b>Assignment:</b> For the first three nodes you can assign any positive integer value, including zero, with an upper limit of 2^30-1, or 1073741823 for each node. Image Builder automatically assigns the build number to the fourth node.</p> <p> <b>Patterns:</b> You can use any numeric pattern that adheres to the assignment requirements for the nodes that you can assign. For example, you might choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.</p> </note>
	SemanticVersion string `json:"semanticVersion"`
	// Tags that are attached to the container recipe.
	Tags map[string]string `json:"tags,omitempty"`
	// The container repository where the output container image is stored.
	TargetRepository CreateContainerRecipeRequestBodyTargetRepository `json:"targetRepository"`
	// The working directory for use during build and test workflows.
	WorkingDirectory *string `json:"workingDirectory,omitempty"`
}

type CreateContainerRecipeRequest struct {
	RequestBody       CreateContainerRecipeRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                          `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                          `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                          `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                          `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                          `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                          `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                          `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type CreateContainerRecipeResponse struct {
	// CallRateLimitExceededException
	CallRateLimitExceededException interface{}
	// ClientException
	ClientException interface{}
	ContentType     string
	// Success
	CreateContainerRecipeResponse *shared.CreateContainerRecipeResponse
	// ForbiddenException
	ForbiddenException interface{}
	// IdempotentParameterMismatchException
	IdempotentParameterMismatchException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// InvalidVersionNumberException
	InvalidVersionNumberException interface{}
	// ResourceAlreadyExistsException
	ResourceAlreadyExistsException interface{}
	// ResourceInUseException
	ResourceInUseException interface{}
	// ServiceException
	ServiceException interface{}
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	StatusCode                    int
	RawResponse                   *http.Response
	// ServiceUnavailableException
	ServiceUnavailableException interface{}
}
