/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { FileDTO } from "./filedto";
import { InputFilesDTO } from "./inputfilesdto";
import { JobDto1 } from "./jobdto1";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Success
 */
export class TaskFilesDTO extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: FileDTO, elemDepth: 2 })
  @Expose({ name: "bundles" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, FileDTO[]> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], FileDTO);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  bundles?: Record<string, FileDTO[]>;

  @SpeakeasyMetadata()
  @Expose({ name: "inputFiles" })
  @Type(() => InputFilesDTO)
  inputFiles?: InputFilesDTO;

  @SpeakeasyMetadata({ elemType: JobDto1 })
  @Expose({ name: "jobs" })
  @Type(() => JobDto1)
  jobs?: JobDto1[];

  @SpeakeasyMetadata({ elemType: FileDTO })
  @Expose({ name: "outputFiles" })
  @Type(() => FileDTO)
  outputFiles?: FileDTO[];
}
