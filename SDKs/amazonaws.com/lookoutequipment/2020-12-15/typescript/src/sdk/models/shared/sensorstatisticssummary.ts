/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CategoricalValues } from "./categoricalvalues";
import { CountPercent } from "./countpercent";
import { LargeTimestampGaps } from "./largetimestampgaps";
import { MonotonicValues } from "./monotonicvalues";
import { MultipleOperatingModes } from "./multipleoperatingmodes";
import { Expose, Transform, Type } from "class-transformer";

/**
 *  Summary of ingestion statistics like whether data exists, number of missing values, number of invalid values and so on related to the particular sensor.
 */
export class SensorStatisticsSummary extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "CategoricalValues" })
  @Type(() => CategoricalValues)
  categoricalValues?: CategoricalValues;

  @SpeakeasyMetadata()
  @Expose({ name: "ComponentName" })
  componentName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "DataEndTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  dataEndTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "DataExists" })
  dataExists?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "DataStartTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  dataStartTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "DuplicateTimestamps" })
  @Type(() => CountPercent)
  duplicateTimestamps?: CountPercent;

  @SpeakeasyMetadata()
  @Expose({ name: "InvalidDateEntries" })
  @Type(() => CountPercent)
  invalidDateEntries?: CountPercent;

  @SpeakeasyMetadata()
  @Expose({ name: "InvalidValues" })
  @Type(() => CountPercent)
  invalidValues?: CountPercent;

  @SpeakeasyMetadata()
  @Expose({ name: "LargeTimestampGaps" })
  @Type(() => LargeTimestampGaps)
  largeTimestampGaps?: LargeTimestampGaps;

  @SpeakeasyMetadata()
  @Expose({ name: "MissingValues" })
  @Type(() => CountPercent)
  missingValues?: CountPercent;

  @SpeakeasyMetadata()
  @Expose({ name: "MonotonicValues" })
  @Type(() => MonotonicValues)
  monotonicValues?: MonotonicValues;

  @SpeakeasyMetadata()
  @Expose({ name: "MultipleOperatingModes" })
  @Type(() => MultipleOperatingModes)
  multipleOperatingModes?: MultipleOperatingModes;

  @SpeakeasyMetadata()
  @Expose({ name: "SensorName" })
  sensorName?: string;
}
