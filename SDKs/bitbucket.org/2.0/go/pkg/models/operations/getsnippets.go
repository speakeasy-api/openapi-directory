// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetSnippetsSecurity struct {
	APIKey *shared.SchemeAPIKey `security:"scheme,type=apiKey,subtype=header"`
	Basic  *shared.SchemeBasic  `security:"scheme,type=http,subtype=basic"`
	Oauth2 *shared.SchemeOauth2 `security:"scheme,type=oauth2"`
}

// GetSnippetsRoleEnum - Filter down the result based on the authenticated user's role (`owner`, `contributor`, or `member`).
type GetSnippetsRoleEnum string

const (
	GetSnippetsRoleEnumOwner       GetSnippetsRoleEnum = "owner"
	GetSnippetsRoleEnumContributor GetSnippetsRoleEnum = "contributor"
	GetSnippetsRoleEnumMember      GetSnippetsRoleEnum = "member"
)

func (e *GetSnippetsRoleEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "owner":
		fallthrough
	case "contributor":
		fallthrough
	case "member":
		*e = GetSnippetsRoleEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSnippetsRoleEnum: %s", s)
	}
}

type GetSnippetsQueryParams struct {
	// Filter down the result based on the authenticated user's role (`owner`, `contributor`, or `member`).
	Role *GetSnippetsRoleEnum `queryParam:"style=form,explode=true,name=role"`
}

type GetSnippetsRequest struct {
	QueryParams GetSnippetsQueryParams
	Security    GetSnippetsSecurity
}

type GetSnippetsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// If the snippet does not exist.
	Error map[string]interface{}
	// A paginated list of snippets.
	PaginatedSnippets *shared.PaginatedSnippets
}
