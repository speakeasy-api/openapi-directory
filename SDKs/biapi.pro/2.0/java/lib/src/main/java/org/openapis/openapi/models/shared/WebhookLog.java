/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class WebhookLog {
    /**
     * ID of the log
     */
    @JsonProperty("id")
    public Long id;

    public WebhookLog withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * ID of the service
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id_service")
    public Long idService;

    public WebhookLog withIdService(Long idService) {
        this.idService = idService;
        return this;
    }
    
    /**
     * ID of the user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id_user")
    public Long idUser;

    public WebhookLog withIdUser(Long idUser) {
        this.idUser = idUser;
        return this;
    }
    
    /**
     * ID of the webhook data
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id_webhook_data")
    public Long idWebhookData;

    public WebhookLog withIdWebhookData(Long idWebhookData) {
        this.idWebhookData = idWebhookData;
        return this;
    }
    
    /**
     * If the log is an error, do not retry to push before this timestamp
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("next_try")
    public OffsetDateTime nextTry;

    public WebhookLog withNextTry(OffsetDateTime nextTry) {
        this.nextTry = nextTry;
        return this;
    }
    
    /**
     * Return code of the reply to the hook
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("response_code")
    public Long responseCode;

    public WebhookLog withResponseCode(Long responseCode) {
        this.responseCode = responseCode;
        return this;
    }
    
    /**
     * Timestamp of the reply to the hook
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("response_date")
    public OffsetDateTime responseDate;

    public WebhookLog withResponseDate(OffsetDateTime responseDate) {
        this.responseDate = responseDate;
        return this;
    }
    
    /**
     * Timestamp when the hook was sent
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("timestamp")
    public OffsetDateTime timestamp;

    public WebhookLog withTimestamp(OffsetDateTime timestamp) {
        this.timestamp = timestamp;
        return this;
    }
    
    public WebhookLog(@JsonProperty("id") Long id, @JsonProperty("timestamp") OffsetDateTime timestamp) {
        this.id = id;
        this.timestamp = timestamp;
  }
}
