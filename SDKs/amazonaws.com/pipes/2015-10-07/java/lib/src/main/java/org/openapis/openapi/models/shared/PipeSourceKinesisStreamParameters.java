/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * PipeSourceKinesisStreamParameters - The parameters for using a Kinesis stream as a source.
 */
public class PipeSourceKinesisStreamParameters {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BatchSize")
    public Long batchSize;

    public PipeSourceKinesisStreamParameters withBatchSize(Long batchSize) {
        this.batchSize = batchSize;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DeadLetterConfig")
    public DeadLetterConfig deadLetterConfig;

    public PipeSourceKinesisStreamParameters withDeadLetterConfig(DeadLetterConfig deadLetterConfig) {
        this.deadLetterConfig = deadLetterConfig;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MaximumBatchingWindowInSeconds")
    public Long maximumBatchingWindowInSeconds;

    public PipeSourceKinesisStreamParameters withMaximumBatchingWindowInSeconds(Long maximumBatchingWindowInSeconds) {
        this.maximumBatchingWindowInSeconds = maximumBatchingWindowInSeconds;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MaximumRecordAgeInSeconds")
    public Long maximumRecordAgeInSeconds;

    public PipeSourceKinesisStreamParameters withMaximumRecordAgeInSeconds(Long maximumRecordAgeInSeconds) {
        this.maximumRecordAgeInSeconds = maximumRecordAgeInSeconds;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MaximumRetryAttempts")
    public Long maximumRetryAttempts;

    public PipeSourceKinesisStreamParameters withMaximumRetryAttempts(Long maximumRetryAttempts) {
        this.maximumRetryAttempts = maximumRetryAttempts;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("OnPartialBatchItemFailure")
    public OnPartialBatchItemFailureStreamsEnum onPartialBatchItemFailure;

    public PipeSourceKinesisStreamParameters withOnPartialBatchItemFailure(OnPartialBatchItemFailureStreamsEnum onPartialBatchItemFailure) {
        this.onPartialBatchItemFailure = onPartialBatchItemFailure;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ParallelizationFactor")
    public Long parallelizationFactor;

    public PipeSourceKinesisStreamParameters withParallelizationFactor(Long parallelizationFactor) {
        this.parallelizationFactor = parallelizationFactor;
        return this;
    }
    
    @JsonProperty("StartingPosition")
    public KinesisStreamStartPositionEnum startingPosition;

    public PipeSourceKinesisStreamParameters withStartingPosition(KinesisStreamStartPositionEnum startingPosition) {
        this.startingPosition = startingPosition;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("StartingPositionTimestamp")
    public OffsetDateTime startingPositionTimestamp;

    public PipeSourceKinesisStreamParameters withStartingPositionTimestamp(OffsetDateTime startingPositionTimestamp) {
        this.startingPositionTimestamp = startingPositionTimestamp;
        return this;
    }
    
    public PipeSourceKinesisStreamParameters(@JsonProperty("StartingPosition") KinesisStreamStartPositionEnum startingPosition) {
        this.startingPosition = startingPosition;
  }
}
