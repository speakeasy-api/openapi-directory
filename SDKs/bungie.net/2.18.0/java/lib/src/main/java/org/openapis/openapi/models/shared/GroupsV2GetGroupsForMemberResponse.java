/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;



public class GroupsV2GetGroupsForMemberResponse {
    /**
     * A convenience property that indicates if every membership this user has that is a part of this group are part of an account that is considered inactive - for example, overridden accounts in Cross Save.
     *  The key is the Group ID for the group being checked, and the value is true if the users' memberships for that group are all inactive.
     */
    
    public java.util.Map<String, Boolean> areAllMembershipsInactive;

    public GroupsV2GetGroupsForMemberResponse withAreAllMembershipsInactive(java.util.Map<String, Boolean> areAllMembershipsInactive) {
        this.areAllMembershipsInactive = areAllMembershipsInactive;
        return this;
    }
    
    
    public Boolean hasMore;

    public GroupsV2GetGroupsForMemberResponse withHasMore(Boolean hasMore) {
        this.hasMore = hasMore;
        return this;
    }
    
    
    public QueriesPagedQuery query;

    public GroupsV2GetGroupsForMemberResponse withQuery(QueriesPagedQuery query) {
        this.query = query;
        return this;
    }
    
    
    public String replacementContinuationToken;

    public GroupsV2GetGroupsForMemberResponse withReplacementContinuationToken(String replacementContinuationToken) {
        this.replacementContinuationToken = replacementContinuationToken;
        return this;
    }
    
    
    public GroupsV2GroupMembership[] results;

    public GroupsV2GetGroupsForMemberResponse withResults(GroupsV2GroupMembership[] results) {
        this.results = results;
        return this;
    }
    
    
    public Integer totalResults;

    public GroupsV2GetGroupsForMemberResponse withTotalResults(Integer totalResults) {
        this.totalResults = totalResults;
        return this;
    }
    
    /**
     * If useTotalResults is true, then totalResults represents an accurate count.
     * If False, it does not, and may be estimated/only the size of the current page.
     * Either way, you should probably always only trust hasMore.
     * This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.
     */
    
    public Boolean useTotalResults;

    public GroupsV2GetGroupsForMemberResponse withUseTotalResults(Boolean useTotalResults) {
        this.useTotalResults = useTotalResults;
        return this;
    }
    
    public GroupsV2GetGroupsForMemberResponse(){}
}
