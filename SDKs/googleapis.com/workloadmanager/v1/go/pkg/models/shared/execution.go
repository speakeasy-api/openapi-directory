// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ExecutionRunTypeEnum - type represent whether the execution executed directly by user or scheduled according evaluation.schedule field.
type ExecutionRunTypeEnum string

const (
	ExecutionRunTypeEnumTypeUnspecified ExecutionRunTypeEnum = "TYPE_UNSPECIFIED"
	ExecutionRunTypeEnumOneTime         ExecutionRunTypeEnum = "ONE_TIME"
	ExecutionRunTypeEnumScheduled       ExecutionRunTypeEnum = "SCHEDULED"
)

func (e ExecutionRunTypeEnum) ToPointer() *ExecutionRunTypeEnum {
	return &e
}

func (e *ExecutionRunTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TYPE_UNSPECIFIED":
		fallthrough
	case "ONE_TIME":
		fallthrough
	case "SCHEDULED":
		*e = ExecutionRunTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExecutionRunTypeEnum: %v", v)
	}
}

// ExecutionInput - Message describing Execution object
type ExecutionInput struct {
	// Labels as key value pairs
	Labels map[string]string `json:"labels,omitempty"`
	// The name of execution resource. The format is projects/{project}/locations/{location}/evaluations/{evaluation}/executions/{execution}
	Name *string `json:"name,omitempty"`
	// type represent whether the execution executed directly by user or scheduled according evaluation.schedule field.
	RunType *ExecutionRunTypeEnum `json:"runType,omitempty"`
}

// ExecutionStateEnum - Output only. [Output only] State
type ExecutionStateEnum string

const (
	ExecutionStateEnumStateUnspecified ExecutionStateEnum = "STATE_UNSPECIFIED"
	ExecutionStateEnumRunning          ExecutionStateEnum = "RUNNING"
	ExecutionStateEnumSucceeded        ExecutionStateEnum = "SUCCEEDED"
	ExecutionStateEnumFailed           ExecutionStateEnum = "FAILED"
)

func (e ExecutionStateEnum) ToPointer() *ExecutionStateEnum {
	return &e
}

func (e *ExecutionStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "RUNNING":
		fallthrough
	case "SUCCEEDED":
		fallthrough
	case "FAILED":
		*e = ExecutionStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExecutionStateEnum: %v", v)
	}
}

// Execution - Message describing Execution object
type Execution struct {
	// Output only. [Output only] End time stamp
	EndTime *string `json:"endTime,omitempty"`
	// Output only. [Output only] Evaluation ID
	EvaluationID *string `json:"evaluationId,omitempty"`
	// Output only. [Output only] Inventory time stamp
	InventoryTime *string `json:"inventoryTime,omitempty"`
	// Labels as key value pairs
	Labels map[string]string `json:"labels,omitempty"`
	// The name of execution resource. The format is projects/{project}/locations/{location}/evaluations/{evaluation}/executions/{execution}
	Name *string `json:"name,omitempty"`
	// type represent whether the execution executed directly by user or scheduled according evaluation.schedule field.
	RunType *ExecutionRunTypeEnum `json:"runType,omitempty"`
	// Output only. [Output only] Start time stamp
	StartTime *string `json:"startTime,omitempty"`
	// Output only. [Output only] State
	State *ExecutionStateEnum `json:"state,omitempty"`
}
