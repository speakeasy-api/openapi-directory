/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { CellInput } from "./cellinput";
import { Filter } from "./filter";
import { Expose, Transform, Type } from "class-transformer";

/**
 *  Data needed to upsert rows in a table as part of a single item in the BatchUpsertTableRows request.
 */
export class UpsertRowData extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "batchItemId" })
  batchItemId: string;

  @SpeakeasyMetadata({ elemType: CellInput })
  @Expose({ name: "cellsToUpdate" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, CellInput> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], CellInput);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  cellsToUpdate: Record<string, CellInput>;

  @SpeakeasyMetadata()
  @Expose({ name: "filter" })
  @Type(() => Filter)
  filter: Filter;
}
