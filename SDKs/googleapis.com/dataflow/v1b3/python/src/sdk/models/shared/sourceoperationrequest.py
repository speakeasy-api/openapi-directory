"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import sourcegetmetadatarequest as shared_sourcegetmetadatarequest
from ..shared import sourcesplitrequest as shared_sourcesplitrequest
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceOperationRequest:
    r"""A work item that represents the different operations that can be performed on a user-defined Source specification."""
    
    get_metadata: Optional[shared_sourcegetmetadatarequest.SourceGetMetadataRequest] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('getMetadata'), 'exclude': lambda f: f is None }})
    r"""A request to compute the SourceMetadata of a Source."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""User-provided name of the Read instruction for this source."""  
    original_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('originalName'), 'exclude': lambda f: f is None }})
    r"""System-defined name for the Read instruction for this source in the original workflow graph."""  
    split: Optional[shared_sourcesplitrequest.SourceSplitRequest] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('split'), 'exclude': lambda f: f is None }})
    r"""Represents the operation to split a high-level Source specification into bundles (parts for parallel processing). At a high level, splitting of a source into bundles happens as follows: SourceSplitRequest is applied to the source. If it returns SOURCE_SPLIT_OUTCOME_USE_CURRENT, no further splitting happens and the source is used \\"as is\\". Otherwise, splitting is applied recursively to each produced DerivedSource. As an optimization, for any Source, if its does_not_need_splitting is true, the framework assumes that splitting this source would return SOURCE_SPLIT_OUTCOME_USE_CURRENT, and doesn't initiate a SourceSplitRequest. This applies both to the initial source being split and to bundles produced from it."""  
    stage_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stageName'), 'exclude': lambda f: f is None }})
    r"""System-defined name of the stage containing the source operation. Unique across the workflow."""  
    system_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('systemName'), 'exclude': lambda f: f is None }})
    r"""System-defined name of the Read instruction for this source. Unique across the workflow."""  
    