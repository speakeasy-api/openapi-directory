"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import fieldconfig as shared_fieldconfig
from ..shared import formactiontype_enum as shared_formactiontype_enum
from ..shared import formcta as shared_formcta
from ..shared import formdatatypeconfig as shared_formdatatypeconfig
from ..shared import formstyle as shared_formstyle
from ..shared import sectionalelement as shared_sectionalelement
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Form:
    r"""Contains the configuration settings for a <code>Form</code> user interface (UI) element for an Amplify app. A form is a component you can add to your project by specifying a data source as the default configuration for the form."""
    
    app_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appId') }})  
    data_type: shared_formdatatypeconfig.FormDataTypeConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataType') }})  
    environment_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('environmentName') }})  
    fields_: dict[str, shared_fieldconfig.FieldConfig] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fields') }})  
    form_action_type: shared_formactiontype_enum.FormActionTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('formActionType') }})  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    schema_version: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schemaVersion') }})  
    sectional_elements: dict[str, shared_sectionalelement.SectionalElement] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sectionalElements') }})  
    style: shared_formstyle.FormStyle = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('style') }})  
    cta: Optional[shared_formcta.FormCTA] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cta'), 'exclude': lambda f: f is None }})  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    