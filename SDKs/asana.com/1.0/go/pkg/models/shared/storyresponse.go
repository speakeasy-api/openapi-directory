// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
	"time"
)

// StoryResponseNewDateValue - *Conditional* The new value of a date custom field story.
type StoryResponseNewDateValue struct {
	// The UTC date and time on which this task is due, or null if the task has no due time. This takes an ISO 8601 date string in UTC and should not be used together with `due_on`.
	DueAt *time.Time `json:"due_at,omitempty"`
	// The localized day on which this goal is due. This takes a date with format `YYYY-MM-DD`.
	DueOn *types.Date `json:"due_on,omitempty"`
	// The day on which work for this goal begins, or null if the goal has no start date. This takes a date with `YYYY-MM-DD` format, and cannot be set unless there is an accompanying due date.
	StartOn *types.Date `json:"start_on,omitempty"`
}

// StoryResponseOldDateValue - *Conditional*. The old value of a date custom field story.
type StoryResponseOldDateValue struct {
	// The UTC date and time on which this task is due, or null if the task has no due time. This takes an ISO 8601 date string in UTC and should not be used together with `due_on`.
	DueAt *time.Time `json:"due_at,omitempty"`
	// The localized day on which this goal is due. This takes a date with format `YYYY-MM-DD`.
	DueOn *types.Date `json:"due_on,omitempty"`
	// The day on which work for this goal begins, or null if the goal has no start date. This takes a date with `YYYY-MM-DD` format, and cannot be set unless there is an accompanying due date.
	StartOn *types.Date `json:"start_on,omitempty"`
}

// StoryResponseSourceEnum - The component of the Asana product the user used to trigger the story.
type StoryResponseSourceEnum string

const (
	StoryResponseSourceEnumWeb     StoryResponseSourceEnum = "web"
	StoryResponseSourceEnumEmail   StoryResponseSourceEnum = "email"
	StoryResponseSourceEnumMobile  StoryResponseSourceEnum = "mobile"
	StoryResponseSourceEnumAPI     StoryResponseSourceEnum = "api"
	StoryResponseSourceEnumUnknown StoryResponseSourceEnum = "unknown"
)

func (e *StoryResponseSourceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "web":
		fallthrough
	case "email":
		fallthrough
	case "mobile":
		fallthrough
	case "api":
		fallthrough
	case "unknown":
		*e = StoryResponseSourceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StoryResponseSourceEnum: %s", s)
	}
}

// StoryResponseStickerNameEnum - The name of the sticker in this story. `null` if there is no sticker.
type StoryResponseStickerNameEnum string

const (
	StoryResponseStickerNameEnumGreenCheckmark       StoryResponseStickerNameEnum = "green_checkmark"
	StoryResponseStickerNameEnumPeopleDancing        StoryResponseStickerNameEnum = "people_dancing"
	StoryResponseStickerNameEnumDancingUnicorn       StoryResponseStickerNameEnum = "dancing_unicorn"
	StoryResponseStickerNameEnumHeart                StoryResponseStickerNameEnum = "heart"
	StoryResponseStickerNameEnumPartyPopper          StoryResponseStickerNameEnum = "party_popper"
	StoryResponseStickerNameEnumPeopleWavingFlags    StoryResponseStickerNameEnum = "people_waving_flags"
	StoryResponseStickerNameEnumSplashingNarwhal     StoryResponseStickerNameEnum = "splashing_narwhal"
	StoryResponseStickerNameEnumTrophy               StoryResponseStickerNameEnum = "trophy"
	StoryResponseStickerNameEnumYetiRidingUnicorn    StoryResponseStickerNameEnum = "yeti_riding_unicorn"
	StoryResponseStickerNameEnumCelebratingPeople    StoryResponseStickerNameEnum = "celebrating_people"
	StoryResponseStickerNameEnumDeterminedClimbers   StoryResponseStickerNameEnum = "determined_climbers"
	StoryResponseStickerNameEnumPhoenixSpreadingLove StoryResponseStickerNameEnum = "phoenix_spreading_love"
)

func (e *StoryResponseStickerNameEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "green_checkmark":
		fallthrough
	case "people_dancing":
		fallthrough
	case "dancing_unicorn":
		fallthrough
	case "heart":
		fallthrough
	case "party_popper":
		fallthrough
	case "people_waving_flags":
		fallthrough
	case "splashing_narwhal":
		fallthrough
	case "trophy":
		fallthrough
	case "yeti_riding_unicorn":
		fallthrough
	case "celebrating_people":
		fallthrough
	case "determined_climbers":
		fallthrough
	case "phoenix_spreading_love":
		*e = StoryResponseStickerNameEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StoryResponseStickerNameEnum: %s", s)
	}
}

// StoryResponseTargetResourceSubtypeEnum - The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
// The resource_subtype `milestone` represent a single moment in time. This means tasks with this subtype cannot have a start_date.
type StoryResponseTargetResourceSubtypeEnum string

const (
	StoryResponseTargetResourceSubtypeEnumDefaultTask StoryResponseTargetResourceSubtypeEnum = "default_task"
	StoryResponseTargetResourceSubtypeEnumMilestone   StoryResponseTargetResourceSubtypeEnum = "milestone"
	StoryResponseTargetResourceSubtypeEnumSection     StoryResponseTargetResourceSubtypeEnum = "section"
	StoryResponseTargetResourceSubtypeEnumApproval    StoryResponseTargetResourceSubtypeEnum = "approval"
)

func (e *StoryResponseTargetResourceSubtypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "default_task":
		fallthrough
	case "milestone":
		fallthrough
	case "section":
		fallthrough
	case "approval":
		*e = StoryResponseTargetResourceSubtypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StoryResponseTargetResourceSubtypeEnum: %s", s)
	}
}

// StoryResponseTarget - The *task* is the basic object around which many operations in Asana are centered.
type StoryResponseTarget struct {
	// Globally unique identifier of the resource, as a string.
	Gid *string `json:"gid,omitempty"`
	// The name of the task.
	Name *string `json:"name,omitempty"`
	// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
	// The resource_subtype `milestone` represent a single moment in time. This means tasks with this subtype cannot have a start_date.
	ResourceSubtype *StoryResponseTargetResourceSubtypeEnum `json:"resource_subtype,omitempty"`
	// The base type of this resource.
	ResourceType *string `json:"resource_type,omitempty"`
}

type StoryResponseTypeEnum string

const (
	StoryResponseTypeEnumComment StoryResponseTypeEnum = "comment"
	StoryResponseTypeEnumSystem  StoryResponseTypeEnum = "system"
)

func (e *StoryResponseTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "comment":
		fallthrough
	case "system":
		*e = StoryResponseTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StoryResponseTypeEnum: %s", s)
	}
}

// StoryResponse - A story represents an activity associated with an object in the Asana system.
type StoryResponse struct {
	Assignee *UserCompact `json:"assignee,omitempty"`
	// The time at which this resource was created.
	CreatedAt      *time.Time          `json:"created_at,omitempty"`
	CreatedBy      *UserCompact        `json:"created_by,omitempty"`
	CustomField    *CustomFieldCompact `json:"custom_field,omitempty"`
	Dependency     *TaskCompact        `json:"dependency,omitempty"`
	DuplicateOf    *TaskCompact        `json:"duplicate_of,omitempty"`
	DuplicatedFrom *TaskCompact        `json:"duplicated_from,omitempty"`
	Follower       *UserCompact        `json:"follower,omitempty"`
	// Globally unique identifier of the resource, as a string.
	Gid *string `json:"gid,omitempty"`
	// *Deprecated - please use likes instead*
	// *Conditional*. True if the story is hearted by the authorized user, false if not.
	Hearted *bool `json:"hearted,omitempty"`
	// *Deprecated - please use likes instead*
	//
	// *Conditional*. Array of likes for users who have hearted this story.
	Hearts []Like `json:"hearts,omitempty"`
	// [Opt In](/docs/input-output-options). HTML formatted text for a comment. This will not include the name of the creator.
	HTMLText *string `json:"html_text,omitempty"`
	// *Conditional*. Whether the text of the story can be edited after creation.
	IsEditable *bool `json:"is_editable,omitempty"`
	// *Conditional*. Whether the text of the story has been edited after creation.
	IsEdited *bool `json:"is_edited,omitempty"`
	// *Conditional*. Whether the story should be pinned on the resource.
	IsPinned *bool `json:"is_pinned,omitempty"`
	// *Conditional*. True if the story is liked by the authorized user, false if not.
	Liked *bool `json:"liked,omitempty"`
	// *Conditional*. Array of likes for users who have liked this story.
	Likes []Like `json:"likes,omitempty"`
	// *Conditional*. The new value of approval status.
	NewApprovalStatus *string                    `json:"new_approval_status,omitempty"`
	NewDateValue      *StoryResponseNewDateValue `json:"new_date_value,omitempty"`
	// *Conditional*
	NewDates     *StoryResponseDates `json:"new_dates,omitempty"`
	NewEnumValue *EnumOption         `json:"new_enum_value,omitempty"`
	// *Conditional*. The new value of a multi-enum custom field story.
	NewMultiEnumValues []EnumOption `json:"new_multi_enum_values,omitempty"`
	// *Conditional*
	NewName *string `json:"new_name,omitempty"`
	// *Conditional*
	NewNumberValue *int64 `json:"new_number_value,omitempty"`
	// *Conditional*. The new value of a people custom field story.
	NewPeopleValue []UserCompact `json:"new_people_value,omitempty"`
	// *Conditional*
	NewResourceSubtype *string         `json:"new_resource_subtype,omitempty"`
	NewSection         *SectionCompact `json:"new_section,omitempty"`
	// *Conditional*
	NewTextValue *string `json:"new_text_value,omitempty"`
	// *Deprecated - please use likes instead*
	//
	// *Conditional*. The number of users who have hearted this story.
	NumHearts *int64 `json:"num_hearts,omitempty"`
	// *Conditional*. The number of users who have liked this story.
	NumLikes *int64 `json:"num_likes,omitempty"`
	// *Conditional*. The old value of approval status.
	OldApprovalStatus *string                    `json:"old_approval_status,omitempty"`
	OldDateValue      *StoryResponseOldDateValue `json:"old_date_value,omitempty"`
	// *Conditional*
	OldDates     *StoryResponseDates `json:"old_dates,omitempty"`
	OldEnumValue *EnumOption         `json:"old_enum_value,omitempty"`
	// *Conditional*. The old value of a multi-enum custom field story.
	OldMultiEnumValues []EnumOption `json:"old_multi_enum_values,omitempty"`
	// *Conditional*'
	OldName *string `json:"old_name,omitempty"`
	// *Conditional*
	OldNumberValue *int64 `json:"old_number_value,omitempty"`
	// *Conditional*. The old value of a people custom field story.
	OldPeopleValue []UserCompact `json:"old_people_value,omitempty"`
	// *Conditional*
	OldResourceSubtype *string         `json:"old_resource_subtype,omitempty"`
	OldSection         *SectionCompact `json:"old_section,omitempty"`
	// *Conditional*
	OldTextValue *string `json:"old_text_value,omitempty"`
	// *Conditional*. A collection of previews to be displayed in the story.
	//
	// *Note: This property only exists for comment stories.*
	Previews []Preview       `json:"previews,omitempty"`
	Project  *ProjectCompact `json:"project,omitempty"`
	// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
	ResourceSubtype *string `json:"resource_subtype,omitempty"`
	// The base type of this resource.
	ResourceType *string `json:"resource_type,omitempty"`
	// The component of the Asana product the user used to trigger the story.
	Source *StoryResponseSourceEnum `json:"source,omitempty"`
	// The name of the sticker in this story. `null` if there is no sticker.
	StickerName *StoryResponseStickerNameEnum `json:"sticker_name,omitempty"`
	Story       *StoryCompact                 `json:"story,omitempty"`
	Tag         *TagCompact                   `json:"tag,omitempty"`
	Target      *StoryResponseTarget          `json:"target,omitempty"`
	Task        *TaskCompact                  `json:"task,omitempty"`
	// The plain text of the comment to add. Cannot be used with html_text.
	Text *string                `json:"text,omitempty"`
	Type *StoryResponseTypeEnum `json:"type,omitempty"`
}
