// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DescribePortfolioXAmzTargetEnum
type DescribePortfolioXAmzTargetEnum string

const (
	DescribePortfolioXAmzTargetEnumAws242ServiceCatalogServiceDescribePortfolio DescribePortfolioXAmzTargetEnum = "AWS242ServiceCatalogService.DescribePortfolio"
)

func (e *DescribePortfolioXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AWS242ServiceCatalogService.DescribePortfolio":
		*e = DescribePortfolioXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribePortfolioXAmzTargetEnum: %s", s)
	}
}

type DescribePortfolioHeaders struct {
	XAmzAlgorithm     *string                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        DescribePortfolioXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DescribePortfolioRequest struct {
	Headers DescribePortfolioHeaders
	Request shared.DescribePortfolioInput `request:"mediaType=application/json"`
}

type DescribePortfolioResponse struct {
	ContentType string
	// Success
	DescribePortfolioOutput *shared.DescribePortfolioOutput
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
