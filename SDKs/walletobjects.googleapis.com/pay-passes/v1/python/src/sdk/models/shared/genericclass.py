"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import callbackoptions as shared_callbackoptions
from ..shared import classtemplateinfo as shared_classtemplateinfo
from ..shared import imagemoduledata as shared_imagemoduledata
from ..shared import linksmoduledata as shared_linksmoduledata
from ..shared import securityanimation as shared_securityanimation
from ..shared import textmoduledata as shared_textmoduledata
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GenericClassMultipleDevicesAndHoldersAllowedStatusEnum(str, Enum):
    r"""Identifies whether multiple users and devices will save the same object referencing this class."""
    STATUS_UNSPECIFIED = 'STATUS_UNSPECIFIED'
    MULTIPLE_HOLDERS_UPPER = 'MULTIPLE_HOLDERS'
    MULTIPLE_HOLDERS_MIXED = 'multipleHolders'
    ONE_USER_ALL_DEVICES_UPPER = 'ONE_USER_ALL_DEVICES'
    ONE_USER_ALL_DEVICES_MIXED = 'oneUserAllDevices'
    ONE_USER_ONE_DEVICE_UPPER = 'ONE_USER_ONE_DEVICE'
    ONE_USER_ONE_DEVICE_MIXED = 'oneUserOneDevice'

class GenericClassViewUnlockRequirementEnum(str, Enum):
    r"""View Unlock Requirement options for the generic pass."""
    VIEW_UNLOCK_REQUIREMENT_UNSPECIFIED = 'VIEW_UNLOCK_REQUIREMENT_UNSPECIFIED'
    UNLOCK_NOT_REQUIRED = 'UNLOCK_NOT_REQUIRED'
    UNLOCK_REQUIRED_TO_VIEW = 'UNLOCK_REQUIRED_TO_VIEW'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GenericClass:
    r"""Generic Class"""
    
    callback_options: Optional[shared_callbackoptions.CallbackOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('callbackOptions'), 'exclude': lambda f: f is None }})  
    class_template_info: Optional[shared_classtemplateinfo.ClassTemplateInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('classTemplateInfo'), 'exclude': lambda f: f is None }})  
    enable_smart_tap: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enableSmartTap'), 'exclude': lambda f: f is None }})
    r"""Available only to Smart Tap enabled partners. Contact support for additional guidance."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Required. The unique identifier for the class. This ID must be unique across all from an issuer. This value needs to follow the format `issuerID.identifier` where `issuerID` is issued by Google and `identifier` is chosen by you. The unique identifier can only include alphanumeric characters, `.`, `_`, or `-`."""  
    image_modules_data: Optional[list[shared_imagemoduledata.ImageModuleData]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageModulesData'), 'exclude': lambda f: f is None }})
    r"""Image module data. If `imageModulesData` is also defined on the object, both will be displayed. Only one of the image from class and one from object level will be rendered when both set."""  
    links_module_data: Optional[shared_linksmoduledata.LinksModuleData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('linksModuleData'), 'exclude': lambda f: f is None }})  
    multiple_devices_and_holders_allowed_status: Optional[GenericClassMultipleDevicesAndHoldersAllowedStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('multipleDevicesAndHoldersAllowedStatus'), 'exclude': lambda f: f is None }})
    r"""Identifies whether multiple users and devices will save the same object referencing this class."""  
    redemption_issuers: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('redemptionIssuers'), 'exclude': lambda f: f is None }})
    r"""Identifies which redemption issuers can redeem the pass over Smart Tap. Redemption issuers are identified by their issuer ID. Redemption issuers must have at least one Smart Tap key configured. The `enableSmartTap` and object level `smartTapRedemptionLevel` fields must also be set up correctly in order for a pass to support Smart Tap."""  
    security_animation: Optional[shared_securityanimation.SecurityAnimation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('securityAnimation'), 'exclude': lambda f: f is None }})  
    text_modules_data: Optional[list[shared_textmoduledata.TextModuleData]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('textModulesData'), 'exclude': lambda f: f is None }})
    r"""Text module data. If `textModulesData` is also defined on the object, both will be displayed. The maximum number of these fields displayed is 10 from class and 10 from object."""  
    view_unlock_requirement: Optional[GenericClassViewUnlockRequirementEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('viewUnlockRequirement'), 'exclude': lambda f: f is None }})
    r"""View Unlock Requirement options for the generic pass."""  
    