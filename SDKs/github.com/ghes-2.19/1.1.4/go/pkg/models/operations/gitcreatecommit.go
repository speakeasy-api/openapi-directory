// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

// GitCreateCommitRequestBodyAuthor - Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details.
type GitCreateCommitRequestBodyAuthor struct {
	// Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Date *time.Time `json:"date,omitempty"`
	// The email of the author (or committer) of the commit
	Email string `json:"email"`
	// The name of the author (or committer) of the commit
	Name string `json:"name"`
}

// GitCreateCommitRequestBodyCommitter - Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details.
type GitCreateCommitRequestBodyCommitter struct {
	// Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Date *time.Time `json:"date,omitempty"`
	// The email of the author (or committer) of the commit
	Email *string `json:"email,omitempty"`
	// The name of the author (or committer) of the commit
	Name *string `json:"name,omitempty"`
}

type GitCreateCommitRequestBody struct {
	// Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details.
	Author *GitCreateCommitRequestBodyAuthor `json:"author,omitempty"`
	// Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details.
	Committer *GitCreateCommitRequestBodyCommitter `json:"committer,omitempty"`
	// The commit message
	Message string `json:"message"`
	// The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.
	Parents []string `json:"parents,omitempty"`
	// The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.
	Signature *string `json:"signature,omitempty"`
	// The SHA of the tree object this commit points to
	Tree string `json:"tree"`
}

type GitCreateCommitRequest struct {
	RequestBody GitCreateCommitRequestBody `request:"mediaType=application/json"`
	Owner       string                     `pathParam:"style=simple,explode=false,name=owner"`
	Repo        string                     `pathParam:"style=simple,explode=false,name=repo"`
}

type GitCreateCommitResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Resource not found
	BasicError *shared.BasicError
	// Response
	GitCommit *shared.GitCommit
	// Validation failed
	ValidationError *shared.ValidationError
}
