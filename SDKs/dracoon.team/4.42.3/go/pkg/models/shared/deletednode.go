// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// DeletedNodeClassificationEnum - Classification ID:
//
// * `1` - public
//
// * `2` - internal
//
// * `3` - confidential
//
// * `4` - strictly confidential
//
// (default: classification from parent room)
type DeletedNodeClassificationEnum int

const (
	DeletedNodeClassificationEnumOne   DeletedNodeClassificationEnum = 1
	DeletedNodeClassificationEnumTwo   DeletedNodeClassificationEnum = 2
	DeletedNodeClassificationEnumThree DeletedNodeClassificationEnum = 3
	DeletedNodeClassificationEnumFour  DeletedNodeClassificationEnum = 4
)

func (e DeletedNodeClassificationEnum) ToPointer() *DeletedNodeClassificationEnum {
	return &e
}

func (e *DeletedNodeClassificationEnum) UnmarshalJSON(data []byte) error {
	var v int
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 4:
		*e = DeletedNodeClassificationEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeletedNodeClassificationEnum: %v", v)
	}
}

// DeletedNodeTypeEnum - Node type
type DeletedNodeTypeEnum string

const (
	DeletedNodeTypeEnumFolder DeletedNodeTypeEnum = "folder"
	DeletedNodeTypeEnumFile   DeletedNodeTypeEnum = "file"
)

func (e DeletedNodeTypeEnum) ToPointer() *DeletedNodeTypeEnum {
	return &e
}

func (e *DeletedNodeTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "folder":
		fallthrough
	case "file":
		*e = DeletedNodeTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeletedNodeTypeEnum: %v", v)
	}
}

// DeletedNode - Deleted node information (Deleted node can be a folder or file)
type DeletedNode struct {
	// Last access date
	AccessedAt *time.Time `json:"accessedAt,omitempty"`
	// Classification ID:
	//
	// * `1` - public
	//
	// * `2` - internal
	//
	// * `3` - confidential
	//
	// * `4` - strictly confidential
	//
	//
	//
	// (default: classification from parent room)
	Classification *DeletedNodeClassificationEnum `json:"classification,omitempty"`
	// Creation date
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// User information
	CreatedBy *UserInfo `json:"createdBy,omitempty"`
	// Deletion date
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	// User information
	DeletedBy *UserInfo `json:"deletedBy,omitempty"`
	// Expiration date
	ExpireAt *time.Time `json:"expireAt,omitempty"`
	// Node ID
	ID *int64 `json:"id,omitempty"`
	// Encryption state
	IsEncrypted *bool `json:"isEncrypted,omitempty"`
	// Node name
	Name string `json:"name"`
	// User notes
	Notes *string `json:"notes,omitempty"`
	// Parent node ID (room or folder)
	ParentID int64 `json:"parentId"`
	// Parent node path
	//
	// `/` if node is a root node (room)
	ParentPath string `json:"parentPath"`
	// &#128640; Since v4.37.0
	//
	// Reference ID. Identical across all versions of a file
	ReferenceID *int64 `json:"referenceId,omitempty"`
	// Node size in byte
	Size *int64 `json:"size,omitempty"`
	// Node type
	Type DeletedNodeTypeEnum `json:"type"`
	// Modification date
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	// User information
	UpdatedBy *UserInfo `json:"updatedBy,omitempty"`
}
