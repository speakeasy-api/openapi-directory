<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class RootArchive 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Disable location for archival and modification operations
     * 
     * Disables archiving and any changes to the data for the specified archival location. This operation disables snapshot upload, snapshot expiration, consolidation, and garbage collection operations on the archival location.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisableArchivalLocationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DisableArchivalLocationResponse
     */
	public function disableArchivalLocation(
        \OpenAPI\OpenAPI\Models\Operations\DisableArchivalLocationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DisableArchivalLocationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/archive/location/{id}/owner/disable', \OpenAPI\OpenAPI\Models\Operations\DisableArchivalLocationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisableArchivalLocationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Enable archival location for archival and modification operations
     * 
     * Enable archiving and other operations that were previously disabled on the specified archival location.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnableArchivalLocationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EnableArchivalLocationResponse
     */
	public function enableArchivalLocation(
        \OpenAPI\OpenAPI\Models\Operations\EnableArchivalLocationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EnableArchivalLocationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/archive/location/{id}/owner/enable', \OpenAPI\OpenAPI\Models\Operations\EnableArchivalLocationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnableArchivalLocationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Get the AWS account ID of an AWS S3 archival location
     * 
     * Get the AWS account ID of an AWS S3 archival location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAwsAccountIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAwsAccountIdResponse
     */
	public function getAwsAccountId(
        \OpenAPI\OpenAPI\Models\Operations\GetAwsAccountIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAwsAccountIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/archive/aws/s3/{id}/account_id', \OpenAPI\OpenAPI\Models\Operations\GetAwsAccountIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAwsAccountIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->stringResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StringResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Refresh archive information for a list of data sources
     * 
     * Update the current Rubrik CDM cluster with information about the changes made to a list of data sources in an archival location by the Rubrik CDM cluster that owns the archival location.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RefreshArchivalLocationDataSourcesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RefreshArchivalLocationDataSourcesResponse
     */
	public function refreshArchivalLocationDataSources(
        \OpenAPI\OpenAPI\Models\Operations\RefreshArchivalLocationDataSourcesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RefreshArchivalLocationDataSourcesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/archive/location/{location_id}/reader/refresh/data_sources', \OpenAPI\OpenAPI\Models\Operations\RefreshArchivalLocationDataSourcesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "readerRefreshDataSourcesRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RefreshArchivalLocationDataSourcesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->asyncRequestStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AsyncRequestStatus', 'json');
            }
        }

        return $response;
    }
}