// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetUsersSecurity struct {
	AuthHeader string `security:"scheme,type=apiKey,subtype=header,name=Authorization"`
	ClientID   string `security:"scheme,type=apiKey,subtype=query,name=client_id"`
}

type GetUsersRequest struct {
	// A comma separated list of track ids to filter on
	Ids *string `queryParam:"style=form,explode=true,name=ids"`
	// Number of results to return in the collection.
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// Returns paginated collection of items (recommended, returning a list without pagination is deprecated and should not be used)
	LinkedPartitioning *bool `queryParam:"style=form,explode=true,name=linked_partitioning"`
	// Offset of first result. Deprecated, use `linked_partitioning` instead.
	Offset *int64 `queryParam:"style=form,explode=true,name=offset"`
	// search
	Q string `queryParam:"style=form,explode=true,name=q"`
}

type GetUsers200ApplicationJSONType string

const (
	GetUsers200ApplicationJSONTypeUsers            GetUsers200ApplicationJSONType = "Users"
	GetUsers200ApplicationJSONTypeArrayOfUsersList GetUsers200ApplicationJSONType = "arrayOfUsersList"
)

type GetUsers200ApplicationJSON struct {
	Users            *shared.Users
	ArrayOfUsersList []shared.UsersList

	Type GetUsers200ApplicationJSONType
}

func CreateGetUsers200ApplicationJSONUsers(users shared.Users) GetUsers200ApplicationJSON {
	typ := GetUsers200ApplicationJSONTypeUsers

	return GetUsers200ApplicationJSON{
		Users: &users,
		Type:  typ,
	}
}

func CreateGetUsers200ApplicationJSONArrayOfUsersList(arrayOfUsersList []shared.UsersList) GetUsers200ApplicationJSON {
	typ := GetUsers200ApplicationJSONTypeArrayOfUsersList

	return GetUsers200ApplicationJSON{
		ArrayOfUsersList: arrayOfUsersList,
		Type:             typ,
	}
}

func (u *GetUsers200ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	users := new(shared.Users)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&users); err == nil {
		u.Users = users
		u.Type = GetUsers200ApplicationJSONTypeUsers
		return nil
	}

	arrayOfUsersList := []shared.UsersList{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfUsersList); err == nil {
		u.ArrayOfUsersList = arrayOfUsersList
		u.Type = GetUsers200ApplicationJSONTypeArrayOfUsersList
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetUsers200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.Users != nil {
		return json.Marshal(u.Users)
	}

	if u.ArrayOfUsersList != nil {
		return json.Marshal(u.ArrayOfUsersList)
	}

	return nil, nil
}

type GetUsersResponse struct {
	ContentType string
	// Bad Request
	Error       *shared.Error
	StatusCode  int
	RawResponse *http.Response
	// Success
	GetUsers200ApplicationJSONOneOf *GetUsers200ApplicationJSON
}
