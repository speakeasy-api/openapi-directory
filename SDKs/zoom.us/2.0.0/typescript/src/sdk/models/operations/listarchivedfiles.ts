/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Query data type for `from` and `to`.
 */
export enum ListArchivedFilesQueryDataTypeEnum {
  MeetingStartTime = "meeting_start_time",
  ArchiveCompleteTime = "archive_complete_time",
}

export class ListArchivedFilesRequest extends SpeakeasyBase {
  /**
   * Start date for the query in "yyyy-MM-dd'T'HH:mm:ss'Z'" format. The duration for the query defined using the "from" and "to" parameters should not exceed 7 days as this API only provides a week's data at once.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=from" })
  from?: string;

  /**
   * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=next_page_token",
  })
  nextPageToken?: string;

  /**
   * The number of records returned within a single API call.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=page_size",
  })
  pageSize?: number;

  /**
   * Query data type for `from` and `to`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=query_data_type",
  })
  queryDataType?: ListArchivedFilesQueryDataTypeEnum;

  /**
   * End date for the query in "yyyy-MM-dd'T'HH:mm:ss'Z'" format.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=to" })
  to?: string;
}

export class ListArchivedFiles200ApplicationXMLMeetingsArchiveFiles extends SpeakeasyBase {
  /**
   * The URL using which the archived file can be downloaded. To download the archived file of a meeting or a webinar hosted in your account, create a [Zoom JWT App Type](https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-jwt-app). Use the generated JWT token as the value of the access_token query parameter and include this query parameter at the end of the URL as shown in the example.
   *
   * @remarks
   *
   * Example: `https://{{base-domain}}/rec/archive/download/xxx?access_token={{Your-JWT}}`
   *
   * If a user has authorized and installed your OAuth app that supports archiving, use the user’s [OAuth access token](https://marketplace.zoom.us/docs/guides/auth/oauth) to download the file.
   *
   * Example: `https://{{base-domain}}/rec/archive/download/xxx?access_token={{ OAuth Access Token }}`
   */
  @SpeakeasyMetadata()
  downloadUrl?: string;

  /**
   * Extension of the recording file.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  fileExtension?: string;

  /**
   * The recording file size.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  fileSize?: number;

  /**
   * Recorded file type. The value of this field could be one of the following:
   *
   * @remarks
   *
   * `MP4`: Video file of the recording.<br>
   * `M4A`: Audio-only file of the recording.<br>
   * `TRANSCRIPT`: Transcription file of the recording in VTT format.
   * CHAT: A TXT file containing in-meeting chat messages that were sent during the meeting.<br>
   * `CC`: File containing closed captions of the recording in VTT file format.<br>
   * `CSV`: File containing polling data in csv format.
   */
  @SpeakeasyMetadata()
  fileType?: string;

  /**
   * Unique identifier of the archived file.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  id?: string;

  /**
   * The recording type. The value of this field can be one of the following:
   *
   * @remarks
   * * `shared_screen_with_speaker_view(CC)`
   * * `shared_screen_with_speaker_view`
   * * `shared_screen_with_gallery_view`
   * * `speaker_view`
   * * `gallery_view`
   * * `shared_screen`
   * * `audio_only`
   * * `audio_transcript`
   * * `chat_file`,
   * * `active_speaker`
   * * `host_video`
   *
   */
  @SpeakeasyMetadata()
  recordingType?: string;

  /**
   * Status of the archived file.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  status?: string;
}

export class ListArchivedFiles200ApplicationXMLMeetings extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: ListArchivedFiles200ApplicationXMLMeetingsArchiveFiles,
  })
  archiveFiles?: ListArchivedFiles200ApplicationXMLMeetingsArchiveFiles[];

  /**
   * Scheduled duration of the meeting or the webinar.
   */
  @SpeakeasyMetadata()
  duration?: number;

  /**
   * ID of the user set as the host of meeting or the webinar that was archived.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  hostId?: string;

  /**
   * Unique identifier of the meeting(meetingId) or the webinar(webinarId).
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  id?: number;

  /**
   * Number of recording files returned in the response of this API call.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  recordingCount?: number;

  /**
   * The time at which the meeting or the webinar started.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  startTime?: string;

  /**
   * Timezone of the host.
   */
  @SpeakeasyMetadata()
  timezone?: string;

  /**
   * Meeting or webinar topic.
   */
  @SpeakeasyMetadata()
  topic?: string;

  /**
   * Total size of the archive.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  totalSize?: number;

  /**
   * Type of the meeting or the webinar that was archived.<br>
   *
   * @remarks
   * <br>Meeting types:<br>
   * `1` - Instant meeting<br>
   * `2` - Scheduled meeting<br>
   * `3` - Recurring meeting with no fixed time<br>
   * 8 - Recurring meeting with fixed time
   *
   * Webinar types:<br>
   * `5` - Webinar<br>
   * `6` - Recurring webinar with no fixed time<br>
   * `9` - Recurring webinar with a fixed time
   *
   */
  @SpeakeasyMetadata()
  type?: number;

  /**
   * Unique identifier of the meeting instance or the webinar instance during which the archiving took place. Each instance of the meeting will have its own UUID.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  uuid?: string;
}

/**
 * **HTTP Status Code:** `200` **OK**
 *
 * @remarks
 * Archived files returned.
 *
 */
export class ListArchivedFiles200ApplicationXML extends SpeakeasyBase {
  /**
   * Start date for the query in "yyyy-MM-dd'T'HH:mm:ss'Z'" format. The duration for the query defined using the "from" and "to" parameters should not exceed 7 days as this API only provides a week's data at once.
   */
  @SpeakeasyMetadata()
  from?: string;

  @SpeakeasyMetadata({ elemType: ListArchivedFiles200ApplicationXMLMeetings })
  meetings?: ListArchivedFiles200ApplicationXMLMeetings[];

  /**
   * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   */
  @SpeakeasyMetadata()
  nextPageToken?: string;

  /**
   * The number of records returned within a single API call.
   */
  @SpeakeasyMetadata()
  pageSize?: number;

  /**
   * End date for the query in "yyyy-MM-dd'T'HH:mm:ss'Z'" format.
   */
  @SpeakeasyMetadata()
  to?: string;
}

export class ListArchivedFiles200ApplicationJSONMeetingsArchiveFiles extends SpeakeasyBase {
  /**
   * The URL using which the archived file can be downloaded. To download the archived file of a meeting or a webinar hosted in your account, create a [Zoom JWT App Type](https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-jwt-app). Use the generated JWT token as the value of the access_token query parameter and include this query parameter at the end of the URL as shown in the example.
   *
   * @remarks
   *
   * Example: `https://{{base-domain}}/rec/archive/download/xxx?access_token={{Your-JWT}}`
   *
   * If a user has authorized and installed your OAuth app that supports archiving, use the user’s [OAuth access token](https://marketplace.zoom.us/docs/guides/auth/oauth) to download the file.
   *
   * Example: `https://{{base-domain}}/rec/archive/download/xxx?access_token={{ OAuth Access Token }}`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "download_url" })
  downloadUrl?: string;

  /**
   * Extension of the recording file.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "file_extension" })
  fileExtension?: string;

  /**
   * The recording file size.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "file_size" })
  fileSize?: number;

  /**
   * Recorded file type. The value of this field could be one of the following:
   *
   * @remarks
   *
   * `MP4`: Video file of the recording.<br>
   * `M4A`: Audio-only file of the recording.<br>
   * `TRANSCRIPT`: Transcription file of the recording in VTT format.
   * CHAT: A TXT file containing in-meeting chat messages that were sent during the meeting.<br>
   * `CC`: File containing closed captions of the recording in VTT file format.<br>
   * `CSV`: File containing polling data in csv format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "file_type" })
  fileType?: string;

  /**
   * Unique identifier of the archived file.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * The recording type. The value of this field can be one of the following:
   *
   * @remarks
   * * `shared_screen_with_speaker_view(CC)`
   * * `shared_screen_with_speaker_view`
   * * `shared_screen_with_gallery_view`
   * * `speaker_view`
   * * `gallery_view`
   * * `shared_screen`
   * * `audio_only`
   * * `audio_transcript`
   * * `chat_file`,
   * * `active_speaker`
   * * `host_video`
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recording_type" })
  recordingType?: string;

  /**
   * Status of the archived file.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: string;
}

export class ListArchivedFiles200ApplicationJSONMeetings extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: ListArchivedFiles200ApplicationJSONMeetingsArchiveFiles,
  })
  @Expose({ name: "archive_files" })
  @Type(() => ListArchivedFiles200ApplicationJSONMeetingsArchiveFiles)
  archiveFiles?: ListArchivedFiles200ApplicationJSONMeetingsArchiveFiles[];

  /**
   * Scheduled duration of the meeting or the webinar.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "duration" })
  duration?: number;

  /**
   * ID of the user set as the host of meeting or the webinar that was archived.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "host_id" })
  hostId?: string;

  /**
   * Unique identifier of the meeting(meetingId) or the webinar(webinarId).
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * Number of recording files returned in the response of this API call.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recording_count" })
  recordingCount?: number;

  /**
   * The time at which the meeting or the webinar started.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "start_time" })
  startTime?: string;

  /**
   * Timezone of the host.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timezone" })
  timezone?: string;

  /**
   * Meeting or webinar topic.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "topic" })
  topic?: string;

  /**
   * Total size of the archive.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_size" })
  totalSize?: number;

  /**
   * Type of the meeting or the webinar that was archived.<br>
   *
   * @remarks
   * <br>Meeting types:<br>
   * `1` - Instant meeting<br>
   * `2` - Scheduled meeting<br>
   * `3` - Recurring meeting with no fixed time<br>
   * 8 - Recurring meeting with fixed time
   *
   * Webinar types:<br>
   * `5` - Webinar<br>
   * `6` - Recurring webinar with no fixed time<br>
   * `9` - Recurring webinar with a fixed time
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: number;

  /**
   * Unique identifier of the meeting instance or the webinar instance during which the archiving took place. Each instance of the meeting will have its own UUID.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uuid" })
  uuid?: string;
}

/**
 * **HTTP Status Code:** `200` **OK**
 *
 * @remarks
 * Archived files returned.
 *
 */
export class ListArchivedFiles200ApplicationJSON extends SpeakeasyBase {
  /**
   * Start date for the query in "yyyy-MM-dd'T'HH:mm:ss'Z'" format. The duration for the query defined using the "from" and "to" parameters should not exceed 7 days as this API only provides a week's data at once.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "from" })
  from?: string;

  @SpeakeasyMetadata({ elemType: ListArchivedFiles200ApplicationJSONMeetings })
  @Expose({ name: "meetings" })
  @Type(() => ListArchivedFiles200ApplicationJSONMeetings)
  meetings?: ListArchivedFiles200ApplicationJSONMeetings[];

  /**
   * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "next_page_token" })
  nextPageToken?: string;

  /**
   * The number of records returned within a single API call.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "page_size" })
  pageSize?: number;

  /**
   * End date for the query in "yyyy-MM-dd'T'HH:mm:ss'Z'" format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "to" })
  to?: string;
}

export class ListArchivedFilesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * **HTTP Status Code:** `200` **OK**
   *
   * @remarks
   * Archived files returned.
   *
   */
  @SpeakeasyMetadata()
  listArchivedFiles200ApplicationJSONObject?: ListArchivedFiles200ApplicationJSON;
}
