"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Drivers:
    r"""Drivers management"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_drivers_id_(self, request: operations.DeleteDriversIDRequest) -> operations.DeleteDriversIDResponse:
        r"""Delete a Driver"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteDriversIDRequest, base_url, '/drivers/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteDriversIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_drivers(self, request: operations.GetDriversRequest) -> operations.GetDriversResponse:
        r"""Fetch a list of Drivers
        Without params, it returns a list of Drivers the user has access to
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/drivers'
        
        query_params = utils.get_query_params(operations.GetDriversRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDriversResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Driver]])
                res.drivers = out

        return res

    def post_drivers(self, request: shared.Driver) -> operations.PostDriversResponse:
        r"""Create a Driver"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/drivers'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostDriversResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Driver])
                res.driver = out

        return res

    def put_drivers_id_(self, request: operations.PutDriversIDRequest) -> operations.PutDriversIDResponse:
        r"""Update a Driver"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutDriversIDRequest, base_url, '/drivers/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "driver", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutDriversIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Driver])
                res.driver = out

        return res

    