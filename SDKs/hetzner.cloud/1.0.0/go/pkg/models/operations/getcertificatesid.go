// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetCertificatesIDRequest struct {
	// ID of the resource
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
}

// GetCertificatesIDCertificateResponseCertificateStatusError - If issuance or renewal reports `failed`, this property contains information about what happened
type GetCertificatesIDCertificateResponseCertificateStatusError struct {
	Code    *string `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// GetCertificatesIDCertificateResponseCertificateStatusIssuanceEnum - Status of the issuance process of the Certificate
type GetCertificatesIDCertificateResponseCertificateStatusIssuanceEnum string

const (
	GetCertificatesIDCertificateResponseCertificateStatusIssuanceEnumPending   GetCertificatesIDCertificateResponseCertificateStatusIssuanceEnum = "pending"
	GetCertificatesIDCertificateResponseCertificateStatusIssuanceEnumCompleted GetCertificatesIDCertificateResponseCertificateStatusIssuanceEnum = "completed"
	GetCertificatesIDCertificateResponseCertificateStatusIssuanceEnumFailed    GetCertificatesIDCertificateResponseCertificateStatusIssuanceEnum = "failed"
)

func (e GetCertificatesIDCertificateResponseCertificateStatusIssuanceEnum) ToPointer() *GetCertificatesIDCertificateResponseCertificateStatusIssuanceEnum {
	return &e
}

func (e *GetCertificatesIDCertificateResponseCertificateStatusIssuanceEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "completed":
		fallthrough
	case "failed":
		*e = GetCertificatesIDCertificateResponseCertificateStatusIssuanceEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCertificatesIDCertificateResponseCertificateStatusIssuanceEnum: %v", v)
	}
}

// GetCertificatesIDCertificateResponseCertificateStatusRenewalEnum - Status of the renewal process of the Certificate.
type GetCertificatesIDCertificateResponseCertificateStatusRenewalEnum string

const (
	GetCertificatesIDCertificateResponseCertificateStatusRenewalEnumScheduled   GetCertificatesIDCertificateResponseCertificateStatusRenewalEnum = "scheduled"
	GetCertificatesIDCertificateResponseCertificateStatusRenewalEnumPending     GetCertificatesIDCertificateResponseCertificateStatusRenewalEnum = "pending"
	GetCertificatesIDCertificateResponseCertificateStatusRenewalEnumFailed      GetCertificatesIDCertificateResponseCertificateStatusRenewalEnum = "failed"
	GetCertificatesIDCertificateResponseCertificateStatusRenewalEnumUnavailable GetCertificatesIDCertificateResponseCertificateStatusRenewalEnum = "unavailable"
)

func (e GetCertificatesIDCertificateResponseCertificateStatusRenewalEnum) ToPointer() *GetCertificatesIDCertificateResponseCertificateStatusRenewalEnum {
	return &e
}

func (e *GetCertificatesIDCertificateResponseCertificateStatusRenewalEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "scheduled":
		fallthrough
	case "pending":
		fallthrough
	case "failed":
		fallthrough
	case "unavailable":
		*e = GetCertificatesIDCertificateResponseCertificateStatusRenewalEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCertificatesIDCertificateResponseCertificateStatusRenewalEnum: %v", v)
	}
}

// GetCertificatesIDCertificateResponseCertificateStatus - Current status of a type `managed` Certificate, always *null* for type `uploaded` Certificates
type GetCertificatesIDCertificateResponseCertificateStatus struct {
	// If issuance or renewal reports `failed`, this property contains information about what happened
	Error *GetCertificatesIDCertificateResponseCertificateStatusError `json:"error,omitempty"`
	// Status of the issuance process of the Certificate
	Issuance *GetCertificatesIDCertificateResponseCertificateStatusIssuanceEnum `json:"issuance,omitempty"`
	// Status of the renewal process of the Certificate.
	Renewal *GetCertificatesIDCertificateResponseCertificateStatusRenewalEnum `json:"renewal,omitempty"`
}

// GetCertificatesIDCertificateResponseCertificateTypeEnum - Type of the Certificate
type GetCertificatesIDCertificateResponseCertificateTypeEnum string

const (
	GetCertificatesIDCertificateResponseCertificateTypeEnumUploaded GetCertificatesIDCertificateResponseCertificateTypeEnum = "uploaded"
	GetCertificatesIDCertificateResponseCertificateTypeEnumManaged  GetCertificatesIDCertificateResponseCertificateTypeEnum = "managed"
)

func (e GetCertificatesIDCertificateResponseCertificateTypeEnum) ToPointer() *GetCertificatesIDCertificateResponseCertificateTypeEnum {
	return &e
}

func (e *GetCertificatesIDCertificateResponseCertificateTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "uploaded":
		fallthrough
	case "managed":
		*e = GetCertificatesIDCertificateResponseCertificateTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCertificatesIDCertificateResponseCertificateTypeEnum: %v", v)
	}
}

type GetCertificatesIDCertificateResponseCertificateUsedBy struct {
	// ID of resource referenced
	ID int64 `json:"id"`
	// Type of resource referenced
	Type string `json:"type"`
}

type GetCertificatesIDCertificateResponseCertificate struct {
	// Certificate and chain in PEM format, in order so that each record directly certifies the one preceding
	Certificate string `json:"certificate"`
	// Point in time when the Resource was created (in ISO-8601 format)
	Created string `json:"created"`
	// Domains and subdomains covered by the Certificate
	DomainNames []string `json:"domain_names"`
	// SHA256 fingerprint of the Certificate
	Fingerprint string `json:"fingerprint"`
	// ID of the Resource
	ID int64 `json:"id"`
	// User-defined labels (key-value pairs)
	Labels map[string]string `json:"labels"`
	// Name of the Resource. Must be unique per Project.
	Name string `json:"name"`
	// Point in time when the Certificate stops being valid (in ISO-8601 format)
	NotValidAfter string `json:"not_valid_after"`
	// Point in time when the Certificate becomes valid (in ISO-8601 format)
	NotValidBefore string `json:"not_valid_before"`
	// Current status of a type `managed` Certificate, always *null* for type `uploaded` Certificates
	Status *GetCertificatesIDCertificateResponseCertificateStatus `json:"status,omitempty"`
	// Type of the Certificate
	Type *GetCertificatesIDCertificateResponseCertificateTypeEnum `json:"type,omitempty"`
	// Resources currently using the Certificate
	UsedBy []GetCertificatesIDCertificateResponseCertificateUsedBy `json:"used_by"`
}

// GetCertificatesIDCertificateResponse - The `certificate` key contains a Certificate object
type GetCertificatesIDCertificateResponse struct {
	Certificate GetCertificatesIDCertificateResponseCertificate `json:"certificate"`
}

type GetCertificatesIDResponse struct {
	// The `certificate` key contains a Certificate object
	CertificateResponse *GetCertificatesIDCertificateResponse
	ContentType         string
	StatusCode          int
	RawResponse         *http.Response
}
