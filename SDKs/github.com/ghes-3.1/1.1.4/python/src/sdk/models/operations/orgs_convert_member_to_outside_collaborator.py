"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import basic_error as shared_basic_error
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OrgsConvertMemberToOutsideCollaboratorRequestBody:
    
    async_: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('async'), 'exclude': lambda f: f is None }})
    r"""When set to `true`, the request will be performed asynchronously. Returns a 202 status code when the job is successfully queued."""  
    

@dataclasses.dataclass
class OrgsConvertMemberToOutsideCollaboratorRequest:
    
    org: str = dataclasses.field(metadata={'path_param': { 'field_name': 'org', 'style': 'simple', 'explode': False }})
    r"""The organization name. The name is not case sensitive."""  
    username: str = dataclasses.field(metadata={'path_param': { 'field_name': 'username', 'style': 'simple', 'explode': False }})
    r"""The handle for the GitHub user account."""  
    request_body: Optional[OrgsConvertMemberToOutsideCollaboratorRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class OrgsConvertMemberToOutsideCollaboratorResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    basic_error: Optional[shared_basic_error.BasicError] = dataclasses.field(default=None)
    r"""Resource not found"""  
    orgs_convert_member_to_outside_collaborator_202_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""User is getting converted asynchronously"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    