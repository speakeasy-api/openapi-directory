/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class TypeaheadForWorkspaceRequest {
    /**
     * The number of results to return. The default is 20 if this parameter is omitted, with a minimum of 1 and a maximum of 100. If there are fewer results found than requested, all will be returned.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=count")
    public Long count;

    public TypeaheadForWorkspaceRequest withCount(Long count) {
        this.count = count;
        return this;
    }
    
    /**
     * Defines fields to return.
     * Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
     * The id of included objects will always be returned, regardless of the field options.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=opt_fields")
    public String[] optFields;

    public TypeaheadForWorkspaceRequest withOptFields(String[] optFields) {
        this.optFields = optFields;
        return this;
    }
    
    /**
     * Provides \u201cpretty\u201d output.
     * Provides the response in a \u201cpretty\u201d format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=opt_pretty")
    public Boolean optPretty;

    public TypeaheadForWorkspaceRequest withOptPretty(Boolean optPretty) {
        this.optPretty = optPretty;
        return this;
    }
    
    /**
     * The string that will be used to search for relevant objects. If an empty string is passed in, the API will return results.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=query")
    public String query;

    public TypeaheadForWorkspaceRequest withQuery(String query) {
        this.query = query;
        return this;
    }
    
    /**
     * The type of values the typeahead should return. You can choose from one of the following: `custom_field`, `project`, `project_template`, `portfolio`, `tag`, `task`, and `user`. Note that unlike in the names of endpoints, the types listed here are in singular form (e.g. `task`). Using multiple types is not yet supported.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=resource_type")
    public TypeaheadForWorkspaceResourceTypeEnum resourceType;

    public TypeaheadForWorkspaceRequest withResourceType(TypeaheadForWorkspaceResourceTypeEnum resourceType) {
        this.resourceType = resourceType;
        return this;
    }
    
    /**
     * *Deprecated: new integrations should prefer the resource_type field.*
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=type")
    public TypeaheadForWorkspaceTypeEnum type;

    public TypeaheadForWorkspaceRequest withType(TypeaheadForWorkspaceTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * Globally unique identifier for the workspace or organization.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=workspace_gid")
    public String workspaceGid;

    public TypeaheadForWorkspaceRequest withWorkspaceGid(String workspaceGid) {
        this.workspaceGid = workspaceGid;
        return this;
    }
    
    public TypeaheadForWorkspaceRequest(@JsonProperty("resource_type") TypeaheadForWorkspaceResourceTypeEnum resourceType, @JsonProperty("workspace_gid") String workspaceGid) {
        this.resourceType = resourceType;
        this.workspaceGid = workspaceGid;
  }
}
