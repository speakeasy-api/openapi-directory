<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class UpdateNotificationByIdUpdateNotificationByIdRequestBody
{
    /**
     * Type of action be notified about. Notifications will only be sent for the given type of action. Valid choices are **upload**, **download**, **delete** or **all** (upload/download/delete)
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\UpdateNotificationByIdUpdateNotificationByIdRequestBodyActionEnum $action
     */
	#[\JMS\Serializer\Annotation\SerializedName('action')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Operations\UpdateNotificationByIdUpdateNotificationByIdRequestBodyActionEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?UpdateNotificationByIdUpdateNotificationByIdRequestBodyActionEnum $action = null;
    
    /**
     * Custom message to insert into the notification emails, along with the matching activity.
     * 
     * @var ?string $message
     */
	#[\JMS\Serializer\Annotation\SerializedName('message')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $message = null;
    
    /**
     * Email addresses to send notification emails to. If empty, sends to the current user's email address.
     * 
     * @var ?array<string> $recipients
     */
	#[\JMS\Serializer\Annotation\SerializedName('recipients')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $recipients = null;
    
    /**
     * Whether an email should be sent to the recipients when matching activity happens.
     * 
     * @var ?bool $sendEmail
     */
	#[\JMS\Serializer\Annotation\SerializedName('sendEmail')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $sendEmail = null;
    
    /**
     * Determines which users' actions should trigger the notification. 
     * 
     * 
     * Rather than listing  individual users, you can also use 3 special options:
     * 
     * - **notice\_user\_all** for activity by any user or share recipient
     * - **notice\_user\_all\_users** for activity only by user accounts
     * - **notice\_user\_all\_recipients** for activity only by share recipients
     * 
     * @var ?array<string> $usernames
     */
	#[\JMS\Serializer\Annotation\SerializedName('usernames')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $usernames = null;
    
	public function __construct()
	{
		$this->action = null;
		$this->message = null;
		$this->recipients = null;
		$this->sendEmail = null;
		$this->usernames = null;
	}
}
