// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DescribeTrialComponentXAmzTargetEnum
type DescribeTrialComponentXAmzTargetEnum string

const (
	DescribeTrialComponentXAmzTargetEnumSageMakerDescribeTrialComponent DescribeTrialComponentXAmzTargetEnum = "SageMaker.DescribeTrialComponent"
)

func (e DescribeTrialComponentXAmzTargetEnum) ToPointer() *DescribeTrialComponentXAmzTargetEnum {
	return &e
}

func (e *DescribeTrialComponentXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SageMaker.DescribeTrialComponent":
		*e = DescribeTrialComponentXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeTrialComponentXAmzTargetEnum: %v", v)
	}
}

type DescribeTrialComponentRequest struct {
	DescribeTrialComponentRequest shared.DescribeTrialComponentRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                 *string                              `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256             *string                              `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                *string                              `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                      *string                              `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken             *string                              `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                 *string                              `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders             *string                              `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                    DescribeTrialComponentXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DescribeTrialComponentResponse struct {
	ContentType string
	// Success
	DescribeTrialComponentResponse *shared.DescribeTrialComponentResponse
	// ResourceNotFound
	ResourceNotFound interface{}
	StatusCode       int
	RawResponse      *http.Response
}
