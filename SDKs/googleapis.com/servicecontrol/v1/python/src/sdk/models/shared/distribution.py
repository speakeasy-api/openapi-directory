"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import exemplar as shared_exemplar
from ..shared import explicitbuckets as shared_explicitbuckets
from ..shared import exponentialbuckets as shared_exponentialbuckets
from ..shared import linearbuckets as shared_linearbuckets
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Distribution:
    r"""Distribution represents a frequency distribution of double-valued sample points. It contains the size of the population of sample points plus additional optional information: * the arithmetic mean of the samples * the minimum and maximum of the samples * the sum-squared-deviation of the samples, used to compute variance * a histogram of the values of the sample points"""
    
    bucket_counts: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bucketCounts'), 'exclude': lambda f: f is None }})
    r"""The number of samples in each histogram bucket. `bucket_counts` are optional. If present, they must sum to the `count` value. The buckets are defined below in `bucket_option`. There are N buckets. `bucket_counts[0]` is the number of samples in the underflow bucket. `bucket_counts[1]` to `bucket_counts[N-1]` are the numbers of samples in each of the finite buckets. And `bucket_counts[N] is the number of samples in the overflow bucket. See the comments of `bucket_option` below for more details. Any suffix of trailing zeros may be omitted."""  
    count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('count'), 'exclude': lambda f: f is None }})
    r"""The total number of samples in the distribution. Must be >= 0."""  
    exemplars: Optional[list[shared_exemplar.Exemplar]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exemplars'), 'exclude': lambda f: f is None }})
    r"""Example points. Must be in increasing order of `value` field."""  
    explicit_buckets: Optional[shared_explicitbuckets.ExplicitBuckets] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('explicitBuckets'), 'exclude': lambda f: f is None }})
    r"""Describing buckets with arbitrary user-provided width."""  
    exponential_buckets: Optional[shared_exponentialbuckets.ExponentialBuckets] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exponentialBuckets'), 'exclude': lambda f: f is None }})
    r"""Describing buckets with exponentially growing width."""  
    linear_buckets: Optional[shared_linearbuckets.LinearBuckets] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('linearBuckets'), 'exclude': lambda f: f is None }})
    r"""Describing buckets with constant width."""  
    maximum: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maximum'), 'exclude': lambda f: f is None }})
    r"""The maximum of the population of values. Ignored if `count` is zero."""  
    mean: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mean'), 'exclude': lambda f: f is None }})
    r"""The arithmetic mean of the samples in the distribution. If `count` is zero then this field must be zero."""  
    minimum: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minimum'), 'exclude': lambda f: f is None }})
    r"""The minimum of the population of values. Ignored if `count` is zero."""  
    sum_of_squared_deviation: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sumOfSquaredDeviation'), 'exclude': lambda f: f is None }})
    r"""The sum of squared deviations from the mean: Sum[i=1..count]((x_i - mean)^2) where each x_i is a sample values. If `count` is zero then this field must be zero, otherwise validation of the request fails."""  
    