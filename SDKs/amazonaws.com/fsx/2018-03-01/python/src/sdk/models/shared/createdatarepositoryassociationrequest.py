"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import s3datarepositoryconfiguration as shared_s3datarepositoryconfiguration
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateDataRepositoryAssociationRequest:
    
    data_repository_path: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DataRepositoryPath') }})  
    file_system_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FileSystemId') }})
    r"""The globally unique ID of the file system, assigned by Amazon FSx."""  
    batch_import_meta_data_on_create: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BatchImportMetaDataOnCreate'), 'exclude': lambda f: f is None }})  
    client_request_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClientRequestToken'), 'exclude': lambda f: f is None }})
    r"""(Optional) An idempotency token for resource creation, in a string of up to 64 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK."""  
    file_system_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FileSystemPath'), 'exclude': lambda f: f is None }})  
    imported_file_chunk_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ImportedFileChunkSize'), 'exclude': lambda f: f is None }})  
    s3: Optional[shared_s3datarepositoryconfiguration.S3DataRepositoryConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})
    r"""A list of <code>Tag</code> values, with a maximum of 50 elements."""  
    