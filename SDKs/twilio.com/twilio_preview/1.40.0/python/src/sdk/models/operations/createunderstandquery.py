"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import preview_understand_assistant_query as shared_preview_understand_assistant_query
from typing import Optional

CREATE_UNDERSTAND_QUERY_SERVERS = [
	"https://preview.twilio.com",
]


@dataclasses.dataclass
class CreateUnderstandQuerySecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    

@dataclasses.dataclass
class CreateUnderstandQueryCreateUnderstandQueryRequest:
    
    language: str = dataclasses.field(metadata={'form': { 'field_name': 'Language' }})
    r"""An ISO language-country string of the sample."""  
    query: str = dataclasses.field(metadata={'form': { 'field_name': 'Query' }})
    r"""A user-provided string that uniquely identifies this resource as an alternative to the sid. It can be up to 2048 characters long."""  
    field: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Field' }})
    r"""Constraints the query to a given Field with an task. Useful when you know the Field you are expecting. It accepts one field in the format *task-unique-name-1*:*field-unique-name*"""  
    model_build: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'ModelBuild' }})
    r"""The Model Build Sid or unique name of the Model Build to be queried."""  
    tasks: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Tasks' }})
    r"""Constraints the query to a set of tasks. Useful when you need to constrain the paths the user can take. Tasks should be comma separated *task-unique-name-1*, *task-unique-name-2*"""  
    

@dataclasses.dataclass
class CreateUnderstandQueryRequest:
    
    assistant_sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'AssistantSid', 'style': 'simple', 'explode': False }})
    r"""The unique ID of the parent Assistant."""  
    request_body: Optional[CreateUnderstandQueryCreateUnderstandQueryRequest] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/x-www-form-urlencoded' }})  
    

@dataclasses.dataclass
class CreateUnderstandQueryResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    preview_understand_assistant_query: Optional[shared_preview_understand_assistant_query.PreviewUnderstandAssistantQuery] = dataclasses.field(default=None)
    r"""Created"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    