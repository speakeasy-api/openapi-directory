"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Pfm:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_auth_token(self) -> operations.DeleteAuthTokenResponse:
        r"""Remove user access
        This endpoint removes the token in use.<br><br>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/auth/token'
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAuthTokenResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_users_id_user_(self, request: operations.GetUsersIDUserRequest) -> operations.GetUsersIDUserResponse:
        r"""Get a user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUsersIDUserRequest, base_url, '/users/{id_user}', request)
        
        query_params = utils.get_query_params(operations.GetUsersIDUserRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUsersIDUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.User])
                res.user = out

        return res

    def get_users_id_user_forecast(self, request: operations.GetUsersIDUserForecastRequest) -> operations.GetUsersIDUserForecastResponse:
        r"""Get forecast"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUsersIDUserForecastRequest, base_url, '/users/{id_user}/forecast', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUsersIDUserForecastResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_users_id_user_profiles(self, request: operations.GetUsersIDUserProfilesRequest) -> operations.GetUsersIDUserProfilesResponse:
        r"""Get profiles"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUsersIDUserProfilesRequest, base_url, '/users/{id_user}/profiles', request)
        
        query_params = utils.get_query_params(operations.GetUsersIDUserProfilesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUsersIDUserProfilesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetUsersIDUserProfiles200ApplicationJSON])
                res.get_users_id_user_profiles_200_application_json_object = out

        return res

    def get_users_id_user_profiles_main(self, request: operations.GetUsersIDUserProfilesMainRequest) -> operations.GetUsersIDUserProfilesMainResponse:
        r"""Get the main profile"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUsersIDUserProfilesMainRequest, base_url, '/users/{id_user}/profiles/main', request)
        
        query_params = utils.get_query_params(operations.GetUsersIDUserProfilesMainRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUsersIDUserProfilesMainResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Profile])
                res.profile = out

        return res

    def get_users_id_user_profiles_id_profile_(self, request: operations.GetUsersIDUserProfilesIDProfileRequest) -> operations.GetUsersIDUserProfilesIDProfileResponse:
        r"""Get a profile"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUsersIDUserProfilesIDProfileRequest, base_url, '/users/{id_user}/profiles/{id_profile}', request)
        
        query_params = utils.get_query_params(operations.GetUsersIDUserProfilesIDProfileRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUsersIDUserProfilesIDProfileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Profile])
                res.profile = out

        return res

    def post_auth_token(self, request: operations.PostAuthTokenRequestBody) -> operations.PostAuthTokenResponse:
        r"""Login to API with credentials
        Request a new user token by giving an username and a password. Or a manage payment token by giving a client<br><br><br><br>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/auth/token'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAuthTokenResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostAuthToken200ApplicationJSON])
                res.post_auth_token_200_application_json_object = out

        return res

    