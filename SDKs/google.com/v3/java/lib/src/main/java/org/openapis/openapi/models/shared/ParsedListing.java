/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ParsedListing - A parsed listing
 */
public class ParsedListing {
    /**
     * If not empty, it indicates that this listing belongs to a brand of the feed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("brand")
    public String brand;

    public ParsedListing withBrand(String brand) {
        this.brand = brand;
        return this;
    }
    
    /**
     * The partner provided category (accommodation type) of the property.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("category")
    public LocalizedText[] category;

    public ParsedListing withCategory(LocalizedText[] category) {
        this.category = category;
        return this;
    }
    
    /**
     * Data issues about this listing
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataIssueDetail")
    public DataIssueDetail[] dataIssueDetail;

    public ParsedListing withDataIssueDetail(DataIssueDetail[] dataIssueDetail) {
        this.dataIssueDetail = dataIssueDetail;
        return this;
    }
    
    /**
     * Description of the property.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public LocalizedText[] description;

    public ParsedListing withDescription(LocalizedText[] description) {
        this.description = description;
        return this;
    }
    
    /**
     * Images associated with this listing, localized.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image")
    public Image[] image;

    public ParsedListing withImage(Image[] image) {
        this.image = image;
        return this;
    }
    
    /**
     * Represents the accuracy of the location. The listing can be anywhere within the defined circular area.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("imprecisionRadiusMeters")
    public Integer imprecisionRadiusMeters;

    public ParsedListing withImprecisionRadiusMeters(Integer imprecisionRadiusMeters) {
        this.imprecisionRadiusMeters = imprecisionRadiusMeters;
        return this;
    }
    
    /**
     * Whether the listing can be served based on non image data alone.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isServed")
    public Boolean isServed;

    public ParsedListing withIsServed(Boolean isServed) {
        this.isServed = isServed;
        return this;
    }
    
    /**
     * List of localized names.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("listingName")
    public LocalizedText[] listingName;

    public ParsedListing withListingName(LocalizedText[] listingName) {
        this.listingName = listingName;
        return this;
    }
    
    /**
     * An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    public LatLng location;

    public ParsedListing withLocation(LatLng location) {
        this.location = location;
        return this;
    }
    
    /**
     * The list id on partner lec feed, provided by partner.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("partnerListId")
    public String partnerListId;

    public ParsedListing withPartnerListId(String partnerListId) {
        this.partnerListId = partnerListId;
        return this;
    }
    
    /**
     * The country code where the listing is located.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("regionCode")
    public String regionCode;

    public ParsedListing withRegionCode(String regionCode) {
        this.regionCode = regionCode;
        return this;
    }
    
    /**
     * Reviews associated with this listing. Each review proto has a single language attached to it.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("review")
    public Review[] review;

    public ParsedListing withReview(Review[] review) {
        this.review = review;
        return this;
    }
    
    /**
     * VR List attribute.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unitAttributes")
    public java.util.Map<String, String> unitAttributes;

    public ParsedListing withUnitAttributes(java.util.Map<String, String> unitAttributes) {
        this.unitAttributes = unitAttributes;
        return this;
    }
    
    public ParsedListing(){}
}
